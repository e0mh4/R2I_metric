{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_date.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401dd0",
            "funcEndAddr": "0x402540",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  char *v3; // r15\n  int v4; // r14d\n  char *v5; // r13\n  __int64 v7; // rbp\n  const char *v8; // rbx\n  int v9; // eax\n  const char *v10; // rax\n  __int64 v11; // rax\n  int v12; // edx\n  __int64 v13; // rax\n  char *v14; // rdi\n  FILE *v15; // r12\n  __ssize_t v16; // r14\n  char *v17; // rdi\n  char *v18; // rax\n  __int64 v19; // rbp\n  char *v20; // rax\n  __int64 v21; // rcx\n  unsigned int v22; // eax\n  char *v24; // rax\n  char v25; // al\n  char *v26; // rbp\n  int *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  const char *v30; // rsi\n  __int64 v31; // rbx\n  char *v32; // rax\n  char *v33; // rax\n  const char *v34; // rbx\n  int *v35; // rax\n  const char *v36; // rbx\n  int *v37; // rax\n  char *v38; // rax\n  const char *v39; // rbx\n  int *v40; // rax\n  const char *v41; // rsi\n  char *v42; // rax\n  struct timespec *n; // [rsp+8h] [rbp-110h]\n  __int64 v44; // [rsp+10h] [rbp-108h]\n  __int64 v45; // [rsp+18h] [rbp-100h]\n  char *v46; // [rsp+20h] [rbp-F8h]\n  char v47; // [rsp+2Ch] [rbp-ECh]\n  char *lineptr; // [rsp+38h] [rbp-E0h] BYREF\n  struct timespec tp; // [rsp+40h] [rbp-D8h] BYREF\n  struct stat stat_buf; // [rsp+50h] [rbp-C8h] BYREF\n\n  v3 = 0LL;\n  v4 = 0;\n  v5 = 0LL;\n  v7 = (__int64)a2;\n  v8 = 0LL;\n  sub_409F40(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_412A60(sub_403120);\n  n = 0LL;\n  v44 = 0LL;\n  while ( 1 )\n  {\n    v9 = sub_40D290((unsigned int)a1, a2, \"d:f:I::r:Rs:u\", &off_4141C0, 0LL);\n    if ( v9 == -1 )\n      break;\n    if ( v9 == 102 )\n    {\n      v5 = (char *)qword_61B4F0;\n    }\n    else if ( v9 <= 102 )\n    {\n      if ( v9 == 73 )\n      {\n        v11 = 0LL;\n        if ( qword_61B4F0 )\n          v11 = (unsigned int)dword_4143F0[sub_403040(\n                                             \"--iso-8601\",\n                                             qword_61B4F0,\n                                             off_414420,\n                                             dword_4143F0,\n                                             4LL,\n                                             off_61B278)];\n        v10 = (const char *)(32 * v11 + 4276416);\nLABEL_13:\n        if ( v8 )\n        {\n          v33 = dcgettext(0LL, \"multiple output formats specified\", 5);\n          error(1, 0, v33);\n          goto LABEL_80;\n        }\n        v8 = v10;\n      }\n      else\n      {\n        if ( v9 <= 73 )\n        {\n          if ( v9 == -131 )\n          {\n            sub_40C050(\n              (_DWORD)stdout,\n              (unsigned int)\"date\",\n              (unsigned int)&unk_412B52,\n              (_DWORD)off_61B270,\n              (unsigned int)\"David MacKenzie\",\n              0);\n            exit(0);\n          }\n          if ( v9 == -130 )\n            sub_402750(0);\nLABEL_78:\n          sub_402750(1);\n        }\n        if ( v9 == 82 )\n        {\n          v10 = \"%a, %d %b %Y %H:%M:%S %z\";\n          goto LABEL_13;\n        }\n        if ( v9 != 100 )\n          goto LABEL_78;\n        v3 = (char *)qword_61B4F0;\n      }\n    }\n    else if ( v9 == 117 )\n    {\n      if ( putenv(\"TZ=UTC0\") )\n        sub_40C3E0();\n      tzset();\n    }\n    else if ( v9 > 117 )\n    {\n      if ( v9 == 128 )\n      {\n        v10 = (const char *)(32LL\n                           * (unsigned int)dword_4143F8[sub_403040(\n                                                          \"--rfc-3339\",\n                                                          qword_61B4F0,\n                                                          off_414430,\n                                                          dword_4143F8,\n                                                          4LL,\n                                                          off_61B278)]\n                           + 4276576);\n        goto LABEL_13;\n      }\n      if ( v9 != 129 )\n        goto LABEL_78;\n      dword_61B338 |= 1u;\n    }\n    else if ( v9 == 114 )\n    {\n      n = (struct timespec *)qword_61B4F0;\n    }\n    else\n    {\n      if ( v9 != 115 )\n        goto LABEL_78;\n      v4 = 1;\n      v44 = qword_61B4F0;\n    }\n  }\n  v12 = (n != 0LL) + (v5 != 0LL) + (v3 != 0LL);\n  if ( v12 > 1 )\n  {\n    v41 = \"the options to specify dates for printing are mutually exclusive\";\n    goto LABEL_86;\n  }\n  if ( ((unsigned __int8)v4 & v12 & 1) != 0 )\n  {\n    v41 = \"the options to print and set the time may not be used together\";\nLABEL_86:\n    v42 = dcgettext(0LL, v41, 5);\n    error(0, 0, v42);\n    goto LABEL_78;\n  }\n  v13 = dword_61B2FC;\n  if ( dword_61B2FC >= a1 )\n    goto LABEL_40;\n  if ( dword_61B2FC + 1 < a1 )\n    goto LABEL_84;\n  v14 = a2[dword_61B2FC];\n  if ( *v14 == 43 )\n  {\n    if ( !v8 )\n    {\n      ++dword_61B2FC;\n      v8 = v14 + 1;\n      goto LABEL_40;\n    }\n    goto LABEL_82;\n  }\n  if ( (v12 & 1) != 0 || (_BYTE)v4 )\n  {\n    v30 = \"the argument %s lacks a leading '+';\\n\"\n          \"when using an option to specify date(s), any non-option\\n\"\n          \"argument must be a format string beginning with '+'\";\n    v31 = sub_40BB60(v14);\n    goto LABEL_77;\n  }\nLABEL_40:\n  if ( !v8 )\n  {\n    v28 = nl_langinfo(131180);\n    LOBYTE(v12) = (n != 0LL) + (v5 != 0LL) + (v3 != 0LL);\n    v8 = v28;\n    if ( !*v28 )\n      v8 = \"%a %b %e %H:%M:%S %Z %Y\";\n  }\n  v47 = v12;\n  v46 = getenv(\"TZ\");\n  v45 = sub_40DB40(v46);\n  if ( v5 )\n  {\n    if ( !strcmp(v5, \"-\") )\n    {\n      v24 = dcgettext(0LL, \"standard input\", 5);\n      v15 = (FILE *)stdin;\n      v5 = v24;\n      goto LABEL_44;\n    }\n    v15 = fopen(v5, \"r\");\n    if ( v15 )\n    {\nLABEL_44:\n      v7 = 1LL;\n      lineptr = 0LL;\n      tp.tv_sec = 0LL;\n      n = &tp;\n      while ( 1 )\n      {\n        v16 = __getdelim(&lineptr, (size_t *)&tp, 10, v15);\n        if ( v16 < 0 )\n          break;\n        if ( (unsigned __int8)sub_407BC0(&stat_buf, lineptr, 0LL, (unsigned int)dword_61B338, v45, v46) )\n        {\n          v7 = (unsigned int)sub_402620(v8, stat_buf.st_dev, stat_buf.st_ino, v45) & (unsigned int)v7;\n        }\n        else\n        {\n          v17 = lineptr;\n          v18 = &lineptr[v16 - 1];\n          if ( *v18 == 10 )\n          {\n            *v18 = 0;\n            v17 = lineptr;\n          }\n          v19 = sub_40BB60(v17);\n          v20 = dcgettext(0LL, \"invalid date %s\", 5);\n          v21 = v19;\n          v7 = 0LL;\n          error(0, 0, v20, v21);\n        }\n      }\n      if ( (unsigned int)sub_40C420(v15) != -1 )\n      {\n        free(lineptr);\n        return (unsigned __int8)v7 ^ 1u;\n      }\nLABEL_80:\n      v34 = (const char *)sub_40B9E0(0LL, 3LL, v5);\n      v35 = __errno_location();\n      error(1, *v35, \"%s\", v34);\nLABEL_81:\n      v36 = (const char *)sub_40B9E0(0LL, 3LL, n);\n      v37 = __errno_location();\n      error(1, *v37, \"%s\", v36);\nLABEL_82:\n      v38 = dcgettext(0LL, \"multiple output formats specified\", 5);\n      error(1, 0, v38);\n    }\n    v39 = (const char *)sub_40B9E0(0LL, 3LL, v5);\n    v40 = __errno_location();\n    error(1, *v40, \"%s\", v39);\nLABEL_84:\n    v30 = \"extra operand %s\";\n    v31 = sub_40BB60(*(_QWORD *)(v7 + 8 * v13 + 8));\nLABEL_77:\n    v32 = dcgettext(0LL, v30, 5);\n    error(0, 0, v32, v31);\n    goto LABEL_78;\n  }\n  v22 = v4 ^ 1;\n  LOBYTE(v22) = (v47 ^ 1) & (v4 ^ 1);\n  v5 = (char *)v22;\n  if ( (_BYTE)v22 )\n  {\n    if ( dword_61B2FC >= a1 )\n    {\n      sub_404BC0(&tp);\n      goto LABEL_56;\n    }\n    v3 = a2[dword_61B2FC];\n    v25 = sub_409C90(&tp, v3, 7LL);\n    tp.tv_nsec = 0LL;\n    if ( v25 )\n      goto LABEL_61;\n    goto LABEL_74;\n  }\n  if ( !n )\n  {\n    if ( v44 )\n      v3 = (char *)v44;\n    if ( (unsigned __int8)sub_407BC0(&tp, v3, 0LL, (unsigned int)dword_61B338, v45, v46) )\n      goto LABEL_54;\nLABEL_74:\n    v8 = (const char *)sub_40BB60(v3);\n    v29 = dcgettext(0LL, \"invalid date %s\", 5);\n    error(1, 0, v29, v8);\n    goto LABEL_61;\n  }\n  if ( __xstat(1, (const char *)n, &stat_buf) )\n    goto LABEL_81;\n  tp = stat_buf.st_mtim;\nLABEL_54:\n  if ( !(_BYTE)v4 )\n  {\nLABEL_55:\n    LODWORD(v5) = 1;\n    goto LABEL_56;\n  }\nLABEL_61:\n  if ( !(unsigned int)sub_40BB80(&tp) )\n    goto LABEL_55;\n  LODWORD(v5) = 0;\n  v26 = dcgettext(0LL, \"cannot set date\", 5);\n  v27 = __errno_location();\n  error(0, *v27, v26);\nLABEL_56:\n  LODWORD(v7) = sub_402620(v8, tp.tv_sec, tp.tv_nsec, v45) & (unsigned int)v5;\n  return (unsigned __int8)v7 ^ 1u;\n}\n"
        },
        {
            "funcName": "sub_40256B",
            "funcStartAddr": "0x40256b",
            "funcEndAddr": "0x40258a",
            "decompiledFuncCode": "__int64 *sub_40256B()\n{\n  return &program_invocation_short_name;\n}\n"
        },
        {
            "funcName": "sub_40258A",
            "funcStartAddr": "0x40258a",
            "funcEndAddr": "0x4025c1",
            "decompiledFuncCode": "__int64 sub_40258A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4025C1",
            "funcStartAddr": "0x4025c1",
            "funcEndAddr": "0x402618",
            "decompiledFuncCode": "__int64 *sub_4025C1()\n{\n  __int64 *result; // rax\n\n  if ( !byte_61B328 )\n  {\n    while ( qword_61B330 < (unsigned __int64)(&qword_61AE48 - qword_61AE40 - 1) )\n      ((void (*)(void))qword_61AE40[++qword_61B330])();\n    result = sub_40256B();\n    byte_61B328 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402618",
            "funcStartAddr": "0x402618",
            "funcEndAddr": "0x40261d",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_402618()\n{\n  return sub_40258A();\n}\n"
        },
        {
            "funcName": "sub_402620",
            "funcStartAddr": "0x402620",
            "funcEndAddr": "0x402744",
            "decompiledFuncCode": "__int64 __fastcall sub_402620(const char *a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  char *IO_write_ptr; // rax\n  __int64 v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // [rsp+0h] [rbp-88h] BYREF\n  __int64 v11; // [rsp+8h] [rbp-80h]\n  char v12[32]; // [rsp+10h] [rbp-78h] BYREF\n  char v13[88]; // [rsp+30h] [rbp-58h] BYREF\n\n  v10 = a2;\n  v11 = a3;\n  if ( sub_40DE20(a4, &v10, v13) )\n  {\n    if ( a1 == \"%a, %d %b %Y %H:%M:%S %z\" )\n    {\n      setlocale(2, \"C\");\n      sub_404BA0(stdout, \"%a, %d %b %Y %H:%M:%S %z\", v13, a4, (unsigned int)v11);\n      setlocale(2, \"\");\n    }\n    else\n    {\n      sub_404BA0(stdout, a1, v13, a4, (unsigned int)v11);\n    }\n    IO_write_ptr = stdout->_IO_write_ptr;\n    if ( IO_write_ptr >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, 10);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = IO_write_ptr + 1;\n      *IO_write_ptr = 10;\n    }\n    return 1LL;\n  }\n  else\n  {\n    v7 = sub_404C00(v10, v12);\n    v8 = sub_40BB60(v7);\n    v9 = dcgettext(0LL, \"time %s is out of range\", 5);\n    error(0, 0, v9, v8);\n    return 0LL;\n  }\n}\n"
        },
        {
            "funcName": "sub_402750",
            "funcStartAddr": "0x402750",
            "funcEndAddr": "0x402d65",
            "decompiledFuncCode": "void __fastcall __noreturn sub_402750(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  FILE *v24; // rbp\n  char *v25; // rax\n  FILE *v26; // rbp\n  char *v27; // rax\n  FILE *v28; // rbp\n  char *v29; // rax\n  FILE *v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rbp\n  char *v35; // rax\n  FILE *v36; // rbp\n  char *v37; // rax\n  FILE *v38; // rbp\n  char *v39; // rax\n  FILE *v40; // rbp\n  char *v41; // rax\n  FILE *v42; // rbp\n  char *v43; // rax\n  FILE *v44; // rbp\n  char *v45; // rax\n  FILE *v46; // rbp\n  char *v47; // rax\n  FILE *v48; // rbp\n  char *v49; // rax\n  FILE *v50; // rbp\n  char *v51; // rax\n  FILE *v52; // rbp\n  char *v53; // rax\n  FILE *v54; // rbp\n  char *v55; // rax\n  __int64 *v56; // rax\n  char *v57; // rbp\n  char *v58; // rax\n  char *v59; // rax\n  const char *v60; // r12\n  char *v61; // rax\n  char *v62; // rax\n  char *v63; // rax\n  char *v64; // rax\n  char *v65; // rax\n  char *v66; // rax\n  __int64 v67; // rcx\n  __int64 v68[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_61B350;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [+FORMAT]\\n  or:  %s [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]\\n\", 5);\n  __printf_chk(1LL, v3, v1, v1);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"Display the current time in the given FORMAT, or set the system date.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(0LL, \"  -d, --date=STRING          display time described by STRING, not 'now'\\n\", 5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"      --debug                annotate the parsed date,\\n\"\n          \"                              and warn about questionable usage to stderr\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(0LL, \"  -f, --file=DATEFILE        like --date; once for each line of DATEFILE\\n\", 5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"  -I[FMT], --iso-8601[=FMT]  output date/time in ISO 8601 format.\\n\"\n          \"                               FMT='date' for date only (the default),\\n\"\n          \"                               'hours', 'minutes', 'seconds', or 'ns'\\n\"\n          \"                               for date and time to the indicated precision.\\n\"\n          \"                               Example: 2006-08-14T02:34:56-06:00\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"  -R, --rfc-email            output date and time in RFC 5322 format.\\n\"\n          \"                               Example: Mon, 14 Aug 2006 02:34:56 -0600\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(\n          0LL,\n          \"      --rfc-3339=FMT         output date/time in RFC 3339 format.\\n\"\n          \"                               FMT='date', 'seconds', or 'ns'\\n\"\n          \"                               for date and time to the indicated precision.\\n\"\n          \"                               Example: 2006-08-14 02:34:56-06:00\\n\",\n          5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(0LL, \"  -r, --reference=FILE       display the last modification time of FILE\\n\", 5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(\n          0LL,\n          \"  -s, --set=STRING           set time described by STRING\\n\"\n          \"  -u, --utc, --universal     print or set Coordinated Universal Time (UTC)\\n\",\n          5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v27, v26);\n  v28 = stdout;\n  v29 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"FORMAT controls the output.  Interpreted sequences are:\\n\"\n          \"\\n\"\n          \"  %%   a literal %\\n\"\n          \"  %a   locale's abbreviated weekday name (e.g., Sun)\\n\",\n          5);\n  fputs_unlocked(v29, v28);\n  v30 = stdout;\n  v31 = dcgettext(\n          0LL,\n          \"  %A   locale's full weekday name (e.g., Sunday)\\n\"\n          \"  %b   locale's abbreviated month name (e.g., Jan)\\n\"\n          \"  %B   locale's full month name (e.g., January)\\n\"\n          \"  %c   locale's date and time (e.g., Thu Mar  3 23:05:25 2005)\\n\",\n          5);\n  fputs_unlocked(v31, v30);\n  v32 = stdout;\n  v33 = dcgettext(\n          0LL,\n          \"  %C   century; like %Y, except omit last two digits (e.g., 20)\\n\"\n          \"  %d   day of month (e.g., 01)\\n\"\n          \"  %D   date; same as %m/%d/%y\\n\"\n          \"  %e   day of month, space padded; same as %_d\\n\",\n          5);\n  fputs_unlocked(v33, v32);\n  v34 = stdout;\n  v35 = dcgettext(\n          0LL,\n          \"  %F   full date; same as %Y-%m-%d\\n\"\n          \"  %g   last two digits of year of ISO week number (see %G)\\n\"\n          \"  %G   year of ISO week number (see %V); normally useful only with %V\\n\",\n          5);\n  fputs_unlocked(v35, v34);\n  v36 = stdout;\n  v37 = dcgettext(\n          0LL,\n          \"  %h   same as %b\\n  %H   hour (00..23)\\n  %I   hour (01..12)\\n  %j   day of year (001..366)\\n\",\n          5);\n  fputs_unlocked(v37, v36);\n  v38 = stdout;\n  v39 = dcgettext(\n          0LL,\n          \"  %k   hour, space padded ( 0..23); same as %_H\\n\"\n          \"  %l   hour, space padded ( 1..12); same as %_I\\n\"\n          \"  %m   month (01..12)\\n\"\n          \"  %M   minute (00..59)\\n\",\n          5);\n  fputs_unlocked(v39, v38);\n  v40 = stdout;\n  v41 = dcgettext(\n          0LL,\n          \"  %n   a newline\\n\"\n          \"  %N   nanoseconds (000000000..999999999)\\n\"\n          \"  %p   locale's equivalent of either AM or PM; blank if not known\\n\"\n          \"  %P   like %p, but lower case\\n\"\n          \"  %q   quarter of year (1..4)\\n\"\n          \"  %r   locale's 12-hour clock time (e.g., 11:11:04 PM)\\n\"\n          \"  %R   24-hour hour and minute; same as %H:%M\\n\"\n          \"  %s   seconds since 1970-01-01 00:00:00 UTC\\n\",\n          5);\n  fputs_unlocked(v41, v40);\n  v42 = stdout;\n  v43 = dcgettext(\n          0LL,\n          \"  %S   second (00..60)\\n\"\n          \"  %t   a tab\\n\"\n          \"  %T   time; same as %H:%M:%S\\n\"\n          \"  %u   day of week (1..7); 1 is Monday\\n\",\n          5);\n  fputs_unlocked(v43, v42);\n  v44 = stdout;\n  v45 = dcgettext(\n          0LL,\n          \"  %U   week number of year, with Sunday as first day of week (00..53)\\n\"\n          \"  %V   ISO week number, with Monday as first day of week (01..53)\\n\"\n          \"  %w   day of week (0..6); 0 is Sunday\\n\"\n          \"  %W   week number of year, with Monday as first day of week (00..53)\\n\",\n          5);\n  fputs_unlocked(v45, v44);\n  v46 = stdout;\n  v47 = dcgettext(\n          0LL,\n          \"  %x   locale's date representation (e.g., 12/31/99)\\n\"\n          \"  %X   locale's time representation (e.g., 23:13:48)\\n\"\n          \"  %y   last two digits of year (00..99)\\n\"\n          \"  %Y   year\\n\",\n          5);\n  fputs_unlocked(v47, v46);\n  v48 = stdout;\n  v49 = dcgettext(\n          0LL,\n          \"  %z   +hhmm numeric time zone (e.g., -0400)\\n\"\n          \"  %:z  +hh:mm numeric time zone (e.g., -04:00)\\n\"\n          \"  %::z  +hh:mm:ss numeric time zone (e.g., -04:00:00)\\n\"\n          \"  %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)\\n\"\n          \"  %Z   alphabetic time zone abbreviation (e.g., EDT)\\n\"\n          \"\\n\"\n          \"By default, date pads numeric fields with zeroes.\\n\",\n          5);\n  fputs_unlocked(v49, v48);\n  v50 = stdout;\n  v51 = dcgettext(\n          0LL,\n          \"The following optional flags may follow '%':\\n\"\n          \"\\n\"\n          \"  -  (hyphen) do not pad the field\\n\"\n          \"  _  (underscore) pad with spaces\\n\"\n          \"  0  (zero) pad with zeros\\n\"\n          \"  ^  use upper case if possible\\n\"\n          \"  #  use opposite case if possible\\n\",\n          5);\n  fputs_unlocked(v51, v50);\n  v52 = stdout;\n  v53 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"After any flags comes an optional field width, as a decimal number;\\n\"\n          \"then an optional modifier, which is either\\n\"\n          \"E to use the locale's alternate representations if available, or\\n\"\n          \"O to use the locale's alternate numeric symbols if available.\\n\",\n          5);\n  fputs_unlocked(v53, v52);\n  v54 = stdout;\n  v55 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Examples:\\n\"\n          \"Convert seconds since the epoch (1970-01-01 UTC) to a date\\n\"\n          \"  $ date --date='@2147483647'\\n\"\n          \"\\n\"\n          \"Show the time on the west coast of the US (use tzselect(1) to find TZ)\\n\"\n          \"  $ TZ='America/Los_Angeles' date\\n\"\n          \"\\n\"\n          \"Show the local time for 9AM next Friday on the west coast of the US\\n\"\n          \"  $ date --date='TZ=\\\"America/Los_Angeles\\\" 09:00 next Fri'\\n\",\n          5);\n  fputs_unlocked(v55, v54);\n  v68[0] = (__int64)\"[\";\n  v56 = v68;\n  v68[1] = (__int64)\"test invocation\";\n  v68[2] = (__int64)\"coreutils\";\n  v68[3] = (__int64)\"Multi-call invocation\";\n  v68[4] = (__int64)\"sha224sum\";\n  v68[5] = (__int64)\"sha2 utilities\";\n  v68[6] = (__int64)\"sha256sum\";\n  v68[7] = (__int64)\"sha2 utilities\";\n  v68[8] = (__int64)\"sha384sum\";\n  v68[9] = (__int64)\"sha2 utilities\";\n  v68[10] = (__int64)\"sha512sum\";\n  v68[11] = (__int64)\"sha2 utilities\";\n  v68[12] = 0LL;\n  v68[13] = 0LL;\n  do\n    v56 += 2;\n  while ( *v56 && strcmp(\"date\", (const char *)*v56) );\n  v57 = (char *)v56[1];\n  if ( v57 )\n  {\n    v58 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v58, &unk_412B52, \"https://www.gnu.org/software/coreutils/\");\n    v59 = setlocale(5, 0LL);\n    if ( !v59 || !strncmp(v59, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v63 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v63, &unk_412B52, \"https://www.gnu.org/software/coreutils/\");\n    v64 = setlocale(5, 0LL);\n    if ( !v64 || !strncmp(v64, \"en_\", 3uLL) )\n    {\n      v57 = \"date\";\n      v65 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v60 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v65, \"https://www.gnu.org/software/coreutils/\", \"date\");\nLABEL_12:\n      v62 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v62, v57, v60);\nLABEL_3:\n      exit(status);\n    }\n    v57 = \"date\";\n  }\n  v66 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v66, \"date\", v67);\nLABEL_10:\n  v60 = \"Multi-call invocation\" + 10;\n  v61 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v61, \"https://www.gnu.org/software/coreutils/\", \"date\");\n  if ( v57 != \"date\" )\n    v60 = \"\";\n  goto LABEL_12;\n}\n"
        },
        {
            "funcName": "sub_402D70",
            "funcStartAddr": "0x402d70",
            "funcEndAddr": "0x402d7a",
            "decompiledFuncCode": "void __noreturn sub_402D70()\n{\n  sub_402750(1);\n}\n"
        },
        {
            "funcName": "sub_402D80",
            "funcStartAddr": "0x402d80",
            "funcEndAddr": "0x402e96",
            "decompiledFuncCode": "__int64 __fastcall sub_402D80(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n\n  v5 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += a4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( a3 )\n      {\n        v10 = memcmp(&a3[a4 * v14], v5, a4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += a4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    return v14;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_402EA0",
            "funcStartAddr": "0x402ea0",
            "funcEndAddr": "0x402f11",
            "decompiledFuncCode": "void __fastcall sub_402EA0(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_40BB40(1LL, a1);\n  v5 = sub_40B830(0LL, 8LL, a2);\n  error(0, 0, v3, v5, v4);\n}\n"
        },
        {
            "funcName": "sub_402F20",
            "funcStartAddr": "0x402f20",
            "funcEndAddr": "0x403038",
            "decompiledFuncCode": "int __fastcall sub_402F20(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  const char *v11; // rax\n  const char *v12; // rax\n  char *IO_write_ptr; // rax\n\n  v3 = 0LL;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, a2, a3) )\n    {\n      ++v9;\n      v3 = a2;\n      a2 += a3;\n      v11 = (const char *)sub_40BB60(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    a2 += a3;\n    v12 = (const char *)sub_40BB60(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  IO_write_ptr = stderr->_IO_write_ptr;\n  if ( IO_write_ptr >= stderr->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 10;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_403040",
            "funcStartAddr": "0x403040",
            "funcEndAddr": "0x4030b0",
            "decompiledFuncCode": "__int64 __fastcall sub_403040(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  __int64 result; // rax\n\n  result = sub_402D80(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_402EA0(a1, (__int64)a2, result);\n    sub_402F20((__int64 *)a3, a4, a5);\n    a6();\n    return -1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4030B0",
            "funcStartAddr": "0x4030b0",
            "funcEndAddr": "0x4030fd",
            "decompiledFuncCode": "__int64 __fastcall sub_4030B0(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  __int64 *v6; // rbx\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v6 = a2 + 1;\n    do\n    {\n      if ( !memcmp(s1, a3, a4) )\n        break;\n      v4 = *v6;\n      a3 += a4;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_403120",
            "funcStartAddr": "0x403120",
            "funcEndAddr": "0x4031be",
            "decompiledFuncCode": "__int64 sub_403120()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_40E0D0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_61B340 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_61B348 )\n      {\n        v5 = (const char *)sub_40B9B0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_40E0D0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4031C0",
            "funcStartAddr": "0x4031c0",
            "funcEndAddr": "0x403211",
            "decompiledFuncCode": "void __fastcall sub_4031C0(FILE *stream, unsigned __int8 *a2, __int64 a3)\n{\n  unsigned __int8 *v3; // rbx\n  unsigned __int8 *v4; // rbp\n  const __int32_t **v5; // r13\n  __int64 v6; // rcx\n\n  if ( a3 )\n  {\n    v3 = a2;\n    v4 = &a2[a3];\n    v5 = __ctype_tolower_loc();\n    do\n    {\n      v6 = *v3++;\n      fputc((*v5)[v6], stream);\n    }\n    while ( v3 != v4 );\n  }\n}\n"
        },
        {
            "funcName": "sub_403220",
            "funcStartAddr": "0x403220",
            "funcEndAddr": "0x403271",
            "decompiledFuncCode": "void __fastcall sub_403220(FILE *stream, unsigned __int8 *a2, __int64 a3)\n{\n  unsigned __int8 *v3; // rbx\n  unsigned __int8 *v4; // rbp\n  const __int32_t **v5; // r13\n  __int64 v6; // rcx\n\n  if ( a3 )\n  {\n    v3 = a2;\n    v4 = &a2[a3];\n    v5 = __ctype_toupper_loc();\n    do\n    {\n      v6 = *v3++;\n      fputc((*v5)[v6], stream);\n    }\n    while ( v3 != v4 );\n  }\n}\n"
        },
        {
            "funcName": "sub_403280",
            "funcStartAddr": "0x403280",
            "funcEndAddr": "0x404b9e",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_403280(\n        FILE *stream,\n        unsigned __int8 *a2,\n        __int64 a3,\n        char a4,\n        int a5,\n        __int64 a6,\n        int a7)\n{\n  unsigned __int8 *v8; // rbx\n  const char *v9; // r13\n  int v10; // ebp\n  int v11; // edi\n  unsigned __int64 v12; // r12\n  char *v13; // rbp\n  char v15; // bp\n  int v16; // r11d\n  int v17; // eax\n  char v18; // cl\n  int v19; // edi\n  bool v20; // cc\n  int v21; // r10d\n  int v22; // r15d\n  unsigned int v23; // edx\n  int v24; // esi\n  char v25; // al\n  int *v26; // rax\n  size_t v27; // rax\n  int v28; // r10d\n  size_t v29; // rbx\n  size_t v30; // rax\n  unsigned __int64 v31; // rsi\n  size_t v32; // r15\n  __int64 v33; // r13\n  int v34; // r9d\n  unsigned int v35; // esi\n  int v36; // edi\n  char v37; // bp\n  unsigned int v38; // r8d\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // rdx\n  unsigned __int64 v41; // rbp\n  unsigned __int64 v42; // r13\n  __int64 v43; // r15\n  __int64 v44; // r15\n  __int64 v45; // r13\n  char v46; // cl\n  unsigned __int8 *v47; // r15\n  unsigned __int64 v48; // rax\n  unsigned __int64 v49; // rdx\n  __int64 v50; // r13\n  unsigned __int64 v51; // r13\n  unsigned __int64 v52; // rax\n  __int64 v53; // rbp\n  unsigned __int64 v54; // rbx\n  unsigned __int64 v55; // rsi\n  __int64 v56; // r15\n  __int64 v57; // rbp\n  int v58; // edi\n  int v59; // edx\n  int v60; // esi\n  char *v61; // rcx\n  char *v62; // r13\n  unsigned __int8 *v63; // rax\n  char *v64; // r15\n  unsigned __int64 v65; // rax\n  int v66; // edx\n  unsigned __int64 v67; // rcx\n  __int64 v68; // rbp\n  unsigned __int64 v69; // rdx\n  char v70; // dl\n  size_t v71; // rax\n  __int64 v72; // r10\n  size_t v73; // r13\n  size_t v74; // rax\n  unsigned __int64 v75; // rdx\n  int v76; // r11d\n  __int64 v77; // rbp\n  char v78; // al\n  unsigned __int8 *v79; // rax\n  int v80; // ebp\n  unsigned __int64 v81; // rsi\n  __int64 i; // r13\n  __int64 v83; // rsi\n  int v84; // eax\n  int v85; // esi\n  __m128i v86; // xmm4\n  __m128i v87; // xmm2\n  __int64 v88; // rax\n  __int64 v89; // rax\n  __int64 v90; // rsi\n  __int64 v91; // rcx\n  int v92; // edx\n  unsigned __int8 v93; // al\n  unsigned __int8 v94; // dl\n  int v95; // r9d\n  unsigned __int64 v96; // rsi\n  __int64 v97; // rax\n  __int64 v98; // rbp\n  __int64 v99; // rbx\n  int v100; // ebp\n  __int32 v101; // esi\n  __int32 v102; // r13d\n  int v103; // r9d\n  int v104; // r8d\n  int v105; // eax\n  int v106; // r13d\n  int v107; // r13d\n  int v108; // edi\n  char v109; // al\n  char v110; // dl\n  __int64 v111; // r15\n  __int64 v112; // r13\n  int v113; // esi\n  int v114; // esi\n  char v115; // al\n  char *v116; // rdx\n  unsigned __int64 v117; // r15\n  __int64 n; // r13\n  unsigned __int64 v119; // rcx\n  __int64 v120; // rbp\n  int v121; // eax\n  unsigned __int64 v122; // rbp\n  unsigned __int64 v123; // rbp\n  __int64 v124; // rbx\n  __int64 v125; // rbp\n  unsigned __int64 v126; // rbx\n  __int64 v127; // rbp\n  unsigned __int8 *v128; // rax\n  unsigned __int64 v129; // rbx\n  unsigned __int8 *v130; // r15\n  __int64 j; // r15\n  int v132; // r9d\n  int v133; // edx\n  __int32 v134; // esi\n  __int32 v135; // edi\n  int k; // edi\n  __int64 v137; // rbp\n  __int64 v138; // rbx\n  unsigned __int64 v139; // rbp\n  __int64 v140; // rbx\n  __int64 v141; // rbx\n  __int64 v142; // rbx\n  unsigned __int64 v143; // r15\n  __int64 m; // r15\n  int v145; // [rsp-8h] [rbp-4E0h]\n  int v146; // [rsp+0h] [rbp-4D8h]\n  char v147; // [rsp+4h] [rbp-4D4h]\n  char v148; // [rsp+4h] [rbp-4D4h]\n  const __m128i *tp; // [rsp+8h] [rbp-4D0h]\n  int *v150; // [rsp+10h] [rbp-4C8h]\n  __int64 v151; // [rsp+18h] [rbp-4C0h]\n  int v152; // [rsp+20h] [rbp-4B8h]\n  char *v153; // [rsp+28h] [rbp-4B0h]\n  int v154; // [rsp+30h] [rbp-4A8h]\n  unsigned __int64 v155; // [rsp+30h] [rbp-4A8h]\n  const char *v156; // [rsp+30h] [rbp-4A8h]\n  int v157; // [rsp+30h] [rbp-4A8h]\n  int v158; // [rsp+30h] [rbp-4A8h]\n  int v159; // [rsp+30h] [rbp-4A8h]\n  int v160; // [rsp+30h] [rbp-4A8h]\n  char *v161; // [rsp+30h] [rbp-4A8h]\n  int v162; // [rsp+38h] [rbp-4A0h]\n  int v163; // [rsp+40h] [rbp-498h]\n  int v164; // [rsp+44h] [rbp-494h]\n  __int64 v165; // [rsp+48h] [rbp-490h]\n  char v166; // [rsp+48h] [rbp-490h]\n  signed int v167; // [rsp+48h] [rbp-490h]\n  int v168; // [rsp+48h] [rbp-490h]\n  int v169; // [rsp+48h] [rbp-490h]\n  char v170; // [rsp+48h] [rbp-490h]\n  char v171; // [rsp+48h] [rbp-490h]\n  __int64 v172; // [rsp+48h] [rbp-490h]\n  int v173; // [rsp+48h] [rbp-490h]\n  __int64 v174; // [rsp+48h] [rbp-490h]\n  int v175; // [rsp+50h] [rbp-488h]\n  int v176; // [rsp+50h] [rbp-488h]\n  char v177; // [rsp+50h] [rbp-488h]\n  char v178; // [rsp+50h] [rbp-488h]\n  int v179; // [rsp+50h] [rbp-488h]\n  int v180; // [rsp+50h] [rbp-488h]\n  int v181; // [rsp+50h] [rbp-488h]\n  unsigned __int64 v182; // [rsp+58h] [rbp-480h]\n  unsigned __int64 v183; // [rsp+58h] [rbp-480h]\n  __int64 v184; // [rsp+58h] [rbp-480h]\n  int v185; // [rsp+58h] [rbp-480h]\n  unsigned __int64 v186; // [rsp+58h] [rbp-480h]\n  int v187; // [rsp+58h] [rbp-480h]\n  int v188; // [rsp+58h] [rbp-480h]\n  unsigned __int64 v189; // [rsp+58h] [rbp-480h]\n  int v190; // [rsp+58h] [rbp-480h]\n  __int64 v191; // [rsp+60h] [rbp-478h]\n  int v192; // [rsp+60h] [rbp-478h]\n  int v193; // [rsp+60h] [rbp-478h]\n  int v194; // [rsp+60h] [rbp-478h]\n  unsigned __int8 *v195; // [rsp+60h] [rbp-478h]\n  unsigned __int8 *v196; // [rsp+60h] [rbp-478h]\n  int v197; // [rsp+68h] [rbp-470h]\n  int v198; // [rsp+68h] [rbp-470h]\n  unsigned __int64 v199; // [rsp+68h] [rbp-470h]\n  int v200; // [rsp+68h] [rbp-470h]\n  unsigned __int8 *v201; // [rsp+68h] [rbp-470h]\n  unsigned __int64 v202; // [rsp+70h] [rbp-468h]\n  unsigned __int8 *v203; // [rsp+70h] [rbp-468h]\n  char format[2]; // [rsp+80h] [rbp-458h] BYREF\n  char v205; // [rsp+82h] [rbp-456h] BYREF\n  int v206; // [rsp+83h] [rbp-455h] BYREF\n  char v207[9]; // [rsp+97h] [rbp-441h] BYREF\n  char s[16]; // [rsp+A0h] [rbp-438h] BYREF\n  __m128i v209; // [rsp+B0h] [rbp-428h]\n  __m128i v210; // [rsp+C0h] [rbp-418h]\n  __int64 v211; // [rsp+D0h] [rbp-408h]\n\n  v8 = a2;\n  v9 = *(const char **)(a3 + 48);\n  v10 = *(_DWORD *)(a3 + 8);\n  tp = (const __m128i *)a3;\n  v152 = a5;\n  v151 = a6;\n  if ( !v9 )\n    v9 = \"\";\n  HIBYTE(v163) = a4;\n  if ( v10 <= 12 )\n  {\n    if ( !v10 )\n      v10 = 12;\n  }\n  else\n  {\n    v10 -= 12;\n  }\n  v11 = (char)*a2;\n  v12 = 0LL;\n  if ( !*a2 )\n    return v12;\n  v164 = v10;\n  v150 = (int *)&v205;\n  v153 = (char *)v9;\n  while ( 2 )\n  {\n    if ( (_BYTE)v11 != 37 )\n    {\n      if ( v12 > 0xFFFFFFFFFFFFFFFDLL )\n        return 0LL;\n      if ( stream )\n        fputc(v11, stream);\n      ++v12;\n      v13 = (char *)v8;\n      goto LABEL_12;\n    }\n    v15 = 0;\n    v16 = 0;\n    v147 = HIBYTE(v163);\n    while ( 2 )\n    {\n      while ( 2 )\n      {\n        while ( 1 )\n        {\n          v17 = (char)*++v8;\n          v18 = *v8;\n          v19 = v17;\n          v20 = (char)*v8 <= 48;\n          if ( *v8 != 48 )\n            break;\nLABEL_25:\n          v16 = v17;\n        }\n        while ( v20 )\n        {\n          if ( (_BYTE)v17 != 35 )\n          {\n            if ( (_BYTE)v17 == 45 )\n              goto LABEL_25;\n            goto LABEL_27;\n          }\n          v17 = (char)*++v8;\n          v15 = 1;\n          v18 = *v8;\n          v19 = v17;\n          v20 = (char)*v8 <= 48;\n          if ( *v8 == 48 )\n            goto LABEL_25;\n        }\n        if ( (_BYTE)v17 == 94 )\n        {\n          v147 = 1;\n          continue;\n        }\n        break;\n      }\n      if ( (_BYTE)v17 == 95 )\n      {\n        v16 = v17;\n        continue;\n      }\n      break;\n    }\nLABEL_27:\n    v21 = -1;\n    if ( (unsigned int)(v17 - 48) > 9 )\n      goto LABEL_28;\n    v21 = 0;\n    while ( 1 )\n    {\n      v17 = (char)v8[1];\n      v18 = v8[1];\n      v23 = v17 - 48;\n      if ( v21 > 214748364 )\n        break;\n      v24 = (char)*v8;\n      if ( v21 == 214748364 && (char)v24 > 55 )\n        break;\n      ++v8;\n      v21 = v24 + 10 * v21 - 48;\nLABEL_40:\n      if ( v23 > 9 )\n      {\n        v19 = v17;\n        goto LABEL_28;\n      }\n    }\n    if ( v23 <= 9 )\n    {\n      v17 = (char)v8[2];\n      v21 = 0x7FFFFFFF;\n      v8 += 2;\n      v18 = v17;\n      v23 = v17 - 48;\n      goto LABEL_40;\n    }\n    v19 = (char)*++v8;\n    v21 = 0x7FFFFFFF;\nLABEL_28:\n    if ( v18 == 69 || (v22 = 0, v18 == 79) )\n    {\n      v19 = (char)v8[1];\n      v22 = v17;\n      ++v8;\n      v18 = v19;\n    }\n    switch ( v18 )\n    {\n      case 0:\n        v46 = *(v8 - 1);\n        v47 = v8 - 1;\n        goto LABEL_108;\n      case 37:\n        LODWORD(v48) = 0;\n        if ( v21 >= 0 )\n          LODWORD(v48) = v21;\n        v55 = 1LL;\n        v49 = ~v12;\n        v48 = (int)v48;\n        if ( (_DWORD)v48 )\n          v55 = (int)v48;\n        v155 = v55;\n        if ( !v22 )\n        {\n          if ( v49 > v55 )\n          {\n            if ( stream )\n            {\n              if ( v21 > 1 )\n              {\n                v56 = 0LL;\n                v57 = v21 - 1LL;\n                if ( v16 == 48 )\n                {\n                  do\n                  {\n                    ++v56;\n                    fputc(48, stream);\n                  }\n                  while ( v57 != v56 );\n                }\n                else\n                {\n                  do\n                  {\n                    ++v56;\n                    fputc(32, stream);\n                  }\n                  while ( v57 != v56 );\n                }\n                v19 = (char)*v8;\n              }\n              fputc(v19, stream);\n            }\nLABEL_136:\n            v12 += v155;\n            v13 = (char *)v8;\n            goto LABEL_12;\n          }\n          return 0LL;\n        }\n        v13 = (char *)v8;\n        v47 = v8;\n        v51 = 1LL;\n        goto LABEL_114;\n      case 58:\n        v115 = v8[1];\n        v116 = (char *)(v8 + 1);\n        for ( i = 1LL; v115 == 58; v116 = (char *)&v8[i] )\n          v115 = v8[++i];\n        if ( v115 != 122 )\n          goto LABEL_211;\n        v8 = (unsigned __int8 *)v116;\n        goto LABEL_219;\n      case 65:\n      case 66:\n      case 97:\n        if ( v22 )\n          goto LABEL_211;\n        v25 = v147;\n        if ( v15 )\n          v25 = v15;\n        v147 = v25;\nLABEL_49:\n        v166 = 0;\n        v13 = (char *)v8;\n        v22 = 0;\n        *(_WORD *)format = 9504;\n        v26 = v150;\n        goto LABEL_50;\n      case 67:\n        if ( v22 == 69 )\n          goto LABEL_375;\n        v34 = 2;\n        LOBYTE(v38) = tp[1].m128i_i32[1] < -1900;\n        v35 = tp[1].m128i_i32[1] / 100\n            + 19\n            - ((tp[1].m128i_i32[1] / 100 + 19 > 0) & ((unsigned int)(tp[1].m128i_i32[1] % 100) >> 31));\n        v36 = 0;\n        v37 = 0;\n        goto LABEL_73;\n      case 68:\n        if ( v22 )\n          goto LABEL_211;\n        v156 = \"%m/%d/%y\";\n        goto LABEL_83;\n      case 70:\n        if ( v22 )\n          goto LABEL_211;\n        v156 = \"%Y-%m-%d\";\nLABEL_83:\n        LODWORD(v165) = v21;\n        v176 = v16;\n        v39 = sub_403280(0LL, a7, v145, v146, (int)tp, (int)v150, v151, v152, (int)v153, (int)v156, v162, v163, v165);\n        v40 = 0LL;\n        if ( (int)v165 >= 0 )\n          v40 = (int)v165;\n        v41 = v40;\n        if ( v39 >= v40 )\n          v41 = v39;\n        if ( ~v12 <= v41 )\n          return 0LL;\n        if ( stream )\n        {\n          if ( v39 < v40 )\n          {\n            v42 = (int)v165 - v39;\n            if ( v176 == 48 )\n            {\n              if ( v42 )\n              {\n                for ( j = 0LL; j != v42; ++j )\n                  fputc(48, stream);\n              }\n            }\n            else\n            {\n              v43 = 0LL;\n              if ( v42 )\n              {\n                do\n                {\n                  ++v43;\n                  fputc(32, stream);\n                }\n                while ( v42 != v43 );\n              }\n            }\n          }\n          sub_403280(stream, a7, v145, v146, (int)tp, (int)v150, v151, v152, (int)v153, v157, v162, v163, v165);\n        }\n        goto LABEL_94;\n      case 71:\n      case 86:\n      case 103:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v100 = tp[1].m128i_i32[1];\n        v101 = tp[1].m128i_i32[3];\n        v102 = tp[1].m128i_i32[2];\n        v103 = v100 + ((v100 >> 31) & 0x190) - 100;\n        v104 = v102 - 382 + 7 * ((v101 - v102 + 382) / 7) + 3;\n        if ( v104 < 0 )\n        {\n          v132 = v100 + ((tp[1].m128i_i32[1] >> 31) & 0x190) - 101;\n          v133 = 365;\n          if ( (v132 & 3) == 0 )\n          {\n            v133 = 366;\n            if ( v132 == 100 * (v132 / 100) )\n              v133 = 366 - (v132 % 400 != 0);\n          }\n          v134 = v133 + v101;\n          v135 = v134 - v102;\n          v107 = -1;\n          v104 = v134 - (v135 + 382) + 7 * ((v135 + 382) / 7) + 3;\n        }\n        else\n        {\n          v105 = 365;\n          if ( (v103 & 3) == 0 )\n          {\n            v105 = 366;\n            if ( v103 == 100 * (v103 / 100) )\n              v105 = (v103 == 400 * (v103 / 400)) + 365;\n          }\n          v106 = v102 - 382 + 7 * ((v101 - v105 - v102 + 382) / 7) + 3;\n          if ( v106 >= 0 )\n            v104 = v106;\n          v107 = (v106 >> 31) + 1;\n        }\n        if ( v18 == 71 )\n        {\n          v35 = v100 + v107 + 1900;\n          v34 = 4;\n          LOBYTE(v38) = v100 < -1900 - v107;\n          v36 = 0;\n          v37 = 0;\n          goto LABEL_73;\n        }\n        if ( v18 == 103 )\n        {\n          v34 = 2;\n          v108 = (v107 + v100 % 100) % 100;\n          v35 = v108;\n          if ( v108 < 0 )\n          {\n            v35 = v108 + 100;\n            if ( v100 < -1900 - v107 )\n              v35 = -v108;\n          }\n        }\n        else\n        {\n          v34 = 2;\n          v35 = v104 / 7 + 1;\n        }\n        goto LABEL_72;\n      case 72:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v34 = 2;\n        v35 = tp->m128i_u32[2];\n        goto LABEL_72;\n      case 73:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v35 = v164;\n        v34 = 2;\n        goto LABEL_72;\n      case 77:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v34 = 2;\n        v35 = tp->m128i_u32[1];\n        goto LABEL_72;\n      case 78:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        if ( v21 == -1 )\n        {\n          v35 = a7;\n          v21 = 9;\n          v34 = 9;\n        }\n        else\n        {\n          if ( v21 > 8 )\n          {\n            v35 = a7;\n          }\n          else\n          {\n            v35 = a7;\n            for ( k = v21; k != 9; ++k )\n              v35 = (int)v35 / 10;\n          }\n          v34 = v21;\n        }\n        goto LABEL_72;\n      case 80:\n        v170 = 1;\n        goto LABEL_276;\n      case 82:\n        v156 = \"%H:%M\";\n        goto LABEL_83;\n      case 83:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v34 = 2;\n        v35 = tp->m128i_i32[0];\n        goto LABEL_72;\n      case 84:\n        v156 = \"%H:%M:%S\";\n        goto LABEL_83;\n      case 85:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v58 = tp[1].m128i_i32[3] - tp[1].m128i_i32[2] + 7;\n        v59 = (unsigned __int64)(-1840700269LL * v58) >> 32;\n        goto LABEL_143;\n      case 87:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v58 = 7 * ((tp[1].m128i_i32[2] + 6) / 7) - (tp[1].m128i_i32[2] + 6) + tp[1].m128i_i32[3] + 7;\n        v59 = (unsigned __int64)(-1840700269LL * v58) >> 32;\nLABEL_143:\n        v34 = 2;\n        v35 = ((v59 + v58) >> 2) - (v58 >> 31);\n        goto LABEL_72;\n      case 88:\n      case 99:\n      case 120:\n        if ( v22 != 79 )\n          goto LABEL_67;\n        goto LABEL_211;\n      case 89:\n        if ( v22 == 69 )\n          goto LABEL_375;\n        if ( v22 == 79 )\n          goto LABEL_211;\n        v34 = 4;\n        v60 = tp[1].m128i_i32[1];\n        LOBYTE(v38) = v60 < -1900;\n        v35 = v60 + 1900;\n        v36 = 0;\n        v37 = 0;\n        goto LABEL_149;\n      case 90:\n        v70 = v147;\n        v159 = v21;\n        if ( v15 )\n          v70 = 0;\n        v168 = v16;\n        v148 = v70;\n        v71 = strlen(v153);\n        v72 = v159;\n        v73 = v71;\n        v74 = 0LL;\n        if ( v159 >= 0 )\n          v74 = v159;\n        v75 = v74;\n        if ( v73 >= v74 )\n          v75 = v73;\n        v155 = v75;\n        if ( ~v12 <= v75 )\n          return 0LL;\n        if ( stream )\n        {\n          v76 = v168;\n          if ( v73 < v74 )\n          {\n            v165 = v72 - v73;\n            if ( v76 == 48 )\n            {\n              if ( v165 )\n              {\n                for ( m = 0LL; m != v165; ++m )\n                  fputc(48, stream);\n              }\n            }\n            else if ( v72 != v73 )\n            {\n              v178 = v15;\n              v77 = 0LL;\n              do\n              {\n                ++v77;\n                fputc(32, stream);\n              }\n              while ( v165 != v77 );\n              v15 = v178;\n            }\n          }\n          if ( v15 )\n          {\n            sub_4031C0(stream, (unsigned __int8 *)v153, v73);\n          }\n          else if ( v148 )\n          {\n            sub_403220(stream, (unsigned __int8 *)v153, v73);\n          }\n          else\n          {\n            fwrite(v153, v73, 1uLL, stream);\n          }\n        }\n        goto LABEL_136;\n      case 98:\n      case 104:\n        v78 = v147;\n        if ( v15 )\n          v78 = v15;\n        v147 = v78;\n        if ( v22 )\n          goto LABEL_211;\n        goto LABEL_49;\n      case 100:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v34 = 2;\n        v35 = tp->m128i_u32[3];\n        goto LABEL_72;\n      case 101:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v35 = tp->m128i_u32[3];\n        goto LABEL_185;\n      case 106:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v34 = 3;\n        v114 = tp[1].m128i_i32[3];\n        LOBYTE(v38) = v114 < -1;\n        v35 = v114 + 1;\n        v36 = 0;\n        v37 = 0;\n        goto LABEL_73;\n      case 107:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v35 = tp->m128i_u32[2];\n        goto LABEL_185;\n      case 108:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v35 = v164;\nLABEL_185:\n        v34 = 2;\n        if ( v16 != 48 && v16 != 45 )\n          v16 = 95;\n        goto LABEL_72;\n      case 109:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v34 = 2;\n        v113 = tp[1].m128i_i32[0];\n        LOBYTE(v38) = v113 < -1;\n        v35 = v113 + 1;\n        v36 = 0;\n        v37 = 0;\n        goto LABEL_73;\n      case 110:\n        LODWORD(v41) = 0;\n        if ( v21 >= 0 )\n          LODWORD(v41) = v21;\n        v41 = (int)v41;\n        if ( !(_DWORD)v41 )\n          v41 = 1LL;\n        if ( ~v12 <= v41 )\n          return 0LL;\n        if ( stream )\n        {\n          if ( v21 > 1 )\n          {\n            v111 = 0LL;\n            v112 = v21 - 1LL;\n            if ( v16 == 48 )\n            {\n              do\n              {\n                ++v111;\n                fputc(48, stream);\n              }\n              while ( v112 != v111 );\n            }\n            else\n            {\n              do\n              {\n                ++v111;\n                fputc(32, stream);\n              }\n              while ( v112 != v111 );\n            }\n          }\n          fputc(10, stream);\n        }\n        goto LABEL_94;\n      case 112:\n        v170 = 0;\nLABEL_276:\n        v109 = v170;\n        v110 = v147;\n        v18 = 112;\n        if ( v15 )\n          v109 = v15;\n        v166 = v109;\n        if ( v15 )\n          v110 = 0;\n        v147 = v110;\n        goto LABEL_68;\n      case 113:\n        v34 = 1;\n        if ( v22 == 79 )\n          goto LABEL_75;\n        v37 = 0;\n        LOBYTE(v38) = 0;\n        v36 = 0;\n        v35 = ((11 * tp[1].m128i_i32[0]) >> 5) + 1;\n        goto LABEL_151;\n      case 114:\nLABEL_67:\n        v166 = 0;\nLABEL_68:\n        *(_WORD *)format = 9504;\n        if ( !v22 )\n        {\n          v13 = (char *)v8;\n          v26 = v150;\n          goto LABEL_50;\n        }\n        v34 = 0;\n        goto LABEL_76;\n      case 115:\n        v179 = v21;\n        v169 = v16;\n        v62 = v207;\n        v86 = _mm_loadu_si128(tp + 2);\n        v87 = _mm_loadu_si128(tp + 1);\n        v88 = tp[3].m128i_i64[0];\n        *(__m128i *)s = _mm_loadu_si128(tp);\n        v209 = v87;\n        v162 = v86.m128i_i32[2];\n        v210 = v86;\n        v211 = v88;\n        v89 = sub_40DED0(v151, s);\n        v16 = v169;\n        v21 = v179;\n        v90 = v89;\n        v91 = v89;\n        do\n        {\n          v92 = v91 % 10;\n          v91 /= 10LL;\n          v93 = 48 - v92;\n          v94 = v92 + 48;\n          if ( v90 < 0 )\n            v94 = v93;\n          *--v62 = v94;\n        }\n        while ( v91 );\n        v95 = 1;\n        if ( v179 > 0 )\n          v95 = v179;\n        v158 = v95;\n        if ( v90 >= 0 )\n          goto LABEL_235;\n        goto LABEL_319;\n      case 116:\n        LODWORD(v41) = 0;\n        if ( v21 >= 0 )\n          LODWORD(v41) = v21;\n        v41 = (int)v41;\n        if ( !(_DWORD)v41 )\n          v41 = 1LL;\n        if ( ~v12 <= v41 )\n          return 0LL;\n        if ( stream )\n        {\n          if ( v21 > 1 )\n          {\n            v44 = 0LL;\n            v45 = v21 - 1LL;\n            if ( v16 == 48 )\n            {\n              do\n              {\n                ++v44;\n                fputc(48, stream);\n              }\n              while ( v45 != v44 );\n            }\n            else\n            {\n              do\n              {\n                ++v44;\n                fputc(32, stream);\n              }\n              while ( v45 != v44 );\n            }\n          }\n          fputc(9, stream);\n        }\nLABEL_94:\n        v12 += v41;\n        v13 = (char *)v8;\n        goto LABEL_12;\n      case 117:\n        v34 = 1;\n        v35 = (tp[1].m128i_i32[2] + 6) % 7 + 1;\n        goto LABEL_72;\n      case 119:\n        if ( v22 == 69 )\n          goto LABEL_211;\n        v34 = 1;\n        v35 = tp[1].m128i_u32[2];\n        goto LABEL_72;\n      case 121:\n        if ( v22 == 69 )\n        {\nLABEL_375:\n          v34 = 0;\n          goto LABEL_75;\n        }\n        v34 = 2;\n        v35 = tp[1].m128i_i32[1] % 100;\n        if ( (v35 & 0x80000000) != 0 )\n        {\n          v35 += 100;\n          if ( tp[1].m128i_i32[1] <= -1901 )\n            v35 = -(tp[1].m128i_i32[1] % 100);\n        }\nLABEL_72:\n        v36 = 0;\n        v37 = 0;\n        v38 = v35 >> 31;\n        goto LABEL_73;\n      case 122:\n        i = 0LL;\nLABEL_219:\n        if ( tp[2].m128i_i32[0] < 0 )\n        {\n          v13 = (char *)v8;\n          goto LABEL_12;\n        }\n        v83 = tp[2].m128i_i64[1];\n        LOBYTE(v38) = 1;\n        if ( (int)v83 >= 0 )\n        {\n          LOBYTE(v38) = 0;\n          if ( !(_DWORD)v83 )\n            LOBYTE(v38) = *v153 == 45;\n        }\n        v160 = (int)v83 / 3600;\n        v84 = (int)v83 / 60 % 60;\n        v36 = v84;\n        v85 = (int)v83 % 60;\n        if ( i == 1 )\n          goto LABEL_405;\n        if ( i )\n        {\n          if ( i == 2 )\n            goto LABEL_404;\n          if ( i != 3 )\n          {\n            v46 = *v8;\n            v47 = v8;\nLABEL_108:\n            LODWORD(v48) = 0;\n            if ( v21 >= 0 )\n              LODWORD(v48) = v21;\n            v49 = ~v12;\n            v48 = (int)v48;\n            if ( v46 == 37 )\n            {\n              v50 = 1LL;\n              v13 = (char *)v47;\n              if ( (_DWORD)v48 )\n                v50 = (int)v48;\n              v155 = v50;\n              v51 = 1LL;\n            }\n            else\n            {\n              v8 = v47;\nLABEL_211:\n              v79 = v8 - 1;\n              do\n              {\n                v47 = v79;\n                v80 = (_DWORD)v8 - 1 + 2 - (_DWORD)v79--;\n              }\n              while ( v79[1] != 37 );\n              LODWORD(v48) = 0;\n              v51 = v80;\n              if ( v21 >= 0 )\n                LODWORD(v48) = v21;\n              v49 = ~v12;\n              v13 = (char *)v8;\n              v48 = (int)v48;\n              v81 = (int)v48;\n              if ( v51 >= (int)v48 )\n                v81 = v51;\n              v155 = v81;\n            }\nLABEL_114:\n            if ( v49 <= v155 )\n              return 0LL;\n            if ( !stream )\n            {\nLABEL_65:\n              v12 += v155;\n              goto LABEL_12;\n            }\n            if ( v51 < v48 )\n            {\n              v52 = v21 - v51;\n              if ( v16 != 48 )\n              {\n                if ( !v52 )\n                  goto LABEL_122;\n                v165 = (__int64)v13;\n                v53 = 0LL;\n                v54 = v21 - v51;\n                do\n                {\n                  ++v53;\n                  fputc(32, stream);\n                }\n                while ( v54 != v53 );\n                goto LABEL_121;\n              }\n              v126 = v21 - v51;\n              if ( v52 )\n              {\n                v165 = (__int64)v13;\n                v127 = 0LL;\n                do\n                {\n                  ++v127;\n                  fputc(48, stream);\n                }\n                while ( v126 != v127 );\nLABEL_121:\n                v13 = (char *)v165;\n              }\n            }\nLABEL_122:\n            if ( v147 )\n              sub_403220(stream, v47, v51);\n            else\n              fwrite(v47, v51, 1uLL, stream);\n            goto LABEL_65;\n          }\n          if ( v85 )\n          {\nLABEL_404:\n            v37 = 1;\n            v34 = 9;\n            v36 = 20;\n            v35 = 100 * v84 + 10000 * v160 + v85;\n          }\n          else if ( v84 )\n          {\nLABEL_405:\n            v37 = 1;\n            v34 = 6;\n            v35 = v84 + 100 * v160;\n            v36 = 4;\n          }\n          else\n          {\n            v35 = v160;\n            v37 = 1;\n            v34 = 3;\n          }\n        }\n        else\n        {\n          v36 = 0;\n          v37 = 1;\n          v34 = 5;\n          v35 = v84 + 100 * v160;\n        }\nLABEL_73:\n        if ( v22 != 79 )\n        {\nLABEL_149:\n          if ( (_BYTE)v38 )\nLABEL_150:\n            v35 = -v35;\nLABEL_151:\n          v61 = v207;\n          while ( 1 )\n          {\n            v62 = v61 - 1;\n            if ( (v36 & 1) != 0 )\n            {\n              v63 = (unsigned __int8 *)(v61 - 2);\n              *--v61 = 58;\n              v62 = (char *)v63;\n            }\n            v36 >>= 1;\n            *(v61 - 1) = v35 % 0xA + 48;\n            v61 = v62;\n            if ( v35 <= 9 && !v36 )\n              break;\n            v35 /= 0xAu;\n          }\n          if ( v34 < v21 )\n            v34 = v21;\n          v158 = v34;\n          if ( (_BYTE)v38 )\n          {\nLABEL_319:\n            v177 = 45;\n            if ( v16 != 45 )\n              goto LABEL_163;\n            v171 = 45;\n          }\n          else\n          {\n            if ( !v37 )\n            {\nLABEL_235:\n              v64 = (char *)(v207 - v62);\n              v65 = ~v12;\n              if ( v16 == 45 || (v167 = v158 - (_DWORD)v64, v158 - (int)v64 <= 0) )\n              {\n                LODWORD(v69) = 0;\n                v13 = (char *)v8;\n                if ( v21 >= 0 )\n                  LODWORD(v69) = v21;\n                v69 = (int)v69;\n                goto LABEL_240;\n              }\n              if ( v16 != 95 )\n              {\n                if ( v158 >= v65 )\n                  return 0LL;\nLABEL_181:\n                v13 = (char *)v8;\n                if ( stream )\n                {\n                  v187 = v16;\n                  v123 = 0LL;\n                  do\n                  {\n                    ++v123;\n                    fputc(48, stream);\n                  }\n                  while ( v123 < v167 );\n                  v13 = (char *)v8;\n                  v16 = v187;\n                }\n                v12 += v167;\n                v69 = 0LL;\n                v21 = 0;\n                v65 = ~v12;\n                goto LABEL_240;\n              }\n              v177 = 0;\n              goto LABEL_355;\n            }\n            if ( v16 != 45 )\n            {\n              v177 = 43;\nLABEL_163:\n              v64 = (char *)(v207 - v62);\n              v167 = v158 - 1 - (v207 - v62);\n              v65 = ~v12;\n              if ( v167 > 0 )\n              {\n                if ( v16 != 95 )\n                {\n                  if ( v158 >= v65 )\n                    return 0LL;\n                  v66 = 0;\n                  v67 = 1LL;\n                  if ( v21 >= 0 )\n                    v66 = v21;\n                  if ( v66 )\n                    v67 = v66;\n                  v182 = v67;\n                  if ( v67 >= v65 )\n                    return 0LL;\n                  if ( stream )\n                  {\n                    if ( !v158 && (unsigned __int64)v66 > 1 )\n                    {\n                      v191 = v21 - 1LL;\n                      if ( v16 == 48 )\n                      {\n                        if ( v21 != 1LL )\n                        {\n                          v201 = v8;\n                          v141 = 0LL;\n                          do\n                          {\n                            ++v141;\n                            fputc(48, stream);\n                          }\n                          while ( v191 != v141 );\n                          v16 = 48;\n                          v8 = v201;\n                        }\n                      }\n                      else\n                      {\n                        v68 = 0LL;\n                        if ( v21 != 1LL )\n                        {\n                          v197 = v16;\n                          do\n                          {\n                            ++v68;\n                            fputc(32, stream);\n                          }\n                          while ( v191 != v68 );\n                          v16 = v197;\n                        }\n                      }\n                    }\n                    v192 = v16;\n                    fputc(v177, stream);\n                    v16 = v192;\n                  }\n                  v12 += v182;\n                  goto LABEL_181;\n                }\nLABEL_355:\n                if ( v167 >= v65 )\n                  return 0LL;\n                if ( stream )\n                {\n                  v188 = v21;\n                  v128 = v8;\n                  v129 = 0LL;\n                  v130 = v128;\n                  do\n                  {\n                    ++v129;\n                    fputc(32, stream);\n                  }\n                  while ( v167 > v129 );\n                  v21 = v188;\n                  v8 = v130;\n                }\n                v12 += v167;\n                v121 = v21 - v167;\n                v20 = v167 < v21;\n                v21 = 0;\n                if ( v20 )\n                  v21 = v121;\n                v65 = ~v12;\n                if ( v177 )\n                {\n                  v69 = v21;\n                  v122 = 1LL;\n                  if ( v21 )\n                    v122 = v21;\n                  if ( v122 >= v65 )\n                    return 0LL;\n                  if ( stream )\n                  {\n                    if ( !v158 && (unsigned int)v21 > 1 )\n                    {\n                      v190 = v21;\n                      v174 = v21 - 1LL;\n                      v196 = v8;\n                      v142 = 0LL;\n                      v143 = v21;\n                      do\n                      {\n                        ++v142;\n                        fputc(32, stream);\n                      }\n                      while ( v174 != v142 );\n                      v21 = v190;\n                      v8 = v196;\n                      v69 = v143;\n                    }\n                    v186 = v69;\n                    v173 = v21;\n                    fputc(v177, stream);\n                    v21 = v173;\n                    v69 = v186;\n                  }\n                  v12 += v122;\n                  v16 = 95;\n                  v13 = (char *)v8;\n                  v64 = (char *)(v207 - v62);\n                  v65 = ~v12;\n                }\n                else\n                {\n                  v69 = v21;\n                  v13 = (char *)v8;\n                  v16 = 95;\n                  v64 = (char *)(v207 - v62);\n                }\n                goto LABEL_240;\n              }\n              LODWORD(v69) = 0;\n              v119 = 1LL;\n              if ( v21 >= 0 )\n                LODWORD(v69) = v21;\n              v69 = (int)v69;\n              if ( (_DWORD)v69 )\n                v119 = (int)v69;\n              v172 = v119;\n              if ( v119 >= v65 )\n                return 0LL;\n              if ( stream )\n              {\n                if ( !v158 && (unsigned __int64)(int)v69 > 1 )\n                {\n                  v184 = v21 - 1LL;\n                  if ( v16 == 48 )\n                  {\n                    if ( v21 != 1LL )\n                    {\n                      v139 = (int)v69;\n                      v200 = v21;\n                      v203 = v8;\n                      v140 = 0LL;\n                      do\n                      {\n                        ++v140;\n                        fputc(48, stream);\n                      }\n                      while ( v184 != v140 );\n                      v16 = 48;\n                      v21 = v200;\n                      v69 = v139;\n                      v8 = v203;\n                    }\n                  }\n                  else\n                  {\n                    v120 = 0LL;\n                    if ( v21 != 1LL )\n                    {\n                      v193 = v16;\n                      v198 = v21;\n                      v202 = (int)v69;\n                      do\n                      {\n                        ++v120;\n                        fputc(32, stream);\n                      }\n                      while ( v184 != v120 );\n                      v16 = v193;\n                      v21 = v198;\n                      v69 = v202;\n                    }\n                  }\n                }\n                v199 = v69;\n                v194 = v21;\n                v185 = v16;\n                fputc(v177, stream);\n                v16 = v185;\n                v21 = v194;\n                v69 = v199;\n              }\n              v12 += v172;\n              v13 = (char *)v8;\n              v65 = ~v12;\nLABEL_240:\n              v96 = v69;\n              if ( (unsigned __int64)v64 >= v69 )\n                v96 = (unsigned __int64)v64;\n              HIDWORD(v165) = HIDWORD(v96);\n              if ( v96 >= v65 )\n                return 0LL;\n              if ( !stream )\n              {\nLABEL_253:\n                v12 += v96;\n                goto LABEL_12;\n              }\n              if ( !v158 && (unsigned __int64)v64 < v69 )\n              {\n                v97 = v21 - (_QWORD)v64;\n                if ( v16 != 48 )\n                {\n                  if ( !v97 )\n                    goto LABEL_251;\n                  v161 = v13;\n                  v98 = 0LL;\n                  v99 = v21 - (_QWORD)v64;\n                  do\n                  {\n                    ++v98;\n                    fputc(32, stream);\n                  }\n                  while ( v99 != v98 );\n                  goto LABEL_250;\n                }\n                v124 = v21 - (_QWORD)v64;\n                if ( v97 )\n                {\n                  v161 = v13;\n                  v125 = 0LL;\n                  do\n                  {\n                    ++v125;\n                    fputc(48, stream);\n                  }\n                  while ( v124 != v125 );\nLABEL_250:\n                  v13 = v161;\n                }\n              }\nLABEL_251:\n              if ( v147 )\n                sub_403220(stream, (unsigned __int8 *)v62, (__int64)v64);\n              else\n                fwrite(v62, (size_t)v64, 1uLL, stream);\n              goto LABEL_253;\n            }\n            v171 = 43;\n          }\n          LODWORD(v69) = 0;\n          v117 = 1LL;\n          if ( v21 >= 0 )\n            LODWORD(v69) = v21;\n          v69 = (int)v69;\n          if ( (_DWORD)v69 )\n            v117 = (int)v69;\n          if ( ~v12 <= v117 )\n            return 0LL;\n          if ( stream )\n          {\n            if ( !v158 && (unsigned __int64)(int)v69 > 1 && v21 != 1LL )\n            {\n              v181 = v21;\n              v137 = 0LL;\n              v189 = (int)v69;\n              v195 = v8;\n              v138 = v21 - 1LL;\n              do\n              {\n                ++v137;\n                fputc(32, stream);\n              }\n              while ( v138 != v137 );\n              v21 = v181;\n              v69 = v189;\n              v8 = v195;\n            }\n            v183 = v69;\n            v180 = v21;\n            fputc(v171, stream);\n            v21 = v180;\n            v69 = v183;\n          }\n          v12 += v117;\n          v13 = (char *)v8;\n          v16 = 45;\n          v64 = (char *)(v207 - v62);\n          v65 = ~v12;\n          goto LABEL_240;\n        }\n        if ( (_BYTE)v38 )\n          goto LABEL_150;\nLABEL_75:\n        v166 = 0;\n        *(_WORD *)format = 9504;\nLABEL_76:\n        v205 = v22;\n        v13 = (char *)v8;\n        v22 = v34;\n        v26 = &v206;\nLABEL_50:\n        *(_BYTE *)v26 = v18;\n        *((_BYTE *)v26 + 1) = 0;\n        v154 = v21;\n        v175 = v16;\n        v27 = strftime(s, 0x400uLL, format, (const struct tm *)tp);\n        if ( !v27 )\n        {\nLABEL_12:\n          v11 = v13[1];\n          v8 = (unsigned __int8 *)(v13 + 1);\n          if ( !v13[1] )\n            return v12;\n          continue;\n        }\n        v28 = v154;\n        v29 = v27 - 1;\n        v30 = 0LL;\n        if ( v154 >= 0 )\n          v30 = v154;\n        v31 = v30;\n        if ( v29 >= v30 )\n          v31 = v29;\n        v155 = v31;\n        if ( ~v12 > v31 )\n        {\n          if ( stream )\n          {\n            if ( !v22 && v29 < v30 )\n            {\n              v32 = v28 - v29;\n              if ( v175 == 48 )\n              {\n                if ( v32 )\n                {\n                  for ( n = 0LL; n != v32; ++n )\n                    fputc(48, stream);\n                }\n              }\n              else\n              {\n                v33 = 0LL;\n                if ( v32 )\n                {\n                  do\n                  {\n                    ++v33;\n                    fputc(32, stream);\n                  }\n                  while ( v32 != v33 );\n                }\n              }\n            }\n            if ( v166 )\n            {\n              sub_4031C0(stream, (unsigned __int8 *)&s[1], v29);\n            }\n            else if ( v147 )\n            {\n              sub_403220(stream, (unsigned __int8 *)&s[1], v29);\n            }\n            else\n            {\n              fwrite(&s[1], v29, 1uLL, stream);\n            }\n          }\n          goto LABEL_65;\n        }\n        return 0LL;\n      default:\n        goto LABEL_211;\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_404BA0",
            "funcStartAddr": "0x404ba0",
            "funcEndAddr": "0x404bbf",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404BA0(FILE *a1, char *a2, __int64 a3, __int64 a4, int a5)\n{\n  char v6; // [rsp+17h] [rbp-9h] BYREF\n\n  v6 = 0;\n  return sub_403280(a1, (unsigned __int8 *)a2, a3, 0, (int)&v6, a4, a5);\n}\n"
        },
        {
            "funcName": "sub_404BC0",
            "funcStartAddr": "0x404bc0",
            "funcEndAddr": "0x404bfa",
            "decompiledFuncCode": "int __fastcall sub_404BC0(struct timespec *tp)\n{\n  int result; // eax\n  struct timeval v2; // [rsp+0h] [rbp-18h] BYREF\n\n  result = clock_gettime(0, tp);\n  if ( result )\n  {\n    gettimeofday(&v2, 0LL);\n    tp->tv_sec = v2.tv_sec;\n    result = 1000 * LODWORD(v2.tv_usec);\n    tp->tv_nsec = 1000 * v2.tv_usec;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404C00",
            "funcStartAddr": "0x404c00",
            "funcEndAddr": "0x404c9c",
            "decompiledFuncCode": "__int64 __fastcall sub_404C00(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n  int v4; // eax\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  if ( a1 < 0 )\n  {\n    while ( 1 )\n    {\n      v4 = 10 * (a1 / 10) + 48 - a1;\n      a1 /= 10LL;\n      *(_BYTE *)(v2 - 1) = v4;\n      if ( !a1 )\n        break;\n      --v2;\n    }\n    *(_BYTE *)(v2 - 2) = 45;\n    return v2 - 2;\n  }\n  else\n  {\n    do\n    {\n      *(_BYTE *)--v2 = a1 % 0xAuLL + 48;\n      a1 /= 0xAuLL;\n    }\n    while ( a1 );\n    return v2;\n  }\n}\n"
        },
        {
            "funcName": "sub_404CA0",
            "funcStartAddr": "0x404ca0",
            "funcEndAddr": "0x404e1e",
            "decompiledFuncCode": "__int64 __fastcall sub_404CA0(\n        __m128i *a1,\n        __int64 a2,\n        __int64 a3,\n        __int64 a4,\n        __int64 a5,\n        __int64 a6,\n        const __m128i a7,\n        __int64 a8)\n{\n  __int64 result; // rax\n  __int64 v9; // r8\n  __int64 v10; // r9\n  __m128i v11; // xmm0\n  __int64 v12; // r9\n\n  result = a1[10].m128i_i64[1];\n  v9 = a7.m128i_i64[1];\n  v10 = a8;\n  if ( result && !a1[3].m128i_i64[0] && !a1[10].m128i_i8[1] )\n  {\n    if ( a1[12].m128i_i64[1] || a8 > 2 )\n    {\n      v11 = _mm_loadu_si128(&a7);\n      result = a8;\n      a1[13].m128i_i8[8] = 1;\n      a1[2] = v11;\n      a1[3].m128i_i64[0] = result;\n      return result;\n    }\n    a1[12].m128i_i64[1] = 1LL;\nLABEL_13:\n    a1[4].m128i_i64[1] = v9;\n    a1[5].m128i_i64[0] = 0LL;\n    goto LABEL_11;\n  }\n  if ( a8 > 4 )\n  {\n    v12 = a8 - 4;\n    a1[10].m128i_i64[1] = result + 1;\n    a1[3].m128i_i64[0] = v12;\n    a1[4].m128i_i64[0] = v9 % 100;\n    result = 0x346DC5D63886594BLL * v9;\n    a1[3].m128i_i64[1] = v9 / 100 % 100;\n    a1[2].m128i_i64[1] = v9 / 10000;\n    return result;\n  }\n  ++a1[12].m128i_i64[1];\n  if ( v10 <= 2 )\n    goto LABEL_13;\n  a1[4].m128i_i64[1] = v9 / 100;\n  result = 100 * (v9 / 100);\n  a1[5].m128i_i64[0] = v9 % 100;\nLABEL_11:\n  a1[5].m128i_i64[1] = 0LL;\n  a1[6].m128i_i64[0] = 0LL;\n  a1[1].m128i_i32[3] = 2;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404E20",
            "funcStartAddr": "0x404e20",
            "funcEndAddr": "0x404f19",
            "decompiledFuncCode": "__int64 __fastcall sub_404E20(int a1, __int64 a2)\n{\n  int v3; // eax\n  __int64 v4; // rsi\n  unsigned int v5; // ebp\n  unsigned int v6; // ecx\n  unsigned int v7; // ebp\n\n  v3 = __sprintf_chk(a2, 1LL, -1LL, \"%c%02d\", ((a1 >> 31) & 2u) + 43, abs32(a1 / 3600));\n  if ( a1 % 3600 )\n  {\n    v4 = a2 + v3;\n    *(_BYTE *)v4 = 58;\n    v5 = abs32(a1 % 3600);\n    *(_BYTE *)(v4 + 1) = v5 / 0x258 + 48;\n    v6 = v5 / 0x3C % 0xA + 48;\n    v7 = v5 % 0x3C;\n    *(_BYTE *)(v4 + 2) = v6;\n    if ( v7 )\n    {\n      *(_BYTE *)(v4 + 3) = 58;\n      *(_BYTE *)(v4 + 4) = v7 / 0xA + 48;\n      *(_WORD *)(v4 + 5) = (unsigned __int8)(v7 % 0xA + 48);\n    }\n    else\n    {\n      *(_BYTE *)(v4 + 3) = 0;\n    }\n  }\n  return a2;\n}\n"
        },
        {
            "funcName": "sub_404F20",
            "funcStartAddr": "0x404f20",
            "funcEndAddr": "0x404f8e",
            "decompiledFuncCode": "__int64 __fastcall sub_404F20(int a1, __int64 a2)\n{\n  __sprintf_chk(a2, 1LL, -1LL, (const char *)((a1 >= -1900) + 4278463LL), abs32(a1 / 100 + 19), abs32(a1 % 100));\n  return a2;\n}\n"
        },
        {
            "funcName": "sub_404F90",
            "funcStartAddr": "0x404f90",
            "funcEndAddr": "0x40504e",
            "decompiledFuncCode": "__int64 sub_404F90()\n{\n  fwrite(\"date: \", 1uLL, 6uLL, stderr);\n  return sub_40E010(stderr);\n}\n"
        },
        {
            "funcName": "sub_405050",
            "funcStartAddr": "0x405050",
            "funcEndAddr": "0x4050bb",
            "decompiledFuncCode": "bool __fastcall sub_405050(__int64 a1, _DWORD *a2, _DWORD *a3, __int64 a4)\n{\n  __int64 v5; // [rsp+8h] [rbp-50h] BYREF\n  char v6[72]; // [rsp+10h] [rbp-48h] BYREF\n\n  v5 = a4;\n  return (a4 != -1 || (a3 = (_DWORD *)sub_40DE20(a1, &v5, v6)) != 0LL)\n      && (a3[5] ^ a2[5] | a3[4] ^ a2[4] | a3[3] ^ a2[3] | a3[2] ^ a2[2] | a3[1] ^ a2[1] | *a3 ^ *a2) == 0;\n}\n"
        },
        {
            "funcName": "sub_4050C0",
            "funcStartAddr": "0x4050c0",
            "funcEndAddr": "0x4050f5",
            "decompiledFuncCode": "__int64 __fastcall sub_4050C0(unsigned __int8 a1, __int64 a2, __int64 a3)\n{\n  __fprintf_chk(stderr, 1LL, &aLdS[a1 ^ 1], a2, a3);\n  return 1LL;\n}\n"
        },
        {
            "funcName": "sub_405100",
            "funcStartAddr": "0x405100",
            "funcEndAddr": "0x4051b5",
            "decompiledFuncCode": "__int64 __fastcall sub_405100(_DWORD *a1, char a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r9\n  __int64 v6; // r9\n  bool v7; // of\n  __int64 v8; // r9\n  __int64 result; // rax\n  __int64 v10; // rcx\n\n  v5 = a3;\n  if ( a4 <= 2 )\n  {\n    if ( a5 >= 0 )\n      goto LABEL_3;\n    v10 = 0LL;\nLABEL_11:\n    v8 = v10 + 60 * v5;\nLABEL_6:\n    result = 0LL;\n    if ( (unsigned __int64)(v8 + 1440) <= 0xB40 )\n    {\n      result = 1LL;\n      *a1 = 60 * v8;\n    }\n    return result;\n  }\n  if ( a5 < 0 )\n  {\n    v5 = a3 / 100;\n    v10 = a3 % 100;\n    goto LABEL_11;\n  }\nLABEL_3:\n  v6 = 60 * a3;\n  if ( a2 )\n  {\n    v7 = __OFSUB__(v6, a5);\n    v8 = v6 - a5;\n  }\n  else\n  {\n    v7 = __OFADD__(a5, v6);\n    v8 = a5 + v6;\n  }\n  result = 0LL;\n  if ( !v7 && (unsigned __int128)(60 * (__int128)a3) >> 64 == 0 )\n    goto LABEL_6;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4051C0",
            "funcStartAddr": "0x4051c0",
            "funcEndAddr": "0x40527a",
            "decompiledFuncCode": "char **__fastcall sub_4051C0(__int64 a1, const char *a2)\n{\n  const char *v3; // rsi\n  char **v4; // rbx\n  const char *v6; // rsi\n  const char **v7; // rbx\n  const char *v8; // rsi\n\n  v3 = \"GMT\";\n  v4 = &off_415EE0;\n  do\n  {\n    if ( !strcmp(a2, v3) )\n      return v4;\n    v4 += 2;\n    v3 = *v4;\n  }\n  while ( *v4 );\n  v6 = *(const char **)(a1 + 232);\n  v7 = (const char **)(a1 + 232);\n  if ( !v6 )\n  {\nLABEL_6:\n    v4 = &off_415BE0;\n    v8 = \"WET\";\n    while ( strcmp(a2, v8) )\n    {\n      v4 += 2;\n      v8 = *v4;\n      if ( !*v4 )\n        return 0LL;\n    }\n    return v4;\n  }\n  while ( strcmp(a2, v6) )\n  {\n    v7 += 2;\n    v6 = *v7;\n    if ( !*v7 )\n      goto LABEL_6;\n  }\n  return (char **)v7;\n}\n"
        },
        {
            "funcName": "sub_405280",
            "funcStartAddr": "0x405280",
            "funcEndAddr": "0x405405",
            "decompiledFuncCode": "int __fastcall sub_405280(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rsi\n  __int64 v4; // rsi\n  unsigned __int8 v5; // di\n  unsigned __int8 v6; // al\n  __int64 v7; // rsi\n  __int64 v8; // rsi\n  __int64 v9; // rsi\n  __int64 v10; // rsi\n  FILE *v12; // rbx\n  char *v13; // rax\n  unsigned __int8 v14; // al\n\n  dcgettext(0LL, \"parsed %s part: \", 5);\n  sub_404F90();\n  v3 = *(_QWORD *)(a2 + 104);\n  if ( !v3 )\n  {\n    v4 = *(_QWORD *)(a2 + 112);\n    if ( !v4 )\n    {\n      v7 = *(_QWORD *)(a2 + 120);\n      v5 = 0;\n      if ( v7 )\n        goto LABEL_6;\n      if ( !*(_QWORD *)(a2 + 128) && !*(_QWORD *)(a2 + 136) && !*(_QWORD *)(a2 + 144) && !*(_DWORD *)(a2 + 152) )\n      {\n        v12 = stderr;\n        v13 = dcgettext(0LL, \"today/this/now\\n\", 5);\n        return fputs(v13, v12);\n      }\n      goto LABEL_7;\n    }\n    v5 = 0;\n    goto LABEL_4;\n  }\n  v14 = sub_4050C0(0, v3, (__int64)\"year(s)\");\n  v4 = *(_QWORD *)(a2 + 112);\n  v5 = v14;\n  if ( v4 )\n  {\nLABEL_4:\n    v6 = sub_4050C0(v5, v4, (__int64)\"month(s)\");\n    v7 = *(_QWORD *)(a2 + 120);\n    v5 = v6;\n    goto LABEL_5;\n  }\n  v7 = *(_QWORD *)(a2 + 120);\nLABEL_5:\n  if ( v7 )\nLABEL_6:\n    v5 = sub_4050C0(v5, v7, (__int64)\"day(s)\");\nLABEL_7:\n  v8 = *(_QWORD *)(a2 + 128);\n  if ( v8 )\n    v5 = sub_4050C0(v5, v8, (__int64)\"hour(s)\");\n  v9 = *(_QWORD *)(a2 + 136);\n  if ( v9 )\n    v5 = sub_4050C0(v5, v9, (__int64)\"minutes\");\n  v10 = *(_QWORD *)(a2 + 144);\n  if ( v10 )\n    v5 = sub_4050C0(v5, v10, (__int64)\"seconds\");\n  if ( *(_DWORD *)(a2 + 152) )\n    sub_4050C0(v5, *(int *)(a2 + 152), (__int64)\"nanoseconds\");\n  return fputc(10, stderr);\n}\n"
        },
        {
            "funcName": "sub_405410",
            "funcStartAddr": "0x405410",
            "funcEndAddr": "0x4054a5",
            "decompiledFuncCode": "__int64 __fastcall sub_405410(__int64 a1, __int64 a2, __int64 a3)\n{\n  int v4; // eax\n  int v5; // ebp\n  const char *v7; // rax\n  __int64 v8; // [rsp+0h] [rbp-38h] BYREF\n\n  v4 = sub_40FF70(a3, 100LL, &unk_41492E, a1, 0LL, 0LL);\n  if ( !a2 )\n    return a3;\n  v5 = v4;\n  if ( v4 > 99 || !*(_QWORD *)(a2 + 208) )\n    return a3;\n  v7 = (const char *)sub_404E20(*(_DWORD *)(a2 + 24), (__int64)&v8);\n  __snprintf_chk(a3 + v5, 100 - v5, 1LL, -1LL, \" TZ=%s\", v7);\n  return a3;\n}\n"
        },
        {
            "funcName": "sub_4054B0",
            "funcStartAddr": "0x4054b0",
            "funcEndAddr": "0x40559d",
            "decompiledFuncCode": "char *__fastcall sub_4054B0(__int64 a1, char *a2)\n{\n  __int64 v2; // r9\n  int v3; // eax\n  __int64 v4; // rdx\n  __int64 v6; // rdx\n\n  if ( !*(_BYTE *)(a1 + 224) )\n  {\n    *a2 = 0;\n    v6 = *(int *)(a1 + 16);\n    if ( (unsigned int)v6 <= 6 )\n    {\n      __snprintf_chk(a2, 100LL, 1LL, -1LL, \"%s\", (char *)&unk_415980 + 4 * v6);\n      return a2;\n    }\n    return a2;\n  }\n  v2 = *(_QWORD *)(a1 + 8);\n  if ( (unsigned __int64)(v2 + 1) <= 0xD )\n  {\n    v3 = snprintf(a2, 0x64uLL, \"%s\", &aLast[11 * v2 + 11]);\n    v4 = *(int *)(a1 + 16);\n    if ( (unsigned int)v4 <= 6 && (unsigned int)v3 <= 0x63 )\n      goto LABEL_5;\n    return a2;\n  }\n  v3 = __snprintf_chk(a2, 100LL, 1LL, -1LL, \"%ld\", v2);\n  v4 = *(int *)(a1 + 16);\n  if ( (unsigned int)v4 > 6 )\n    return a2;\nLABEL_5:\n  __snprintf_chk(&a2[v3], 100 - v3, 1LL, -1LL, (const char *)((v3 == 0) + 4277419LL), (char *)&unk_415980 + 4 * v4);\n  return a2;\n}\n"
        },
        {
            "funcName": "sub_4055A0",
            "funcStartAddr": "0x4055a0",
            "funcEndAddr": "0x405940",
            "decompiledFuncCode": "int __fastcall sub_4055A0(__int64 a1, __int64 a2)\n{\n  char v2; // dl\n  __int64 v3; // rbp\n  char *v4; // rax\n  unsigned int v5; // r13d\n  __int64 v6; // r12\n  char *v7; // rbp\n  char *v8; // rax\n  const char *v9; // r8\n  bool v10; // zf\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v14; // rcx\n  const char *v15; // rbp\n  __int64 v16; // rax\n  char v17[152]; // [rsp+0h] [rbp-98h] BYREF\n\n  dcgettext(0LL, \"parsed %s part: \", 5);\n  sub_404F90();\n  if ( *(_QWORD *)(a2 + 168) && !*(_BYTE *)(a2 + 218) )\n  {\n    __fprintf_chk(\n      stderr,\n      1LL,\n      \"(Y-M-D) %04ld-%02ld-%02ld\",\n      *(_QWORD *)(a2 + 40),\n      *(_QWORD *)(a2 + 56),\n      *(_QWORD *)(a2 + 64));\n    *(_BYTE *)(a2 + 218) = 1;\n    v2 = 1;\n    if ( *(_BYTE *)(a2 + 216) == *(_BYTE *)(a2 + 223) )\n      goto LABEL_5;\n    fputc(32, stderr);\n    goto LABEL_4;\n  }\n  v2 = 0;\n  if ( *(_BYTE *)(a2 + 216) != *(_BYTE *)(a2 + 223) )\n  {\nLABEL_4:\n    v3 = *(_QWORD *)(a2 + 40);\n    v4 = dcgettext(0LL, \"year: %04ld\", 5);\n    __fprintf_chk(stderr, 1LL, v4, v3);\n    v2 = 1;\n    *(_BYTE *)(a2 + 223) = *(_BYTE *)(a2 + 216);\n  }\nLABEL_5:\n  if ( *(_QWORD *)(a2 + 200) && !*(_BYTE *)(a2 + 221) )\n  {\n    __fprintf_chk(\n      stderr,\n      1LL,\n      (const char *)(((unsigned __int8)v2 ^ 1u) + 4278657LL),\n      *(_QWORD *)(a2 + 72),\n      *(_QWORD *)(a2 + 80),\n      *(_QWORD *)(a2 + 88));\n    v14 = *(_QWORD *)(a2 + 96);\n    if ( v14 )\n      __fprintf_chk(stderr, 1LL, \".%09d\", v14);\n    if ( *(_DWORD *)(a2 + 28) == 1 )\n      fwrite(\"pm\", 1uLL, 2uLL, stderr);\n    v10 = *(_QWORD *)(a2 + 176) == 0LL;\n    *(_BYTE *)(a2 + 221) = 1;\n    v2 = 1;\n    if ( !v10 )\n    {\n      v2 = *(_BYTE *)(a2 + 219);\n      if ( !v2 )\n        goto LABEL_34;\n    }\n  }\n  else if ( *(_QWORD *)(a2 + 176) && !*(_BYTE *)(a2 + 219) )\n  {\n    if ( !v2 )\n    {\nLABEL_10:\n      v5 = *(_DWORD *)(a2 + 16);\n      v6 = *(_QWORD *)(a2 + 8);\n      v7 = sub_4054B0(a2, v17);\n      v8 = dcgettext(0LL, \"%s (day ordinal=%ld number=%d)\", 5);\n      __fprintf_chk(stderr, 1LL, v8, v7, v6, v5);\n      *(_BYTE *)(a2 + 219) = 1;\n      v2 = 1;\n      goto LABEL_11;\n    }\nLABEL_34:\n    fputc(32, stderr);\n    goto LABEL_10;\n  }\nLABEL_11:\n  if ( !*(_QWORD *)(a2 + 184) || *(_BYTE *)(a2 + 220) )\n  {\n    if ( !*(_QWORD *)(a2 + 208) || *(_BYTE *)(a2 + 222) )\n    {\n      if ( *(_BYTE *)(a2 + 160) )\n      {\n        v11 = *(_QWORD *)(a2 + 88);\n        if ( !v2 )\n          goto LABEL_24;\n        goto LABEL_19;\n      }\n      return fputc(10, stderr);\n    }\n    v15 = (const char *)(((unsigned __int8)v2 ^ 1u) + 4278612LL);\nLABEL_36:\n    v16 = sub_404E20(*(_DWORD *)(a2 + 24), (__int64)v17);\n    __fprintf_chk(stderr, 1LL, v15, v16);\n    v10 = *(_BYTE *)(a2 + 160) == 0;\n    *(_BYTE *)(a2 + 222) = 1;\n    if ( v10 )\n      return fputc(10, stderr);\n    goto LABEL_18;\n  }\n  v9 = \" DST\";\n  if ( !*(_QWORD *)(a2 + 192) )\n    v9 = \"\";\n  __fprintf_chk(stderr, 1LL, (const char *)(((unsigned __int8)v2 ^ 1u) + 4278685LL), *(unsigned int *)(a2 + 20), v9);\n  v10 = *(_QWORD *)(a2 + 208) == 0LL;\n  *(_BYTE *)(a2 + 220) = 1;\n  if ( !v10 && !*(_BYTE *)(a2 + 222) )\n  {\n    v15 = \" UTC%s\";\n    goto LABEL_36;\n  }\n  if ( *(_BYTE *)(a2 + 160) )\n  {\nLABEL_18:\n    v11 = *(_QWORD *)(a2 + 88);\nLABEL_19:\n    fputc(32, stderr);\nLABEL_24:\n    v12 = dcgettext(0LL, \"number of seconds: %ld\", 5);\n    __fprintf_chk(stderr, 1LL, v12, v11);\n  }\n  return fputc(10, stderr);\n}\n"
        },
        {
            "funcName": "sub_405940",
            "funcStartAddr": "0x405940",
            "funcEndAddr": "0x407bb2",
            "decompiledFuncCode": "__int64 __fastcall sub_405940(__m128i *a1, __m128i a2)\n{\n  __int64 v2; // r8\n  unsigned int v4; // r15d\n  int v5; // ebp\n  char *v6; // rbx\n  __int16 *v7; // r14\n  int v8; // eax\n  __m128i *v9; // rcx\n  __m128i v10; // xmm7\n  __int64 v11; // rax\n  __m128i v12; // xmm7\n  int v13; // ecx\n  char v14; // dl\n  int v16; // eax\n  unsigned int v17; // eax\n  __int64 v18; // rsi\n  const __m128i *v19; // rax\n  __m128i v20; // xmm1\n  __m128i v21; // xmm2\n  __m128i v22; // xmm3\n  __int64 v23; // r15\n  __int64 v24; // r10\n  __int64 v25; // rdi\n  __int64 v26; // r13\n  __int64 v27; // r11\n  __int64 v28; // rdi\n  __int64 v29; // rdx\n  unsigned __int8 *v30; // rax\n  int v31; // ebp\n  __int64 v32; // rcx\n  __int64 v33; // rdx\n  unsigned __int8 *v34; // rsi\n  char v35; // cl\n  char *v36; // rsi\n  unsigned __int8 *i; // rax\n  unsigned __int8 v38; // al\n  char *j; // rcx\n  const char *v40; // rsi\n  const char **v41; // rbx\n  __m128i *v42; // rbp\n  const char **v43; // rbp\n  __int64 v44; // rdx\n  char v45; // cl\n  _BYTE *v46; // rsi\n  __int64 v47; // rcx\n  char v48; // dl\n  bool v49; // al\n  int v50; // esi\n  unsigned __int8 *v51; // r11\n  __int64 v52; // rcx\n  int v53; // edi\n  int v54; // ebp\n  __int64 v55; // rcx\n  __int64 v56; // rbp\n  int v57; // edx\n  char *v58; // rbp\n  int v59; // r11d\n  int v60; // eax\n  char v61; // r13\n  unsigned int v62; // edi\n  __m128i v63; // xmm0\n  __int64 v64; // rax\n  __m128i v65; // xmm0\n  __int64 v66; // rax\n  __int64 v67; // rdx\n  __m128i v68; // xmm7\n  __int64 v69; // rax\n  int v70; // eax\n  __m128i v71; // xmm4\n  __m128i v72; // xmm5\n  __m128i v73; // xmm6\n  __int64 v74; // rsi\n  unsigned int v75; // r8d\n  int v76; // eax\n  bool v77; // r8\n  __int64 v78; // rax\n  __int64 v79; // rdx\n  __int64 v80; // rdx\n  bool v81; // di\n  __int64 v82; // rdx\n  bool v83; // si\n  __int64 v84; // rdx\n  __int64 v85; // rdx\n  __int64 v86; // rdx\n  _BOOL8 v87; // rcx\n  __int64 v88; // rax\n  int v89; // edi\n  __int64 v90; // rax\n  __int64 v91; // rax\n  __int64 v92; // rcx\n  __int64 v93; // r8\n  __int64 v94; // rdx\n  char v95; // si\n  char v96; // al\n  __int64 v97; // rax\n  __int64 v98; // rdx\n  __int64 v99; // rcx\n  __int64 v100; // rax\n  __int64 v101; // rax\n  __int64 v102; // rax\n  __int64 v103; // rax\n  char *v104; // rax\n  __int64 v105; // rdi\n  const char *v106; // rsi\n  char *v107; // rax\n  __int64 v108; // rax\n  __int64 v109; // rax\n  __int64 v110; // rax\n  __int64 v111; // rax\n  __int64 v112; // rdx\n  __int64 v113; // rax\n  int v114; // eax\n  bool v115; // r8\n  __int64 v116; // rax\n  __int64 v117; // rdx\n  __int64 v118; // rdx\n  bool v119; // di\n  __int64 v120; // rdx\n  bool v121; // si\n  __int64 v122; // rdx\n  bool v123; // r11\n  __int64 v124; // rdx\n  bool v125; // r10\n  __int64 v126; // rdx\n  _BOOL8 v127; // rcx\n  char *v128; // rax\n  __int64 v129; // rdi\n  __int64 v130; // rsi\n  __int64 v131; // rax\n  __int64 v132; // rdx\n  __int64 v133; // rcx\n  __int64 v134; // rax\n  __int64 v135; // rax\n  __int64 v136; // rax\n  __int64 v137; // rdx\n  __int64 v138; // rax\n  __int64 v139; // rax\n  __int64 v140; // rax\n  const char *v141; // rsi\n  char *v142; // rax\n  char *v143; // rax\n  __int64 v144; // rdi\n  __int64 v145; // rsi\n  __int64 v146; // rax\n  __int64 v147; // rax\n  __int64 v148; // rax\n  __int64 v149; // rax\n  __int64 v150; // rcx\n  __int64 v151; // r8\n  __int64 v152; // rdx\n  char v153; // si\n  __int64 v154; // rax\n  __int64 v155; // rax\n  int v156; // edx\n  __int64 v157; // rax\n  __int64 v158; // rdi\n  __int64 v159; // rsi\n  __int64 v160; // rcx\n  int v161; // r8d\n  __int64 v162; // rdx\n  __int64 v163; // rax\n  __int64 v164; // rdx\n  __int64 v165; // rdi\n  __int64 v166; // rdx\n  __int64 v167; // rsi\n  __int32 v168; // ecx\n  __int64 v169; // rdx\n  bool v170; // r8\n  bool v171; // cl\n  bool v172; // si\n  bool v173; // di\n  _BOOL8 v174; // rdx\n  bool v175; // of\n  unsigned __int8 v176; // al\n  __int64 v177; // rax\n  __int64 v178; // rax\n  __m128i v179; // xmm7\n  __int64 v180; // rax\n  __int64 v181; // rax\n  __int64 v182; // rax\n  __int64 v183; // rax\n  __int64 v184; // rax\n  __int64 v185; // rcx\n  __int8 v186; // al\n  __int64 v187; // rax\n  int v188; // eax\n  bool v189; // r8\n  __int64 v190; // rax\n  __int64 v191; // rdx\n  __int64 v192; // rdx\n  bool v193; // di\n  __int64 v194; // rdx\n  bool v195; // si\n  __int64 v196; // rdx\n  bool v197; // r11\n  __int64 v198; // rdx\n  bool v199; // r10\n  __int64 v200; // rdx\n  _BOOL8 v201; // rcx\n  __int64 v202; // r9\n  char *v203; // rbp\n  int v204; // edx\n  unsigned int v205; // eax\n  bool v206; // cf\n  _BOOL4 v207; // eax\n  __int64 v208; // rbp\n  const char *v209; // rsi\n  char **v210; // rbx\n  _BOOL4 v211; // ebp\n  bool v212; // dl\n  bool v213; // zf\n  const char *v214; // rsi\n  char **v215; // rcx\n  __int64 v216; // rbp\n  char **v217; // rax\n  __m128i v218; // xmm7\n  __int64 v219; // rax\n  bool v220; // r8\n  bool v221; // cl\n  bool v222; // dl\n  bool v223; // si\n  _BOOL8 v224; // rdi\n  _BOOL8 v225; // rdi\n  __int64 v226; // rax\n  char *v227; // rcx\n  int v228; // r8d\n  char *v229; // rbx\n  char v230; // dl\n  const char *v231; // rsi\n  char *v232; // r15\n  const char **v233; // rbx\n  int v234; // ebp\n  int v235; // eax\n  const char **v236; // rcx\n  const char *v237; // rsi\n  char *v238; // r15\n  const char **v239; // rbx\n  int v240; // ebp\n  int v241; // eax\n  const char **v242; // r10\n  char v243; // al\n  char *v244; // rsi\n  char *v245; // rcx\n  char **v246; // rcx\n  char *v247; // rsi\n  __int64 v248; // [rsp-20h] [rbp-608h]\n  __int64 v249; // [rsp-20h] [rbp-608h]\n  __int64 v250; // [rsp+8h] [rbp-5E0h]\n  int v251; // [rsp+8h] [rbp-5E0h]\n  unsigned int v252; // [rsp+8h] [rbp-5E0h]\n  unsigned int v253; // [rsp+8h] [rbp-5E0h]\n  __m128i *v254; // [rsp+8h] [rbp-5E0h]\n  int v255; // [rsp+8h] [rbp-5E0h]\n  __int64 v256; // [rsp+10h] [rbp-5D8h]\n  char *v257; // [rsp+10h] [rbp-5D8h]\n  __int64 v258; // [rsp+10h] [rbp-5D8h]\n  __int64 v259; // [rsp+10h] [rbp-5D8h]\n  __m128i *v260; // [rsp+10h] [rbp-5D8h]\n  int v261; // [rsp+18h] [rbp-5D0h]\n  __int64 v262; // [rsp+18h] [rbp-5D0h]\n  char v263; // [rsp+18h] [rbp-5D0h]\n  char v264; // [rsp+18h] [rbp-5D0h]\n  int v265; // [rsp+24h] [rbp-5C4h]\n  __int64 v266; // [rsp+28h] [rbp-5C0h]\n  __int64 v267; // [rsp+30h] [rbp-5B8h]\n  __int64 v268; // [rsp+38h] [rbp-5B0h]\n  __int64 v269; // [rsp+40h] [rbp-5A8h]\n  __m128i *v270; // [rsp+48h] [rbp-5A0h]\n  __m128i *v271; // [rsp+50h] [rbp-598h]\n  __int64 v272; // [rsp+58h] [rbp-590h]\n  char *v273; // [rsp+60h] [rbp-588h]\n  __int64 v274; // [rsp+68h] [rbp-580h]\n  __int64 v275; // [rsp+70h] [rbp-578h]\n  __int64 v276; // [rsp+78h] [rbp-570h]\n  char s1[19]; // [rsp+80h] [rbp-568h] BYREF\n  _BYTE v278[5]; // [rsp+93h] [rbp-555h] BYREF\n  __int16 v279[19]; // [rsp+A0h] [rbp-548h] BYREF\n  __int16 v280; // [rsp+C6h] [rbp-522h] BYREF\n  __m128i v281; // [rsp+D0h] [rbp-518h] BYREF\n  __m128i v282; // [rsp+E0h] [rbp-508h] BYREF\n  __m128i v283; // [rsp+F0h] [rbp-4F8h] BYREF\n  __int64 v284; // [rsp+100h] [rbp-4E8h]\n  __m128i v285; // [rsp+110h] [rbp-4D8h] BYREF\n  __m128i v286; // [rsp+120h] [rbp-4C8h] BYREF\n  __m128i v287; // [rsp+130h] [rbp-4B8h] BYREF\n  __int64 v288; // [rsp+140h] [rbp-4A8h]\n  char v289; // [rsp+150h] [rbp-498h] BYREF\n\n  v2 = 0LL;\n  v4 = 38;\n  v5 = -2;\n  v279[0] = 0;\n  v6 = &v289;\n  v7 = v279;\n  v265 = 0;\nLABEL_2:\n  if ( v5 != -2 )\n    goto LABEL_3;\n  v30 = (unsigned __int8 *)a1->m128i_i64[0];\n  v31 = *(unsigned __int8 *)a1->m128i_i64[0];\n  LOBYTE(v32) = *(_BYTE *)a1->m128i_i64[0];\n  while ( 1 )\n  {\nLABEL_30:\n    LOBYTE(v33) = v32;\n    if ( (unsigned __int8)v32 > 0x20u )\n      goto LABEL_54;\n    if ( ((1LL << v32) & 0x100003E00LL) == 0 )\n    {\nLABEL_35:\n      if ( (unsigned int)(v31 - 48) > 9 )\n      {\n        v35 = v31 - 65;\n        if ( (unsigned int)(v31 - 65) > 0x39 )\n          goto LABEL_26;\nLABEL_37:\n        if ( ((1LL << v35) & 0x3FFFFFF03FFFFFFLL) == 0 )\n          goto LABEL_57;\n        v36 = s1;\n        for ( i = (unsigned __int8 *)(a1->m128i_i64[0] + 1); ; ++i )\n        {\n          if ( v36 < v278 )\n            *v36++ = v33;\n          a1->m128i_i64[0] = (__int64)i;\n          LODWORD(v33) = *i;\n          if ( ((unsigned int)(v33 - 65) > 0x39 || ((1LL << ((unsigned __int8)v33 - 65)) & 0x3FFFFFF03FFFFFFLL) == 0)\n            && (_BYTE)v33 != 46 )\n          {\n            break;\n          }\n        }\n        *v36 = 0;\n        v38 = s1[0];\n        for ( j = s1; *j; v38 = *j )\n        {\n          if ( (unsigned int)v38 - 97 < 0x1A )\n            v38 -= 32;\n          *j++ = v38;\n        }\n        v257 = v6;\n        v40 = \"AM\";\n        v41 = (const char **)&off_4162E0;\n        v251 = v2;\n        v42 = a1;\n        do\n        {\n          if ( !strcmp(s1, v40) )\n          {\n            a1 = v42;\n            v43 = v41;\n            v2 = v251;\n            v6 = v257;\n            v44 = *((int *)v43 + 3);\n            v5 = *((_DWORD *)v43 + 2);\n            goto LABEL_53;\n          }\n          v41 += 2;\n          v40 = *v41;\n        }\n        while ( *v41 );\n        v202 = (__int64)v42;\n        v203 = s1;\n        do\n        {\n          v204 = *(_DWORD *)v203;\n          v203 += 4;\n          v205 = ~v204 & (v204 - 16843009) & 0x80808080;\n        }\n        while ( !v205 );\n        if ( (~v204 & (v204 - 16843009) & 0x8080) == 0 )\n        {\n          LOBYTE(v205) = (~v204 & (v204 - 16843009) & 0x80808080) >> 16;\n          v203 += 2;\n        }\n        v206 = __CFADD__((_BYTE)v205, (_BYTE)v205);\n        v207 = 1;\n        v208 = &v203[-v206 - 3] - s1;\n        if ( v208 != 3 )\n        {\n          v207 = 0;\n          if ( v208 == 4 )\n            v207 = s1[3] == 46;\n        }\n        v209 = \"JANUARY\";\n        v268 = v208;\n        v210 = &off_416140;\n        v211 = v207;\n        v262 = v202;\n        do\n        {\n          if ( v211 )\n            v212 = strncmp(s1, v209, 3uLL) == 0;\n          else\n            v212 = strcmp(s1, v209) == 0;\n          if ( v212 )\n            goto LABEL_254;\n          v210 += 2;\n          v209 = *v210;\n        }\n        while ( *v210 );\n        v6 = v257;\n        v216 = v268;\n        LODWORD(v269) = v251;\n        v217 = sub_4051C0(v262, s1);\n        a1 = (__m128i *)v262;\n        v2 = (int)v269;\n        if ( !v217 )\n        {\n          v213 = memcmp(s1, \"DST\", 4uLL) == 0;\n          v214 = \"YEAR\";\n          if ( v213 )\n          {\n            v281.m128i_i64[0] = 0LL;\n            v5 = 259;\n            goto LABEL_71;\n          }\n          v210 = &off_416080;\n          v251 = v269;\n          LOBYTE(v268) = 0;\n          while ( strcmp(s1, v214) )\n          {\n            v210 += 2;\n            v214 = *v210;\n            if ( !*v210 )\n            {\n              v227 = &s1[v216 - 1];\n              v228 = v251;\n              v229 = v257;\n              v230 = v268;\n              a1 = (__m128i *)v262;\n              if ( *v227 == 83 )\n              {\n                v253 = v4;\n                v237 = \"YEAR\";\n                v238 = v257;\n                v259 = v216;\n                v239 = (const char **)&off_416080;\n                v240 = v228;\n                *v227 = 0;\n                do\n                {\n                  v269 = (__int64)a1;\n                  v268 = (__int64)v227;\n                  v264 = v230;\n                  v241 = strcmp(s1, v237);\n                  v230 = v264;\n                  v227 = (char *)v268;\n                  a1 = (__m128i *)v269;\n                  if ( !v241 )\n                  {\n                    v242 = v239;\n                    v2 = v240;\n                    v6 = v238;\n                    v4 = v253;\n                    v44 = *((int *)v242 + 3);\n                    v5 = *((_DWORD *)v242 + 2);\n                    goto LABEL_53;\n                  }\n                  v239 += 2;\n                  v237 = *v239;\n                }\n                while ( *v239 );\n                v228 = v240;\n                v229 = v238;\n                v216 = v259;\n                v4 = v253;\n                *(_BYTE *)v268 = 83;\n              }\n              v252 = v4;\n              v231 = \"TOMORROW\";\n              v232 = v229;\n              v258 = v216;\n              v233 = (const char **)&off_415F20;\n              v234 = v228;\n              do\n              {\n                v268 = (__int64)a1;\n                v263 = v230;\n                v235 = strcmp(s1, v231);\n                v230 = v263;\n                a1 = (__m128i *)v268;\n                if ( !v235 )\n                {\n                  v236 = v233;\n                  v2 = v234;\n                  v6 = v232;\n                  v4 = v252;\n                  v44 = *((int *)v236 + 3);\n                  v5 = *((_DWORD *)v236 + 2);\n                  goto LABEL_53;\n                }\n                v233 += 2;\n                v231 = *v233;\n              }\n              while ( *v233 );\n              v2 = v234;\n              v6 = v232;\n              v243 = s1[0];\n              v4 = v252;\n              if ( v258 == 1 )\n              {\n                v246 = &off_415A40;\n                if ( s1[0] == 65 )\n                {\n                  v281.m128i_i64[0] = -3600LL;\n                  v5 = 273;\n                  goto LABEL_71;\n                }\n                while ( 1 )\n                {\n                  v247 = v246[2];\n                  if ( !v247 )\n                    break;\n                  if ( *v247 == s1[0] )\n                  {\n                    v44 = *((int *)v246 + 7);\n                    v5 = *((_DWORD *)v246 + 6);\n                    goto LABEL_53;\n                  }\n                  v246 += 2;\n                }\n              }\n              v244 = s1;\n              v245 = s1;\n              if ( !s1[0] )\n                goto LABEL_279;\n              do\n              {\n                if ( v243 == 46 )\n                  v230 = 1;\n                else\n                  ++v245;\n                v243 = *++v244;\n                *v245 = *v244;\n              }\n              while ( v243 );\n              if ( !v230 || (v254 = a1, v217 = sub_4051C0((__int64)a1, s1), a1 = v254, v2 = v234, !v217) )\n              {\nLABEL_279:\n                if ( !a1[13].m128i_i8[9] )\n                  goto LABEL_114;\n                v260 = a1;\n                v255 = v2;\n                v5 = 63;\n                dcgettext(0LL, \"error: unknown word '%s'\\n\", 5);\n                sub_404F90();\n                v8 = 2;\n                v2 = v255;\n                a1 = v260;\n                goto LABEL_72;\n              }\n              goto LABEL_256;\n            }\n          }\nLABEL_254:\n          v215 = v210;\n          v2 = v251;\n          v6 = v257;\n          a1 = (__m128i *)v262;\n          v44 = *((int *)v215 + 3);\n          v5 = *((_DWORD *)v215 + 2);\n          goto LABEL_53;\n        }\nLABEL_256:\n        v44 = *((int *)v217 + 3);\n        v5 = *((_DWORD *)v217 + 2);\nLABEL_53:\n        v281.m128i_i64[0] = v44;\nLABEL_3:\n        if ( v5 <= 0 )\n          goto LABEL_27;\n        if ( v5 > 277 )\n        {\n          v4 += 2;\n          v8 = 2;\n          goto LABEL_6;\n        }\n        goto LABEL_71;\n      }\nLABEL_102:\n      v30 = (unsigned __int8 *)a1->m128i_i64[0];\n      v50 = 0;\nLABEL_74:\n      v51 = v30;\n      v52 = 0LL;\n      v53 = (unsigned __int8)v33;\n      while ( 1 )\n      {\n        v54 = v53 - 48;\n        if ( v50 == -1 )\n          v54 = 48 - v53;\n        v175 = __OFADD__(v54, v52);\n        v55 = v54 + v52;\n        if ( v175 )\n          goto LABEL_114;\n        v53 = v51[1];\n        v56 = (__int64)(v51 + 1);\n        if ( (unsigned int)(v53 - 48) > 9 )\n          break;\n        v175 = (unsigned __int128)(10 * (__int128)v55) >> 64 != 0;\n        v52 = 10 * v55;\n        if ( v175 )\n          goto LABEL_114;\n        ++v51;\n      }\n      if ( (v51[1] & 0xFD) != 44 || (v57 = (char)v51[2] - 48, (unsigned int)v57 > 9) )\n      {\n        a1->m128i_i64[0] = v56;\n        v266 = v55;\n        v281.m128i_i8[0] = v50 < 0;\n        v267 = v56 - (_QWORD)v30;\n        v8 = 20 - (v50 != 0);\n        v5 = 275 - (v50 != 0);\n        goto LABEL_72;\n      }\n      v58 = (char *)(v51 + 3);\n      v59 = (char)v51[3];\n      v60 = 8;\n      v61 = v59;\n      do\n      {\n        v62 = v59 - 48;\n        v57 *= 10;\n        if ( (unsigned int)(v59 - 48) <= 9 )\n        {\n          v59 = v58[1];\n          v57 += v62;\n          ++v58;\n          v61 = v59;\n          v62 = v59 - 48;\n        }\n        --v60;\n      }\n      while ( v60 );\n      if ( v50 != -1 )\n      {\n        if ( v62 > 9 )\n          goto LABEL_247;\n        goto LABEL_87;\n      }\n      if ( v62 <= 9 )\n      {\n        if ( v61 != 48 )\n        {\nLABEL_112:\n          ++v57;\n          if ( (unsigned int)(*v58 - 48) > 9 )\n            goto LABEL_90;\n          do\nLABEL_87:\n            ++v58;\n          while ( (unsigned int)(*v58 - 48) <= 9 );\n          if ( v50 < 0 && v57 )\n            goto LABEL_90;\nLABEL_247:\n          a1->m128i_i64[0] = (__int64)v58;\n          v266 = v57;\n          v281.m128i_i64[0] = v55;\n          v8 = 22 - (v50 != 0);\n          v5 = 277 - (v50 != 0);\n          goto LABEL_72;\n        }\n        while ( 1 )\n        {\n          v89 = *++v58;\n          if ( (unsigned int)(v89 - 48) > 9 )\n            break;\n          if ( (_BYTE)v89 != 48 )\n            goto LABEL_112;\n        }\n      }\n      if ( !v57 )\n      {\n        a1->m128i_i64[0] = (__int64)v58;\n        v8 = 21;\n        v5 = 276;\n        v281.m128i_i64[0] = v55;\n        v266 = 0LL;\n        goto LABEL_72;\n      }\nLABEL_90:\n      if ( v55 != 0x8000000000000000LL )\n      {\n        a1->m128i_i64[0] = (__int64)v58;\n        v5 = 276;\n        v281.m128i_i64[0] = v55 - 1;\n        v266 = 1000000000 - v57;\n        v8 = 21;\n        goto LABEL_72;\n      }\nLABEL_114:\n      v8 = 2;\n      v5 = 63;\n      goto LABEL_72;\n    }\n    v34 = v30 + 1;\n    while ( 1 )\n    {\n      a1->m128i_i64[0] = (__int64)v34;\n      v31 = *v34;\n      v30 = v34;\n      LOBYTE(v33) = *v34;\n      if ( (unsigned __int8)v31 > 0x20u )\n        break;\n      ++v34;\n      if ( ((1LL << v33) & 0x100003E00LL) == 0 )\n        goto LABEL_35;\n    }\nLABEL_54:\n    v45 = (v33 - 43) & 0xFD;\n    if ( (unsigned int)(v31 - 48) <= 9 )\n    {\n      v49 = (_BYTE)v33 == 45;\n      if ( v45 )\n        goto LABEL_102;\n      goto LABEL_66;\n    }\n    if ( v45 )\n      break;\n    v49 = (_BYTE)v33 == 45;\nLABEL_66:\n    v33 = a1->m128i_i64[0] + 1;\n    v50 = !v49 ? 1 : -1;\n    while ( 1 )\n    {\n      a1->m128i_i64[0] = v33;\n      v30 = (unsigned __int8 *)v33;\n      LOBYTE(v33) = *(_BYTE *)v33;\n      LOBYTE(v32) = v33;\n      if ( (unsigned __int8)v33 > 0x20u )\n        break;\n      v33 = (__int64)(v30 + 1);\n      if ( ((1LL << v32) & 0x100003E00LL) == 0 )\n      {\n        v31 = (unsigned __int8)v32;\n        goto LABEL_30;\n      }\n    }\n    v31 = (unsigned __int8)v33;\n    if ( (unsigned int)(unsigned __int8)v33 - 48 <= 9 )\n      goto LABEL_74;\n  }\n  v35 = v31 - 65;\n  if ( (unsigned int)(v31 - 65) <= 0x39 )\n    goto LABEL_37;\nLABEL_57:\n  if ( (_BYTE)v33 != 40 )\n  {\nLABEL_26:\n    a1->m128i_i64[0] = (__int64)(v30 + 1);\n    v5 = *v30;\n    if ( !(_BYTE)v5 )\n      goto LABEL_27;\nLABEL_71:\n    v8 = (unsigned __int8)byte_416640[v5];\nLABEL_72:\n    v4 += v8;\n    goto LABEL_6;\n  }\n  v46 = (_BYTE *)a1->m128i_i64[0];\n  v47 = 0LL;\n  while ( 1 )\n  {\n    v30 = v46 + 1;\n    a1->m128i_i64[0] = (__int64)(v46 + 1);\n    v48 = *v46;\n    if ( !*v46 )\n      break;\n    if ( v48 == 40 )\n      ++v47;\n    else\n      v47 -= v48 == 41;\n    if ( !v47 )\n    {\n      v31 = (unsigned __int8)v46[1];\n      v32 = (unsigned __int8)v46[1];\n      goto LABEL_30;\n    }\n    ++v46;\n  }\nLABEL_27:\n  v8 = 0;\n  v5 = 0;\nLABEL_6:\n  if ( v4 <= 0x70 && byte_416400[v4] == v8 )\n  {\n    v2 = (unsigned __int8)byte_416480[v4];\n    if ( byte_416480[v4] )\n    {\n      v9 = (__m128i *)v7;\n      v5 = -2;\n      v6 += 56;\n      v265 = (v265 == 0) + v265 - 1;\n      v281.m128i_i64[1] = v266;\n      v10 = _mm_load_si128(&v281);\n      v282.m128i_i64[0] = v267;\n      v11 = v284;\n      a2 = _mm_load_si128(&v282);\n      *(__m128i *)v6 = v10;\n      v12 = _mm_load_si128(&v283);\n      *((_QWORD *)v6 + 6) = v11;\n      *((__m128i *)v6 + 1) = a2;\n      *((__m128i *)v6 + 2) = v12;\n      goto LABEL_10;\n    }\n    v66 = *((_QWORD *)v6 + 13);\n    v9 = (__m128i *)v7;\n    v67 = (__int64)v6;\n    a2 = _mm_loadu_si128((const __m128i *)(v6 + 72));\n    v23 = *((_QWORD *)v6 + 7);\n    v285 = _mm_loadu_si128((const __m128i *)(v6 + 56));\n    v68 = _mm_loadu_si128((const __m128i *)(v6 + 88));\n    v24 = *((_QWORD *)v6 + 8);\n    v26 = *((_QWORD *)v6 + 9);\n    v288 = v66;\n    v69 = *((_QWORD *)v6 + 11);\n    v27 = *((_QWORD *)v6 + 10);\n    v286 = a2;\n    v287 = v68;\n    v256 = v69;\n    v250 = *((_QWORD *)v6 + 12);\n    v261 = *((_DWORD *)v6 + 26);\n    v70 = -28;\n    goto LABEL_99;\n  }\n  while ( 1 )\n  {\n    v13 = (unsigned __int8)byte_416540[v2];\n    v14 = byte_416540[v2];\n    if ( v14 )\n    {\n      v18 = (unsigned __int8)byte_416340[(unsigned __int8)byte_416540[v2]];\n      v19 = (const __m128i *)&v6[56 * (1 - (unsigned __int8)byte_416340[(unsigned __int8)byte_416540[v2]])];\n      v20 = _mm_loadu_si128(v19);\n      v21 = _mm_loadu_si128(v19 + 1);\n      v22 = _mm_loadu_si128(v19 + 2);\n      v23 = v19->m128i_i64[0];\n      v24 = v19->m128i_i64[1];\n      v288 = v19[3].m128i_i64[0];\n      v25 = v19[2].m128i_i64[0];\n      v26 = v19[1].m128i_i64[0];\n      v285 = v20;\n      v27 = v19[1].m128i_i64[1];\n      v286 = v21;\n      v256 = v25;\n      v28 = v19[2].m128i_i64[1];\n      LODWORD(v19) = v19[3].m128i_i32[0];\n      v287 = v22;\n      v250 = v28;\n      v261 = (int)v19;\n      v29 = (unsigned __int8)(v14 - 4);\n      switch ( (char)v29 )\n      {\n        case 0:\n          a2 = _mm_loadu_si128((const __m128i *)v6);\n          a1[10].m128i_i8[0] = 1;\n          *(__m128i *)((char *)a1 + 88) = a2;\n          v270 = (__m128i *)v24;\n          v269 = v27;\n          v268 = (__int64)a1;\n          v104 = dcgettext(0LL, \"number of seconds\", 5);\n          v9 = (__m128i *)(v7 - 2);\n          v67 = (__int64)(v6 - 112);\n          LODWORD(v2) = -93;\n          v105 = (__int64)v104;\n          v70 = 2;\n          goto LABEL_147;\n        case 3:\n          v270 = (__m128i *)v24;\n          v106 = (const char *)&unk_414A05;\n          v269 = v27;\n          ++a1[12].m128i_i64[1];\n          ++a1[10].m128i_i64[1];\n          v268 = (__int64)a1;\n          goto LABEL_151;\n        case 4:\n          v270 = (__m128i *)v24;\n          v106 = \"time\";\n          v269 = v27;\n          ++a1[12].m128i_i64[1];\n          v268 = (__int64)a1;\n          goto LABEL_151;\n        case 5:\n          v270 = (__m128i *)v24;\n          v106 = (const char *)&unk_414A0E;\n          v269 = v27;\n          ++a1[11].m128i_i64[1];\n          v268 = (__int64)a1;\n          goto LABEL_151;\n        case 6:\n          v270 = (__m128i *)v24;\n          v106 = \"zone\";\n          ++a1[13].m128i_i64[0];\n          v269 = v27;\n          v268 = (__int64)a1;\n          goto LABEL_151;\n        case 7:\n          v270 = (__m128i *)v24;\n          v106 = \"date\";\n          v269 = v27;\n          ++a1[10].m128i_i64[1];\n          v268 = (__int64)a1;\n          goto LABEL_151;\n        case 8:\n          v270 = (__m128i *)v24;\n          v106 = \"day\";\n          v269 = v27;\n          ++a1[11].m128i_i64[0];\n          v268 = (__int64)a1;\nLABEL_151:\n          v107 = dcgettext(0LL, v106, 5);\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          LODWORD(v2) = -93;\n          v105 = (__int64)v107;\n          v70 = 4;\nLABEL_147:\n          a1 = (__m128i *)v268;\n          v27 = v269;\n          v24 = (__int64)v270;\n          if ( !*(_BYTE *)(v268 + 217) )\n            break;\n          LODWORD(v274) = -93;\n          v273 = (char *)v67;\n          LODWORD(v272) = v70;\n          v271 = v270;\n          v270 = v9;\n          sub_4055A0(v105, v268);\n          goto LABEL_149;\n        case 9:\n          v270 = a1;\n          v141 = \"relative\";\n          v269 = v24;\n          v268 = v27;\n          goto LABEL_183;\n        case 10:\n          v270 = a1;\n          v269 = v24;\n          v268 = v27;\n          v143 = dcgettext(0LL, \"number\", 5);\n          a1 = v270;\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          v144 = (__int64)v143;\n          LODWORD(v2) = -93;\n          v70 = 4;\n          v27 = v268;\n          v24 = v269;\n          if ( !v270[13].m128i_i8[9] )\n            break;\n          v145 = (__int64)v270;\n          LODWORD(v274) = -93;\n          v273 = v6 - 56;\n          LODWORD(v272) = 4;\n          v271 = (__m128i *)v269;\n          v270 = (__m128i *)(v7 - 1);\n          v269 = v268;\n          v268 = (__int64)a1;\n          sub_4055A0(v144, v145);\n          goto LABEL_149;\n        case 11:\n          v270 = a1;\n          v141 = \"hybrid\";\n          v269 = v24;\n          v268 = v27;\nLABEL_183:\n          v142 = dcgettext(0LL, v141, 5);\n          a1 = v270;\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          v129 = (__int64)v142;\n          LODWORD(v2) = -93;\n          v70 = 4;\n          v27 = v268;\n          v24 = v269;\n          if ( !v270[13].m128i_i8[9] )\n            break;\n          LODWORD(v274) = -93;\n          v130 = (__int64)v270;\n          v273 = v6 - 56;\n          LODWORD(v272) = 4;\n          v271 = (__m128i *)v269;\n          v270 = (__m128i *)(v7 - 1);\n          v269 = v268;\n          v268 = (__int64)a1;\n          goto LABEL_175;\n        case 14:\n          v139 = *((_QWORD *)v6 - 6);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          a1[5].m128i_i64[0] = 0LL;\n          a1[5].m128i_i64[1] = 0LL;\n          LODWORD(v2) = -93;\n          a1[4].m128i_i64[1] = v139;\n          v140 = *(_QWORD *)v6;\n          a1[6].m128i_i64[0] = 0LL;\n          a1[1].m128i_i32[3] = v140;\n          v70 = 7;\n          break;\n        case 15:\n          v136 = *((_QWORD *)v6 - 6);\n          v137 = *((_QWORD *)v6 - 20);\n          v9 = (__m128i *)(v7 - 4);\n          a1[5].m128i_i64[1] = 0LL;\n          a1[6].m128i_i64[0] = 0LL;\n          LODWORD(v2) = -93;\n          a1[5].m128i_i64[0] = v136;\n          v138 = *(_QWORD *)v6;\n          a1[4].m128i_i64[1] = v137;\n          v67 = (__int64)(v6 - 224);\n          a1[1].m128i_i32[3] = v138;\n          v70 = 7;\n          break;\n        case 16:\n          v132 = *((_QWORD *)v6 - 20);\n          LODWORD(v2) = -93;\n          v133 = *((_QWORD *)v6 - 34);\n          a1[5].m128i_i64[1] = *((_QWORD *)v6 - 7);\n          v134 = *((int *)v6 - 12);\n          a1[4].m128i_i64[1] = v133;\n          v9 = (__m128i *)(v7 - 6);\n          a1[6].m128i_i64[0] = v134;\n          v135 = *(_QWORD *)v6;\n          a1[5].m128i_i64[0] = v132;\n          v67 = (__int64)(v6 - 336);\n          a1[1].m128i_i32[3] = v135;\n          v70 = 7;\n          break;\n        case 18:\n          v113 = *((_QWORD *)v6 - 6);\n          a1[5].m128i_i64[0] = 0LL;\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          a1[5].m128i_i64[1] = 0LL;\n          LODWORD(v2) = 20;\n          a1[4].m128i_i64[1] = v113;\n          v70 = 8;\n          a1[6].m128i_i64[0] = 0LL;\n          a1[1].m128i_i32[3] = 2;\n          break;\n        case 19:\n          v111 = *((_QWORD *)v6 - 6);\n          v112 = *((_QWORD *)v6 - 20);\n          a1[5].m128i_i64[1] = 0LL;\n          v9 = (__m128i *)(v7 - 4);\n          a1[6].m128i_i64[0] = 0LL;\n          LODWORD(v2) = 20;\n          a1[4].m128i_i64[1] = v112;\n          v67 = (__int64)(v6 - 224);\n          a1[5].m128i_i64[0] = v111;\n          v70 = 8;\n          a1[1].m128i_i32[3] = 2;\n          break;\n        case 20:\n          v97 = *((_QWORD *)v6 - 7);\n          v98 = *((_QWORD *)v6 - 20);\n          a1[1].m128i_i32[3] = 2;\n          LODWORD(v2) = 20;\n          v99 = *((_QWORD *)v6 - 34);\n          a1[5].m128i_i64[1] = v97;\n          v100 = *((int *)v6 - 12);\n          a1[4].m128i_i64[1] = v99;\n          v9 = (__m128i *)(v7 - 6);\n          a1[5].m128i_i64[0] = v98;\n          v67 = (__int64)(v6 - 336);\n          a1[6].m128i_i64[0] = v100;\n          v70 = 8;\n          break;\n        case 23:\n          v92 = *((_QWORD *)v6 - 5);\n          v93 = *(_QWORD *)v6;\n          v270 = (__m128i *)v24;\n          v94 = *((_QWORD *)v6 - 6);\n          v95 = *(v6 - 56);\n          v269 = v27;\n          ++a1[13].m128i_i64[0];\n          v268 = (__int64)a1;\n          v96 = sub_405100(&a1[1].m128i_i32[2], v95, v94, v92, v93);\n          a1 = (__m128i *)v268;\n          v27 = v269;\n          v24 = (__int64)v270;\n          if ( !v96 )\n            return 1LL;\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -27;\n          v70 = 10;\n          break;\n        case 24:\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          LODWORD(v2) = -93;\n          a1[1].m128i_i32[1] = *(_QWORD *)v6;\n          v70 = 11;\n          break;\n        case 25:\n          a1[1].m128i_i32[1] = 1;\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -93;\n          ++a1[12].m128i_i64[0];\n          v70 = 11;\n          break;\n        case 26:\n          v91 = *(_QWORD *)v6;\n          goto LABEL_120;\n        case 27:\n          a1[1].m128i_i32[2] = 25200;\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          LODWORD(v2) = -93;\n          v70 = 12;\n          break;\n        case 28:\n          v131 = *((_QWORD *)v6 - 7);\n          v270 = (__m128i *)v24;\n          v269 = v27;\n          a1[1].m128i_i32[2] = v131;\n          goto LABEL_171;\n        case 29:\n          v270 = (__m128i *)v24;\n          v269 = v27;\n          a1[1].m128i_i32[2] = 25200;\nLABEL_171:\n          v114 = *((_DWORD *)v6 + 12);\n          v115 = __OFADD__(a1[9].m128i_i32[2], v114);\n          a1[9].m128i_i32[2] += v114;\n          v116 = a1[9].m128i_i64[0];\n          v117 = *((_QWORD *)v6 + 5) + v116;\n          LOBYTE(v116) = __OFADD__(*((_QWORD *)v6 + 5), v116);\n          a1[9].m128i_i64[0] = v117;\n          v118 = a1[8].m128i_i64[1];\n          v119 = __OFADD__(*((_QWORD *)v6 + 4), v118);\n          a1[8].m128i_i64[1] = *((_QWORD *)v6 + 4) + v118;\n          v120 = a1[8].m128i_i64[0];\n          v121 = __OFADD__(*((_QWORD *)v6 + 3), v120);\n          a1[8].m128i_i64[0] = *((_QWORD *)v6 + 3) + v120;\n          v122 = a1[7].m128i_i64[1];\n          v123 = __OFADD__(*((_QWORD *)v6 + 2), v122);\n          a1[7].m128i_i64[1] = *((_QWORD *)v6 + 2) + v122;\n          v124 = a1[7].m128i_i64[0];\n          v125 = __OFADD__(*((_QWORD *)v6 + 1), v124);\n          a1[7].m128i_i64[0] = *((_QWORD *)v6 + 1) + v124;\n          v126 = a1[6].m128i_i64[1];\n          v127 = __OFADD__(*(_QWORD *)v6, v126);\n          a1[6].m128i_i64[1] = *(_QWORD *)v6 + v126;\n          if ( (unsigned __int8)(v123 | v121 | v119 | v115 | v116) | v125 || v127 )\n            return 1LL;\n          a1[10].m128i_i8[1] = 1;\n          v268 = (__int64)a1;\n          v128 = dcgettext(0LL, \"relative\", 5);\n          a1 = (__m128i *)v268;\n          v9 = (__m128i *)(v7 - 2);\n          v67 = (__int64)(v6 - 112);\n          v129 = (__int64)v128;\n          LODWORD(v2) = -93;\n          v70 = 12;\n          v27 = v269;\n          v24 = (__int64)v270;\n          if ( *(_BYTE *)(v268 + 217) )\n          {\n            LODWORD(v274) = -93;\n            v130 = v268;\n            v273 = v6 - 112;\n            LODWORD(v272) = 12;\n            v271 = v270;\n            v270 = (__m128i *)(v7 - 2);\nLABEL_175:\n            sub_405280(v129, v130);\nLABEL_149:\n            a1 = (__m128i *)v268;\n            v27 = v269;\n            v9 = v270;\n            v24 = (__int64)v271;\n            v70 = v272;\n            v67 = (__int64)v273;\n            LODWORD(v2) = v274;\n          }\n          break;\n        case 30:\n          v150 = *((_QWORD *)v6 - 5);\n          v151 = *(_QWORD *)v6;\n          v270 = (__m128i *)v24;\n          v152 = *((_QWORD *)v6 - 6);\n          v153 = *(v6 - 56);\n          v269 = v27;\n          v268 = (__int64)a1;\n          if ( !(unsigned __int8)sub_405100(&a1[1].m128i_i32[2], v153, v152, v150, v151) )\n            return 1LL;\n          a1 = (__m128i *)v268;\n          v154 = *(int *)(v268 + 24);\n          v175 = __OFADD__(*((_QWORD *)v6 - 14), v154);\n          v155 = *((_QWORD *)v6 - 14) + v154;\n          v156 = v175;\n          *(_DWORD *)(v268 + 24) = v155;\n          if ( v155 != (int)v155 )\n            v156 = 1;\n          if ( v156 )\n            return 1LL;\n          v67 = (__int64)(v6 - 168);\n          v9 = (__m128i *)(v7 - 3);\n          LODWORD(v2) = -93;\n          v70 = 12;\n          v27 = v269;\n          v24 = (__int64)v270;\n          break;\n        case 31:\n          LODWORD(v91) = *(_DWORD *)v6 + 3600;\nLABEL_120:\n          a1[1].m128i_i32[2] = v91;\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          LODWORD(v2) = -93;\n          v70 = 12;\n          break;\n        case 32:\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -93;\n          a1[1].m128i_i32[2] = *((_DWORD *)v6 - 14) + 3600;\n          v70 = 12;\n          break;\n        case 33:\n          v149 = *(_QWORD *)v6;\n          a1->m128i_i64[1] = 0LL;\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          LODWORD(v2) = -93;\n          a1[1].m128i_i32[0] = v149;\n          v70 = 13;\n          break;\n        case 34:\n          v148 = *((_QWORD *)v6 - 7);\n          a1->m128i_i64[1] = 0LL;\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -93;\n          a1[1].m128i_i32[0] = v148;\n          v70 = 13;\n          break;\n        case 35:\n          v146 = *((_QWORD *)v6 - 7);\n          goto LABEL_191;\n        case 36:\n          v146 = *((_QWORD *)v6 - 6);\nLABEL_191:\n          a1->m128i_i64[1] = v146;\n          v147 = *(_QWORD *)v6;\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          a1[14].m128i_i8[0] = 1;\n          LODWORD(v2) = -93;\n          a1[1].m128i_i32[0] = v147;\n          v70 = 13;\n          break;\n        case 37:\n          v9 = (__m128i *)(v7 - 3);\n          v67 = (__int64)(v6 - 168);\n          LODWORD(v2) = -93;\n          a1[3].m128i_i64[1] = *((_QWORD *)v6 - 13);\n          a1[4].m128i_i64[0] = *((_QWORD *)v6 + 1);\n          v70 = 14;\n          break;\n        case 38:\n          v185 = *((_QWORD *)v6 - 26);\n          v186 = a1[13].m128i_i8[9];\n          if ( v185 <= 3 )\n          {\n            v268 = *((_QWORD *)v6 - 27);\n            if ( v186 )\n            {\n              v271 = a1;\n              v270 = (__m128i *)v24;\n              v269 = v27;\n              dcgettext(0LL, \"warning: value %ld has less than 4 digits. Assuming MM/DD/YY[YY]\\n\", 5);\n              sub_404F90();\n              a1 = v271;\n              v24 = (__int64)v270;\n              v27 = v269;\n            }\n            v218 = _mm_loadu_si128((const __m128i *)v6);\n            v9 = (__m128i *)(v7 - 5);\n            v67 = (__int64)(v6 - 280);\n            LODWORD(v2) = -93;\n            a1[3].m128i_i64[1] = v268;\n            v219 = *((_QWORD *)v6 - 13);\n            a1[2] = v218;\n            a1[4].m128i_i64[0] = v219;\n            a1[3].m128i_i64[0] = *((_QWORD *)v6 + 2);\n            v70 = 14;\n          }\n          else\n          {\n            if ( v186 )\n            {\n              v226 = *((_QWORD *)v6 - 27);\n              v272 = (__int64)a1;\n              v271 = (__m128i *)v24;\n              v270 = (__m128i *)v27;\n              v269 = v185;\n              v268 = v226;\n              dcgettext(0LL, \"warning: value %ld has %ld digits. Assuming YYYY/MM/DD\\n\", 5);\n              sub_404F90();\n              a1 = (__m128i *)v272;\n              v24 = (__int64)v271;\n              v27 = (__int64)v270;\n            }\n            a2 = _mm_loadu_si128((const __m128i *)v6 - 14);\n            v9 = (__m128i *)(v7 - 5);\n            v67 = (__int64)(v6 - 280);\n            LODWORD(v2) = -93;\n            a1[3].m128i_i64[0] = *((_QWORD *)v6 - 26);\n            v187 = *((_QWORD *)v6 - 13);\n            a1[2] = a2;\n            a1[3].m128i_i64[1] = v187;\n            a1[4].m128i_i64[0] = *((_QWORD *)v6 + 1);\n            v70 = 14;\n          }\n          break;\n        case 39:\n          a1[4].m128i_i64[0] = *((_QWORD *)v6 - 13);\n          a1[3].m128i_i64[1] = *((_QWORD *)v6 - 7);\n          v184 = *((_QWORD *)v6 + 1);\n          a1[2].m128i_i64[1] = -v184;\n          if ( v184 == 0x8000000000000000LL )\n            return 1LL;\n          goto LABEL_211;\n        case 40:\n          a1[3].m128i_i64[1] = *((_QWORD *)v6 - 14);\n          v182 = *((_QWORD *)v6 - 6);\n          a1[4].m128i_i64[0] = -v182;\n          if ( v182 == 0x8000000000000000LL )\n            return 1LL;\n          v183 = *((_QWORD *)v6 + 1);\n          a1[2].m128i_i64[1] = -v183;\n          if ( v183 == 0x8000000000000000LL )\n            return 1LL;\n          goto LABEL_211;\n        case 41:\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -93;\n          a1[3].m128i_i64[1] = *((_QWORD *)v6 - 7);\n          a1[4].m128i_i64[0] = *((_QWORD *)v6 + 1);\n          v70 = 14;\n          break;\n        case 42:\n          a2 = _mm_loadu_si128((const __m128i *)v6);\n          v9 = (__m128i *)(v7 - 4);\n          v67 = (__int64)(v6 - 224);\n          LODWORD(v2) = -93;\n          a1[3].m128i_i64[1] = *((_QWORD *)v6 - 21);\n          v181 = *((_QWORD *)v6 - 13);\n          a1[2] = a2;\n          a1[4].m128i_i64[0] = v181;\n          a1[3].m128i_i64[0] = *((_QWORD *)v6 + 2);\n          v70 = 14;\n          break;\n        case 43:\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -93;\n          a1[4].m128i_i64[0] = *((_QWORD *)v6 - 6);\n          a1[3].m128i_i64[1] = *(_QWORD *)v6;\n          v70 = 14;\n          break;\n        case 44:\n          v179 = _mm_loadu_si128((const __m128i *)v6);\n          a1[4].m128i_i64[0] = *((_QWORD *)v6 - 13);\n          v180 = *((_QWORD *)v6 - 7);\n          a1[2] = v179;\n          a1[3].m128i_i64[1] = v180;\nLABEL_211:\n          v9 = (__m128i *)(v7 - 3);\n          v67 = (__int64)(v6 - 168);\n          LODWORD(v2) = -93;\n          a1[3].m128i_i64[0] = *((_QWORD *)v6 + 2);\n          v70 = 14;\n          break;\n        case 46:\n          a2 = _mm_loadu_si128((const __m128i *)v6 - 7);\n          a1[3].m128i_i64[0] = *((_QWORD *)v6 - 12);\n          v177 = *((_QWORD *)v6 - 6);\n          a1[2] = a2;\n          a1[3].m128i_i64[1] = -v177;\n          if ( v177 == 0x8000000000000000LL )\n            return 1LL;\n          v178 = *((_QWORD *)v6 + 1);\n          a1[4].m128i_i64[0] = -v178;\n          if ( v178 == 0x8000000000000000LL )\n            return 1LL;\n          v67 = (__int64)(v6 - 168);\n          v9 = (__m128i *)(v7 - 3);\n          LODWORD(v2) = -93;\n          v70 = 15;\n          break;\n        case 47:\n          v157 = *((_QWORD *)v6 - 7);\n          v158 = *((_QWORD *)v6 - 6);\n          v159 = *((_QWORD *)v6 - 5);\n          v160 = *((_QWORD *)v6 - 4);\n          v161 = *((_DWORD *)v6 - 2);\n          v272 = a1[9].m128i_i64[0];\n          v162 = a1[8].m128i_i64[0];\n          v268 = v157;\n          v269 = v158;\n          v163 = a1[8].m128i_i64[1];\n          v273 = (char *)v162;\n          v164 = a1[7].m128i_i64[1];\n          v270 = (__m128i *)v159;\n          v165 = *((_QWORD *)v6 - 2);\n          v274 = v164;\n          v166 = a1[7].m128i_i64[0];\n          v271 = (__m128i *)v160;\n          v167 = *((_QWORD *)v6 - 3);\n          v275 = v166;\n          v168 = a1[9].m128i_i32[2];\n          v276 = a1[6].m128i_i64[1];\n          v169 = v272;\n          if ( *(int *)v6 < 0 )\n          {\n            a1[9].m128i_i32[2] = v168 - v161;\n            v220 = __OFSUB__(v168, v161);\n            v221 = __OFSUB__(v169, v165);\n            a1[9].m128i_i64[0] = v169 - v165;\n            v222 = __OFSUB__(v163, v167);\n            a1[8].m128i_i64[1] = v163 - v167;\n            v223 = __OFSUB__(v273, v271);\n            a1[8].m128i_i64[0] = v273 - (char *)v271;\n            v224 = __OFSUB__(v274, v270);\n            a1[7].m128i_i64[1] = v274 - (_QWORD)v270;\n            v270 = (__m128i *)v224;\n            v225 = __OFSUB__(v275, v269);\n            a1[7].m128i_i64[0] = v275 - v269;\n            v269 = v225;\n            v175 = __OFSUB__(v276, v268);\n            a1[6].m128i_i64[1] = v276 - v268;\n            v176 = v269 | (unsigned __int8)v270 | (v223 || v222 || v220 || v221);\n          }\n          else\n          {\n            a1[9].m128i_i32[2] = v161 + v168;\n            v170 = __OFADD__(v161, v168);\n            v171 = __OFADD__(v165, v169);\n            a1[9].m128i_i64[0] = v165 + v169;\n            a1[8].m128i_i64[1] = v167 + v163;\n            v272 = __OFADD__(v167, v163);\n            v172 = __OFADD__(v271, v273);\n            a1[8].m128i_i64[0] = (__int64)&v273[(_QWORD)v271];\n            v173 = __OFADD__(v270, v274);\n            a1[7].m128i_i64[1] = (__int64)v270->m128i_i64 + v274;\n            v174 = __OFADD__(v269, v275);\n            a1[7].m128i_i64[0] = v269 + v275;\n            v269 = v174;\n            v175 = __OFADD__(v268, v276);\n            a1[6].m128i_i64[1] = v268 + v276;\n            v176 = v269 | v173 | v172 | v272 | (v170 || v171);\n          }\n          if ( v175 | v176 )\n            return 1LL;\n          a1[10].m128i_i8[1] = 1;\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -93;\n          v70 = 16;\n          break;\n        case 48:\n        case 49:\n          v76 = *((_DWORD *)v6 + 12);\n          v77 = __OFADD__(a1[9].m128i_i32[2], v76);\n          a1[9].m128i_i32[2] += v76;\n          v78 = a1[9].m128i_i64[0];\n          v79 = *((_QWORD *)v6 + 5) + v78;\n          LOBYTE(v78) = __OFADD__(*((_QWORD *)v6 + 5), v78);\n          a1[9].m128i_i64[0] = v79;\n          v80 = a1[8].m128i_i64[1];\n          v81 = __OFADD__(*((_QWORD *)v6 + 4), v80);\n          a1[8].m128i_i64[1] = *((_QWORD *)v6 + 4) + v80;\n          v82 = a1[8].m128i_i64[0];\n          v83 = __OFADD__(*((_QWORD *)v6 + 3), v82);\n          a1[8].m128i_i64[0] = *((_QWORD *)v6 + 3) + v82;\n          v84 = a1[7].m128i_i64[1];\n          v175 = __OFADD__(*((_QWORD *)v6 + 2), v84);\n          a1[7].m128i_i64[1] = *((_QWORD *)v6 + 2) + v84;\n          v85 = a1[7].m128i_i64[0];\n          v268 = v175;\n          v175 = __OFADD__(*((_QWORD *)v6 + 1), v85);\n          a1[7].m128i_i64[0] = *((_QWORD *)v6 + 1) + v85;\n          v269 = v175;\n          v86 = a1[6].m128i_i64[1];\n          v87 = __OFADD__(*(_QWORD *)v6, v86);\n          a1[6].m128i_i64[1] = *(_QWORD *)v6 + v86;\n          if ( (unsigned __int8)(v268 | v83 | v81 | v77 | v78) | (unsigned __int8)v269 || v87 )\n            return 1LL;\n          a1[10].m128i_i8[1] = 1;\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          LODWORD(v2) = -93;\n          v70 = 16;\n          break;\n        case 50:\n          HIDWORD(v288) = 0;\n          v23 = *((_QWORD *)v6 - 7);\n          goto LABEL_162;\n        case 51:\n          HIDWORD(v288) = 0;\n          v23 = *((_QWORD *)v6 - 6);\nLABEL_162:\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -93;\n          v70 = 17;\n          goto LABEL_158;\n        case 52:\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          v70 = 17;\n          v27 = 0LL;\n          LODWORD(v2) = -93;\n          v26 = 0LL;\n          HIDWORD(v288) = 0;\n          v24 = 0LL;\n          v261 = 0;\n          v23 = 1LL;\n          v250 = 0LL;\n          v256 = 0LL;\n          break;\n        case 53:\n          v24 = *((_QWORD *)v6 - 7);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = -93;\n          v70 = 17;\n          goto LABEL_144;\n        case 54:\n          v24 = *((_QWORD *)v6 - 6);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = -93;\n          v70 = 17;\n          goto LABEL_144;\n        case 55:\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          v70 = 17;\n          v27 = 0LL;\n          LODWORD(v2) = -93;\n          v26 = 0LL;\n          v23 = 0LL;\n          HIDWORD(v288) = 0;\n          v261 = 0;\n          v24 = 1LL;\n          v250 = 0LL;\n          v256 = 0LL;\n          break;\n        case 56:\n          v103 = *(_QWORD *)v6 * *((_QWORD *)v6 - 7);\n          v175 = (unsigned __int128)(*(__int64 *)v6 * (__int128)*((__int64 *)v6 - 7)) >> 64 != 0;\n          a2 = 0LL;\n          v288 = 0LL;\n          v285 = 0LL;\n          v286 = 0LL;\n          v287 = 0LL;\n          v26 = v103;\n          if ( v175 )\n            return 1LL;\n          goto LABEL_139;\n        case 57:\n          v102 = *(_QWORD *)v6 * *((_QWORD *)v6 - 6);\n          v175 = (unsigned __int128)(*(__int64 *)v6 * (__int128)*((__int64 *)v6 - 6)) >> 64 != 0;\n          a2 = 0LL;\n          v288 = 0LL;\n          v285 = 0LL;\n          v286 = 0LL;\n          v287 = 0LL;\n          v26 = v102;\n          if ( v175 )\n            return 1LL;\nLABEL_139:\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -93;\n          v70 = 17;\n          goto LABEL_137;\n        case 58:\n          v26 = *(_QWORD *)v6;\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          v70 = 17;\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = -93;\n          goto LABEL_137;\n        case 59:\n          v27 = *((_QWORD *)v6 - 7);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = -93;\n          v70 = 17;\n          goto LABEL_134;\n        case 60:\n          v27 = *((_QWORD *)v6 - 6);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = -93;\n          v70 = 17;\n          goto LABEL_134;\n        case 61:\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          v70 = 17;\n          v26 = 0LL;\n          LODWORD(v2) = -93;\n          v24 = 0LL;\n          v23 = 0LL;\n          HIDWORD(v288) = 0;\n          v261 = 0;\n          v27 = 1LL;\n          v250 = 0LL;\n          v256 = 0LL;\n          break;\n        case 62:\n          HIDWORD(v288) = 0;\n          v101 = *((_QWORD *)v6 - 7);\n          goto LABEL_129;\n        case 63:\n          HIDWORD(v288) = 0;\n          v101 = *((_QWORD *)v6 - 6);\nLABEL_129:\n          v256 = v101;\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -93;\n          v70 = 17;\n          goto LABEL_130;\n        case 64:\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          v70 = 17;\n          v27 = 0LL;\n          LODWORD(v2) = -93;\n          v26 = 0LL;\n          v24 = 0LL;\n          v23 = 0LL;\n          HIDWORD(v288) = 0;\n          v261 = 0;\n          v250 = 0LL;\n          v256 = 1LL;\n          break;\n        case 65:\n          HIDWORD(v288) = 0;\n          v90 = *((_QWORD *)v6 - 7);\n          goto LABEL_116;\n        case 66:\n          HIDWORD(v288) = 0;\n          v90 = *((_QWORD *)v6 - 6);\nLABEL_116:\n          v250 = v90;\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -93;\n          v70 = 17;\n          goto LABEL_117;\n        case 67:\n        case 68:\n          v88 = *((_QWORD *)v6 - 7);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = -93;\n          v250 = v88;\n          v261 = *((_DWORD *)v6 - 12);\n          v70 = 17;\n          goto LABEL_107;\n        case 69:\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = -93;\n          v70 = 17;\n          v261 = 0;\n          v250 = 1LL;\n          goto LABEL_107;\n        case 71:\n          v23 = *((_QWORD *)v6 - 6);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = 60;\n          v70 = 18;\nLABEL_158:\n          v261 = 0;\n          v27 = 0LL;\n          v26 = 0LL;\n          v24 = 0LL;\n          v250 = 0LL;\n          v256 = 0LL;\n          break;\n        case 72:\n          v24 = *((_QWORD *)v6 - 6);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = 60;\n          v70 = 18;\nLABEL_144:\n          v261 = 0;\n          v27 = 0LL;\n          v26 = 0LL;\n          v23 = 0LL;\n          v250 = 0LL;\n          v256 = 0LL;\n          break;\n        case 73:\n          v108 = *(_QWORD *)v6 * *((_QWORD *)v6 - 6);\n          v175 = (unsigned __int128)(*(__int64 *)v6 * (__int128)*((__int64 *)v6 - 6)) >> 64 != 0;\n          a2 = 0LL;\n          v288 = 0LL;\n          v285 = 0LL;\n          v286 = 0LL;\n          v287 = 0LL;\n          v26 = v108;\n          if ( v175 )\n            return 1LL;\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = 60;\n          v70 = 18;\n          goto LABEL_137;\n        case 74:\n          v27 = *((_QWORD *)v6 - 6);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = 60;\n          v70 = 18;\nLABEL_134:\n          v261 = 0;\n          v26 = 0LL;\n          v24 = 0LL;\n          v23 = 0LL;\n          v250 = 0LL;\n          v256 = 0LL;\n          break;\n        case 75:\n          v110 = *((_QWORD *)v6 - 6);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = 60;\n          v256 = v110;\n          v70 = 18;\nLABEL_130:\n          v27 = 0LL;\n          v26 = 0LL;\n          v24 = 0LL;\n          v23 = 0LL;\n          v261 = 0;\n          v250 = 0LL;\n          break;\n        case 76:\n          v109 = *((_QWORD *)v6 - 6);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = 60;\n          v250 = v109;\n          v70 = 18;\nLABEL_117:\n          v261 = 0;\nLABEL_107:\n          v27 = 0LL;\n          v26 = 0LL;\n          v24 = 0LL;\n          v23 = 0LL;\n          v256 = 0LL;\n          break;\n        case 77:\n          v26 = *(_QWORD *)v6;\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          v70 = 19;\n          HIDWORD(v288) = 0;\n          LODWORD(v2) = -93;\nLABEL_137:\n          v261 = 0;\n          v27 = 0LL;\n          v24 = 0LL;\n          v23 = 0LL;\n          v250 = 0LL;\n          v256 = 0LL;\n          break;\n        case 81:\n          v23 = *((_QWORD *)v6 + 1);\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          v24 = 0LL;\n          LODWORD(v2) = -93;\n          v70 = 21;\n          break;\n        case 83:\n          v23 = *((_QWORD *)v6 + 1);\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          v24 = 0LL;\n          LODWORD(v2) = -92;\n          v70 = 22;\n          break;\n        case 84:\n          v270 = (__m128i *)v24;\n          v269 = v27;\n          v249 = *(_QWORD *)v6;\n          v268 = (__int64)a1;\n          sub_404CA0(a1, v18, v29, v13, v2, (__int64)a1, a2, v249);\n          v67 = (__int64)(v6 - 56);\n          v9 = (__m128i *)(v7 - 1);\n          LODWORD(v2) = -93;\n          v70 = 23;\n          a1 = (__m128i *)v268;\n          v27 = v269;\n          v24 = (__int64)v270;\n          break;\n        case 85:\n          v270 = (__m128i *)v24;\n          v269 = v27;\n          v248 = *((_QWORD *)v6 - 7);\n          v268 = (__int64)a1;\n          sub_404CA0(a1, v18, v29, v13, v2, (__int64)a1, a2, v248);\n          v188 = *((_DWORD *)v6 + 12);\n          a1 = (__m128i *)v268;\n          v189 = __OFADD__(*(_DWORD *)(v268 + 152), v188);\n          *(_DWORD *)(v268 + 152) += v188;\n          v190 = a1[9].m128i_i64[0];\n          v191 = *((_QWORD *)v6 + 5) + v190;\n          LOBYTE(v190) = __OFADD__(*((_QWORD *)v6 + 5), v190);\n          a1[9].m128i_i64[0] = v191;\n          v192 = a1[8].m128i_i64[1];\n          v193 = __OFADD__(*((_QWORD *)v6 + 4), v192);\n          a1[8].m128i_i64[1] = *((_QWORD *)v6 + 4) + v192;\n          v194 = a1[8].m128i_i64[0];\n          v195 = __OFADD__(*((_QWORD *)v6 + 3), v194);\n          a1[8].m128i_i64[0] = *((_QWORD *)v6 + 3) + v194;\n          v196 = a1[7].m128i_i64[1];\n          v197 = __OFADD__(*((_QWORD *)v6 + 2), v196);\n          a1[7].m128i_i64[1] = *((_QWORD *)v6 + 2) + v196;\n          v198 = a1[7].m128i_i64[0];\n          v199 = __OFADD__(*((_QWORD *)v6 + 1), v198);\n          a1[7].m128i_i64[0] = *((_QWORD *)v6 + 1) + v198;\n          v200 = a1[6].m128i_i64[1];\n          v201 = __OFADD__(*(_QWORD *)v6, v200);\n          a1[6].m128i_i64[1] = *(_QWORD *)v6 + v200;\n          if ( (unsigned __int8)(v197 | v195 | v193 | v189 | v190) | v199 || v201 )\n            return 1LL;\n          a1[10].m128i_i8[1] = 1;\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = -93;\n          v70 = 24;\n          v27 = v269;\n          v24 = (__int64)v270;\n          break;\n        case 86:\n          LODWORD(v2) = 43;\n          v23 = -1LL;\n          v9 = (__m128i *)&v7[-v18];\n          v70 = 25;\n          v67 = (__int64)&v6[-56 * v18];\n          break;\n        case 87:\n          v23 = *((_QWORD *)v6 + 1);\n          v67 = (__int64)(v6 - 112);\n          v9 = (__m128i *)(v7 - 2);\n          LODWORD(v2) = 43;\n          v70 = 25;\n          break;\n        default:\n          v70 = (unsigned __int8)byte_4163A0[v13] - 28;\n          LODWORD(v2) = byte_416520[v70];\n          v9 = (__m128i *)&v7[-v18];\n          v67 = (__int64)&v6[-56 * v18];\n          break;\n      }\nLABEL_99:\n      v285.m128i_i64[0] = v23;\n      v6 = (char *)(v67 + 56);\n      v285.m128i_i64[1] = v24;\n      v71 = _mm_load_si128(&v285);\n      v287.m128i_i64[0] = v256;\n      v286.m128i_i64[0] = v26;\n      v286.m128i_i64[1] = v27;\n      v72 = _mm_load_si128(&v286);\n      v287.m128i_i64[1] = v250;\n      v73 = _mm_load_si128(&v287);\n      LODWORD(v288) = v261;\n      v74 = v288;\n      *(__m128i *)(v67 + 56) = v71;\n      *(_QWORD *)(v67 + 104) = v74;\n      *(__m128i *)(v67 + 72) = v72;\n      *(__m128i *)(v67 + 88) = v73;\n      v75 = v9->m128i_i16[0] + (_DWORD)v2;\n      if ( v75 <= 0x70 && v9->m128i_i16[0] == byte_416400[v75] )\n        v2 = (unsigned __int8)byte_416480[v75];\n      else\n        v2 = byte_416500[v70];\n      goto LABEL_10;\n    }\n    if ( v265 == 3 )\n    {\n      if ( v5 > 0 )\n      {\n        v5 = -2;\n        goto LABEL_21;\n      }\n      if ( !v5 )\n        return 1LL;\n    }\nLABEL_21:\n    while ( 1 )\n    {\n      v16 = byte_4165C0[v2];\n      if ( v16 != -93 )\n      {\n        v17 = v16 + 1;\n        if ( v17 <= 0x70 && byte_416400[v17] == 1 )\n        {\n          v2 = (unsigned __int8)byte_416480[v17];\n          if ( byte_416480[v17] )\n            break;\n        }\n      }\n      if ( v7 == v279 )\n        return 1LL;\n      v2 = *--v7;\n      v6 -= 56;\n    }\n    v6 += 56;\n    v9 = (__m128i *)v7;\n    v265 = 3;\n    v281.m128i_i64[1] = v266;\n    v63 = _mm_load_si128(&v281);\n    v282.m128i_i64[0] = v267;\n    v64 = v284;\n    *(__m128i *)v6 = v63;\n    v65 = _mm_load_si128(&v282);\n    *((_QWORD *)v6 + 6) = v64;\n    *((__m128i *)v6 + 1) = v65;\n    a2 = _mm_load_si128(&v283);\n    *((__m128i *)v6 + 2) = a2;\nLABEL_10:\n    v7 = &v9->m128i_i16[1];\n    v9->m128i_i16[1] = v2;\n    if ( &v9->m128i_i16[1] >= &v280 )\n      return 2LL;\n    if ( (_DWORD)v2 == 12 )\n      return 0LL;\n    v4 = byte_4165C0[(int)v2];\n    if ( v4 != -93 )\n      goto LABEL_2;\n  }\n}\n"
        },
        {
            "funcName": "sub_407BC0",
            "funcStartAddr": "0x407bc0",
            "funcEndAddr": "0x409b86",
            "decompiledFuncCode": "__int64 __fastcall sub_407BC0(__int64 a1, const char *a2, struct timespec *a3, char a4, __int64 a5, char *a6)\n{\n  __time_t tv_sec; // rbx\n  const char *v10; // r12\n  unsigned __int64 v11; // rax\n  __int64 v12; // rdx\n  char v13; // r15\n  _BYTE *v14; // rsi\n  _BYTE *v15; // rdx\n  char v16; // al\n  signed __int64 v17; // rdi\n  _BYTE *v18; // rax\n  char v19; // dl\n  __int64 v20; // r15\n  bool v21; // zf\n  int v22; // r12d\n  unsigned int v23; // ebx\n  unsigned __int64 v24; // r12\n  char v25; // bp\n  __int64 v26; // rax\n  unsigned __int8 v27; // bp\n  _BOOL4 v28; // edx\n  unsigned int v29; // esi\n  unsigned __int8 v30; // cl\n  unsigned int v31; // edx\n  __int64 v32; // rax\n  unsigned int v33; // r9d\n  unsigned int v34; // r8d\n  __int32 v35; // edi\n  int v36; // eax\n  __int64 v37; // rbx\n  int v38; // r13d\n  int v39; // r12d\n  const char *v40; // rax\n  const char *v41; // rcx\n  const char *v42; // rdx\n  const char *v43; // r8\n  const char *v44; // rdi\n  const char *v45; // r9\n  __int64 v46; // rax\n  __int64 v47; // rdx\n  char *i; // rdx\n  char *v50; // rax\n  unsigned __int64 v51; // rax\n  __int64 v52; // rdx\n  const char *v53; // rsi\n  char *v54; // rax\n  char *v55; // rcx\n  char *v56; // rax\n  __int64 v57; // rax\n  const char *v58; // rax\n  FILE *v59; // rsi\n  const char *v60; // rsi\n  __int64 v61; // rcx\n  __int64 v62; // rbp\n  unsigned __int64 v63; // rbp\n  const char *v64; // rsi\n  __int64 v65; // rax\n  __int64 v66; // r12\n  bool v67; // r13\n  unsigned __int64 v68; // rax\n  __int64 v69; // rsi\n  int v70; // ecx\n  __int64 v71; // rax\n  bool v72; // of\n  __int64 v73; // rax\n  int v74; // edx\n  __int64 v75; // rdi\n  __int64 v76; // rdx\n  unsigned __int8 v77; // al\n  __int64 v78; // rdx\n  __int64 v79; // r11\n  __int64 v80; // rsi\n  __int64 v81; // r9\n  unsigned __int64 v82; // rcx\n  int v83; // eax\n  __int64 v84; // rbx\n  __int64 v85; // r12\n  __int64 v86; // rdx\n  __int64 v87; // rbx\n  __int64 v88; // r13\n  __int64 v89; // rbx\n  __int64 v90; // rbx\n  __int64 v91; // r9\n  __int64 v92; // rcx\n  __int64 v93; // r13\n  __int64 v94; // r12\n  __int64 v95; // rdx\n  __int64 v96; // rax\n  _BOOL4 v97; // edx\n  __int64 v98; // r9\n  __int64 v99; // r10\n  __int64 v100; // r13\n  const char *v101; // rax\n  char *ptr; // [rsp+8h] [rbp-430h]\n  int srca; // [rsp+10h] [rbp-428h]\n  _BOOL4 v106; // [rsp+18h] [rbp-420h]\n  __int64 v107; // [rsp+18h] [rbp-420h]\n  int v108; // [rsp+18h] [rbp-420h]\n  unsigned int v109; // [rsp+18h] [rbp-420h]\n  __syscall_slong_t tv_nsec; // [rsp+20h] [rbp-418h]\n  int v111; // [rsp+20h] [rbp-418h]\n  int timera; // [rsp+28h] [rbp-410h]\n  size_t v114; // [rsp+30h] [rbp-408h]\n  int v115; // [rsp+30h] [rbp-408h]\n  int v116; // [rsp+38h] [rbp-400h]\n  int v117; // [rsp+44h] [rbp-3F4h]\n  __int64 v118; // [rsp+48h] [rbp-3F0h]\n  int v119; // [rsp+50h] [rbp-3E8h]\n  int v120; // [rsp+54h] [rbp-3E4h]\n  int v121; // [rsp+58h] [rbp-3E0h]\n  int v122; // [rsp+5Ch] [rbp-3DCh]\n  struct timespec v123; // [rsp+60h] [rbp-3D8h] BYREF\n  char v124[32]; // [rsp+70h] [rbp-3C8h] BYREF\n  unsigned __int64 v125; // [rsp+90h] [rbp-3A8h] BYREF\n  unsigned __int64 v126; // [rsp+98h] [rbp-3A0h]\n  unsigned __int64 v127; // [rsp+A0h] [rbp-398h]\n  int v128; // [rsp+A8h] [rbp-390h]\n  int v129; // [rsp+B0h] [rbp-388h]\n  __int64 v130; // [rsp+B8h] [rbp-380h]\n  unsigned __int64 v131; // [rsp+D0h] [rbp-368h] BYREF\n  unsigned __int64 v132; // [rsp+D8h] [rbp-360h]\n  unsigned __int64 v133; // [rsp+E0h] [rbp-358h]\n  int v134; // [rsp+F0h] [rbp-348h]\n  int v135[8]; // [rsp+110h] [rbp-328h] BYREF\n  int v136; // [rsp+130h] [rbp-308h]\n  char *v137; // [rsp+140h] [rbp-2F8h]\n  struct tm tp; // [rsp+150h] [rbp-2E8h] BYREF\n  __int64 v139[14]; // [rsp+190h] [rbp-2A8h] BYREF\n  char v140; // [rsp+200h] [rbp-238h] BYREF\n  _BYTE v141[3]; // [rsp+270h] [rbp-1C8h] BYREF\n  char v142[29]; // [rsp+273h] [rbp-1C5h] BYREF\n  int v143; // [rsp+290h] [rbp-1A8h]\n  int v144; // [rsp+298h] [rbp-1A0h]\n  char *v145; // [rsp+2A0h] [rbp-198h]\n  __m128i v146; // [rsp+2E0h] [rbp-158h] BYREF\n  int v147; // [rsp+2F0h] [rbp-148h]\n  int v148; // [rsp+2F4h] [rbp-144h]\n  int v149; // [rsp+2F8h] [rbp-140h]\n  unsigned int v150; // [rsp+2FCh] [rbp-13Ch]\n  __int64 v151; // [rsp+308h] [rbp-130h]\n  __int64 v152; // [rsp+310h] [rbp-128h]\n  __int64 v153; // [rsp+318h] [rbp-120h]\n  __int64 v154; // [rsp+320h] [rbp-118h]\n  unsigned __int64 v155; // [rsp+328h] [rbp-110h]\n  __int64 v156; // [rsp+330h] [rbp-108h]\n  __m128i v157; // [rsp+338h] [rbp-100h] BYREF\n  __int128 v158; // [rsp+348h] [rbp-F0h]\n  __int128 v159; // [rsp+358h] [rbp-E0h]\n  __int128 v160; // [rsp+368h] [rbp-D0h]\n  __int64 v161; // [rsp+378h] [rbp-C0h]\n  __int16 v162; // [rsp+380h] [rbp-B8h]\n  __int64 v163; // [rsp+388h] [rbp-B0h]\n  __int64 v164; // [rsp+390h] [rbp-A8h]\n  __int64 v165; // [rsp+398h] [rbp-A0h]\n  __int64 v166; // [rsp+3A0h] [rbp-98h]\n  __int64 v167; // [rsp+3A8h] [rbp-90h]\n  __int64 v168; // [rsp+3B0h] [rbp-88h]\n  char v169; // [rsp+3B8h] [rbp-80h]\n  unsigned __int8 v170; // [rsp+3B9h] [rbp-7Fh]\n  __int16 v171; // [rsp+3BAh] [rbp-7Eh]\n  int v172; // [rsp+3BCh] [rbp-7Ch]\n  char v173; // [rsp+3C0h] [rbp-78h]\n  char *s1; // [rsp+3C8h] [rbp-70h]\n  int v175; // [rsp+3D0h] [rbp-68h]\n  int v176; // [rsp+3D4h] [rbp-64h]\n  char *s2; // [rsp+3D8h] [rbp-60h]\n  int v178; // [rsp+3E0h] [rbp-58h]\n  int v179; // [rsp+3E4h] [rbp-54h]\n  __int64 v180; // [rsp+3E8h] [rbp-50h]\n\n  v114 = strlen(a2);\n  if ( !a3 )\n  {\n    a3 = &v123;\n    sub_404BC0(&v123);\n  }\n  tv_sec = a3->tv_sec;\n  v10 = a2;\n  tv_nsec = a3->tv_nsec;\n  v11 = *(unsigned __int8 *)a2;\n  if ( (unsigned __int8)v11 <= 0x20u )\n  {\n    v12 = 0x100003E00LL;\n    if ( _bittest64(&v12, v11) )\n    {\n      do\n        ++v10;\n      while ( *v10 <= 0x20u && ((1LL << *v10) & 0x100003E00LL) != 0 );\n    }\n  }\n  if ( memcmp(v10, \"TZ=\\\"\", 4uLL) || (v13 = v10[4], v14 = v10 + 4, !v13) )\n  {\nLABEL_14:\n    if ( !sub_40DE20(a5, a3, v135) )\n      goto LABEL_108;\n    ptr = 0LL;\n    v20 = a5;\n    goto LABEL_16;\n  }\n  v15 = v10 + 4;\n  v16 = v10[4];\n  v17 = 1LL;\n  while ( v16 == 92 )\n  {\n    v18 = v15 + 1;\n    v19 = v15[1];\n    if ( v19 != 92 && v19 != 34 )\n      goto LABEL_14;\nLABEL_10:\n    v15 = v18 + 1;\n    v16 = v18[1];\n    ++v17;\n    if ( !v16 )\n      goto LABEL_14;\n  }\n  if ( v16 != 34 )\n  {\n    v18 = v15;\n    goto LABEL_10;\n  }\n  if ( v17 <= 100 )\n  {\n    ptr = 0LL;\n    a6 = &v140;\n    goto LABEL_91;\n  }\n  v14 = v10 + 4;\n  a6 = (char *)malloc(v17);\n  ptr = a6;\n  if ( !a6 )\n  {\nLABEL_108:\n    v23 = 0;\n    free(0LL);\n    return v23;\n  }\nLABEL_91:\n  for ( i = a6; v13 != 34; *(i - 1) = *v50 )\n  {\n    ++i;\n    v50 = &v14[v13 == 92];\n    v13 = v50[1];\n    v14 = v50 + 1;\n  }\n  *i = 0;\n  v20 = sub_40DB40(a6);\n  if ( !v20 )\n  {\n    v23 = 0;\n    goto LABEL_81;\n  }\n  v51 = (unsigned __int8)v14[1];\n  v10 = v14 + 1;\n  if ( (unsigned __int8)v51 <= 0x20u )\n  {\n    v52 = 0x100003E00LL;\n    if ( _bittest64(&v52, v51) )\n    {\n      do\n        ++v10;\n      while ( *v10 <= 0x20u && ((1LL << *v10) & 0x100003E00LL) != 0 );\n    }\n  }\n  if ( !sub_40DE20(v20, a3, v135) )\n  {\n    v23 = 0;\n    goto LABEL_79;\n  }\nLABEL_16:\n  v21 = *v10 == 0;\n  v152 = 0LL;\n  if ( v21 )\n    v10 = \"TZ=UTC0\" + 6;\n  v150 = 2;\n  v158 = 0LL;\n  v146.m128i_i64[0] = (__int64)v10;\n  v170 = a4 & 1;\n  v151 = v135[5] + 1900LL;\n  v157.m128i_i64[1] = (int)tv_nsec;\n  v22 = 7776000;\n  v159 = 0LL;\n  v160 = 0LL;\n  v153 = v135[4] + 1;\n  v161 = 0LL;\n  v154 = v135[3];\n  v162 = 0;\n  v155 = v135[2];\n  v163 = 0LL;\n  v156 = v135[1];\n  v164 = 0LL;\n  v157.m128i_i64[0] = v135[0];\n  v167 = 0LL;\n  v129 = v136;\n  v165 = 0LL;\n  v166 = 0LL;\n  v168 = 0LL;\n  v169 = 0;\n  v171 = 0;\n  v172 = 0;\n  v173 = 0;\n  s1 = v137;\n  v175 = 269;\n  v176 = v136;\n  s2 = 0LL;\n  while ( !__OFADD__(tv_sec, v22) )\n  {\n    v139[0] = tv_sec + v22;\n    if ( sub_40DE20(v20, v139, v141) && v145 && v143 != v176 )\n    {\n      s2 = v145;\n      v178 = 269;\n      v179 = v143;\n      v180 = 0LL;\n      break;\n    }\n    v22 += 7776000;\n    if ( v22 == 31104000 )\n      break;\n  }\n  if ( s1 && s2 && !strcmp(s1, s2) )\n  {\n    v176 = -1;\n    s2 = 0LL;\n  }\n  if ( (unsigned int)sub_405940(&v146, (__m128i)0LL) )\n  {\n    v23 = v170;\n    if ( !v170 )\n      goto LABEL_79;\n    if ( v146.m128i_i64[0] < (unsigned __int64)&a2[v114] )\n      dcgettext(0LL, \"error: parsing failed, stopped at '%s'\\n\", 5);\n    else\n      dcgettext(0LL, \"error: parsing failed\\n\", 5);\n    goto LABEL_141;\n  }\n  if ( v170 )\n  {\n    dcgettext(0LL, \"input timezone: \", 5);\n    sub_404F90();\n    v53 = \"'@timespec' - always UTC\";\n    if ( !(_BYTE)v162 )\n    {\n      v53 = \"parsed date/time string\";\n      if ( !v168 )\n      {\n        if ( a6 )\n        {\n          if ( a5 != v20 )\n          {\n            v54 = dcgettext(0LL, \"TZ=\\\"%s\\\" in date string\", 5);\n            v55 = a6;\nLABEL_106:\n            __fprintf_chk(stderr, 1LL, v54, v55);\n            goto LABEL_111;\n          }\n          v21 = memcmp(a6, \"UTC0\", 5uLL) == 0;\n          v53 = \"TZ=\\\"UTC0\\\" environment value or -u\";\n          if ( !v21 )\n          {\n            v54 = dcgettext(0LL, \"TZ=\\\"%s\\\" environment value\", 5);\n            v55 = a6;\n            goto LABEL_106;\n          }\n        }\n        else\n        {\n          v53 = \"system default\";\n        }\n      }\n    }\n    v56 = dcgettext(0LL, v53, 5);\n    __fprintf_chk(stderr, 1LL, v56);\nLABEL_111:\n    v57 = v168;\n    if ( v165 )\n    {\n      if ( v168 )\n      {\nLABEL_113:\n        v58 = (const char *)sub_404E20(v149, (__int64)v124);\n        __fprintf_chk(stderr, 1LL, \" (%s)\", v58);\nLABEL_114:\n        v59 = stderr;\nLABEL_115:\n        fputc(10, v59);\n        v23 = v170;\n        if ( (_BYTE)v162 )\n        {\n          *(__m128i *)a1 = _mm_loadu_si128(&v157);\n          goto LABEL_117;\n        }\n        v61 = v163;\n        if ( ((v165 + v168) | v166 | v164 | v163 | v167) <= 1 )\n          goto LABEL_32;\n        if ( !v170 )\n          goto LABEL_78;\n        if ( v167 > 1 )\n        {\n          sub_404F90();\n          v61 = v163;\n        }\n        if ( v61 > 1 )\n          sub_404F90();\n        if ( v164 > 1 )\n          sub_404F90();\n        if ( v166 > 1 )\n          sub_404F90();\n        if ( v165 + v168 <= 1 )\n          goto LABEL_78;\nLABEL_141:\n        v23 = 0;\n        sub_404F90();\n        goto LABEL_79;\n      }\n      v59 = stderr;\n      if ( v148 <= 0 )\n        goto LABEL_115;\n      fwrite(\", dst\", 1uLL, 5uLL, stderr);\n      v57 = v168;\n    }\n    if ( !v57 )\n      goto LABEL_114;\n    goto LABEL_113;\n  }\n  v23 = (unsigned __int8)v162;\n  if ( (_BYTE)v162 )\n  {\n    *(__m128i *)a1 = _mm_loadu_si128(&v157);\n    goto LABEL_79;\n  }\n  if ( ((v165 + v168) | v166 | v164 | v163 | v167) > 1 )\n    goto LABEL_78;\nLABEL_32:\n  v24 = v151;\n  if ( v151 < 0 )\n  {\n    v27 = __OFSUB__(-1900LL, v151);\n    HIDWORD(v127) = -1900 - v151;\n    if ( -1900 - v151 != -1900 - (_DWORD)v151 )\n      v27 = 1;\n  }\n  else\n  {\n    if ( v152 == 2 )\n    {\n      v62 = 2000LL;\n      if ( v151 >= 69 )\n        v62 = 1900LL;\n      v63 = v151 + v62;\n      if ( (_BYTE)v23 )\n      {\n        dcgettext(0LL, \"warning: adjusting year value %ld to %ld\\n\", 5);\n        v24 = v63;\n        sub_404F90();\n      }\n      else\n      {\n        v24 = v63;\n      }\n    }\n    v25 = 0;\n    v26 = v24 - 1900;\n    if ( v24 >= 0x76C )\n    {\n      if ( v26 < 0 )\n        goto LABEL_145;\n    }\n    else\n    {\n      if ( v26 < 0 )\n        goto LABEL_36;\nLABEL_145:\n      v25 = 1;\n    }\nLABEL_36:\n    HIDWORD(v127) = v24 - 1900;\n    if ( v26 != (int)v26 )\n      v25 = 1;\n    v27 = v25 & 1;\n  }\n  if ( v27 )\n  {\n    if ( (_BYTE)v23 )\n    {\n      dcgettext(0LL, \"error: out-of-range year %ld\\n\", 5);\n      sub_404F90();\n    }\n    v30 = v170;\nLABEL_155:\n    v64 = \"error: year, month, or day overflow\\n\";\n    if ( !v30 )\n      goto LABEL_78;\n    goto LABEL_156;\n  }\n  v28 = __OFADD__(-1LL, v153);\n  v29 = v153 - 1;\n  LODWORD(v127) = v153 - 1;\n  if ( v153 - 1 != (_DWORD)v153 - 1 )\n    v28 = 1;\n  v30 = v170;\n  if ( v28 )\n    goto LABEL_155;\n  HIDWORD(v126) = v154;\n  v31 = v154;\n  v106 = v154 != v154;\n  if ( v154 != (int)v154 )\n    goto LABEL_155;\n  v32 = v167;\n  if ( !v167 )\n  {\n    if ( !HIBYTE(v162) || v163 )\n    {\n      v125 = 0LL;\n      LODWORD(v126) = 0;\n      v157.m128i_i64[1] = 0LL;\n      if ( v170 )\n        goto LABEL_241;\n      v33 = 0;\n      v34 = 0;\n      v35 = 0;\n      goto LABEL_198;\n    }\n    if ( v164 )\n    {\n      v125 = 0LL;\n      LODWORD(v126) = 0;\n      v157.m128i_i64[1] = 0LL;\n      if ( !v170 )\n      {\n        v33 = 0;\n        v34 = 0;\n        v35 = 0;\n        goto LABEL_50;\n      }\nLABEL_241:\n      sub_404F90();\n      v32 = v167;\n      v35 = v125;\n      v34 = HIDWORD(v125);\n      v33 = v126;\n      v31 = HIDWORD(v126);\n      v29 = v127;\n      goto LABEL_198;\n    }\n  }\n  v91 = v150;\n  if ( !v150 )\n  {\n    if ( v155 - 1 > 0xA )\n    {\n      if ( v155 != 12 )\n      {\n        LODWORD(v126) = -1;\n        goto LABEL_257;\n      }\n      LODWORD(v126) = 0;\n      goto LABEL_196;\n    }\nLABEL_194:\n    v91 = (unsigned int)v155;\n    goto LABEL_195;\n  }\n  if ( v150 == 1 )\n  {\n    v91 = (unsigned int)(v155 + 12);\n    if ( v155 - 1 > 0xA )\n    {\n      if ( v155 != 12 )\n      {\n        LODWORD(v126) = -1;\n        goto LABEL_257;\n      }\n      LODWORD(v126) = 12;\n      v91 = 12LL;\n      goto LABEL_196;\n    }\nLABEL_195:\n    LODWORD(v126) = v91;\nLABEL_196:\n    v34 = v156;\n    v35 = v157.m128i_i32[0];\n    v125 = __PAIR64__(v156, v157.m128i_u32[0]);\n    if ( v170 )\n    {\n      __snprintf_chk(v139, 100LL, 1LL, 100LL, \"%02d:%02d:%02d\", v91, v156, v157.m128i_i64[0]);\n      if ( v167 )\n        dcgettext(0LL, \"using specified time as starting value: '%s'\\n\", 5);\n      else\n        dcgettext(0LL, \"using current time as starting value: '%s'\\n\", 5);\n      goto LABEL_241;\n    }\n    v33 = v126;\nLABEL_198:\n    if ( v32 | v164 | v163 )\nLABEL_50:\n      v129 = -1;\n    if ( v165 )\n    {\n      v36 = v148;\n      v129 = v148;\n    }\n    else\n    {\n      v36 = v129;\n    }\n    v131 = __PAIR64__(v34, v35);\n    v133 = __PAIR64__(HIDWORD(v127), v29);\n    v132 = __PAIR64__(v31, v33);\n    v134 = v36;\n    v37 = sub_40DED0(v20, &v125);\n    if ( sub_405050(v20, &v131, &v125, v37) )\n      goto LABEL_164;\n    v118 = v168;\n    if ( v168 )\n    {\n      memset(v141, 88, sizeof(v141));\n      sub_404E20(v149, (__int64)v142);\n      v65 = sub_40DB40(v141);\n      v66 = v65;\n      if ( !v65 )\n      {\n        if ( v170 )\n        {\n          v23 = 0;\n          dcgettext(0LL, \"error: tzalloc (\\\"%s\\\") failed\\n\", 5);\n          sub_404F90();\n          goto LABEL_79;\n        }\n        goto LABEL_78;\n      }\n      v125 = v131;\n      v126 = v132;\n      v127 = v133;\n      v129 = v134;\n      v37 = sub_40DED0(v65, &v125);\n      v67 = sub_405050(v66, &v131, &v125, v37);\n      sub_40DE00(v66);\n      if ( v67 )\n      {\nLABEL_164:\n        if ( v164 )\n        {\n          if ( v163 )\n          {\n            if ( !v170 )\n              goto LABEL_176;\n            goto LABEL_229;\n          }\n          v68 = v146.m128i_u64[1];\n          if ( v146.m128i_i64[1] > 0 && v128 != v147 )\n            v68 = v146.m128i_i64[1] - 1;\n          v69 = 7 * v68;\n          if ( !is_mul_ok(7uLL, v68) )\n            goto LABEL_236;\n          v70 = (v147 - v128 + 7) % 7;\n          v71 = v69 + v70;\n          if ( __OFADD__(v69, v70) )\n            goto LABEL_236;\n          v72 = __OFADD__(SHIDWORD(v126), v71);\n          v73 = SHIDWORD(v126) + v71;\n          HIDWORD(v126) = v73;\n          v74 = v72;\n          if ( v73 != (int)v73 )\n            v74 = 1;\n          if ( v74 || (v129 = -1, v37 = sub_40DED0(v20, &v125), v37 == -1) )\n          {\nLABEL_236:\n            if ( v170 )\n            {\n              sub_405410((__int64)&v125, (__int64)&v146, (__int64)v139);\n              sub_4054B0((__int64)&v146, v141);\n              dcgettext(0LL, \"error: day '%s' (day ordinal=%ld number=%d) resulted in an invalid date: '%s'\\n\", 5);\n              v23 = 0;\n              sub_404F90();\n              goto LABEL_79;\n            }\n            goto LABEL_78;\n          }\n          if ( !v170 )\n          {\nLABEL_176:\n            v75 = *((_QWORD *)&v158 + 1);\n            v76 = v158;\n            if ( !((unsigned __int64)v159 | (unsigned __int64)v158 | *((_QWORD *)&v158 + 1)) )\n            {\n              v77 = 0;\n              goto LABEL_178;\n            }\n            goto LABEL_238;\n          }\n          sub_405410((__int64)&v125, (__int64)&v146, (__int64)v139);\n          sub_4054B0((__int64)&v146, v141);\n          dcgettext(0LL, \"new start date: '%s' is '%s'\\n\", 5);\n          sub_404F90();\n        }\n        if ( !v170 )\n          goto LABEL_176;\n        if ( v163 )\n        {\n          if ( !v164 )\n            goto LABEL_207;\n        }\n        else if ( v164\n               || (v109 = HIDWORD(v126),\n                   v100 = (unsigned int)(v127 + 1),\n                   v101 = (const char *)sub_404F20(SHIDWORD(v127), (__int64)&tp),\n                   __snprintf_chk(v139, 100LL, 1LL, 100LL, \"(Y-M-D) %s-%02d-%02d\", v101, v100, v109),\n                   dcgettext(0LL, \"using current date as starting value: '%s'\\n\", 5),\n                   sub_404F90(),\n                   !v164)\n               || !v163 )\n        {\nLABEL_207:\n          sub_405410((__int64)&v125, (__int64)&v146, (__int64)v139);\n          dcgettext(0LL, \"starting date/time: '%s'\\n\", 5);\n          sub_404F90();\n          v75 = *((_QWORD *)&v158 + 1);\n          v76 = v158;\n          v92 = v159;\n          v77 = v170;\n          if ( !((unsigned __int64)v159 | *((_QWORD *)&v158 + 1) | (unsigned __int64)v158) )\n            goto LABEL_178;\n          if ( v170 )\n          {\n            if ( v158 == 0 )\n              goto LABEL_253;\n            if ( HIDWORD(v126) != 15 )\n            {\n              dcgettext(\n                0LL,\n                \"warning: when adding relative months/years, it is recommended to specify the 15th of the months\\n\",\n                5);\n              sub_404F90();\n              v92 = v159;\n            }\n            if ( v92 )\n            {\nLABEL_253:\n              if ( (_DWORD)v126 != 12 )\n              {\n                dcgettext(0LL, \"warning: when adding relative days, it is recommended to specify noon\\n\", 5);\n                sub_404F90();\n              }\n            }\n            if ( (_QWORD)v158 + SHIDWORD(v127) != (_DWORD)v158 + HIDWORD(v127)\n              || __OFADD__((_QWORD)v158, SHIDWORD(v127)) )\n            {\n              goto LABEL_226;\n            }\n            v108 = v158 + HIDWORD(v127);\n            v75 = *((_QWORD *)&v158 + 1);\nLABEL_216:\n            v93 = v75 + (int)v127;\n            if ( v93 == (int)v93 && !__OFADD__(v75, (int)v127) )\n            {\n              v94 = v159 + SHIDWORD(v126);\n              if ( v94 == (int)v94 && !__OFADD__((_QWORD)v159, SHIDWORD(v126)) )\n              {\n                v127 = __PAIR64__(v108, v93);\n                HIDWORD(v126) += v159;\n                v125 = v131;\n                LODWORD(v126) = v132;\n                v129 = v134;\n                v37 = sub_40DED0(v20, &v125);\n                if ( v37 == -1 )\n                {\n                  if ( v170 )\n                  {\n                    sub_405410((__int64)&v125, (__int64)&v146, (__int64)v139);\n                    dcgettext(0LL, \"error: adding relative date resulted in an invalid date: '%s'\\n\", 5);\n                    v23 = 0;\n                    sub_404F90();\n                    goto LABEL_79;\n                  }\n                  goto LABEL_78;\n                }\n                v77 = v170;\n                if ( !v170 )\n                {\n                  if ( !v168 )\n                    goto LABEL_181;\n                  v95 = v149 - v130;\n                  v72 = __OFSUB__(v37, v95);\n                  v37 -= v95;\n                  if ( v72 | (unsigned __int64)__OFSUB__(v149, v130) )\n                  {\n                    v23 = 0;\n                    goto LABEL_79;\n                  }\nLABEL_180:\n                  if ( v77 )\n                  {\n                    sub_405410((__int64)&v125, (__int64)&v146, (__int64)v139);\n                    dcgettext(0LL, \"'%s' = %ld epoch-seconds\\n\", 5);\n                    sub_404F90();\n                    v98 = 3600LL * *((_QWORD *)&v159 + 1);\n                    v107 = *((_QWORD *)&v159 + 1);\n                    if ( is_mul_ok(0xE10uLL, *((unsigned __int64 *)&v159 + 1)) )\n                    {\n                      v80 = (int)v161;\n                      v27 = v170;\n                      v99 = (int)v161 + v157.m128i_i64[1];\n                      v82 = (v99 % 1000000000 + 1000000000) % 0x3B9ACA00uLL;\n                      v83 = ((int)v99 - (int)v82) / 1000000000;\n                      v72 = __OFADD__(v98, v37);\n                      v84 = v98 + v37;\n                      if ( !v72 )\n                      {\n                        v85 = v160;\n                        v86 = 60 * v160;\n                        if ( is_mul_ok(0x3CuLL, v160) )\n                          goto LABEL_184;\n                      }\n                    }\n                    else\n                    {\n                      v27 = v170;\n                    }\nLABEL_245:\n                    if ( !v27 )\n                      goto LABEL_78;\n                    v64 = \"error: adding relative time caused an overflow\\n\";\nLABEL_156:\n                    v23 = 0;\n                    dcgettext(0LL, v64, 5);\n                    sub_404F90();\n                    goto LABEL_79;\n                  }\nLABEL_181:\n                  v79 = 3600LL * *((_QWORD *)&v159 + 1);\n                  v107 = *((_QWORD *)&v159 + 1);\n                  if ( !is_mul_ok(0xE10uLL, *((unsigned __int64 *)&v159 + 1)) )\n                    goto LABEL_78;\n                  v80 = (int)v161;\n                  v81 = (int)v161 + v157.m128i_i64[1];\n                  v82 = (v81 % 1000000000 + 1000000000) % 0x3B9ACA00uLL;\n                  v83 = ((int)v81 - (int)v82) / 1000000000;\n                  v72 = __OFADD__(v79, v37);\n                  v84 = v79 + v37;\n                  if ( v72 )\n                    goto LABEL_78;\n                  v85 = v160;\n                  v86 = 60 * v160;\n                  if ( !is_mul_ok(0x3CuLL, v160) )\n                    goto LABEL_78;\nLABEL_184:\n                  v72 = __OFADD__(v86, v84);\n                  v87 = v86 + v84;\n                  if ( !v72 )\n                  {\n                    v88 = *((_QWORD *)&v160 + 1);\n                    v72 = __OFADD__(*((_QWORD *)&v160 + 1), v87);\n                    v89 = *((_QWORD *)&v160 + 1) + v87;\n                    if ( !v72 )\n                    {\n                      v72 = __OFADD__(v83, v89);\n                      v90 = v83 + v89;\n                      if ( !v72 )\n                      {\n                        *(_QWORD *)a1 = v90;\n                        *(_QWORD *)(a1 + 8) = v82;\n                        if ( v27 )\n                        {\n                          if ( v107 | v85 | v88 | v80 )\n                          {\n                            dcgettext(\n                              0LL,\n                              \"after time adjustment (%+ld hours, %+ld minutes, %+ld seconds, %+d ns),\\n\",\n                              5);\n                            sub_404F90();\n                            dcgettext(0LL, \"    new time = %ld epoch-seconds\\n\", 5);\n                            sub_404F90();\n                            if ( v129 != -1 && sub_40DE20(v20, a1, &tp) && v129 != tp.tm_isdst )\n                            {\n                              dcgettext(0LL, \"warning: daylight saving time changed after time adjustment\\n\", 5);\n                              sub_404F90();\n                            }\n                          }\n                        }\n                        v23 = v170;\nLABEL_117:\n                        if ( !(_BYTE)v23 )\n                        {\n                          v23 = 1;\n                          goto LABEL_79;\n                        }\n                        v60 = \"timezone: system default\\n\";\n                        if ( a6 )\n                        {\n                          if ( memcmp(a6, \"UTC0\", 5uLL) )\n                          {\n                            dcgettext(0LL, \"timezone: TZ=\\\"%s\\\" environment value\\n\", 5);\n                            sub_404F90();\n                            goto LABEL_122;\n                          }\n                          v60 = \"timezone: Universal Time\\n\";\n                        }\n                        dcgettext(0LL, v60, 5);\n                        sub_404F90();\nLABEL_122:\n                        dcgettext(0LL, \"final: %ld.%09d (epoch-seconds)\\n\", 5);\n                        sub_404F90();\n                        if ( gmtime_r((const time_t *)a1, &tp) )\n                        {\n                          sub_405410((__int64)&tp, 0LL, (__int64)v139);\n                          dcgettext(0LL, \"final: %s (UTC)\\n\", 5);\n                          sub_404F90();\n                        }\n                        if ( sub_40DE20(v20, a1, v141) )\n                        {\n                          sub_404E20(v144, (__int64)v124);\n                          sub_405410((__int64)v141, 0LL, (__int64)v139);\n                          dcgettext(0LL, \"final: %s (UTC%s)\\n\", 5);\n                          sub_404F90();\n                        }\n                        goto LABEL_79;\n                      }\n                    }\n                  }\n                  goto LABEL_245;\n                }\n                dcgettext(0LL, \"after date adjustment (%+ld years, %+ld months, %+ld days),\\n\", 5);\n                sub_404F90();\n                sub_405410((__int64)&v125, (__int64)&v146, (__int64)v139);\n                dcgettext(0LL, \"    new date/time = '%s'\\n\", 5);\n                sub_404F90();\n                if ( v134 != -1 && v134 != v129 )\n                {\n                  dcgettext(0LL, \"warning: daylight saving time changed after date adjustment\\n\", 5);\n                  sub_404F90();\n                }\n                if ( !(_QWORD)v159\n                  && ((_DWORD)v94 != HIDWORD(v126) || !*((_QWORD *)&v158 + 1) && (_DWORD)v93 != (_DWORD)v127) )\n                {\n                  dcgettext(0LL, \"warning: month/year adjustment resulted in shifted dates:\\n\", 5);\n                  sub_404F90();\n                  sub_404F20(v108, (__int64)&tp);\n                  dcgettext(0LL, \"     adjusted Y M D: %s %02d %02d\\n\", 5);\n                  sub_404F90();\n                  sub_404F20(SHIDWORD(v127), (__int64)&tp);\n                  dcgettext(0LL, \"   normalized Y M D: %s %02d %02d\\n\", 5);\n                  sub_404F90();\n                }\n                v77 = v170;\nLABEL_178:\n                if ( v168 )\n                {\n                  v78 = v149 - v130;\n                  v72 = __OFSUB__(v37, v78);\n                  v37 -= v78;\n                  if ( v72 | (unsigned __int64)__OFSUB__(v149, v130) )\n                  {\n                    if ( v77 )\n                    {\n                      v23 = 0;\n                      dcgettext(0LL, \"error: timezone %d caused time_t overflow\\n\", 5);\n                      sub_404F90();\n                      goto LABEL_79;\n                    }\n                    goto LABEL_78;\n                  }\n                }\n                goto LABEL_180;\n              }\n            }\nLABEL_226:\n            if ( v170 )\n            {\n              v23 = 0;\n              dcgettext(0LL, \"error: %s:%d\\n\", 5);\n              sub_404F90();\n              goto LABEL_79;\n            }\n            goto LABEL_78;\n          }\nLABEL_238:\n          v96 = v76 + SHIDWORD(v127);\n          v97 = __OFADD__(v76, SHIDWORD(v127));\n          if ( v96 != (int)v96 || v97 )\n            goto LABEL_78;\n          v108 = v96;\n          goto LABEL_216;\n        }\nLABEL_229:\n        sub_4054B0((__int64)&v146, v141);\n        dcgettext(0LL, \"warning: day (%s) ignored when explicit dates are given\\n\", 5);\n        sub_404F90();\n        goto LABEL_207;\n      }\n    }\n    timera = v132;\n    v38 = v133;\n    v115 = v126;\n    v39 = v127;\n    srca = HIDWORD(v132);\n    v111 = HIDWORD(v126);\n    v116 = HIDWORD(v133);\n    v117 = HIDWORD(v127);\n    if ( v131 == v125 )\n    {\n      if ( HIDWORD(v132) == HIDWORD(v126) && (_DWORD)v132 != (_DWORD)v126 && v133 == v127 )\n      {\n        if ( !v170 )\n          goto LABEL_78;\n        dcgettext(0LL, \"error: invalid date/time value:\\n\", 5);\n        sub_404F90();\n        sub_405410((__int64)&v131, (__int64)&v146, (__int64)v141);\n        dcgettext(0LL, \"    user provided time: '%s'\\n\", 5);\n        sub_404F90();\n        sub_405410((__int64)&v125, (__int64)&v146, (__int64)v141);\n        dcgettext(0LL, \"       normalized time: '%s'\\n\", 5);\n        sub_404F90();\n        v40 = \"\";\n        v41 = \"--\";\n        v106 = 1;\n        v42 = \"\";\nLABEL_61:\n        v43 = \"\";\nLABEL_62:\n        v44 = \"--\";\n        if ( v38 == v39 )\n          v44 = \"\";\n        v45 = \"----\";\n        if ( v116 == v117 )\n          v45 = \"\";\n        __snprintf_chk(\n          v141,\n          100LL,\n          1LL,\n          100LL,\n          \"                                 %4s %2s %2s %2s %2s %2s\",\n          v45,\n          v44,\n          v43,\n          v41,\n          v40,\n          v42);\n        v46 = 51LL;\n        v47 = 52LL;\n        if ( BYTE3(v145) == 32 )\n        {\n          do\n          {\n            v47 = (int)v46;\n            if ( !(_DWORD)v46 )\n              break;\n            --v46;\n          }\n          while ( v141[v46] == 32 );\n        }\n        v141[v47] = 0;\n        sub_404F90();\n        dcgettext(0LL, \"     possible reasons:\\n\", 5);\n        sub_404F90();\n        if ( v106 )\n        {\n          dcgettext(0LL, \"       non-existing due to daylight-saving time;\\n\", 5);\n          sub_404F90();\n        }\n        if ( srca != v111 && v38 != v39 )\n        {\n          dcgettext(0LL, \"       invalid day/month combination;\\n\", 5);\n          sub_404F90();\n        }\n        dcgettext(0LL, \"       numeric values overflow;\\n\", 5);\n        sub_404F90();\n        if ( v118 )\n          dcgettext(0LL, \"incorrect timezone\", 5);\n        else\n          dcgettext(0LL, \"missing timezone\", 5);\n        sub_404F90();\n        goto LABEL_78;\n      }\n      if ( !v170 )\n        goto LABEL_78;\n      dcgettext(0LL, \"error: invalid date/time value:\\n\", 5);\n      sub_404F90();\n      sub_405410((__int64)&v131, (__int64)&v146, (__int64)v141);\n      dcgettext(0LL, \"    user provided time: '%s'\\n\", 5);\n      sub_404F90();\n      sub_405410((__int64)&v125, (__int64)&v146, (__int64)v141);\n      dcgettext(0LL, \"       normalized time: '%s'\\n\", 5);\n      sub_404F90();\n      v42 = \"\";\n      v40 = \"\";\n    }\n    else\n    {\n      v122 = HIDWORD(v125);\n      v121 = HIDWORD(v131);\n      v120 = v125;\n      v119 = v131;\n      if ( !v170 )\n        goto LABEL_78;\n      dcgettext(0LL, \"error: invalid date/time value:\\n\", 5);\n      sub_404F90();\n      sub_405410((__int64)&v131, (__int64)&v146, (__int64)v141);\n      dcgettext(0LL, \"    user provided time: '%s'\\n\", 5);\n      sub_404F90();\n      sub_405410((__int64)&v125, (__int64)&v146, (__int64)v141);\n      dcgettext(0LL, \"       normalized time: '%s'\\n\", 5);\n      sub_404F90();\n      if ( v119 == v120 )\n      {\n        v42 = \"\";\n        v40 = \"----\" + 2;\n      }\n      else\n      {\n        v42 = \"----\" + 2;\n        v40 = \"\";\n        if ( v121 != v122 )\n          v40 = \"----\" + 2;\n      }\n    }\n    v41 = \"\";\n    if ( timera != v115 )\n      v41 = \"----\" + 2;\n    v43 = \"----\" + 2;\n    if ( srca != v111 )\n      goto LABEL_62;\n    goto LABEL_61;\n  }\n  if ( v155 <= 0x17 )\n    goto LABEL_194;\n  LODWORD(v126) = -1;\nLABEL_257:\n  if ( v170 )\n  {\n    dcgettext(0LL, \"error: invalid hour %ld%s\\n\", 5);\n    v23 = 0;\n    sub_404F90();\n    goto LABEL_79;\n  }\nLABEL_78:\n  v23 = 0;\nLABEL_79:\n  if ( v20 != a5 )\n    sub_40DE00(v20);\nLABEL_81:\n  free(ptr);\n  return v23;\n}\n"
        },
        {
            "funcName": "sub_409B90",
            "funcStartAddr": "0x409b90",
            "funcEndAddr": "0x409bf7",
            "decompiledFuncCode": "__int64 __fastcall sub_409B90(__int64 a1, const char *a2, struct timespec *a3)\n{\n  unsigned int v4; // ebp\n  char *v5; // r12\n  __int64 v6; // rax\n  __int64 v7; // rbx\n\n  v4 = 0;\n  v5 = getenv(\"TZ\");\n  v6 = sub_40DB40(v5);\n  if ( v6 )\n  {\n    v7 = v6;\n    v4 = sub_407BC0(a1, a2, a3, 0, v6, v5);\n    sub_40DE00(v7);\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_409C00",
            "funcStartAddr": "0x409c00",
            "funcEndAddr": "0x409c8b",
            "decompiledFuncCode": "__int64 __fastcall sub_409C00(int *a1, int *a2, __int64 a3, char a4)\n{\n  __int64 result; // rax\n  int v5; // edx\n  time_t timer; // [rsp+0h] [rbp-10h] BYREF\n\n  if ( a3 == 1 )\n  {\n    v5 = *a2;\n    result = 1LL;\n    *a1 = *a2;\n    if ( *a2 <= 68 )\n    {\n      if ( (a4 & 8) == 0 )\n      {\n        *a1 = v5 + 100;\n        return result;\n      }\n      return 0LL;\n    }\n  }\n  else\n  {\n    if ( a3 == 2 )\n    {\n      if ( (a4 & 2) != 0 )\n      {\n        *a1 = a2[1] + 100 * *a2 - 1900;\n        return 1LL;\n      }\n      return 0LL;\n    }\n    time(&timer);\n    result = (__int64)localtime(&timer);\n    if ( result )\n    {\n      *a1 = *(_DWORD *)(result + 20);\n      return 1LL;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409C90",
            "funcStartAddr": "0x409c90",
            "funcEndAddr": "0x409f37",
            "decompiledFuncCode": "__int64 __fastcall sub_409C90(_QWORD *a1, const char *a2, unsigned int a3)\n{\n  size_t v4; // r13\n  char *v5; // rax\n  char *v6; // r14\n  signed __int64 v7; // rax\n  __int64 result; // rax\n  const char *v9; // rax\n  size_t v10; // r13\n  __int64 v11; // rdx\n  __int64 v12; // rdx\n  unsigned int v13; // eax\n  int v14; // edx\n  int v15; // eax\n  __int64 v16; // rax\n  struct tm *v17; // rdx\n  _DWORD *v18; // rax\n  int v19; // edx\n  time_t v20; // [rsp+0h] [rbp-C8h] BYREF\n  char v21[8]; // [rsp+8h] [rbp-C0h] BYREF\n  char s[16]; // [rsp+10h] [rbp-B8h] BYREF\n  int v23; // [rsp+20h] [rbp-A8h]\n  unsigned int v24; // [rsp+24h] [rbp-A4h]\n  unsigned __int64 v25; // [rsp+28h] [rbp-A0h]\n  __int64 v26[6]; // [rsp+30h] [rbp-98h] BYREF\n  int v27; // [rsp+60h] [rbp-68h] BYREF\n  unsigned int v28; // [rsp+64h] [rbp-64h]\n  unsigned __int64 v29; // [rsp+68h] [rbp-60h]\n  __int64 v30; // [rsp+70h] [rbp-58h] BYREF\n  int v31; // [rsp+80h] [rbp-48h]\n\n  v4 = strlen(a2);\n  if ( (a3 & 4) != 0 )\n  {\n    v5 = strchr(a2, 46);\n    v6 = v5;\n    if ( v5 )\n    {\n      v7 = v5 - a2;\n      if ( v4 - v7 != 3 )\n        return 0LL;\n      v4 = v7;\n    }\n  }\n  else\n  {\n    v6 = 0LL;\n  }\n  if ( v4 - 8 <= 4 && (v4 & 1) == 0 )\n  {\n    v9 = a2;\n    while ( (unsigned int)(*v9 - 48) <= 9 )\n    {\n      if ( &a2[v4] == ++v9 )\n      {\n        v10 = v4 >> 1;\n        v11 = 0LL;\n        do\n        {\n          *(&v27 + v11) = a2[2 * v11 + 1] + 2 * (5 * a2[2 * v11] - 240) - 48;\n          ++v11;\n        }\n        while ( v10 != v11 );\n        v12 = v10 - 4;\n        if ( (a3 & 1) != 0 )\n        {\n          LODWORD(v26[0]) = v27 - 1;\n          v24 = HIDWORD(v29);\n          v25 = __PAIR64__(v28, v29);\n          if ( !(unsigned __int8)sub_409C00((int *)v26 + 1, (int *)&v30, v12, a3) )\n            return 0LL;\n        }\n        else\n        {\n          if ( !(unsigned __int8)sub_409C00((int *)v26 + 1, &v27, v12, a3) )\n            return 0LL;\n          v18 = (_DWORD *)&v26[4] + v10;\n          LODWORD(v26[0]) = *v18 - 1;\n          HIDWORD(v25) = v18[1];\n          v19 = v18[2];\n          LODWORD(v18) = v18[3];\n          LODWORD(v25) = v19;\n          v24 = (unsigned int)v18;\n        }\n        if ( v6 )\n        {\n          v13 = v6[1] - 48;\n          if ( v13 > 9 )\n            return 0LL;\n          v14 = v6[2];\n          if ( (unsigned int)(v14 - 48) > 9 )\n            return 0LL;\n          v15 = v14 + 10 * v13 - 48;\n          v23 = v15;\n        }\n        else\n        {\n          v23 = 0;\n          v15 = 0;\n        }\n        v27 = v15;\n        v31 = -1;\n        v28 = v24;\n        v29 = v25;\n        v30 = v26[0];\n        v16 = sub_40DA50(&v27);\n        v17 = (struct tm *)&v27;\n        v20 = v16;\n        if ( v16 == -1 )\n        {\n          v17 = localtime(&v20);\n          if ( !v17 )\n            return 0LL;\n        }\n        if ( !(v23 ^ v17->tm_sec | v17->tm_min ^ v24 | v17->tm_hour ^ (unsigned int)v25 | v17->tm_mday ^ HIDWORD(v25) | v17->tm_mon ^ LODWORD(v26[0]) | v17->tm_year ^ HIDWORD(v26[0])) )\n          goto LABEL_24;\n        if ( v23 != 60 )\n          return 0LL;\n        strcpy((char *)(__stpcpy_chk(s, a2, 16LL) - 2), \"59\");\n        result = sub_409C90(v21, s, a3);\n        if ( (_BYTE)result )\n        {\nLABEL_24:\n          *a1 = v20;\n          return 1LL;\n        }\n        return result;\n      }\n    }\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_409F40",
            "funcStartAddr": "0x409f40",
            "funcEndAddr": "0x409fd9",
            "decompiledFuncCode": "char *__fastcall sub_409F40(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_61B350 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409FE0",
            "funcStartAddr": "0x409fe0",
            "funcEndAddr": "0x40a0d2",
            "decompiledFuncCode": "char *__fastcall sub_409FE0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  __int64 v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40E190();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_4167A7;\n      if ( !v5 )\n        return (char *)&unk_41679C;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_4167A3;\n    if ( !v5 )\n      return (char *)&unk_4167A0;\n    return v2;\n  }\n  v6 = 4278847LL;\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_40A0E0",
            "funcStartAddr": "0x401da0",
            "funcEndAddr": "0x401da5",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40A0E0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_40A0E0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_40A0E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40D310((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_40A0E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"TZ=\\\"\" + 3;\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_409FE0(\"`\", a5);\n        v51 = sub_409FE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_40A0E0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_40A0E0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_40A0E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40D310((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_40A0E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"TZ=\\\"\" + 3;\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_409FE0(\"`\", a5);\n        v51 = sub_409FE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_40A0E0",
            "funcStartAddr": "0x401da0",
            "funcEndAddr": "0x401da5",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40A0E0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_40A0E0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_40A0E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40D310((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_40A0E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"TZ=\\\"\" + 3;\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_409FE0(\"`\", a5);\n        v51 = sub_409FE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_40A0E0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_40A0E0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_40A0E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40D310((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_40A0E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"TZ=\\\"\" + 3;\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_409FE0(\"`\", a5);\n        v51 = sub_409FE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_40B310",
            "funcStartAddr": "0x401da5",
            "funcEndAddr": "0x401daa",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B310(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_61B2F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40C3E0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_61B2E0 )\n    {\n      v7 = (__m128i *)sub_40C1F0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_61B2E0);\n    }\n    else\n    {\n      ptr = (void *)sub_40C1F0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_61B2F0], 0, 16LL * (a1 + 1 - dword_61B2F0));\n    dword_61B2F0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_40A0E0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_61B360 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40C190(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_40A0E0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_40B310(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_61B2F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40C3E0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_61B2E0 )\n    {\n      v7 = (__m128i *)sub_40C1F0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_61B2E0);\n    }\n    else\n    {\n      ptr = (void *)sub_40C1F0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_61B2F0], 0, 16LL * (a1 + 1 - dword_61B2F0));\n    dword_61B2F0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_40A0E0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_61B360 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40C190(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_40A0E0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_40B310",
            "funcStartAddr": "0x401da5",
            "funcEndAddr": "0x401daa",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B310(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_61B2F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40C3E0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_61B2E0 )\n    {\n      v7 = (__m128i *)sub_40C1F0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_61B2E0);\n    }\n    else\n    {\n      ptr = (void *)sub_40C1F0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_61B2F0], 0, 16LL * (a1 + 1 - dword_61B2F0));\n    dword_61B2F0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_40A0E0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_61B360 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40C190(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_40A0E0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_40B310(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_61B2F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40C3E0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_61B2E0 )\n    {\n      v7 = (__m128i *)sub_40C1F0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_61B2E0);\n    }\n    else\n    {\n      ptr = (void *)sub_40C1F0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_61B2F0], 0, 16LL * (a1 + 1 - dword_61B2F0));\n    dword_61B2F0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_40A0E0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_61B360 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40C190(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_40A0E0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_40B4B0",
            "funcStartAddr": "0x40b4b0",
            "funcEndAddr": "0x40b4e4",
            "decompiledFuncCode": "__int64 __fastcall sub_40B4B0(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_61B460;\n  result = sub_40C390(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B5A0",
            "funcStartAddr": "0x40b5a0",
            "funcEndAddr": "0x40b612",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40B5A0(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_61B460;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_40A0E0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B620",
            "funcStartAddr": "0x40b620",
            "funcEndAddr": "0x40b701",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B620(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_61B460;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_40A0E0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_40C190(v11 + 1);\n  sub_40A0E0(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_40B720",
            "funcStartAddr": "0x40b720",
            "funcEndAddr": "0x40b7b5",
            "decompiledFuncCode": "void sub_40B720()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_61B2F0 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_61B2F0 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_61B360 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_61B2E0 = 256LL;\n    *((_QWORD *)&xmmword_61B2E0 + 1) = &unk_61B360;\n  }\n  if ( v0 != &xmmword_61B2E0 )\n  {\n    free(v0);\n    ptr = &xmmword_61B2E0;\n  }\n  dword_61B2F0 = 1;\n}\n"
        },
        {
            "funcName": "sub_40B830",
            "funcStartAddr": "0x401daa",
            "funcEndAddr": "0x401daf",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B830(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40B310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_40B830(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40B310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_40B830",
            "funcStartAddr": "0x401daa",
            "funcEndAddr": "0x401daf",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B830(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40B310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_40B830(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40B310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_40B8A0",
            "funcStartAddr": "0x401daf",
            "funcEndAddr": "0x401db4",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B8A0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40B310(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_40B8A0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40B310(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_40B8A0",
            "funcStartAddr": "0x401daf",
            "funcEndAddr": "0x401db4",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B8A0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40B310(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_40B8A0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40B310(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_40B930",
            "funcStartAddr": "0x40b930",
            "funcEndAddr": "0x40b9a0",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B930(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_61B490;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_61B460);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_61B470);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_61B480);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_40B310(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_40B9B0",
            "funcStartAddr": "0x40b9b0",
            "funcEndAddr": "0x40b9c1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B9B0(__int64 a1)\n{\n  return sub_40B930(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_40B9E0",
            "funcStartAddr": "0x401db4",
            "funcEndAddr": "0x401db9",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B9E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40B310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_40B9E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40B310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_40B9E0",
            "funcStartAddr": "0x401db4",
            "funcEndAddr": "0x401db9",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B9E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40B310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_40B9E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40B310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_40BA50",
            "funcStartAddr": "0x40ba50",
            "funcEndAddr": "0x40babc",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40BA50(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_61B460);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_61B470);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_61B480);\n  v8 = qword_61B490;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_40B310(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_40BB40",
            "funcStartAddr": "0x40bb40",
            "funcEndAddr": "0x40bb51",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40BB40(int a1, __int64 a2)\n{\n  return sub_40B310(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_61B2A0);\n}\n"
        },
        {
            "funcName": "sub_40BB60",
            "funcStartAddr": "0x40bb60",
            "funcEndAddr": "0x40bb76",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40BB60(__int64 a1)\n{\n  return sub_40B310(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_61B2A0);\n}\n"
        },
        {
            "funcName": "sub_40BB80",
            "funcStartAddr": "0x40bb80",
            "funcEndAddr": "0x40bbe4",
            "decompiledFuncCode": "__int64 __fastcall sub_40BB80(struct timespec *tp)\n{\n  unsigned int v1; // ebx\n  __syscall_slong_t tv_nsec; // rcx\n  struct timeval v4; // [rsp+0h] [rbp-28h] BYREF\n\n  v1 = clock_settime(0, tp);\n  if ( v1 && *__errno_location() != 1 )\n  {\n    tv_nsec = tp->tv_nsec;\n    v4.tv_sec = tp->tv_sec;\n    v4.tv_usec = tv_nsec / 1000;\n    return (unsigned int)settimeofday(&v4, 0LL);\n  }\n  return v1;\n}\n"
        },
        {
            "funcName": "sub_40BBF0",
            "funcStartAddr": "0x401db9",
            "funcEndAddr": "0x401dbe",
            "decompiledFuncCode": "__int64 __fastcall sub_40BBF0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_40BBF0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_40BBF0",
            "funcStartAddr": "0x401db9",
            "funcEndAddr": "0x401dbe",
            "decompiledFuncCode": "__int64 __fastcall sub_40BBF0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_40BBF0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_40BFF0",
            "funcStartAddr": "0x40bff0",
            "funcEndAddr": "0x40c050",
            "decompiledFuncCode": "__int64 __fastcall sub_40BFF0(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_40BBF0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_40BBF0(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_40C050",
            "funcStartAddr": "0x40c050",
            "funcEndAddr": "0x40c10c",
            "decompiledFuncCode": "__int64 __fastcall sub_40C050(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_40BBF0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_40BBF0(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_40C110",
            "funcStartAddr": "0x40c110",
            "funcEndAddr": "0x40c184",
            "decompiledFuncCode": "int sub_40C110()\n{\n  char *v0; // rax\n  __int64 v1; // rcx\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\", v1);\n  v2 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v2, &unk_412B52, \"https://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v4, v3);\n}\n"
        },
        {
            "funcName": "sub_40C190",
            "funcStartAddr": "0x40c190",
            "funcEndAddr": "0x40c1aa",
            "decompiledFuncCode": "void *__fastcall sub_40C190(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_40C3E0();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40C1E0",
            "funcStartAddr": "0x40c1e0",
            "funcEndAddr": "0x40c1e2",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_40C1E0(size_t a1)\n{\n  return sub_40C190(a1);\n}\n"
        },
        {
            "funcName": "sub_40C1F0",
            "funcStartAddr": "0x40c1f0",
            "funcEndAddr": "0x40c226",
            "decompiledFuncCode": "void *__fastcall sub_40C1F0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_40C3E0();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40C340",
            "funcStartAddr": "0x40c340",
            "funcEndAddr": "0x40c357",
            "decompiledFuncCode": "void *__fastcall sub_40C340(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_40C190(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_40C360",
            "funcStartAddr": "0x40c360",
            "funcEndAddr": "0x40c38e",
            "decompiledFuncCode": "__int64 __fastcall sub_40C360(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_40C3E0(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40C390",
            "funcStartAddr": "0x40c390",
            "funcEndAddr": "0x40c3b8",
            "decompiledFuncCode": "void *__fastcall sub_40C390(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_40C190(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_40C3C0",
            "funcStartAddr": "0x40c3c0",
            "funcEndAddr": "0x40c3d3",
            "decompiledFuncCode": "void *__fastcall sub_40C3C0(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_40C390(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_40C3E0",
            "funcStartAddr": "0x40c3e0",
            "funcEndAddr": "0x40c411",
            "decompiledFuncCode": "void __noreturn sub_40C3E0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_40C420",
            "funcStartAddr": "0x40c420",
            "funcEndAddr": "0x40c49b",
            "decompiledFuncCode": "int __fastcall sub_40C420(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_40C4A0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40C4A0",
            "funcStartAddr": "0x40c4a0",
            "funcEndAddr": "0x40c4e0",
            "decompiledFuncCode": "int __fastcall sub_40C4A0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_40C4E0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_40C4E0",
            "funcStartAddr": "0x40c4e0",
            "funcEndAddr": "0x40c537",
            "decompiledFuncCode": "int __fastcall sub_40C4E0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40C540",
            "funcStartAddr": "0x40c540",
            "funcEndAddr": "0x40c61f",
            "decompiledFuncCode": "__int64 __fastcall sub_40C540(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40C620",
            "funcStartAddr": "0x40c620",
            "funcEndAddr": "0x40cc3c",
            "decompiledFuncCode": "__int64 __fastcall sub_40C620(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        const char *a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rdi\n  const char **v35; // rbx\n  _BYTE *v36; // rbp\n  __int64 v37; // r12\n  const char *v38; // r12\n  __int64 v39; // rbp\n  char *v40; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v48; // [rsp+38h] [rbp-50h]\n  char v49; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+44h] [rbp-44h]\n  int v52; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v49 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v49), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v51 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v48 = 0;\n  v52 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v48 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v52 = 1;\n            ptr[v51] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v48 = 1;\n        }\n        else\n        {\n          v48 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v51 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v48 )\n  {\n    if ( a8 )\n    {\n      if ( v48 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v34 = stderr;\n        v35 = (const char **)a4;\n        v36 = ptr;\n        v37 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9, *v35);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v52 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v51;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v38 = *v12;\n          v39 = *a2;\n          v40 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v40, v39, a9, v38);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40CC40",
            "funcStartAddr": "0x40cc40",
            "funcEndAddr": "0x40d206",
            "decompiledFuncCode": "__int64 __fastcall sub_40CC40(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_40C540((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)a2[v16];\n    if ( !memcmp(v17, \"--\", 3uLL) )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_40C540((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = v10;\n      *a7 = v10;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_40C620(v10, a2, v12, a4, a5, a6, a7, v8, \"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_40C620(v10, a2, v12, a4, a5, a6, a7, v8, \"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)a2[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_40C620(v10, a2, v12, a4, a5, 0, a7, v8, \"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != v10 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43, v21);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( v10 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41, v21);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_40D210",
            "funcStartAddr": "0x40d210",
            "funcEndAddr": "0x40d266",
            "decompiledFuncCode": "__int64 __fastcall sub_40D210(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_61B4A0 = dword_61B2FC;\n  dword_61B4A4 = dword_61B2F8;\n  result = sub_40CC40(a1, a2, a3, a4, a5, a6, &dword_61B4A0, a7);\n  dword_61B2FC = dword_61B4A0;\n  qword_61B4F0 = qword_61B4B0;\n  dword_61B2F4 = dword_61B4A8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40D270",
            "funcStartAddr": "0x40d270",
            "funcEndAddr": "0x40d288",
            "decompiledFuncCode": "__int64 __fastcall sub_40D270(int a1, __int64 *a2, const char *a3)\n{\n  return sub_40D210(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_40D290",
            "funcStartAddr": "0x40d290",
            "funcEndAddr": "0x40d2a3",
            "decompiledFuncCode": "__int64 __fastcall sub_40D290(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40D210(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_40D2B0",
            "funcStartAddr": "0x40d2b0",
            "funcEndAddr": "0x40d2c5",
            "decompiledFuncCode": "__int64 __fastcall sub_40D2B0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40CC40(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40D2D0",
            "funcStartAddr": "0x40d2d0",
            "funcEndAddr": "0x40d2e6",
            "decompiledFuncCode": "__int64 __fastcall sub_40D2D0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40D210(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_40D2F0",
            "funcStartAddr": "0x40d2f0",
            "funcEndAddr": "0x40d308",
            "decompiledFuncCode": "__int64 __fastcall sub_40D2F0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40CC40(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40D310",
            "funcStartAddr": "0x40d310",
            "funcEndAddr": "0x40d38a",
            "decompiledFuncCode": "size_t __fastcall sub_40D310(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_40E130(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40D390",
            "funcStartAddr": "0x40d390",
            "funcEndAddr": "0x40d4a7",
            "decompiledFuncCode": "__int64 __fastcall sub_40D390(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)\n{\n  int v10; // r10d\n  int v11; // r12d\n\n  v10 = (a1 >> 2) + 475 - ((a1 & 3) == 0);\n  v11 = (__PAIR64__((a6 >> 2) + 475, a6 & 3) - 1) >> 32;\n  return a5\n       + 60\n       * (a4\n        + 60\n        * (a3\n         + 24\n         * ((int)(v10\n                - v11\n                - (v10 / 25\n                 - ((unsigned int)(v10 % 25) >> 31)\n                 - (v11 / 25\n                  - ((unsigned int)(v11 % 25) >> 31)))\n                + ((int)(v10 / 25 - ((unsigned int)(v10 % 25) >> 31)) >> 2)\n                - ((int)(v11 / 25 - ((unsigned int)(v11 % 25) >> 31)) >> 2))\n          + 365 * (a1 - a6)\n          + a2\n          - a7)\n         - a8)\n        - a9)\n       - a10;\n}\n"
        },
        {
            "funcName": "sub_40D4B0",
            "funcStartAddr": "0x40d4b0",
            "funcEndAddr": "0x40d541",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40D4B0(__int64 a1, __int64 a2, int a3, int a4, int a5, __int64 a6, int *a7)\n{\n  __int64 v8; // rax\n  bool v9; // of\n  unsigned __int64 result; // rax\n\n  if ( !a7\n    || (v8 = sub_40D390(a1, a2, a3, a4, a5, a7[5], a7[7], a7[2], a7[1], *a7),\n        v9 = __OFADD__(a6, v8),\n        result = a6 + v8,\n        v9) )\n  {\n    if ( a6 < 0 )\n    {\n      if ( a6 >= (__int64)0x8000000000000002LL )\n        return 0x8000000000000000LL;\n      else\n        return a6 + 1;\n    }\n    else\n    {\n      result = 0x7FFFFFFFFFFFFFFFLL;\n      if ( a6 > 0x7FFFFFFFFFFFFFFDLL )\n        return a6 - 1;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40D550",
            "funcStartAddr": "0x40d550",
            "funcEndAddr": "0x40d60f",
            "decompiledFuncCode": "__int64 __fastcall sub_40D550(__int64 (__fastcall *a1)(__int64 *, __int64), __int64 *a2, __int64 a3)\n{\n  __int64 result; // rax\n  __int64 v5; // r14\n  __int64 v6; // rbp\n  __int64 v7; // rdx\n  __int64 v8; // rbx\n  __int64 v9[6]; // [rsp+8h] [rbp-30h] BYREF\n\n  v9[0] = *a2;\n  result = a1(v9, a3);\n  if ( !result )\n  {\n    v5 = *a2;\n    v6 = 0LL;\n    if ( *a2 )\n    {\n      while ( 1 )\n      {\n        v7 = (v6 >> 1) + (v5 >> 1);\n        v8 = v7 + (((unsigned __int8)v5 | (unsigned __int8)v6) & 1);\n        if ( v6 != v8 && v5 != v8 )\n          break;\n        v9[0] = v7 + (((unsigned __int8)v5 | (unsigned __int8)v6) & 1);\n        result = a1(v9, a3);\n        if ( !result )\n        {\n          v5 = v8;\n          v8 = v6;\n        }\n        v6 = v8;\n      }\n      if ( !result && v6 )\n      {\n        v9[0] = v6;\n        return a1(v9, a3);\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40D610",
            "funcStartAddr": "0x40d610",
            "funcEndAddr": "0x40da4a",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40D610(int *a1, __int64 (__fastcall *a2)(__int64 *, __int64), _QWORD *a3)\n{\n  __int64 v4; // rsi\n  int v5; // eax\n  int v6; // edi\n  _BOOL4 v7; // edx\n  __int64 v8; // rbx\n  int v9; // r12d\n  int v10; // ebp\n  __int64 v11; // rsi\n  int v12; // eax\n  __int64 v13; // r13\n  _BOOL4 v14; // r12d\n  __int64 v15; // r14\n  int *v16; // rax\n  __int64 v17; // r15\n  unsigned __int64 result; // rax\n  bool v19; // dl\n  __m128i *v20; // r14\n  __int32 v21; // esi\n  __int64 v22; // rdx\n  bool v23; // of\n  __int64 v24; // rax\n  __m128i v25; // xmm1\n  __m128i v26; // xmm2\n  __int64 v27; // rdx\n  int i; // r13d\n  int v29; // r12d\n  int v30; // r15d\n  int v31; // [rsp+Ch] [rbp-10Ch]\n  int v33; // [rsp+18h] [rbp-100h]\n  int v34; // [rsp+1Ch] [rbp-FCh]\n  int v35; // [rsp+28h] [rbp-F0h]\n  __int64 v37; // [rsp+38h] [rbp-E0h]\n  int v38; // [rsp+40h] [rbp-D8h]\n  int v39; // [rsp+44h] [rbp-D4h]\n  int *v40; // [rsp+48h] [rbp-D0h]\n  unsigned __int64 v41; // [rsp+50h] [rbp-C8h] BYREF\n  __int64 v42; // [rsp+58h] [rbp-C0h] BYREF\n  __m128i v43; // [rsp+60h] [rbp-B8h] BYREF\n  __m128i v44; // [rsp+70h] [rbp-A8h] BYREF\n  __m128i v45; // [rsp+80h] [rbp-98h] BYREF\n  __int64 v46; // [rsp+90h] [rbp-88h]\n  __int64 v47[4]; // [rsp+A0h] [rbp-78h] BYREF\n  int v48; // [rsp+C0h] [rbp-58h]\n\n  v4 = a1[3];\n  v38 = *a1;\n  v31 = a1[1];\n  v5 = a1[2];\n  v6 = a1[4];\n  v33 = v5;\n  v35 = a1[8];\n  v7 = 0;\n  v8 = a1[5] + (__int64)(int)(v6 / 12 - ((unsigned int)(v6 % 12) >> 31));\n  if ( (v8 & 3) == 0 )\n  {\n    v7 = 1;\n    if ( v8 == 100 * (v8 / 100) )\n      v7 = ((v8 / 100) & 3) == 1;\n  }\n  v9 = 59;\n  v10 = 6;\n  v11 = (unsigned __int16)word_4179C0[13 * v7 + (((v6 % 12) >> 31) & 0xC) + v6 % 12] - 1 + v4;\n  if ( v38 <= 59 )\n    v9 = v38;\n  v12 = 0;\n  if ( v9 >= 0 )\n    v12 = v9;\n  v34 = v12;\n  v39 = -(int)*a3;\n  v13 = sub_40D390(v8, v11, v33, v31, v12, 70, 0, 0, 0, v39);\n  v37 = v13;\n  v41 = v13;\n  v40 = a1;\n  v14 = 0;\n  v15 = v13;\n  while ( 1 )\n  {\n    v16 = (int *)sub_40D550(a2, (__int64 *)&v41, (__int64)&v43);\n    v17 = v41;\n    result = sub_40D4B0(v8, v11, v33, v31, v34, v41, v16);\n    if ( v17 == result )\n      break;\n    if ( v17 == v13 && v17 != v15 )\n    {\n      if ( v45.m128i_i32[0] < 0 )\n        goto LABEL_17;\n      v19 = v45.m128i_i32[0] != 0;\n      if ( v35 < 0 )\n      {\n        if ( (unsigned __int8)v19 >= v14 )\n        {\nLABEL_17:\n          v20 = (__m128i *)v40;\n          result = v17;\n          goto LABEL_18;\n        }\n      }\n      else if ( (v35 != 0) != v19 )\n      {\n        goto LABEL_17;\n      }\n    }\n    if ( !--v10 )\n      return -1LL;\n    v41 = result;\n    v13 = v15;\n    v15 = v17;\n    v14 = v45.m128i_i32[0] != 0;\n  }\n  v20 = (__m128i *)v40;\n  if ( (v35 == 0) != (v45.m128i_i32[0] == 0) && v35 >= 0 && v45.m128i_i32[0] >= 0 )\n  {\n    for ( i = 601200; i != 269337600; i += 601200 )\n    {\n      v29 = 2;\n      v30 = -i;\n      v42 = result + -i;\n      if ( !__OFADD__(result, -i) )\n      {\nLABEL_34:\n        sub_40D550(a2, &v42, (__int64)v47);\n        if ( (v35 == 0) == (v48 == 0) || v48 < 0 )\n        {\n          v41 = sub_40D4B0(v8, v11, v33, v31, v34, v42, (int *)v47);\n          sub_40D550(a2, (__int64 *)&v41, (__int64)&v43);\n          result = v41;\n          break;\n        }\n        result = v41;\n      }\n      while ( 1 )\n      {\n        v30 += 2 * i;\n        if ( v29 == 1 )\n          break;\n        v29 = 1;\n        v42 = result + v30;\n        if ( !__OFADD__(result, v30) )\n          goto LABEL_34;\n      }\n    }\n  }\nLABEL_18:\n  v21 = v43.m128i_i32[0];\n  *a3 = result - (v37 + v39);\n  if ( v21 == v38 )\n    goto LABEL_22;\n  v22 = ((v38 <= 0) & (unsigned __int8)(v21 == 60)) - (__int64)v34 + v38;\n  v23 = __OFADD__(v22, result);\n  v24 = v22 + result;\n  v41 = v24;\n  if ( !v23 )\n  {\n    v47[0] = v24;\n    if ( a2(v47, (__int64)&v43) )\n    {\n      result = v41;\nLABEL_22:\n      v25 = _mm_load_si128(&v44);\n      v26 = _mm_load_si128(&v45);\n      v27 = v46;\n      *v20 = _mm_load_si128(&v43);\n      v20[1] = v25;\n      v20[2] = v26;\n      v20[3].m128i_i64[0] = v27;\n      return result;\n    }\n  }\n  return -1LL;\n}\n"
        },
        {
            "funcName": "sub_40DA50",
            "funcStartAddr": "0x40da50",
            "funcEndAddr": "0x40da6c",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40DA50(int *a1)\n{\n  tzset();\n  return sub_40D610(a1, (__int64 (__fastcall *)(__int64 *, __int64))localtime_r, &qword_61B4D8);\n}\n"
        },
        {
            "funcName": "sub_40DA70",
            "funcStartAddr": "0x40da70",
            "funcEndAddr": "0x40dab5",
            "decompiledFuncCode": "__int64 __fastcall sub_40DA70(__int64 a1)\n{\n  int v1; // eax\n  unsigned int v2; // edx\n\n  if ( *(_BYTE *)(a1 + 8) )\n    v1 = setenv(\"TZ\", (const char *)(a1 + 9), 1);\n  else\n    v1 = unsetenv(\"TZ\");\n  v2 = 0;\n  if ( !v1 )\n  {\n    tzset();\n    return 1;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40DAC0",
            "funcStartAddr": "0x40dac0",
            "funcEndAddr": "0x40dae9",
            "decompiledFuncCode": "void __fastcall sub_40DAC0(_QWORD *a1)\n{\n  _QWORD *v1; // rbx\n\n  if ( a1 )\n  {\n    do\n    {\n      v1 = (_QWORD *)*a1;\n      free(a1);\n      a1 = v1;\n    }\n    while ( v1 );\n  }\n}\n"
        },
        {
            "funcName": "sub_40DAF0",
            "funcStartAddr": "0x40daf0",
            "funcEndAddr": "0x40db31",
            "decompiledFuncCode": "__int64 __fastcall sub_40DAF0(_QWORD *a1)\n{\n  int *v1; // rbx\n  int v2; // r13d\n  unsigned int v3; // ebp\n\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = sub_40DA70((__int64)a1);\n  if ( !(_BYTE)v3 )\n    v2 = *v1;\n  sub_40DAC0(a1);\n  *v1 = v2;\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40DB40",
            "funcStartAddr": "0x40db40",
            "funcEndAddr": "0x40dbcf",
            "decompiledFuncCode": "_QWORD *__fastcall sub_40DB40(const char *src)\n{\n  size_t v2; // rax\n  __int64 v3; // rdi\n  size_t v4; // rbp\n  char *v5; // rax\n  _BYTE *v6; // rbx\n  _QWORD *result; // rax\n\n  if ( src )\n  {\n    v2 = strlen(src);\n    v3 = 118LL;\n    v4 = v2 + 1;\n    if ( v2 + 1 >= 0x76 )\n      v3 = v2 + 1;\n    v5 = (char *)malloc((v3 + 17) & 0xFFFFFFFFFFFFFFF8LL);\n    v6 = v5;\n    if ( v5 )\n    {\n      *(_QWORD *)v5 = 0LL;\n      *((_WORD *)v5 + 4) = 1;\n      memcpy(v5 + 9, src, v4);\n      v6[v4 + 9] = 0;\n    }\n    return v6;\n  }\n  result = malloc(0x80uLL);\n  v6 = result;\n  if ( !result )\n    return v6;\n  *result = 0LL;\n  *((_WORD *)result + 4) = 0;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40DBD0",
            "funcStartAddr": "0x40dbd0",
            "funcEndAddr": "0x40dd45",
            "decompiledFuncCode": "__int64 __fastcall sub_40DBD0(__int64 *a1, unsigned __int64 a2)\n{\n  const char *v2; // r12\n  __int64 *v3; // rbp\n  __int64 result; // rax\n  char *v5; // rbx\n  __int64 v6; // r14\n  __int64 *v7; // rax\n  size_t v8; // r15\n  char *v9; // rax\n  _QWORD *v10; // rax\n\n  v2 = *(const char **)(a2 + 48);\n  if ( !v2 )\n    return 1LL;\n  v3 = a1;\n  if ( a2 > (unsigned __int64)v2 || (result = 1LL, (unsigned __int64)v2 >= a2 + 56) )\n  {\n    v5 = (char *)a1 + 9;\n    if ( !*v2 )\n    {\n      v5 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n      goto LABEL_12;\n    }\nLABEL_5:\n    if ( !strcmp(v5, v2) )\n      goto LABEL_12;\n    while ( 1 )\n    {\n      if ( !*v5 )\n      {\n        v6 = (__int64)v3 + 9;\n        if ( (char *)v3 + 9 != v5 )\n        {\n          v8 = strlen(v2) + 1;\n          v9 = &v5[-v6];\n          if ( ~(unsigned __int64)&v5[-v6] < v8 )\n          {\n            *__errno_location() = 12;\n            return 0LL;\n          }\nLABEL_19:\n          if ( (unsigned __int64)&v9[v8] <= 0x76 )\n          {\n            memcpy(v5, v2, v8);\n            v5[v8] = 0;\n            goto LABEL_12;\n          }\n          v10 = sub_40DB40(v2);\n          *v3 = (__int64)v10;\n          if ( !v10 )\n            return 0LL;\n          *((_BYTE *)v10 + 8) = 0;\n          v5 = (char *)v10 + 9;\nLABEL_12:\n          *(_QWORD *)(a2 + 48) = v5;\n          return 1LL;\n        }\n        if ( !*((_BYTE *)v3 + 8) )\n        {\n          v8 = strlen(v2) + 1;\n          v9 = 0LL;\n          goto LABEL_19;\n        }\n      }\n      v5 += strlen(v5) + 1;\n      if ( *v5 )\n        goto LABEL_5;\n      v7 = (__int64 *)*v3;\n      if ( !*v3 )\n        goto LABEL_5;\n      v5 = (char *)v7 + 9;\n      v3 = (__int64 *)*v3;\n      if ( !strcmp((const char *)v7 + 9, v2) )\n        goto LABEL_12;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40DD50",
            "funcStartAddr": "0x40dd50",
            "funcEndAddr": "0x40ddff",
            "decompiledFuncCode": "__int64 __fastcall sub_40DD50(__int64 a1)\n{\n  char *v1; // rax\n  const char *v2; // rbp\n  _QWORD *v3; // rbx\n  int *v5; // rbp\n  int v6; // r12d\n\n  v1 = getenv(\"TZ\");\n  v2 = v1;\n  if ( v1 )\n  {\n    if ( *(_BYTE *)(a1 + 8) && !strcmp((const char *)(a1 + 9), v1) )\n      return 1LL;\n  }\n  else if ( !*(_BYTE *)(a1 + 8) )\n  {\n    return 1LL;\n  }\n  v3 = sub_40DB40(v2);\n  if ( !v3 || (unsigned __int8)sub_40DA70(a1) )\n    return (__int64)v3;\n  v5 = __errno_location();\n  v6 = *v5;\n  if ( v3 != (_QWORD *)1 )\n    sub_40DAC0(v3);\n  *v5 = v6;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40DE00",
            "funcStartAddr": "0x40de00",
            "funcEndAddr": "0x40de11",
            "decompiledFuncCode": "void __fastcall sub_40DE00(_QWORD *a1)\n{\n  if ( a1 != (_QWORD *)1 )\n    sub_40DAC0(a1);\n}\n"
        },
        {
            "funcName": "sub_40DE20",
            "funcStartAddr": "0x40de20",
            "funcEndAddr": "0x40dec5",
            "decompiledFuncCode": "struct tm *__fastcall sub_40DE20(__int64 *a1, const time_t *a2, struct tm *a3)\n{\n  _QWORD *v4; // r13\n\n  if ( !a1 )\n    return gmtime_r(a2, a3);\n  v4 = (_QWORD *)sub_40DD50((__int64)a1);\n  if ( v4 )\n  {\n    if ( localtime_r(a2, a3) && (unsigned __int8)sub_40DBD0(a1, (unsigned __int64)a3) )\n    {\n      if ( v4 == (_QWORD *)1 || (unsigned __int8)sub_40DAF0(v4) )\n        return a3;\n    }\n    else if ( v4 != (_QWORD *)1 )\n    {\n      sub_40DAF0(v4);\n    }\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40DED0",
            "funcStartAddr": "0x40ded0",
            "funcEndAddr": "0x40dfec",
            "decompiledFuncCode": "time_t __fastcall sub_40DED0(__int64 *a1, int *a2)\n{\n  _QWORD *v2; // r12\n  int v4; // eax\n  time_t timer; // [rsp+8h] [rbp-60h] BYREF\n  struct tm tp; // [rsp+10h] [rbp-58h] BYREF\n\n  if ( !a1 )\n    return sub_40DFF0(a2);\n  v2 = (_QWORD *)sub_40DD50((__int64)a1);\n  if ( !v2 )\n    return -1LL;\n  timer = sub_40DA50(a2);\n  if ( timer != -1\n    || localtime_r(&timer, &tp)\n    && ((v4 = a2[8], (v4 == 0) == (tp.tm_isdst == 0)) || v4 < 0 || tp.tm_isdst < 0)\n    && !(tp.tm_sec ^ *a2 | tp.tm_min ^ a2[1] | tp.tm_hour ^ a2[2] | tp.tm_mday ^ a2[3] | tp.tm_year ^ a2[5] | tp.tm_mon ^ a2[4]) )\n  {\n    if ( !(unsigned __int8)sub_40DBD0(a1, (unsigned __int64)a2) )\n      timer = -1LL;\n  }\n  if ( v2 == (_QWORD *)1 || (unsigned __int8)sub_40DAF0(v2) )\n    return timer;\n  else\n    return -1LL;\n}\n"
        },
        {
            "funcName": "sub_40DFF0",
            "funcStartAddr": "0x40dff0",
            "funcEndAddr": "0x40e006",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40DFF0(int *a1)\n{\n  a1[8] = 0;\n  return sub_40D610(a1, (__int64 (__fastcall *)(__int64 *, __int64))gmtime_r, &qword_61B4E0);\n}\n"
        },
        {
            "funcName": "sub_40E010",
            "funcStartAddr": "0x40e010",
            "funcEndAddr": "0x40e0cd",
            "decompiledFuncCode": "__int64 __fastcall sub_40E010(FILE *s, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  size_t v4; // rbx\n  char *v5; // rbp\n  int *v7; // rax\n  int v8; // r13d\n  int *v9; // r12\n  size_t n; // [rsp+8h] [rbp-800h] BYREF\n  char v11[2040]; // [rsp+10h] [rbp-7F8h] BYREF\n\n  n = 2000LL;\n  v3 = (char *)sub_40FFA0(v11, &n, a2, a3);\n  v4 = n;\n  if ( !v3 )\n    goto LABEL_10;\n  v5 = v3;\n  if ( fwrite(v3, 1uLL, n, s) >= v4 )\n  {\n    if ( v5 != v11 )\n      free(v5);\n    if ( v4 <= 0x7FFFFFFF )\n      return (unsigned int)v4;\n    *__errno_location() = 75;\nLABEL_10:\n    LODWORD(v4) = -1;\n    sub_40FF90(s);\n    return (unsigned int)v4;\n  }\n  LODWORD(v4) = -1;\n  if ( v5 != v11 )\n  {\n    v7 = __errno_location();\n    v8 = *v7;\n    v9 = v7;\n    free(v5);\n    *v9 = v8;\n  }\n  return (unsigned int)v4;\n}\n"
        },
        {
            "funcName": "sub_40E0D0",
            "funcStartAddr": "0x40e0d0",
            "funcEndAddr": "0x40e12d",
            "decompiledFuncCode": "int __fastcall sub_40E0D0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_40C420(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n    return -1;\n  }\n  if ( !result )\n    return result;\n  if ( v1 )\n    return -1;\n  return -(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_40E130",
            "funcStartAddr": "0x40e130",
            "funcEndAddr": "0x40e18e",
            "decompiledFuncCode": "bool __fastcall sub_40E130(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40E190",
            "funcStartAddr": "0x40e190",
            "funcEndAddr": "0x40e6f2",
            "decompiledFuncCode": "const char *sub_40E190()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_40C420(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_40C420(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40E700",
            "funcStartAddr": "0x40e700",
            "funcEndAddr": "0x40e741",
            "decompiledFuncCode": "__int64 __fastcall sub_40E700(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  const __int32_t **v4; // rax\n\n  if ( a3 )\n  {\n    v3 = a3 - 1;\n    v4 = __ctype_tolower_loc();\n    do\n    {\n      *(_BYTE *)(a1 + v3) = (*v4)[*(unsigned __int8 *)(a2 + v3)];\n      --v3;\n    }\n    while ( v3 != -1 );\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_40E750",
            "funcStartAddr": "0x40e750",
            "funcEndAddr": "0x40e791",
            "decompiledFuncCode": "__int64 __fastcall sub_40E750(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  const __int32_t **v4; // rax\n\n  if ( a3 )\n  {\n    v3 = a3 - 1;\n    v4 = __ctype_toupper_loc();\n    do\n    {\n      *(_BYTE *)(a1 + v3) = (*v4)[*(unsigned __int8 *)(a2 + v3)];\n      --v3;\n    }\n    while ( v3 != -1 );\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_40E7A0",
            "funcStartAddr": "0x40e7a0",
            "funcEndAddr": "0x40ff65",
            "decompiledFuncCode": "__int64 __fastcall sub_40E7A0(\n        char *s,\n        __int64 a2,\n        char *a3,\n        const __m128i *a4,\n        char a5,\n        __int64 a6,\n        __int64 *a7,\n        int a8)\n{\n  char *v9; // rbx\n  __int64 v10; // r12\n  int v11; // r11d\n  char v12; // al\n  __int64 v13; // r14\n  char *v14; // r8\n  char v16; // r11\n  char v17; // r8\n  int i; // r12d\n  int v19; // eax\n  char v20; // cl\n  int v21; // r9d\n  bool v22; // cc\n  int v23; // ebp\n  int v24; // eax\n  unsigned int v25; // edx\n  int v26; // edi\n  char *v27; // rax\n  char *v28; // r8\n  char v29; // r13\n  size_t v30; // rax\n  unsigned __int64 v31; // rcx\n  int v32; // eax\n  unsigned __int64 v33; // rbx\n  size_t v34; // rdx\n  char *v35; // rdi\n  char *v36; // rsi\n  size_t v37; // rdx\n  char *v38; // rdi\n  unsigned __int64 v39; // rcx\n  char *v40; // r13\n  __m128i v41; // xmm4\n  __m128i v42; // xmm2\n  __int64 v43; // rax\n  time_t v44; // rax\n  __int64 v45; // rsi\n  time_t v46; // rcx\n  int v47; // edx\n  char v48; // al\n  char v49; // dl\n  int v50; // r10d\n  char *v51; // rcx\n  unsigned __int64 v52; // rax\n  size_t v53; // r9\n  unsigned __int64 v54; // r9\n  size_t v55; // rdx\n  char *v56; // rdi\n  unsigned __int64 v57; // r10\n  int v58; // eax\n  unsigned __int64 v59; // rsi\n  size_t v60; // rdx\n  char *v61; // rdi\n  __int32 v62; // r10d\n  __int32 v63; // r13d\n  int v64; // edi\n  int v65; // r8d\n  int v66; // eax\n  int v67; // r13d\n  int v68; // r13d\n  int v69; // edi\n  unsigned int v70; // esi\n  int v71; // edi\n  unsigned int v72; // r8d\n  unsigned __int64 v73; // r13\n  int v74; // eax\n  unsigned __int64 v75; // rsi\n  char v76; // r11\n  char v77; // r8\n  size_t v78; // rdx\n  char *v79; // rdi\n  int v80; // esi\n  unsigned __int64 v81; // r13\n  size_t v82; // rdx\n  char *v83; // rdi\n  char *v84; // rcx\n  char *v85; // rax\n  int v86; // edx\n  unsigned __int64 v87; // rsi\n  size_t v88; // rdx\n  char *v89; // rdi\n  size_t v90; // rdx\n  char *v91; // rdi\n  int v92; // esi\n  int v93; // edi\n  int v94; // edx\n  char *v95; // rax\n  char *v96; // r9\n  size_t v97; // rcx\n  size_t v98; // rax\n  unsigned __int64 v99; // rdx\n  size_t v100; // rdx\n  char *v101; // rdi\n  size_t v102; // rcx\n  __int64 j; // r13\n  __int64 v104; // rsi\n  int v105; // eax\n  int v106; // esi\n  char v107; // cl\n  int v108; // esi\n  size_t v109; // rdx\n  char *v110; // rdi\n  char v111; // al\n  char *v112; // rdx\n  char v113; // cl\n  unsigned __int64 v114; // r12\n  unsigned __int64 v115; // r8\n  size_t v116; // rdx\n  __int64 v117; // r12\n  char *v118; // rdi\n  int v119; // eax\n  unsigned __int64 v120; // rcx\n  char *v121; // rdi\n  int v122; // esi\n  int v123; // edx\n  __int32 v124; // r10d\n  __int32 v125; // esi\n  int k; // edi\n  __int32 v127; // esi\n  bool v128; // sf\n  bool v129; // of\n  int v130; // eax\n  int v131; // eax\n  int v132; // esi\n  int v133; // esi\n  char *v136; // [rsp+20h] [rbp-4A8h]\n  int v138; // [rsp+2Ch] [rbp-49Ch]\n  char *v139; // [rsp+30h] [rbp-498h]\n  char v140; // [rsp+30h] [rbp-498h]\n  unsigned __int64 v141; // [rsp+30h] [rbp-498h]\n  char v142; // [rsp+30h] [rbp-498h]\n  int v143; // [rsp+30h] [rbp-498h]\n  char v144; // [rsp+30h] [rbp-498h]\n  char v145; // [rsp+30h] [rbp-498h]\n  size_t v146; // [rsp+30h] [rbp-498h]\n  char v147; // [rsp+30h] [rbp-498h]\n  size_t v148; // [rsp+30h] [rbp-498h]\n  int v149; // [rsp+30h] [rbp-498h]\n  char v150; // [rsp+40h] [rbp-488h]\n  char *v151; // [rsp+40h] [rbp-488h]\n  char *v152; // [rsp+40h] [rbp-488h]\n  char v153; // [rsp+40h] [rbp-488h]\n  char *v154; // [rsp+40h] [rbp-488h]\n  char v155; // [rsp+40h] [rbp-488h]\n  char v156; // [rsp+40h] [rbp-488h]\n  char v157; // [rsp+40h] [rbp-488h]\n  char *v158; // [rsp+40h] [rbp-488h]\n  char *v159; // [rsp+40h] [rbp-488h]\n  char v160; // [rsp+40h] [rbp-488h]\n  char *v161; // [rsp+40h] [rbp-488h]\n  char v162; // [rsp+40h] [rbp-488h]\n  int v163; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v164; // [rsp+48h] [rbp-480h]\n  char *v165; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v166; // [rsp+48h] [rbp-480h]\n  char v167; // [rsp+48h] [rbp-480h]\n  char *v168; // [rsp+48h] [rbp-480h]\n  char *v169; // [rsp+48h] [rbp-480h]\n  char v170; // [rsp+48h] [rbp-480h]\n  int v171; // [rsp+48h] [rbp-480h]\n  char v172; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v173; // [rsp+50h] [rbp-478h]\n  int v174; // [rsp+50h] [rbp-478h]\n  size_t v175; // [rsp+50h] [rbp-478h]\n  unsigned __int64 v176; // [rsp+50h] [rbp-478h]\n  int v177; // [rsp+50h] [rbp-478h]\n  size_t v178; // [rsp+58h] [rbp-470h]\n  char *v179; // [rsp+58h] [rbp-470h]\n  char v180; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v181; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v182; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v183; // [rsp+60h] [rbp-468h]\n  char format[2]; // [rsp+70h] [rbp-458h] BYREF\n  char v185; // [rsp+72h] [rbp-456h] BYREF\n  char v186; // [rsp+73h] [rbp-455h] BYREF\n  char v187[9]; // [rsp+87h] [rbp-441h] BYREF\n  char sa[16]; // [rsp+90h] [rbp-438h] BYREF\n  __m128i v189; // [rsp+A0h] [rbp-428h]\n  __m128i v190; // [rsp+B0h] [rbp-418h]\n  __int64 v191; // [rsp+C0h] [rbp-408h]\n\n  v9 = a3;\n  v10 = a4[3].m128i_i64[0];\n  v11 = a4->m128i_i32[2];\n  if ( !v10 )\n    v10 = 4290980LL;\n  if ( v11 <= 12 )\n  {\n    if ( !v11 )\n      v11 = 12;\n  }\n  else\n  {\n    v11 -= 12;\n  }\n  v12 = *a3;\n  v13 = 0LL;\n  if ( !*a3 )\n  {\nLABEL_13:\n    if ( s && a2 )\n      *s = 0;\n    return v13;\n  }\n  v138 = v11;\n  v136 = (char *)v10;\n  while ( v12 != 37 )\n  {\n    if ( (unsigned __int64)(a2 - v13) <= 1 )\n      return 0LL;\n    if ( s )\n      *s++ = v12;\n    ++v13;\n    v14 = v9;\nLABEL_12:\n    v12 = v14[1];\n    v9 = v14 + 1;\n    if ( !v12 )\n      goto LABEL_13;\n  }\n  v16 = a5;\n  v17 = 0;\nLABEL_22:\n  for ( i = 0; ; i = v19 )\n  {\n    v19 = *++v9;\n    v20 = *v9;\n    v21 = v19;\n    v22 = *v9 <= 48;\n    if ( *v9 != 48 )\n      break;\nLABEL_26:\n    ;\n  }\n  while ( 1 )\n  {\n    if ( !v22 )\n    {\n      if ( (_BYTE)v19 == 94 )\n      {\n        v16 = 1;\n        goto LABEL_22;\n      }\n      if ( (_BYTE)v19 != 95 )\n      {\n        v23 = -1;\n        if ( (unsigned int)(v19 - 48) > 9 )\n          goto LABEL_29;\n        goto LABEL_37;\n      }\n      goto LABEL_26;\n    }\n    if ( (_BYTE)v19 != 35 )\n      break;\n    v19 = *++v9;\n    v17 = 1;\n    v20 = *v9;\n    v21 = v19;\n    v22 = *v9 <= 48;\n    if ( *v9 == 48 )\n      goto LABEL_26;\n  }\n  if ( (_BYTE)v19 == 45 )\n    goto LABEL_26;\n  v23 = -1;\n  if ( (unsigned int)(v19 - 48) > 9 )\n    goto LABEL_29;\nLABEL_37:\n  v23 = 0;\n  while ( 1 )\n  {\n    v24 = v9[1];\n    v20 = v9[1];\n    v25 = v24 - 48;\n    if ( v23 > 214748364 )\n      break;\n    v26 = *v9;\n    if ( v23 == 214748364 && (char)v26 > 55 )\n      break;\n    ++v9;\n    v23 = v26 + 10 * v23 - 48;\nLABEL_41:\n    if ( v25 > 9 )\n    {\n      v21 = v24;\n      goto LABEL_29;\n    }\n  }\n  if ( v25 <= 9 )\n  {\n    v24 = v9[2];\n    v23 = 0x7FFFFFFF;\n    v9 += 2;\n    v20 = v24;\n    v25 = v24 - 48;\n    goto LABEL_41;\n  }\n  v21 = *++v9;\n  v23 = 0x7FFFFFFF;\nLABEL_29:\n  if ( v20 == 69 || v20 == 79 )\n    v20 = *++v9;\n  else\n    v21 = 0;\n  switch ( v20 )\n  {\n    case 0:\n      v96 = v9 - 1;\n      v107 = *(v9 - 1);\n      goto LABEL_261;\n    case 37:\n      LODWORD(v98) = 0;\n      v81 = 1LL;\n      v99 = a2 - v13;\n      if ( v23 >= 0 )\n        LODWORD(v98) = v23;\n      v98 = (int)v98;\n      if ( (_DWORD)v98 )\n        v81 = (int)v98;\n      if ( v21 )\n      {\n        v14 = v9;\n        v96 = v9;\n        v97 = 1LL;\n        goto LABEL_242;\n      }\n      if ( v81 < v99 )\n      {\n        if ( s )\n        {\n          if ( v23 > 1 )\n          {\n            v109 = v23 - 1LL;\n            v110 = s;\n            s += v109;\n            if ( i == 48 )\n              memset(v110, 48, v109);\n            else\n              memset(v110, 32, v109);\n            v20 = *v9;\n          }\n          *s++ = v20;\n        }\nLABEL_174:\n        v13 += v81;\n        v14 = v9;\n        goto LABEL_12;\n      }\n      return 0LL;\n    case 58:\n      v111 = v9[1];\n      v112 = v9 + 1;\n      for ( j = 1LL; v111 == 58; v112 = &v9[j] )\n        v111 = v9[++j];\n      if ( v111 != 122 )\n        goto LABEL_236;\n      v9 = v112;\n      goto LABEL_252;\n    case 65:\n    case 66:\n    case 97:\n      if ( v21 )\n        goto LABEL_236;\n      if ( v17 )\n        v16 = v17;\n      goto LABEL_51;\n    case 67:\n      if ( v21 == 69 )\n        goto LABEL_334;\n      v144 = 0;\n      v50 = 2;\n      LOBYTE(v72) = a4[1].m128i_i32[1] < -1900;\n      v70 = a4[1].m128i_i32[1] / 100\n          + 19\n          - ((a4[1].m128i_i32[1] / 100 + 19 > 0) & ((unsigned int)(a4[1].m128i_i32[1] % 100) >> 31));\n      v71 = 0;\n      goto LABEL_122;\n    case 68:\n      if ( !v21 )\n        goto LABEL_94;\n      goto LABEL_236;\n    case 70:\n      if ( !v21 )\n        goto LABEL_94;\n      goto LABEL_236;\n    case 71:\n    case 86:\n    case 103:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v62 = a4[1].m128i_i32[3];\n      v63 = a4[1].m128i_i32[2];\n      v143 = a4[1].m128i_i32[1];\n      v64 = v143 + ((v143 >> 31) & 0x190) - 100;\n      v65 = v63 - 382 + 7 * ((v62 - v63 + 382) / 7) + 3;\n      if ( v65 < 0 )\n      {\n        v122 = v143 + ((v143 >> 31) & 0x190) - 101;\n        v123 = 365;\n        if ( (((_BYTE)v143 + ((v143 >> 31) & 0x90) - 101) & 3) == 0 )\n        {\n          v123 = 366;\n          if ( v122 == 100 * (v122 / 100) )\n            v123 = 366 - (v122 % 400 != 0);\n        }\n        v124 = v123 + v62;\n        v125 = v124 - v63;\n        v68 = -1;\n        v65 = v124 - (v125 + 382) + 7 * ((v125 + 382) / 7) + 3;\n      }\n      else\n      {\n        v66 = 365;\n        if ( (v64 & 3) == 0 )\n        {\n          v66 = 366;\n          if ( v64 == 100 * (v64 / 100) )\n            v66 = (v64 == 400 * (v64 / 400)) + 365;\n        }\n        v67 = v63 - 382 + 7 * ((v62 - v66 - v63 + 382) / 7) + 3;\n        if ( v67 >= 0 )\n          v65 = v67;\n        v68 = (v67 >> 31) + 1;\n      }\n      if ( v20 == 71 )\n      {\n        v127 = a4[1].m128i_i32[1];\n        v144 = 0;\n        v50 = 4;\n        v129 = __OFSUB__(v127, -1900 - v68);\n        v128 = v127 - (-1900 - v68) < 0;\n        v70 = v127 + v68 + 1900;\n        LOBYTE(v72) = v128 ^ v129;\n        v71 = 0;\n        goto LABEL_122;\n      }\n      if ( v20 == 103 )\n      {\n        v50 = 2;\n        v69 = (v68 + v143 % 100) % 100;\n        v70 = v69;\n        if ( v69 < 0 )\n        {\n          v70 = v69 + 100;\n          if ( v143 < -1900 - v68 )\n            v70 = -v69;\n        }\n      }\n      else\n      {\n        v50 = 2;\n        v70 = v65 / 7 + 1;\n      }\n      goto LABEL_121;\n    case 72:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v50 = 2;\n      v70 = a4->m128i_u32[2];\n      goto LABEL_121;\n    case 73:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v70 = v138;\n      v50 = 2;\n      goto LABEL_121;\n    case 77:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v50 = 2;\n      v70 = a4->m128i_u32[1];\n      goto LABEL_121;\n    case 78:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      if ( v23 == -1 )\n      {\n        v70 = a8;\n        v23 = 9;\n        v50 = 9;\n      }\n      else\n      {\n        if ( v23 > 8 )\n        {\n          v70 = a8;\n        }\n        else\n        {\n          v70 = a8;\n          for ( k = v23; k != 9; ++k )\n            v70 = (int)v70 / 10;\n        }\n        v50 = v23;\n      }\n      goto LABEL_121;\n    case 80:\n      v29 = 1;\n      goto LABEL_152;\n    case 82:\n    case 84:\nLABEL_94:\n      v57 = sub_40E7A0(0LL, (__int64)a7, a8);\n      v58 = 0;\n      if ( v23 >= 0 )\n        v58 = v23;\n      v59 = v58;\n      if ( v57 >= v58 )\n        v59 = v57;\n      if ( a2 - v13 <= v59 )\n        return 0LL;\n      if ( s )\n      {\n        if ( v57 < v58 )\n        {\n          v173 = v57;\n          v60 = v23 - v57;\n          v61 = s;\n          s += v60;\n          if ( i == 48 )\n            memset(v61, 48, v60);\n          else\n            memset(v61, 32, v60);\n          v57 = v173;\n        }\n        v166 = v57;\n        sub_40E7A0(s, (__int64)a7, a8);\n        s += v166;\n      }\n      v13 += v59;\n      v14 = v9;\n      goto LABEL_12;\n    case 83:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v50 = 2;\n      v70 = a4->m128i_i32[0];\n      goto LABEL_121;\n    case 85:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v93 = a4[1].m128i_i32[3] - a4[1].m128i_i32[2] + 7;\n      v94 = (unsigned __int64)(-1840700269LL * v93) >> 32;\n      goto LABEL_226;\n    case 87:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v93 = 7 * ((a4[1].m128i_i32[2] + 6) / 7) - (a4[1].m128i_i32[2] + 6) + a4[1].m128i_i32[3] + 7;\n      v94 = (unsigned __int64)(-1840700269LL * v93) >> 32;\nLABEL_226:\n      v50 = 2;\n      v70 = ((v94 + v93) >> 2) - (v93 >> 31);\n      goto LABEL_121;\n    case 88:\n    case 99:\n    case 120:\n      if ( v21 != 79 )\n        goto LABEL_69;\n      goto LABEL_236;\n    case 89:\n      if ( v21 == 69 )\n        goto LABEL_334;\n      if ( v21 == 79 )\n        goto LABEL_236;\n      v144 = 0;\n      v50 = 4;\n      v92 = a4[1].m128i_i32[1];\n      LOBYTE(v72) = v92 < -1900;\n      v70 = v92 + 1900;\n      v71 = 0;\n      goto LABEL_220;\n    case 90:\n      v167 = v17;\n      if ( v17 )\n        v16 = 0;\n      v155 = v16;\n      v73 = strlen(v136);\n      v74 = 0;\n      if ( v23 >= 0 )\n        v74 = v23;\n      v75 = v74;\n      if ( v73 >= v74 )\n        v75 = v73;\n      if ( a2 - v13 <= v75 )\n        return 0LL;\n      if ( s )\n      {\n        v76 = v155;\n        v77 = v167;\n        if ( v73 < v74 )\n        {\n          v78 = v23 - v73;\n          v79 = s;\n          s += v78;\n          if ( i == 48 )\n          {\n            memset(v79, 48, v78);\n            v76 = v155;\n            v77 = v167;\n          }\n          else\n          {\n            memset(v79, 32, v78);\n            v77 = v167;\n            v76 = v155;\n          }\n        }\n        if ( v77 )\n        {\n          sub_40E700((__int64)s, (__int64)v136, v73);\n        }\n        else if ( v76 )\n        {\n          sub_40E750((__int64)s, (__int64)v136, v73);\n        }\n        else\n        {\n          memcpy(s, v136, v73);\n        }\n        s += v73;\n      }\n      v13 += v75;\n      v14 = v9;\n      goto LABEL_12;\n    case 98:\n    case 104:\n      if ( v17 )\n        v16 = v17;\n      if ( v21 )\n        goto LABEL_236;\nLABEL_51:\n      v27 = &v185;\n      v28 = v9;\n      v29 = 0;\n      *(_WORD *)format = 9504;\n      v21 = 0;\n      goto LABEL_52;\n    case 100:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v50 = 2;\n      v70 = a4->m128i_u32[3];\n      goto LABEL_121;\n    case 101:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v70 = a4->m128i_u32[3];\n      goto LABEL_157;\n    case 106:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v144 = 0;\n      v50 = 3;\n      v108 = a4[1].m128i_i32[3];\n      LOBYTE(v72) = v108 < -1;\n      v70 = v108 + 1;\n      v71 = 0;\n      goto LABEL_122;\n    case 107:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v70 = a4->m128i_u32[2];\n      goto LABEL_157;\n    case 108:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v70 = v138;\nLABEL_157:\n      v50 = 2;\n      if ( i != 48 && i != 45 )\n        i = 95;\n      goto LABEL_121;\n    case 109:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v144 = 0;\n      v50 = 2;\n      v80 = a4[1].m128i_i32[0];\n      LOBYTE(v72) = v80 < -1;\n      v70 = v80 + 1;\n      v71 = 0;\n      goto LABEL_122;\n    case 110:\n      LODWORD(v81) = 0;\n      if ( v23 >= 0 )\n        LODWORD(v81) = v23;\n      v81 = (int)v81;\n      if ( !(_DWORD)v81 )\n        v81 = 1LL;\n      if ( a2 - v13 <= v81 )\n        return 0LL;\n      if ( s )\n      {\n        if ( v23 > 1 )\n        {\n          v82 = v23 - 1LL;\n          v83 = s;\n          s += v82;\n          if ( i == 48 )\n            memset(v83, 48, v82);\n          else\n            memset(v83, 32, v82);\n        }\n        *s++ = 10;\n      }\n      goto LABEL_174;\n    case 112:\n      v29 = 0;\nLABEL_152:\n      v20 = 112;\n      if ( v17 )\n      {\n        v29 = v17;\n        v16 = 0;\n      }\n      goto LABEL_70;\n    case 113:\n      v50 = 1;\n      if ( v21 == 79 )\n        goto LABEL_124;\n      v144 = 0;\n      LOBYTE(v72) = 0;\n      v71 = 0;\n      v70 = ((11 * a4[1].m128i_i32[0]) >> 5) + 1;\n      goto LABEL_177;\n    case 114:\nLABEL_69:\n      v29 = 0;\nLABEL_70:\n      *(_WORD *)format = 9504;\n      if ( !v21 )\n      {\n        v28 = v9;\n        v27 = &v185;\n        goto LABEL_52;\n      }\n      v50 = 0;\n      goto LABEL_125;\n    case 115:\n      v153 = v16;\n      v40 = v187;\n      v41 = _mm_loadu_si128(a4 + 2);\n      v42 = _mm_loadu_si128(a4 + 1);\n      v43 = a4[3].m128i_i64[0];\n      *(__m128i *)sa = _mm_loadu_si128(a4);\n      v189 = v42;\n      v190 = v41;\n      v191 = v43;\n      v44 = sub_40DED0(a7, (int *)sa);\n      v16 = v153;\n      v45 = v44;\n      v46 = v44;\n      do\n      {\n        v47 = v46 % 10;\n        v46 /= 10LL;\n        v48 = 48 - v47;\n        v49 = v47 + 48;\n        if ( v45 < 0 )\n          v49 = v48;\n        *--v40 = v49;\n      }\n      while ( v46 );\n      v50 = 1;\n      if ( v23 > 0 )\n        v50 = v23;\n      if ( v45 >= 0 )\n        goto LABEL_79;\n      goto LABEL_298;\n    case 116:\n      LODWORD(v81) = 0;\n      if ( v23 >= 0 )\n        LODWORD(v81) = v23;\n      v81 = (int)v81;\n      if ( !(_DWORD)v81 )\n        v81 = 1LL;\n      if ( a2 - v13 <= v81 )\n        return 0LL;\n      if ( s )\n      {\n        if ( v23 > 1 )\n        {\n          v90 = v23 - 1LL;\n          v91 = s;\n          s += v90;\n          if ( i == 48 )\n            memset(v91, 48, v90);\n          else\n            memset(v91, 32, v90);\n        }\n        *s++ = 9;\n      }\n      goto LABEL_174;\n    case 117:\n      v50 = 1;\n      v70 = (a4[1].m128i_i32[2] + 6) % 7 + 1;\n      goto LABEL_121;\n    case 119:\n      if ( v21 == 69 )\n        goto LABEL_236;\n      v50 = 1;\n      v70 = a4[1].m128i_u32[2];\n      goto LABEL_121;\n    case 121:\n      if ( v21 == 69 )\n      {\nLABEL_334:\n        v50 = 0;\n        goto LABEL_124;\n      }\n      v50 = 2;\n      v70 = a4[1].m128i_i32[1] % 100;\n      if ( (v70 & 0x80000000) != 0 )\n      {\n        v70 += 100;\n        if ( a4[1].m128i_i32[1] <= -1901 )\n          v70 = -(a4[1].m128i_i32[1] % 100);\n      }\nLABEL_121:\n      v144 = 0;\n      v71 = 0;\n      v72 = v70 >> 31;\nLABEL_122:\n      if ( v21 == 79 )\n      {\n        if ( (_BYTE)v72 )\n          goto LABEL_221;\nLABEL_124:\n        v29 = 0;\n        *(_WORD *)format = 9504;\nLABEL_125:\n        v185 = v21;\n        v28 = v9;\n        v21 = v50;\n        v27 = &v186;\nLABEL_52:\n        *v27 = v20;\n        v27[1] = 0;\n        v139 = v28;\n        v163 = v21;\n        v150 = v16;\n        v30 = strftime(sa, 0x400uLL, format, (const struct tm *)a4);\n        v14 = v139;\n        if ( v30 )\n        {\n          v31 = v30 - 1;\n          v32 = 0;\n          if ( v23 >= 0 )\n            v32 = v23;\n          v33 = v32;\n          if ( v31 >= v32 )\n            v33 = v31;\n          if ( a2 - v13 > v33 )\n          {\n            if ( s )\n            {\n              v16 = v150;\n              if ( !v163 && v31 < v32 )\n              {\n                v164 = v31;\n                v34 = v23 - v31;\n                v151 = v139;\n                v140 = v16;\n                v35 = s;\n                s += v34;\n                if ( i == 48 )\n                {\n                  memset(v35, 48, v34);\n                  v16 = v140;\n                  v14 = v151;\n                  v31 = v164;\n                }\n                else\n                {\n                  memset(v35, 32, v34);\n                  v31 = v164;\n                  v14 = v151;\n                  v16 = v140;\n                }\n              }\n              v152 = v14;\n              v36 = &sa[1];\n              v37 = v31;\n              v38 = s;\n              v141 = v31;\n              if ( !v29 )\n                goto LABEL_64;\n              sub_40E700((__int64)s, (__int64)&sa[1], v31);\n              v39 = v141;\n              v14 = v152;\n              goto LABEL_66;\n            }\n            goto LABEL_67;\n          }\n          return 0LL;\n        }\n        goto LABEL_12;\n      }\nLABEL_220:\n      if ( (_BYTE)v72 )\nLABEL_221:\n        v70 = -v70;\nLABEL_177:\n      v84 = v187;\n      while ( 1 )\n      {\n        v40 = v84 - 1;\n        if ( (v71 & 1) != 0 )\n        {\n          v85 = v84 - 2;\n          *--v84 = 58;\n          v40 = v85;\n        }\n        v71 >>= 1;\n        *(v84 - 1) = v70 % 0xA + 48;\n        v84 = v40;\n        if ( v70 <= 9 && !v71 )\n          break;\n        v70 /= 0xAu;\n      }\n      if ( v50 < v23 )\n        v50 = v23;\n      if ( (_BYTE)v72 )\n      {\nLABEL_298:\n        v145 = 45;\n        v113 = 45;\n        if ( i == 45 )\n          goto LABEL_299;\nLABEL_189:\n        v51 = (char *)(v187 - v40);\n        LODWORD(v53) = v50 - 1 - (v187 - v40);\n        v52 = a2 - v13;\n        if ( (int)v53 <= 0 )\n        {\n          LODWORD(v54) = 0;\n          v115 = 1LL;\n          if ( v23 >= 0 )\n            LODWORD(v54) = v23;\n          v54 = (int)v54;\n          if ( (_DWORD)v54 )\n            v115 = (int)v54;\n          if ( v115 >= v52 )\n            return 0LL;\n          if ( s )\n          {\n            if ( !v50 && (unsigned __int64)(int)v54 > 1 )\n            {\n              v116 = v23 - 1LL;\n              v183 = v115;\n              v181 = (int)v54;\n              v161 = &s[v116];\n              v170 = v16;\n              if ( i == 48 )\n              {\n                memset(s, 48, v116);\n                s = v161;\n                v16 = v170;\n                v50 = 0;\n                v54 = v181;\n                v115 = v183;\n                v51 = (char *)(v187 - v40);\n              }\n              else\n              {\n                memset(s, 32, v116);\n                s = v161;\n                v51 = (char *)(v187 - v40);\n                v115 = v183;\n                v54 = v181;\n                v50 = 0;\n                v16 = v170;\n              }\n            }\n            *s++ = v145;\n          }\n          v13 += v115;\n          v14 = v9;\n          v52 = a2 - v13;\n          goto LABEL_84;\n        }\n        if ( i != 95 )\n        {\n          if ( v50 >= v52 )\n            return 0LL;\n          v86 = 0;\n          v87 = 1LL;\n          if ( v23 >= 0 )\n            v86 = v23;\n          if ( v86 )\n            v87 = v86;\n          if ( v87 >= v52 )\n            return 0LL;\n          v13 += v87;\n          v53 = (int)v53;\n          v14 = v9;\n          if ( !s )\n            goto LABEL_205;\n          if ( !v50 && (unsigned __int64)v86 > 1 )\n          {\n            v178 = (int)v53;\n            v88 = v23 - 1LL;\n            v156 = v16;\n            v89 = s;\n            s += v88;\n            if ( i == 48 )\n            {\n              memset(v89, 48, v88);\n              v16 = v156;\n              v50 = 0;\n              v51 = (char *)(v187 - v40);\n              v53 = v178;\n            }\n            else\n            {\n              memset(v89, 32, v88);\n              v53 = v178;\n              v51 = (char *)(v187 - v40);\n              v50 = 0;\n              v16 = v156;\n            }\n          }\n          ++s;\n          v14 = v9;\n          *(s - 1) = v145;\nLABEL_203:\n          if ( s )\n          {\n            v179 = v51;\n            v174 = v50;\n            v168 = v14;\n            v157 = v16;\n            v146 = v53;\n            memset(s, 48, v53);\n            v53 = v146;\n            v51 = v179;\n            v50 = v174;\n            v14 = v168;\n            v16 = v157;\n            s += v146;\n          }\nLABEL_205:\n          v13 += v53;\n          v23 = 0;\n          v54 = 0LL;\n          v52 = a2 - v13;\n          goto LABEL_84;\n        }\nLABEL_326:\n        v117 = (int)v53;\n        if ( (int)v53 >= v52 )\n          return 0LL;\n        if ( s )\n        {\n          v118 = s;\n          v177 = v53;\n          v171 = v50;\n          s += (int)v53;\n          v162 = v16;\n          memset(v118, 32, (int)v53);\n          LODWORD(v53) = v177;\n          v50 = v171;\n          v16 = v162;\n        }\n        v13 += v117;\n        v119 = v23 - v53;\n        v22 = (int)v53 < v23;\n        v23 = 0;\n        if ( v22 )\n          v23 = v119;\n        v52 = a2 - v13;\n        if ( v145 )\n        {\n          v54 = v23;\n          v120 = 1LL;\n          if ( v23 )\n            v120 = v23;\n          if ( v120 >= v52 )\n            return 0LL;\n          if ( s )\n          {\n            if ( !v50 && (unsigned __int64)v23 > 1 )\n            {\n              v121 = s;\n              v182 = v120;\n              s += v23 - 1;\n              v172 = v16;\n              memset(v121, 32, v23 - 1LL);\n              v120 = v182;\n              v50 = 0;\n              v16 = v172;\n              v54 = v23;\n            }\n            *s++ = v145;\n          }\n          v13 += v120;\n          v14 = v9;\n          i = 95;\n          v51 = (char *)(v187 - v40);\n          v52 = a2 - v13;\n        }\n        else\n        {\n          v54 = v23;\n          v14 = v9;\n          i = 95;\n          v51 = (char *)(v187 - v40);\n        }\n        goto LABEL_84;\n      }\n      if ( !v144 )\n      {\nLABEL_79:\n        v51 = (char *)(v187 - v40);\n        v52 = a2 - v13;\n        if ( i == 45 || (LODWORD(v53) = v50 - (_DWORD)v51, v50 - (int)v51 <= 0) )\n        {\n          LODWORD(v54) = 0;\n          v14 = v9;\n          if ( v23 >= 0 )\n            LODWORD(v54) = v23;\n          v54 = (int)v54;\n          goto LABEL_84;\n        }\n        if ( i != 95 )\n        {\n          if ( v50 >= v52 )\n            return 0LL;\n          v53 = (int)v53;\n          v14 = v9;\n          goto LABEL_203;\n        }\n        v145 = 0;\n        goto LABEL_326;\n      }\n      if ( i != 45 )\n      {\n        v145 = 43;\n        goto LABEL_189;\n      }\n      v113 = 43;\nLABEL_299:\n      LODWORD(v54) = 0;\n      v114 = 1LL;\n      if ( v23 >= 0 )\n        LODWORD(v54) = v23;\n      v54 = (int)v54;\n      if ( (_DWORD)v54 )\n        v114 = (int)v54;\n      if ( a2 - v13 <= v114 )\n        return 0LL;\n      if ( s )\n      {\n        if ( !v50 && (unsigned __int64)(int)v54 > 1 )\n        {\n          v180 = v113;\n          v176 = (int)v54;\n          v160 = v16;\n          memset(s, 32, v23 - 1LL);\n          v113 = v180;\n          v54 = v176;\n          v50 = 0;\n          v16 = v160;\n          s += v23 - 1;\n        }\n        *s++ = v113;\n      }\n      v13 += v114;\n      v14 = v9;\n      i = 45;\n      v51 = (char *)(v187 - v40);\n      v52 = a2 - v13;\nLABEL_84:\n      v33 = v54;\n      if ( (unsigned __int64)v51 >= v54 )\n        v33 = (unsigned __int64)v51;\n      if ( v33 < v52 )\n      {\n        if ( s )\n        {\n          if ( !v50 && (unsigned __int64)v51 < v54 )\n          {\n            v165 = v51;\n            v55 = v23 - (_QWORD)v51;\n            v154 = v14;\n            v142 = v16;\n            v56 = s;\n            s += v55;\n            if ( i == 48 )\n            {\n              memset(v56, 48, v55);\n              v16 = v142;\n              v14 = v154;\n              v51 = v165;\n            }\n            else\n            {\n              memset(v56, 32, v55);\n              v51 = v165;\n              v14 = v154;\n              v16 = v142;\n            }\n          }\n          v152 = v14;\n          v37 = (size_t)v51;\n          v36 = v40;\n          v38 = s;\n          v141 = (unsigned __int64)v51;\nLABEL_64:\n          if ( v16 )\n          {\n            sub_40E750((__int64)v38, (__int64)v36, v37);\n            v39 = v141;\n            v14 = v152;\n          }\n          else\n          {\n            memcpy(v38, v36, v37);\n            v14 = v152;\n            v39 = v141;\n          }\nLABEL_66:\n          s += v39;\n        }\nLABEL_67:\n        v13 += v33;\n        goto LABEL_12;\n      }\n      return 0LL;\n    case 122:\n      j = 0LL;\nLABEL_252:\n      if ( a4[2].m128i_i32[0] < 0 )\n      {\n        v14 = v9;\n        goto LABEL_12;\n      }\n      v104 = a4[2].m128i_i64[1];\n      LOBYTE(v72) = 1;\n      if ( (int)v104 >= 0 )\n      {\n        LOBYTE(v72) = 0;\n        if ( !(_DWORD)v104 )\n          LOBYTE(v72) = *v136 == 45;\n      }\n      v149 = (int)v104 / 3600;\n      v105 = (int)v104 / 60 % 60;\n      v71 = v105;\n      v106 = (int)v104 % 60;\n      if ( j == 1 )\n        goto LABEL_362;\n      if ( j )\n      {\n        if ( j == 2 )\n          goto LABEL_361;\n        if ( j != 3 )\n        {\n          v107 = *v9;\n          v96 = v9;\nLABEL_261:\n          LODWORD(v98) = 0;\n          v99 = a2 - v13;\n          if ( v23 >= 0 )\n            LODWORD(v98) = v23;\n          v98 = (int)v98;\n          if ( v107 == 37 )\n          {\n            v81 = 1LL;\n            v14 = v96;\n            v97 = 1LL;\n            if ( (_DWORD)v98 )\n              v81 = (int)v98;\n          }\n          else\n          {\n            v9 = v96;\nLABEL_236:\n            v95 = v9 - 1;\n            do\n            {\n              v96 = v95;\n              LODWORD(v97) = (_DWORD)v9 - 1 + 2 - (_DWORD)v95--;\n            }\n            while ( v95[1] != 37 );\n            LODWORD(v98) = 0;\n            v97 = (int)v97;\n            v14 = v9;\n            v99 = a2 - v13;\n            if ( v23 >= 0 )\n              LODWORD(v98) = v23;\n            v98 = (int)v98;\n            v81 = (int)v98;\n            if ( (int)v97 >= (unsigned __int64)(int)v98 )\n              v81 = (int)v97;\n          }\nLABEL_242:\n          if ( v99 > v81 )\n          {\n            if ( s )\n            {\n              if ( v97 < v98 )\n              {\n                v175 = v97;\n                v100 = v23 - v97;\n                v169 = v14;\n                v158 = v96;\n                v147 = v16;\n                v101 = s;\n                s += v100;\n                if ( i == 48 )\n                {\n                  memset(v101, 48, v100);\n                  v16 = v147;\n                  v96 = v158;\n                  v14 = v169;\n                  v97 = v175;\n                }\n                else\n                {\n                  memset(v101, 32, v100);\n                  v97 = v175;\n                  v14 = v169;\n                  v96 = v158;\n                  v16 = v147;\n                }\n              }\n              v159 = v14;\n              v148 = v97;\n              if ( v16 )\n              {\n                sub_40E750((__int64)s, (__int64)v96, v97);\n                v102 = v148;\n                v14 = v159;\n              }\n              else\n              {\n                memcpy(s, v96, v97);\n                v14 = v159;\n                v102 = v148;\n              }\n              s += v102;\n            }\n            v13 += v81;\n            goto LABEL_12;\n          }\n          return 0LL;\n        }\n        if ( v106 )\n        {\nLABEL_361:\n          v130 = 10000 * v149;\n          v50 = 9;\n          v144 = 1;\n          v131 = 100 * v71 + v130;\n          v71 = 20;\n          v70 = v131 + v106;\n        }\n        else if ( v105 )\n        {\nLABEL_362:\n          v132 = 100 * v149;\n          v50 = 6;\n          v144 = 1;\n          v70 = v105 + v132;\n          v71 = 4;\n        }\n        else\n        {\n          v70 = v149;\n          v50 = 3;\n          v144 = 1;\n        }\n      }\n      else\n      {\n        v133 = 100 * v149;\n        v71 = 0;\n        v144 = 1;\n        v50 = 5;\n        v70 = v105 + v133;\n      }\n      goto LABEL_122;\n    default:\n      goto LABEL_236;\n  }\n}\n"
        },
        {
            "funcName": "sub_40FF70",
            "funcStartAddr": "0x40ff70",
            "funcEndAddr": "0x40ff8f",
            "decompiledFuncCode": "__int64 __fastcall sub_40FF70(char *a1, __int64 a2, char *a3, const __m128i *a4, __int64 *a5, int a6)\n{\n  char v7[9]; // [rsp+Fh] [rbp-9h] BYREF\n\n  v7[0] = 0;\n  return sub_40E7A0(a1, a2, a3, a4, 0, (__int64)v7, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_40FF90",
            "funcStartAddr": "0x40ff90",
            "funcEndAddr": "0x40ff94",
            "decompiledFuncCode": "void __fastcall sub_40FF90(_DWORD *a1)\n{\n  *a1 |= 0x20u;\n}\n"
        },
        {
            "funcName": "sub_40FFA0",
            "funcStartAddr": "0x401dbe",
            "funcEndAddr": "0x401dc3",
            "decompiledFuncCode": "char *__fastcall sub_40FFA0(void *a1, size_t *a2, _BYTE *a3, __int64 a4)\n{\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  char *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  _BYTE *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  void *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  const char *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // r11d\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  unsigned __int64 v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  int v79; // ebx\n  __int64 v80; // rax\n  char *v81; // rdi\n  long double v82; // fst7\n  __int64 v83; // rax\n  char *v84; // rdi\n  double v85; // xmm0_8\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  int *v150; // [rsp+18h] [rbp-6F8h]\n  __int64 v151; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v152; // [rsp+28h] [rbp-6E8h]\n  char *v153; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v155; // [rsp+40h] [rbp-6D0h]\n  void *v156; // [rsp+48h] [rbp-6C8h]\n  char *v157; // [rsp+50h] [rbp-6C0h]\n  __int64 v158; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v159; // [rsp+60h] [rbp-6B0h]\n  char *v160; // [rsp+68h] [rbp-6A8h]\n  long double v161; // [rsp+70h] [rbp-6A0h]\n  void *v162; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v164; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v165; // [rsp+98h] [rbp-678h]\n  unsigned int v166; // [rsp+9Ch] [rbp-674h]\n  char v167[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v168; // [rsp+A8h] [rbp-668h]\n  _BYTE v169[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v170; // [rsp+190h] [rbp-580h] BYREF\n  void *v171; // [rsp+198h] [rbp-578h]\n  __int64 v172; // [rsp+1A0h] [rbp-570h]\n  __int64 v173; // [rsp+1A8h] [rbp-568h]\n  _BYTE v174[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v175[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v155 = a2;\n  if ( (int)sub_411CE0(a3, &v170, v167) < 0 )\n    return 0LL;\n  if ( (int)sub_411AC0(a4, v167) >= 0 )\n  {\n    v6 = v172 + 7;\n    if ( (unsigned __int64)(v172 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v173, v6);\n    v7 = v173 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v160 = (char *)&v151;\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = (char *)malloc(v8);\n      v160 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v155;\n    v11 = (char *)v171;\n    v12 = a3;\n    v13 = (char *)src;\n    v158 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v171;\n    if ( *(_BYTE **)v171 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (void *)(v15 - v12);\n    v17 = (unsigned __int64)v16 + v14;\n    v18 = (size_t)v16 + v14;\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v159 = v12;\n          LOBYTE(v161) = v19;\n          v162 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = v162;\n          v12 = v159;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v161) )\n          {\n            *(_QWORD *)&v161 = v159;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = v162;\n            v12 = *(_BYTE **)&v161;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v161 = v12;\n          v162 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = v162;\n          v12 = *(_BYTE **)&v161;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)v16 + v14;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v170 != v158 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_200;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v161 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v162) = v13 == src;\n          v95 = (char *)malloc(v10);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v162 )\n            v13 = (char *)memcpy(v95, v13, v18);\n          else\n            v13 = v95;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_200;\n      v26 = (char *)v168;\n      v27 = (long double *)((char *)v168 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v162) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v162 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v162 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v65 + 1;\n                  v127 = -1LL;\n                  v128 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v127 = 10 * v49;\n                  v75 = __CFADD__(v127, v128);\n                  v49 = v127 + v128;\n                  v65 = v126;\n                  if ( v75 )\n                  {\n                    if ( v66 == v126 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v162;\n                      goto LABEL_82;\n                    }\n                    while ( *v65++ != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v168 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_200;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v129 = v50 + 1;\n                v54 = 0LL;\n                if ( v51 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v133 = 10 * v54;\n                    v75 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v54 = v134;\n                    if ( v75 )\n                    {\n                      if ( v51 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v51 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v53 = (char *)v168 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_200;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v55;\n                  if ( v49 >= v55 )\n                    v86 = v49;\n                  v75 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v162 = v87;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v175;\n                  }\n                  else\n                  {\n                    v156 = (void *)v49;\n                    v157 = (char *)v54;\n                    LODWORD(v159) = v67;\n                    v161 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v67 = (int)v159;\n                    _FST7 = v161;\n                    v89 = v88;\n                    v54 = (unsigned __int64)v157;\n                    v49 = (unsigned __int64)v156;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v165;\n                  LOBYTE(v91) = v165;\n                  HIBYTE(v91) = BYTE1(v165) | 3;\n                  LOWORD(v165) = v91;\n                  __asm { fxam }\n                  if ( (v61 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v67 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v67 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v11[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || v54 )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v157;\n                        v97 = *(char **)&v161;\n                        v124 = *v122;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || (v105 = v92 + 1, v54) )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v157;\n                        v105 = *(char **)&v161;\n                        v140 = *v138;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v11[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 )\n                      {\n                        if ( v54 )\n                        {\n                          HIDWORD(v151) = v90;\n                          v152 = v49;\n                          v153 = v92 + 2;\n                          v156 = v89;\n                          LODWORD(v157) = v67;\n                          v159 = (_BYTE *)v54;\n                          *(_QWORD *)&v161 = v54 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v161;\n                          v118 = (__int64)v159;\n                          v119 = *v116;\n                          LOBYTE(v67) = (_BYTE)v157;\n                          v89 = (char *)v156;\n                          v97 = v153;\n                          v49 = v152;\n                          LOWORD(v90) = WORD2(v151);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v153) = v90;\n                          v156 = (void *)v49;\n                          v157 = v92 + 2;\n                          v159 = v89;\n                          LODWORD(v161) = v67;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v161);\n                          v89 = v159;\n                          v148 = *v147;\n                          v97 = v157;\n                          v49 = (unsigned __int64)v156;\n                          LOWORD(v90) = (_WORD)v153;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v161 = v92 + 2;\n                  v135 = v11[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v67 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v54) )\n                  {\n                    HIDWORD(v151) = v90;\n                    v152 = v49;\n                    v153 = v89;\n                    v156 = (void *)v54;\n                    LODWORD(v157) = v67;\n                    v159 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v156;\n                    v136 = (__int64)v159;\n                    v145 = *v143;\n                    LOBYTE(v67) = (_BYTE)v157;\n                    v89 = v153;\n                    v49 = v152;\n                    LOWORD(v90) = WORD2(v151);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v11[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v161;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v165) = v90;\n                  v98 = v97 - v89;\n                  if ( v49 > v97 - v89 )\n                  {\n                    v99 = v49 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v67 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v67 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v162 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v18;\n                  v14 = v98 + v18;\n                  if ( v10 - v18 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v103 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v10 = v98 + v18;\n                      }\nLABEL_280:\n                      if ( !v13 || v13 == src )\n                      {\n                        LOBYTE(v159) = v13 == src;\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v114 = (char *)malloc(v10);\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v159 )\n                        {\n                          v115 = (char *)memcpy(v114, v13, v18);\n                          v89 = (char *)v162;\n                          v98 = *(_QWORD *)&v161;\n                          v13 = v115;\n                        }\n                        else\n                        {\n                          v13 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v104 = (char *)realloc(v13, v10);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        v13 = v104;\n                      }\n                    }\n                  }\n                  v162 = v89;\n                  memcpy(&v13[v18], v89, v98);\n                  if ( v162 != v175 )\n                    free(v162);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v55 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v160 + 1;\n        *v160 = 37;\n        if ( (v30 & 1) != 0 )\n        {\n          v32 = v160;\n          v160[1] = 39;\n          v31 = (char *)(v32 + 2);\n        }\n        if ( (v30 & 2) != 0 )\n          *v31++ = 45;\n        if ( (v30 & 4) != 0 )\n          *v31++ = 43;\n        if ( (v30 & 8) != 0 )\n          *v31++ = 32;\n        if ( (v30 & 0x10) != 0 )\n          *v31++ = 35;\n        if ( (v30 & 0x40) != 0 )\n          *v31++ = 73;\n        if ( (v30 & 0x20) != 0 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        if ( (unsigned int)v162 <= 0x10 )\n        {\n          v37 = 1LL << (char)v162;\n          if ( ((1LL << (char)v162) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v37 & 0x1000) != 0 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( (v37 & 0x600) == 0 )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v159) = 1;\n            v165 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v159) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_200;\n          v43 = (int)v159;\n          *(&v165 + (unsigned int)v159) = *((_DWORD *)v42 + 4);\n          LODWORD(v159) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v161 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v171 != v174 )\n                    free(v171);\n                  if ( v168 != v169 )\n                    free(v168);\n                  v13 = 0LL;\n                  **(_DWORD **)&v161 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v161 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v161) = v13 == src;\n            v94 = (char *)malloc(v10);\n            v45 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v161) )\n              v45 = (char *)memcpy(v94, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v157 = v45;\n            v46 = __errno_location();\n            v47 = v157;\n            v157 = v31;\n            *(_QWORD *)&v161 = v46;\n            LODWORD(v153) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v164 = -1;\n              **(_DWORD **)&v161 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (int)v162 )\n              {\n                case 1:\n                  v71 = (unsigned int)*((char *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v71 = *((unsigned __int8 *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v71 = (unsigned int)*((__int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v71 = *((unsigned __int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v71 = *((unsigned int *)v168 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_150:\n                  v70 = &v47[v18];\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v149 = &v164;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v70 = &v47[v18];\n                  v71 = *((_QWORD *)v168 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v70,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              v71,\n                              &v164,\n                              v150);\nLABEL_131:\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v70,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v166,\n                            v71,\n                            &v164);\nLABEL_210:\n                    v47 = (char *)v156;\nLABEL_132:\n                    v73 = v164;\n                    if ( v164 < 0 )\n                    {\nLABEL_154:\n                      if ( v157[1] )\n                      {\n                        v157[1] = 0;\n                        continue;\n                      }\n                      if ( v72 < 0 )\n                      {\n                        v79 = **(_DWORD **)&v161;\n                        if ( !**(_DWORD **)&v161 )\n                        {\n                          v79 = 84;\n                          if ( (v11[72] & 0xEF) != 99 )\n                            v79 = 22;\n                        }\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        **(_DWORD **)&v161 = v79;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v164 = v72;\n                      v73 = v72;\nLABEL_137:\n                      if ( (unsigned int)(v73 + 1) < v48 )\n                      {\n                        v13 = v47;\n                        v14 = v18 + v73;\n                        **(_DWORD **)&v161 = (_DWORD)v153;\n                        goto LABEL_110;\n                      }\n                      if ( v10 - v18 > 0x7FFFFFFE )\n                      {\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        v13 = 0LL;\n                        **(_DWORD **)&v161 = 75;\n                        return v13;\n                      }\n                      v74 = (unsigned int)(v73 + 2);\n                      v75 = __CFADD__(v18, v74);\n                      v76 = v18 + v74;\n                      if ( (v10 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v10 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v75 )\n                          goto LABEL_202;\n                        if ( 2 * v10 >= v76 )\n                          v76 = 2 * v10;\n                        if ( v10 < v76 )\n                        {\n                          v10 *= 2LL;\n                          if ( v10 < v76 )\n                          {\n                            if ( v76 == -1LL )\n                            {\nLABEL_202:\n                              v56 = v47;\n                              goto LABEL_89;\n                            }\n                            v10 = v76;\n                          }\n                          v77 = v47 == src;\n                          if ( !v47 || v47 == src )\n                          {\n                            v156 = v47;\n                            v93 = (char *)malloc(v10);\n                            v47 = (char *)v156;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v18 && v77 )\n                              v47 = (char *)memcpy(v93, v156, v18);\n                            else\n                              v47 = v93;\n                          }\n                          else\n                          {\n                            v156 = v47;\n                            v78 = (char *)realloc(v47, v10);\n                            v47 = (char *)v156;\n                            if ( !v78 )\n                              goto LABEL_202;\n                            v47 = v78;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v73 < v48 && v47[v73 + v18] )\n                      goto LABEL_200;\n                    if ( v73 >= v72 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 11:\n                  v83 = *((_QWORD *)v11 + 10);\n                  v84 = &v47[v18];\n                  v156 = v47;\n                  v85 = *((double *)v168 + 4 * v83 + 2);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            &v164,\n                            v150);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v84,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              &v164,\n                              v85);\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            v166,\n                            &v164);\n                  }\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                case 12:\n                  v80 = *((_QWORD *)v11 + 10);\n                  v81 = &v47[v18];\n                  v156 = v47;\n                  v82 = *((long double *)v168 + 2 * v80 + 1);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            *(_OWORD *)&v82,\n                            &v164);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v159 != 2 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            &v164,\n                            *(_OWORD *)&v82);\n                    goto LABEL_131;\n                  }\n                  v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                          v81,\n                          v48,\n                          1LL,\n                          -1LL,\n                          v160,\n                          v165,\n                          v166);\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v71 = v165;\nLABEL_153:\n            v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                    v70,\n                    v48,\n                    1LL,\n                    -1LL,\n                    v160,\n                    v71,\n                    v149,\n                    v150);\n            v73 = v164;\n            v47 = (char *)v156;\n            if ( v164 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v12 = (_BYTE *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v158;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v107 = v18;\n    v108 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v108 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v108 )\n        {\nLABEL_303:\n          v109 = v13 == src;\n          if ( !v13 || v13 == src )\n          {\n            v142 = (char *)malloc(v10);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v13 = (char *)memcpy(v142, v13, v107);\n            else\n              v13 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v13, v10);\n            if ( !v110 )\n              goto LABEL_126;\n            v13 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v13[v107] = 0;\n    if ( v10 > v108 && v13 != src )\n    {\n      v111 = (char *)realloc(v13, v108);\n      if ( v111 )\n        v13 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v171 != v174 )\n      free(v171);\n    if ( v168 != v169 )\n      free(v168);\n    *v155 = v107;\n    return v13;\n  }\n  if ( v171 != v174 )\n    free(v171);\n  if ( v168 != v169 )\n    free(v168);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n\nchar *__fastcall sub_40FFA0(void *a1, size_t *a2, _BYTE *a3, __int64 a4)\n{\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  char *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  _BYTE *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  void *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  const char *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // r11d\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  unsigned __int64 v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  int v79; // ebx\n  __int64 v80; // rax\n  char *v81; // rdi\n  long double v82; // fst7\n  __int64 v83; // rax\n  char *v84; // rdi\n  double v85; // xmm0_8\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  int *v150; // [rsp+18h] [rbp-6F8h]\n  __int64 v151; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v152; // [rsp+28h] [rbp-6E8h]\n  char *v153; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v155; // [rsp+40h] [rbp-6D0h]\n  void *v156; // [rsp+48h] [rbp-6C8h]\n  char *v157; // [rsp+50h] [rbp-6C0h]\n  __int64 v158; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v159; // [rsp+60h] [rbp-6B0h]\n  char *v160; // [rsp+68h] [rbp-6A8h]\n  long double v161; // [rsp+70h] [rbp-6A0h]\n  void *v162; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v164; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v165; // [rsp+98h] [rbp-678h]\n  unsigned int v166; // [rsp+9Ch] [rbp-674h]\n  char v167[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v168; // [rsp+A8h] [rbp-668h]\n  _BYTE v169[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v170; // [rsp+190h] [rbp-580h] BYREF\n  void *v171; // [rsp+198h] [rbp-578h]\n  __int64 v172; // [rsp+1A0h] [rbp-570h]\n  __int64 v173; // [rsp+1A8h] [rbp-568h]\n  _BYTE v174[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v175[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v155 = a2;\n  if ( (int)sub_411CE0(a3, &v170, v167) < 0 )\n    return 0LL;\n  if ( (int)sub_411AC0(a4, v167) >= 0 )\n  {\n    v6 = v172 + 7;\n    if ( (unsigned __int64)(v172 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v173, v6);\n    v7 = v173 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v160 = (char *)&v151;\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = (char *)malloc(v8);\n      v160 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v155;\n    v11 = (char *)v171;\n    v12 = a3;\n    v13 = (char *)src;\n    v158 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v171;\n    if ( *(_BYTE **)v171 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (void *)(v15 - v12);\n    v17 = (unsigned __int64)v16 + v14;\n    v18 = (size_t)v16 + v14;\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v159 = v12;\n          LOBYTE(v161) = v19;\n          v162 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = v162;\n          v12 = v159;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v161) )\n          {\n            *(_QWORD *)&v161 = v159;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = v162;\n            v12 = *(_BYTE **)&v161;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v161 = v12;\n          v162 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = v162;\n          v12 = *(_BYTE **)&v161;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)v16 + v14;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v170 != v158 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_200;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v161 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v162) = v13 == src;\n          v95 = (char *)malloc(v10);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v162 )\n            v13 = (char *)memcpy(v95, v13, v18);\n          else\n            v13 = v95;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_200;\n      v26 = (char *)v168;\n      v27 = (long double *)((char *)v168 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v162) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v162 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v162 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v65 + 1;\n                  v127 = -1LL;\n                  v128 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v127 = 10 * v49;\n                  v75 = __CFADD__(v127, v128);\n                  v49 = v127 + v128;\n                  v65 = v126;\n                  if ( v75 )\n                  {\n                    if ( v66 == v126 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v162;\n                      goto LABEL_82;\n                    }\n                    while ( *v65++ != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v168 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_200;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v129 = v50 + 1;\n                v54 = 0LL;\n                if ( v51 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v133 = 10 * v54;\n                    v75 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v54 = v134;\n                    if ( v75 )\n                    {\n                      if ( v51 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v51 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v53 = (char *)v168 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_200;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v55;\n                  if ( v49 >= v55 )\n                    v86 = v49;\n                  v75 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v162 = v87;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v175;\n                  }\n                  else\n                  {\n                    v156 = (void *)v49;\n                    v157 = (char *)v54;\n                    LODWORD(v159) = v67;\n                    v161 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v67 = (int)v159;\n                    _FST7 = v161;\n                    v89 = v88;\n                    v54 = (unsigned __int64)v157;\n                    v49 = (unsigned __int64)v156;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v165;\n                  LOBYTE(v91) = v165;\n                  HIBYTE(v91) = BYTE1(v165) | 3;\n                  LOWORD(v165) = v91;\n                  __asm { fxam }\n                  if ( (v61 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v67 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v67 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v11[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || v54 )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v157;\n                        v97 = *(char **)&v161;\n                        v124 = *v122;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || (v105 = v92 + 1, v54) )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v157;\n                        v105 = *(char **)&v161;\n                        v140 = *v138;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v11[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 )\n                      {\n                        if ( v54 )\n                        {\n                          HIDWORD(v151) = v90;\n                          v152 = v49;\n                          v153 = v92 + 2;\n                          v156 = v89;\n                          LODWORD(v157) = v67;\n                          v159 = (_BYTE *)v54;\n                          *(_QWORD *)&v161 = v54 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v161;\n                          v118 = (__int64)v159;\n                          v119 = *v116;\n                          LOBYTE(v67) = (_BYTE)v157;\n                          v89 = (char *)v156;\n                          v97 = v153;\n                          v49 = v152;\n                          LOWORD(v90) = WORD2(v151);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v153) = v90;\n                          v156 = (void *)v49;\n                          v157 = v92 + 2;\n                          v159 = v89;\n                          LODWORD(v161) = v67;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v161);\n                          v89 = v159;\n                          v148 = *v147;\n                          v97 = v157;\n                          v49 = (unsigned __int64)v156;\n                          LOWORD(v90) = (_WORD)v153;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v161 = v92 + 2;\n                  v135 = v11[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v67 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v54) )\n                  {\n                    HIDWORD(v151) = v90;\n                    v152 = v49;\n                    v153 = v89;\n                    v156 = (void *)v54;\n                    LODWORD(v157) = v67;\n                    v159 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v156;\n                    v136 = (__int64)v159;\n                    v145 = *v143;\n                    LOBYTE(v67) = (_BYTE)v157;\n                    v89 = v153;\n                    v49 = v152;\n                    LOWORD(v90) = WORD2(v151);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v11[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v161;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v165) = v90;\n                  v98 = v97 - v89;\n                  if ( v49 > v97 - v89 )\n                  {\n                    v99 = v49 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v67 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v67 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v162 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v18;\n                  v14 = v98 + v18;\n                  if ( v10 - v18 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v103 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v10 = v98 + v18;\n                      }\nLABEL_280:\n                      if ( !v13 || v13 == src )\n                      {\n                        LOBYTE(v159) = v13 == src;\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v114 = (char *)malloc(v10);\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v159 )\n                        {\n                          v115 = (char *)memcpy(v114, v13, v18);\n                          v89 = (char *)v162;\n                          v98 = *(_QWORD *)&v161;\n                          v13 = v115;\n                        }\n                        else\n                        {\n                          v13 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v104 = (char *)realloc(v13, v10);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        v13 = v104;\n                      }\n                    }\n                  }\n                  v162 = v89;\n                  memcpy(&v13[v18], v89, v98);\n                  if ( v162 != v175 )\n                    free(v162);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v55 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v160 + 1;\n        *v160 = 37;\n        if ( (v30 & 1) != 0 )\n        {\n          v32 = v160;\n          v160[1] = 39;\n          v31 = (char *)(v32 + 2);\n        }\n        if ( (v30 & 2) != 0 )\n          *v31++ = 45;\n        if ( (v30 & 4) != 0 )\n          *v31++ = 43;\n        if ( (v30 & 8) != 0 )\n          *v31++ = 32;\n        if ( (v30 & 0x10) != 0 )\n          *v31++ = 35;\n        if ( (v30 & 0x40) != 0 )\n          *v31++ = 73;\n        if ( (v30 & 0x20) != 0 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        if ( (unsigned int)v162 <= 0x10 )\n        {\n          v37 = 1LL << (char)v162;\n          if ( ((1LL << (char)v162) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v37 & 0x1000) != 0 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( (v37 & 0x600) == 0 )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v159) = 1;\n            v165 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v159) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_200;\n          v43 = (int)v159;\n          *(&v165 + (unsigned int)v159) = *((_DWORD *)v42 + 4);\n          LODWORD(v159) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v161 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v171 != v174 )\n                    free(v171);\n                  if ( v168 != v169 )\n                    free(v168);\n                  v13 = 0LL;\n                  **(_DWORD **)&v161 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v161 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v161) = v13 == src;\n            v94 = (char *)malloc(v10);\n            v45 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v161) )\n              v45 = (char *)memcpy(v94, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v157 = v45;\n            v46 = __errno_location();\n            v47 = v157;\n            v157 = v31;\n            *(_QWORD *)&v161 = v46;\n            LODWORD(v153) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v164 = -1;\n              **(_DWORD **)&v161 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (int)v162 )\n              {\n                case 1:\n                  v71 = (unsigned int)*((char *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v71 = *((unsigned __int8 *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v71 = (unsigned int)*((__int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v71 = *((unsigned __int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v71 = *((unsigned int *)v168 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_150:\n                  v70 = &v47[v18];\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v149 = &v164;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v70 = &v47[v18];\n                  v71 = *((_QWORD *)v168 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v70,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              v71,\n                              &v164,\n                              v150);\nLABEL_131:\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v70,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v166,\n                            v71,\n                            &v164);\nLABEL_210:\n                    v47 = (char *)v156;\nLABEL_132:\n                    v73 = v164;\n                    if ( v164 < 0 )\n                    {\nLABEL_154:\n                      if ( v157[1] )\n                      {\n                        v157[1] = 0;\n                        continue;\n                      }\n                      if ( v72 < 0 )\n                      {\n                        v79 = **(_DWORD **)&v161;\n                        if ( !**(_DWORD **)&v161 )\n                        {\n                          v79 = 84;\n                          if ( (v11[72] & 0xEF) != 99 )\n                            v79 = 22;\n                        }\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        **(_DWORD **)&v161 = v79;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v164 = v72;\n                      v73 = v72;\nLABEL_137:\n                      if ( (unsigned int)(v73 + 1) < v48 )\n                      {\n                        v13 = v47;\n                        v14 = v18 + v73;\n                        **(_DWORD **)&v161 = (_DWORD)v153;\n                        goto LABEL_110;\n                      }\n                      if ( v10 - v18 > 0x7FFFFFFE )\n                      {\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        v13 = 0LL;\n                        **(_DWORD **)&v161 = 75;\n                        return v13;\n                      }\n                      v74 = (unsigned int)(v73 + 2);\n                      v75 = __CFADD__(v18, v74);\n                      v76 = v18 + v74;\n                      if ( (v10 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v10 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v75 )\n                          goto LABEL_202;\n                        if ( 2 * v10 >= v76 )\n                          v76 = 2 * v10;\n                        if ( v10 < v76 )\n                        {\n                          v10 *= 2LL;\n                          if ( v10 < v76 )\n                          {\n                            if ( v76 == -1LL )\n                            {\nLABEL_202:\n                              v56 = v47;\n                              goto LABEL_89;\n                            }\n                            v10 = v76;\n                          }\n                          v77 = v47 == src;\n                          if ( !v47 || v47 == src )\n                          {\n                            v156 = v47;\n                            v93 = (char *)malloc(v10);\n                            v47 = (char *)v156;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v18 && v77 )\n                              v47 = (char *)memcpy(v93, v156, v18);\n                            else\n                              v47 = v93;\n                          }\n                          else\n                          {\n                            v156 = v47;\n                            v78 = (char *)realloc(v47, v10);\n                            v47 = (char *)v156;\n                            if ( !v78 )\n                              goto LABEL_202;\n                            v47 = v78;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v73 < v48 && v47[v73 + v18] )\n                      goto LABEL_200;\n                    if ( v73 >= v72 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 11:\n                  v83 = *((_QWORD *)v11 + 10);\n                  v84 = &v47[v18];\n                  v156 = v47;\n                  v85 = *((double *)v168 + 4 * v83 + 2);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            &v164,\n                            v150);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v84,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              &v164,\n                              v85);\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            v166,\n                            &v164);\n                  }\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                case 12:\n                  v80 = *((_QWORD *)v11 + 10);\n                  v81 = &v47[v18];\n                  v156 = v47;\n                  v82 = *((long double *)v168 + 2 * v80 + 1);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            *(_OWORD *)&v82,\n                            &v164);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v159 != 2 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            &v164,\n                            *(_OWORD *)&v82);\n                    goto LABEL_131;\n                  }\n                  v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                          v81,\n                          v48,\n                          1LL,\n                          -1LL,\n                          v160,\n                          v165,\n                          v166);\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v71 = v165;\nLABEL_153:\n            v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                    v70,\n                    v48,\n                    1LL,\n                    -1LL,\n                    v160,\n                    v71,\n                    v149,\n                    v150);\n            v73 = v164;\n            v47 = (char *)v156;\n            if ( v164 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v12 = (_BYTE *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v158;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v107 = v18;\n    v108 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v108 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v108 )\n        {\nLABEL_303:\n          v109 = v13 == src;\n          if ( !v13 || v13 == src )\n          {\n            v142 = (char *)malloc(v10);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v13 = (char *)memcpy(v142, v13, v107);\n            else\n              v13 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v13, v10);\n            if ( !v110 )\n              goto LABEL_126;\n            v13 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v13[v107] = 0;\n    if ( v10 > v108 && v13 != src )\n    {\n      v111 = (char *)realloc(v13, v108);\n      if ( v111 )\n        v13 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v171 != v174 )\n      free(v171);\n    if ( v168 != v169 )\n      free(v168);\n    *v155 = v107;\n    return v13;\n  }\n  if ( v171 != v174 )\n    free(v171);\n  if ( v168 != v169 )\n    free(v168);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n"
        },
        {
            "funcName": "sub_40FFA0",
            "funcStartAddr": "0x401dbe",
            "funcEndAddr": "0x401dc3",
            "decompiledFuncCode": "char *__fastcall sub_40FFA0(void *a1, size_t *a2, _BYTE *a3, __int64 a4)\n{\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  char *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  _BYTE *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  void *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  const char *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // r11d\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  unsigned __int64 v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  int v79; // ebx\n  __int64 v80; // rax\n  char *v81; // rdi\n  long double v82; // fst7\n  __int64 v83; // rax\n  char *v84; // rdi\n  double v85; // xmm0_8\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  int *v150; // [rsp+18h] [rbp-6F8h]\n  __int64 v151; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v152; // [rsp+28h] [rbp-6E8h]\n  char *v153; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v155; // [rsp+40h] [rbp-6D0h]\n  void *v156; // [rsp+48h] [rbp-6C8h]\n  char *v157; // [rsp+50h] [rbp-6C0h]\n  __int64 v158; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v159; // [rsp+60h] [rbp-6B0h]\n  char *v160; // [rsp+68h] [rbp-6A8h]\n  long double v161; // [rsp+70h] [rbp-6A0h]\n  void *v162; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v164; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v165; // [rsp+98h] [rbp-678h]\n  unsigned int v166; // [rsp+9Ch] [rbp-674h]\n  char v167[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v168; // [rsp+A8h] [rbp-668h]\n  _BYTE v169[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v170; // [rsp+190h] [rbp-580h] BYREF\n  void *v171; // [rsp+198h] [rbp-578h]\n  __int64 v172; // [rsp+1A0h] [rbp-570h]\n  __int64 v173; // [rsp+1A8h] [rbp-568h]\n  _BYTE v174[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v175[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v155 = a2;\n  if ( (int)sub_411CE0(a3, &v170, v167) < 0 )\n    return 0LL;\n  if ( (int)sub_411AC0(a4, v167) >= 0 )\n  {\n    v6 = v172 + 7;\n    if ( (unsigned __int64)(v172 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v173, v6);\n    v7 = v173 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v160 = (char *)&v151;\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = (char *)malloc(v8);\n      v160 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v155;\n    v11 = (char *)v171;\n    v12 = a3;\n    v13 = (char *)src;\n    v158 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v171;\n    if ( *(_BYTE **)v171 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (void *)(v15 - v12);\n    v17 = (unsigned __int64)v16 + v14;\n    v18 = (size_t)v16 + v14;\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v159 = v12;\n          LOBYTE(v161) = v19;\n          v162 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = v162;\n          v12 = v159;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v161) )\n          {\n            *(_QWORD *)&v161 = v159;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = v162;\n            v12 = *(_BYTE **)&v161;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v161 = v12;\n          v162 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = v162;\n          v12 = *(_BYTE **)&v161;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)v16 + v14;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v170 != v158 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_200;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v161 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v162) = v13 == src;\n          v95 = (char *)malloc(v10);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v162 )\n            v13 = (char *)memcpy(v95, v13, v18);\n          else\n            v13 = v95;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_200;\n      v26 = (char *)v168;\n      v27 = (long double *)((char *)v168 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v162) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v162 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v162 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v65 + 1;\n                  v127 = -1LL;\n                  v128 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v127 = 10 * v49;\n                  v75 = __CFADD__(v127, v128);\n                  v49 = v127 + v128;\n                  v65 = v126;\n                  if ( v75 )\n                  {\n                    if ( v66 == v126 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v162;\n                      goto LABEL_82;\n                    }\n                    while ( *v65++ != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v168 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_200;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v129 = v50 + 1;\n                v54 = 0LL;\n                if ( v51 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v133 = 10 * v54;\n                    v75 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v54 = v134;\n                    if ( v75 )\n                    {\n                      if ( v51 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v51 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v53 = (char *)v168 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_200;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v55;\n                  if ( v49 >= v55 )\n                    v86 = v49;\n                  v75 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v162 = v87;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v175;\n                  }\n                  else\n                  {\n                    v156 = (void *)v49;\n                    v157 = (char *)v54;\n                    LODWORD(v159) = v67;\n                    v161 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v67 = (int)v159;\n                    _FST7 = v161;\n                    v89 = v88;\n                    v54 = (unsigned __int64)v157;\n                    v49 = (unsigned __int64)v156;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v165;\n                  LOBYTE(v91) = v165;\n                  HIBYTE(v91) = BYTE1(v165) | 3;\n                  LOWORD(v165) = v91;\n                  __asm { fxam }\n                  if ( (v61 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v67 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v67 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v11[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || v54 )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v157;\n                        v97 = *(char **)&v161;\n                        v124 = *v122;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || (v105 = v92 + 1, v54) )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v157;\n                        v105 = *(char **)&v161;\n                        v140 = *v138;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v11[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 )\n                      {\n                        if ( v54 )\n                        {\n                          HIDWORD(v151) = v90;\n                          v152 = v49;\n                          v153 = v92 + 2;\n                          v156 = v89;\n                          LODWORD(v157) = v67;\n                          v159 = (_BYTE *)v54;\n                          *(_QWORD *)&v161 = v54 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v161;\n                          v118 = (__int64)v159;\n                          v119 = *v116;\n                          LOBYTE(v67) = (_BYTE)v157;\n                          v89 = (char *)v156;\n                          v97 = v153;\n                          v49 = v152;\n                          LOWORD(v90) = WORD2(v151);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v153) = v90;\n                          v156 = (void *)v49;\n                          v157 = v92 + 2;\n                          v159 = v89;\n                          LODWORD(v161) = v67;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v161);\n                          v89 = v159;\n                          v148 = *v147;\n                          v97 = v157;\n                          v49 = (unsigned __int64)v156;\n                          LOWORD(v90) = (_WORD)v153;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v161 = v92 + 2;\n                  v135 = v11[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v67 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v54) )\n                  {\n                    HIDWORD(v151) = v90;\n                    v152 = v49;\n                    v153 = v89;\n                    v156 = (void *)v54;\n                    LODWORD(v157) = v67;\n                    v159 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v156;\n                    v136 = (__int64)v159;\n                    v145 = *v143;\n                    LOBYTE(v67) = (_BYTE)v157;\n                    v89 = v153;\n                    v49 = v152;\n                    LOWORD(v90) = WORD2(v151);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v11[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v161;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v165) = v90;\n                  v98 = v97 - v89;\n                  if ( v49 > v97 - v89 )\n                  {\n                    v99 = v49 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v67 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v67 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v162 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v18;\n                  v14 = v98 + v18;\n                  if ( v10 - v18 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v103 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v10 = v98 + v18;\n                      }\nLABEL_280:\n                      if ( !v13 || v13 == src )\n                      {\n                        LOBYTE(v159) = v13 == src;\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v114 = (char *)malloc(v10);\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v159 )\n                        {\n                          v115 = (char *)memcpy(v114, v13, v18);\n                          v89 = (char *)v162;\n                          v98 = *(_QWORD *)&v161;\n                          v13 = v115;\n                        }\n                        else\n                        {\n                          v13 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v104 = (char *)realloc(v13, v10);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        v13 = v104;\n                      }\n                    }\n                  }\n                  v162 = v89;\n                  memcpy(&v13[v18], v89, v98);\n                  if ( v162 != v175 )\n                    free(v162);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v55 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v160 + 1;\n        *v160 = 37;\n        if ( (v30 & 1) != 0 )\n        {\n          v32 = v160;\n          v160[1] = 39;\n          v31 = (char *)(v32 + 2);\n        }\n        if ( (v30 & 2) != 0 )\n          *v31++ = 45;\n        if ( (v30 & 4) != 0 )\n          *v31++ = 43;\n        if ( (v30 & 8) != 0 )\n          *v31++ = 32;\n        if ( (v30 & 0x10) != 0 )\n          *v31++ = 35;\n        if ( (v30 & 0x40) != 0 )\n          *v31++ = 73;\n        if ( (v30 & 0x20) != 0 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        if ( (unsigned int)v162 <= 0x10 )\n        {\n          v37 = 1LL << (char)v162;\n          if ( ((1LL << (char)v162) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v37 & 0x1000) != 0 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( (v37 & 0x600) == 0 )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v159) = 1;\n            v165 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v159) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_200;\n          v43 = (int)v159;\n          *(&v165 + (unsigned int)v159) = *((_DWORD *)v42 + 4);\n          LODWORD(v159) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v161 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v171 != v174 )\n                    free(v171);\n                  if ( v168 != v169 )\n                    free(v168);\n                  v13 = 0LL;\n                  **(_DWORD **)&v161 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v161 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v161) = v13 == src;\n            v94 = (char *)malloc(v10);\n            v45 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v161) )\n              v45 = (char *)memcpy(v94, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v157 = v45;\n            v46 = __errno_location();\n            v47 = v157;\n            v157 = v31;\n            *(_QWORD *)&v161 = v46;\n            LODWORD(v153) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v164 = -1;\n              **(_DWORD **)&v161 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (int)v162 )\n              {\n                case 1:\n                  v71 = (unsigned int)*((char *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v71 = *((unsigned __int8 *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v71 = (unsigned int)*((__int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v71 = *((unsigned __int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v71 = *((unsigned int *)v168 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_150:\n                  v70 = &v47[v18];\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v149 = &v164;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v70 = &v47[v18];\n                  v71 = *((_QWORD *)v168 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v70,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              v71,\n                              &v164,\n                              v150);\nLABEL_131:\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v70,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v166,\n                            v71,\n                            &v164);\nLABEL_210:\n                    v47 = (char *)v156;\nLABEL_132:\n                    v73 = v164;\n                    if ( v164 < 0 )\n                    {\nLABEL_154:\n                      if ( v157[1] )\n                      {\n                        v157[1] = 0;\n                        continue;\n                      }\n                      if ( v72 < 0 )\n                      {\n                        v79 = **(_DWORD **)&v161;\n                        if ( !**(_DWORD **)&v161 )\n                        {\n                          v79 = 84;\n                          if ( (v11[72] & 0xEF) != 99 )\n                            v79 = 22;\n                        }\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        **(_DWORD **)&v161 = v79;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v164 = v72;\n                      v73 = v72;\nLABEL_137:\n                      if ( (unsigned int)(v73 + 1) < v48 )\n                      {\n                        v13 = v47;\n                        v14 = v18 + v73;\n                        **(_DWORD **)&v161 = (_DWORD)v153;\n                        goto LABEL_110;\n                      }\n                      if ( v10 - v18 > 0x7FFFFFFE )\n                      {\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        v13 = 0LL;\n                        **(_DWORD **)&v161 = 75;\n                        return v13;\n                      }\n                      v74 = (unsigned int)(v73 + 2);\n                      v75 = __CFADD__(v18, v74);\n                      v76 = v18 + v74;\n                      if ( (v10 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v10 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v75 )\n                          goto LABEL_202;\n                        if ( 2 * v10 >= v76 )\n                          v76 = 2 * v10;\n                        if ( v10 < v76 )\n                        {\n                          v10 *= 2LL;\n                          if ( v10 < v76 )\n                          {\n                            if ( v76 == -1LL )\n                            {\nLABEL_202:\n                              v56 = v47;\n                              goto LABEL_89;\n                            }\n                            v10 = v76;\n                          }\n                          v77 = v47 == src;\n                          if ( !v47 || v47 == src )\n                          {\n                            v156 = v47;\n                            v93 = (char *)malloc(v10);\n                            v47 = (char *)v156;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v18 && v77 )\n                              v47 = (char *)memcpy(v93, v156, v18);\n                            else\n                              v47 = v93;\n                          }\n                          else\n                          {\n                            v156 = v47;\n                            v78 = (char *)realloc(v47, v10);\n                            v47 = (char *)v156;\n                            if ( !v78 )\n                              goto LABEL_202;\n                            v47 = v78;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v73 < v48 && v47[v73 + v18] )\n                      goto LABEL_200;\n                    if ( v73 >= v72 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 11:\n                  v83 = *((_QWORD *)v11 + 10);\n                  v84 = &v47[v18];\n                  v156 = v47;\n                  v85 = *((double *)v168 + 4 * v83 + 2);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            &v164,\n                            v150);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v84,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              &v164,\n                              v85);\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            v166,\n                            &v164);\n                  }\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                case 12:\n                  v80 = *((_QWORD *)v11 + 10);\n                  v81 = &v47[v18];\n                  v156 = v47;\n                  v82 = *((long double *)v168 + 2 * v80 + 1);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            *(_OWORD *)&v82,\n                            &v164);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v159 != 2 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            &v164,\n                            *(_OWORD *)&v82);\n                    goto LABEL_131;\n                  }\n                  v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                          v81,\n                          v48,\n                          1LL,\n                          -1LL,\n                          v160,\n                          v165,\n                          v166);\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v71 = v165;\nLABEL_153:\n            v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                    v70,\n                    v48,\n                    1LL,\n                    -1LL,\n                    v160,\n                    v71,\n                    v149,\n                    v150);\n            v73 = v164;\n            v47 = (char *)v156;\n            if ( v164 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v12 = (_BYTE *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v158;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v107 = v18;\n    v108 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v108 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v108 )\n        {\nLABEL_303:\n          v109 = v13 == src;\n          if ( !v13 || v13 == src )\n          {\n            v142 = (char *)malloc(v10);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v13 = (char *)memcpy(v142, v13, v107);\n            else\n              v13 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v13, v10);\n            if ( !v110 )\n              goto LABEL_126;\n            v13 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v13[v107] = 0;\n    if ( v10 > v108 && v13 != src )\n    {\n      v111 = (char *)realloc(v13, v108);\n      if ( v111 )\n        v13 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v171 != v174 )\n      free(v171);\n    if ( v168 != v169 )\n      free(v168);\n    *v155 = v107;\n    return v13;\n  }\n  if ( v171 != v174 )\n    free(v171);\n  if ( v168 != v169 )\n    free(v168);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n\nchar *__fastcall sub_40FFA0(void *a1, size_t *a2, _BYTE *a3, __int64 a4)\n{\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  char *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  _BYTE *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  void *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  const char *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // r11d\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  unsigned __int64 v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  int v79; // ebx\n  __int64 v80; // rax\n  char *v81; // rdi\n  long double v82; // fst7\n  __int64 v83; // rax\n  char *v84; // rdi\n  double v85; // xmm0_8\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  int *v150; // [rsp+18h] [rbp-6F8h]\n  __int64 v151; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v152; // [rsp+28h] [rbp-6E8h]\n  char *v153; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v155; // [rsp+40h] [rbp-6D0h]\n  void *v156; // [rsp+48h] [rbp-6C8h]\n  char *v157; // [rsp+50h] [rbp-6C0h]\n  __int64 v158; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v159; // [rsp+60h] [rbp-6B0h]\n  char *v160; // [rsp+68h] [rbp-6A8h]\n  long double v161; // [rsp+70h] [rbp-6A0h]\n  void *v162; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v164; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v165; // [rsp+98h] [rbp-678h]\n  unsigned int v166; // [rsp+9Ch] [rbp-674h]\n  char v167[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v168; // [rsp+A8h] [rbp-668h]\n  _BYTE v169[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v170; // [rsp+190h] [rbp-580h] BYREF\n  void *v171; // [rsp+198h] [rbp-578h]\n  __int64 v172; // [rsp+1A0h] [rbp-570h]\n  __int64 v173; // [rsp+1A8h] [rbp-568h]\n  _BYTE v174[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v175[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v155 = a2;\n  if ( (int)sub_411CE0(a3, &v170, v167) < 0 )\n    return 0LL;\n  if ( (int)sub_411AC0(a4, v167) >= 0 )\n  {\n    v6 = v172 + 7;\n    if ( (unsigned __int64)(v172 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v173, v6);\n    v7 = v173 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v160 = (char *)&v151;\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = (char *)malloc(v8);\n      v160 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v155;\n    v11 = (char *)v171;\n    v12 = a3;\n    v13 = (char *)src;\n    v158 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v171;\n    if ( *(_BYTE **)v171 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (void *)(v15 - v12);\n    v17 = (unsigned __int64)v16 + v14;\n    v18 = (size_t)v16 + v14;\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v159 = v12;\n          LOBYTE(v161) = v19;\n          v162 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = v162;\n          v12 = v159;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v161) )\n          {\n            *(_QWORD *)&v161 = v159;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = v162;\n            v12 = *(_BYTE **)&v161;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v161 = v12;\n          v162 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = v162;\n          v12 = *(_BYTE **)&v161;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)v16 + v14;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v170 != v158 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_200;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v161 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v162) = v13 == src;\n          v95 = (char *)malloc(v10);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v162 )\n            v13 = (char *)memcpy(v95, v13, v18);\n          else\n            v13 = v95;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_200;\n      v26 = (char *)v168;\n      v27 = (long double *)((char *)v168 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v162) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v162 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v162 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v65 + 1;\n                  v127 = -1LL;\n                  v128 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v127 = 10 * v49;\n                  v75 = __CFADD__(v127, v128);\n                  v49 = v127 + v128;\n                  v65 = v126;\n                  if ( v75 )\n                  {\n                    if ( v66 == v126 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v162;\n                      goto LABEL_82;\n                    }\n                    while ( *v65++ != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v168 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_200;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v129 = v50 + 1;\n                v54 = 0LL;\n                if ( v51 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v133 = 10 * v54;\n                    v75 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v54 = v134;\n                    if ( v75 )\n                    {\n                      if ( v51 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v51 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v53 = (char *)v168 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_200;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v55;\n                  if ( v49 >= v55 )\n                    v86 = v49;\n                  v75 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v162 = v87;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v175;\n                  }\n                  else\n                  {\n                    v156 = (void *)v49;\n                    v157 = (char *)v54;\n                    LODWORD(v159) = v67;\n                    v161 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v67 = (int)v159;\n                    _FST7 = v161;\n                    v89 = v88;\n                    v54 = (unsigned __int64)v157;\n                    v49 = (unsigned __int64)v156;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v165;\n                  LOBYTE(v91) = v165;\n                  HIBYTE(v91) = BYTE1(v165) | 3;\n                  LOWORD(v165) = v91;\n                  __asm { fxam }\n                  if ( (v61 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v67 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v67 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v11[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || v54 )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v157;\n                        v97 = *(char **)&v161;\n                        v124 = *v122;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || (v105 = v92 + 1, v54) )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v157;\n                        v105 = *(char **)&v161;\n                        v140 = *v138;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v11[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 )\n                      {\n                        if ( v54 )\n                        {\n                          HIDWORD(v151) = v90;\n                          v152 = v49;\n                          v153 = v92 + 2;\n                          v156 = v89;\n                          LODWORD(v157) = v67;\n                          v159 = (_BYTE *)v54;\n                          *(_QWORD *)&v161 = v54 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v161;\n                          v118 = (__int64)v159;\n                          v119 = *v116;\n                          LOBYTE(v67) = (_BYTE)v157;\n                          v89 = (char *)v156;\n                          v97 = v153;\n                          v49 = v152;\n                          LOWORD(v90) = WORD2(v151);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v153) = v90;\n                          v156 = (void *)v49;\n                          v157 = v92 + 2;\n                          v159 = v89;\n                          LODWORD(v161) = v67;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v161);\n                          v89 = v159;\n                          v148 = *v147;\n                          v97 = v157;\n                          v49 = (unsigned __int64)v156;\n                          LOWORD(v90) = (_WORD)v153;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v161 = v92 + 2;\n                  v135 = v11[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v67 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v54) )\n                  {\n                    HIDWORD(v151) = v90;\n                    v152 = v49;\n                    v153 = v89;\n                    v156 = (void *)v54;\n                    LODWORD(v157) = v67;\n                    v159 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v156;\n                    v136 = (__int64)v159;\n                    v145 = *v143;\n                    LOBYTE(v67) = (_BYTE)v157;\n                    v89 = v153;\n                    v49 = v152;\n                    LOWORD(v90) = WORD2(v151);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v11[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v161;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v165) = v90;\n                  v98 = v97 - v89;\n                  if ( v49 > v97 - v89 )\n                  {\n                    v99 = v49 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v67 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v67 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v162 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v18;\n                  v14 = v98 + v18;\n                  if ( v10 - v18 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v103 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v10 = v98 + v18;\n                      }\nLABEL_280:\n                      if ( !v13 || v13 == src )\n                      {\n                        LOBYTE(v159) = v13 == src;\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v114 = (char *)malloc(v10);\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v159 )\n                        {\n                          v115 = (char *)memcpy(v114, v13, v18);\n                          v89 = (char *)v162;\n                          v98 = *(_QWORD *)&v161;\n                          v13 = v115;\n                        }\n                        else\n                        {\n                          v13 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v104 = (char *)realloc(v13, v10);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        v13 = v104;\n                      }\n                    }\n                  }\n                  v162 = v89;\n                  memcpy(&v13[v18], v89, v98);\n                  if ( v162 != v175 )\n                    free(v162);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v55 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v160 + 1;\n        *v160 = 37;\n        if ( (v30 & 1) != 0 )\n        {\n          v32 = v160;\n          v160[1] = 39;\n          v31 = (char *)(v32 + 2);\n        }\n        if ( (v30 & 2) != 0 )\n          *v31++ = 45;\n        if ( (v30 & 4) != 0 )\n          *v31++ = 43;\n        if ( (v30 & 8) != 0 )\n          *v31++ = 32;\n        if ( (v30 & 0x10) != 0 )\n          *v31++ = 35;\n        if ( (v30 & 0x40) != 0 )\n          *v31++ = 73;\n        if ( (v30 & 0x20) != 0 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        if ( (unsigned int)v162 <= 0x10 )\n        {\n          v37 = 1LL << (char)v162;\n          if ( ((1LL << (char)v162) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v37 & 0x1000) != 0 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( (v37 & 0x600) == 0 )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v159) = 1;\n            v165 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v159) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_200;\n          v43 = (int)v159;\n          *(&v165 + (unsigned int)v159) = *((_DWORD *)v42 + 4);\n          LODWORD(v159) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v161 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v171 != v174 )\n                    free(v171);\n                  if ( v168 != v169 )\n                    free(v168);\n                  v13 = 0LL;\n                  **(_DWORD **)&v161 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v161 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v161) = v13 == src;\n            v94 = (char *)malloc(v10);\n            v45 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v161) )\n              v45 = (char *)memcpy(v94, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v157 = v45;\n            v46 = __errno_location();\n            v47 = v157;\n            v157 = v31;\n            *(_QWORD *)&v161 = v46;\n            LODWORD(v153) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v164 = -1;\n              **(_DWORD **)&v161 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (int)v162 )\n              {\n                case 1:\n                  v71 = (unsigned int)*((char *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v71 = *((unsigned __int8 *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v71 = (unsigned int)*((__int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v71 = *((unsigned __int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v71 = *((unsigned int *)v168 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_150:\n                  v70 = &v47[v18];\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v149 = &v164;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v70 = &v47[v18];\n                  v71 = *((_QWORD *)v168 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v70,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              v71,\n                              &v164,\n                              v150);\nLABEL_131:\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v70,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v166,\n                            v71,\n                            &v164);\nLABEL_210:\n                    v47 = (char *)v156;\nLABEL_132:\n                    v73 = v164;\n                    if ( v164 < 0 )\n                    {\nLABEL_154:\n                      if ( v157[1] )\n                      {\n                        v157[1] = 0;\n                        continue;\n                      }\n                      if ( v72 < 0 )\n                      {\n                        v79 = **(_DWORD **)&v161;\n                        if ( !**(_DWORD **)&v161 )\n                        {\n                          v79 = 84;\n                          if ( (v11[72] & 0xEF) != 99 )\n                            v79 = 22;\n                        }\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        **(_DWORD **)&v161 = v79;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v164 = v72;\n                      v73 = v72;\nLABEL_137:\n                      if ( (unsigned int)(v73 + 1) < v48 )\n                      {\n                        v13 = v47;\n                        v14 = v18 + v73;\n                        **(_DWORD **)&v161 = (_DWORD)v153;\n                        goto LABEL_110;\n                      }\n                      if ( v10 - v18 > 0x7FFFFFFE )\n                      {\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        v13 = 0LL;\n                        **(_DWORD **)&v161 = 75;\n                        return v13;\n                      }\n                      v74 = (unsigned int)(v73 + 2);\n                      v75 = __CFADD__(v18, v74);\n                      v76 = v18 + v74;\n                      if ( (v10 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v10 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v75 )\n                          goto LABEL_202;\n                        if ( 2 * v10 >= v76 )\n                          v76 = 2 * v10;\n                        if ( v10 < v76 )\n                        {\n                          v10 *= 2LL;\n                          if ( v10 < v76 )\n                          {\n                            if ( v76 == -1LL )\n                            {\nLABEL_202:\n                              v56 = v47;\n                              goto LABEL_89;\n                            }\n                            v10 = v76;\n                          }\n                          v77 = v47 == src;\n                          if ( !v47 || v47 == src )\n                          {\n                            v156 = v47;\n                            v93 = (char *)malloc(v10);\n                            v47 = (char *)v156;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v18 && v77 )\n                              v47 = (char *)memcpy(v93, v156, v18);\n                            else\n                              v47 = v93;\n                          }\n                          else\n                          {\n                            v156 = v47;\n                            v78 = (char *)realloc(v47, v10);\n                            v47 = (char *)v156;\n                            if ( !v78 )\n                              goto LABEL_202;\n                            v47 = v78;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v73 < v48 && v47[v73 + v18] )\n                      goto LABEL_200;\n                    if ( v73 >= v72 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 11:\n                  v83 = *((_QWORD *)v11 + 10);\n                  v84 = &v47[v18];\n                  v156 = v47;\n                  v85 = *((double *)v168 + 4 * v83 + 2);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            &v164,\n                            v150);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v84,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              &v164,\n                              v85);\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            v166,\n                            &v164);\n                  }\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                case 12:\n                  v80 = *((_QWORD *)v11 + 10);\n                  v81 = &v47[v18];\n                  v156 = v47;\n                  v82 = *((long double *)v168 + 2 * v80 + 1);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            *(_OWORD *)&v82,\n                            &v164);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v159 != 2 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            &v164,\n                            *(_OWORD *)&v82);\n                    goto LABEL_131;\n                  }\n                  v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                          v81,\n                          v48,\n                          1LL,\n                          -1LL,\n                          v160,\n                          v165,\n                          v166);\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v71 = v165;\nLABEL_153:\n            v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                    v70,\n                    v48,\n                    1LL,\n                    -1LL,\n                    v160,\n                    v71,\n                    v149,\n                    v150);\n            v73 = v164;\n            v47 = (char *)v156;\n            if ( v164 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v12 = (_BYTE *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v158;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v107 = v18;\n    v108 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v108 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v108 )\n        {\nLABEL_303:\n          v109 = v13 == src;\n          if ( !v13 || v13 == src )\n          {\n            v142 = (char *)malloc(v10);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v13 = (char *)memcpy(v142, v13, v107);\n            else\n              v13 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v13, v10);\n            if ( !v110 )\n              goto LABEL_126;\n            v13 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v13[v107] = 0;\n    if ( v10 > v108 && v13 != src )\n    {\n      v111 = (char *)realloc(v13, v108);\n      if ( v111 )\n        v13 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v171 != v174 )\n      free(v171);\n    if ( v168 != v169 )\n      free(v168);\n    *v155 = v107;\n    return v13;\n  }\n  if ( v171 != v174 )\n    free(v171);\n  if ( v168 != v169 )\n    free(v168);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n"
        },
        {
            "funcName": "sub_411AC0",
            "funcStartAddr": "0x411ac0",
            "funcEndAddr": "0x411cd9",
            "decompiledFuncCode": "__int64 __fastcall sub_411AC0(int *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  _DWORD *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( *(_DWORD *)v2 )\n      {\n        case 1:\n        case 2:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *(_BYTE *)(v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3:\n        case 4:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *(_WORD *)(v2 + 16) = *v10;\n          goto LABEL_7;\n        case 5:\n        case 6:\n        case 0xD:\n        case 0xE:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          *(_DWORD *)(v2 + 16) = *v8;\n          goto LABEL_7;\n        case 7:\n        case 8:\n        case 9:\n        case 0xA:\n        case 0x11:\n        case 0x12:\n        case 0x13:\n        case 0x14:\n        case 0x15:\n        case 0x16:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *(_QWORD *)(v2 + 16) = *v5;\n          goto LABEL_7;\n        case 0xB:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *(_QWORD *)(v2 + 16) = *v14;\n          goto LABEL_7;\n        case 0xC:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *(long double *)(v2 + 16) = *v15;\n          goto LABEL_7;\n        case 0xF:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *(_QWORD *)(v2 + 16) = v21;\n          goto LABEL_7;\n        case 0x10:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_417FE0;\n          *(_QWORD *)(v2 + 16) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 32LL;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_411CE0",
            "funcStartAddr": "0x411ce0",
            "funcEndAddr": "0x4129e9",
            "decompiledFuncCode": "__int64 __fastcall sub_411CE0(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 v6; // r9\n  __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  char *v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  _QWORD *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  _QWORD *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  char *v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  _QWORD *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  _QWORD *v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  __int64 v94; // [rsp+38h] [rbp-50h]\n  __int64 v95; // [rsp+38h] [rbp-50h]\n  __int64 v96; // [rsp+38h] [rbp-50h]\n  __int64 v97; // [rsp+38h] [rbp-50h]\n  __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = a2 + 4;\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (char *)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *((_DWORD *)v12 + 4) = 0;\n  *((_QWORD *)v12 + 3) = 0LL;\n  *((_QWORD *)v12 + 4) = 0LL;\n  *((_QWORD *)v12 + 5) = -1LL;\n  *((_QWORD *)v12 + 6) = 0LL;\n  *((_QWORD *)v12 + 7) = 0LL;\n  *((_QWORD *)v12 + 8) = -1LL;\n  *((_QWORD *)v12 + 10) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_16;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_16;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_130;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_130;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_16:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case '\\'':\n        *((_DWORD *)v12 + 4) |= 1u;\n        goto LABEL_15;\n      case '-':\n        *((_DWORD *)v12 + 4) |= 2u;\n        goto LABEL_15;\n      case '+':\n        *((_DWORD *)v12 + 4) |= 4u;\n        goto LABEL_15;\n      case ' ':\n        *((_DWORD *)v12 + 4) |= 8u;\n        goto LABEL_15;\n      case '#':\n        *((_DWORD *)v12 + 4) |= 0x10u;\n        goto LABEL_15;\n    }\n    if ( v13 != 48 )\n      break;\n    *((_DWORD *)v12 + 4) |= 0x20u;\nLABEL_15:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *((_DWORD *)v12 + 4) |= 0x40u;\n    goto LABEL_15;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *((_QWORD *)v12 + 3) = v9;\n    *((_QWORD *)v12 + 4) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_39;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 == 36 )\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_130;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_130;\n      *((_QWORD *)v12 + 5) = v18;\n      v14 = v47 + 2;\n    }\n    else\n    {\nLABEL_39:\n      v18 = *((_QWORD *)v12 + 5);\n      if ( v18 == -1LL )\n      {\n        *((_QWORD *)v12 + 5) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v18 = v81++;\n      }\n    }\n    v19 = (_DWORD *)a3[1];\n    if ( v6 > v18 )\n    {\n      v20 = *a3;\nLABEL_42:\n      if ( v20 <= v18 )\n      {\n        do\n        {\n          ++v20;\n          v19[8 * v20 - 8] = 0;\n        }\n        while ( v20 <= v18 );\n        *a3 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_25;\n        }\n        goto LABEL_131;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_26;\nLABEL_47:\n      v22 = v9[1] == 42;\n      *((_QWORD *)v12 + 6) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *((_QWORD *)v12 + 7) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_26;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *((_QWORD *)v12 + 7) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_51;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 == 36 )\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_130;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *((_QWORD *)v12 + 8) = v26;\n          v24 = v72 + 2;\nLABEL_52:\n          v19 = (_DWORD *)a3[1];\n          if ( v6 > v26 )\n          {\n            v27 = *a3;\n            goto LABEL_54;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_162;\n              v27 = *a3;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)a3[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_160;\n              v27 = *a3;\n              if ( src != v40 )\n                goto LABEL_171;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *a3;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_171:\n            a3[1] = (unsigned __int64)v19;\nLABEL_54:\n            if ( v27 <= v26 )\n            {\n              do\n              {\n                ++v27;\n                v19[8 * v27 - 8] = 0;\n              }\n              while ( v27 <= v26 );\n              *a3 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_26;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_26;\n            }\n            goto LABEL_131;\n          }\nLABEL_159:\n          v40 = v19;\n          goto LABEL_160;\n        }\n      }\n      else\n      {\nLABEL_51:\n        v26 = *((_QWORD *)v12 + 8);\n        if ( v26 != -1LL )\n          goto LABEL_52;\n        *((_QWORD *)v12 + 8) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_52;\n        }\n      }\nLABEL_130:\n      v19 = (_DWORD *)a3[1];\nLABEL_131:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (_QWORD *)v4[1];\n      if ( v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_159;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_162;\n      v20 = *a3;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)a3[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_160;\n      v20 = *a3;\n      if ( src != v40 )\n        goto LABEL_93;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *a3;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_93:\n    a3[1] = (unsigned __int64)v19;\n    goto LABEL_42;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *((_QWORD *)v12 + 3) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = i + 1;\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - v9;\n      v9 = v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *((_QWORD *)v12 + 4) = v9;\n    v13 = *v9;\n  }\nLABEL_25:\n  if ( v13 == 46 )\n    goto LABEL_47;\nLABEL_26:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_33;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_33;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_33:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case '%':\n      goto LABEL_70;\n    case 'A':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'a':\n    case 'e':\n    case 'f':\n    case 'g':\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_62;\n    case 'C':\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_62;\n    case 'S':\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_62;\n    case 'X':\n    case 'o':\n    case 'u':\n    case 'x':\n      v29 = 10;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 6 : 4;\n        }\n      }\n      goto LABEL_62;\n    case 'c':\n      v29 = (v15 > 7) + 13;\n      goto LABEL_62;\n    case 'd':\n    case 'i':\n      v29 = 9;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 5 : 3;\n        }\n      }\n      goto LABEL_62;\n    case 'n':\n      v29 = 22;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( (v15 & 2) == 0 )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_62;\n    case 'p':\n      v29 = 17;\n      goto LABEL_62;\n    case 's':\n      v29 = (v15 > 7) + 15;\nLABEL_62:\n      if ( v11 == -1LL )\n      {\n        *((_QWORD *)v12 + 10) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v11 = v81++;\n      }\n      else\n      {\n        *((_QWORD *)v12 + 10) = v11;\n      }\n      v19 = (_DWORD *)a3[1];\n      if ( v6 > v11 )\n        goto LABEL_65;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_159;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_162;\n        goto LABEL_158;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_210;\n      if ( src == (_DWORD *)a3[1] )\n      {\n        v19 = src;\nLABEL_158:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *a3);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      a3[1] = (unsigned __int64)v19;\nLABEL_65:\n      v30 = *a3;\n      if ( *a3 <= v11 )\n      {\n        do\n        {\n          ++v30;\n          v19[8 * v30 - 8] = 0;\n        }\n        while ( v30 <= v11 );\n        *a3 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_131;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_70:\n      v12[72] = v13;\n      v32 = *v4;\n      *((_QWORD *)v12 + 1) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > (unsigned __int64)(v32 + 1) )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( v7 >= 0 )\n      {\n        v33 = 2 * v7;\n        if ( (unsigned __int64)(2 * v7) <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (_QWORD *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)a3[1];\n              if ( src != v40 )\n                goto LABEL_161;\n              goto LABEL_164;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_210;\n            v34 = (_QWORD *)v91[1];\n            v8 = *v91;\n            if ( v82 != v34 )\n              goto LABEL_77;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_77:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_210:\n      v40 = (_DWORD *)a3[1];\nLABEL_160:\n      if ( src != v40 )\n      {\nLABEL_161:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_162:\n      v58 = (_QWORD *)v4[1];\n      if ( v82 != v58 )\n        free(v58);\nLABEL_164:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_130;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_412A60",
            "funcStartAddr": "0x412a60",
            "funcEndAddr": "0x412a78",
            "decompiledFuncCode": "int __fastcall sub_412A60(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_61B268 )\n    v1 = (void *)qword_61B268;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_412A78",
            "funcStartAddr": "0x412a78",
            "funcEndAddr": "0x412a98",
            "decompiledFuncCode": "__int64 __fastcall sub_412A78(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_61AE30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 118
}