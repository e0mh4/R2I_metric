{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_ln.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x402210",
            "funcEndAddr": "0x402950",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  char *v3; // r15\n  char v4; // r14\n  const char *v5; // r13\n  char v6; // r12\n  __int64 v7; // rbx\n  int v8; // eax\n  char *v9; // rax\n  char **v10; // rbp\n  int v11; // eax\n  int v12; // r14d\n  __int64 v13; // r15\n  __int64 v14; // rdi\n  __int64 v15; // rax\n  char *v16; // rbx\n  char *v18; // rax\n  const char *v19; // r13\n  __int64 v20; // rax\n  __int64 v21; // rcx\n  _BYTE *v22; // rdi\n  bool v23; // zf\n  int v24; // eax\n  unsigned __int64 v25; // r12\n  __int64 v26; // rax\n  char *v27; // rax\n  int v28; // eax\n  __int64 v29; // rbx\n  char *v30; // rax\n  __int64 v31; // rbx\n  char *v32; // rax\n  char *v33; // rax\n  const char *v34; // rsi\n  __int64 v35; // rbx\n  char *v36; // rax\n  char *v37; // rax\n  char *v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rbx\n  int *v41; // rax\n  char *v42; // rax\n  char *v43; // [rsp+8h] [rbp-E0h]\n  char **v44; // [rsp+10h] [rbp-D8h]\n  _BOOL4 v45; // [rsp+18h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+20h] [rbp-C8h] BYREF\n\n  v3 = 0LL;\n  v4 = 0;\n  v5 = 0LL;\n  v6 = 0;\n  LODWORD(v7) = a1;\n  sub_406260(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40BB40(sub_404960);\n  byte_6113E0 = 0;\n  byte_6113E1 = 0;\n  byte_6113E3 = 0;\n  byte_6113E2 = 0;\n  byte_6113E6 = 0;\n  v43 = 0LL;\n  while ( 1 )\n  {\n    v8 = sub_40A1B0((unsigned int)v7, a2, \"bdfinrst:vFLPS:T\", &off_40CC00, 0LL);\n    if ( v8 == -1 )\n      break;\n    if ( v8 == 98 )\n    {\n      v4 = 1;\n      if ( filename )\n        v3 = filename;\n    }\n    else if ( v8 <= 98 )\n    {\nLABEL_14:\n      if ( v8 == 76 )\n      {\n        byte_6113E4 = 1;\n      }\n      else if ( v8 <= 76 )\n      {\n        if ( v8 == -130 )\n          sub_4032B0(0);\n        if ( v8 != 70 )\n        {\n          if ( v8 == -131 )\n          {\n            sub_408910(\n              (_DWORD)stdout,\n              (unsigned int)\"ln\",\n              (unsigned int)&unk_40BCB5,\n              (_DWORD)off_6112F8,\n              (unsigned int)\"Mike Parker\",\n              (unsigned int)\"David MacKenzie\",\n              0);\n            exit(0);\n          }\nLABEL_22:\n          sub_4032B0(1);\n        }\nLABEL_33:\n        byte_6113E0 = 1;\n      }\n      else\n      {\n        switch ( v8 )\n        {\n          case 'S':\n            v4 = 1;\n            v43 = filename;\n            break;\n          case 'T':\n            v6 = 1;\n            break;\n          case 'P':\n            byte_6113E4 = 0;\n            break;\n          default:\n            goto LABEL_22;\n        }\n      }\n    }\n    else if ( v8 == 110 )\n    {\n      byte_6112F0 = 0;\n    }\n    else if ( v8 <= 110 )\n    {\n      switch ( v8 )\n      {\n        case 'f':\n          byte_6113E2 = 1;\n          byte_6113E3 = 0;\n          break;\n        case 'i':\n          byte_6113E2 = 0;\n          byte_6113E3 = 1;\n          break;\n        case 'd':\n          goto LABEL_33;\n        default:\n          goto LABEL_22;\n      }\n    }\n    else if ( v8 == 115 )\n    {\n      byte_6113E6 = 1;\n    }\n    else if ( v8 <= 115 )\n    {\n      if ( v8 != 114 )\n        goto LABEL_22;\n      byte_6113E5 = 1;\n    }\n    else if ( v8 == 116 )\n    {\n      if ( v5 )\n        goto LABEL_95;\n      if ( __xstat(1, filename, &stat_buf) )\n        goto LABEL_94;\n      v5 = filename;\n      if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n      {\n        v7 = sub_407C30(4LL, filename);\n        v9 = dcgettext(0LL, \"target %s is not a directory\", 5);\n        error(1, 0, v9, v7);\n        goto LABEL_14;\n      }\n    }\n    else\n    {\n      if ( v8 != 118 )\n        goto LABEL_22;\n      byte_6113E1 = 1;\n    }\n  }\n  LODWORD(v7) = v7 - dword_61137C;\n  v10 = &a2[dword_61137C];\n  if ( (int)v7 <= 0 )\n  {\nLABEL_87:\n    v33 = dcgettext(0LL, \"missing file operand\", 5);\n    error(0, 0, v33);\n    goto LABEL_22;\n  }\n  if ( v6 )\n  {\n    if ( v5 )\n    {\n      v37 = dcgettext(0LL, \"cannot combine --target-directory and --no-target-directory\", 5);\n      error(1, 0, v37);\n    }\n    else\n    {\n      if ( (_DWORD)v7 == 2 )\n        goto LABEL_59;\n      if ( (_DWORD)v7 != 1 )\n      {\n        v34 = \"extra operand %s\";\n        v35 = sub_407C30(4LL, v10[2]);\nLABEL_90:\n        v36 = dcgettext(0LL, v34, 5);\n        error(0, 0, v36, v35);\n        goto LABEL_22;\n      }\n    }\n    v34 = \"missing destination file operand after %s\";\n    v35 = sub_407C30(4LL, *v10);\n    goto LABEL_90;\n  }\n  if ( v5 )\n    goto LABEL_46;\n  v5 = \".\";\n  if ( (_DWORD)v7 == 1 )\n    goto LABEL_46;\n  v19 = v10[(int)v7 - 1];\n  v44 = &v10[(int)v7 - 1];\n  v20 = sub_404CA0(v19);\n  v21 = -1LL;\n  v22 = (_BYTE *)v20;\n  do\n  {\n    if ( !v21 )\n      break;\n    v23 = *v22++ == (unsigned __int8)v6;\n    --v21;\n  }\n  while ( !v23 );\n  v45 = 1;\n  if ( -v21 != 2 )\n    v45 = *(_BYTE *)(v20 + -v21 - 2 - 1) == 47;\n  if ( byte_6112F0 )\n    v24 = __xstat(1, v19, &stat_buf);\n  else\n    v24 = __lxstat(1, v19, &stat_buf);\n  if ( !v24 )\n    goto LABEL_79;\n  v25 = (unsigned int)*__errno_location();\n  if ( !(_DWORD)v25 )\n    goto LABEL_79;\n  if ( (unsigned int)v25 > 0x28 || (v26 = 0x11000100004LL, !_bittest64(&v26, v25)) )\n  {\n    v29 = sub_407C30(4LL, v19);\n    v30 = dcgettext(0LL, \"failed to access %s\", 5);\n    error(1, v25, v30, v29);\nLABEL_85:\n    LODWORD(v25) = 0;\n    goto LABEL_86;\n  }\n  if ( v45 )\n  {\nLABEL_86:\n    v31 = sub_407C30(4LL, v19);\n    v32 = dcgettext(0LL, \"target %s is not a directory\", 5);\n    error(1, v25, v32, v31);\n    goto LABEL_87;\n  }\n  while ( (_DWORD)v7 != 2 )\n  {\n    v7 = sub_407C30(4LL, *v44);\n    v27 = dcgettext(0LL, \"target %s is not a directory\", 5);\n    error(1, 0, v27, v7);\nLABEL_79:\n    v28 = stat_buf.st_mode & 0xF000;\n    if ( (unsigned __int8)(v28 == 0x4000) < (unsigned __int8)v45 )\n      goto LABEL_85;\n    if ( v28 == 0x4000 )\n    {\n      LODWORD(v7) = v7 - 1;\n      v5 = v10[(int)v7];\n      goto LABEL_46;\n    }\n  }\nLABEL_59:\n  LODWORD(v7) = 2;\n  v5 = 0LL;\nLABEL_46:\n  v11 = 0;\n  if ( v4 )\n  {\n    v18 = dcgettext(0LL, \"backup type\", 5);\n    v11 = sub_404280(v18, v3);\n  }\n  dword_6113E8 = v11;\n  sub_403CE0(v43);\n  if ( byte_6113E5 && !byte_6113E6 )\n  {\n    v38 = dcgettext(0LL, \"cannot do --relative without --symbolic\", 5);\n    error(1, 0, v38);\nLABEL_94:\n    v39 = sub_407C30(4LL, filename);\n    v40 = dcgettext(0LL, \"failed to access %s\", 5);\n    v41 = __errno_location();\n    error(1, *v41, v40, v39);\nLABEL_95:\n    v42 = dcgettext(0LL, \"multiple target directories specified\", 5);\n    error(1, 0, v42);\n    start();\n  }\n  if ( v5 )\n  {\n    if ( (_DWORD)v7 != 1 )\n    {\n      if ( byte_6113E2 )\n      {\n        if ( !byte_6113E6 && dword_6113E8 != 3 )\n        {\n          qword_6113D8 = sub_4057D0(61LL, 0LL, sub_406190, sub_4061D0, sub_406240);\n          if ( !qword_6113D8 )\n            sub_408CA0();\n        }\n      }\n    }\n    v12 = 1;\n    v13 = (__int64)&v10[(unsigned int)(v7 - 1) + 1];\n    do\n    {\n      v14 = (__int64)*v10++;\n      v15 = sub_404CA0(v14);\n      v16 = (char *)sub_404E40(v5, v15, &stat_buf);\n      sub_404D30(stat_buf.st_dev);\n      v12 &= sub_402A30(*(v10 - 1), v16);\n      free(v16);\n    }\n    while ( v10 != (char **)v13 );\n  }\n  else\n  {\n    LOBYTE(v12) = sub_402A30(*v10, v10[1]);\n  }\n  return (unsigned __int8)v12 ^ 1u;\n}\n"
        },
        {
            "funcName": "sub_40297B",
            "funcStartAddr": "0x40297b",
            "funcEndAddr": "0x40299a",
            "decompiledFuncCode": "void *sub_40297B()\n{\n  return &unk_611388;\n}\n"
        },
        {
            "funcName": "sub_40299A",
            "funcStartAddr": "0x40299a",
            "funcEndAddr": "0x4029d1",
            "decompiledFuncCode": "__int64 sub_40299A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4029D1",
            "funcStartAddr": "0x4029d1",
            "funcEndAddr": "0x402a28",
            "decompiledFuncCode": "void *sub_4029D1()\n{\n  void *result; // rax\n\n  if ( !byte_6113C8 )\n  {\n    while ( qword_6113D0 < (unsigned __int64)(&qword_610E48 - qword_610E40 - 1) )\n      ((void (*)(void))qword_610E40[++qword_6113D0])();\n    result = sub_40297B();\n    byte_6113C8 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402A28",
            "funcStartAddr": "0x402a28",
            "funcEndAddr": "0x402a2d",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_402A28()\n{\n  return sub_40299A();\n}\n"
        },
        {
            "funcName": "sub_402A30",
            "funcStartAddr": "0x402a30",
            "funcEndAddr": "0x4032ac",
            "decompiledFuncCode": "__int64 __fastcall sub_402A30(char *src, char *a2)\n{\n  char *v2; // r12\n  unsigned int v4; // ebx\n  char v5; // r15\n  char v6; // r13\n  int *v8; // rax\n  bool v9; // bl\n  void *v10; // r13\n  char *v11; // r14\n  unsigned __int8 v12; // bl\n  const char *v13; // rax\n  char *v14; // rdx\n  unsigned int v15; // r12d\n  __int64 v16; // rax\n  const char *v17; // r15\n  const char *v18; // rax\n  __int64 v20; // r12\n  char *v21; // rbp\n  int *v22; // rax\n  int *v23; // rax\n  char *v24; // rdx\n  __int64 v25; // rbp\n  char *v26; // rax\n  __int64 v27; // rax\n  const char *v28; // rsi\n  __int64 v29; // rbx\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rbp\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r8\n  __int64 v36; // rcx\n  int v37; // eax\n  char *v38; // rdx\n  char *v39; // rdx\n  __int64 v40; // rbx\n  char *v41; // rax\n  __int64 v42; // rcx\n  __int64 v43; // rax\n  __int64 v44; // r13\n  __int64 v45; // r14\n  char *v46; // rax\n  char *v47; // rdx\n  __int64 v48; // r12\n  int v49; // ebx\n  __int64 v50; // rbp\n  char *v51; // rax\n  int v52; // esi\n  char *v53; // rdx\n  int *v54; // [rsp+8h] [rbp-170h]\n  void *v55; // [rsp+8h] [rbp-170h]\n  int *v56; // [rsp+8h] [rbp-170h]\n  void *v57; // [rsp+10h] [rbp-168h]\n  void *v58; // [rsp+10h] [rbp-168h]\n  void *ptr; // [rsp+18h] [rbp-160h]\n  void *ptra; // [rsp+18h] [rbp-160h]\n  struct stat stat_buf; // [rsp+20h] [rbp-158h] BYREF\n  struct stat v62; // [rsp+B0h] [rbp-C8h] BYREF\n\n  v2 = src;\n  v4 = (unsigned __int8)byte_6113E6;\n  if ( byte_6113E6 )\n    goto LABEL_5;\n  if ( byte_6113E4 )\n  {\n    if ( !__xstat(1, src, &stat_buf) )\n      goto LABEL_4;\nLABEL_40:\n    v20 = sub_407C30(4LL, src);\n    v21 = dcgettext(0LL, \"failed to access %s\", 5);\n    v22 = __errno_location();\n    error(0, *v22, v21, v20);\n    return v4;\n  }\n  if ( __lxstat(1, src, &stat_buf) )\n    goto LABEL_40;\nLABEL_4:\n  if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n  {\nLABEL_5:\n    v5 = 0;\n    goto LABEL_6;\n  }\n  v5 = byte_6113E0;\n  if ( !byte_6113E0 )\n  {\n    v28 = \"%s: hard link not allowed for directory\";\n    v29 = sub_407D00(0LL, 3LL, src);\nLABEL_56:\n    v30 = dcgettext(0LL, v28, 5);\n    v31 = v29;\n    v4 = 0;\n    error(0, 0, v30, v31);\n    return v4;\n  }\nLABEL_6:\n  v6 = byte_6113E2;\n  if ( !byte_6113E2 && !byte_6113E3 && !dword_6113E8 )\n  {\nLABEL_10:\n    v9 = 0;\n    v10 = 0LL;\n    goto LABEL_11;\n  }\n  if ( __lxstat(1, a2, &v62) )\n  {\n    v8 = __errno_location();\n    if ( *v8 != 2 )\n    {\n      v56 = v8;\n      v40 = sub_407C30(4LL, a2);\n      v41 = dcgettext(0LL, \"failed to access %s\", 5);\n      v42 = v40;\n      v4 = 0;\n      error(0, *v56, v41, v42);\n      return v4;\n    }\n    goto LABEL_10;\n  }\n  if ( qword_6113D8 )\n  {\n    if ( (unsigned __int8)sub_404E00(qword_6113D8, a2, &v62) )\n    {\n      v48 = sub_407B50(1LL, 4LL, src);\n      v33 = sub_407B50(0LL, 4LL, a2);\n      v34 = dcgettext(0LL, \"will not overwrite just-created %s with %s\", 5);\n      v35 = v48;\n      goto LABEL_64;\n    }\n    v6 = byte_6113E2;\n  }\n  if ( v6 )\n  {\n    if ( dword_6113E8 )\n    {\n      if ( byte_6113E6 )\n        goto LABEL_32;\n    }\n    else if ( byte_6113E6 && __xstat(1, src, &stat_buf) )\n    {\n      goto LABEL_32;\n    }\n    goto LABEL_59;\n  }\n  if ( !byte_6113E6 && dword_6113E8 )\n  {\nLABEL_59:\n    if ( stat_buf.st_ino != v62.st_ino\n      || stat_buf.st_dev != v62.st_dev\n      || stat_buf.st_nlink != 1 && !(unsigned __int8)sub_4080F0(src, a2) )\n    {\n      goto LABEL_32;\n    }\n    v32 = sub_407B50(1LL, 4LL, a2);\n    v33 = sub_407B50(0LL, 4LL, src);\n    v34 = dcgettext(0LL, \"%s and %s are the same file\", 5);\n    v35 = v32;\nLABEL_64:\n    v36 = v33;\n    v4 = 0;\n    error(0, 0, v34, v36, v35);\n    return v4;\n  }\nLABEL_32:\n  if ( (v62.st_mode & 0xF000) == 0x4000 )\n  {\n    v28 = \"%s: cannot overwrite directory\";\n    v29 = sub_407D00(0LL, 3LL, a2);\n    goto LABEL_56;\n  }\n  v4 = (unsigned __int8)byte_6113E3;\n  if ( byte_6113E3 )\n  {\n    v43 = sub_407C30(4LL, a2);\n    v44 = qword_611410;\n    v45 = v43;\n    v46 = dcgettext(0LL, \"%s: replace %s? \", 5);\n    __fprintf_chk(stderr, 1LL, v46, v44, v45);\n    if ( !(unsigned __int8)sub_408D10() )\n      return v4;\n    byte_6113E2 = 1;\n  }\n  if ( !dword_6113E8 )\n    goto LABEL_10;\n  v10 = (void *)sub_404240(a2);\n  if ( rename(a2, (const char *)v10) )\n  {\n    v49 = *__errno_location();\n    free(v10);\n    if ( v49 != 2 )\n    {\n      v50 = sub_407C30(4LL, a2);\n      v51 = dcgettext(0LL, \"cannot backup %s\", 5);\n      v52 = v49;\n      v4 = 0;\n      error(0, v52, v51, v50);\n      return v4;\n    }\n    goto LABEL_10;\n  }\n  v9 = v10 != 0LL;\nLABEL_11:\n  v11 = 0LL;\n  if ( !byte_6113E5 )\n    goto LABEL_12;\n  ptra = (void *)sub_404BC0(a2);\n  v55 = (void *)sub_4042D0(ptra);\n  v27 = sub_4042D0(src);\n  v58 = (void *)v27;\n  if ( !v55 || !v27 )\n    goto LABEL_71;\n  v11 = (char *)sub_408A50(4096LL, 2LL);\n  if ( !(unsigned __int8)sub_403A10(v58, v55, v11, 4096LL) )\n  {\n    free(v11);\nLABEL_71:\n    free(ptra);\n    free(v55);\n    free(v58);\n    goto LABEL_72;\n  }\n  free(ptra);\n  free(v55);\n  free(v58);\n  if ( v11 )\n  {\n    v2 = v11;\n    goto LABEL_12;\n  }\nLABEL_72:\n  v2 = (char *)sub_408C80(src);\n  v11 = v2;\nLABEL_12:\n  v12 = byte_6113E2 | v9;\n  if ( byte_6113E6 )\n    v4 = (int)sub_403890(v2, 4294967196LL, a2, v12) >= 0;\n  else\n    v4 = (int)sub_403750(4294967196LL, v2, 4294967196LL, a2, (unsigned __int8)(byte_6113E4 != 0) << 10, v12) >= 0;\n  if ( !(_BYTE)v4 )\n  {\n    v57 = (void *)sub_407B50(1LL, 4LL, v2);\n    ptr = (void *)sub_407B50(0LL, 4LL, a2);\n    v23 = __errno_location();\n    v54 = v23;\n    if ( byte_6113E6 )\n    {\n      if ( *v23 != 36 && *v2 )\n      {\n        v53 = dcgettext(0LL, \"failed to create symbolic link %s\", 5);\n        error(0, *v54, v53, ptr, v57);\n      }\n      else\n      {\n        v24 = dcgettext(0LL, \"failed to create symbolic link %s -> %s\", 5);\n        error(0, *v54, v24, ptr, v57);\n      }\n    }\n    else\n    {\n      v37 = *v23;\n      if ( *v54 == 31 )\n      {\n        if ( !v5 )\n        {\n          v47 = dcgettext(0LL, \"failed to create hard link to %.0s%s\", 5);\n          error(0, *v54, v47, ptr, v57);\n          goto LABEL_45;\n        }\n      }\n      else if ( v37 == 122 || v37 == 17 || (v37 & 0xFFFFFFFD) == 28 )\n      {\n        v39 = dcgettext(0LL, \"failed to create hard link %s\", 5);\n        error(0, *v54, v39, ptr, v57);\n        goto LABEL_45;\n      }\n      v38 = dcgettext(0LL, \"failed to create hard link %s => %s\", 5);\n      error(0, *v54, v38, ptr, v57);\n    }\nLABEL_45:\n    if ( v10 && rename((const char *)v10, a2) )\n    {\n      v25 = sub_407C30(4LL, a2);\n      v26 = dcgettext(0LL, \"cannot un-backup %s\", 5);\n      error(0, *v54, v26, v25);\n    }\n    goto LABEL_23;\n  }\n  if ( !byte_6113E6 )\n    sub_404D70(qword_6113D8, a2, &stat_buf);\n  if ( byte_6113E1 )\n  {\n    if ( v10 )\n    {\n      v13 = (const char *)sub_407C30(4LL, v10);\n      __printf_chk(1LL, \"%s ~ \", v13);\n    }\n    v14 = v2;\n    v15 = 61;\n    v16 = sub_407B50(1LL, 4LL, v14);\n    if ( byte_6113E6 )\n      v15 = 45;\n    v17 = (const char *)v16;\n    v18 = (const char *)sub_407B50(0LL, 4LL, a2);\n    __printf_chk(1LL, \"%s %c> %s\\n\", v18, v15, v17);\n  }\nLABEL_23:\n  free(v10);\n  free(v11);\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_4032B0",
            "funcStartAddr": "0x4032b0",
            "funcEndAddr": "0x40369d",
            "decompiledFuncCode": "void __fastcall __noreturn sub_4032B0(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  __int64 v3; // r8\n  char *v4; // rax\n  FILE *v5; // rbp\n  char *v6; // rax\n  FILE *v7; // rbp\n  char *v8; // rax\n  FILE *v9; // rbp\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  FILE *v13; // rbp\n  char *v14; // rax\n  FILE *v15; // rbp\n  char *v16; // rax\n  FILE *v17; // rbp\n  char *v18; // rax\n  FILE *v19; // rbp\n  char *v20; // rax\n  FILE *v21; // rbp\n  char *v22; // rax\n  char *v23; // rax\n  __int64 *v24; // rax\n  char *v25; // rbp\n  char *v26; // rax\n  char *v27; // rax\n  const char *v28; // r12\n  char *v29; // rax\n  char *v30; // rax\n  char *v31; // rax\n  char *v32; // rax\n  char *v33; // rax\n  char *v34; // rax\n  __int64 v35[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_611410;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1, v3);\n    goto LABEL_3;\n  }\n  v4 = dcgettext(\n         0LL,\n         \"Usage: %s [OPTION]... [-T] TARGET LINK_NAME   (1st form)\\n\"\n         \"  or:  %s [OPTION]... TARGET                  (2nd form)\\n\"\n         \"  or:  %s [OPTION]... TARGET... DIRECTORY     (3rd form)\\n\"\n         \"  or:  %s [OPTION]... -t DIRECTORY TARGET...  (4th form)\\n\",\n         5);\n  __printf_chk(1LL, v4, v1, v1, v1, v1);\n  v5 = stdout;\n  v6 = dcgettext(\n         0LL,\n         \"In the 1st form, create a link to TARGET with the name LINK_NAME.\\n\"\n         \"In the 2nd form, create a link to TARGET in the current directory.\\n\"\n         \"In the 3rd and 4th forms, create links to each TARGET in DIRECTORY.\\n\"\n         \"Create hard links by default, symbolic links with --symbolic.\\n\"\n         \"By default, each destination (name of new link) should not already exist.\\n\"\n         \"When creating hard links, each TARGET must exist.  Symbolic links\\n\"\n         \"can hold arbitrary text; if later resolved, a relative link is\\n\"\n         \"interpreted in relation to its parent directory.\\n\",\n         5);\n  fputs_unlocked(v6, v5);\n  v7 = stdout;\n  v8 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v8, v7);\n  v9 = stdout;\n  v10 = dcgettext(\n          0LL,\n          \"      --backup[=CONTROL]      make a backup of each existing destination file\\n\"\n          \"  -b                          like --backup but does not accept an argument\\n\"\n          \"  -d, -F, --directory         allow the superuser to attempt to hard link\\n\"\n          \"                                directories (note: will probably fail due to\\n\"\n          \"                                system restrictions, even for the superuser)\\n\"\n          \"  -f, --force                 remove existing destination files\\n\",\n          5);\n  fputs_unlocked(v10, v9);\n  v11 = stdout;\n  v12 = dcgettext(\n          0LL,\n          \"  -i, --interactive           prompt whether to remove destinations\\n\"\n          \"  -L, --logical               dereference TARGETs that are symbolic links\\n\"\n          \"  -n, --no-dereference        treat LINK_NAME as a normal file if\\n\"\n          \"                                it is a symbolic link to a directory\\n\"\n          \"  -P, --physical              make hard links directly to symbolic links\\n\"\n          \"  -r, --relative              create symbolic links relative to link location\\n\"\n          \"  -s, --symbolic              make symbolic links instead of hard links\\n\",\n          5);\n  fputs_unlocked(v12, v11);\n  v13 = stdout;\n  v14 = dcgettext(\n          0LL,\n          \"  -S, --suffix=SUFFIX         override the usual backup suffix\\n\"\n          \"  -t, --target-directory=DIRECTORY  specify the DIRECTORY in which to create\\n\"\n          \"                                the links\\n\"\n          \"  -T, --no-target-directory   treat LINK_NAME as a normal file always\\n\"\n          \"  -v, --verbose               print name of each linked file\\n\",\n          5);\n  fputs_unlocked(v14, v13);\n  v15 = stdout;\n  v16 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v16, v15);\n  v17 = stdout;\n  v18 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v18, v17);\n  v19 = stdout;\n  v20 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\n\"\n          \"The version control method may be selected via the --backup option or through\\n\"\n          \"the VERSION_CONTROL environment variable.  Here are the values:\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v20, v19);\n  v21 = stdout;\n  v22 = dcgettext(\n          0LL,\n          \"  none, off       never make backups (even if --backup is given)\\n\"\n          \"  numbered, t     make numbered backups\\n\"\n          \"  existing, nil   numbered if numbered backups exist, simple otherwise\\n\"\n          \"  simple, never   always make simple backups\\n\",\n          5);\n  fputs_unlocked(v22, v21);\n  v23 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Using -s ignores -L and -P.  Otherwise, the last option specified controls\\n\"\n          \"behavior when a TARGET is a symbolic link, defaulting to %s.\\n\",\n          5);\n  __printf_chk(1LL, v23, \"-P\");\n  v35[0] = (__int64)\"[\";\n  v24 = v35;\n  v35[1] = (__int64)\"test invocation\";\n  v35[2] = (__int64)\"coreutils\";\n  v35[3] = (__int64)\"Multi-call invocation\";\n  v35[4] = (__int64)\"sha224sum\";\n  v35[5] = (__int64)\"sha2 utilities\";\n  v35[6] = (__int64)\"sha256sum\";\n  v35[7] = (__int64)\"sha2 utilities\";\n  v35[8] = (__int64)\"sha384sum\";\n  v35[9] = (__int64)\"sha2 utilities\";\n  v35[10] = (__int64)\"sha512sum\";\n  v35[11] = (__int64)\"sha2 utilities\";\n  v35[12] = 0LL;\n  v35[13] = 0LL;\n  do\n    v24 += 2;\n  while ( *v24 && strcmp(\"ln\", (const char *)*v24) );\n  v25 = (char *)v24[1];\n  if ( v25 )\n  {\n    v26 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v26, &unk_40BCB5, \"https://www.gnu.org/software/coreutils/\");\n    v27 = setlocale(5, 0LL);\n    if ( !v27 || !strncmp(v27, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v31 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v31, &unk_40BCB5, \"https://www.gnu.org/software/coreutils/\");\n    v32 = setlocale(5, 0LL);\n    if ( !v32 || !strncmp(v32, \"en_\", 3uLL) )\n    {\n      v25 = \"ln\";\n      v33 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v28 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v33, \"https://www.gnu.org/software/coreutils/\", \"ln\");\nLABEL_12:\n      v30 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v30, v25, v28);\nLABEL_3:\n      exit(status);\n    }\n    v25 = \"ln\";\n  }\n  v34 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v34, \"ln\");\nLABEL_10:\n  v28 = \"Multi-call invocation\" + 10;\n  v29 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v29, \"https://www.gnu.org/software/coreutils/\", \"ln\");\n  if ( v25 != \"ln\" )\n    v28 = \"\";\n  goto LABEL_12;\n}\n"
        },
        {
            "funcName": "sub_4036A0",
            "funcStartAddr": "0x4036a0",
            "funcEndAddr": "0x4036b8",
            "decompiledFuncCode": "int __fastcall sub_4036A0(char *to, __int64 a2)\n{\n  return linkat(*(_DWORD *)a2, *(const char **)(a2 + 8), *(_DWORD *)(a2 + 16), to, *(_DWORD *)(a2 + 20));\n}\n"
        },
        {
            "funcName": "sub_4036C0",
            "funcStartAddr": "0x4036c0",
            "funcEndAddr": "0x403724",
            "decompiledFuncCode": "void *__fastcall sub_4036C0(void *src, void *dest)\n{\n  __int64 v3; // rax\n  size_t v4; // rbp\n\n  v3 = sub_404CA0(src) - (_QWORD)src;\n  v4 = v3;\n  if ( (unsigned __int64)(v3 + 9) > 0x100 )\n  {\n    dest = malloc(v3 + 9);\n    if ( !dest )\n      return 0LL;\n  }\n  strcpy((char *)mempcpy(dest, src, v4), \"CuXXXXXX\");\n  return dest;\n}\n"
        },
        {
            "funcName": "sub_403730",
            "funcStartAddr": "0x403730",
            "funcEndAddr": "0x403741",
            "decompiledFuncCode": "int __fastcall sub_403730(char *to, __int64 a2)\n{\n  return symlinkat(*(const char **)a2, *(_DWORD *)(a2 + 8), to);\n}\n"
        },
        {
            "funcName": "sub_403750",
            "funcStartAddr": "0x403750",
            "funcEndAddr": "0x403885",
            "decompiledFuncCode": "__int64 __fastcall sub_403750(int a1, const char *a2, int a3, char *a4, int a5, char a6)\n{\n  int v8; // eax\n  unsigned int v9; // ebx\n  int *v10; // rax\n  char *v12; // rax\n  char *v13; // rbx\n  int v14; // eax\n  int *v15; // r9\n  int v16; // r12d\n  int *v18; // [rsp+8h] [rbp-160h]\n  int *v19; // [rsp+8h] [rbp-160h]\n  char dest[312]; // [rsp+30h] [rbp-138h] BYREF\n\n  v8 = linkat(a1, a2, a3, a4, a5);\n  v9 = v8;\n  if ( a6 == 1 )\n  {\n    if ( v8 )\n    {\n      v10 = __errno_location();\n      if ( *v10 == 17 )\n      {\n        v18 = v10;\n        v12 = (char *)sub_4036C0(a4, dest);\n        v13 = v12;\n        if ( v12 )\n        {\n          v14 = sub_4082D0(v12);\n          v15 = v18;\n          if ( v14 )\n          {\n            v16 = *v18;\n          }\n          else\n          {\n            v16 = renameat(a3, v13, a3, a4);\n            if ( v16 )\n              v16 = *v18;\n            unlinkat(a3, v13, 0);\n            v15 = v18;\n          }\n          if ( v13 != dest )\n          {\n            v19 = v15;\n            free(v13);\n            v15 = v19;\n          }\n          v9 = 1;\n          if ( v16 )\n          {\n            *v15 = v16;\n            return (unsigned int)-1;\n          }\n        }\n        else\n        {\n          return (unsigned int)-1;\n        }\n      }\n    }\n  }\n  return v9;\n}\n"
        },
        {
            "funcName": "sub_403890",
            "funcStartAddr": "0x403890",
            "funcEndAddr": "0x403990",
            "decompiledFuncCode": "__int64 __fastcall sub_403890(const char *a1, int a2, char *a3, char a4)\n{\n  int v6; // eax\n  unsigned int v7; // ebx\n  int *v8; // r14\n  char *v10; // rax\n  char *v11; // rbx\n  int v12; // r12d\n  char dest[312]; // [rsp+10h] [rbp-138h] BYREF\n\n  v6 = symlinkat(a1, a2, a3);\n  v7 = v6;\n  if ( a4 == 1 )\n  {\n    if ( v6 )\n    {\n      v8 = __errno_location();\n      if ( *v8 == 17 )\n      {\n        v10 = (char *)sub_4036C0(a3, dest);\n        v11 = v10;\n        if ( !v10 )\n          return (unsigned int)-1;\n        if ( (unsigned int)sub_4082D0(v10) )\n        {\n          v12 = *v8;\n        }\n        else\n        {\n          if ( !renameat(a2, v11, a2, a3) )\n          {\n            if ( v11 != dest )\n              free(v11);\n            return 1;\n          }\n          v12 = *v8;\n          unlinkat(a2, v11, 0);\n        }\n        if ( v11 != dest )\n          free(v11);\n        if ( v12 )\n        {\n          *v8 = v12;\n          return (unsigned int)-1;\n        }\n        return 1;\n      }\n    }\n  }\n  return v7;\n}\n"
        },
        {
            "funcName": "sub_403990",
            "funcStartAddr": "0x403990",
            "funcEndAddr": "0x403a07",
            "decompiledFuncCode": "__int64 __fastcall sub_403990(const char *src, void **a2, size_t *a3)\n{\n  void *v3; // r13\n  size_t v5; // rbx\n  __int64 result; // rax\n\n  v3 = *a2;\n  if ( *a2 )\n  {\n    v5 = strlen(src);\n    result = 1LL;\n    if ( *a3 > v5 )\n    {\n      memcpy(v3, src, v5 + 1);\n      *a2 = (char *)*a2 + v5;\n      result = 0LL;\n      *a3 -= v5;\n    }\n  }\n  else\n  {\n    fputs_unlocked(src, stdout);\n    return 0LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403A10",
            "funcStartAddr": "0x403a10",
            "funcEndAddr": "0x403c07",
            "decompiledFuncCode": "char __fastcall sub_403A10(_BYTE *a1, char *a2, void *a3, size_t a4)\n{\n  char v4; // r8\n  char v5; // r9\n  char result; // al\n  char v7; // r10\n  __int64 v8; // rcx\n  int v9; // edx\n  char v10; // r11\n  char *v11; // rbp\n  char v12; // al\n  const char *v13; // rbx\n  int v14; // r12d\n  char i; // al\n  int v16; // ebp\n  char *v17; // rax\n  size_t v18; // [rsp+0h] [rbp-28h] BYREF\n  void *v19[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  v4 = a2[1];\n  v5 = a1[1];\n  v18 = a4;\n  v19[0] = a3;\n  result = 0;\n  if ( (v4 == 47) == (v5 == 47) )\n  {\n    v7 = *a2;\n    if ( *a2 )\n    {\n      result = *a1 == 0 || v7 != *a1;\n      if ( result )\n      {\n        return 0;\n      }\n      else\n      {\n        v8 = 2LL;\n        v9 = 0;\n        while ( 1 )\n        {\n          if ( v7 == 47 )\n            v9 = v8 - 1;\n          if ( !v4 )\n            break;\n          if ( v4 != v5 || !v5 )\n          {\n            if ( v4 == 47 && !v5 )\n              goto LABEL_33;\n            goto LABEL_13;\n          }\n          v10 = a2[v8];\n          v5 = a1[v8];\n          v7 = v4;\n          ++v8;\n          v4 = v10;\n        }\n        if ( v5 == 47 || !v5 )\n        {\nLABEL_33:\n          v9 = v8 - 1;\n          goto LABEL_14;\n        }\nLABEL_13:\n        if ( !v9 )\n          return result;\nLABEL_14:\n        v11 = &a2[v9];\n        v12 = *v11;\n        if ( *v11 == 47 )\n          v12 = *++v11;\n        v13 = &a1[v9 + (a1[v9] == 47)];\n        if ( v12 )\n        {\n          v14 = sub_403990(\"..\", v19, &v18);\n          for ( i = *v11; *v11; i = *v11 )\n          {\n            if ( i == 47 )\n              v14 |= sub_403990(\"/..\", v19, &v18);\n            ++v11;\n          }\n          if ( *v13 )\n          {\n            v16 = sub_403990(\"/\", v19, &v18);\n            v14 |= sub_403990(v13, v19, &v18) | v16;\n          }\n        }\n        else\n        {\n          if ( !*v13 )\n            v13 = \".\";\n          LOBYTE(v14) = sub_403990(v13, v19, &v18);\n        }\n        if ( (_BYTE)v14 )\n        {\n          v17 = dcgettext(0LL, \"generating relative path\", 5);\n          error(0, 36, \"%s\", v17);\n        }\n        return v14 ^ 1;\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403C10",
            "funcStartAddr": "0x403c10",
            "funcEndAddr": "0x403cde",
            "decompiledFuncCode": "char *__fastcall sub_403C10(char *path, __int64 a2)\n{\n  char *v3; // rbp\n  char *result; // rax\n  __int16 v5; // r14\n  char *v6; // r12\n  int *v7; // rax\n  int *v8; // r15\n  unsigned __int64 v9; // rdx\n  char *v10; // rsi\n\n  v3 = (char *)sub_404CA0(path);\n  result = (char *)sub_404D00(v3);\n  if ( (unsigned __int64)result > 0xE )\n  {\n    v5 = *(_WORD *)v3;\n    v6 = result;\n    *(_WORD *)v3 = 46;\n    v7 = __errno_location();\n    *v7 = 0;\n    v8 = v7;\n    result = (char *)pathconf(path, 3);\n    if ( (__int64)result >= 0 || (v9 = 255LL, !*v8) )\n      v9 = (unsigned __int64)result;\n    *(_WORD *)v3 = v5;\n    if ( (unsigned __int64)v6 > v9 )\n    {\n      v10 = &path[a2];\n      result = (char *)(&path[a2] - v3);\n      if ( (unsigned __int64)result >= v9 )\n        v10 = &v3[v9 - 1];\n      else\n        v9 = (unsigned __int64)(result + 1);\n      *v10 = 126;\n      v3[v9] = 0;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403CE0",
            "funcStartAddr": "0x403ce0",
            "funcEndAddr": "0x403d34",
            "decompiledFuncCode": "void __fastcall sub_403CE0(char *a1)\n{\n  char *v1; // rbx\n\n  v1 = a1;\n  if ( (a1 || (v1 = getenv(\"SIMPLE_BACKUP_SUFFIX\")) != 0LL) && *v1 && (char *)sub_404CA0(v1) == v1 )\n    src = v1;\n  else\n    src = \"~\";\n}\n"
        },
        {
            "funcName": "sub_403D40",
            "funcStartAddr": "0x403d40",
            "funcEndAddr": "0x404201",
            "decompiledFuncCode": "char *__fastcall sub_403D40(_BYTE *a1, int a2, char a3)\n{\n  const char *v3; // r14\n  size_t v4; // rax\n  signed __int64 v5; // r14\n  const char *v6; // rdi\n  size_t v7; // rax\n  bool v8; // cf\n  __int64 v9; // rbx\n  __int64 v10; // rsi\n  __int64 v11; // rax\n  char *v12; // r15\n  DIR *v13; // r12\n  char *v14; // rbx\n  __int64 v15; // r13\n  int v16; // ebp\n  struct dirent *v17; // rax\n  char *d_name; // rbx\n  char *v19; // rbx\n  unsigned __int64 v20; // rcx\n  unsigned __int8 v21; // r8\n  int i; // eax\n  int v23; // eax\n  __int64 v24; // rdx\n  __int64 v25; // rax\n  char *v26; // rax\n  char *v27; // r8\n  char *v28; // rax\n  char *v29; // rax\n  char v30; // dl\n  char *v31; // rax\n  int v32; // eax\n  char *v33; // rcx\n  int v34; // edx\n  int *v35; // rax\n  int v36; // ebp\n  int *v37; // rbx\n  void *v38; // rdi\n  __int16 v40; // ax\n  void *v41; // rdi\n  _BOOL4 v42; // ebp\n  __int64 v43; // [rsp+8h] [rbp-90h]\n  unsigned __int8 v45; // [rsp+18h] [rbp-80h]\n  unsigned __int64 v46; // [rsp+18h] [rbp-80h]\n  unsigned __int64 v47; // [rsp+18h] [rbp-80h]\n  __int16 v48; // [rsp+18h] [rbp-80h]\n  size_t v49; // [rsp+20h] [rbp-78h]\n  unsigned __int64 size; // [rsp+28h] [rbp-70h]\n  unsigned __int64 v53; // [rsp+48h] [rbp-50h]\n  unsigned __int64 v54; // [rsp+50h] [rbp-48h]\n  __int64 v55; // [rsp+50h] [rbp-48h]\n  char *v56; // [rsp+50h] [rbp-48h]\n  size_t v57; // [rsp+58h] [rbp-40h]\n\n  v3 = (const char *)sub_404CA0(a1);\n  v4 = strlen(v3);\n  v5 = v3 - a1;\n  v6 = src;\n  v43 = v5 + v4;\n  if ( !src )\n  {\n    sub_403CE0(src);\n    v6 = src;\n  }\n  v7 = strlen(v6) + 1;\n  v8 = v7 < 9;\n  v9 = v43 + 1;\n  v57 = v7;\n  v10 = v7;\n  v11 = 9LL;\n  if ( !v8 )\n    v11 = v10;\n  v53 = v9 + v11;\n  v12 = (char *)malloc(v9 + v11);\n  if ( v12 )\n  {\n    v13 = 0LL;\n    while ( 1 )\n    {\n      memcpy(v12, a1, v43 + 1);\n      if ( a2 == 1 )\n      {\n        memcpy(&v12[v43], src, v57);\n        goto LABEL_33;\n      }\n      v14 = &v12[v5];\n      v15 = sub_404D00(&v12[v5]);\n      if ( v13 )\n        break;\n      v40 = *(_WORD *)v14;\n      *(_WORD *)v14 = 46;\n      v48 = v40;\n      v13 = (DIR *)sub_404B20(v12);\n      if ( v13 )\n      {\n        *(_WORD *)v14 = v48;\n        strcpy(&v14[v15], \".~1~\");\nLABEL_10:\n        v16 = 2;\n        v49 = 1LL;\n        size = v53;\n        while ( 1 )\n        {\n          v17 = readdir(v13);\n          if ( !v17 )\n            goto LABEL_30;\n          while ( 1 )\n          {\n            d_name = v17->d_name;\n            if ( strlen(v17->d_name) < v15 + 4 )\n              break;\n            if ( memcmp(&v12[v5], d_name, v15 + 2) )\n              break;\n            v19 = &d_name[v15 + 2];\n            if ( (unsigned __int8)(*v19 - 49) > 8u )\n              break;\n            v20 = 1LL;\n            v21 = *v19 == 57;\n            for ( i = v19[1]; (unsigned int)(i - 48) <= 9; i = v19[v20] )\n            {\n              ++v20;\n              v21 &= (_BYTE)i == 57;\n            }\n            if ( (_BYTE)i != 126 )\n              break;\n            if ( v19[v20 + 1] )\n              break;\n            if ( v49 >= v20 )\n            {\n              v54 = v20;\n              v45 = v21;\n              if ( v49 != v20 )\n                break;\n              v23 = memcmp(&v12[v43 + 2], v19, v49);\n              v21 = v45;\n              v20 = v54;\n              if ( v23 > 0 )\n                break;\n            }\n            v24 = v21;\n            v16 = v21;\n            v49 = v21 + v20;\n            v25 = v43 + v49 + 4;\n            if ( v25 <= size )\n            {\n              v27 = v12;\n            }\n            else\n            {\n              if ( (v25 & 0x4000000000000000LL) != 0 || v25 < 0 )\n                size = v43 + v49 + 4;\n              else\n                size = 2 * v25;\n              v55 = v21;\n              v46 = v20;\n              v26 = (char *)realloc(v12, size);\n              v20 = v46;\n              v24 = v55;\n              v27 = v26;\n              if ( !v26 )\n                goto LABEL_49;\n            }\n            v56 = v27;\n            v47 = v20;\n            v28 = &v27[v43];\n            *(_WORD *)v28 = 32302;\n            v28[2] = 48;\n            v29 = (char *)memcpy(&v27[v43 + 2 + v24], v19, v20 + 2);\n            v30 = v29[v47 - 1];\n            v31 = &v29[v47 - 1];\n            if ( v30 == 57 )\n            {\n              do\n              {\n                *v31-- = 48;\n                v30 = *v31;\n              }\n              while ( *v31 == 57 );\n            }\n            v12 = v56;\n            *v31 = v30 + 1;\n            v17 = readdir(v13);\n            if ( !v17 )\n              goto LABEL_30;\n          }\n        }\n      }\n      v42 = *__errno_location() == 12;\n      *(_WORD *)v14 = v48;\n      v16 = v42 + 2;\n      strcpy(&v14[v15], \".~1~\");\nLABEL_30:\n      switch ( v16 )\n      {\n        case 2:\n          if ( a2 == 2 )\n          {\n            memcpy(&v12[v43], src, v57);\n            a2 = 1;\n          }\nLABEL_46:\n          sub_403C10(v12, v43);\n          break;\n        case 3:\nLABEL_49:\n          v41 = v12;\n          v12 = 0LL;\n          free(v41);\n          *__errno_location() = 12;\n          return v12;\n        case 1:\n          goto LABEL_46;\n      }\nLABEL_33:\n      if ( !a3 )\n        goto LABEL_53;\n      if ( !v13 || (v32 = dirfd(v13), v33 = &v12[v5], v34 = v32, v32 < 0) )\n      {\n        v33 = v12;\n        v34 = -100;\n        v5 = 0LL;\n      }\n      if ( !(unsigned int)sub_407EA0(-100, a1, v34, v33) )\n      {\nLABEL_53:\n        if ( v13 )\n          closedir(v13);\n        return v12;\n      }\n      v35 = __errno_location();\n      v36 = *v35;\n      if ( *v35 != 17 )\n      {\n        v37 = v35;\n        if ( v13 )\n          closedir(v13);\n        v38 = v12;\n        v12 = 0LL;\n        free(v38);\n        *v37 = v36;\n        return v12;\n      }\n    }\n    rewinddir(v13);\n    goto LABEL_10;\n  }\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_404210",
            "funcStartAddr": "0x404210",
            "funcEndAddr": "0x40423c",
            "decompiledFuncCode": "__int64 __fastcall sub_404210(__int64 a1, __int64 a2)\n{\n  return (unsigned int)dword_40CEA0[sub_40A670(a1, a2, off_40CEC0, dword_40CEA0, 4LL, off_611380)];\n}\n"
        },
        {
            "funcName": "sub_404240",
            "funcStartAddr": "0x404240",
            "funcEndAddr": "0x40425a",
            "decompiledFuncCode": "char *__fastcall sub_404240(_BYTE *a1, int a2)\n{\n  char *result; // rax\n\n  result = sub_403D40(a1, a2, 0);\n  if ( !result )\n    sub_408CA0();\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404280",
            "funcStartAddr": "0x404280",
            "funcEndAddr": "0x4042c1",
            "decompiledFuncCode": "__int64 __fastcall sub_404280(void *a1, char *a2)\n{\n  char *v2; // rax\n\n  if ( !a2 || !*a2 )\n  {\n    v2 = getenv(\"VERSION_CONTROL\");\n    if ( !v2 || !*v2 )\n      return 2LL;\n    a2 = v2;\n    a1 = &unk_40CE42;\n  }\n  return sub_404210((__int64)a1, (__int64)a2);\n}\n"
        },
        {
            "funcName": "sub_4042D0",
            "funcStartAddr": "0x4042d0",
            "funcEndAddr": "0x404943",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4042D0(_BYTE *src, __int64 a2)\n{\n  _BYTE *v2; // r15\n  const char *v3; // rax\n  _BYTE *v4; // r12\n  size_t v5; // rax\n  size_t v6; // rbx\n  _BYTE *v7; // rbx\n  _BYTE *v8; // rbp\n  char v9; // al\n  char v10; // dl\n  _BYTE *i; // r13\n  _BYTE *v12; // r14\n  signed __int64 v13; // r8\n  __int64 v14; // rbp\n  __int64 v15; // rbx\n  __int64 v16; // rax\n  __int64 v17; // rbp\n  __int64 v18; // rax\n  bool v19; // al\n  int *v20; // rdx\n  int v21; // ecx\n  size_t v22; // rax\n  int v23; // eax\n  _BYTE *v24; // rax\n  __off_t st_size; // rsi\n  const char *v27; // rax\n  char *v28; // r15\n  const char *v29; // rdi\n  size_t v30; // r13\n  size_t v31; // rax\n  size_t v32; // rdx\n  unsigned __int64 v33; // r8\n  int *v34; // rax\n  int v35; // ecx\n  int *v36; // rdx\n  int *v37; // rdx\n  int v38; // ecx\n  _BYTE *v39; // rdx\n  int *v40; // rax\n  __int64 v41; // rax\n  __int64 v42; // rax\n  __int64 v43; // rax\n  bool v44; // zf\n  signed __int64 v45; // [rsp+8h] [rbp-100h]\n  int *v46; // [rsp+8h] [rbp-100h]\n  int *v47; // [rsp+8h] [rbp-100h]\n  int *v48; // [rsp+8h] [rbp-100h]\n  int *v49; // [rsp+8h] [rbp-100h]\n  size_t v50; // [rsp+8h] [rbp-100h]\n  __int64 v51; // [rsp+8h] [rbp-100h]\n  int v52; // [rsp+14h] [rbp-F4h]\n  int v53; // [rsp+14h] [rbp-F4h]\n  int v54; // [rsp+14h] [rbp-F4h]\n  int v55; // [rsp+14h] [rbp-F4h]\n  void *v56; // [rsp+18h] [rbp-F0h]\n  _BYTE *v57; // [rsp+20h] [rbp-E8h]\n  size_t v58; // [rsp+20h] [rbp-E8h]\n  char *ptr; // [rsp+28h] [rbp-E0h]\n  unsigned __int64 v60; // [rsp+30h] [rbp-D8h]\n  int v61; // [rsp+38h] [rbp-D0h]\n  int v62; // [rsp+3Ch] [rbp-CCh]\n  struct stat stat_buf; // [rsp+40h] [rbp-C8h] BYREF\n\n  v52 = a2 & 3;\n  if ( ((v52 - 1) & (unsigned __int8)v52) != 0 || (v2 = src) == 0LL )\n  {\n    v4 = 0LL;\n    *__errno_location() = 22;\n    return v4;\n  }\n  if ( !*src )\n  {\n    v4 = 0LL;\n    *__errno_location() = 2;\n    return v4;\n  }\n  if ( *src == 47 )\n  {\n    v4 = (_BYTE *)sub_408A50(4096LL, a2);\n    v8 = v4 + 4096;\n    v7 = v4 + 1;\n    *v4 = 47;\n  }\n  else\n  {\n    v3 = (const char *)sub_408CE0();\n    v4 = v3;\n    if ( !v3 )\n      return v4;\n    v5 = strlen(v3);\n    v6 = v5;\n    if ( v5 <= 0xFFF )\n    {\n      v4 = (_BYTE *)sub_408AB0(v4, 4096LL);\n      v7 = &v4[v6];\n      v8 = v4 + 4096;\n    }\n    else\n    {\n      v7 = &v4[v5];\n      v8 = &v4[v5];\n    }\n  }\n  v57 = src;\n  v9 = *src;\n  v61 = a2 & 4;\n  v56 = 0LL;\n  v60 = 0LL;\n  ptr = 0LL;\n  while ( v9 )\n  {\n    v10 = v9;\n    if ( v9 == 47 )\n    {\n      do\n        v10 = *++v2;\n      while ( *v2 == 47 );\n      if ( !v10 )\n        break;\n    }\n    for ( i = v2; ; ++i )\n    {\n      v9 = i[1];\n      v12 = i + 1;\n      if ( !v9 || v9 == 47 )\n        break;\n    }\n    if ( v12 == v2 )\n      break;\n    v13 = v12 - v2;\n    if ( v12 - v2 == 1 )\n    {\n      if ( v10 == 46 )\n        goto LABEL_46;\n      goto LABEL_21;\n    }\n    if ( v10 == 46 && v13 == 2 && v2[1] == 46 )\n    {\n      v2 = i + 1;\n      if ( v7 > v4 + 1 )\n      {\n        v39 = v7 - 1;\n        if ( v4 >= v7 - 1 || *(v7 - 2) == 47 )\n        {\n          --v7;\n        }\n        else\n        {\n          v7 -= 2;\n          if ( v4 != v39 - 1 )\n          {\n            do\n            {\n              if ( *(v7 - 1) == 47 )\n                break;\n              --v7;\n            }\n            while ( v4 != v7 );\n          }\nLABEL_46:\n          v2 = i + 1;\n        }\n      }\n    }\n    else\n    {\nLABEL_21:\n      if ( *(v7 - 1) != 47 )\n        *v7++ = 47;\n      if ( v8 <= &v7[v13] )\n      {\n        v14 = v8 - v4;\n        v15 = v7 - v4;\n        v16 = v13 + v14 + 1;\n        v17 = v14 + 4096;\n        if ( v13 >= 4096 )\n          v17 = v16;\n        v18 = sub_408AB0(v4, v17);\n        v13 = v12 - v2;\n        v4 = (_BYTE *)v18;\n        v8 = (_BYTE *)(v18 + v17);\n        v7 = (_BYTE *)(v18 + v15);\n      }\n      v45 = v13;\n      memcpy(v7, v2, v13);\n      v7 += v45;\n      *v7 = 0;\n      if ( v52 == 2 && v61 )\n      {\nLABEL_29:\n        stat_buf.st_mode = 0;\nLABEL_30:\n        if ( *v12 && v52 != 2 )\n        {\n          v40 = __errno_location();\n          v21 = 20;\n          v20 = v40;\nLABEL_79:\n          v55 = v21;\n          v49 = v20;\n          free(ptr);\n          free(v4);\n          v37 = v49;\n          v38 = v55;\n          if ( v56 )\n            goto LABEL_68;\n          goto LABEL_69;\n        }\nLABEL_32:\n        v9 = *v12;\n        v2 = v12;\n      }\n      else\n      {\n        if ( v61 )\n          v19 = __xstat(1, v4, &stat_buf) != 0;\n        else\n          v19 = __lxstat(1, v4, &stat_buf) != 0;\n        if ( v19 )\n        {\n          v20 = __errno_location();\n          v21 = *v20;\n          if ( !v52 )\n            goto LABEL_79;\n          if ( v52 != 1 )\n            goto LABEL_29;\n          v62 = *v20;\n          v46 = v20;\n          v22 = strspn(i + 1, \"/\");\n          v20 = v46;\n          v21 = v62;\n          if ( v12[v22] || v62 != 2 )\n            goto LABEL_79;\n        }\n        else\n        {\n          v23 = stat_buf.st_mode & 0xF000;\n          if ( v23 != 40960 )\n          {\n            if ( v23 == 0x4000 )\n              goto LABEL_32;\n            goto LABEL_30;\n          }\n          if ( !v56 )\n          {\n            v56 = (void *)sub_4057D0(7LL, 0LL, sub_406190, sub_406200, sub_406240);\n            if ( !v56 )\n              sub_408CA0();\n          }\n          if ( (unsigned __int8)sub_404E00(v56, v57, &stat_buf) )\n          {\n            if ( v52 != 2 )\n            {\n              v34 = __errno_location();\n              v35 = 40;\n              v36 = v34;\nLABEL_67:\n              v53 = v35;\n              v47 = v36;\n              free(ptr);\n              free(v4);\n              v37 = v47;\n              v38 = v53;\nLABEL_68:\n              v54 = v38;\n              v48 = v37;\n              sub_405A10(v56);\n              v38 = v54;\n              v37 = v48;\nLABEL_69:\n              *v37 = v38;\n              return 0LL;\n            }\n          }\n          else\n          {\n            sub_404D70(v56, v57, &stat_buf);\n            st_size = stat_buf.st_size;\n            v27 = (const char *)sub_40A2B0(v4);\n            v28 = (char *)v27;\n            if ( v27 )\n            {\n              v29 = i + 1;\n              v30 = strlen(v27);\n              v31 = strlen(v29);\n              v32 = v31;\n              v33 = v30 + v31 + 1;\n              if ( v60 )\n              {\n                if ( v33 > v60 )\n                {\n                  v51 = v30 + v31 + 1;\n                  v58 = v31;\n                  v43 = sub_408AB0(ptr, v51);\n                  v32 = v58;\n                  ptr = (char *)v43;\n                  v60 = v51;\n                }\n              }\n              else\n              {\n                v50 = v31;\n                v41 = 4096LL;\n                if ( v33 >= 0x1000 )\n                  v41 = v33;\n                v60 = v41;\n                v42 = sub_408A50(v41, st_size);\n                v32 = v50;\n                ptr = (char *)v42;\n              }\n              memmove(&ptr[v30], v12, v32 + 1);\n              v12 = memcpy(ptr, v28, v30);\n              v57 = v12;\n              if ( *v28 == 47 )\n              {\n                *v4 = 47;\n                v7 = v4 + 1;\n              }\n              else if ( v7 > v4 + 1 )\n              {\n                if ( v4 >= v7 - 1 )\n                {\n                  --v7;\n                }\n                else\n                {\n                  v44 = *(v7 - 2) == 47;\n                  --v7;\n                  if ( !v44 )\n                  {\n                    do\n                      --v7;\n                    while ( v4 != v7 && *(v7 - 1) != 47 );\n                  }\n                }\n              }\n              free(v28);\n              goto LABEL_32;\n            }\n            v36 = __errno_location();\n            v35 = *v36;\n            if ( v52 != 2 || v35 == 12 )\n              goto LABEL_67;\n          }\n        }\n        v9 = i[1];\n        v2 = i + 1;\n      }\n    }\n  }\n  if ( v7 > v4 + 1 && *(v7 - 1) == 47 )\n    v24 = v7--;\n  else\n    v24 = v7 + 1;\n  *v7 = 0;\n  if ( v8 != v24 )\n    v4 = (_BYTE *)sub_408AB0(v4, v7 - v4 + 1);\n  free(ptr);\n  if ( v56 )\n    sub_405A10(v56);\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_404960",
            "funcStartAddr": "0x404960",
            "funcEndAddr": "0x404a5d",
            "decompiledFuncCode": "__int64 sub_404960()\n{\n  FILE *v0; // rbx\n  int v2; // eax\n  FILE *v3; // rdi\n  char *v4; // rax\n  __int64 v5; // rbx\n  const char *v6; // r12\n  int *v7; // rax\n  int *v8; // rbp\n  const char *v9; // rax\n  int v10; // eax\n\n  v0 = stdin;\n  if ( sub_408F00(stdin) )\n  {\n    v10 = sub_408F30(v0, 0LL, 1LL);\n    v3 = stdin;\n    if ( v10 || (v2 = sub_408EC0(stdin), v3 = stdin, !v2) )\n    {\n      if ( !(unsigned int)sub_40A730(v3) )\n        return sub_404A80();\n    }\n    else\n    {\n      sub_40A730(stdin);\n    }\nLABEL_6:\n    v4 = dcgettext(0LL, \"error closing file\", 5);\n    v5 = qword_6113F8;\n    v6 = v4;\n    v7 = __errno_location();\n    v8 = v7;\n    if ( v5 )\n    {\n      v9 = (const char *)sub_407CD0(v5);\n      error(0, *v8, \"%s: %s\", v9, v6);\n    }\n    else\n    {\n      error(0, *v7, \"%s\", v6);\n    }\n    sub_404A80();\n    _exit(status);\n  }\n  if ( (unsigned int)sub_40A730(v0) )\n    goto LABEL_6;\n  return sub_404A80();\n}\n"
        },
        {
            "funcName": "sub_404A80",
            "funcStartAddr": "0x404a80",
            "funcEndAddr": "0x404b1e",
            "decompiledFuncCode": "__int64 sub_404A80()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_40A730(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_611400 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_611408 )\n      {\n        v5 = (const char *)sub_407CD0(qword_611408);\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_40A730(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404B20",
            "funcStartAddr": "0x404b20",
            "funcEndAddr": "0x404bb6",
            "decompiledFuncCode": "DIR *__fastcall sub_404B20(const char *a1)\n{\n  DIR *v1; // rax\n  DIR *v2; // rbx\n  unsigned int v3; // eax\n  int v4; // ecx\n  int v5; // r8d\n  int v6; // r9d\n  int v8; // r12d\n  int *v9; // rax\n  int *v10; // rbp\n  int v11; // r14d\n  DIR *v12; // r13\n  DIR *v13; // rax\n\n  v1 = opendir(a1);\n  v2 = v1;\n  if ( !v1 )\n    return v2;\n  v3 = dirfd(v1);\n  if ( v3 > 2 )\n    return v2;\n  v8 = sub_408D80(v3, 1030, 3, v4, v5, v6);\n  v9 = __errno_location();\n  v10 = v9;\n  if ( v8 >= 0 )\n  {\n    v13 = fdopendir(v8);\n    v11 = *v10;\n    v12 = v13;\n    if ( !v13 )\n      close(v8);\n  }\n  else\n  {\n    v11 = *v9;\n    v12 = 0LL;\n  }\n  closedir(v2);\n  *v10 = v11;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_404BC0",
            "funcStartAddr": "0x404bc0",
            "funcEndAddr": "0x404bd8",
            "decompiledFuncCode": "__int64 __fastcall sub_404BC0(void *a1)\n{\n  __int64 result; // rax\n\n  result = sub_404C40(a1);\n  if ( !result )\n    sub_408CA0();\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404BE0",
            "funcStartAddr": "0x404be0",
            "funcEndAddr": "0x404c3d",
            "decompiledFuncCode": "__int64 __fastcall sub_404BE0(_BYTE *a1)\n{\n  unsigned __int64 v1; // rbp\n  __int64 v2; // rax\n  __int64 v3; // rdx\n\n  v1 = *a1 == 47;\n  v2 = sub_404CA0(a1);\n  if ( v2 - (__int64)a1 <= v1 )\n    return v2 - (_QWORD)a1;\n  v3 = v2 - (_QWORD)a1 - 1;\n  if ( *(_BYTE *)(v2 - 1) != 47 )\n    return v2 - (_QWORD)a1;\n  while ( v1 != v3 && a1[v3 - 1] == 47 )\n    --v3;\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_404C40",
            "funcStartAddr": "0x404c40",
            "funcEndAddr": "0x404c9a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404C40(_BYTE *src)\n{\n  __int64 v1; // rbx\n  _BYTE *v2; // rax\n  _BYTE *v3; // rcx\n  _BYTE *v4; // rax\n\n  v1 = sub_404BE0(src);\n  v2 = malloc(v1 + (v1 == 0) + 1);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = memcpy(v2, src, v1);\n    v3 = v4;\n    if ( !v1 )\n    {\n      *v4 = 46;\n      v1 = 1LL;\n    }\n    v4[v1] = 0;\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_404CA0",
            "funcStartAddr": "0x404ca0",
            "funcEndAddr": "0x404cfb",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404CA0(_BYTE *a1)\n{\n  char v1; // dl\n  _BYTE *result; // rax\n  _BYTE *v3; // rcx\n  char v4; // si\n\n  v1 = *a1;\n  for ( result = a1; *result == 47; v1 = *result )\n    ++result;\n  if ( v1 )\n  {\n    v3 = result;\n    v4 = 0;\n    do\n    {\n      while ( v1 == 47 )\n      {\n        v1 = *++v3;\n        v4 = 1;\n        if ( !*v3 )\n          return result;\n      }\n      if ( v4 )\n      {\n        result = v3;\n        v4 = 0;\n      }\n      v1 = *++v3;\n    }\n    while ( *v3 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404D00",
            "funcStartAddr": "0x404d00",
            "funcEndAddr": "0x404d2b",
            "decompiledFuncCode": "size_t __fastcall sub_404D00(const char *a1)\n{\n  size_t result; // rax\n  size_t v2; // rdx\n\n  result = strlen(a1);\n  if ( result > 1 )\n  {\n    do\n    {\n      v2 = result - 1;\n      if ( a1[result - 1] != 47 )\n        break;\n      --result;\n    }\n    while ( v2 != 1 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404D30",
            "funcStartAddr": "0x404d30",
            "funcEndAddr": "0x404d63",
            "decompiledFuncCode": "bool __fastcall sub_404D30(char *a1)\n{\n  const char *v1; // rbx\n  const char *v2; // rbx\n  bool v3; // zf\n\n  v1 = sub_404CA0(a1);\n  if ( !*v1 )\n    v1 = a1;\n  v2 = &v1[sub_404D00(v1)];\n  v3 = *v2 == 0;\n  *v2 = 0;\n  return !v3;\n}\n"
        },
        {
            "funcName": "sub_404D70",
            "funcStartAddr": "0x404d70",
            "funcEndAddr": "0x404df6",
            "decompiledFuncCode": "void __fastcall sub_404D70(__int64 a1, void *a2, _QWORD *a3)\n{\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n\n  if ( a1 )\n  {\n    v4 = (_QWORD *)sub_408A50(24LL, a2);\n    *v4 = sub_408C80(a2);\n    v4[1] = a3[1];\n    v4[2] = *a3;\n    v5 = sub_405F70(a1, v4);\n    if ( !v5 )\n      sub_408CA0();\n    if ( v4 != (_QWORD *)v5 )\n      sub_406240(v4);\n  }\n}\n"
        },
        {
            "funcName": "sub_404E00",
            "funcStartAddr": "0x404e00",
            "funcEndAddr": "0x404e3b",
            "decompiledFuncCode": "bool __fastcall sub_404E00(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v3; // rax\n  __int64 v5[5]; // [rsp+0h] [rbp-28h] BYREF\n\n  if ( !a1 )\n    return 0;\n  v3 = a3[1];\n  v5[0] = a2;\n  v5[1] = v3;\n  v5[2] = *a3;\n  return sub_405560(a1, v5) != 0;\n}\n"
        },
        {
            "funcName": "sub_404E40",
            "funcStartAddr": "0x404e40",
            "funcEndAddr": "0x404e58",
            "decompiledFuncCode": "__int64 __fastcall sub_404E40(void *a1, void *a2)\n{\n  __int64 result; // rax\n\n  result = sub_404E60(a1, a2);\n  if ( !result )\n    sub_408CA0();\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404E60",
            "funcStartAddr": "0x404e60",
            "funcEndAddr": "0x404f39",
            "decompiledFuncCode": "void *__fastcall sub_404E60(_BYTE *src, const char *a2, _QWORD *a3)\n{\n  const char *v3; // r12\n  const char *v4; // r14\n  size_t v5; // rax\n  _BOOL8 v6; // rbx\n  size_t v7; // rbp\n  size_t v8; // r14\n  void *v9; // rax\n  void *v10; // r15\n  _BYTE *v11; // rax\n  char *v12; // rdi\n  char v15; // [rsp+Fh] [rbp-39h]\n\n  v3 = a2;\n  v4 = sub_404CA0(src);\n  v5 = sub_404D00(v4);\n  v6 = v5;\n  v7 = v5 + v4 - src;\n  if ( v5 )\n    v6 = v4[v5 - 1] != 47;\n  v15 = *a2;\n  if ( *a2 == 47 )\n  {\n    do\n      ++v3;\n    while ( *v3 == 47 );\n  }\n  v8 = strlen(v3);\n  v9 = malloc(v8 + v6 + v7 + 1);\n  v10 = v9;\n  if ( v9 )\n  {\n    v11 = mempcpy(v9, src, v7);\n    *v11 = 47;\n    v12 = &v11[v6];\n    if ( a3 )\n      *a3 = &v12[-(v15 == 47)];\n    *(_BYTE *)mempcpy(v12, v3, v8) = 0;\n  }\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_404F40",
            "funcStartAddr": "0x404f40",
            "funcEndAddr": "0x404fd3",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404F40(unsigned __int64 a1)\n{\n  __int64 v1; // rsi\n  unsigned __int64 v2; // rsi\n  unsigned __int64 v3; // rax\n  __int64 v4; // r8\n  unsigned __int64 v5; // rdi\n  unsigned __int64 v6; // rcx\n\n  v1 = 10LL;\n  if ( a1 >= 0xA )\n    v1 = a1;\n  v2 = v1 | 1;\n  if ( v2 != -1LL )\n  {\n    while ( 1 )\n    {\n      v3 = v2 % 3;\n      if ( v2 <= 9 )\n        goto LABEL_9;\n      if ( v2 % 3 )\n        break;\nLABEL_10:\n      v2 += 2LL;\n      if ( v2 == -1LL )\n        return v2;\n    }\n    v4 = 16LL;\n    v5 = 9LL;\n    v6 = 3LL;\n    while ( 1 )\n    {\n      v6 += 2LL;\n      v5 += v4;\n      v3 = v2 % v6;\n      if ( v5 >= v2 )\n        break;\n      v4 += 8LL;\n      if ( !(v2 % v6) )\n        goto LABEL_10;\n    }\nLABEL_9:\n    if ( v3 )\n      return v2;\n    goto LABEL_10;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_404FE0",
            "funcStartAddr": "0x404fe0",
            "funcEndAddr": "0x404ff0",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404FE0(__int64 a1, unsigned __int64 a2)\n{\n  return __ROR8__(a1, 3) % a2;\n}\n"
        },
        {
            "funcName": "sub_404FF0",
            "funcStartAddr": "0x404ff0",
            "funcEndAddr": "0x404ff7",
            "decompiledFuncCode": "bool __fastcall sub_404FF0(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n"
        },
        {
            "funcName": "sub_405000",
            "funcStartAddr": "0x4021d0",
            "funcEndAddr": "0x4021d5",
            "decompiledFuncCode": "__int64 __fastcall sub_405000(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_405000(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n"
        },
        {
            "funcName": "sub_405000",
            "funcStartAddr": "0x4021d0",
            "funcEndAddr": "0x4021d5",
            "decompiledFuncCode": "__int64 __fastcall sub_405000(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_405000(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n"
        },
        {
            "funcName": "sub_405030",
            "funcStartAddr": "0x405030",
            "funcEndAddr": "0x405149",
            "decompiledFuncCode": "__int64 __fastcall sub_405030(__int64 a1, __int64 a2, __m128i **a3, char a4)\n{\n  __m128i *v7; // rax\n  __int64 v8; // rsi\n  __m128i *v9; // rbx\n  __int64 *v10; // rax\n  const __m128i *v12; // rax\n\n  v7 = (__m128i *)sub_405000(a1, a2);\n  *a3 = v7;\n  v8 = v7->m128i_i64[0];\n  if ( v7->m128i_i64[0] )\n  {\n    v9 = v7;\n    if ( v8 != a2 )\n    {\n      if ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(a2) )\n      {\n        v10 = (__int64 *)v9->m128i_i64[1];\n        if ( v10 )\n        {\n          v8 = *v10;\n          if ( a2 != *v10 )\n          {\n            while ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(a2) )\n            {\n              v9 = (__m128i *)v9->m128i_i64[1];\n              v10 = (__int64 *)v9->m128i_i64[1];\n              if ( !v10 )\n                return 0LL;\n              v8 = *v10;\n              if ( *v10 == a2 )\n                goto LABEL_11;\n            }\n            v10 = (__int64 *)v9->m128i_i64[1];\n            v8 = *v10;\n          }\nLABEL_11:\n          if ( a4 )\n          {\n            v9->m128i_i64[1] = v10[1];\n            *v10 = 0LL;\n            v10[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v10;\n          }\n          return v8;\n        }\n        return 0LL;\n      }\n      v8 = v9->m128i_i64[0];\n    }\n    if ( a4 )\n    {\n      v12 = (const __m128i *)v9->m128i_i64[1];\n      if ( v12 )\n      {\n        *v9 = _mm_loadu_si128(v12);\n        v12->m128i_i64[0] = 0LL;\n        v12->m128i_i64[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = v12;\n        return v8;\n      }\n      v9->m128i_i64[0] = 0LL;\n    }\n    return v8;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_405150",
            "funcStartAddr": "0x405150",
            "funcEndAddr": "0x4051ce",
            "decompiledFuncCode": "__int64 __fastcall sub_405150(float **a1)\n{\n  float *v1; // rax\n  float v2; // xmm0_4\n  float v3; // xmm1_4\n  float v4; // xmm2_4\n  __int64 result; // rax\n\n  v1 = *a1;\n  if ( *a1 == (float *)&unk_40CFA0 )\n    return 1LL;\n  v2 = v1[2];\n  if ( v2 <= 0.1\n    || v2 >= 0.89999998\n    || v1[3] <= 1.1\n    || *v1 < 0.0\n    || (v3 = *v1 + 0.1, v4 = v1[1], v4 <= v3)\n    || v4 > 1.0\n    || (result = 1LL, v2 <= v3) )\n  {\n    *a1 = (float *)&unk_40CFA0;\n    return 0LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4051D0",
            "funcStartAddr": "0x4051d0",
            "funcEndAddr": "0x40531a",
            "decompiledFuncCode": "__int64 __fastcall sub_4051D0(__int64 a1, __int64 a2, char a3)\n{\n  __int64 *v4; // r12\n  __int64 v5; // r15\n  __int64 *v6; // rbx\n  __int64 v7; // r15\n  _QWORD *v8; // rax\n  __int64 *v9; // rdx\n  _QWORD *v10; // rax\n  _QWORD *v11; // rbx\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n\n  v4 = *(__int64 **)a2;\n  if ( *(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) )\n    return 1LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v5 = *v4;\n      if ( *v4 )\n      {\n        v6 = (__int64 *)v4[1];\n        if ( v6 )\n        {\n          do\n          {\n            while ( 1 )\n            {\n              v7 = *v6;\n              v8 = (_QWORD *)sub_405000(a1, *v6);\n              v9 = (__int64 *)v6[1];\n              if ( !*v8 )\n                break;\n              v6[1] = v8[1];\n              v8[1] = v6;\n              v6 = v9;\n              if ( !v9 )\n                goto LABEL_10;\n            }\n            *v8 = v7;\n            ++*(_QWORD *)(a1 + 24);\n            *v6 = 0LL;\n            v6[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v6;\n            v6 = v9;\n          }\n          while ( v9 );\nLABEL_10:\n          v5 = *v4;\n        }\n        v4[1] = 0LL;\n        if ( !a3 )\n          break;\n      }\n      v4 += 2;\n      if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n        return 1LL;\n    }\n    v10 = (_QWORD *)sub_405000(a1, v5);\n    v11 = v10;\n    if ( !*v10 )\n    {\n      *v10 = v5;\n      ++*(_QWORD *)(a1 + 24);\n      goto LABEL_16;\n    }\n    v12 = *(_QWORD **)(a1 + 72);\n    if ( !v12 )\n      break;\n    *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_15:\n    v13 = v11[1];\n    *v12 = v5;\n    v12[1] = v13;\n    v11[1] = v12;\nLABEL_16:\n    *v4 = 0LL;\n    v4 += 2;\n    --*(_QWORD *)(a2 + 24);\n    if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n      return 1LL;\n  }\n  v12 = malloc(0x10uLL);\n  if ( v12 )\n    goto LABEL_15;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_405410",
            "funcStartAddr": "0x405410",
            "funcEndAddr": "0x405558",
            "decompiledFuncCode": "__int64 __fastcall sub_405410(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // rbx\n  __int64 v4; // rcx\n  __int64 v5; // r12\n  __int64 v6; // r13\n  _QWORD *v7; // rsi\n  unsigned __int64 i; // rdi\n  __int64 v9; // rax\n  unsigned __int64 j; // rdx\n  double v11; // xmm0_8\n  double v12; // xmm1_8\n\n  v3 = 0LL;\n  v4 = *(_QWORD *)(a1 + 32);\n  v5 = *(_QWORD *)(a1 + 16);\n  v6 = *(_QWORD *)(a1 + 24);\n  v7 = *(_QWORD **)a1;\n  for ( i = *(_QWORD *)(a1 + 8); (unsigned __int64)v7 < i; v7 += 2 )\n  {\n    while ( !*v7 )\n    {\n      v7 += 2;\n      if ( (unsigned __int64)v7 >= i )\n        goto LABEL_10;\n    }\n    v9 = v7[1];\n    for ( j = 1LL; v9; ++j )\n      v9 = *(_QWORD *)(v9 + 8);\n    if ( v3 < j )\n      v3 = j;\n  }\nLABEL_10:\n  __fprintf_chk(a2, 1LL, \"# entries:         %lu\\n\", v4);\n  __fprintf_chk(a2, 1LL, \"# buckets:         %lu\\n\", v5);\n  if ( v6 < 0 )\n  {\n    v11 = ((double)(int)(v6 & 1 | ((unsigned __int64)v6 >> 1)) + (double)(int)(v6 & 1 | ((unsigned __int64)v6 >> 1)))\n        * 100.0;\n    if ( v5 >= 0 )\n      goto LABEL_12;\nLABEL_15:\n    v12 = (double)(int)(v5 & 1 | ((unsigned __int64)v5 >> 1)) + (double)(int)(v5 & 1 | ((unsigned __int64)v5 >> 1));\n    goto LABEL_13;\n  }\n  v11 = (double)(int)v6 * 100.0;\n  if ( v5 < 0 )\n    goto LABEL_15;\nLABEL_12:\n  v12 = (double)(int)v5;\nLABEL_13:\n  __fprintf_chk(a2, 1LL, \"# buckets used:    %lu (%.2f%%)\\n\", v6, v11 / v12);\n  return __fprintf_chk(a2, 1LL, \"max bucket length: %lu\\n\", v3);\n}\n"
        },
        {
            "funcName": "sub_405560",
            "funcStartAddr": "0x405560",
            "funcEndAddr": "0x4055b3",
            "decompiledFuncCode": "__int64 __fastcall sub_405560(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  _QWORD *v3; // rax\n  __int64 v4; // rsi\n  _QWORD *v5; // rbx\n\n  v2 = a2;\n  v3 = (_QWORD *)sub_405000(a1, a2);\n  v4 = *v3;\n  if ( !*v3 )\n    return 0LL;\n  v5 = v3;\n  while ( v4 != v2 )\n  {\n    if ( (*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v2) )\n      return *v5;\n    v5 = (_QWORD *)v5[1];\n    if ( !v5 )\n      return 0LL;\n    v4 = *v5;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_405610",
            "funcStartAddr": "0x405610",
            "funcEndAddr": "0x40567a",
            "decompiledFuncCode": "__int64 __fastcall sub_405610(__int64 a1, __int64 a2)\n{\n  _QWORD *v2; // rcx\n  _QWORD *v3; // rdx\n  __int64 v4; // rax\n  __int64 result; // rax\n\n  v2 = (_QWORD *)sub_405000(a1, a2);\n  v3 = v2;\n  while ( 1 )\n  {\n    v4 = *v3;\n    v3 = (_QWORD *)v3[1];\n    if ( v4 == a2 )\n      break;\n    if ( !v3 )\n      goto LABEL_7;\n  }\n  if ( v3 )\n    return *v3;\nLABEL_7:\n  while ( 1 )\n  {\n    v2 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v2 )\n      break;\n    result = *v2;\n    if ( *v2 )\n      return result;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4056F0",
            "funcStartAddr": "0x4056f0",
            "funcEndAddr": "0x405768",
            "decompiledFuncCode": "__int64 __fastcall sub_4056F0(__int64 a1, unsigned __int8 (__fastcall *a2)(__int64, __int64), __int64 a3)\n{\n  __int64 *v3; // r14\n  __int64 v6; // rbp\n  __int64 v7; // rdi\n  __int64 *v9; // rbx\n\n  v3 = *(__int64 **)a1;\n  if ( *(_QWORD *)(a1 + 8) <= *(_QWORD *)a1 )\n    return 0LL;\n  v6 = 0LL;\n  while ( 1 )\n  {\n    v7 = *v3;\n    if ( *v3 )\n      break;\nLABEL_4:\n    v3 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v3 )\n      return v6;\n  }\n  v9 = v3;\n  while ( a2(v7, a3) )\n  {\n    v9 = (__int64 *)v9[1];\n    ++v6;\n    if ( !v9 )\n      goto LABEL_4;\n    v7 = *v9;\n  }\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_4057D0",
            "funcStartAddr": "0x4057d0",
            "funcEndAddr": "0x40595a",
            "decompiledFuncCode": "_QWORD *__fastcall sub_4057D0(\n        __int64 a1,\n        __int64 a2,\n        unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2),\n        bool (__fastcall *a4)(__int64 a1, __int64 a2),\n        __int64 a5)\n{\n  bool (__fastcall *v6)(__int64, __int64); // r13\n  unsigned __int64 (__fastcall *v7)(__int64, unsigned __int64); // r12\n  char *v9; // rax\n  _QWORD *v10; // rbx\n  float **v11; // rdi\n  unsigned __int64 v12; // rbp\n  char *v13; // rax\n  void *v14; // rdi\n  float v16; // xmm1_4\n  float v17; // xmm0_4\n  float v18; // xmm0_4\n\n  v6 = a4;\n  v7 = a3;\n  if ( !a3 )\n    v7 = sub_404FE0;\n  if ( !a4 )\n    v6 = sub_404FF0;\n  v9 = (char *)malloc(0x50uLL);\n  v10 = v9;\n  if ( v9 )\n  {\n    v11 = (float **)(v9 + 40);\n    if ( a2 )\n    {\n      *((_QWORD *)v9 + 5) = a2;\n      if ( !(unsigned __int8)sub_405150(v11) )\n        goto LABEL_14;\n      if ( *(_BYTE *)(a2 + 16) )\n      {\nLABEL_9:\n        v12 = sub_404F40(a1);\n        if ( (v12 & 0x1000000000000000LL) == 0 && !(v12 >> 61) )\n        {\n          v10[2] = v12;\n          if ( v12 )\n          {\n            v13 = (char *)calloc(v12, 0x10uLL);\n            *v10 = v13;\n            if ( v13 )\n            {\n              v10[3] = 0LL;\n              v10[4] = 0LL;\n              v10[1] = &v13[16 * v12];\n              v10[6] = v7;\n              v10[7] = v6;\n              v10[8] = a5;\n              v10[9] = 0LL;\n              return v10;\n            }\n          }\n        }\nLABEL_14:\n        v14 = v10;\n        v10 = 0LL;\n        free(v14);\n        return v10;\n      }\n      v16 = *(float *)(a2 + 8);\n      if ( a1 < 0 )\n        goto LABEL_23;\n    }\n    else\n    {\n      *((_QWORD *)v9 + 5) = &unk_40CFA0;\n      v16 = 0.80000001;\n      if ( !(unsigned __int8)sub_405150(v11) )\n        goto LABEL_14;\n      if ( a1 < 0 )\n      {\nLABEL_23:\n        v17 = (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1))\n            + (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1));\n        goto LABEL_19;\n      }\n    }\n    v17 = (float)(int)a1;\nLABEL_19:\n    v18 = v17 / v16;\n    if ( v18 >= 1.8446744e19 )\n      goto LABEL_14;\n    if ( v18 < 9.223372e18 )\n      a1 = (unsigned int)(int)v18;\n    else\n      a1 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n    goto LABEL_9;\n  }\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_405960",
            "funcStartAddr": "0x405960",
            "funcEndAddr": "0x405a08",
            "decompiledFuncCode": "void __fastcall sub_405960(_QWORD *a1)\n{\n  _QWORD *v1; // r12\n  _QWORD *v2; // rbx\n  void (__fastcall *v3)(_QWORD); // rax\n  _QWORD *v4; // rdx\n  __int64 v5; // rcx\n\n  v1 = (_QWORD *)*a1;\n  if ( *a1 < a1[1] )\n  {\n    do\n    {\n      while ( !*v1 )\n      {\n        v1 += 2;\n        if ( a1[1] <= (unsigned __int64)v1 )\n          goto LABEL_12;\n      }\n      v2 = (_QWORD *)v1[1];\n      v3 = (void (__fastcall *)(_QWORD))a1[8];\n      if ( v2 )\n      {\n        do\n        {\n          if ( v3 )\n          {\n            v3(*v2);\n            v3 = (void (__fastcall *)(_QWORD))a1[8];\n          }\n          v4 = (_QWORD *)v2[1];\n          v5 = a1[9];\n          *v2 = 0LL;\n          v2[1] = v5;\n          a1[9] = v2;\n          v2 = v4;\n        }\n        while ( v4 );\n      }\n      if ( v3 )\n        v3(*v1);\n      *v1 = 0LL;\n      v1 += 2;\n      *(v1 - 1) = 0LL;\n    }\n    while ( a1[1] > (unsigned __int64)v1 );\n  }\nLABEL_12:\n  a1[3] = 0LL;\n  a1[4] = 0LL;\n}\n"
        },
        {
            "funcName": "sub_405A10",
            "funcStartAddr": "0x405a10",
            "funcEndAddr": "0x405ae6",
            "decompiledFuncCode": "void __fastcall sub_405A10(_QWORD *ptr)\n{\n  _QWORD *v2; // rbp\n  unsigned __int64 v3; // rax\n  _QWORD *v4; // rbx\n  _QWORD *v5; // rdi\n  _QWORD *v6; // rbx\n  _QWORD *v7; // rdi\n  _QWORD *v8; // rbx\n\n  v2 = (_QWORD *)*ptr;\n  v3 = ptr[1];\n  if ( ptr[8] && ptr[4] )\n  {\n    if ( (unsigned __int64)v2 >= v3 )\n      goto LABEL_15;\n    do\n    {\n      while ( !*v2 )\n      {\n        v2 += 2;\n        if ( v3 <= (unsigned __int64)v2 )\n          goto LABEL_10;\n      }\n      v4 = v2;\n      do\n      {\n        ((void (*)(void))ptr[8])();\n        v4 = (_QWORD *)v4[1];\n      }\n      while ( v4 );\n      v3 = ptr[1];\n      v2 += 2;\n    }\n    while ( v3 > (unsigned __int64)v2 );\nLABEL_10:\n    v2 = (_QWORD *)*ptr;\n  }\n  if ( (unsigned __int64)v2 < v3 )\n  {\n    do\n    {\n      v5 = (_QWORD *)v2[1];\n      if ( v5 )\n      {\n        do\n        {\n          v6 = (_QWORD *)v5[1];\n          free(v5);\n          v5 = v6;\n        }\n        while ( v6 );\n      }\n      v2 += 2;\n    }\n    while ( ptr[1] > (unsigned __int64)v2 );\n  }\nLABEL_15:\n  v7 = (_QWORD *)ptr[9];\n  if ( v7 )\n  {\n    do\n    {\n      v8 = (_QWORD *)v7[1];\n      free(v7);\n      v7 = v8;\n    }\n    while ( v8 );\n  }\n  free((void *)*ptr);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_405AF0",
            "funcStartAddr": "0x4021da",
            "funcEndAddr": "0x4021df",
            "decompiledFuncCode": "__int64 __fastcall sub_405AF0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_404F40(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_4051D0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_4051D0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_4051D0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n\n__int64 __fastcall sub_405AF0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_404F40(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_4051D0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_4051D0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_4051D0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_405AF0",
            "funcStartAddr": "0x4021da",
            "funcEndAddr": "0x4021df",
            "decompiledFuncCode": "__int64 __fastcall sub_405AF0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_404F40(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_4051D0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_4051D0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_4051D0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n\n__int64 __fastcall sub_405AF0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_404F40(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_4051D0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_4051D0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_4051D0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_405CF0",
            "funcStartAddr": "0x4021df",
            "funcEndAddr": "0x4021e4",
            "decompiledFuncCode": "__int64 __fastcall sub_405CF0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_405030(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_405150((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_405AF0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_405030(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_405CF0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_405030(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_405150((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_405AF0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_405030(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405CF0",
            "funcStartAddr": "0x4021df",
            "funcEndAddr": "0x4021e4",
            "decompiledFuncCode": "__int64 __fastcall sub_405CF0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_405030(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_405150((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_405AF0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_405030(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_405CF0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_405030(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_405150((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_405AF0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_405030(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405F70",
            "funcStartAddr": "0x405f70",
            "funcEndAddr": "0x405fab",
            "decompiledFuncCode": "__int64 __fastcall sub_405F70(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  int v3; // eax\n  __int64 v5; // [rsp+8h] [rbp-10h] BYREF\n\n  v2 = a2;\n  v3 = sub_405CF0(a1, a2, &v5);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( !v3 )\n    return v5;\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_405FB0",
            "funcStartAddr": "0x405fb0",
            "funcEndAddr": "0x406187",
            "decompiledFuncCode": "__int64 __fastcall sub_405FB0(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rbp\n  __m128i *v4; // rax\n  __int64 v6; // rax\n  float *v7; // rdx\n  float v8; // xmm0_4\n  __int64 v9; // rax\n  float v10; // xmm1_4\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  float v13; // xmm0_4\n  __int64 v14; // rax\n  float v15; // xmm1_4\n  float v16; // xmm0_4\n  __int64 v17; // rsi\n  _QWORD *v18; // rdi\n  _QWORD *v19; // r12\n  int v20; // edx\n  float v21; // xmm0_4\n  __int64 v22; // rcx\n  __int64 v23; // rcx\n  __m128i *v24; // [rsp+8h] [rbp-20h] BYREF\n\n  v3 = sub_405030(a1, a2, &v24, 1);\n  if ( !v3 )\n    return v3;\n  v4 = v24;\n  --*(_QWORD *)(a1 + 32);\n  if ( v4->m128i_i64[0] )\n    return v3;\n  v6 = *(_QWORD *)(a1 + 24) - 1LL;\n  *(_QWORD *)(a1 + 24) = v6;\n  if ( v6 < 0 )\n  {\n    v20 = v6 & 1 | ((unsigned __int64)v6 >> 1);\n    v9 = *(_QWORD *)(a1 + 16);\n    v21 = (float)v20;\n    v7 = *(float **)(a1 + 40);\n    v8 = v21 + v21;\n    if ( v9 >= 0 )\n      goto LABEL_6;\nLABEL_22:\n    v10 = (float)(v9 & 1 | (unsigned int)((unsigned __int64)v9 >> 1))\n        + (float)(v9 & 1 | (unsigned int)((unsigned __int64)v9 >> 1));\n    goto LABEL_7;\n  }\n  v7 = *(float **)(a1 + 40);\n  v8 = (float)(int)v6;\n  v9 = *(_QWORD *)(a1 + 16);\n  if ( v9 < 0 )\n    goto LABEL_22;\nLABEL_6:\n  v10 = (float)(int)v9;\nLABEL_7:\n  if ( (float)(v10 * *v7) > v8 )\n  {\n    sub_405150((float **)(a1 + 40));\n    v11 = *(_QWORD *)(a1 + 16);\n    v12 = *(_QWORD *)(a1 + 40);\n    if ( v11 < 0 )\n    {\n      v23 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n      v13 = (float)(int)v23 + (float)(int)v23;\n    }\n    else\n    {\n      v13 = (float)(int)v11;\n    }\n    v14 = *(_QWORD *)(a1 + 24);\n    if ( v14 < 0 )\n    {\n      v22 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n      v15 = (float)(int)v22 + (float)(int)v22;\n    }\n    else\n    {\n      v15 = (float)(int)v14;\n    }\n    if ( (float)(*(float *)v12 * v13) > v15 )\n    {\n      v16 = v13 * *(float *)(v12 + 4);\n      if ( !*(_BYTE *)(v12 + 16) )\n        v16 = v16 * *(float *)(v12 + 8);\n      if ( v16 >= 9.223372e18 )\n        v17 = (unsigned int)(int)(float)(v16 - 9.223372e18) ^ 0x8000000000000000LL;\n      else\n        v17 = (unsigned int)(int)v16;\n      if ( !(unsigned __int8)sub_405AF0(a1, v17) )\n      {\n        v18 = *(_QWORD **)(a1 + 72);\n        if ( v18 )\n        {\n          do\n          {\n            v19 = (_QWORD *)v18[1];\n            free(v18);\n            v18 = v19;\n          }\n          while ( v19 );\n        }\n        *(_QWORD *)(a1 + 72) = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_406190",
            "funcStartAddr": "0x406190",
            "funcEndAddr": "0x4061b7",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406190(_QWORD *a1, unsigned __int64 a2)\n{\n  return (a1[1] ^ (unsigned __int64)sub_40A7F0(*a1)) % a2;\n}\n"
        },
        {
            "funcName": "sub_4061D0",
            "funcStartAddr": "0x4061d0",
            "funcEndAddr": "0x4061f5",
            "decompiledFuncCode": "__int64 __fastcall sub_4061D0(_QWORD *a1, _QWORD *a2)\n{\n  if ( a1[1] == a2[1] && a1[2] == a2[2] )\n    return sub_4080F0(*a1, *a2);\n  else\n    return 0LL;\n}\n"
        },
        {
            "funcName": "sub_406200",
            "funcStartAddr": "0x406200",
            "funcEndAddr": "0x406233",
            "decompiledFuncCode": "bool __fastcall sub_406200(__int64 a1, __int64 a2)\n{\n  bool result; // al\n\n  result = 0;\n  if ( *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) )\n    return strcmp(*(const char **)a1, *(const char **)a2) == 0;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406240",
            "funcStartAddr": "0x406240",
            "funcEndAddr": "0x406255",
            "decompiledFuncCode": "void __fastcall sub_406240(void **ptr)\n{\n  free(*ptr);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_406260",
            "funcStartAddr": "0x406260",
            "funcEndAddr": "0x4062f9",
            "decompiledFuncCode": "char *__fastcall sub_406260(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_611410 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406300",
            "funcStartAddr": "0x406300",
            "funcEndAddr": "0x4063f2",
            "decompiledFuncCode": "char *__fastcall sub_406300(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40A830();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40D031;\n      if ( !v5 )\n        return (char *)&unk_40D026;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40D02D;\n    if ( !v5 )\n      return (char *)&unk_40D02A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_406400",
            "funcStartAddr": "0x4021e4",
            "funcEndAddr": "0x4021e9",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406400(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_406400((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_406400((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40A230((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_406400((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406300(\"`\", a5);\n        v51 = sub_406300(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_406400(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_406400((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_406400((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40A230((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_406400((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406300(\"`\", a5);\n        v51 = sub_406300(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_406400",
            "funcStartAddr": "0x4021e4",
            "funcEndAddr": "0x4021e9",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406400(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_406400((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_406400((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40A230((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_406400((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406300(\"`\", a5);\n        v51 = sub_406300(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_406400(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_406400((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_406400((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40A230((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_406400((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406300(\"`\", a5);\n        v51 = sub_406300(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_407630",
            "funcStartAddr": "0x4021e9",
            "funcEndAddr": "0x4021ee",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407630(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_611370 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408CA0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_611360 )\n    {\n      v7 = (__m128i *)sub_408AB0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_611360);\n    }\n    else\n    {\n      ptr = (void *)sub_408AB0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_611370], 0, 16LL * (a1 + 1 - dword_611370));\n    dword_611370 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406400(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_611420 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408A50(v13, v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406400(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_407630(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_611370 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408CA0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_611360 )\n    {\n      v7 = (__m128i *)sub_408AB0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_611360);\n    }\n    else\n    {\n      ptr = (void *)sub_408AB0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_611370], 0, 16LL * (a1 + 1 - dword_611370));\n    dword_611370 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406400(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_611420 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408A50(v13, v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406400(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_407630",
            "funcStartAddr": "0x4021e9",
            "funcEndAddr": "0x4021ee",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407630(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_611370 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408CA0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_611360 )\n    {\n      v7 = (__m128i *)sub_408AB0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_611360);\n    }\n    else\n    {\n      ptr = (void *)sub_408AB0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_611370], 0, 16LL * (a1 + 1 - dword_611370));\n    dword_611370 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406400(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_611420 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408A50(v13, v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406400(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_407630(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_611370 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408CA0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_611360 )\n    {\n      v7 = (__m128i *)sub_408AB0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_611360);\n    }\n    else\n    {\n      ptr = (void *)sub_408AB0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_611370], 0, 16LL * (a1 + 1 - dword_611370));\n    dword_611370 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406400(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_611420 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408A50(v13, v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406400(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_4077D0",
            "funcStartAddr": "0x4077d0",
            "funcEndAddr": "0x407804",
            "decompiledFuncCode": "__int64 __fastcall sub_4077D0(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_611520;\n  result = sub_408C50(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4078C0",
            "funcStartAddr": "0x4078c0",
            "funcEndAddr": "0x407932",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4078C0(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_611520;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_406400(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407940",
            "funcStartAddr": "0x407940",
            "funcEndAddr": "0x407a21",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407940(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_611520;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_406400(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_408A50(v11 + 1, v11 + 1);\n  sub_406400(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_407A40",
            "funcStartAddr": "0x407a40",
            "funcEndAddr": "0x407ad5",
            "decompiledFuncCode": "void sub_407A40()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_611370 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_611370 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_611420 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_611360 = 256LL;\n    *((_QWORD *)&xmmword_611360 + 1) = &unk_611420;\n  }\n  if ( v0 != &xmmword_611360 )\n  {\n    free(v0);\n    ptr = &xmmword_611360;\n  }\n  dword_611370 = 1;\n}\n"
        },
        {
            "funcName": "sub_407B50",
            "funcStartAddr": "0x4021ee",
            "funcEndAddr": "0x4021f3",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407B50(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_407B50(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_407B50",
            "funcStartAddr": "0x4021ee",
            "funcEndAddr": "0x4021f3",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407B50(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_407B50(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_407BC0",
            "funcStartAddr": "0x4021f3",
            "funcEndAddr": "0x4021f8",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407BC0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_407BC0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_407BC0",
            "funcStartAddr": "0x4021f3",
            "funcEndAddr": "0x4021f8",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407BC0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_407BC0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_407C30",
            "funcStartAddr": "0x407c30",
            "funcEndAddr": "0x407c3c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407C30(int a1, __int64 a2)\n{\n  return sub_407B50(0, a1, a2);\n}\n"
        },
        {
            "funcName": "sub_407C50",
            "funcStartAddr": "0x407c50",
            "funcEndAddr": "0x407cc0",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407C50(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_611550;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_611520);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_611530);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_611540);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_407630(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_407CD0",
            "funcStartAddr": "0x407cd0",
            "funcEndAddr": "0x407ce1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407CD0(__int64 a1)\n{\n  return sub_407C50(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_407D00",
            "funcStartAddr": "0x4021f8",
            "funcEndAddr": "0x4021fd",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407D00(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_407D00(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_407D00",
            "funcStartAddr": "0x4021f8",
            "funcEndAddr": "0x4021fd",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407D00(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_407D00(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_407D70",
            "funcStartAddr": "0x407d70",
            "funcEndAddr": "0x407ddc",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407D70(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_611520);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_611530);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_611540);\n  v8 = qword_611550;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_407630(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_407E60",
            "funcStartAddr": "0x407e60",
            "funcEndAddr": "0x407e71",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407E60(int a1, __int64 a2)\n{\n  return sub_407630(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_611320);\n}\n"
        },
        {
            "funcName": "sub_407E80",
            "funcStartAddr": "0x407e80",
            "funcEndAddr": "0x407e96",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407E80(__int64 a1)\n{\n  return sub_407630(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_611320);\n}\n"
        },
        {
            "funcName": "sub_407EA0",
            "funcStartAddr": "0x407ea0",
            "funcEndAddr": "0x4080e2",
            "decompiledFuncCode": "__int64 __fastcall sub_407EA0(unsigned int oldfd, char *old, unsigned int newfd, char *a4, unsigned int a5)\n{\n  int v8; // eax\n  unsigned int v9; // edx\n  int *v10; // rax\n  int *v11; // r9\n  bool v12; // r15\n  int v14; // eax\n  size_t v15; // rbp\n  size_t v16; // rax\n  int v17; // [rsp+8h] [rbp-160h]\n  int *v18; // [rsp+8h] [rbp-160h]\n  int *v19; // [rsp+8h] [rbp-160h]\n  struct stat v20; // [rsp+10h] [rbp-158h] BYREF\n  struct stat stat_buf; // [rsp+A0h] [rbp-C8h] BYREF\n\n  v8 = syscall(316LL, oldfd, old, newfd, a4, a5);\n  v9 = v8;\n  if ( v8 < 0 )\n  {\n    v17 = v8;\n    v10 = __errno_location();\n    v9 = v17;\n    v11 = v10;\n    v12 = *v10 != 95 && ((*v10 - 22) & 0xFFFFFFEF) != 0;\n    if ( !v12 )\n    {\n      if ( a5 )\n      {\n        if ( (a5 & 0xFFFFFFFE) != 0 )\n        {\n          *v10 = 95;\n          return (unsigned int)-1;\n        }\n        v18 = v10;\n        v14 = __fxstatat(1, newfd, a4, &stat_buf, 256);\n        v11 = v18;\n        if ( !v14 || *v18 == 75 )\n        {\n          *v18 = 17;\n          return (unsigned int)-1;\n        }\n        if ( *v18 != 2 )\n          return (unsigned int)-1;\n        v12 = 1;\n      }\n      v19 = v11;\n      v15 = strlen(old);\n      v16 = strlen(a4);\n      if ( !v15 || !v16 || old[v15 - 1] != 47 && a4[v16 - 1] != 47 )\n        return (unsigned int)renameat(oldfd, old, newfd, a4);\n      if ( !__fxstatat(1, oldfd, old, &v20, 256) )\n      {\n        if ( v12 )\n        {\n          if ( (v20.st_mode & 0xF000) != 0x4000 )\n          {\n            *v19 = 2;\n            return (unsigned int)-1;\n          }\n          return (unsigned int)renameat(oldfd, old, newfd, a4);\n        }\n        if ( __fxstatat(1, newfd, a4, &stat_buf, 256) )\n        {\n          if ( *v19 == 2 && (v20.st_mode & 0xF000) == 0x4000 )\n            return (unsigned int)renameat(oldfd, old, newfd, a4);\n        }\n        else\n        {\n          if ( (stat_buf.st_mode & 0xF000) == 0x4000 )\n          {\n            if ( (v20.st_mode & 0xF000) != 0x4000 )\n            {\n              *v19 = 21;\n              return (unsigned int)-1;\n            }\n            return (unsigned int)renameat(oldfd, old, newfd, a4);\n          }\n          *v19 = 20;\n        }\n      }\n      return (unsigned int)-1;\n    }\n  }\n  return v9;\n}\n"
        },
        {
            "funcName": "sub_4080F0",
            "funcStartAddr": "0x4080f0",
            "funcEndAddr": "0x408220",
            "decompiledFuncCode": "__int64 __fastcall sub_4080F0(_BYTE *a1, _BYTE *a2)\n{\n  unsigned int v2; // ebx\n  const char *v3; // rbp\n  const char *v4; // r12\n  size_t v5; // r13\n  char *v7; // rbp\n  char *v8; // r12\n  int *v9; // rax\n  int *v10; // rax\n  struct stat v11; // [rsp+0h] [rbp-158h] BYREF\n  struct stat stat_buf; // [rsp+90h] [rbp-C8h] BYREF\n\n  v2 = 0;\n  v3 = sub_404CA0(a1);\n  v4 = sub_404CA0(a2);\n  v5 = sub_404D00(v3);\n  if ( v5 == sub_404D00(v4) && !memcmp(v3, v4, v5) )\n  {\n    v7 = (char *)sub_404BC0(a1);\n    v8 = (char *)sub_404BC0(a2);\n    if ( __xstat(1, v7, &v11) )\n    {\n      v10 = __errno_location();\n      error(1, *v10, \"%s\", v7);\n    }\n    if ( __xstat(1, v8, &stat_buf) )\n    {\n      v9 = __errno_location();\n      error(1, *v9, \"%s\", v8);\n    }\n    v2 = 0;\n    if ( v11.st_ino == stat_buf.st_ino )\n      LOBYTE(v2) = v11.st_dev == stat_buf.st_dev;\n    free(v7);\n    free(v8);\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_408220",
            "funcStartAddr": "0x408220",
            "funcEndAddr": "0x408274",
            "decompiledFuncCode": "__int64 __fastcall sub_408220(char *filename)\n{\n  int v1; // ebx\n  int *v2; // rax\n  struct stat v4; // [rsp+0h] [rbp-98h] BYREF\n\n  v1 = __lxstat(1, filename, &v4);\n  v2 = __errno_location();\n  if ( v1 && *v2 != 75 )\n    return (unsigned int)-(*v2 != 2);\n  *v2 = 17;\n  return 0xFFFFFFFFLL;\n}\n"
        },
        {
            "funcName": "sub_408280",
            "funcStartAddr": "0x408280",
            "funcEndAddr": "0x40828a",
            "decompiledFuncCode": "int __fastcall sub_408280(const char *a1)\n{\n  return mkdir(a1, 0x1C0u);\n}\n"
        },
        {
            "funcName": "sub_4082B0",
            "funcStartAddr": "0x4082b0",
            "funcEndAddr": "0x4082cd",
            "decompiledFuncCode": "void __noreturn sub_4082B0()\n{\n  __assert_fail(\"! \\\"invalid KIND in __gen_tempname\\\"\", \"lib/tempname.c\", 0x147u, \"gen_tempname_len\");\n}\n"
        },
        {
            "funcName": "sub_4082D0",
            "funcStartAddr": "0x4082d0",
            "funcEndAddr": "0x40842d",
            "decompiledFuncCode": "__int64 __fastcall sub_4082D0(char *s, int a2, __int64 a3, __int64 (__fastcall *a4)(char *, __int64), size_t a5)\n{\n  int *v6; // r15\n  size_t v7; // rax\n  size_t v8; // rdx\n  size_t v9; // rbx\n  void *v10; // rbp\n  int v11; // r12d\n  char *v12; // rbx\n  char *v13; // r14\n  int v14; // edx\n  int v15; // ecx\n  unsigned int v16; // edx\n  int v18; // [rsp+8h] [rbp-60h]\n  const char *v19; // [rsp+10h] [rbp-58h]\n  int v20; // [rsp+10h] [rbp-58h]\n  int v23; // [rsp+2Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v23 = *v6;\n  v7 = strlen(s);\n  v8 = a5 + a2;\n  if ( v8 > v7 || (v9 = v7 - v8, v19 = &s[v7 - v8], a5 > strspn(v19, \"X\")) )\n  {\n    *v6 = 22;\n    return (unsigned int)-1;\n  }\n  else\n  {\n    v10 = (void *)sub_40ADD0(0LL, a5);\n    if ( v10 )\n    {\n      v11 = 238328;\n      v12 = &s[a5 + v9];\n      while ( 1 )\n      {\n        v13 = (char *)v19;\n        if ( a5 )\n        {\n          do\n            *v13++ = byte_40DE00[sub_40AE10(v10, 61LL)];\n          while ( v13 != v12 );\n        }\n        v14 = a4(s, a3);\n        if ( v14 >= 0 )\n        {\n          *v6 = v23;\n          v15 = v23;\n          goto LABEL_12;\n        }\n        v15 = *v6;\n        if ( *v6 != 17 )\n          break;\n        if ( !--v11 )\n        {\n          sub_40AF30(v10);\n          *v6 = 17;\n          return (unsigned int)-1;\n        }\n      }\n      v14 = -1;\nLABEL_12:\n      v20 = v14;\n      v18 = v15;\n      sub_40AF30(v10);\n      v16 = v20;\n      *v6 = v18;\n    }\n    else\n    {\n      return (unsigned int)-1;\n    }\n  }\n  return v16;\n}\n"
        },
        {
            "funcName": "sub_408430",
            "funcStartAddr": "0x408430",
            "funcEndAddr": "0x40845b",
            "decompiledFuncCode": "__int64 __fastcall sub_408430(char *a1, int a2, int a3, unsigned int a4, size_t a5)\n{\n  int v6[3]; // [rsp+Ch] [rbp-Ch] BYREF\n\n  v6[0] = a3;\n  if ( a4 > 2 )\n    sub_4082B0();\n  return sub_4082D0(a1, a2, (__int64)v6, (__int64 (__fastcall *)(char *, __int64))*(&off_40DDC0 + a4), a5);\n}\n"
        },
        {
            "funcName": "sub_408460",
            "funcStartAddr": "0x408460",
            "funcEndAddr": "0x408491",
            "decompiledFuncCode": "__int64 __fastcall sub_408460(char *a1, int a2, int a3, unsigned int a4)\n{\n  int v5[3]; // [rsp+Ch] [rbp-Ch] BYREF\n\n  v5[0] = a3;\n  if ( a4 > 2 )\n    sub_4082B0();\n  return sub_4082D0(a1, a2, (__int64)v5, (__int64 (__fastcall *)(char *, __int64))*(&off_40DDC0 + a4), 6uLL);\n}\n"
        },
        {
            "funcName": "sub_4084A0",
            "funcStartAddr": "0x4084a0",
            "funcEndAddr": "0x4084ab",
            "decompiledFuncCode": "__int64 __fastcall sub_4084A0(char *a1, int a2, __int64 a3, __int64 (__fastcall *a4)(char *, __int64))\n{\n  return sub_4082D0(a1, a2, a3, a4, 6uLL);\n}\n"
        },
        {
            "funcName": "sub_4084B0",
            "funcStartAddr": "0x4021fd",
            "funcEndAddr": "0x402202",
            "decompiledFuncCode": "__int64 __fastcall sub_4084B0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_4084B0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_4084B0",
            "funcStartAddr": "0x4021fd",
            "funcEndAddr": "0x402202",
            "decompiledFuncCode": "__int64 __fastcall sub_4084B0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_4084B0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_4088B0",
            "funcStartAddr": "0x4088b0",
            "funcEndAddr": "0x408910",
            "decompiledFuncCode": "__int64 __fastcall sub_4088B0(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_4084B0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_4084B0(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_408910",
            "funcStartAddr": "0x408910",
            "funcEndAddr": "0x4089cc",
            "decompiledFuncCode": "__int64 __fastcall sub_408910(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_4084B0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_4084B0(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_4089D0",
            "funcStartAddr": "0x4089d0",
            "funcEndAddr": "0x408a44",
            "decompiledFuncCode": "int sub_4089D0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_40BCB5, \"https://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_408A50",
            "funcStartAddr": "0x408a50",
            "funcEndAddr": "0x408a6a",
            "decompiledFuncCode": "void *__fastcall sub_408A50(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_408CA0();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408AA0",
            "funcStartAddr": "0x408aa0",
            "funcEndAddr": "0x408aa2",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_408AA0(size_t a1)\n{\n  return sub_408A50(a1);\n}\n"
        },
        {
            "funcName": "sub_408AB0",
            "funcStartAddr": "0x408ab0",
            "funcEndAddr": "0x408ae6",
            "decompiledFuncCode": "void *__fastcall sub_408AB0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_408CA0();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408C00",
            "funcStartAddr": "0x408c00",
            "funcEndAddr": "0x408c17",
            "decompiledFuncCode": "void *__fastcall sub_408C00(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_408A50(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_408C20",
            "funcStartAddr": "0x408c20",
            "funcEndAddr": "0x408c4e",
            "decompiledFuncCode": "__int64 __fastcall sub_408C20(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_408CA0(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_408C50",
            "funcStartAddr": "0x408c50",
            "funcEndAddr": "0x408c78",
            "decompiledFuncCode": "void *__fastcall sub_408C50(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_408A50(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_408C80",
            "funcStartAddr": "0x408c80",
            "funcEndAddr": "0x408c93",
            "decompiledFuncCode": "void *__fastcall sub_408C80(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_408C50(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_408CA0",
            "funcStartAddr": "0x408ca0",
            "funcEndAddr": "0x408cd1",
            "decompiledFuncCode": "void __noreturn sub_408CA0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_408CE0",
            "funcStartAddr": "0x408ce0",
            "funcEndAddr": "0x408d0f",
            "decompiledFuncCode": "__int64 sub_408CE0()\n{\n  __int64 v0; // rbx\n\n  v0 = sub_408F90(0LL, 0LL);\n  if ( !v0 && *__errno_location() == 12 )\n    sub_408CA0();\n  return v0;\n}\n"
        },
        {
            "funcName": "sub_408D10",
            "funcStartAddr": "0x408d10",
            "funcEndAddr": "0x408d79",
            "decompiledFuncCode": "__int64 sub_408D10()\n{\n  unsigned int v0; // ebx\n  __ssize_t v1; // rax\n  char *v2; // rdi\n  char *v3; // rax\n  char *response; // [rsp+0h] [rbp-18h] BYREF\n  size_t n[2]; // [rsp+8h] [rbp-10h] BYREF\n\n  v0 = 0;\n  response = 0LL;\n  n[0] = 0LL;\n  v1 = __getdelim(&response, n, 10, stdin);\n  if ( v1 > 0 )\n  {\n    v2 = response;\n    v3 = &response[v1 - 1];\n    if ( *v3 == 10 )\n    {\n      *v3 = 0;\n      v2 = response;\n    }\n    LOBYTE(v0) = rpmatch(v2) > 0;\n  }\n  free(response);\n  return v0;\n}\n"
        },
        {
            "funcName": "sub_408D80",
            "funcStartAddr": "0x408d80",
            "funcEndAddr": "0x408eb5",
            "decompiledFuncCode": "__int64 __fastcall sub_408D80(int a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ebx\n  int v8; // eax\n  int *v9; // rax\n  int v10; // edi\n  int v11; // r12d\n  int *v12; // rbp\n  int v13; // ecx\n  int v14; // r8d\n  int v15; // r9d\n  int v16; // [rsp+30h] [rbp-38h]\n\n  v16 = a3;\n  if ( a2 == 1030 )\n  {\n    if ( dword_611558 < 0 )\n    {\n      v6 = sub_408D80(a1, 0, a3, a4, a5, a6);\n      if ( v6 >= 0 && dword_611558 == -1 )\n      {\nLABEL_8:\n        v8 = fcntl(v6, 1);\n        if ( v8 < 0 || fcntl(v6, 2, v8 | 1u) == -1 )\n        {\n          v9 = __errno_location();\n          v10 = v6;\n          v6 = -1;\n          v11 = *v9;\n          v12 = v9;\n          close(v10);\n          *v12 = v11;\n        }\n      }\n    }\n    else\n    {\n      v6 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v6 < 0 && *__errno_location() == 22 )\n      {\n        v6 = sub_408D80(a1, 0, v16, v13, v14, v15);\n        if ( v6 >= 0 )\n        {\n          dword_611558 = -1;\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        dword_611558 = 1;\n      }\n    }\n    return (unsigned int)v6;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "sub_408EC0",
            "funcStartAddr": "0x408ec0",
            "funcEndAddr": "0x408f00",
            "decompiledFuncCode": "int __fastcall sub_408EC0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_408F30(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_408F00",
            "funcStartAddr": "0x408f00",
            "funcEndAddr": "0x408f28",
            "decompiledFuncCode": "__int64 __fastcall sub_408F00(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  if ( *(_QWORD *)(a1 + 40) <= *(_QWORD *)(a1 + 32) )\n  {\n    result = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);\n    if ( (*(_DWORD *)a1 & 0x100) != 0 )\n      result += *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 72);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408F30",
            "funcStartAddr": "0x408f30",
            "funcEndAddr": "0x408f87",
            "decompiledFuncCode": "int __fastcall sub_408F30(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_408F90",
            "funcStartAddr": "0x408f90",
            "funcEndAddr": "0x409452",
            "decompiledFuncCode": "char *__fastcall sub_408F90(char *a1, size_t a2)\n{\n  char *v3; // rbx\n  __dev_t st_dev; // r15\n  __ino_t st_ino; // r14\n  DIR *v6; // rbp\n  int v7; // r15d\n  int *v8; // r12\n  int v9; // eax\n  bool v10; // r13\n  struct dirent *v11; // rax\n  const char *d_name; // rbx\n  __int64 v13; // r13\n  size_t v14; // r14\n  char *v15; // rdx\n  char *v16; // rax\n  size_t v17; // rbx\n  void *v18; // rax\n  int v19; // ebx\n  __dev_t v20; // [rsp+8h] [rbp-120h]\n  size_t v21; // [rsp+8h] [rbp-120h]\n  __dev_t v22; // [rsp+10h] [rbp-118h]\n  char *ptr; // [rsp+18h] [rbp-110h]\n  void *v24; // [rsp+20h] [rbp-108h]\n  size_t size; // [rsp+28h] [rbp-100h]\n  bool v26; // [rsp+3Fh] [rbp-E9h]\n  char *src; // [rsp+40h] [rbp-E8h]\n  char *srca; // [rsp+40h] [rbp-E8h]\n  __dev_t v29; // [rsp+48h] [rbp-E0h]\n  __ino_t v30; // [rsp+50h] [rbp-D8h]\n  __ino_t v31; // [rsp+58h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+60h] [rbp-C8h] BYREF\n\n  v24 = a1;\n  if ( !a2 )\n  {\n    size = 4096LL;\n    if ( a1 )\n    {\n      ptr = 0LL;\n      *__errno_location() = 22;\n      return ptr;\n    }\nLABEL_3:\n    ptr = (char *)malloc(size);\n    if ( !ptr )\n      return ptr;\n    goto LABEL_7;\n  }\n  size = a2;\n  if ( !a1 )\n    goto LABEL_3;\n  ptr = a1;\nLABEL_7:\n  v3 = &ptr[size];\n  ptr[size - 1] = 0;\n  if ( __lxstat(1, \".\", &stat_buf) < 0\n    || (st_dev = stat_buf.st_dev, st_ino = stat_buf.st_ino, v20 = stat_buf.st_dev, __lxstat(1, \"/\", &stat_buf) < 0) )\n  {\n    v8 = __errno_location();\nLABEL_58:\n    v19 = *v8;\n    if ( a1 )\n      goto LABEL_56;\n    goto LABEL_59;\n  }\n  src = v3 - 1;\n  v30 = stat_buf.st_ino;\n  v29 = stat_buf.st_dev;\n  v26 = st_ino != stat_buf.st_ino || st_dev != stat_buf.st_dev;\n  if ( !v26 )\n    goto LABEL_37;\n  v6 = 0LL;\n  v7 = -100;\n  v8 = __errno_location();\n  do\n  {\n    v9 = openat(v7, \"..\", 0);\n    v7 = v9;\n    if ( v9 < 0 )\n    {\n      v19 = *v8;\n      if ( v6 )\nLABEL_54:\n        closedir(v6);\nLABEL_55:\n      if ( a1 )\n      {\nLABEL_56:\n        *v8 = v19;\n        return 0LL;\n      }\nLABEL_59:\n      free(ptr);\n      goto LABEL_56;\n    }\n    if ( __fxstat(1, v9, &stat_buf) )\n    {\n      v19 = *v8;\n      if ( v6 )\n        closedir(v6);\n      goto LABEL_62;\n    }\n    if ( v6 && closedir(v6) || (v22 = stat_buf.st_dev, v31 = stat_buf.st_ino, (v6 = fdopendir(v7)) == 0LL) )\n    {\n      v19 = *v8;\nLABEL_62:\n      close(v7);\n      goto LABEL_55;\n    }\n    v10 = v26;\n    do\n    {\n      while ( 1 )\n      {\n        *v8 = 0;\n        v11 = readdir(v6);\n        if ( v11 )\n        {\n          if ( v11->d_name[0] != 46 )\n            goto LABEL_19;\n          goto LABEL_48;\n        }\n        v19 = *v8;\n        if ( *v8 || !v10 )\n          goto LABEL_52;\n        rewinddir(v6);\n        v11 = readdir(v6);\n        if ( !v11 )\n        {\n          v19 = *v8;\nLABEL_52:\n          if ( !v19 )\n          {\n            *v8 = 2;\n            v19 = 2;\n          }\n          goto LABEL_54;\n        }\n        v10 = 0;\n        if ( v11->d_name[0] != 46 )\n          break;\nLABEL_48:\n        if ( v11->d_name[1] && *(_WORD *)&v11->d_name[1] != 46 )\n        {\nLABEL_19:\n          if ( !v10 )\n            break;\n          if ( v22 != v20 || v11->d_ino == st_ino )\n          {\n            v10 = v22 != v20 || v11->d_ino == st_ino;\n            break;\n          }\n        }\n      }\n      d_name = v11->d_name;\n    }\n    while ( __fxstatat(1, v7, v11->d_name, &stat_buf, 256)\n         || (stat_buf.st_mode & 0xF000) != 0x4000\n         || stat_buf.st_dev != v20\n         || stat_buf.st_ino != st_ino );\n    v13 = src - ptr;\n    v14 = strlen(d_name);\n    if ( src - ptr <= v14 )\n    {\n      if ( a2 )\n      {\n        *v8 = 34;\n        v19 = 34;\n        goto LABEL_54;\n      }\n      v15 = (char *)size;\n      if ( v14 >= size )\n        v15 = (char *)v14;\n      srca = v15;\n      v21 = (size_t)&v15[size];\n      if ( __CFADD__(v15, size) || (v16 = (char *)realloc(ptr, (size_t)&v15[size])) == 0LL )\n      {\n        *v8 = 12;\n        v19 = 12;\n        goto LABEL_54;\n      }\n      ptr = v16;\n      src = (char *)memcpy(&srca[v13 + (_QWORD)v16], &v16[v13], size - v13);\n      size = v21;\n    }\n    src = (char *)memcpy(&src[-v14], d_name, v14) - 1;\n    st_ino = v31;\n    *src = 47;\n    v20 = v22;\n  }\n  while ( v29 != v22 || v30 != v31 );\n  if ( closedir(v6) )\n    goto LABEL_58;\n  v3 = &ptr[size];\nLABEL_37:\n  if ( src == &ptr[size - 1] )\n    *--src = 47;\n  v17 = v3 - src;\n  memmove(ptr, src, v17);\n  if ( !a2 )\n    v24 = realloc(ptr, v17);\n  v18 = v24;\n  if ( !v24 )\n    return ptr;\n  return (char *)v18;\n}\n"
        },
        {
            "funcName": "sub_409460",
            "funcStartAddr": "0x409460",
            "funcEndAddr": "0x40953f",
            "decompiledFuncCode": "__int64 __fastcall sub_409460(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409540",
            "funcStartAddr": "0x409540",
            "funcEndAddr": "0x409b5c",
            "decompiledFuncCode": "__int64 __fastcall sub_409540(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        const char *a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rdi\n  const char **v35; // rbx\n  _BYTE *v36; // rbp\n  __int64 v37; // r12\n  const char *v38; // r12\n  __int64 v39; // rbp\n  char *v40; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v48; // [rsp+38h] [rbp-50h]\n  char v49; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+44h] [rbp-44h]\n  int v52; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v49 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v49), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v51 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v48 = 0;\n  v52 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v48 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v52 = 1;\n            ptr[v51] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v48 = 1;\n        }\n        else\n        {\n          v48 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v51 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v48 )\n  {\n    if ( a8 )\n    {\n      if ( v48 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v34 = stderr;\n        v35 = (const char **)a4;\n        v36 = ptr;\n        v37 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9, *v35);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v52 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v51;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v38 = *v12;\n          v39 = *a2;\n          v40 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v40, v39, a9, v38);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409B60",
            "funcStartAddr": "0x409b60",
            "funcEndAddr": "0x40a126",
            "decompiledFuncCode": "__int64 __fastcall sub_409B60(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_409460((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_409460((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_409540(a1, a2, v12, a4, a5, a6, a7, v8, \"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_409540(a1, a2, v12, a4, a5, a6, a7, v8, \"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_409540(a1, a2, v12, a4, a5, 0, a7, v8, \"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43, v21);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41, v21);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_40A130",
            "funcStartAddr": "0x40a130",
            "funcEndAddr": "0x40a186",
            "decompiledFuncCode": "__int64 __fastcall sub_40A130(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_611560 = dword_61137C;\n  dword_611564 = dword_611378;\n  result = sub_409B60(a1, a2, a3, a4, a5, a6, &dword_611560, a7);\n  dword_61137C = dword_611560;\n  filename = (char *)qword_611570;\n  dword_611374 = dword_611568;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A190",
            "funcStartAddr": "0x40a190",
            "funcEndAddr": "0x40a1a8",
            "decompiledFuncCode": "__int64 __fastcall sub_40A190(int a1, __int64 *a2, const char *a3)\n{\n  return sub_40A130(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_40A1B0",
            "funcStartAddr": "0x40a1b0",
            "funcEndAddr": "0x40a1c3",
            "decompiledFuncCode": "__int64 __fastcall sub_40A1B0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40A130(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_40A1D0",
            "funcStartAddr": "0x40a1d0",
            "funcEndAddr": "0x40a1e5",
            "decompiledFuncCode": "__int64 __fastcall sub_40A1D0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409B60(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40A1F0",
            "funcStartAddr": "0x40a1f0",
            "funcEndAddr": "0x40a206",
            "decompiledFuncCode": "__int64 __fastcall sub_40A1F0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40A130(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_40A210",
            "funcStartAddr": "0x40a210",
            "funcEndAddr": "0x40a228",
            "decompiledFuncCode": "__int64 __fastcall sub_40A210(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409B60(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40A230",
            "funcStartAddr": "0x40a230",
            "funcEndAddr": "0x40a2aa",
            "decompiledFuncCode": "size_t __fastcall sub_40A230(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_40A790(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40A2B0",
            "funcStartAddr": "0x40a2b0",
            "funcEndAddr": "0x40a39f",
            "decompiledFuncCode": "char *__fastcall sub_40A2B0(char *path, unsigned __int64 a2)\n{\n  size_t v2; // rbx\n  char *v3; // rax\n  char *v4; // rbp\n  ssize_t v5; // r12\n  char *v7; // rdi\n\n  v2 = a2 + 1;\n  if ( a2 >= 0x401 )\n    v2 = 1025LL;\n  while ( 2 )\n  {\n    v3 = (char *)malloc(v2);\n    v4 = v3;\n    if ( v3 )\n    {\n      while ( 1 )\n      {\n        v5 = readlink(path, v3, v2);\n        if ( v5 < 0 && *__errno_location() != 34 )\n        {\n          v7 = v4;\n          v4 = 0LL;\n          free(v7);\n          return v4;\n        }\n        if ( v2 > v5 )\n        {\n          v4[v5] = 0;\n          return v4;\n        }\n        free(v4);\n        if ( v2 > 0x3FFFFFFFFFFFFFFFLL )\n          break;\n        v2 *= 2LL;\n        v3 = (char *)malloc(v2);\n        v4 = v3;\n        if ( !v3 )\n          return v4;\n      }\n      if ( v2 <= 0x7FFFFFFFFFFFFFFELL )\n      {\n        v2 = 0x7FFFFFFFFFFFFFFFLL;\n        continue;\n      }\n      v4 = 0LL;\n      *__errno_location() = 12;\n    }\n    break;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40A3A0",
            "funcStartAddr": "0x40a3a0",
            "funcEndAddr": "0x40a3aa",
            "decompiledFuncCode": "void __noreturn sub_40A3A0()\n{\n  sub_4032B0(1);\n}\n"
        },
        {
            "funcName": "sub_40A3B0",
            "funcStartAddr": "0x40a3b0",
            "funcEndAddr": "0x40a4c6",
            "decompiledFuncCode": "__int64 __fastcall sub_40A3B0(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n\n  v5 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += a4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( a3 )\n      {\n        v10 = memcmp(&a3[a4 * v14], v5, a4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += a4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    return v14;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_40A4D0",
            "funcStartAddr": "0x40a4d0",
            "funcEndAddr": "0x40a541",
            "decompiledFuncCode": "void __fastcall sub_40A4D0(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  _BYTE *v4; // rbp\n  _BYTE *v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_407E60(1, a1);\n  v5 = sub_407B50(0, 8, a2);\n  error(0, 0, v3, v5, v4);\n}\n"
        },
        {
            "funcName": "sub_40A550",
            "funcStartAddr": "0x40a550",
            "funcEndAddr": "0x40a668",
            "decompiledFuncCode": "int __fastcall sub_40A550(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  const char *v11; // rax\n  const char *v12; // rax\n  char *IO_write_ptr; // rax\n\n  v3 = 0LL;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, a2, a3) )\n    {\n      ++v9;\n      v3 = a2;\n      a2 += a3;\n      v11 = sub_407E80(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    a2 += a3;\n    v12 = sub_407E80(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  IO_write_ptr = stderr->_IO_write_ptr;\n  if ( IO_write_ptr >= stderr->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 10;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_40A670",
            "funcStartAddr": "0x40a670",
            "funcEndAddr": "0x40a6e0",
            "decompiledFuncCode": "__int64 __fastcall sub_40A670(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  __int64 result; // rax\n\n  result = sub_40A3B0(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_40A4D0(a1, (__int64)a2, result);\n    sub_40A550((__int64 *)a3, a4, a5);\n    a6();\n    return -1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A6E0",
            "funcStartAddr": "0x40a6e0",
            "funcEndAddr": "0x40a72d",
            "decompiledFuncCode": "__int64 __fastcall sub_40A6E0(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  __int64 *v6; // rbx\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v6 = a2 + 1;\n    do\n    {\n      if ( !memcmp(s1, a3, a4) )\n        break;\n      v4 = *v6;\n      a3 += a4;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40A730",
            "funcStartAddr": "0x40a730",
            "funcEndAddr": "0x40a78d",
            "decompiledFuncCode": "__int64 __fastcall sub_40A730(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_40B9A0(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n    return 0xFFFFFFFFLL;\n  }\n  if ( !(_DWORD)result )\n    return result;\n  if ( v1 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)-(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_40A790",
            "funcStartAddr": "0x40a790",
            "funcEndAddr": "0x40a7ee",
            "decompiledFuncCode": "bool __fastcall sub_40A790(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A7F0",
            "funcStartAddr": "0x40a7f0",
            "funcEndAddr": "0x40a826",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40A7F0(char *a1, unsigned __int64 a2)\n{\n  __int64 v2; // rcx\n  unsigned __int64 v3; // rax\n\n  v2 = *a1;\n  if ( !(_BYTE)v2 )\n    return 0LL;\n  v3 = 0LL;\n  do\n  {\n    ++a1;\n    v3 = v2 + __ROL8__(v3, 9);\n    v2 = *a1;\n  }\n  while ( (_BYTE)v2 );\n  return v3 % a2;\n}\n"
        },
        {
            "funcName": "sub_40A830",
            "funcStartAddr": "0x40a830",
            "funcEndAddr": "0x40ad92",
            "decompiledFuncCode": "const char *sub_40A830()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_40B9A0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_40B9A0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40ADA0",
            "funcStartAddr": "0x40ada0",
            "funcEndAddr": "0x40adc3",
            "decompiledFuncCode": "_QWORD *__fastcall sub_40ADA0(__int64 a1)\n{\n  _QWORD *result; // rax\n\n  result = sub_408A50(0x18uLL);\n  *result = a1;\n  result[2] = 0LL;\n  result[1] = 0LL;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40ADD0",
            "funcStartAddr": "0x40add0",
            "funcEndAddr": "0x40adff",
            "decompiledFuncCode": "_QWORD *sub_40ADD0()\n{\n  __int64 v0; // rbx\n  _QWORD *result; // rax\n\n  v0 = sub_40AFF0();\n  result = 0LL;\n  if ( v0 )\n  {\n    result = sub_408A50(0x18uLL);\n    *result = v0;\n    result[2] = 0LL;\n    result[1] = 0LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40AE10",
            "funcStartAddr": "0x40ae10",
            "funcEndAddr": "0x40af05",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40AE10(__int64 *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // r14\n  __int64 v4; // r12\n  unsigned __int64 v5; // rbp\n  unsigned __int64 v6; // rbx\n  unsigned __int64 v7; // rsi\n  unsigned __int64 v8; // rax\n  __int64 v9; // rdx\n  char *v10; // rax\n  __int64 v11; // rdx\n  char v13[64]; // [rsp+8h] [rbp-40h] BYREF\n\n  v2 = a2 + 1;\n  v4 = *a1;\n  v5 = a1[1];\n  v6 = a1[2];\n  while ( 1 )\n  {\n    if ( v6 >= a2 )\n    {\n      if ( v6 == a2 )\n        goto LABEL_11;\n    }\n    else\n    {\n      v8 = v6;\n      v9 = 0LL;\n      do\n      {\n        ++v9;\n        v8 = (v8 << 8) + 255;\n      }\n      while ( a2 > v8 );\n      sub_40B300(v4, v13, v9);\n      v10 = v13;\n      do\n      {\n        v11 = (unsigned __int8)*v10++;\n        v6 = (v6 << 8) + 255;\n        v5 = v11 + (v5 << 8);\n      }\n      while ( a2 > v6 );\n      if ( v6 == a2 )\n      {\nLABEL_11:\n        a1[2] = 0LL;\n        a1[1] = 0LL;\n        return v5;\n      }\n    }\n    v7 = (v6 - a2) % v2;\n    if ( v5 <= v6 - v7 )\n      break;\n    v6 = v7 - 1;\n    v5 %= v2;\n  }\n  a1[1] = v5 / v2;\n  v5 %= v2;\n  a1[2] = (v6 - a2) / v2;\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_40AF10",
            "funcStartAddr": "0x40af10",
            "funcEndAddr": "0x40af2e",
            "decompiledFuncCode": "void __fastcall sub_40AF10(void *ptr)\n{\n  __explicit_bzero_chk(ptr, 24LL, -1LL);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_40AF30",
            "funcStartAddr": "0x40af30",
            "funcEndAddr": "0x40af81",
            "decompiledFuncCode": "__int64 __fastcall sub_40AF30(void **ptr)\n{\n  unsigned int v1; // r12d\n  int *v2; // rax\n  int v3; // r13d\n  int *v4; // rbp\n\n  v1 = sub_40B460(*ptr);\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  __explicit_bzero_chk(ptr, 24LL, -1LL);\n  free(ptr);\n  *v4 = v3;\n  return v1;\n}\n"
        },
        {
            "funcName": "sub_40AF90",
            "funcStartAddr": "0x402202",
            "funcEndAddr": "0x402207",
            "decompiledFuncCode": "void __fastcall __noreturn sub_40AF90(__int64 a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_407E80(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_40AF90(__int64 a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_407E80(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n"
        },
        {
            "funcName": "sub_40AF90",
            "funcStartAddr": "0x402202",
            "funcEndAddr": "0x402207",
            "decompiledFuncCode": "void __fastcall __noreturn sub_40AF90(__int64 a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_407E80(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_40AF90(__int64 a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_407E80(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n"
        },
        {
            "funcName": "sub_40AFF0",
            "funcStartAddr": "0x40aff0",
            "funcEndAddr": "0x40b2df",
            "decompiledFuncCode": "__m128i *__fastcall sub_40AFF0(__int64 a1, unsigned __int64 a2)\n{\n  FILE *v2; // r13\n  __m128i *v3; // rax\n  size_t v4; // rcx\n  __m128i *v5; // rbx\n  __m128i *v7; // rax\n  __m128i *v8; // r13\n  int v9; // eax\n  int v10; // r15d\n  __int64 v11; // rdx\n  __int64 chk; // rbp\n  unsigned __int64 v13; // r14\n  __int64 v14; // rbp\n  unsigned int v15; // eax\n  __int64 v16; // rdx\n  unsigned __int64 v17; // rbp\n  __int64 v18; // r14\n  unsigned int v19; // eax\n  __int64 v20; // rdx\n  unsigned __int64 v21; // rbp\n  int v22; // eax\n  unsigned int v23; // edi\n  unsigned int v24; // eax\n  __int64 v25; // rdx\n  __int64 v26; // rcx\n  struct timeval *v27; // r15\n  __int64 v28; // rbp\n  __int64 v29; // r14\n  unsigned __int64 v30; // rcx\n  unsigned int v31; // [rsp+8h] [rbp-50h]\n  struct timeval tv; // [rsp+10h] [rbp-48h] BYREF\n\n  if ( !a2 )\n  {\n    v5 = (__m128i *)sub_408A50(0x1038uLL);\n    v5->m128i_i64[0] = 0LL;\n    v5->m128i_i64[1] = (__int64)sub_40AF90;\n    v5[1].m128i_i64[0] = 0LL;\n    return v5;\n  }\n  if ( !a1 )\n  {\n    v7 = (__m128i *)sub_408A50(0x1038uLL);\n    v7->m128i_i64[0] = 0LL;\n    v5 = v7;\n    v8 = v7 + 2;\n    v7->m128i_i64[1] = (__int64)sub_40AF90;\n    v7[1].m128i_i64[0] = 0LL;\n    v7[1].m128i_i64[1] = 0LL;\n    v9 = open(\"/dev/urandom\", 0);\n    v10 = v9;\n    if ( v9 < 0 )\n    {\n      v13 = 20LL;\n      gettimeofday(&tv, 0LL);\n      v5[2] = _mm_load_si128((const __m128i *)&tv);\n      LODWORD(tv.tv_sec) = getpid();\n      v5[3].m128i_i32[0] = tv.tv_sec;\n    }\n    else\n    {\n      v11 = a2;\n      if ( a2 > 0x800 )\n        v11 = 2048LL;\n      chk = __read_chk((unsigned int)v9, v8, v11, 4120LL);\n      close(v10);\n      if ( chk > 2047 )\n        goto LABEL_12;\n      if ( chk < 0 )\n        chk = 0LL;\n      v26 = 2048 - chk;\n      v27 = (struct timeval *)&v8->m128i_i8[chk];\n      if ( (unsigned __int64)(2048 - chk) > 0x10 )\n        v26 = 16LL;\n      v28 = v26 + chk;\n      v31 = v26;\n      gettimeofday(&tv, 0LL);\n      qmemcpy(v27, &tv, v31);\n      if ( v28 > 2047 )\n        goto LABEL_12;\n      v29 = 2048 - v28;\n      if ( (unsigned __int64)(2048 - v28) > 4 )\n        v29 = 4LL;\n      LODWORD(tv.tv_sec) = getpid();\n      v30 = (unsigned int)v29;\n      v13 = v28 + v29;\n      qmemcpy(&v8->m128i_i8[v28], &tv, v30);\n      if ( v13 > 0x7FF )\n        goto LABEL_12;\n    }\n    v14 = 2048 - v13;\n    if ( 2048 - v13 > 4 )\n      v14 = 4LL;\n    LODWORD(tv.tv_sec) = getppid();\n    if ( (_DWORD)v14 )\n    {\n      v15 = 0;\n      do\n      {\n        v16 = v15++;\n        v8->m128i_i8[v13 + v16] = *((_BYTE *)&tv.tv_sec + v16);\n      }\n      while ( v15 < (unsigned int)v14 );\n    }\n    v17 = v13 + v14;\n    if ( v17 <= 0x7FF )\n    {\n      v18 = 2048 - v17;\n      if ( 2048 - v17 > 4 )\n        v18 = 4LL;\n      LODWORD(tv.tv_sec) = getuid();\n      if ( (_DWORD)v18 )\n      {\n        v19 = 0;\n        do\n        {\n          v20 = v19++;\n          v8->m128i_i8[v17 + v20] = *((_BYTE *)&tv.tv_sec + v20);\n        }\n        while ( v19 < (unsigned int)v18 );\n      }\n      v21 = v18 + v17;\n      if ( v21 <= 0x7FF )\n      {\n        LODWORD(tv.tv_sec) = getgid();\n        v22 = 2048 - v21;\n        if ( 2048 - v21 > 4 )\n          v22 = 4;\n        v23 = v22;\n        if ( v22 )\n        {\n          v24 = 0;\n          do\n          {\n            v25 = v24++;\n            v8->m128i_i8[v21 + v25] = *((_BYTE *)&tv.tv_sec + v25);\n          }\n          while ( v24 < v23 );\n        }\n      }\n    }\nLABEL_12:\n    sub_40B760(v8);\n    return v5;\n  }\n  v2 = (FILE *)sub_40BA20(a1, \"rb\");\n  if ( !v2 )\n    return 0LL;\n  v3 = (__m128i *)sub_408A50(0x1038uLL);\n  v4 = 4096LL;\n  v3->m128i_i64[0] = (__int64)v2;\n  if ( a2 <= 0x1000 )\n    v4 = a2;\n  v3->m128i_i64[1] = (__int64)sub_40AF90;\n  v5 = v3;\n  v3[1].m128i_i64[0] = a1;\n  setvbuf(v2, &v3[1].m128i_i8[8], 0, v4);\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_40B300",
            "funcStartAddr": "0x40b300",
            "funcEndAddr": "0x40b45c",
            "decompiledFuncCode": "__int64 __fastcall sub_40B300(__int64 a1, char *a2, size_t a3)\n{\n  size_t v5; // rbx\n  FILE *v6; // r13\n  int *v7; // r14\n  __int64 v8; // rdi\n  int v9; // edx\n  __int64 result; // rax\n  size_t v11; // r15\n  char *v12; // r13\n  __int64 v13; // r14\n  void *v14; // rdi\n  char *v15; // rsi\n\n  v5 = a3;\n  v6 = *(FILE **)a1;\n  if ( *(_QWORD *)a1 )\n  {\n    v7 = __errno_location();\n    while ( 1 )\n    {\n      result = fread_unlocked(a2, 1uLL, v5, v6);\n      v9 = *v7;\n      a2 += result;\n      v5 -= result;\n      if ( !v5 )\n        break;\n      v8 = *(_QWORD *)(a1 + 16);\n      if ( (**(_BYTE **)a1 & 0x20) == 0 )\n        v9 = 0;\n      *v7 = v9;\n      (*(void (__fastcall **)(__int64))(a1 + 8))(v8);\n      v6 = *(FILE **)a1;\n    }\n  }\n  else\n  {\n    v11 = *(_QWORD *)(a1 + 24);\n    v12 = (char *)(a1 + 2104);\n    v13 = a1 + 32;\n    if ( a3 <= v11 )\n    {\n      v12 = &v12[-v11 + 2048];\nLABEL_16:\n      result = (__int64)memcpy(a2, v12, v5);\n      *(_QWORD *)(a1 + 24) = v11 - v5;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v14 = a2;\n        a2 += v11;\n        v5 -= v11;\n        memcpy(v14, &v12[2048 - v11], v11);\n        if ( ((unsigned __int8)a2 & 7) == 0 )\n          break;\n        v11 = 2048LL;\n        sub_40B4B0(v13, v12);\n        if ( v5 <= 0x800 )\n        {\nLABEL_15:\n          v11 = 2048LL;\n          goto LABEL_16;\n        }\n      }\n      do\n      {\n        if ( v5 <= 0x7FF )\n        {\n          sub_40B4B0(v13, v12);\n          goto LABEL_15;\n        }\n        v15 = a2;\n        a2 += 2048;\n        result = sub_40B4B0(v13, v15);\n        v5 -= 2048LL;\n      }\n      while ( v5 );\n      *(_QWORD *)(a1 + 24) = 0LL;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B460",
            "funcStartAddr": "0x40b460",
            "funcEndAddr": "0x40b4a9",
            "decompiledFuncCode": "__int64 __fastcall sub_40B460(FILE **ptr)\n{\n  FILE *v1; // rbp\n\n  v1 = *ptr;\n  __explicit_bzero_chk(ptr, 4152LL, -1LL);\n  free(ptr);\n  if ( v1 )\n    return sub_40B9A0(v1);\n  else\n    return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40B4B0",
            "funcStartAddr": "0x40b4b0",
            "funcEndAddr": "0x40b755",
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_40B4B0(unsigned __int64 *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 v2; // r11\n  unsigned __int64 v3; // rdx\n  unsigned __int64 *v4; // r9\n  __int64 v5; // r8\n  unsigned __int64 *result; // rax\n  unsigned __int64 v7; // r11\n  unsigned __int64 v8; // rcx\n  unsigned __int64 v9; // rdx\n  unsigned __int64 v10; // r8\n  unsigned __int64 v11; // rbx\n  unsigned __int64 v12; // r8\n  unsigned __int64 v13; // r11\n  unsigned __int64 v14; // rcx\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // rcx\n  unsigned __int64 v17; // rdx\n  unsigned __int64 v18; // r8\n  unsigned __int64 v19; // rcx\n  unsigned __int64 v20; // r8\n  unsigned __int64 v21; // rcx\n  unsigned __int64 *v22; // rsi\n  unsigned __int64 v23; // rcx\n  unsigned __int64 v24; // rdx\n  unsigned __int64 v25; // rbx\n  unsigned __int64 v26; // rcx\n  unsigned __int64 v27; // r8\n  unsigned __int64 v28; // r10\n  unsigned __int64 v29; // rcx\n  unsigned __int64 v30; // r11\n  unsigned __int64 v31; // rcx\n  unsigned __int64 v32; // rdx\n  unsigned __int64 v33; // r8\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // r8\n  unsigned __int64 v36; // rcx\n\n  v2 = a1[257];\n  v3 = a1[256];\n  v4 = a2;\n  v5 = a1[258] + 1;\n  result = a1;\n  a1[258] = v5;\n  v7 = v5 + v2;\n  do\n  {\n    v8 = *result;\n    v9 = result[128] + ~((v3 << 21) ^ v3);\n    v10 = v7 + v9 + *(unsigned __int64 *)((char *)a1 + (*result & 0x7F8));\n    *result = v10;\n    v11 = v8 + *(unsigned __int64 *)((char *)a1 + ((v10 >> 8) & 0x7F8));\n    *v4 = v11;\n    v12 = result[1];\n    v13 = result[129] + ((v9 >> 5) ^ v9);\n    v14 = v11 + v13 + *(unsigned __int64 *)((char *)a1 + (v12 & 0x7F8));\n    result[1] = v14;\n    v15 = v12 + *(unsigned __int64 *)((char *)a1 + ((v14 >> 8) & 0x7F8));\n    v4[1] = v15;\n    v16 = result[2];\n    v17 = result[130] + (v13 ^ (v13 << 12));\n    v18 = v15 + v17 + *(unsigned __int64 *)((char *)a1 + (v16 & 0x7F8));\n    result[2] = v18;\n    v19 = *(unsigned __int64 *)((char *)a1 + ((v18 >> 8) & 0x7F8)) + v16;\n    v4[2] = v19;\n    v20 = result[3];\n    v3 = result[131] + ((v17 >> 33) ^ v17);\n    v21 = v19 + v3 + *(unsigned __int64 *)((char *)a1 + (v20 & 0x7F8));\n    result += 4;\n    v4 += 4;\n    *(result - 1) = v21;\n    v7 = v20 + *(unsigned __int64 *)((char *)a1 + ((v21 >> 8) & 0x7F8));\n    *(v4 - 1) = v7;\n  }\n  while ( result != a1 + 128 );\n  v22 = a2 + 128;\n  do\n  {\n    v23 = *result;\n    v24 = *(result - 128) + ~((v3 << 21) ^ v3);\n    v25 = v24 + *(unsigned __int64 *)((char *)a1 + (*result & 0x7F8));\n    *result = v7 + v25;\n    v26 = *(unsigned __int64 *)((char *)a1 + (((v7 + v25) >> 8) & 0x7F8)) + v23;\n    *v22 = v26;\n    v27 = result[1];\n    v28 = *(result - 127) + ((v24 >> 5) ^ v24);\n    v29 = v26 + v28 + *(unsigned __int64 *)((char *)a1 + (v27 & 0x7F8));\n    result[1] = v29;\n    v30 = v27 + *(unsigned __int64 *)((char *)a1 + ((v29 >> 8) & 0x7F8));\n    v22[1] = v30;\n    v31 = result[2];\n    v32 = *(result - 126) + (v28 ^ (v28 << 12));\n    v33 = v30 + v32 + *(unsigned __int64 *)((char *)a1 + (v31 & 0x7F8));\n    result[2] = v33;\n    v34 = *(unsigned __int64 *)((char *)a1 + ((v33 >> 8) & 0x7F8)) + v31;\n    v22[2] = v34;\n    v35 = result[3];\n    v3 = *(result - 125) + ((v32 >> 33) ^ v32);\n    v36 = v34 + v3 + *(unsigned __int64 *)((char *)a1 + (v35 & 0x7F8));\n    result += 4;\n    v22 += 4;\n    *(result - 1) = v36;\n    v7 = v35 + *(unsigned __int64 *)((char *)a1 + ((v36 >> 8) & 0x7F8));\n    *(v22 - 1) = v7;\n  }\n  while ( result != a1 + 256 );\n  a1[256] = v3;\n  a1[257] = v7;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B760",
            "funcStartAddr": "0x40b760",
            "funcEndAddr": "0x40b994",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40B760(__int64 *a1)\n{\n  __int64 *v1; // rdx\n  __int64 *v2; // rax\n  unsigned __int64 v3; // rcx\n  unsigned __int64 v4; // rsi\n  unsigned __int64 v5; // r11\n  unsigned __int64 v6; // r12\n  unsigned __int64 v7; // r10\n  unsigned __int64 v8; // r9\n  __int64 *v9; // rbp\n  __int64 v10; // r8\n  __int64 v11; // rbx\n  unsigned __int64 v12; // rsi\n  unsigned __int64 v13; // rcx\n  __int64 v14; // r8\n  __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  unsigned __int64 v18; // r10\n  unsigned __int64 v19; // rcx\n  unsigned __int64 v20; // r11\n  unsigned __int64 v21; // rsi\n  unsigned __int64 v22; // rbx\n  unsigned __int64 v23; // r13\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rcx\n  unsigned __int64 v26; // rsi\n  unsigned __int64 v27; // r8\n  __int64 v28; // rbx\n  unsigned __int64 v29; // r9\n  unsigned __int64 v30; // r12\n  unsigned __int64 v31; // r10\n  unsigned __int64 v32; // rcx\n  unsigned __int64 v33; // r11\n  unsigned __int64 v34; // rsi\n  unsigned __int64 v35; // rbx\n  unsigned __int64 result; // rax\n  unsigned __int64 v37; // r12\n\n  v1 = a1;\n  v2 = a1;\n  v3 = 0x98F5704F6C44C0ABLL;\n  v4 = 0x82F053DB8355E0CELL;\n  v5 = 0xB29B2E824A595524LL;\n  v6 = 0xAE985BF2CBFC89EDLL;\n  v7 = 0x8C0EA5053D4712A0LL;\n  v8 = 0xB9F8B322C73AC862LL;\n  v9 = a1 + 256;\n  v10 = 0x647C4677A2884B7CLL;\n  v11 = 0x48FE4A0FA5A09315LL;\n  do\n  {\n    v12 = v2[4] + v4;\n    v13 = v2[7] + v3;\n    v14 = *v2 - v12 + v10;\n    v15 = (v13 >> 9) ^ (v2[5] + v11);\n    v16 = v2[1] - v15 + v8;\n    v17 = (v14 << 9) ^ (v2[6] + v6);\n    v18 = v2[2] - v17 + v7;\n    v19 = (v16 >> 23) ^ (v14 + v13);\n    v20 = v2[3] - v19 + v5;\n    v10 = (v18 << 15) ^ (v16 + v14);\n    v21 = v12 - v10;\n    *v2 = v10;\n    v8 = (v20 >> 14) ^ (v18 + v16);\n    v22 = v15 - v8;\n    v2[1] = v8;\n    v7 = (v21 << 20) ^ (v20 + v18);\n    v23 = v21 + v22;\n    v24 = v17 - v7;\n    v2[2] = v7;\n    v2 += 8;\n    v5 = (v22 >> 17) ^ (v21 + v20);\n    v11 = v24 + v22;\n    v3 = v19 - v5;\n    *(v2 - 5) = v5;\n    v4 = v23 ^ (v24 << 14);\n    v6 = v3 + v24;\n    *(v2 - 3) = v11;\n    *(v2 - 4) = v4;\n    *(v2 - 2) = v6;\n    *(v2 - 1) = v3;\n  }\n  while ( v9 != v2 );\n  do\n  {\n    v25 = v1[7] + v3;\n    v26 = v1[4] + v4;\n    v27 = *v1 + v10 - v26;\n    v28 = (v25 >> 9) ^ (v1[5] + v11);\n    v29 = v1[1] + v8 - v28;\n    v30 = (v27 << 9) ^ (v1[6] + v6);\n    v31 = v1[2] + v7 - v30;\n    v32 = (v29 >> 23) ^ (v27 + v25);\n    v33 = v1[3] + v5 - v32;\n    v10 = (v31 << 15) ^ (v29 + v27);\n    v34 = v26 - v10;\n    *v1 = v10;\n    v8 = (v33 >> 14) ^ (v31 + v29);\n    v35 = v28 - v8;\n    v1[1] = v8;\n    v7 = (v34 << 20) ^ (v33 + v31);\n    result = v34 + v35;\n    v37 = v30 - v7;\n    v1[2] = v7;\n    v1 += 8;\n    v5 = (v35 >> 17) ^ (v34 + v33);\n    v11 = v37 + v35;\n    v3 = v32 - v5;\n    *(v1 - 5) = v5;\n    v4 = result ^ (v37 << 14);\n    v6 = v3 + v37;\n    *(v1 - 3) = v11;\n    *(v1 - 4) = v4;\n    *(v1 - 2) = v6;\n    *(v1 - 1) = v3;\n  }\n  while ( v9 != v1 );\n  a1[258] = 0LL;\n  a1[257] = 0LL;\n  a1[256] = 0LL;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B9A0",
            "funcStartAddr": "0x40b9a0",
            "funcEndAddr": "0x40ba1b",
            "decompiledFuncCode": "int __fastcall sub_40B9A0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !sub_408EC0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40BA20",
            "funcStartAddr": "0x40ba20",
            "funcEndAddr": "0x40bab3",
            "decompiledFuncCode": "FILE *__fastcall sub_40BA20(const char *a1, const char *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  unsigned int v4; // eax\n  int v6; // r12d\n  int *v7; // rax\n  int v8; // ebp\n  int *v9; // rbx\n  int *v10; // rax\n  FILE *v11; // rdi\n  int v12; // r12d\n  int *v13; // rbp\n\n  v2 = fopen(a1, a2);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = fileno(v2);\n    if ( v4 <= 2 )\n    {\n      v6 = sub_40BAC0(v4);\n      if ( v6 < 0 )\n      {\n        v10 = __errno_location();\n        v11 = v3;\n        v3 = 0LL;\n        v12 = *v10;\n        v13 = v10;\n        sub_40B9A0(v11);\n        *v13 = v12;\n      }\n      else if ( sub_40B9A0(v3) || (v3 = fdopen(v6, a2)) == 0LL )\n      {\n        v7 = __errno_location();\n        v8 = *v7;\n        v9 = v7;\n        close(v6);\n        *v9 = v8;\n        return 0LL;\n      }\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40BAC0",
            "funcStartAddr": "0x40bac0",
            "funcEndAddr": "0x40bace",
            "decompiledFuncCode": "__int64 __fastcall sub_40BAC0(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_408D80(a1, 0, 3LL, a4, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_40BB40",
            "funcStartAddr": "0x40bb40",
            "funcEndAddr": "0x40bb58",
            "decompiledFuncCode": "int __fastcall sub_40BB40(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_6112E8 )\n    v1 = (void *)qword_6112E8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_40BB58",
            "funcStartAddr": "0x40bb58",
            "funcEndAddr": "0x40bb78",
            "decompiledFuncCode": "__int64 __fastcall sub_40BB58(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_610E30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 151
}