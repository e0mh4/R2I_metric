{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401b60",
            "funcEndAddr": "0x4028d0",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  char *v3; // rbx\n  char *v4; // rax\n  int v5; // eax\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // r14\n  __int64 v9; // rax\n  __int64 v10; // rdx\n  char v11; // dl\n  __int64 v12; // r13\n  char *v13; // rax\n  bool v14; // zf\n  const char *v15; // r14\n  const char *v16; // r13\n  const char *v17; // r15\n  const char *v18; // rax\n  _BOOL4 v19; // eax\n  int v20; // eax\n  __int64 v21; // rax\n  int i; // ebx\n  char *v24; // rdi\n  char *v25; // rcx\n  __ssize_t v26; // rax\n  char *v28; // rax\n  char v29; // r15\n  const char *v30; // rcx\n  size_t v31; // rax\n  char v32; // dl\n  int *v33; // rax\n  __int64 v34; // rax\n  char *v35; // r8\n  __int64 v36; // r9\n  size_t v37; // rax\n  size_t v38; // rax\n  char *v39; // r13\n  char v40; // dl\n  size_t v41; // rcx\n  char *v42; // rax\n  char *v43; // rax\n  char *v44; // rax\n  char *v45; // rbp\n  int *v46; // rax\n  char *v47; // rax\n  const char *v48; // r15\n  __int64 v49; // rax\n  const unsigned __int16 **v50; // rax\n  __int64 v51; // rcx\n  char *v52; // rax\n  char *v53; // rax\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  char *v57; // rax\n  char *v58; // rax\n  __int64 v59; // rbx\n  char *v60; // rax\n  __int64 v61; // rbx\n  char *v62; // rax\n  char *v63; // rax\n  char *v64; // rax\n  char *nptr; // [rsp+0h] [rbp-58h]\n  char *nptra; // [rsp+0h] [rbp-58h]\n  char *nptrb; // [rsp+0h] [rbp-58h]\n  const char *v68; // [rsp+8h] [rbp-50h]\n  int *v69; // [rsp+8h] [rbp-50h]\n  __int64 v70; // [rsp+8h] [rbp-50h]\n  char *s; // [rsp+10h] [rbp-48h] BYREF\n  size_t n[8]; // [rsp+18h] [rbp-40h] BYREF\n\n  sub_405970(*a2);\n  v3 = setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  v4 = nl_langinfo(0x10000);\n  s2 = v4;\n  if ( !v4 || !*v4 )\n    s2 = \".\";\n  dword_61033C = strlen(s2);\n  sub_409FA0(sub_405490);\n  while ( 1 )\n  {\n    v5 = sub_4096E0((unsigned int)a1, a2, \"d:z\", &off_40BD80, 0LL);\n    if ( v5 == -1 )\n      break;\n    if ( v5 == 132 )\n      goto LABEL_51;\n    if ( v5 <= 132 )\n    {\n      if ( v5 == 122 )\n      {\n        byte_610250 = 0;\n      }\n      else if ( v5 <= 122 )\n      {\n        if ( v5 == -130 )\n          sub_404360(0);\n        if ( v5 != 100 )\n        {\n          if ( v5 == -131 )\n          {\n            sub_407A10(\n              (_DWORD)stdout,\n              (unsigned int)\"numfmt\",\n              (unsigned int)&unk_40A199,\n              (_DWORD)off_610280,\n              (unsigned int)\"Assaf Gordon\",\n              0);\n            exit(0);\n          }\nLABEL_40:\n          sub_404360(1);\n        }\n        if ( *::nptr && ::nptr[1] )\n          goto LABEL_170;\n        dword_610254 = *::nptr;\n      }\n      else if ( v5 == 129 )\n      {\n        qword_610270 = sub_4029B0(::nptr);\n      }\n      else if ( v5 <= 129 )\n      {\n        if ( v5 != 128 )\n          goto LABEL_40;\n        HIDWORD(qword_6103AC) = dword_40C0D0[sub_4053B0(\"--from\", ::nptr, off_40C100, dword_40C0D0, 4LL, off_610288)];\n      }\n      else if ( v5 == 130 )\n      {\n        LODWORD(qword_6103AC) = dword_40C090[sub_4053B0(\"--to\", ::nptr, off_40C0A0, dword_40C090, 4LL, off_610288)];\n      }\n      else\n      {\n        qword_610268 = sub_4029B0(::nptr);\n      }\n    }\n    else\n    {\n      if ( v5 == 137 )\n        goto LABEL_42;\n      if ( v5 > 137 )\n      {\n        if ( v5 == 139 )\n        {\n          if ( ::nptr )\n          {\n            if ( (unsigned int)sub_408550(::nptr) || !qword_610350 )\n            {\n              v3 = (char *)sub_407590(::nptr);\n              v6 = dcgettext(0LL, \"invalid header value %s\", 5);\n              error(1, 0, v6, v3);\nLABEL_51:\n              dword_610278 = dword_40C030[sub_4053B0(\"--round\", ::nptr, off_40C060, dword_40C030, 4LL, off_610288)];\n            }\n          }\n          else\n          {\n            qword_610350 = 1LL;\n          }\n        }\n        else if ( v5 < 139 )\n        {\n          byte_610338 = 1;\nLABEL_42:\n          byte_610348 = 1;\n        }\n        else if ( v5 == 140 )\n        {\n          qword_610370 = (__int64)::nptr;\n        }\n        else\n        {\n          if ( v5 != 141 )\n            goto LABEL_40;\n          dword_6103A8 = dword_40BFE0[sub_4053B0(\"--invalid\", ::nptr, off_40C000, dword_40BFE0, 4LL, off_610288)];\n        }\n      }\n      else if ( v5 == 134 )\n      {\n        dword_610398 = 1;\n      }\n      else if ( v5 < 134 )\n      {\n        s1 = ::nptr;\n      }\n      else if ( v5 == 135 )\n      {\n        if ( (unsigned int)sub_407E00(::nptr) || !qword_610380 )\n          goto LABEL_168;\n        if ( qword_610380 < 0 )\n        {\n          dword_610258 = 0;\n          qword_610380 = -qword_610380;\n        }\n      }\n      else\n      {\n        if ( nmemb )\n          goto LABEL_169;\n        sub_404B00(::nptr, 1LL);\n      }\n    }\n  }\n  if ( qword_610370 && dword_610398 )\n    goto LABEL_162;\n  if ( !v3 && byte_610348 )\n  {\n    v43 = dcgettext(0LL, \"failed to set locale\", 5);\n    error(0, 0, v43);\n  }\n  if ( !byte_610348 || qword_6103AC )\n    goto LABEL_65;\n  v3 = (char *)qword_610370;\n  if ( dword_610398 )\n  {\n    if ( qword_610370 )\n      goto LABEL_66;\nLABEL_109:\n    if ( byte_610348 && !*nl_langinfo(65537) )\n    {\n      v28 = dcgettext(0LL, \"grouping has no effect in this locale\", 5);\n      error(0, 0, v28);\n    }\n    goto LABEL_82;\n  }\n  if ( qword_610380 )\n  {\n    if ( !qword_610370 )\n      goto LABEL_82;\n  }\n  else if ( !qword_610370 )\n  {\n    v7 = dcgettext(0LL, \"no conversion option specified\", 5);\n    error(0, 0, v7);\nLABEL_65:\n    v3 = (char *)qword_610370;\n    if ( !qword_610370 )\n      goto LABEL_81;\n  }\nLABEL_66:\n  n[0] = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  while ( 2 )\n  {\n    v11 = v3[v9];\n    if ( v11 != 37 )\n    {\n      if ( v11 )\n      {\n        v10 = 1LL;\nLABEL_69:\n        v9 += v10;\n        ++v8;\n        continue;\n      }\n      v3 = (char *)sub_407590(v3);\n      v52 = dcgettext(0LL, \"format %s has no %% directive\", 5);\n      error(1, 0, v52, v3);\n      goto LABEL_161;\n    }\n    break;\n  }\n  v12 = v9 + 1;\n  if ( v3[v9 + 1] == 37 )\n  {\n    v10 = 2LL;\n    goto LABEL_69;\n  }\n  v29 = 0;\n  v30 = &v3[v12];\n  do\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v31 = strspn(v30, \" \");\n        v12 += v31;\n        v30 = &v3[v12];\n        v32 = v3[v12];\n        if ( v32 != 39 )\n          break;\n        dword_610398 = 1;\n        v30 = &v3[++v12];\n      }\n      if ( v32 != 48 )\n        break;\n      ++v12;\n      v29 = 1;\n      v30 = &v3[v12];\n    }\n  }\n  while ( v31 );\n  v33 = __errno_location();\n  *v33 = 0;\n  v69 = v33;\n  v34 = strtol(&v3[v12], (char **)n, 10);\n  v35 = (char *)v69;\n  v36 = v34;\n  if ( *v69 == 34 )\n  {\nLABEL_161:\n    v3 = (char *)sub_407590(v3);\n    v53 = dcgettext(0LL, \"invalid format %s (width overflow)\", 5);\n    error(1, 0, v53, v3);\nLABEL_162:\n    v54 = dcgettext(0LL, \"--grouping cannot be combined with --format\", 5);\n    error(1, 0, v54);\nLABEL_163:\n    v55 = dcgettext(0LL, \"grouping cannot be combined with --to\", 5);\n    error(1, 0, v55);\nLABEL_164:\n    v3 = (char *)sub_407590(v3);\n    v56 = dcgettext(0LL, \"format %s has too many %% directives\", 5);\n    error(1, 0, v56, v3);\n    goto LABEL_165;\n  }\n  if ( (char *)n[0] != &v3[v12] && v34 )\n  {\n    if ( byte_610348 && qword_610380 )\n    {\n      if ( v29 && v34 > 0 )\n      {\nLABEL_123:\n        qword_610378 = v36;\n        goto LABEL_124;\n      }\n      nptra = (char *)v69;\n      v70 = v34;\n      v47 = dcgettext(0LL, \"--format padding overriding --padding\", 5);\n      error(0, 0, v47);\n      v36 = v70;\n      v35 = nptra;\n    }\n    if ( v36 < 0 )\n    {\n      dword_610258 = 0;\n      qword_610380 = -v36;\n    }\n    else\n    {\n      if ( v29 )\n        goto LABEL_123;\n      qword_610380 = v36;\n    }\n  }\nLABEL_124:\n  v37 = n[0] - (_QWORD)v3;\n  if ( !*(_BYTE *)n[0] )\n    goto LABEL_166;\n  if ( *(_BYTE *)n[0] != 46 )\n    goto LABEL_126;\n  *(_DWORD *)v35 = 0;\n  v48 = &v3[v37 + 1];\n  nptrb = v35;\n  v49 = strtol(v48, (char **)n, 10);\n  qword_610260 = v49;\n  if ( *(_DWORD *)nptrb == 34\n    || v49 < 0\n    || (v50 = __ctype_b_loc(), v51 = *v48, ((*v50)[v51] & 1) != 0)\n    || (_BYTE)v51 == 43 )\n  {\nLABEL_167:\n    v59 = sub_407590(v3);\n    v60 = dcgettext(0LL, \"invalid precision in format %s\", 5);\n    error(1, 0, v60, v59);\nLABEL_168:\n    v61 = sub_407590(::nptr);\n    v62 = dcgettext(0LL, \"invalid padding value %s\", 5);\n    error(1, 0, v62, v61);\nLABEL_169:\n    v63 = dcgettext(0LL, \"multiple field specifications\", 5);\n    error(1, 0, v63);\nLABEL_170:\n    v64 = dcgettext(0LL, \"the delimiter must be a single character\", 5);\n    error(1, 0, v64);\n    start();\n  }\n  v37 = n[0] - (_QWORD)v3;\nLABEL_126:\n  if ( v3[v37] != 102 )\n  {\nLABEL_165:\n    v3 = (char *)sub_407590(v3);\n    v57 = dcgettext(0LL, \"invalid format %s, directive must be %%[0]['][-][N][.][N]f\", 5);\n    error(1, 0, v57, v3);\nLABEL_166:\n    v3 = (char *)sub_407590(v3);\n    v58 = dcgettext(0LL, \"format %s ends in %%\", 5);\n    error(1, 0, v58, v3);\n    goto LABEL_167;\n  }\n  v38 = v37 + 1;\n  v39 = &v3[v38];\n  v40 = v3[v38];\n  if ( v40 )\n  {\n    do\n    {\n      v41 = v38 + 1;\n      if ( v40 == 37 )\n      {\n        if ( v3[v38 + 1] != 37 )\n          goto LABEL_164;\n        v41 = v38 + 2;\n        v40 = v3[v38 + 2];\n      }\n      else\n      {\n        v40 = v3[v38 + 1];\n      }\n      v38 = v41;\n    }\n    while ( v40 );\n    if ( v8 )\n    {\nLABEL_74:\n      v13 = (char *)sub_407DE0(v3, v8);\n      v14 = *v39 == 0;\n      qword_610368 = v13;\n      if ( v14 )\n        goto LABEL_75;\n    }\n    qword_610360 = (char *)sub_407D80(v39);\n    goto LABEL_75;\n  }\n  if ( v8 )\n    goto LABEL_74;\nLABEL_75:\n  if ( byte_610338 )\n  {\n    v68 = (const char *)sub_407570(2LL);\n    v15 = \"Left\";\n    v16 = \"yes\";\n    v17 = (const char *)sub_407570(1LL);\n    if ( dword_610258 )\n      v15 = \"Right\";\n    nptr = (char *)qword_610380;\n    if ( !dword_610398 )\n      v16 = \"no\";\n    v18 = (const char *)sub_407570(0LL);\n    __fprintf_chk(\n      stderr,\n      1LL,\n      \"format String:\\n  input: %s\\n  grouping: %s\\n  padding width: %ld\\n  alignment: %s\\n  prefix: %s\\n  suffix: %s\\n\",\n      v18,\n      v16,\n      nptr,\n      v15,\n      v17,\n      v68);\n  }\nLABEL_81:\n  if ( dword_610398 )\n  {\n    if ( !(_DWORD)qword_6103AC )\n      goto LABEL_109;\n    goto LABEL_163;\n  }\nLABEL_82:\n  if ( qword_610380 >= (unsigned __int64)qword_610388 )\n    sub_402BD0();\n  v19 = 0;\n  if ( !qword_610380 )\n    v19 = dword_610254 == 128;\n  dword_610358 = v19;\n  if ( dword_6103A8 )\n    status = 0;\n  v20 = dword_6102FC;\n  if ( dword_6102FC < a1 )\n  {\n    if ( !byte_610348\n      || !qword_610350\n      || (v44 = dcgettext(0LL, \"--header ignored with command-line input\", 5),\n          error(0, 0, v44),\n          v20 = dword_6102FC,\n          a1 > dword_6102FC) )\n    {\n      i = 1;\n      do\n      {\n        i &= sub_4041A0(a2[v20]);\n        v20 = dword_6102FC + 1;\n        dword_6102FC = v20;\n      }\n      while ( v20 < a1 );\n      goto LABEL_100;\n    }\n    return 0LL;\n  }\n  v21 = qword_610350;\n  s = 0LL;\n  n[0] = 0LL;\n  --qword_610350;\n  if ( v21 )\n  {\n    do\n    {\n      if ( getdelim(&s, n, (unsigned __int8)byte_610250, stdin) <= 0 )\n        break;\n      fputs_unlocked(s, stdout);\n    }\n    while ( qword_610350-- );\n  }\n  for ( i = 1; ; i &= sub_4041A0(v24) )\n  {\n    v26 = getdelim(&s, n, (unsigned __int8)byte_610250, stdin);\n    if ( v26 <= 0 )\n      break;\n    v24 = s;\n    v25 = &s[v26 - 1];\n    if ( *v25 == (unsigned __int8)byte_610250 )\n    {\n      *v25 = 0;\n      v24 = s;\n    }\n  }\n  if ( (stdin->_flags & 0x20) != 0 )\n  {\n    v45 = dcgettext(0LL, \"error reading input\", 5);\n    v46 = __errno_location();\n    error(0, *v46, v45);\n  }\nLABEL_100:\n  if ( !byte_610348 )\n  {\n    if ( !i )\n      goto LABEL_137;\n    return 0LL;\n  }\n  if ( i )\n    return 0LL;\n  v42 = dcgettext(0LL, \"failed to convert some of the input numbers\", 5);\n  error(0, 0, v42);\nLABEL_137:\n  if ( (unsigned int)(dword_6103A8 - 2) <= 1 )\n    return 0LL;\n  return 2LL;\n}\n"
        },
        {
            "funcName": "sub_4028FB",
            "funcStartAddr": "0x4028fb",
            "funcEndAddr": "0x40291a",
            "decompiledFuncCode": "__int64 *sub_4028FB()\n{\n  return &program_invocation_short_name;\n}\n"
        },
        {
            "funcName": "sub_40291A",
            "funcStartAddr": "0x40291a",
            "funcEndAddr": "0x402951",
            "decompiledFuncCode": "__int64 sub_40291A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_402951",
            "funcStartAddr": "0x402951",
            "funcEndAddr": "0x4029a8",
            "decompiledFuncCode": "__int64 *sub_402951()\n{\n  __int64 *result; // rax\n\n  if ( !byte_610328 )\n  {\n    while ( qword_610330 < (unsigned __int64)(&qword_60FE48 - qword_60FE40 - 1) )\n      ((void (*)(void))qword_60FE40[++qword_610330])();\n    result = sub_4028FB();\n    byte_610328 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4029A8",
            "funcStartAddr": "0x4029a8",
            "funcEndAddr": "0x4029ad",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_4029A8()\n{\n  return sub_40291A();\n}\n"
        },
        {
            "funcName": "sub_4029B0",
            "funcStartAddr": "0x4029b0",
            "funcEndAddr": "0x402af0",
            "decompiledFuncCode": "__int64 __fastcall sub_4029B0(char *nptr)\n{\n  size_t v1; // rax\n  size_t v2; // rbx\n  size_t v3; // r12\n  char *v4; // r9\n  char *v5; // r12\n  char *v7; // rax\n  char *v8; // r12\n  __int64 v9; // rbx\n  char *v10; // rax\n  char *v11; // [rsp+0h] [rbp-28h]\n  __int64 v12; // [rsp+8h] [rbp-20h]\n\n  v1 = strlen(nptr);\n  v11 = 0LL;\n  if ( v1 && (v2 = v1, v3 = v1 - 1, (unsigned int)(nptr[v1 - 1] - 48) > 9) )\n  {\n    v7 = (char *)sub_407B50(v1 + 2);\n    v8 = &v7[v3];\n    v11 = v8;\n    v4 = (char *)memcpy(v7, nptr, v2);\n    if ( *v8 != 105 || v2 == 1 || (unsigned int)(*(v8 - 1) - 48) <= 9 )\n    {\n      v11 = v8 + 2;\n      *(_WORD *)(v8 + 1) = 66;\n      v5 = v4;\n    }\n    else\n    {\n      *v8 = 0;\n      v5 = v4;\n    }\n  }\n  else\n  {\n    v4 = nptr;\n    v5 = 0LL;\n  }\n  if ( (unsigned int)sub_408550(v4) || *v11 || !v12 )\n  {\n    free(v5);\n    v9 = sub_407590(nptr);\n    v10 = dcgettext(0LL, \"invalid unit size: %s\", 5);\n    error(1, 0, v10, v9);\n    return sub_402AF0();\n  }\n  else\n  {\n    free(v5);\n    return v12;\n  }\n}\n"
        },
        {
            "funcName": "sub_402AF0",
            "funcStartAddr": "0x402af0",
            "funcEndAddr": "0x402bc9",
            "decompiledFuncCode": "__int64 __fastcall sub_402AF0(const char **a1, long double *a2, _BYTE *a3)\n{\n  const char *v4; // rcx\n  unsigned int v5; // edx\n  const char *v6; // rcx\n  __int64 result; // rax\n  unsigned int v8; // r8d\n  long double v9; // fst7\n  int v10; // edx\n  int v11; // edx\n\n  v4 = *a1;\n  if ( *a1 )\n  {\n    v5 = *v4 - 48;\n    if ( v5 <= 9 )\n    {\n      v6 = v4 + 1;\n      result = 0LL;\n      v8 = 0;\n      v9 = 0.0;\n      while ( 1 )\n      {\n        if ( 0.0 != v9 || v5 )\n          ++v8;\n        if ( v8 > 0x12 )\n        {\n          if ( v8 > 0x1B )\n            return 2LL;\n          result = 1LL;\n        }\n        *a1 = v6;\n        v9 = v9 * 10.0 + (long double)(int)v5;\n        if ( v6 )\n        {\n          v10 = *v6++;\n          v5 = v10 - 48;\n          if ( v5 <= 9 )\n            continue;\n        }\n        goto LABEL_14;\n      }\n    }\n  }\n  v11 = strncmp(*a1, s2, dword_61033C);\n  result = 3LL;\n  if ( !v11 )\n  {\n    result = 0LL;\n    v9 = 0.0;\nLABEL_14:\n    if ( *a3 )\n      v9 = -v9;\n    *a2 = v9;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402BD0",
            "funcStartAddr": "0x402bd0",
            "funcEndAddr": "0x402bf7",
            "decompiledFuncCode": "char *__fastcall sub_402BD0(__int64 a1)\n{\n  char *result; // rax\n\n  qword_610388 = a1 + 1;\n  result = (char *)sub_407BB0(dest);\n  dest = result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402C00",
            "funcStartAddr": "0x402c00",
            "funcEndAddr": "0x4041a0",
            "decompiledFuncCode": "__int64 __fastcall sub_402C00(char *s, __int64 a2)\n{\n  const char *v2; // r12\n  _QWORD *v3; // rax\n  unsigned int v4; // ebx\n  const char *v6; // r13\n  size_t v7; // rbx\n  size_t v8; // rax\n  const char *v9; // rbx\n  int v10; // eax\n  char v11; // dl\n  __int64 v12; // rbx\n  char *v13; // r13\n  const unsigned __int16 *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ebx\n  char v17; // dl\n  char *v18; // rax\n  char *v19; // rbp\n  __int64 v20; // r8\n  __int64 v21; // r15\n  char *v22; // r14\n  int v23; // eax\n  unsigned __int64 v24; // r14\n  char *v25; // r15\n  const unsigned __int16 **v26; // rax\n  char v27; // dl\n  const unsigned __int16 *v28; // rsi\n  char *v29; // rax\n  char *v30; // r15\n  char v31; // dl\n  int v32; // eax\n  __int64 v33; // r15\n  __int64 v34; // rbx\n  char *v35; // rax\n  const char *v36; // r14\n  const char *v37; // rax\n  char *v38; // r14\n  unsigned int v39; // eax\n  int v40; // eax\n  unsigned __int64 v41; // rax\n  __int64 v42; // rbx\n  char *v43; // rax\n  unsigned int v46; // eax\n  char *v47; // rax\n  unsigned int v48; // ebp\n  char *v49; // r12\n  int v50; // r13d\n  char v51; // cl\n  unsigned int v52; // r13d\n  __int64 v53; // rsi\n  __int64 v54; // rax\n  int v55; // edi\n  int v56; // eax\n  int v57; // edx\n  __int16 v58; // dx\n  unsigned int v59; // kr00_4\n  const char *v60; // rbx\n  __int64 v61; // r13\n  char *v62; // rax\n  int v63; // eax\n  int v64; // edx\n  __int16 v65; // dx\n  const char *v66; // rax\n  int v67; // ebx\n  char *v68; // rax\n  __int64 v69; // r9\n  const char *v70; // rdx\n  unsigned int v71; // eax\n  char v72; // bl\n  char *v73; // rsi\n  char *v74; // rdx\n  int v75; // ecx\n  unsigned int v76; // eax\n  const char *v77; // rax\n  unsigned __int64 v78; // rcx\n  FILE *v79; // rsi\n  __int64 v81; // r9\n  const char *v82; // rax\n  unsigned int v83; // eax\n  __int16 v84; // ax\n  unsigned int v85; // kr04_4\n  const char *v86; // rax\n  __int16 v87; // ax\n  unsigned int v88; // kr08_4\n  const char *v89; // rax\n  char *v90; // rax\n  char *v91; // rax\n  char *v92; // rax\n  long double v93; // [rsp+0h] [rbp-188h]\n  long double v94; // [rsp+0h] [rbp-188h]\n  long double v96; // [rsp+10h] [rbp-178h]\n  long double v97; // [rsp+10h] [rbp-178h]\n  long double v99; // [rsp+10h] [rbp-178h]\n  long double v100; // [rsp+10h] [rbp-178h]\n  long double v101; // [rsp+10h] [rbp-178h]\n  long double v102; // [rsp+10h] [rbp-178h]\n  long double v103; // [rsp+10h] [rbp-178h]\n  int v107; // [rsp+20h] [rbp-168h]\n  int v108; // [rsp+20h] [rbp-168h]\n  __int64 v116; // [rsp+20h] [rbp-168h]\n  __int64 v117; // [rsp+20h] [rbp-168h]\n  __int64 v118; // [rsp+20h] [rbp-168h]\n  __int64 v119; // [rsp+20h] [rbp-168h]\n  int v127; // [rsp+30h] [rbp-158h]\n  unsigned int v128; // [rsp+30h] [rbp-158h]\n  __int64 v129; // [rsp+30h] [rbp-158h]\n  __int64 v130; // [rsp+30h] [rbp-158h]\n  __int128 v131; // [rsp+30h] [rbp-158h]\n  unsigned int v138; // [rsp+30h] [rbp-158h]\n  unsigned int v140; // [rsp+30h] [rbp-158h]\n  char v142; // [rsp+40h] [rbp-148h]\n  char v143; // [rsp+40h] [rbp-148h]\n  int v144; // [rsp+40h] [rbp-148h]\n  __int64 v146; // [rsp+40h] [rbp-148h]\n  __int64 v147; // [rsp+40h] [rbp-148h]\n  __int64 v148; // [rsp+40h] [rbp-148h]\n  __int64 v149; // [rsp+40h] [rbp-148h]\n  unsigned int v159; // [rsp+50h] [rbp-138h]\n  __int64 v161; // [rsp+60h] [rbp-128h]\n  __int64 v162; // [rsp+60h] [rbp-128h]\n  __int16 v163; // [rsp+6Ch] [rbp-11Ch]\n  __int16 v164; // [rsp+6Ch] [rbp-11Ch]\n  __int16 v165; // [rsp+6Eh] [rbp-11Ah]\n  unsigned __int16 v166; // [rsp+6Eh] [rbp-11Ah]\n  char v167; // [rsp+7Eh] [rbp-10Ah] BYREF\n  char v168; // [rsp+7Fh] [rbp-109h] BYREF\n  char *s1; // [rsp+80h] [rbp-108h] BYREF\n  char *v170; // [rsp+88h] [rbp-100h] BYREF\n  long double v171[4]; // [rsp+90h] [rbp-F8h] BYREF\n  char src[184]; // [rsp+D0h] [rbp-B8h] BYREF\n\n  v2 = s;\n  v3 = ptr;\n  if ( ptr )\n  {\n    while ( *v3 != -1LL )\n    {\n      if ( (unsigned __int64)a2 >= *v3 && (unsigned __int64)a2 <= v3[1] )\n        goto LABEL_10;\n      v3 += 2;\n    }\nLABEL_7:\n    v4 = 1;\n    fputs_unlocked(s, stdout);\n    return v4;\n  }\n  if ( a2 != 1 )\n    goto LABEL_7;\nLABEL_10:\n  v6 = ::s1;\n  if ( ::s1 )\n  {\n    v7 = strlen(s);\n    v8 = strlen(v6);\n    if ( v7 > v8 )\n    {\n      v9 = &s[v7 - v8];\n      v10 = strcmp(v6, v9);\n      v11 = byte_610338;\n      if ( v10 )\n      {\n        if ( byte_610338 )\n          fwrite(\"no valid suffix found\\n\", 1uLL, 0x16uLL, stderr);\n      }\n      else\n      {\n        *v9 = 0;\n        if ( v11 )\n        {\n          v66 = (const char *)sub_407590(v6);\n          __fprintf_chk(stderr, 1LL, \"trimming suffix %s\\n\", v66);\n        }\n      }\n    }\n  }\n  v12 = (unsigned __int8)*s;\n  if ( (_BYTE)v12 )\n  {\n    v13 = s;\n    v14 = *__ctype_b_loc();\n    do\n    {\n      if ( (v14[v12] & 1) == 0 )\n        break;\n      v12 = (unsigned __int8)*++v13;\n    }\n    while ( (_BYTE)v12 );\n    v15 = (_DWORD)s - (_DWORD)v13;\n  }\n  else\n  {\n    v13 = s;\n    v15 = 0;\n  }\n  if ( dword_610358 )\n  {\n    if ( v15 || a2 > 1 )\n    {\n      v41 = strlen(s);\n      qword_610380 = v41;\n      if ( v41 >= qword_610388 )\n        sub_402BD0(v41);\n    }\n    else\n    {\n      qword_610380 = 0LL;\n    }\n    if ( !byte_610338 )\n    {\n      v107 = 0;\n      __asm { fld     dword ptr [rsp+168h+var_168] }\n      v127 = HIDWORD(qword_6103AC);\n      __asm { fstp    [rsp+168h+var_F8] }\n      v16 = (unsigned int)(HIDWORD(qword_6103AC) - 3) < 2 ? 1024 : 1000;\n      goto LABEL_26;\n    }\n    __fprintf_chk(stderr, 1LL, \"setting Auto-Padding to %ld characters\\n\", qword_610380);\n  }\n  s1 = 0LL;\n  v108 = 0;\n  __asm { fld     dword ptr [rsp+168h+var_168] }\n  v127 = HIDWORD(qword_6103AC);\n  __asm { fstp    [rsp+168h+var_F8] }\n  v16 = (unsigned int)(HIDWORD(qword_6103AC) - 3) < 2 ? 1024 : 1000;\n  if ( byte_610338 )\n  {\n    v36 = (const char *)sub_407570(1LL);\n    v37 = (const char *)sub_407570(0LL);\n    __fprintf_chk(\n      stderr,\n      1LL,\n      \"simple_strtod_human:\\n  input string: %s\\n  locale decimal-point: %s\\n  MAX_UNSCALED_DIGITS: %d\\n\",\n      v37,\n      v36,\n      18LL);\n  }\nLABEL_26:\n  v17 = 0;\n  v18 = v13;\n  if ( *v13 == 45 )\n  {\n    v18 = v13 + 1;\n    v17 = 1;\n  }\n  v167 = v17;\n  s1 = v18;\n  LODWORD(v19) = sub_402AF0((const char **)&s1, v171, &v167);\n  if ( (unsigned int)v19 > 1 )\n    goto LABEL_88;\n  v21 = dword_61033C;\n  v22 = s1;\n  v23 = strncmp(s1, s2, dword_61033C);\n  if ( v23 )\n  {\n    v24 = 0LL;\n    goto LABEL_31;\n  }\n  __asm { fld     dword ptr [rsp+168h+var_168] }\n  v38 = &v22[v21];\n  s1 = v38;\n  __asm { fstp    tbyte ptr [rsp+168h+src] }\n  if ( *v38 == 45 )\n  {\n    ++v38;\n    LOBYTE(v23) = 1;\n  }\n  v168 = v23;\n  v170 = v38;\n  v39 = sub_402AF0((const char **)&v170, (long double *)src, &v168);\n  if ( v39 > 1 )\n  {\n    LODWORD(v19) = v39;\nLABEL_88:\n    switch ( (int)v19 )\n    {\n      case 2:\n        v24 = 0LL;\n        v60 = \"value too large to be converted: %s\";\n        break;\n      case 3:\n        goto LABEL_159;\n      case 4:\n        v24 = 0LL;\n        v60 = \"rejecting suffix in input: %s (consider using --from)\";\n        break;\n      case 5:\n        v24 = 0LL;\n        v60 = \"invalid suffix in input: %s\";\n        break;\n      case 6:\n        v24 = 0LL;\n        v60 = \"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\n        break;\n      default:\n        v24 = 0LL;\n        v60 = 0LL;\n        break;\n    }\n    goto LABEL_137;\n  }\n  if ( v39 == 1 )\n    LODWORD(v19) = 1;\n  if ( v168 )\n  {\nLABEL_159:\n    v24 = 0LL;\n    LODWORD(v19) = 3;\n    v60 = \"invalid number: %s\";\n    goto LABEL_137;\n  }\n  __asm { fld     tbyte ptr [rsp+168h+src] }\n  v24 = v170 - s1;\n  if ( (_DWORD)v170 != (_DWORD)s1 )\n  {\n    v40 = v24 - 1;\n    if ( (_DWORD)v24 == 1 )\n    {\n      __asm { fdiv    cs:flt_40C130 }\n    }\n    else\n    {\n      __asm\n      {\n        fld     cs:flt_40C130\n        fld     st\n      }\n      do\n      {\n        __asm { fmul    st, st(1) }\n        --v40;\n      }\n      while ( v40 );\n      __asm\n      {\n        fstp    st(1)\n        fdivp   st(1), st\n      }\n    }\n  }\n  __asm { fld     [rsp+168h+var_F8] }\n  if ( v167 )\n    __asm { fsubrp  st(1), st }\n  else\n    __asm { faddp   st(1), st }\n  __asm { fstp    [rsp+168h+var_F8] }\n  s1 = v170;\nLABEL_31:\n  if ( byte_610338 )\n    __fprintf_chk(stderr, 1LL, \"  parsed numeric value: %Lf\\n  input precision = %d\\n\", v171[0], (unsigned int)v24);\n  v25 = s1;\n  v142 = *s1;\n  if ( !*s1 )\n  {\n    if ( v127 != 4 )\n    {\n      v31 = byte_610338;\n      v20 = 0LL;\n      __asm { fld1 }\n      goto LABEL_48;\n    }\n    LODWORD(v19) = 6;\n    v60 = \"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\n    goto LABEL_137;\n  }\n  v26 = __ctype_b_loc();\n  v27 = v142;\n  v28 = *v26;\n  v29 = v25;\n  while ( 1 )\n  {\n    v30 = v29++;\n    if ( (v28[(unsigned __int8)v27] & 1) == 0 )\n      break;\n    s1 = v29;\n    v27 = v30[1];\n  }\n  v143 = v27;\n  if ( !strchr(\"KMGTPEZY\", v27) )\n  {\n    LODWORD(v19) = 5;\n    v60 = \"invalid suffix in input: %s\";\n    goto LABEL_137;\n  }\n  if ( !v127 )\n  {\n    LODWORD(v19) = 4;\n    v60 = \"rejecting suffix in input: %s (consider using --from)\";\n    goto LABEL_137;\n  }\n  v20 = 0LL;\n  if ( (unsigned __int8)(v143 - 69) <= 0x15u )\n    v20 = (unsigned int)dword_40BD20[(unsigned __int8)(v143 - 69)];\n  s1 = v30 + 1;\n  if ( v127 == 1 )\n  {\n    v31 = byte_610338;\n    if ( v30[1] == 105 )\n    {\n      s1 = v30 + 2;\n      if ( byte_610338 )\n      {\n        v140 = v20;\n        v16 = 1024;\n        __fprintf_chk(stderr, 1LL, \"  Auto-scaling, found 'i', switching to base %d\\n\", 1024LL);\n        v20 = v140;\n        v31 = byte_610338;\n        __asm { fld     cs:flt_40C134 }\n      }\n      else\n      {\n        __asm { fld     cs:flt_40C134 }\n        v16 = 1024;\n      }\n    }\n    else\n    {\n      v138 = v16;\n      __asm { fild    dword ptr [rsp+168h+var_158] }\n    }\n    goto LABEL_44;\n  }\n  if ( v127 == 4 )\n  {\n    if ( v30[1] == 105 )\n    {\n      s1 = v30 + 2;\n      goto LABEL_43;\n    }\n    v24 = 0LL;\n    LODWORD(v19) = 6;\n    v60 = \"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\nLABEL_137:\n    if ( dword_6103A8 != 3 )\n    {\n      v61 = sub_407590(v13);\n      v62 = dcgettext(0LL, v60, 5);\n      error(status, 0, v62, v61);\n    }\n    goto LABEL_55;\n  }\nLABEL_43:\n  v128 = v16;\n  __asm { fild    dword ptr [rsp+168h+var_158] }\n  v31 = byte_610338;\nLABEL_44:\n  if ( !(_DWORD)v20 )\n    goto LABEL_289;\n  __asm { fld     st }\n  v32 = v20 - 1;\n  if ( (_DWORD)v20 == 1 )\n  {\n    __asm { fstp    st(1) }\n    v24 = 0LL;\n    v20 = 1LL;\n  }\n  else\n  {\n    do\n    {\n      __asm { fmul    st, st(1) }\n      --v32;\n    }\n    while ( v32 );\n    __asm { fstp    st(1) }\n    v24 = 0LL;\n  }\n  while ( 1 )\n  {\nLABEL_48:\n    if ( v31 )\n    {\n      __asm\n      {\n        fld     st\n        fstp    [rsp+178h+var_178]\n        fstp    tbyte ptr [rsp+178h+var_158]\n      }\n      __fprintf_chk(stderr, 1LL, \"  suffix power=%d^%d = %Lf\\n\", v16, v20, v96);\n      __asm\n      {\n        fld     [rsp+178h+var_F8]\n        fld     tbyte ptr [rsp+178h+var_158]\n        fmulp   st(1), st\n        fld     st\n        fstp    [rsp+178h+var_F8]\n      }\n      if ( byte_610338 )\n      {\n        __asm\n        {\n          fld     st\n          fstp    [rsp+188h+var_178]\n          fstp    [rsp+188h+var_188.value]\n        }\n        __fprintf_chk(stderr, 1LL, \"  returning value: %Lf (%LG)\\n\", v93, v97);\n      }\n      else\n      {\n        __asm { fstp    st }\n      }\n    }\n    else\n    {\n      __asm\n      {\n        fld     [rsp+168h+var_F8]\n        fmulp   st(1), st\n        fstp    [rsp+168h+var_F8]\n      }\n    }\n    if ( s1 && *s1 )\n    {\n      LODWORD(v19) = 5;\n      if ( dword_6103A8 != 3 )\n      {\n        v33 = sub_407570(1LL);\n        v34 = sub_407570(0LL);\n        v35 = dcgettext(0LL, \"invalid suffix in input %s: %s\", 5);\n        error(status, 0, v35, v34, v33);\n      }\n    }\n    else if ( (_DWORD)v19 == 1 && byte_610348 )\n    {\n      v42 = sub_407590(v13);\n      v43 = dcgettext(0LL, \"large input value %s: possible precision loss\", 5);\n      error(0, 0, v43, v42);\n    }\nLABEL_55:\n    __asm { fld     [rsp+168h+var_F8] }\n    if ( qword_610270 != 1 || qword_610268 != 1 )\n    {\n      v129 = qword_610270;\n      __asm { fild    qword ptr [rsp+168h+var_158] }\n      if ( qword_610270 < 0 )\n        __asm { fadd    cs:flt_40C138 }\n      __asm { fmulp   st(1), st }\n      v130 = qword_610268;\n      __asm { fild    qword ptr [rsp+168h+var_158] }\n      if ( qword_610268 < 0 )\n        __asm { fadd    cs:flt_40C138 }\n      __asm { fdivp   st(1), st }\n    }\n    if ( (unsigned int)v19 > 1 )\n    {\n      __asm { fstp    st }\nLABEL_64:\n      v4 = 0;\n      fputs_unlocked(v2, stdout);\n      return v4;\n    }\n    __asm\n    {\n      fld     cs:tbyte_40C150\n      fxch    st(1)\n    }\n    if ( qword_610260 != -1 )\n      v24 = qword_610260;\n    __asm\n    {\n      fcomi   st, st(1)\n      fstp    st(1)\n    }\n    if ( _CF )\n      goto LABEL_103;\n    __asm\n    {\n      fld     cs:tbyte_40C160\n      fcomip  st, st(1)\n    }\n    if ( _CF )\n    {\nLABEL_103:\n      v16 = qword_6103AC;\n      if ( !(_DWORD)qword_6103AC && v24 > 0x12 )\n      {\nLABEL_156:\n        if ( dword_6103A8 == 3 )\n        {\n          __asm { fstp    st }\n        }\n        else\n        {\n          v67 = status;\n          __asm { fstp    [rsp+168h+var_168] }\n          if ( v24 )\n          {\n            v68 = dcgettext(0LL, \"value/precision too large to be printed: '%Lg/%lu' (consider using --to)\", 5);\n            __asm\n            {\n              fld     [rsp+168h+var_168]\n              fstp    [rsp+178h+var_178]\n            }\n            error(v67, 0, v68, v24);\n          }\n          else\n          {\n            v90 = dcgettext(0LL, \"value too large to be printed: '%Lg' (consider using --to)\", 5);\n            __asm\n            {\n              fld     [rsp+168h+var_168]\n              fstp    [rsp+178h+var_178]\n            }\n            error(v67, 0, v90);\n          }\n        }\n        goto LABEL_64;\n      }\n    }\n    else\n    {\n      __asm { fld     st }\n      v46 = 0;\n      __asm { fld     cs:flt_40C130 }\n      while ( 1 )\n      {\n        __asm\n        {\n          fldz\n          fld     st(2)\n          fchs\n          fxch    st(1)\n          fcomip  st, st(3)\n          fcmovbe st, st(2)\n          fld     st(1)\n          fxch    st(1)\n          fcomip  st, st(1)\n        }\n        if ( _CF )\n          break;\n        __asm { fdivp   st(2), st }\n        ++v46;\n      }\n      __asm\n      {\n        fstp    st\n        fstp    st\n        fstp    st\n      }\n      v16 = qword_6103AC;\n      if ( !(_DWORD)qword_6103AC && v24 + v46 > 0x12 )\n        goto LABEL_156;\n      if ( v46 > 0x1A )\n      {\n        __asm { fstp    [rsp+168h+var_168] }\n        if ( dword_6103A8 != 3 )\n        {\n          v47 = dcgettext(0LL, \"value too large to be printed: '%Lg' (cannot handle values > 999Y)\", 5);\n          __asm\n          {\n            fld     [rsp+168h+var_168]\n            fstp    [rsp+178h+var_178]\n          }\n          error(status, 0, v47);\n        }\n        goto LABEL_64;\n      }\n    }\n    v48 = dword_610278;\n    LOBYTE(v171[0]) = 37;\n    v49 = (char *)v171 + 1;\n    v50 = dword_610398;\n    if ( dword_610398 )\n    {\n      BYTE1(v171[0]) = 39;\n      v49 = (char *)v171 + 2;\n    }\n    if ( qword_610378 )\n    {\n      __asm\n      {\n        fstp    tbyte ptr [rsp+168h+var_158]\n        fld     tbyte ptr [rsp+168h+var_158]\n      }\n      v49 += (int)__snprintf_chk(v49, 62LL, 1LL, 63LL, \"0%ld\", qword_610378);\n    }\n    v51 = byte_610338;\n    if ( byte_610338 )\n    {\n      __asm { fstp    tbyte ptr [rsp+168h+var_158] }\n      fwrite(\"double_to_human:\\n\", 1uLL, 0x11uLL, stderr);\n      v51 = byte_610338;\n      __asm { fld     tbyte ptr [rsp+168h+var_158] }\n    }\n    if ( v16 )\n      break;\n    if ( (_DWORD)v24 )\n    {\n      v63 = v24 - 1;\n      if ( (_DWORD)v24 == 1 )\n      {\n        __asm\n        {\n          fnstcw  [rsp+168h+var_11A]\n          fld     cs:tbyte_40C170\n        }\n        v63 = v166;\n        __asm\n        {\n          fld     st(1)\n          fmul    cs:flt_40C130\n        }\n        BYTE1(v63) = HIBYTE(v166) | 0xC;\n        v164 = v63;\n        __asm\n        {\n          fld     st\n          fdiv    st, st(2)\n          fldcw   [rsp+168h+var_11C]\n          fistp   qword ptr [rsp+168h+var_158]\n          fldcw   [rsp+168h+var_11A]\n          fild    qword ptr [rsp+168h+var_158]\n          fmulp   st(2), st\n          fsub    st, st(1)\n        }\n        if ( v48 > 4 )\n        {\n          __asm\n          {\n            fstp    st\n            fstp    st\n            fldz\n          }\n          goto LABEL_166;\n        }\n        __asm { fxch    st(1) }\n      }\n      else\n      {\n        __asm { fld     cs:flt_40C130 }\n        v64 = v24 - 1;\n        __asm { fld     st }\n        do\n        {\n          __asm { fmul    st, st(1) }\n          --v64;\n        }\n        while ( v64 );\n        __asm\n        {\n          fnstcw  [rsp+168h+var_11A]\n          fmul    st, st(2)\n          fld     cs:tbyte_40C170\n        }\n        LOBYTE(v65) = v166;\n        __asm { fld     st(1) }\n        HIBYTE(v65) = HIBYTE(v166) | 0xC;\n        __asm { fdiv    st, st(1) }\n        v164 = v65;\n        __asm\n        {\n          fldcw   [rsp+168h+var_11C]\n          fistp   qword ptr [rsp+168h+var_158]\n          fldcw   [rsp+168h+var_11A]\n          fild    qword ptr [rsp+168h+var_158]\n          fmulp   st(1), st\n          fsub    st(1), st\n          fstp    st(2)\n          fxch    st(1)\n        }\n      }\n    }\n    else\n    {\n      __asm\n      {\n        fnstcw  [rsp+168h+var_11A]\n        fld     cs:tbyte_40C170\n      }\n      v63 = v166;\n      __asm\n      {\n        fld     st(1)\n        fdiv    st, st(1)\n      }\n      BYTE1(v63) = HIBYTE(v166) | 0xC;\n      v164 = v63;\n      __asm\n      {\n        fldcw   [rsp+168h+var_11C]\n        fistp   qword ptr [rsp+168h+var_158]\n        fldcw   [rsp+168h+var_11A]\n        fild    qword ptr [rsp+168h+var_158]\n        fmulp   st(1), st\n        fld     st(1)\n        fsub    st, st(1)\n      }\n      if ( v48 > 4 )\n      {\n        __asm\n        {\n          fstp    st\n          fstp    st\n          fldz\n        }\n        goto LABEL_166;\n      }\n      __asm { fxch    st(1) }\n    }\n    switch ( v48 )\n    {\n      case 0u:\n        __asm\n        {\n          fxch    st(1); jumptable 00000000004035CD case 0\n          fld     st\n          fldcw   [rsp+168h+var_11C]\n          fistp   qword ptr [rsp+168h+var_168]\n          fldcw   [rsp+168h+var_11A]\n          fild    qword ptr [rsp+168h+var_168]\n          fxch    st(1)\n          fcomip  st, st(1)\n        }\n        if ( _CF | _ZF )\n          goto LABEL_161;\n        __asm { fstp    st }\n        goto LABEL_194;\n      case 1u:\n        __asm\n        {\n          fxch    st(1); jumptable 00000000004035CD case 1\n          fchs\n          fld     st\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_128]\n          fldcw   [rsp+168h+var_11A]\n        }\n        goto LABEL_196;\n      case 2u:\n        __asm\n        {\n          fldz; jumptable 00000000004035CD case 2\n          fcomip  st, st(2)\n        }\n        if ( _CF | _ZF )\n        {\n          __asm\n          {\n            fxch    st(1)\n            fld     st\n            fldcw   [rsp+168h+var_11C]\n            fistp   qword ptr [rsp+168h+var_168]\n            fldcw   [rsp+168h+var_11A]\n            fild    qword ptr [rsp+168h+var_168]\n            fxch    st(1)\n            fcomip  st, st(1)\n          }\n          if ( !(_CF | _ZF) )\n          {\n            __asm { fstp    st }\nLABEL_194:\n            v117 = v116 + 1;\n            __asm { fild    qword ptr [rsp+168h+var_168] }\n          }\n        }\n        else\n        {\n          __asm\n          {\n            fxch    st(1)\n            fchs\n            fld     st\n            fldcw   [rsp+168h+var_11C]\n            fistp   [rsp+168h+var_128]\n            fldcw   [rsp+168h+var_11A]\n          }\nLABEL_196:\n          v118 = v161;\n          __asm\n          {\n            fild    qword ptr [rsp+168h+var_168]\n            fxch    st(1)\n            fcomip  st, st(1)\n            fstp    st\n          }\n          v119 = -(!(_CF | _ZF) + v161);\n          __asm { fild    qword ptr [rsp+168h+var_168] }\n        }\nLABEL_161:\n        __asm { faddp   st(1), st }\n        if ( (_DWORD)v24 )\n        {\n          __asm { fld     cs:flt_40C130 }\n          v63 = v24 - 1;\n          if ( (_DWORD)v24 == 1 )\n          {\n            __asm { fdivp   st(1), st }\n          }\n          else\n          {\nLABEL_163:\n            __asm { fld     st }\n            do\n            {\n              __asm { fmul    st, st(1) }\n              --v63;\n            }\n            while ( v63 );\n            __asm\n            {\n              fstp    st(1)\n              fdivp   st(1), st\n            }\n          }\n        }\n        break;\n      case 3u:\n        __asm\n        {\n          fxch    st(1); jumptable 00000000004035CD case 3\n          fldcw   [rsp+168h+var_11C]\n          fistp   qword ptr [rsp+168h+var_168]\n          fldcw   [rsp+168h+var_11A]\n          fild    qword ptr [rsp+168h+var_168]\n        }\n        goto LABEL_161;\n      case 4u:\n        __asm\n        {\n          fldz; jumptable 00000000004035CD case 4\n          fcomip  st, st(2)\n        }\n        if ( _CF | _ZF )\n        {\n          __asm\n          {\n            fxch    st(1)\n            fadd    cs:flt_40C13C\n            fldcw   [rsp+168h+var_11C]\n            fistp   qword ptr [rsp+168h+var_168]\n            fldcw   [rsp+168h+var_11A]\n            fild    qword ptr [rsp+168h+var_168]\n          }\n        }\n        else\n        {\n          __asm\n          {\n            fxch    st(1)\n            fsub    cs:flt_40C13C\n            fldcw   [rsp+168h+var_11C]\n            fistp   qword ptr [rsp+168h+var_168]\n            fldcw   [rsp+168h+var_11A]\n            fild    qword ptr [rsp+168h+var_168]\n          }\n        }\n        goto LABEL_161;\n      default:\n        __asm\n        {\n          fstp    st; jumptable 00000000004035CD default case\n          fstp    st\n          fldz\n          fxch    st(1)\n        }\n        goto LABEL_163;\n    }\nLABEL_166:\n    v69 = (unsigned int)v24;\n    if ( v51 )\n    {\n      __asm\n      {\n        fxch    st(1)\n        fstp    tbyte ptr [rsp+168h+var_158]\n      }\n      v70 = \"  no scaling, returning (grouped) value: %'.*Lf\\n\";\n      if ( !v50 )\n        v70 = \"  no scaling, returning value: %.*Lf\\n\";\n      __asm\n      {\n        fld     st\n        fstp    [rsp+178h+var_178]\n        fstp    [rsp+178h+var_168]\n      }\n      __fprintf_chk(stderr, 1LL, v70, (unsigned int)v24, v20, (unsigned int)v24, *(_QWORD *)&v99);\n      __asm\n      {\n        fld     [rsp+168h+var_168]\n        fld     tbyte ptr [rsp+168h+var_158]\n      }\n      v69 = (unsigned int)v24;\n    }\n    else\n    {\n      __asm { fxch    st(1) }\n    }\n    __asm { fstp    tbyte ptr [rsp+168h+var_158] }\n    v19 = src;\n    strcpy(v49, \".*Lf\");\n    __asm\n    {\n      fld     st\n      fstp    [rsp+178h+var_178]\n      fstp    [rsp+178h+var_168]\n    }\n    v71 = __snprintf_chk(src, 128LL, 1LL, 128LL, (const char *)v171, v69, *(_QWORD *)&v100);\n    v13 = (char *)*((_QWORD *)&v100 + 1);\n    v2 = *(const char **)&v100;\n    __asm { fld     [rsp+168h+var_168] }\n    if ( v71 <= 0x7F )\n    {\n      __asm\n      {\n        fstp    st\n        fld     tbyte ptr [rsp+168h+var_158]\n      }\n      v72 = byte_610338;\n      goto LABEL_173;\n    }\n    __asm { fstp    [rsp+168h+var_168] }\n    v91 = dcgettext(0LL, \"failed to prepare value '%Lf' for printing\", 5);\n    __asm\n    {\n      fld     [rsp+168h+var_168]\n      fstp    [rsp+178h+var_178]\n    }\n    error(1, 0, v91);\nLABEL_289:\n    __asm { fstp    st }\n    v24 = 0LL;\n    __asm { fld1 }\n  }\n  if ( v16 - 3 <= 1 )\n  {\n    v144 = 1024;\n    *(_QWORD *)&v131 = 0x4090000000000000LL;\n  }\n  else\n  {\n    v144 = 1000;\n    *(_QWORD *)&v131 = 0x408F400000000000LL;\n  }\n  __asm\n  {\n    fld     cs:tbyte_40C150\n    fxch    st(1)\n    fcomi   st, st(1)\n    fstp    st(1)\n  }\n  if ( _CF )\n    goto LABEL_253;\n  __asm\n  {\n    fld     cs:tbyte_40C160\n    fcomip  st, st(1)\n  }\n  if ( _CF )\n  {\nLABEL_253:\n    __asm { fld     st }\n    v52 = 0;\n  }\n  else\n  {\n    __asm { fild    dword ptr [rsp+168h+var_148] }\n    v52 = 0;\n    __asm { fld     st(1) }\n    while ( 1 )\n    {\n      __asm\n      {\n        fldz\n        fld     st(1)\n        fchs\n        fxch    st(1)\n        fcomip  st, st(2)\n        fcmovbe st, st(1)\n        fcomip  st, st(2)\n      }\n      if ( _CF )\n        break;\n      __asm { fdiv    st, st(1) }\n      ++v52;\n    }\n    __asm { fstp    st(1) }\n  }\n  if ( v51 )\n  {\n    __asm\n    {\n      fxch    st(1)\n      fstp    tbyte ptr [rsp+168h+var_138]\n      fld     st\n      fstp    [rsp+178h+var_178]\n      fstp    [rsp+178h+var_148]\n    }\n    __fprintf_chk(stderr, 1LL, \"  scaled value to %Lf * %0.f ^ %u\\n\", v103, *(double *)&v131, v52);\n    v51 = byte_610338;\n    __asm\n    {\n      fld     tbyte ptr [rsp+168h+var_138]\n      fld     [rsp+168h+var_148]\n    }\n  }\n  v53 = qword_610260;\n  if ( qword_610260 == -1 )\n  {\n    __asm\n    {\n      fldz\n      fld     st(1)\n      fchs\n      fxch    st(1)\n      fcomip  st, st(2)\n      fcmovbe st, st(1)\n      fld     cs:flt_40C130\n      fld     st\n      fcomip  st, st(2)\n      fstp    st(1)\n    }\n    if ( !(_CF | _ZF) )\n      goto LABEL_273;\n    __asm { fstp    st }\n  }\n  else\n  {\n    v54 = 3 * v52;\n    if ( v54 > qword_610260 )\n      LODWORD(v54) = qword_610260;\n    v55 = v54;\n    if ( (_DWORD)v54 )\n    {\n      v56 = v54 - 1;\n      if ( v56 )\n      {\n        __asm { fld     cs:flt_40C130 }\n        v57 = v56;\n        __asm { fld     st }\n        do\n        {\n          __asm { fmul    st, st(1) }\n          --v57;\n        }\n        while ( v57 );\n        __asm\n        {\n          fnstcw  [rsp+168h+var_11A]\n          fmulp   st(2), st\n          fld     cs:tbyte_40C170\n        }\n        LOBYTE(v58) = v165;\n        __asm { fld     st(2) }\n        HIBYTE(v58) = HIBYTE(v165) | 0xC;\n        v163 = v58;\n        __asm\n        {\n          fdiv    st, st(1)\n          fldcw   [rsp+168h+var_11C]\n          fistp   qword ptr [rsp+168h+var_148]\n          fldcw   [rsp+168h+var_11A]\n          fild    qword ptr [rsp+168h+var_148]\n          fmulp   st(1), st\n          fsub    st(2), st\n          fld     qword ptr [rsp+168h+var_158]\n        }\n        v59 = v48;\n        switch ( v59 )\n        {\n          case 0u:\n            __asm\n            {\n              fstp    st(2); jumptable 00000000004033ED case 0\n              fxch    st(1)\n              fxch    st(2)\n            }\n            goto LABEL_204;\n          case 1u:\n            __asm\n            {\n              fstp    st(2); jumptable 00000000004033ED case 1\n              fxch    st(1)\n              fxch    st(2)\n            }\n            goto LABEL_245;\n          case 2u:\n            __asm\n            {\n              fstp    st(2); jumptable 00000000004033ED case 2\n              fxch    st(1)\n            }\n            goto LABEL_236;\n          case 3u:\n            __asm\n            {\n              fxch    st(3); jumptable 00000000004033ED case 3\n              fldcw   [rsp+168h+var_11C]\n              fistp   qword ptr [rsp+168h+var_148]\n              fldcw   [rsp+168h+var_11A]\n              fild    qword ptr [rsp+168h+var_148]\n              faddp   st(1), st\n              fxch    st(1)\n            }\n            goto LABEL_208;\n          case 4u:\n            __asm\n            {\n              fstp    st(2); jumptable 00000000004033ED case 4\n              fxch    st(1)\n            }\n            goto LABEL_241;\n          default:\n            goto LABEL_293;\n        }\n      }\n      __asm { fld     cs:flt_40C130 }\nLABEL_273:\n      __asm\n      {\n        fnstcw  [rsp+168h+var_11A]\n        fmul    st(1), st\n        fld     cs:tbyte_40C170\n      }\n      LOBYTE(v87) = v165;\n      __asm { fld     st(2) }\n      HIBYTE(v87) = HIBYTE(v165) | 0xC;\n      __asm { fdiv    st, st(1) }\n      v163 = v87;\n      __asm\n      {\n        fldcw   [rsp+168h+var_11C]\n        fistp   qword ptr [rsp+168h+var_148]\n        fldcw   [rsp+168h+var_11A]\n        fild    qword ptr [rsp+168h+var_148]\n        fmulp   st(1), st\n        fsub    st(2), st\n        fld     qword ptr [rsp+168h+var_158]\n      }\n      v88 = v48;\n      switch ( v88 )\n      {\n        case 0u:\n          __asm\n          {\n            fstp    st(2); jumptable 0000000000403EBD case 0\n            fxch    st(1)\n            fxch    st(2)\n          }\n          v55 = 1;\n          goto LABEL_204;\n        case 1u:\n          __asm\n          {\n            fstp    st(2); jumptable 0000000000403EBD case 1\n            fxch    st(1)\n            fxch    st(2)\n          }\n          v55 = 1;\n          goto LABEL_245;\n        case 2u:\n          __asm\n          {\n            fstp    st(2); jumptable 0000000000403EBD case 2\n            fxch    st(1)\n          }\n          v55 = 1;\n          goto LABEL_236;\n        case 3u:\n          __asm\n          {\n            fxch    st(3); jumptable 0000000000403EBD case 3\n            fldcw   [rsp+168h+var_11C]\n            fistp   qword ptr [rsp+168h+var_148]\n            fldcw   [rsp+168h+var_11A]\n            fild    qword ptr [rsp+168h+var_148]\n            faddp   st(1), st\n            fxch    st(1)\n          }\n          goto LABEL_249;\n        case 4u:\n          __asm\n          {\n            fstp    st(2); jumptable 0000000000403EBD case 4\n            fxch    st(1)\n          }\n          v55 = 1;\n          goto LABEL_241;\n        default:\n          __asm\n          {\n            fstp    st(3); jumptable 0000000000403EBD default case\n            fstp    st\n            fstp    st\n          }\n          goto LABEL_296;\n      }\n    }\n  }\n  __asm\n  {\n    fnstcw  [rsp+168h+var_11A]\n    fld     cs:tbyte_40C170\n  }\n  LOBYTE(v84) = v165;\n  __asm\n  {\n    fld     st(1)\n    fdiv    st, st(1)\n  }\n  HIBYTE(v84) = HIBYTE(v165) | 0xC;\n  v163 = v84;\n  __asm\n  {\n    fldcw   [rsp+168h+var_11C]\n    fistp   qword ptr [rsp+168h+var_148]\n    fldcw   [rsp+168h+var_11A]\n    fild    qword ptr [rsp+168h+var_148]\n    fmulp   st(1), st\n    fsub    st(1), st\n    fld     qword ptr [rsp+168h+var_158]\n  }\n  v85 = v48;\n  switch ( v85 )\n  {\n    case 0u:\n      __asm { fxch    st(2); jumptable 0000000000403D49 case 0 }\n      v55 = 0;\n      goto LABEL_204;\n    case 1u:\n      __asm { fxch    st(2); jumptable 0000000000403D49 case 1 }\n      v55 = 0;\nLABEL_245:\n      __asm\n      {\n        fchs\n        fld     st\n        fldcw   [rsp+168h+var_11C]\n        fistp   [rsp+168h+var_128]\n        fldcw   [rsp+168h+var_11A]\n      }\n      goto LABEL_238;\n    case 2u:\n      v55 = 0;\nLABEL_236:\n      __asm\n      {\n        fldz\n        fcomip  st, st(3)\n      }\n      if ( _CF | _ZF )\n      {\n        __asm { fxch    st(2) }\nLABEL_204:\n        __asm\n        {\n          fld     st\n          fldcw   [rsp+168h+var_11C]\n          fistp   qword ptr [rsp+168h+var_148]\n          fldcw   [rsp+168h+var_11A]\n          fild    qword ptr [rsp+168h+var_148]\n          fxch    st(1)\n          fcomip  st, st(1)\n        }\n        if ( !(_CF | _ZF) )\n        {\n          __asm { fstp    st }\n          v147 = v146 + 1;\n          __asm { fild    qword ptr [rsp+168h+var_148] }\n        }\n      }\n      else\n      {\n        __asm\n        {\n          fxch    st(2)\n          fchs\n          fld     st\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_128]\n          fldcw   [rsp+168h+var_11A]\n        }\nLABEL_238:\n        v148 = v162;\n        __asm\n        {\n          fild    qword ptr [rsp+168h+var_148]\n          fxch    st(1)\n          fcomip  st, st(1)\n          fstp    st\n        }\n        v149 = -(!(_CF | _ZF) + v162);\n        __asm { fild    qword ptr [rsp+168h+var_148] }\n      }\nLABEL_206:\n      __asm { faddp   st(1), st }\n      if ( !v55 )\n        break;\n      __asm { fld     cs:flt_40C130 }\n      v56 = v55 - 1;\n      if ( v55 != 1 )\n        goto LABEL_208;\nLABEL_249:\n      __asm { fdivp   st(1), st }\n      break;\n    case 3u:\n      __asm\n      {\n        fxch    st(2); jumptable 0000000000403D49 case 3\n        fldcw   [rsp+168h+var_11C]\n        fistp   qword ptr [rsp+168h+var_148]\n        fldcw   [rsp+168h+var_11A]\n        fild    qword ptr [rsp+168h+var_148]\n        faddp   st(1), st\n      }\n      break;\n    case 4u:\n      v55 = 0;\nLABEL_241:\n      __asm\n      {\n        fldz\n        fcomip  st, st(3)\n      }\n      if ( _CF | _ZF )\n      {\n        __asm\n        {\n          fxch    st(2)\n          fadd    cs:flt_40C13C\n          fldcw   [rsp+168h+var_11C]\n          fistp   qword ptr [rsp+168h+var_148]\n          fldcw   [rsp+168h+var_11A]\n          fild    qword ptr [rsp+168h+var_148]\n        }\n      }\n      else\n      {\n        __asm\n        {\n          fxch    st(2)\n          fsub    cs:flt_40C13C\n          fldcw   [rsp+168h+var_11C]\n          fistp   qword ptr [rsp+168h+var_148]\n          fldcw   [rsp+168h+var_11A]\n          fild    qword ptr [rsp+168h+var_148]\n        }\n      }\n      goto LABEL_206;\n    default:\n      __asm\n      {\n        fstp    st(2); jumptable 0000000000403D49 default case\n        fstp    st\n      }\nLABEL_296:\n      __asm { fldz }\n      goto LABEL_212;\n  }\n  while ( 2 )\n  {\n    __asm\n    {\n      fldz\n      fcomip  st, st(1)\n    }\n    if ( _CF | _ZF )\n    {\nLABEL_212:\n      __asm { fcomi   st, st(1) }\n      if ( _CF )\n      {\n        __asm { fstp    st(1) }\n      }\n      else\n      {\nLABEL_215:\n        ++v52;\n        __asm { fdivrp  st(1), st }\n      }\n      __asm\n      {\n        fldz\n        fxch    st(1)\n        fucomi  st, st(1)\n        fstp    st(1)\n      }\n      if ( !_PF && _ZF )\n      {\n        v81 = 0LL;\n        goto LABEL_220;\n      }\n      __asm\n      {\n        fldz\n        fcomip  st, st(1)\n      }\n      if ( _CF | _ZF )\n      {\n        __asm { fld     st }\n        goto LABEL_260;\n      }\n      __asm\n      {\n        fld     st\n        fchs\n      }\n    }\n    else\n    {\n      __asm\n      {\n        fld     st\n        fchs\n        fcomi   st, st(2)\n      }\n      if ( !_CF )\n      {\n        __asm { fstp    st }\n        goto LABEL_215;\n      }\n      __asm\n      {\n        fstp    st(2)\n        fxch    st(1)\n      }\n    }\n    __asm { fxch    st(1) }\nLABEL_260:\n    __asm\n    {\n      fld     cs:flt_40C130\n      fcomip  st, st(2)\n      fstp    st(1)\n    }\n    v81 = (v52 != 0) & (unsigned __int8)!(_CF | _ZF);\nLABEL_220:\n    if ( v51 )\n    {\n      __asm\n      {\n        fxch    st(1)\n        fstp    [rsp+168h+var_148]\n      }\n      v159 = v81;\n      __asm\n      {\n        fld     st\n        fstp    [rsp+178h+var_178]\n        fstp    [rsp+178h+var_168]\n      }\n      __fprintf_chk(stderr, 1LL, \"  after rounding, value=%Lf * %0.f ^ %u\\n\", v102, *(double *)&v131, v52);\n      v53 = qword_610260;\n      v81 = v159;\n      __asm\n      {\n        fld     [rsp+168h+var_148]\n        fld     [rsp+168h+var_168]\n      }\n    }\n    v82 = \"(error)\";\n    *(_DWORD *)v49 = 1716267566;\n    *((_WORD *)v49 + 2) = 29477;\n    if ( v53 != -1 )\n      v81 = (unsigned int)v53;\n    v49[6] = 0;\n    if ( v52 > 8 )\n    {\n      __asm { fxch    st(1) }\n    }\n    else\n    {\n      __asm { fxch    st(1) }\n      v82 = (const char *)*(&off_40BCC0 + v52);\n    }\n    __asm\n    {\n      fstp    tbyte ptr [rsp+168h+var_158]\n      fld     st\n      fstp    [rsp+188h+var_188.value]\n      fstp    [rsp+188h+var_168]\n    }\n    v83 = __snprintf_chk(src, 127LL, 1LL, 128LL, (const char *)v171, v81, *(_OWORD *)&v94, v82);\n    __asm { fld     tbyte ptr [rsp+188h+var_158] }\n    if ( v83 > 0x7E )\n    {\n      __asm { fstp    st }\n      v92 = dcgettext(0LL, \"failed to prepare value '%Lf' for printing\", 5);\n      __asm { fld     [rsp+168h+var_168] }\n      v53 = 0LL;\n      __asm { fstp    [rsp+178h+var_178] }\n      error(1, 0, v92);\nLABEL_293:\n      __asm\n      {\n        fstp    st(3); jumptable 00000000004033ED default case\n        fstp    st\n        fxch    st(1)\n        fldz\n        fxch    st(1)\n        fxch    st(2)\n      }\nLABEL_208:\n      __asm { fld     st }\n      do\n      {\n        __asm { fmul    st, st(1) }\n        --v56;\n      }\n      while ( v56 );\n      __asm\n      {\n        fstp    st(1)\n        fdivp   st(1), st\n      }\n      continue;\n    }\n    break;\n  }\n  if ( v52 && v16 == 4 )\n  {\n    __asm { fstp    [rsp+168h+var_168] }\n    __strncat_chk(src, \"i\", 127LL - (int)v83, 128LL);\n    __asm { fld     [rsp+168h+var_168] }\n  }\n  v72 = byte_610338;\n  if ( byte_610338 )\n  {\n    __asm { fstp    [rsp+168h+var_168] }\n    v89 = (const char *)sub_407590(src);\n    __fprintf_chk(stderr, 1LL, \"  returning value: %s\\n\", v89);\n    v72 = byte_610338;\n    __asm { fld     [rsp+168h+var_168] }\nLABEL_173:\n    v73 = ::s1;\n    if ( ::s1 )\n      goto LABEL_174;\n    goto LABEL_179;\n  }\n  v73 = ::s1;\n  if ( !::s1 )\n  {\n    __asm { fstp    st }\n    goto LABEL_182;\n  }\nLABEL_174:\n  v74 = src;\n  do\n  {\n    v75 = *(_DWORD *)v74;\n    v74 += 4;\n    v76 = ~v75 & (v75 - 16843009) & 0x80808080;\n  }\n  while ( !v76 );\n  __asm { fstp    [rsp+168h+var_168] }\n  if ( (~v75 & (v75 - 16843009) & 0x8080) == 0 )\n  {\n    LOBYTE(v76) = (~v75 & (v75 - 16843009) & 0x80808080) >> 16;\n    v74 += 2;\n  }\n  __strncat_chk(src, v73, src - &v74[-__CFADD__((_BYTE)v76, (_BYTE)v76) - 3] + 127, 128LL);\n  __asm { fld     [rsp+168h+var_168] }\nLABEL_179:\n  if ( v72 )\n  {\n    __asm { fstp    [rsp+168h+var_168] }\n    v77 = (const char *)sub_407590(src);\n    __asm\n    {\n      fld     [rsp+168h+var_168]\n      fstp    [rsp+178h+var_178]\n    }\n    __fprintf_chk(stderr, 1LL, \"formatting output:\\n  value: %Lf\\n  humanized: %s\\n\", v101, v77);\n  }\n  else\n  {\n    __asm { fstp    st }\n  }\nLABEL_182:\n  v78 = strlen(src);\n  if ( qword_610380 && qword_610380 > v78 )\n  {\n    *(_QWORD *)&v171[0] = qword_610380;\n    sub_405530(src, dest, qword_610388, v171, (unsigned int)dword_610258, 2LL);\n    if ( byte_610338 )\n    {\n      v86 = (const char *)sub_407590(dest);\n      __fprintf_chk(stderr, 1LL, \"  After padding: %s\\n\", v86);\n    }\n  }\n  else\n  {\n    if ( v78 + 1 >= qword_610388 )\n      sub_402BD0(v78 + 1);\n    strcpy(dest, src);\n  }\n  v79 = stdout;\n  if ( qword_610368 )\n  {\n    fputs_unlocked(qword_610368, stdout);\n    v79 = stdout;\n  }\n  v4 = 1;\n  fputs_unlocked(dest, v79);\n  if ( qword_610360 )\n    fputs_unlocked(qword_610360, stdout);\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_4041A0",
            "funcStartAddr": "0x4041a0",
            "funcEndAddr": "0x40435e",
            "decompiledFuncCode": "__int64 __fastcall sub_4041A0(char *s, char a2)\n{\n  __int64 v3; // r14\n  unsigned int v4; // r12d\n  int v5; // eax\n  char v6; // bp\n  char *v7; // rbx\n  char v8; // dl\n  char *v9; // rax\n  const unsigned __int16 *v11; // rax\n  unsigned __int8 v12; // dl\n  unsigned __int8 v13; // si\n  bool v14; // zf\n  char *IO_write_ptr; // rdx\n\n  v3 = 0LL;\n  v4 = 1;\n  v5 = dword_610254;\n  while ( 1 )\n  {\n    ++v3;\n    v6 = *s;\n    if ( v5 != 128 )\n      break;\n    if ( !v6 )\n      goto LABEL_8;\n    v7 = s;\n    v11 = *__ctype_b_loc();\n    while ( (v11[(unsigned __int8)v6] & 1) != 0 || v6 == 10 )\n    {\n      v6 = *++v7;\n      if ( !*v7 )\n        goto LABEL_8;\n    }\n    v12 = *v7;\n    if ( !*v7 )\n      goto LABEL_8;\n    while ( (v11[v12] & 1) == 0 && v12 != 10 )\n    {\n      v12 = *++v7;\n      if ( !*v7 )\n        goto LABEL_8;\n    }\n    v6 = *v7;\nLABEL_22:\n    if ( !v6 )\n      goto LABEL_8;\nLABEL_23:\n    *v7 = 0;\n    v13 = 32;\n    v14 = (unsigned __int8)sub_402C00(s, v3) == 0;\n    v5 = dword_610254;\n    if ( v14 )\n      v4 = 0;\n    IO_write_ptr = stdout->_IO_write_ptr;\n    if ( dword_610254 != 128 )\n      v13 = dword_610254;\n    if ( IO_write_ptr >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, v13);\n      v5 = dword_610254;\n    }\n    else\n    {\n      stdout->_IO_write_ptr = IO_write_ptr + 1;\n      *IO_write_ptr = v13;\n    }\n    s = v7 + 1;\n  }\n  if ( v6 == v5 )\n  {\n    v7 = s;\n    goto LABEL_22;\n  }\n  if ( v6 )\n  {\n    v7 = s;\n    while ( *++v7 )\n    {\n      if ( *v7 == v5 )\n        goto LABEL_23;\n    }\n  }\nLABEL_8:\n  if ( !(unsigned __int8)sub_402C00(s, v3) )\n    v4 = 0;\n  if ( a2 )\n  {\n    v8 = byte_610250;\n    v9 = stdout->_IO_write_ptr;\n    if ( v9 >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, (unsigned __int8)byte_610250);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v9 + 1;\n      *v9 = v8;\n    }\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_404360",
            "funcStartAddr": "0x404360",
            "funcEndAddr": "0x404a0d",
            "decompiledFuncCode": "void __fastcall __noreturn sub_404360(int status)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbx\n  char *v5; // rax\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rbx\n  char *v9; // rax\n  FILE *v10; // rbx\n  char *v11; // rax\n  FILE *v12; // rbx\n  char *v13; // rax\n  FILE *v14; // rbx\n  char *v15; // rax\n  FILE *v16; // rbx\n  char *v17; // rax\n  FILE *v18; // rbx\n  char *v19; // rax\n  FILE *v20; // rbx\n  char *v21; // rax\n  FILE *v22; // rbx\n  char *v23; // rax\n  FILE *v24; // rbx\n  char *v25; // rax\n  FILE *v26; // rbx\n  char *v27; // rax\n  FILE *v28; // rbx\n  char *v29; // rax\n  FILE *v30; // rbx\n  char *v31; // rax\n  FILE *v32; // rbx\n  char *v33; // rax\n  FILE *v34; // rbx\n  char *v35; // rax\n  FILE *v36; // rbx\n  char *v37; // rax\n  FILE *v38; // rbx\n  char *v39; // rax\n  FILE *v40; // rbx\n  char *v41; // rax\n  FILE *v42; // rbx\n  char *v43; // rax\n  FILE *v44; // rbx\n  char *v45; // rax\n  FILE *v46; // rbx\n  char *v47; // rax\n  FILE *v48; // rbx\n  char *v49; // rax\n  FILE *v50; // rbx\n  char *v51; // rax\n  FILE *v52; // rbx\n  char *v53; // rax\n  FILE *v54; // rbx\n  char *v55; // rax\n  FILE *v56; // rbx\n  char *v57; // rax\n  __int64 v58; // rbx\n  char *v59; // rax\n  __int64 v60; // rbx\n  char *v61; // rax\n  __int64 *v62; // rax\n  const char *v63; // rbx\n  char *v64; // rax\n  char *v65; // rax\n  char *v66; // rax\n  char *v67; // rax\n  char *v68; // rax\n  char *v69; // rax\n  char *v70; // rax\n  char *v71; // rax\n  __int64 v72[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_6103D8;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [NUMBER]...\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"Reformat NUMBER(s), or the numbers from standard input if none are specified.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(0LL, \"      --debug          print warnings about invalid input\\n\", 5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(0LL, \"  -d, --delimiter=X    use X instead of whitespace for field delimiter\\n\", 5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"      --field=FIELDS   replace the numbers in these input fields (default=1)\\n\"\n          \"                         see FIELDS below\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"      --format=FORMAT  use printf style floating-point FORMAT;\\n\"\n          \"                         see FORMAT below for details\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"      --from=UNIT      auto-scale input numbers to UNITs; default is 'none';\\n\"\n          \"                         see UNIT below\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \"      --from-unit=N    specify the input unit size (instead of the default 1)\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(\n          0LL,\n          \"      --grouping       use locale-defined grouping of digits, e.g. 1,000,000\\n\"\n          \"                         (which means it has no effect in the C/POSIX locale)\\n\",\n          5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(\n          0LL,\n          \"      --header[=N]     print (without converting) the first N header lines;\\n\"\n          \"                         N defaults to 1 if not specified\\n\",\n          5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(\n          0LL,\n          \"      --invalid=MODE   failure mode for invalid numbers: MODE can be:\\n\"\n          \"                         abort (default), fail, warn, ignore\\n\",\n          5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(\n          0LL,\n          \"      --padding=N      pad the output to N characters; positive N will\\n\"\n          \"                         right-align; negative N will left-align;\\n\"\n          \"                         padding is ignored if the output is wider than N;\\n\"\n          \"                         the default is to automatically pad if a whitespace\\n\"\n          \"                         is found\\n\",\n          5);\n  fputs_unlocked(v27, v26);\n  v28 = stdout;\n  v29 = dcgettext(\n          0LL,\n          \"      --round=METHOD   use METHOD for rounding when scaling; METHOD can be:\\n\"\n          \"                         up, down, from-zero (default), towards-zero, nearest\\n\",\n          5);\n  fputs_unlocked(v29, v28);\n  v30 = stdout;\n  v31 = dcgettext(\n          0LL,\n          \"      --suffix=SUFFIX  add SUFFIX to output numbers, and accept optional\\n\"\n          \"                         SUFFIX in input numbers\\n\",\n          5);\n  fputs_unlocked(v31, v30);\n  v32 = stdout;\n  v33 = dcgettext(0LL, \"      --to=UNIT        auto-scale output numbers to UNITs; see UNIT below\\n\", 5);\n  fputs_unlocked(v33, v32);\n  v34 = stdout;\n  v35 = dcgettext(0LL, \"      --to-unit=N      the output unit size (instead of the default 1)\\n\", 5);\n  fputs_unlocked(v35, v34);\n  v36 = stdout;\n  v37 = dcgettext(0LL, \"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\", 5);\n  fputs_unlocked(v37, v36);\n  v38 = stdout;\n  v39 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v39, v38);\n  v40 = stdout;\n  v41 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v41, v40);\n  v42 = stdout;\n  v43 = dcgettext(0LL, \"\\nUNIT options:\\n\", 5);\n  fputs_unlocked(v43, v42);\n  v44 = stdout;\n  v45 = dcgettext(0LL, \"  none       no auto-scaling is done; suffixes will trigger an error\\n\", 5);\n  fputs_unlocked(v45, v44);\n  v46 = stdout;\n  v47 = dcgettext(\n          0LL,\n          \"  auto       accept optional single/two letter suffix:\\n\"\n          \"               1K = 1000,\\n\"\n          \"               1Ki = 1024,\\n\"\n          \"               1M = 1000000,\\n\"\n          \"               1Mi = 1048576,\\n\",\n          5);\n  fputs_unlocked(v47, v46);\n  v48 = stdout;\n  v49 = dcgettext(\n          0LL,\n          \"  si         accept optional single letter suffix:\\n\"\n          \"               1K = 1000,\\n\"\n          \"               1M = 1000000,\\n\"\n          \"               ...\\n\",\n          5);\n  fputs_unlocked(v49, v48);\n  v50 = stdout;\n  v51 = dcgettext(\n          0LL,\n          \"  iec        accept optional single letter suffix:\\n\"\n          \"               1K = 1024,\\n\"\n          \"               1M = 1048576,\\n\"\n          \"               ...\\n\",\n          5);\n  fputs_unlocked(v51, v50);\n  v52 = stdout;\n  v53 = dcgettext(\n          0LL,\n          \"  iec-i      accept optional two-letter suffix:\\n\"\n          \"               1Ki = 1024,\\n\"\n          \"               1Mi = 1048576,\\n\"\n          \"               ...\\n\",\n          5);\n  fputs_unlocked(v53, v52);\n  v54 = stdout;\n  v55 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"FIELDS supports cut(1) style field ranges:\\n\"\n          \"  N    N'th field, counted from 1\\n\"\n          \"  N-   from N'th field, to end of line\\n\"\n          \"  N-M  from N'th to M'th field (inclusive)\\n\"\n          \"  -M   from first to M'th field (inclusive)\\n\"\n          \"  -    all fields\\n\"\n          \"Multiple fields/ranges can be separated with commas\\n\",\n          5);\n  fputs_unlocked(v55, v54);\n  v56 = stdout;\n  v57 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"FORMAT must be suitable for printing one floating-point argument '%f'.\\n\"\n          \"Optional quote (%'f) will enable --grouping (if supported by current locale).\\n\"\n          \"Optional width value (%10f) will pad output. Optional zero (%010f) width\\n\"\n          \"will zero pad the number. Optional negative values (%-10f) will left align.\\n\"\n          \"Optional precision (%.1f) will override the input determined precision.\\n\",\n          5);\n  fputs_unlocked(v57, v56);\n  v58 = qword_6103D8;\n  v59 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Exit status is 0 if all input numbers were successfully converted.\\n\"\n          \"By default, %s will stop at the first conversion error with exit status 2.\\n\"\n          \"With --invalid='fail' a warning is printed for each conversion error\\n\"\n          \"and the exit status is 2.  With --invalid='warn' each conversion error is\\n\"\n          \"diagnosed, but the exit status is 0.  With --invalid='ignore' conversion\\n\"\n          \"errors are not diagnosed and the exit status is 0.\\n\",\n          5);\n  __printf_chk(1LL, v59, v58);\n  v60 = qword_6103D8;\n  v61 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Examples:\\n\"\n          \"  $ %s --to=si 1000\\n\"\n          \"            -> \\\"1.0K\\\"\\n\"\n          \"  $ %s --to=iec 2048\\n\"\n          \"           -> \\\"2.0K\\\"\\n\"\n          \"  $ %s --to=iec-i 4096\\n\"\n          \"           -> \\\"4.0Ki\\\"\\n\"\n          \"  $ echo 1K | %s --from=si\\n\"\n          \"           -> \\\"1000\\\"\\n\"\n          \"  $ echo 1K | %s --from=iec\\n\"\n          \"           -> \\\"1024\\\"\\n\"\n          \"  $ df -B1 | %s --header --field 2-4 --to=si\\n\"\n          \"  $ ls -l  | %s --header --field 5 --to=iec\\n\"\n          \"  $ ls -lh | %s --header --field 5 --from=iec --padding=10\\n\"\n          \"  $ ls -lh | %s --header --field 5 --from=iec --format %%10f\\n\",\n          5);\n  __printf_chk(1LL, v61, v60);\n  v72[0] = (__int64)\"[\";\n  v72[1] = (__int64)\"test invocation\";\n  v72[2] = (__int64)\"coreutils\";\n  v72[3] = (__int64)\"Multi-call invocation\";\n  v72[4] = (__int64)\"sha224sum\";\n  v72[5] = (__int64)\"sha2 utilities\";\n  v72[6] = (__int64)\"sha256sum\";\n  v72[7] = (__int64)\"sha2 utilities\";\n  v72[8] = (__int64)\"sha384sum\";\n  v72[9] = (__int64)\"sha2 utilities\";\n  v72[10] = (__int64)\"sha512sum\";\n  v72[11] = (__int64)\"sha2 utilities\";\n  v72[12] = 0LL;\n  v72[13] = 0LL;\n  v62 = v72;\n  do\n    v62 += 2;\n  while ( *v62 && strcmp(\"numfmt\", (const char *)*v62) );\n  v63 = (const char *)v62[1];\n  if ( v63 )\n  {\n    v64 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v64, &unk_40A199);\n    v65 = setlocale(5, 0LL);\n    if ( !v65 || !strncmp(v65, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v68 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v68, &unk_40A199);\n    v69 = setlocale(5, 0LL);\n    if ( !v69 || !strncmp(v69, \"en_\", 3uLL) )\n    {\n      v63 = \"numfmt\";\n      v70 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v70, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v63 = \"numfmt\";\n  }\n  v71 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v71, \"numfmt\");\nLABEL_10:\n  v66 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v66, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v67 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v67, v63);\nLABEL_3:\n  exit(status);\n}\n"
        },
        {
            "funcName": "compar_404a10",
            "funcStartAddr": "0x404a10",
            "funcEndAddr": "0x404a22",
            "decompiledFuncCode": "__int64 __fastcall compar(_DWORD *a1, _DWORD *a2)\n{\n  __int64 result; // rax\n\n  result = 0xFFFFFFFFLL;\n  if ( *a1 >= *a2 )\n    return *a1 > *a2;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404A30",
            "funcStartAddr": "0x404a30",
            "funcEndAddr": "0x404afc",
            "decompiledFuncCode": "char *__fastcall sub_404A30(__int64 a1, __int64 a2)\n{\n  size_t v2; // rdx\n  unsigned __int64 v3; // rcx\n  char *v4; // rax\n  char *result; // rax\n\n  v2 = nmemb;\n  v3 = qword_6103C0;\n  v4 = (char *)ptr;\n  if ( nmemb == qword_6103C0 )\n  {\n    if ( ptr )\n    {\n      if ( (unsigned __int64)qword_6103C0 <= 0x555555555555554LL )\n      {\n        v3 = qword_6103C0 + ((unsigned __int64)qword_6103C0 >> 1) + 1;\nLABEL_6:\n        qword_6103C0 = v3;\n        v4 = (char *)sub_407BB0(ptr);\n        v2 = nmemb;\n        ptr = v4;\n        goto LABEL_2;\n      }\n    }\n    else\n    {\n      if ( !qword_6103C0 )\n      {\n        v3 = 8LL;\n        goto LABEL_6;\n      }\n      if ( (qword_6103C0 & 0x800000000000000LL) == 0 && !((unsigned __int64)qword_6103C0 >> 60) )\n        goto LABEL_6;\n    }\n    sub_407DA0();\n  }\nLABEL_2:\n  result = &v4[16 * v2];\n  *(_QWORD *)result = a1;\n  *((_QWORD *)result + 1) = a2;\n  nmemb = v2 + 1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404B00",
            "funcStartAddr": "0x404b00",
            "funcEndAddr": "0x40509e",
            "decompiledFuncCode": "_QWORD *__fastcall sub_404B00(const char *a1, char a2)\n{\n  char *v2; // r15\n  unsigned __int64 v3; // rdi\n  char v4; // bl\n  char v5; // bp\n  char v6; // r12\n  char v7; // r14\n  char v8; // r13\n  size_t v9; // r15\n  size_t v10; // rbx\n  unsigned __int64 *v11; // r14\n  __int64 v12; // rbp\n  __int64 v13; // r12\n  unsigned __int64 *v14; // rdi\n  char *v15; // rdx\n  unsigned __int64 v16; // rax\n  _QWORD *result; // rax\n  unsigned __int64 v18; // rax\n  unsigned __int64 v19; // rax\n  unsigned __int64 *v20; // rbp\n  __int64 v21; // rdi\n  unsigned __int64 v22; // rax\n  const char *v23; // rsi\n  char *v24; // rax\n  char *v25; // rbx\n  size_t v26; // rax\n  void *v27; // rbx\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbx\n  char *v31; // rax\n  unsigned __int64 v32; // [rsp+8h] [rbp-50h]\n\n  v2 = (char *)a1;\n  if ( (a2 & 1) != 0 && !strcmp(a1, \"-\") )\n  {\n    v2 = (char *)(a1 + 1);\n    v3 = 1LL;\n    v4 = 1;\n  }\n  else\n  {\n    v3 = 0LL;\n    v4 = 0;\n  }\n  v5 = v4;\n  v6 = 0;\n  v7 = 0;\n  v32 = 1LL;\n  while ( 1 )\n  {\n    v8 = *v2;\n    if ( *v2 == 45 )\n    {\n      if ( !v5 )\n      {\n        v6 = v4 & (v3 == 0);\n        if ( !v6 )\n        {\n          if ( v4 )\n          {\n            v32 = v3;\n            v5 = v4;\n            v3 = 0LL;\n          }\n          else\n          {\n            v6 = 0;\n            v3 = 0LL;\n            v5 = 1;\n            v32 = 1LL;\n          }\n          goto LABEL_16;\n        }\n        if ( (a2 & 4) != 0 )\n          goto LABEL_69;\nLABEL_72:\n        v24 = dcgettext(0LL, \"fields are numbered from 1\", 5);\n        goto LABEL_63;\n      }\n      if ( (a2 & 4) != 0 )\n        v24 = dcgettext(0LL, \"invalid byte or character range\", 5);\n      else\n        v24 = dcgettext(0LL, \"invalid field range\", 5);\nLABEL_63:\n      error(0, 0, v24);\n      sub_404360(1);\n    }\n    if ( v8 == 44 || ((*__ctype_b_loc())[(unsigned __int8)v8] & 1) != 0 || !v8 )\n      break;\n    if ( (unsigned int)(v8 - 48) > 9 )\n    {\n      v30 = sub_407590(v2);\n      if ( (a2 & 4) != 0 )\n        v31 = dcgettext(0LL, \"invalid byte/character position %s\", 5);\n      else\n        v31 = dcgettext(0LL, \"invalid field value %s\", 5);\n      error(0, 0, v31, v30);\n      sub_404360(1);\n    }\n    if ( !v6 || !qword_6103B8 )\n      qword_6103B8 = v2;\n    if ( v5 )\n      v7 = v5;\n    else\n      v4 = 1;\n    if ( v3 > 0x1999999999999999LL || (v18 = v8 - 48 + 10 * v3, v18 < v3) || v18 == -1LL )\n    {\n      v25 = qword_6103B8;\n      v26 = strspn(qword_6103B8, \"0123456789\");\n      v27 = (void *)sub_407DE0(v25, v26);\n      v28 = sub_407590(v27);\n      if ( (a2 & 4) != 0 )\n        v29 = dcgettext(0LL, \"byte/character offset %s is too large\", 5);\n      else\n        v29 = dcgettext(0LL, \"field number %s is too large\", 5);\n      error(0, 0, v29, v28);\n      free(v27);\n      sub_404360(1);\n    }\n    v3 = v8 - 48 + 10 * v3;\n    v6 = 1;\nLABEL_16:\n    ++v2;\n  }\n  if ( v5 )\n  {\n    if ( v4 )\n    {\n      if ( !v7 )\n        goto LABEL_13;\n    }\n    else if ( !v7 )\n    {\n      if ( (a2 & 1) == 0 )\n      {\n        v23 = \"invalid range with no endpoint: -\";\n        goto LABEL_62;\n      }\n      v32 = 1LL;\nLABEL_13:\n      sub_404A30(v32, -1LL);\nLABEL_14:\n      if ( !*v2 )\n        goto LABEL_24;\nLABEL_15:\n      v3 = 0LL;\n      v6 = 0;\n      v5 = 0;\n      v7 = 0;\n      v4 = 0;\n      goto LABEL_16;\n    }\n    if ( v32 > v3 )\n    {\n      v23 = \"invalid decreasing range\";\n      goto LABEL_62;\n    }\n    sub_404A30(v32, v3);\n    goto LABEL_14;\n  }\n  if ( !v3 )\n  {\n    if ( (a2 & 4) != 0 )\n    {\nLABEL_69:\n      v24 = dcgettext(0LL, \"byte/character positions are numbered from 1\", 5);\n      goto LABEL_63;\n    }\n    goto LABEL_72;\n  }\n  sub_404A30(v3, v3);\n  if ( *v2 )\n    goto LABEL_15;\nLABEL_24:\n  if ( !nmemb )\n  {\n    if ( (a2 & 4) != 0 )\n    {\n      v24 = dcgettext(0LL, \"missing list of byte/character positions\", 5);\n    }\n    else\n    {\n      v23 = \"missing list of fields\";\nLABEL_62:\n      v24 = dcgettext(0LL, v23, 5);\n    }\n    goto LABEL_63;\n  }\n  v9 = 0LL;\n  qsort(ptr, nmemb, 0x10uLL, (__compar_fn_t)compar);\n  v10 = nmemb;\n  v11 = (unsigned __int64 *)ptr;\n  while ( v9 < v10 )\n  {\nLABEL_27:\n    if ( ++v9 < v10 )\n    {\n      v12 = 2 * v9;\n      v13 = 16 * v9 - 16;\n      v14 = &v11[2 * v9];\n      v15 = (char *)v11 + v13;\n      v16 = *(unsigned __int64 *)((char *)v11 + v13 + 8);\n      if ( v16 >= *v14 )\n      {\n        while ( 1 )\n        {\n          if ( v14[1] >= v16 )\n            v16 = v14[1];\n          *((_QWORD *)v15 + 1) = v16;\n          memmove(v14, &v11[v12 + 2], 16 * (v10 - v9) - 16);\n          v11 = (unsigned __int64 *)ptr;\n          v10 = nmemb - 1;\n          nmemb = v10;\n          if ( v10 <= v9 )\n            break;\n          v15 = (char *)ptr + v13;\n          v14 = (unsigned __int64 *)((char *)ptr + v12 * 8);\n          v16 = *(_QWORD *)((char *)ptr + v13 + 8);\n          if ( *((_QWORD *)ptr + 2 * v9) > v16 )\n          {\n            if ( v9 < v10 )\n              goto LABEL_27;\n            goto LABEL_34;\n          }\n        }\n      }\n    }\n  }\nLABEL_34:\n  if ( (a2 & 2) != 0 )\n  {\n    ptr = 0LL;\n    v19 = *v11;\n    nmemb = 0LL;\n    qword_6103C0 = 0LL;\n    if ( v19 > 1 )\n      sub_404A30(1LL, v19 - 1);\n    v20 = v11 + 2;\n    if ( v10 > 1 )\n    {\n      do\n      {\n        v21 = *(v20 - 1) + 1;\n        if ( v21 != *v20 )\n          sub_404A30(v21, *v20 - 1);\n        v20 += 2;\n      }\n      while ( &v11[2 * v10] != v20 );\n    }\n    v22 = v11[2 * v10 - 1];\n    if ( v22 != -1LL )\n      sub_404A30(v22 + 1, -1LL);\n    free(v11);\n    v10 = nmemb;\n    v11 = (unsigned __int64 *)ptr;\n  }\n  nmemb = v10 + 1;\n  ptr = (void *)sub_407BB0(v11);\n  result = (char *)ptr + 16 * nmemb - 16;\n  result[1] = -1LL;\n  *result = -1LL;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4050A0",
            "funcStartAddr": "0x4050a0",
            "funcEndAddr": "0x4050d6",
            "decompiledFuncCode": "void sub_4050A0()\n{\n  nmemb = 0LL;\n  qword_6103C0 = 0LL;\n  free(ptr);\n  ptr = 0LL;\n}\n"
        },
        {
            "funcName": "sub_4050E0",
            "funcStartAddr": "0x4050e0",
            "funcEndAddr": "0x4050ea",
            "decompiledFuncCode": "void __noreturn sub_4050E0()\n{\n  sub_404360(1);\n}\n"
        },
        {
            "funcName": "sub_4050F0",
            "funcStartAddr": "0x4050f0",
            "funcEndAddr": "0x405206",
            "decompiledFuncCode": "__int64 __fastcall sub_4050F0(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n\n  v5 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += a4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( a3 )\n      {\n        v10 = memcmp(&a3[a4 * v14], v5, a4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += a4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    return v14;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_405210",
            "funcStartAddr": "0x405210",
            "funcEndAddr": "0x405281",
            "decompiledFuncCode": "void __fastcall sub_405210(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_407570(1LL);\n  v5 = sub_407260(0LL, 8LL, a2);\n  error(0, 0, v3, v5, v4);\n}\n"
        },
        {
            "funcName": "sub_405290",
            "funcStartAddr": "0x405290",
            "funcEndAddr": "0x4053a8",
            "decompiledFuncCode": "int __fastcall sub_405290(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  const char *v11; // rax\n  const char *v12; // rax\n  char *IO_write_ptr; // rax\n\n  v3 = 0LL;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, a2, a3) )\n    {\n      ++v9;\n      v3 = a2;\n      a2 += a3;\n      v11 = (const char *)sub_407590(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    a2 += a3;\n    v12 = (const char *)sub_407590(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  IO_write_ptr = stderr->_IO_write_ptr;\n  if ( IO_write_ptr >= stderr->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 10;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_4053B0",
            "funcStartAddr": "0x4053b0",
            "funcEndAddr": "0x405420",
            "decompiledFuncCode": "__int64 __fastcall sub_4053B0(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  __int64 result; // rax\n\n  result = sub_4050F0(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_405210(a1, (__int64)a2, result);\n    sub_405290((__int64 *)a3, a4, a5);\n    a6();\n    return -1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405420",
            "funcStartAddr": "0x405420",
            "funcEndAddr": "0x40546d",
            "decompiledFuncCode": "__int64 __fastcall sub_405420(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  __int64 *v6; // rbx\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v6 = a2 + 1;\n    do\n    {\n      if ( !memcmp(s1, a3, a4) )\n        break;\n      v4 = *v6;\n      a3 += a4;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_405490",
            "funcStartAddr": "0x405490",
            "funcEndAddr": "0x40552e",
            "decompiledFuncCode": "__int64 sub_405490()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_4097E0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_6103C8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_6103D0 )\n      {\n        v5 = (const char *)sub_4073E0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(dword_610290);\n    }\n  }\n  result = sub_4097E0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405530",
            "funcStartAddr": "0x405530",
            "funcEndAddr": "0x4058cb",
            "decompiledFuncCode": "__int64 __fastcall sub_405530(const char *a1, _BYTE *a2, __int64 a3, size_t *a4, int a5, char a6)\n{\n  size_t v9; // rax\n  size_t v10; // r14\n  size_t v11; // r15\n  char *v12; // r12\n  size_t v13; // rdx\n  size_t v14; // rax\n  int v15; // esi\n  size_t v16; // r13\n  size_t v17; // r15\n  unsigned __int64 v18; // rbp\n  _BYTE *v19; // rdi\n  size_t v20; // rdx\n  _BYTE *v21; // rax\n  _BYTE *v22; // rdx\n  __int64 v23; // r13\n  size_t v25; // r12\n  size_t v26; // rax\n  size_t v27; // r15\n  wint_t v28; // edi\n  wchar_t *v29; // rdx\n  char *v30; // rax\n  wchar_t *v31; // r14\n  wchar_t v32; // edi\n  __int64 v33; // rax\n  unsigned __int64 v34; // rax\n  wchar_t *ptr; // [rsp+0h] [rbp-68h]\n  void *src; // [rsp+18h] [rbp-50h]\n  void *srca; // [rsp+18h] [rbp-50h]\n  __int64 size; // [rsp+20h] [rbp-48h]\n  char sizea; // [rsp+20h] [rbp-48h]\n  size_t sizeb; // [rsp+20h] [rbp-48h]\n  wchar_t *v43; // [rsp+28h] [rbp-40h]\n\n  src = (void *)a1;\n  v9 = strlen(a1);\n  v10 = v9;\n  if ( (a6 & 2) != 0 || (v25 = v9, __ctype_get_mb_cur_max() <= 1) )\n  {\nLABEL_2:\n    ptr = 0LL;\n    v11 = v10;\n    v12 = 0LL;\n    goto LABEL_3;\n  }\n  v26 = mbstowcs(0LL, a1, 0LL);\n  if ( v26 == -1LL )\n  {\n    if ( (a6 & 1) == 0 )\n    {\nLABEL_36:\n      v12 = 0LL;\n      v23 = -1LL;\n      free(0LL);\n      goto LABEL_28;\n    }\n    goto LABEL_2;\n  }\n  v27 = v26 + 1;\n  size = v26 + 1;\n  ptr = (wchar_t *)malloc(size * 4);\n  if ( !ptr )\n  {\n    v11 = v10;\n    v12 = 0LL;\n    if ( (a6 & 1) == 0 )\n      goto LABEL_36;\nLABEL_3:\n    v13 = *a4;\n    if ( *a4 < v11 )\n    {\n      v10 = *a4;\n      v14 = 0LL;\n      goto LABEL_5;\n    }\nLABEL_30:\n    if ( v11 < v13 )\n    {\n      v15 = a5;\n      v14 = v13 - v11;\n      *a4 = v11;\n      if ( a5 )\n      {\nLABEL_6:\n        v16 = 0LL;\n        if ( v15 != 1 )\n        {\n          v16 = v14 >> 1;\n          v14 = (v14 >> 1) + (v14 & 1);\n        }\n        goto LABEL_8;\n      }\nLABEL_32:\n      v16 = v14;\n      v14 = 0LL;\nLABEL_8:\n      v17 = v14 + v10;\n      if ( (a6 & 4) != 0 )\n      {\n        v17 = v10;\n        v14 = 0LL;\n      }\n      if ( (a6 & 8) != 0 )\n        v16 = 0LL;\n      if ( a3 )\n      {\n        v18 = (unsigned __int64)&a2[a3 - 1];\n        v19 = a2;\n        if ( (unsigned __int64)a2 < v18 && v14 )\n        {\n          do\n            *v19++ = 32;\n          while ( v14 + a2 - v19 && v18 > (unsigned __int64)v19 );\n        }\n        *v19 = 0;\n        v20 = v18 - (_QWORD)v19;\n        if ( v18 - (unsigned __int64)v19 > v10 )\n          v20 = v10;\n        v21 = mempcpy(v19, src, v20);\n        v22 = v21;\n        if ( v18 > (unsigned __int64)v21 && v16 )\n        {\n          do\n            *v22++ = 32;\n          while ( &v21[v16 - (_QWORD)v22] && v18 > (unsigned __int64)v22 );\n        }\n        *v22 = 0;\n      }\n      v23 = v17 + v16;\n      goto LABEL_27;\n    }\n    v13 = v11;\n    v14 = 0LL;\nLABEL_5:\n    v15 = a5;\n    *a4 = v13;\n    if ( a5 )\n      goto LABEL_6;\n    goto LABEL_32;\n  }\n  if ( !mbstowcs(ptr, a1, v27) )\n  {\n    v11 = v10;\n    v12 = 0LL;\n    goto LABEL_3;\n  }\n  ptr[size - 1] = 0;\n  v28 = *ptr;\n  v29 = ptr;\n  if ( *ptr )\n  {\n    sizea = 0;\n    do\n    {\n      v43 = v29;\n      if ( !iswprint(v28) )\n      {\n        *v43 = 65533;\n        sizea = 1;\n      }\n      v29 = v43 + 1;\n      v28 = v43[1];\n    }\n    while ( v28 );\n    v11 = wcswidth(ptr, v27);\n    if ( sizea )\n    {\n      sizeb = wcstombs(0LL, ptr, 0LL) + 1;\n      v30 = (char *)malloc(sizeb);\n      goto LABEL_46;\n    }\n  }\n  else\n  {\n    v11 = wcswidth(ptr, v27);\n  }\n  v13 = *a4;\n  if ( *a4 >= v11 )\n  {\n    v12 = 0LL;\n    goto LABEL_30;\n  }\n  sizeb = v25 + 1;\n  v30 = (char *)malloc(v25 + 1);\nLABEL_46:\n  v12 = v30;\n  if ( v30 )\n  {\n    v31 = ptr;\n    v32 = *ptr;\n    srca = (void *)*a4;\n    if ( *ptr )\n    {\n      v11 = 0LL;\n      do\n      {\n        LODWORD(v33) = wcwidth(v32);\n        if ( (_DWORD)v33 == -1 )\n        {\n          *v31 = 65533;\n          v33 = 1LL;\n        }\n        else\n        {\n          v33 = (int)v33;\n        }\n        v34 = v11 + v33;\n        if ( (unsigned __int64)srca < v34 )\n          break;\n        v32 = *++v31;\n        v11 = v34;\n      }\n      while ( *v31 );\n    }\n    else\n    {\n      v31 = ptr;\n      v11 = 0LL;\n    }\n    *v31 = 0;\n    src = v12;\n    v10 = wcstombs(v12, ptr, sizeb);\n    goto LABEL_3;\n  }\n  if ( (a6 & 1) != 0 )\n    goto LABEL_3;\n  v23 = -1LL;\nLABEL_27:\n  free(ptr);\nLABEL_28:\n  free(v12);\n  return v23;\n}\n"
        },
        {
            "funcName": "sub_4058D0",
            "funcStartAddr": "0x4058d0",
            "funcEndAddr": "0x40596d",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4058D0(const char *a1, size_t *a2, int a3, char a4)\n{\n  void *v4; // r12\n  size_t v5; // r13\n  unsigned __int64 v6; // rax\n  unsigned __int64 v7; // rbx\n  _BYTE *v8; // rax\n  _BYTE *v9; // r14\n  void *v11; // rdi\n\n  v4 = 0LL;\n  v5 = *a2;\n  v6 = *a2;\n  while ( 1 )\n  {\n    v7 = v6 + 1;\n    v8 = realloc(v4, v6 + 1);\n    v9 = v8;\n    if ( !v8 )\n    {\n      free(v4);\n      return v9;\n    }\n    *a2 = v5;\n    v6 = sub_405530(a1, v8, v7, a2, a3, a4);\n    if ( v6 == -1LL )\n      break;\n    v4 = v9;\n    if ( v7 > v6 )\n      return v9;\n  }\n  v11 = v9;\n  v9 = 0LL;\n  free(v11);\n  return v9;\n}\n"
        },
        {
            "funcName": "sub_405970",
            "funcStartAddr": "0x405970",
            "funcEndAddr": "0x405a09",
            "decompiledFuncCode": "char *__fastcall sub_405970(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_6103D8 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405A10",
            "funcStartAddr": "0x405a10",
            "funcEndAddr": "0x405b02",
            "decompiledFuncCode": "char *__fastcall sub_405A10(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_4098A0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40C3D9;\n      if ( !v5 )\n        return (char *)&unk_40C3CE;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40C3D5;\n    if ( !v5 )\n      return (char *)&unk_40C3D2;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_405B10",
            "funcStartAddr": "0x401b40",
            "funcEndAddr": "0x401b45",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405B10(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405B10((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405B10((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409760((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405B10((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405A10(\"`\", a5);\n        v51 = sub_405A10(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_405B10(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405B10((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405B10((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409760((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405B10((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405A10(\"`\", a5);\n        v51 = sub_405A10(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_405B10",
            "funcStartAddr": "0x401b40",
            "funcEndAddr": "0x401b45",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405B10(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405B10((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405B10((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409760((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405B10((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405A10(\"`\", a5);\n        v51 = sub_405A10(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_405B10(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405B10((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405B10((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409760((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405B10((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405A10(\"`\", a5);\n        v51 = sub_405A10(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_406D40",
            "funcStartAddr": "0x401b45",
            "funcEndAddr": "0x401b4a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406D40(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  unsigned __int64 *v9; // rbx\n  _BYTE *v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rsi\n  _BYTE *v13; // rax\n  int v14; // r8d\n  unsigned __int64 v17; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  int v19; // [rsp+18h] [rbp-40h]\n  int v20; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_6102D8;\n  v8 = v6;\n  v19 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407DA0();\n    if ( off_6102D8 == &xmmword_6102E0 )\n    {\n      v7 = (__m128i *)sub_407BB0(0LL);\n      off_6102D8 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      off_6102D8 = (void *)sub_407BB0(off_6102D8);\n      v7 = (__m128i *)off_6102D8;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v9 = (unsigned __int64 *)&v7[a1];\n  v10 = (_BYTE *)v9[1];\n  v20 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = *v9;\n  v11 = sub_405B10(v10, *v9, a2, a3, *(_DWORD *)a4, v20, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v17 <= v11 )\n  {\n    v12 = v11 + 1;\n    *v9 = v11 + 1;\n    if ( v10 != (_BYTE *)&unk_6103E0 )\n    {\n      v18 = v11 + 1;\n      free(v10);\n      v12 = v18;\n    }\n    v13 = (_BYTE *)sub_407B50(v12);\n    v14 = *(_DWORD *)a4;\n    v9[1] = (unsigned __int64)v13;\n    v10 = v13;\n    sub_405B10(v13, v12, a2, a3, v14, v20, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v19;\n  return v10;\n}\n\n_BYTE *__fastcall sub_406D40(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  unsigned __int64 *v9; // rbx\n  _BYTE *v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rsi\n  _BYTE *v13; // rax\n  int v14; // r8d\n  unsigned __int64 v17; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  int v19; // [rsp+18h] [rbp-40h]\n  int v20; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_6102D8;\n  v8 = v6;\n  v19 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407DA0();\n    if ( off_6102D8 == &xmmword_6102E0 )\n    {\n      v7 = (__m128i *)sub_407BB0(0LL);\n      off_6102D8 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      off_6102D8 = (void *)sub_407BB0(off_6102D8);\n      v7 = (__m128i *)off_6102D8;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v9 = (unsigned __int64 *)&v7[a1];\n  v10 = (_BYTE *)v9[1];\n  v20 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = *v9;\n  v11 = sub_405B10(v10, *v9, a2, a3, *(_DWORD *)a4, v20, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v17 <= v11 )\n  {\n    v12 = v11 + 1;\n    *v9 = v11 + 1;\n    if ( v10 != (_BYTE *)&unk_6103E0 )\n    {\n      v18 = v11 + 1;\n      free(v10);\n      v12 = v18;\n    }\n    v13 = (_BYTE *)sub_407B50(v12);\n    v14 = *(_DWORD *)a4;\n    v9[1] = (unsigned __int64)v13;\n    v10 = v13;\n    sub_405B10(v13, v12, a2, a3, v14, v20, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v19;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_406D40",
            "funcStartAddr": "0x401b45",
            "funcEndAddr": "0x401b4a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406D40(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  unsigned __int64 *v9; // rbx\n  _BYTE *v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rsi\n  _BYTE *v13; // rax\n  int v14; // r8d\n  unsigned __int64 v17; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  int v19; // [rsp+18h] [rbp-40h]\n  int v20; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_6102D8;\n  v8 = v6;\n  v19 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407DA0();\n    if ( off_6102D8 == &xmmword_6102E0 )\n    {\n      v7 = (__m128i *)sub_407BB0(0LL);\n      off_6102D8 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      off_6102D8 = (void *)sub_407BB0(off_6102D8);\n      v7 = (__m128i *)off_6102D8;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v9 = (unsigned __int64 *)&v7[a1];\n  v10 = (_BYTE *)v9[1];\n  v20 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = *v9;\n  v11 = sub_405B10(v10, *v9, a2, a3, *(_DWORD *)a4, v20, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v17 <= v11 )\n  {\n    v12 = v11 + 1;\n    *v9 = v11 + 1;\n    if ( v10 != (_BYTE *)&unk_6103E0 )\n    {\n      v18 = v11 + 1;\n      free(v10);\n      v12 = v18;\n    }\n    v13 = (_BYTE *)sub_407B50(v12);\n    v14 = *(_DWORD *)a4;\n    v9[1] = (unsigned __int64)v13;\n    v10 = v13;\n    sub_405B10(v13, v12, a2, a3, v14, v20, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v19;\n  return v10;\n}\n\n_BYTE *__fastcall sub_406D40(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  unsigned __int64 *v9; // rbx\n  _BYTE *v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rsi\n  _BYTE *v13; // rax\n  int v14; // r8d\n  unsigned __int64 v17; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  int v19; // [rsp+18h] [rbp-40h]\n  int v20; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_6102D8;\n  v8 = v6;\n  v19 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407DA0();\n    if ( off_6102D8 == &xmmword_6102E0 )\n    {\n      v7 = (__m128i *)sub_407BB0(0LL);\n      off_6102D8 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      off_6102D8 = (void *)sub_407BB0(off_6102D8);\n      v7 = (__m128i *)off_6102D8;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v9 = (unsigned __int64 *)&v7[a1];\n  v10 = (_BYTE *)v9[1];\n  v20 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = *v9;\n  v11 = sub_405B10(v10, *v9, a2, a3, *(_DWORD *)a4, v20, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v17 <= v11 )\n  {\n    v12 = v11 + 1;\n    *v9 = v11 + 1;\n    if ( v10 != (_BYTE *)&unk_6103E0 )\n    {\n      v18 = v11 + 1;\n      free(v10);\n      v12 = v18;\n    }\n    v13 = (_BYTE *)sub_407B50(v12);\n    v14 = *(_DWORD *)a4;\n    v9[1] = (unsigned __int64)v13;\n    v10 = v13;\n    sub_405B10(v13, v12, a2, a3, v14, v20, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v19;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_406EE0",
            "funcStartAddr": "0x406ee0",
            "funcEndAddr": "0x406f14",
            "decompiledFuncCode": "__int64 __fastcall sub_406EE0(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_6104E0;\n  result = sub_407D50(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406FD0",
            "funcStartAddr": "0x406fd0",
            "funcEndAddr": "0x407042",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406FD0(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_6104E0;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_405B10(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407050",
            "funcStartAddr": "0x407050",
            "funcEndAddr": "0x407131",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407050(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_6104E0;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_405B10(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_407B50(v11 + 1);\n  sub_405B10(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_407150",
            "funcStartAddr": "0x407150",
            "funcEndAddr": "0x4071e5",
            "decompiledFuncCode": "void sub_407150()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)off_6102D8;\n  if ( dword_6102F0 > 1 )\n  {\n    v1 = (void **)((char *)off_6102D8 + 24);\n    v2 = (void **)((char *)off_6102D8 + 16 * (unsigned int)(dword_6102F0 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_6103E0 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_6102E0 = 256LL;\n    *((_QWORD *)&xmmword_6102E0 + 1) = &unk_6103E0;\n  }\n  if ( v0 != &xmmword_6102E0 )\n  {\n    free(v0);\n    off_6102D8 = &xmmword_6102E0;\n  }\n  dword_6102F0 = 1;\n}\n"
        },
        {
            "funcName": "sub_407260",
            "funcStartAddr": "0x401b4a",
            "funcEndAddr": "0x401b4f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407260(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_407260(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_407260",
            "funcStartAddr": "0x401b4a",
            "funcEndAddr": "0x401b4f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407260(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_407260(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4072D0",
            "funcStartAddr": "0x401b4f",
            "funcEndAddr": "0x401b54",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4072D0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_4072D0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4072D0",
            "funcStartAddr": "0x401b4f",
            "funcEndAddr": "0x401b54",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4072D0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_4072D0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_407360",
            "funcStartAddr": "0x407360",
            "funcEndAddr": "0x4073d0",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407360(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_610510;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6104E0);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6104F0);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_610500);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_406D40(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4073E0",
            "funcStartAddr": "0x4073e0",
            "funcEndAddr": "0x4073f1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4073E0(__int64 a1)\n{\n  return sub_407360(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_407410",
            "funcStartAddr": "0x401b54",
            "funcEndAddr": "0x401b59",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407410(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_407410(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_407410",
            "funcStartAddr": "0x401b54",
            "funcEndAddr": "0x401b59",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407410(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_407410(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_407480",
            "funcStartAddr": "0x407480",
            "funcEndAddr": "0x4074ec",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407480(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6104E0);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6104F0);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_610500);\n  v8 = qword_610510;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_406D40(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_407570",
            "funcStartAddr": "0x407570",
            "funcEndAddr": "0x407581",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407570(int a1, __int64 a2)\n{\n  return sub_406D40(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6102A0);\n}\n"
        },
        {
            "funcName": "sub_407590",
            "funcStartAddr": "0x407590",
            "funcEndAddr": "0x4075a6",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407590(__int64 a1)\n{\n  return sub_406D40(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6102A0);\n}\n"
        },
        {
            "funcName": "sub_4075B0",
            "funcStartAddr": "0x401b59",
            "funcEndAddr": "0x401b5e",
            "decompiledFuncCode": "__int64 __fastcall sub_4075B0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_4075B0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_4075B0",
            "funcStartAddr": "0x401b59",
            "funcEndAddr": "0x401b5e",
            "decompiledFuncCode": "__int64 __fastcall sub_4075B0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_4075B0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_4079B0",
            "funcStartAddr": "0x4079b0",
            "funcEndAddr": "0x407a10",
            "decompiledFuncCode": "__int64 __fastcall sub_4079B0(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_4075B0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_4075B0(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_407A10",
            "funcStartAddr": "0x407a10",
            "funcEndAddr": "0x407acc",
            "decompiledFuncCode": "__int64 __fastcall sub_407A10(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_4075B0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_4075B0(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_407AD0",
            "funcStartAddr": "0x407ad0",
            "funcEndAddr": "0x407b44",
            "decompiledFuncCode": "int sub_407AD0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_40A199);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_407B50",
            "funcStartAddr": "0x407b50",
            "funcEndAddr": "0x407b6a",
            "decompiledFuncCode": "void *__fastcall sub_407B50(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_407DA0();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407BA0",
            "funcStartAddr": "0x407ba0",
            "funcEndAddr": "0x407ba2",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_407BA0(size_t a1)\n{\n  return sub_407B50(a1);\n}\n"
        },
        {
            "funcName": "sub_407BB0",
            "funcStartAddr": "0x407bb0",
            "funcEndAddr": "0x407be6",
            "decompiledFuncCode": "void *__fastcall sub_407BB0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_407DA0();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407D00",
            "funcStartAddr": "0x407d00",
            "funcEndAddr": "0x407d17",
            "decompiledFuncCode": "void *__fastcall sub_407D00(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_407B50(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_407D20",
            "funcStartAddr": "0x407d20",
            "funcEndAddr": "0x407d4e",
            "decompiledFuncCode": "__int64 __fastcall sub_407D20(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_407DA0(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_407D50",
            "funcStartAddr": "0x407d50",
            "funcEndAddr": "0x407d78",
            "decompiledFuncCode": "void *__fastcall sub_407D50(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_407B50(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_407D80",
            "funcStartAddr": "0x407d80",
            "funcEndAddr": "0x407d93",
            "decompiledFuncCode": "void *__fastcall sub_407D80(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_407D50(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_407DA0",
            "funcStartAddr": "0x407da0",
            "funcEndAddr": "0x407dd1",
            "decompiledFuncCode": "void __noreturn sub_407DA0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(dword_610290, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_407DE0",
            "funcStartAddr": "0x407de0",
            "funcEndAddr": "0x407df8",
            "decompiledFuncCode": "char *__fastcall sub_407DE0(const char *a1, size_t a2)\n{\n  char *result; // rax\n\n  result = strndup(a1, a2);\n  if ( !result )\n    sub_407DA0();\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407E00",
            "funcStartAddr": "0x407e00",
            "funcEndAddr": "0x408542",
            "decompiledFuncCode": "__int64 __fastcall sub_407E00(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // rbx\n  int *v8; // rax\n  int *v9; // r13\n  __int64 v10; // rax\n  char *v11; // r15\n  __int64 v12; // rbp\n  unsigned int v13; // r12d\n  int v14; // r13d\n  __int64 v16; // rsi\n  int v17; // eax\n  __int64 v18; // rax\n  char v19; // al\n  char *v20; // rsi\n  __int64 v21; // rcx\n  __int64 v22; // rax\n  __int64 v23; // rax\n  __int64 v24; // rdi\n  __int64 v25; // rcx\n  __int64 v26; // r9\n  int v27; // edi\n  int v28; // r10d\n  __int64 v29; // rcx\n  __int64 v30; // r9\n  int v31; // edi\n  __int64 v32; // rcx\n  __int64 v33; // r9\n  int v34; // edi\n  __int64 v35; // rcx\n  __int64 v36; // r9\n  int v37; // edi\n  __int64 v38; // rcx\n  __int64 v39; // r9\n  int v40; // edi\n  __int64 v41; // rcx\n  __int64 v42; // r9\n  int v43; // edi\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtol\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = strtol(nptr, p_endptr, a3);\n  v11 = *p_endptr;\n  v12 = v10;\n  if ( *p_endptr == nptr )\n  {\n    if ( !a5 )\n      return 4;\n    v14 = (unsigned __int8)*v11;\n    v13 = 4;\n    if ( !(_BYTE)v14 )\n      return v13;\n    v12 = 1LL;\n    v13 = 0;\n    if ( !strchr(a5, (char)v14) )\n      return 4;\nLABEL_16:\n    if ( (unsigned __int8)(v14 - 69) > 0x2Fu\n      || (v18 = 0x814400308945LL, !_bittest64(&v18, (unsigned int)(v14 - 69)))\n      || !strchr(a5, 48) )\n    {\nLABEL_17:\n      LODWORD(v16) = 1;\n      v17 = 1024;\n      goto LABEL_18;\n    }\n    v19 = v11[1];\n    if ( v19 != 68 )\n    {\n      if ( v19 == 105 )\n      {\n        v17 = 1024;\n        LODWORD(v16) = 2 * (v11[2] == 66) + 1;\nLABEL_18:\n        switch ( (char)v14 )\n        {\n          case 'B':\n            v16 = (int)v16;\n            if ( v12 < (__int64)0xFFE0000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x1FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 10;\n            break;\n          case 'E':\n            v32 = v17;\n            v16 = (int)v16;\n            v33 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_67;\n          case 'G':\n          case 'g':\n            v35 = v17;\n            v16 = (int)v16;\n            v36 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_74;\n          case 'K':\n          case 'k':\n            v21 = v17;\n            v16 = (int)v16;\n            v22 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_38;\n          case 'M':\n          case 'm':\n            v21 = v17;\n            v16 = (int)v16;\n            v24 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_43;\n          case 'P':\n            v25 = v17;\n            v16 = (int)v16;\n            v26 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_53;\n          case 'T':\n          case 't':\n            v29 = v17;\n            v16 = (int)v16;\n            v30 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_60;\n          case 'Y':\n            v38 = v17;\n            v16 = (int)v16;\n            v39 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_81;\n          case 'Z':\n            v41 = v17;\n            v16 = (int)v16;\n            v42 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_88;\n          case 'b':\n            v16 = (int)v16;\n            goto LABEL_48;\n          case 'c':\n            v16 = (int)v16;\n            break;\n          case 'w':\n            v16 = (int)v16;\n            if ( v12 < (__int64)0xC000000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 *= 2LL;\n            break;\n          default:\n            goto LABEL_27;\n        }\nLABEL_31:\n        v20 = &v11[v16];\n        *p_endptr = v20;\n        if ( *v20 )\n          v13 |= 2u;\n        goto LABEL_9;\n      }\n      if ( v19 != 66 )\n      {\n        switch ( (char)v14 )\n        {\n          case 'E':\n            v16 = 1LL;\n            v32 = 1024LL;\n            v33 = 0xFFE0000000000000LL;\nLABEL_67:\n            v34 = 6;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v33 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v32 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v32;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v34;\n            }\n            while ( v34 );\n            goto LABEL_104;\n          case 'F':\n          case 'H':\n          case 'I':\n          case 'J':\n          case 'L':\n          case 'N':\n          case 'O':\n          case 'Q':\n          case 'R':\n          case 'S':\n          case 'U':\n          case 'V':\n          case 'W':\n          case 'X':\n          case '[':\n          case '\\\\':\n          case ']':\n          case '^':\n          case '_':\n          case '`':\n          case 'a':\n          case 'd':\n          case 'e':\n          case 'f':\n          case 'h':\n          case 'i':\n          case 'j':\n          case 'l':\n          case 'n':\n          case 'o':\n          case 'p':\n          case 'q':\n          case 'r':\n          case 's':\n            goto LABEL_27;\n          case 'G':\n          case 'g':\n            v16 = 1LL;\n            v35 = 1024LL;\n            v36 = 0xFFE0000000000000LL;\nLABEL_74:\n            v37 = 3;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v36 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v35 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v35;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v37;\n            }\n            while ( v37 );\n            goto LABEL_104;\n          case 'K':\n          case 'k':\n            v16 = 1LL;\n            v21 = 1024LL;\n            v22 = 0xFFE0000000000000LL;\nLABEL_38:\n            if ( v12 < v22 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            goto LABEL_40;\n          case 'M':\n          case 'm':\n            v16 = 1LL;\n            v21 = 1024LL;\n            v24 = 0xFFE0000000000000LL;\nLABEL_43:\n            if ( v12 < v24 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            if ( v12 > 0x7FFFFFFFFFFFFFFFLL / v21 )\n              goto LABEL_105;\n            v12 *= v21;\n            if ( v12 >= v24 )\n            {\nLABEL_40:\n              if ( v23 < v12 )\n              {\nLABEL_105:\n                v12 = 0x7FFFFFFFFFFFFFFFLL;\n                v13 = 1;\n              }\n              else\n              {\n                v12 *= v21;\n              }\n            }\n            else\n            {\nLABEL_46:\n              v12 = 0x8000000000000000LL;\n              v13 = 1;\n            }\n            break;\n          case 'P':\n            v16 = 1LL;\n            v25 = 1024LL;\n            v26 = 0xFFE0000000000000LL;\nLABEL_53:\n            v27 = 5;\n            v28 = 0;\n            do\n            {\n              if ( v26 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v25 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v25;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v27;\n            }\n            while ( v27 );\n            goto LABEL_104;\n          case 'T':\n          case 't':\n            v16 = 1LL;\n            v29 = 1024LL;\n            v30 = 0xFFE0000000000000LL;\nLABEL_60:\n            v31 = 4;\n            v28 = 0;\n            do\n            {\n              if ( v30 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v29 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v29;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v31;\n            }\n            while ( v31 );\n            goto LABEL_104;\n          case 'Y':\n            v16 = 1LL;\n            v38 = 1024LL;\n            v39 = 0xFFE0000000000000LL;\nLABEL_81:\n            v40 = 8;\n            v28 = 0;\n            do\n            {\n              if ( v39 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v38 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v38;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v40;\n            }\n            while ( v40 );\n            goto LABEL_104;\n          case 'Z':\n            v16 = 1LL;\n            v41 = 1024LL;\n            v42 = 0xFFE0000000000000LL;\nLABEL_88:\n            v43 = 7;\n            v28 = 0;\n            do\n            {\n              if ( v42 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v41 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v41;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v43;\n            }\n            while ( v43 );\nLABEL_104:\n            v13 |= v28;\n            goto LABEL_31;\n          case 'b':\n            v16 = 1LL;\nLABEL_48:\n            if ( v12 < (__int64)0xFFC0000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 9;\n            break;\n          case 'c':\n            v16 = 1LL;\n            goto LABEL_31;\n          default:\n            goto LABEL_17;\n        }\n        goto LABEL_31;\n      }\n    }\n    LODWORD(v16) = 2;\n    v17 = 1000;\n    goto LABEL_18;\n  }\n  if ( *v9 )\n  {\n    v13 = 4;\n    if ( *v9 != 34 )\n      return v13;\n    v13 = 1;\n  }\n  else\n  {\n    v13 = 0;\n  }\n  if ( a5 )\n  {\n    v14 = (unsigned __int8)*v11;\n    if ( (_BYTE)v14 )\n    {\n      if ( !strchr(a5, (char)v14) )\n      {\nLABEL_27:\n        v13 |= 2u;\n        *a4 = v12;\n        return v13;\n      }\n      goto LABEL_16;\n    }\n  }\nLABEL_9:\n  *a4 = v12;\n  return v13;\n}\n"
        },
        {
            "funcName": "sub_408550",
            "funcStartAddr": "0x408550",
            "funcEndAddr": "0x408984",
            "decompiledFuncCode": "__int64 __fastcall sub_408550(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // r15\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // r12d\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // r9d\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( (v11[v10] & 0x2000) != 0 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, p_endptr, a3, 0);\n  if ( *p_endptr == nptr )\n  {\n    basea = *p_endptr;\n    if ( a5 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(a5, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( a5 )\n  {\n    v15 = (unsigned __int8)**p_endptr;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *p_endptr;\n      v26 = strchr(a5, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_40:\n        *a4 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      if ( (unsigned __int8)(v15 - 69) > 0x2Fu\n        || (v19 = 0x814400308945LL, !_bittest64(&v19, (unsigned int)(v15 - 69)))\n        || (v37 = v18, v20 = strchr(a5, 48), v18 = v37, !v20) )\n      {\nLABEL_27:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_28;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_28:\n          switch ( (char)v15 )\n          {\n            case 'B':\n              if ( (unsigned __int64)v13 >> 54 )\n                goto LABEL_38;\n              v13 <<= 10;\n              break;\n            case 'E':\n              goto LABEL_71;\n            case 'G':\n            case 'g':\n              goto LABEL_77;\n            case 'K':\n            case 'k':\n              goto LABEL_37;\n            case 'M':\n            case 'm':\n              goto LABEL_30;\n            case 'P':\n              goto LABEL_65;\n            case 'T':\n            case 't':\n              goto LABEL_59;\n            case 'Y':\n              goto LABEL_53;\n            case 'Z':\n              goto LABEL_47;\n            case 'b':\n              goto LABEL_44;\n            case 'c':\n              break;\n            case 'w':\n              if ( v13 < 0 )\n                goto LABEL_38;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_40;\n          }\nLABEL_33:\n          v24 = &v18[v22];\n          *p_endptr = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (char)v15 )\n          {\n            case 'E':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_71:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_51;\n            case 'F':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'L':\n            case 'N':\n            case 'O':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case '[':\n            case '\\\\':\n            case ']':\n            case '^':\n            case '_':\n            case '`':\n            case 'a':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'l':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n              goto LABEL_40;\n            case 'G':\n            case 'g':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_77:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_33;\n            case 'K':\n            case 'k':\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_37:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_33;\n              goto LABEL_38;\n            case 'M':\n            case 'm':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_30:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_38;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 'P':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_65:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_51;\n            case 'T':\n            case 't':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_59:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_51;\n            case 'Y':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_53:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_51;\n            case 'Z':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_47:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_51:\n              v14 |= v28;\n              break;\n            case 'b':\n              v22 = 1;\nLABEL_44:\n              if ( (unsigned __int64)v13 >> 55 )\n              {\nLABEL_38:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 'c':\n              v22 = 1;\n              goto LABEL_33;\n            default:\n              goto LABEL_27;\n          }\n          goto LABEL_33;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_28;\n    }\n  }\nLABEL_13:\n  *a4 = v13;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_408990",
            "funcStartAddr": "0x408990",
            "funcEndAddr": "0x408a6f",
            "decompiledFuncCode": "__int64 __fastcall sub_408990(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408A70",
            "funcStartAddr": "0x408a70",
            "funcEndAddr": "0x40908c",
            "decompiledFuncCode": "__int64 __fastcall sub_408A70(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        const char *a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rdi\n  const char **v35; // rbx\n  _BYTE *v36; // rbp\n  __int64 v37; // r12\n  const char *v38; // r12\n  __int64 v39; // rbp\n  char *v40; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v48; // [rsp+38h] [rbp-50h]\n  char v49; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+44h] [rbp-44h]\n  int v52; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v49 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v49), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v51 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v48 = 0;\n  v52 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v48 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v52 = 1;\n            ptr[v51] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v48 = 1;\n        }\n        else\n        {\n          v48 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v51 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v48 )\n  {\n    if ( a8 )\n    {\n      if ( v48 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v34 = stderr;\n        v35 = (const char **)a4;\n        v36 = ptr;\n        v37 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9, *v35);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v52 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v51;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v38 = *v12;\n          v39 = *a2;\n          v40 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v40, v39, a9, v38);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409090",
            "funcStartAddr": "0x409090",
            "funcEndAddr": "0x409656",
            "decompiledFuncCode": "__int64 __fastcall sub_409090(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_408990((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_408990((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_408A70(a1, a2, v12, a4, a5, a6, a7, v8, \"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_408A70(a1, a2, v12, a4, a5, a6, a7, v8, \"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_408A70(a1, a2, v12, a4, a5, 0, a7, v8, \"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43, v21);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41, v21);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_409660",
            "funcStartAddr": "0x409660",
            "funcEndAddr": "0x4096b6",
            "decompiledFuncCode": "__int64 __fastcall sub_409660(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_610520 = dword_6102FC;\n  dword_610524 = dword_6102F8;\n  result = sub_409090(a1, a2, a3, a4, a5, a6, &dword_610520, a7);\n  dword_6102FC = dword_610520;\n  nptr = (char *)qword_610530;\n  dword_6102F4 = dword_610528;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4096C0",
            "funcStartAddr": "0x4096c0",
            "funcEndAddr": "0x4096d8",
            "decompiledFuncCode": "__int64 __fastcall sub_4096C0(int a1, __int64 *a2, const char *a3)\n{\n  return sub_409660(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_4096E0",
            "funcStartAddr": "0x4096e0",
            "funcEndAddr": "0x4096f3",
            "decompiledFuncCode": "__int64 __fastcall sub_4096E0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409660(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_409700",
            "funcStartAddr": "0x409700",
            "funcEndAddr": "0x409715",
            "decompiledFuncCode": "__int64 __fastcall sub_409700(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409090(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_409720",
            "funcStartAddr": "0x409720",
            "funcEndAddr": "0x409736",
            "decompiledFuncCode": "__int64 __fastcall sub_409720(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409660(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_409740",
            "funcStartAddr": "0x409740",
            "funcEndAddr": "0x409758",
            "decompiledFuncCode": "__int64 __fastcall sub_409740(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409090(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_409760",
            "funcStartAddr": "0x409760",
            "funcEndAddr": "0x4097da",
            "decompiledFuncCode": "size_t __fastcall sub_409760(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_409840(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_4097E0",
            "funcStartAddr": "0x4097e0",
            "funcEndAddr": "0x40983d",
            "decompiledFuncCode": "__int64 __fastcall sub_4097E0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_409E10(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n    return 0xFFFFFFFFLL;\n  }\n  if ( !(_DWORD)result )\n    return result;\n  if ( v1 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)-(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_409840",
            "funcStartAddr": "0x409840",
            "funcEndAddr": "0x40989e",
            "decompiledFuncCode": "bool __fastcall sub_409840(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4098A0",
            "funcStartAddr": "0x4098a0",
            "funcEndAddr": "0x409e02",
            "decompiledFuncCode": "const char *sub_4098A0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = qword_610558;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_610558 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          qword_610558 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_409E10(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_409E10(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_409E10",
            "funcStartAddr": "0x409e10",
            "funcEndAddr": "0x409e8b",
            "decompiledFuncCode": "int __fastcall sub_409E10(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_409E90(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409E90",
            "funcStartAddr": "0x409e90",
            "funcEndAddr": "0x409ed0",
            "decompiledFuncCode": "int __fastcall sub_409E90(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_409ED0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_409ED0",
            "funcStartAddr": "0x409ed0",
            "funcEndAddr": "0x409f27",
            "decompiledFuncCode": "int __fastcall sub_409ED0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_409FA0",
            "funcStartAddr": "0x409fa0",
            "funcEndAddr": "0x409fb8",
            "decompiledFuncCode": "int __fastcall sub_409FA0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_610248 )\n    v1 = (void *)qword_610248;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_409FB8",
            "funcStartAddr": "0x409fb8",
            "funcEndAddr": "0x409fd8",
            "decompiledFuncCode": "__int64 __fastcall sub_409FB8(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_60FE30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 82
}