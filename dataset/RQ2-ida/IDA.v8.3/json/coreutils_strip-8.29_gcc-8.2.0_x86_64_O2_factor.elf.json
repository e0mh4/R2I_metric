{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_factor.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401a80",
            "funcEndAddr": "0x401c34",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  int v3; // eax\n  __int64 v4; // rbx\n  int v5; // eax\n  __int64 v6; // r12\n  int v7; // r13d\n  __int64 v9; // [rsp+0h] [rbp-38h] BYREF\n  void *ptr; // [rsp+8h] [rbp-30h]\n\n  sub_404760(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  if ( !buf )\n  {\n    buf = (void *)sub_407EE0(1024LL);\n    qword_613308 = (__int64)buf;\n  }\n  sub_40BC60(sub_4045F0);\n  sub_40BC60(sub_4023D0);\n  while ( 1 )\n  {\n    v3 = sub_408F40((unsigned int)a1, a2, \"\", &off_40F260, 0LL);\n    if ( v3 == -1 )\n      break;\n    if ( v3 == -130 )\n      sub_4042E0(0);\n    if ( v3 != 128 )\n    {\n      if ( v3 != -131 )\n        sub_4042E0(1);\n      v4 = sub_405150(\"Niels Moller\", aNielsM);\n      v5 = sub_405150(\"Torbjorn Granlund\", aTorbj);\n      sub_407DA0(\n        (_DWORD)stdout,\n        (unsigned int)\"factor\",\n        (unsigned int)&unk_40BDAC,\n        (_DWORD)off_613238,\n        (unsigned int)\"Paul Rubin\",\n        v5,\n        v4,\n        0LL);\n      exit(0);\n    }\n    byte_613310 = 1;\n  }\n  v6 = dword_6132BC;\n  if ( dword_6132BC >= a1 )\n  {\n    v7 = 1;\n    sub_406F70(&v9);\n    while ( sub_406F80(stdin) != -1 )\n      v7 &= sub_404170(ptr);\n    free(ptr);\n  }\n  else\n  {\n    LOBYTE(v7) = 1;\n    do\n    {\n      if ( !(unsigned __int8)sub_404170(a2[v6]) )\n        LOBYTE(v7) = 0;\n      ++v6;\n    }\n    while ( a1 > (int)v6 );\n  }\n  return (unsigned __int8)v7 ^ 1u;\n}\n"
        },
        {
            "funcName": "sub_401C6B",
            "funcStartAddr": "0x401c6b",
            "funcEndAddr": "0x401c8a",
            "decompiledFuncCode": "__int64 *sub_401C6B()\n{\n  return &program_invocation_short_name;\n}\n"
        },
        {
            "funcName": "sub_401C8A",
            "funcStartAddr": "0x401c8a",
            "funcEndAddr": "0x401cc1",
            "decompiledFuncCode": "__int64 sub_401C8A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_401CC1",
            "funcStartAddr": "0x401cc1",
            "funcEndAddr": "0x401d18",
            "decompiledFuncCode": "__int64 *sub_401CC1()\n{\n  __int64 *result; // rax\n\n  if ( !byte_6132E8 )\n  {\n    while ( qword_6132F0 < (unsigned __int64)(&qword_612E48 - qword_612E40 - 1) )\n      ((void (*)(void))qword_612E40[++qword_6132F0])();\n    result = sub_401C6B();\n    byte_6132E8 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_401D18",
            "funcStartAddr": "0x401d18",
            "funcEndAddr": "0x401d1d",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_401D18()\n{\n  return sub_401C8A();\n}\n"
        },
        {
            "funcName": "sub_401D20",
            "funcStartAddr": "0x401d20",
            "funcEndAddr": "0x401d79",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_401D20(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n  __int64 v5; // rdx\n\n  result = a2;\n  if ( (a2 & 1) == 0 )\n  {\n    result = a1;\n    a1 = a2;\n  }\n  if ( a1 )\n  {\n    v3 = result >> 1;\n    while ( 1 )\n    {\n      v4 = a1 >> 1;\n      if ( (a1 & 1) != 0 )\n      {\n        v5 = v4 - v3;\n        if ( !v5 )\n          return a1 | 1;\n        v3 += (v5 >> 63) & v5;\n        v4 = abs64(v5);\n      }\n      a1 = v4;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_401D80",
            "funcStartAddr": "0x401d80",
            "funcEndAddr": "0x401e55",
            "decompiledFuncCode": "void __fastcall sub_401D80(__int64 a1, unsigned __int64 a2, char a3)\n{\n  _BYTE *v3; // r13\n  unsigned __int64 *v4; // r12\n  int v5; // ebp\n  int v6; // ebx\n  __int64 v7; // r8\n  unsigned __int64 v8; // r11\n  __int64 v9; // rcx\n  int v10; // eax\n  __int64 i; // r10\n  __int64 v12; // r10\n\n  v3 = (_BYTE *)(a1 + 224);\n  v4 = (unsigned __int64 *)(a1 + 16);\n  v5 = *(unsigned __int8 *)(a1 + 250);\n  v6 = v5 - 1;\n  if ( !*(_BYTE *)(a1 + 250) )\n    goto LABEL_10;\n  v7 = v6;\n  v8 = v4[v6];\n  if ( a2 < v8 )\n  {\n    v9 = v6 - 1LL;\n    v10 = v5 - 1;\n    for ( i = v9; ; --i )\n    {\n      if ( --v10 == -1 )\n        goto LABEL_9;\n      if ( *(_QWORD *)(a1 + 8 * (i - 1) + 24) <= a2 )\n        break;\n    }\n    if ( *(_QWORD *)(a1 + 8 * (i - 1) + 24) == a2 )\n      goto LABEL_16;\n    v12 = i + 1;\n    v4 += v12;\n    v3 += v12;\n    if ( v6 > v10 )\n    {\nLABEL_9:\n      while ( 1 )\n      {\n        *(_QWORD *)(a1 + 8 * v7 + 24) = v8;\n        *(_BYTE *)(a1 + v7 + 225) = *(_BYTE *)(a1 + v7 + 224);\n        v7 = v9;\n        if ( v10 >= (int)v9 )\n          break;\n        v8 = *(_QWORD *)(a1 + 8 * v9-- + 16);\n      }\n      goto LABEL_10;\n    }\n    goto LABEL_10;\n  }\n  if ( a2 != v8 )\n  {\n    v4 += v6 + 1;\n    v3 += v6 + 1;\nLABEL_10:\n    *v4 = a2;\n    *v3 = a3;\n    *(_BYTE *)(a1 + 250) = v5 + 1;\n    return;\n  }\n  i = v6;\nLABEL_16:\n  v3[i] += a3;\n}\n"
        },
        {
            "funcName": "sub_401E60",
            "funcStartAddr": "0x401e60",
            "funcEndAddr": "0x401ec9",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_401E60(\n        unsigned __int64 a1,\n        unsigned __int64 a2,\n        unsigned __int64 a3,\n        __int64 a4,\n        unsigned __int64 a5)\n{\n  unsigned __int64 v6; // r10\n  unsigned __int64 v7; // rdx\n  unsigned __int64 v8; // r10\n  unsigned __int64 v9; // rdx\n\n  if ( (a2 & 1) == 0 )\n    goto LABEL_9;\n  a5 = a1;\n  do\n  {\n    while ( 1 )\n    {\n      v6 = (a1 * (unsigned __int128)a1) >> 64;\n      v7 = (a3 * (unsigned __int128)(a4 * a1 * a1)) >> 64;\n      a1 = v6 - v7;\n      if ( v6 < v7 )\n        a1 += a3;\n      a2 >>= 1;\n      if ( (a2 & 1) == 0 )\n        break;\n      v8 = (a1 * (unsigned __int128)a5) >> 64;\n      v9 = (a3 * (unsigned __int128)(a4 * a1 * a5)) >> 64;\n      a5 = v8 - v9;\n      if ( v8 < v9 )\n        a5 += a3;\n    }\nLABEL_9:\n    ;\n  }\n  while ( a2 );\n  return a5;\n}\n"
        },
        {
            "funcName": "sub_401ED0",
            "funcStartAddr": "0x401ed0",
            "funcEndAddr": "0x401f5d",
            "decompiledFuncCode": "__int64 __fastcall sub_401ED0(\n        unsigned __int64 a1,\n        __int64 a2,\n        unsigned __int64 a3,\n        unsigned __int64 a4,\n        unsigned int a5,\n        unsigned __int64 a6)\n{\n  unsigned __int64 v9; // rax\n  unsigned __int64 v10; // r11\n  unsigned int v11; // r8d\n  int v12; // esi\n  unsigned __int128 v13; // rax\n  unsigned __int64 v14; // rcx\n  unsigned __int64 v15; // rdx\n\n  v9 = sub_401E60(a3, a4, a1, a2, a6);\n  LOBYTE(v11) = v9 == v10 - a6 || a6 == v9;\n  if ( !(_BYTE)v11 && a5 > 1 )\n  {\n    v12 = 1;\n    while ( 1 )\n    {\n      v13 = v9 * (unsigned __int128)v9;\n      v14 = *((_QWORD *)&v13 + 1);\n      v15 = (v10 * (unsigned __int128)(unsigned __int64)(a2 * v13)) >> 64;\n      v9 = v14 - v15;\n      if ( v14 < v15 )\n        v9 = v14 - v15 + v10;\n      if ( v10 - a6 == v9 )\n        break;\n      if ( a6 != v9 && a5 != ++v12 )\n        continue;\n      return v11;\n    }\n    return 1;\n  }\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_401F60",
            "funcStartAddr": "0x401f60",
            "funcEndAddr": "0x4020c4",
            "decompiledFuncCode": "__int64 __fastcall sub_401F60(\n        _QWORD *a1,\n        __int64 a2,\n        unsigned __int64 a3,\n        __int64 a4,\n        unsigned __int64 a5,\n        __int64 a6,\n        unsigned __int64 a7,\n        __int64 a8)\n{\n  __int64 v8; // rbx\n  unsigned __int128 v9; // kr10_16\n  unsigned __int128 v10; // kr50_16\n  unsigned __int128 v11; // rax\n\n  v8 = -a8;\n  if ( a2 < 0 )\n    __assert_fail(\"(a1 >> (W_TYPE_SIZE - 1)) == 0\", \"src/factor.c\", 0x3E7u, \"mulredc2\");\n  if ( a4 < 0 )\n    __assert_fail(\"(b1 >> (W_TYPE_SIZE - 1)) == 0\", \"src/factor.c\", 0x3E8u, \"mulredc2\");\n  if ( a6 < 0 )\n    __assert_fail(\"(m1 >> (W_TYPE_SIZE - 1)) == 0\", \"src/factor.c\", 0x3E9u, \"mulredc2\");\n  v9 = (unsigned __int64)a6 * (unsigned __int128)(a5 * a3 * v8)\n     + __PAIR128__(((unsigned __int64)a4 * (unsigned __int128)a3) >> 64, (a7 * (unsigned __int128)(a5 * a3 * v8)) >> 64)\n     + (a5 * a3 != 0)\n     + a4 * a3\n     + ((a5 * (unsigned __int128)a3) >> 64);\n  v10 = (unsigned __int64)a6 * (unsigned __int128)(((unsigned __int64)v9 + a5 * a2) * v8)\n      + __PAIR128__(\n          (*((unsigned __int64 *)&v9 + 1) + (unsigned __int64)a4 * (unsigned __int128)(unsigned __int64)a2) >> 64,\n          (a7 * (unsigned __int128)(((unsigned __int64)v9 + a5 * a2) * v8)) >> 64)\n      + *((_QWORD *)&v9 + 1)\n      + a4 * a2\n      + (unsigned __int64)((_QWORD)v9 + a5 * a2 != 0)\n      + (((unsigned __int64)v9 + a5 * (unsigned __int128)(unsigned __int64)a2) >> 64);\n  v11 = v10;\n  if ( __PAIR128__(a6, a7) <= v10 )\n    v11 = v10 - __PAIR128__(a6, a7);\n  *a1 = *((_QWORD *)&v11 + 1);\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_4020D0",
            "funcStartAddr": "0x4020d0",
            "funcEndAddr": "0x402234",
            "decompiledFuncCode": "__int64 __fastcall sub_4020D0(\n        __int64 *a1,\n        unsigned __int64 *a2,\n        unsigned __int64 *a3,\n        unsigned __int64 *a4,\n        __int64 a5,\n        __int64 *a6)\n{\n  int v7; // ebp\n  unsigned __int64 v8; // r10\n  __int64 v9; // r11\n  unsigned __int64 v10; // r13\n  __int64 v11; // r14\n  unsigned __int64 v12; // r12\n  __int64 v13; // rax\n  unsigned __int64 i; // rbp\n  __int64 v15; // rax\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  __int64 v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+18h] [rbp-50h]\n  unsigned __int64 v21; // [rsp+20h] [rbp-48h]\n  unsigned __int64 v22; // [rsp+20h] [rbp-48h]\n\n  v7 = 64;\n  v8 = *a2;\n  v9 = a2[1];\n  v10 = *a4;\n  v11 = a4[1];\n  v12 = *a3;\n  v18 = *a6;\n  v17 = a6[1];\n  do\n  {\n    if ( (v12 & 1) != 0 )\n    {\n      v19 = v9;\n      v21 = v8;\n      v18 = sub_401F60(a1, v17, v18, v9, v8, v11, v10, a5);\n      v17 = *a1;\n      v8 = v21;\n      v9 = v19;\n    }\n    v12 >>= 1;\n    v13 = sub_401F60(a1, v9, v8, v9, v8, v11, v10, a5);\n    v9 = *a1;\n    v8 = v13;\n    --v7;\n  }\n  while ( v7 );\n  for ( i = a3[1]; i; v8 = v15 )\n  {\n    if ( (i & 1) != 0 )\n    {\n      v22 = v8;\n      v20 = v9;\n      v18 = sub_401F60(a1, v17, v18, v9, v8, v11, v10, a5);\n      v17 = *a1;\n      v8 = v22;\n      v9 = v20;\n    }\n    v15 = sub_401F60(a1, v9, v8, v9, v8, v11, v10, a5);\n    i >>= 1;\n    v9 = *a1;\n  }\n  *a1 = v17;\n  return v18;\n}\n"
        },
        {
            "funcName": "sub_402240",
            "funcStartAddr": "0x402240",
            "funcEndAddr": "0x402337",
            "decompiledFuncCode": "_BOOL8 __fastcall sub_402240(\n        unsigned __int64 *a1,\n        __int64 a2,\n        unsigned __int64 *a3,\n        unsigned __int64 *a4,\n        unsigned int a5,\n        __int64 *a6)\n{\n  __int64 v9; // rax\n  __int64 v10; // rsi\n  __int64 v11; // r9\n  unsigned __int64 v12; // rdx\n  __int128 v13; // kr00_16\n  int v14; // r15d\n  bool v16; // [rsp+Fh] [rbp-49h]\n  __int64 v17[8]; // [rsp+18h] [rbp-40h] BYREF\n\n  v9 = sub_4020D0(v17, a3, a4, a1, a2, a6);\n  v10 = v17[0];\n  if ( *a6 != v9 || a6[1] != v17[0] )\n  {\n    v11 = a1[1];\n    v12 = *a1;\n    v13 = *(_OWORD *)a1 - *(_OWORD *)a6;\n    v16 = v17[0] == *((_QWORD *)&v13 + 1) && v9 == (_QWORD)v13;\n    if ( !v16 )\n    {\n      v14 = 1;\n      if ( a5 <= 1 )\n        return v16;\n      while ( 1 )\n      {\n        v9 = sub_401F60(v17, v10, v9, v10, v9, v11, v12, a2);\n        v10 = v17[0];\n        if ( v13 == __PAIR128__(v17[0], v9) )\n          break;\n        if ( *a6 == v9 && a6[1] == v17[0] )\n          return v16;\n        if ( a5 == ++v14 )\n          return v16;\n        v12 = *a1;\n        v11 = a1[1];\n      }\n    }\n  }\n  return 1;\n}\n"
        },
        {
            "funcName": "sub_402340",
            "funcStartAddr": "0x402340",
            "funcEndAddr": "0x4023c1",
            "decompiledFuncCode": "void *__fastcall sub_402340(__int64 a1, size_t a2)\n{\n  _BYTE *v2; // rax\n  size_t v3; // rbx\n  __int64 v4; // rdi\n  __int64 v5; // r8\n  _BYTE *v6; // rdx\n  _BYTE *v7; // rcx\n  void *v8; // r8\n  void *result; // rax\n  _BYTE v10[56]; // [rsp+0h] [rbp-38h] BYREF\n\n  v2 = (_BYTE *)sub_404710(a1, v10);\n  v3 = 20 - (v2 - v10);\n  if ( v3 >= a2 )\n  {\n    v8 = (void *)qword_613308;\n  }\n  else\n  {\n    v4 = qword_613308;\n    v5 = v2 - v10 - 20;\n    v6 = (_BYTE *)qword_613308;\n    v7 = (_BYTE *)(v5 + a2 + qword_613308);\n    do\n      *v6++ = 48;\n    while ( v6 != v7 );\n    v8 = (void *)(v4 + a2 + v5);\n  }\n  result = memcpy(v8, v2, v3);\n  qword_613308 = (__int64)result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4023D0",
            "funcStartAddr": "0x4023d0",
            "funcEndAddr": "0x402440",
            "decompiledFuncCode": "void *sub_4023D0()\n{\n  __int64 v0; // rbx\n  void *result; // rax\n  char *v2; // rbx\n  int *v3; // rax\n\n  v0 = qword_613308 - (_QWORD)buf;\n  if ( sub_404690(1, buf, qword_613308 - (_QWORD)buf) == v0 )\n  {\n    result = buf;\n    qword_613308 = (__int64)buf;\n  }\n  else\n  {\n    v2 = dcgettext(0LL, \"write error\", 5);\n    v3 = __errno_location();\n    error(1, *v3, \"%s\", v2);\n    return (void *)sub_402440();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402440",
            "funcStartAddr": "0x402440",
            "funcEndAddr": "0x402487",
            "decompiledFuncCode": "void __fastcall sub_402440(unsigned __int64 *a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  if ( a2 )\n  {\n    if ( a1[1] )\n      __assert_fail(\"factors->plarge[1] == 0\", \"src/factor.c\", 0x235u, \"factor_insert_large\");\n    *a1 = a3;\n    a1[1] = a2;\n  }\n  else\n  {\n    sub_401D80((__int64)a1, a3, 1);\n  }\n}\n"
        },
        {
            "funcName": "sub_402490",
            "funcStartAddr": "0x402490",
            "funcEndAddr": "0x402582",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_402490(\n        unsigned __int64 *a1,\n        unsigned __int64 a2,\n        unsigned __int64 a3,\n        unsigned __int64 a4,\n        unsigned __int64 a5)\n{\n  unsigned __int64 v5; // r9\n  __int64 v6; // rax\n  __int64 v7; // rax\n  __int64 v8; // rax\n\n  if ( (a5 & 1) == 0 )\n    __assert_fail(\"b0 & 1\", \"src/factor.c\", 0x1E3u, \"gcd2_odd\");\n  v5 = a2;\n  if ( a2 | a3 )\n  {\n    while ( (a3 & 1) == 0 )\n    {\n      v6 = v5 << 63;\n      v5 >>= 1;\n      a3 = v6 | (a3 >> 1);\n    }\n    while ( a4 | v5 )\n    {\n      while ( v5 <= a4 && (a3 <= a5 || v5 != a4) )\n      {\n        if ( v5 >= a4 && (a3 >= a5 || v5 != a4) )\n        {\n          *a1 = v5;\n          return a3;\n        }\n        a4 = (__PAIR128__(a4, a5) - __PAIR128__(v5, a3)) >> 64;\n        a5 -= a3;\n        do\n        {\n          v7 = a4 << 63;\n          a4 >>= 1;\n          a5 = v7 | (a5 >> 1);\n        }\n        while ( (a5 & 1) == 0 );\n        if ( !(a4 | v5) )\n          goto LABEL_16;\n      }\n      v5 = (__PAIR128__(v5, a3) - __PAIR128__(a4, a5)) >> 64;\n      a3 -= a5;\n      do\n      {\n        v8 = v5 << 63;\n        v5 >>= 1;\n        a3 = v8 | (a3 >> 1);\n      }\n      while ( (a3 & 1) == 0 );\n    }\nLABEL_16:\n    *a1 = 0LL;\n    return sub_401D20(a5, a3);\n  }\n  else\n  {\n    *a1 = a4;\n    return a5;\n  }\n}\n"
        },
        {
            "funcName": "sub_402590",
            "funcStartAddr": "0x402590",
            "funcEndAddr": "0x402632",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_402590(\n        unsigned __int64 *a1,\n        unsigned __int64 a2,\n        unsigned __int64 a3,\n        unsigned __int64 a4,\n        unsigned __int64 a5)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 v6; // r10\n  unsigned __int64 v7; // rdx\n  int v8; // r10d\n  unsigned __int64 v9; // r9\n  unsigned __int64 v10; // r8\n  int v11; // edx\n  unsigned __int64 v12; // rcx\n\n  if ( !a4 )\n    __assert_fail(\"d1 != 0\", \"src/factor.c\", 0x1A3u, \"mod2\");\n  result = a3;\n  if ( a2 )\n  {\n    _BitScanReverse64(&v6, a4);\n    _BitScanReverse64(&v7, a2);\n    v8 = (v6 ^ 0x3F) - (v7 ^ 0x3F);\n    v9 = (a4 << v8) | (a5 >> (64 - (unsigned __int8)v8));\n    v10 = a5 << v8;\n    if ( v8 > 0 )\n    {\n      v11 = 0;\n      do\n      {\n        if ( v9 < a2 || v9 == a2 && result >= v10 )\n        {\n          a2 = (__PAIR128__(a2, result) - __PAIR128__(v9, v10)) >> 64;\n          result -= v10;\n        }\n        ++v11;\n        v12 = v9 << 63;\n        v9 >>= 1;\n        v10 = v12 | (v10 >> 1);\n      }\n      while ( v8 != v11 );\n    }\n    *a1 = a2;\n  }\n  else\n  {\n    *a1 = 0LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402640",
            "funcStartAddr": "0x402640",
            "funcEndAddr": "0x4026e4",
            "decompiledFuncCode": "void *__fastcall sub_402640(unsigned __int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // r8\n  int v3; // r9d\n  __int64 v4; // rsi\n  unsigned __int64 v5; // rcx\n  unsigned __int64 v6; // rdx\n  unsigned __int64 v7; // rdi\n  unsigned __int64 v8; // rax\n  unsigned __int64 v9; // r10\n  __int64 v11; // [rsp+0h] [rbp-10h]\n\n  v2 = a2;\n  if ( !a1 )\n    return sub_402340(a2, 0LL);\n  v3 = 64;\n  v4 = 0LL;\n  v5 = 1000000000LL;\n  v6 = a1 / 0x3B9ACA00;\n  v7 = a1 % 0x3B9ACA00;\n  v8 = 0LL;\n  do\n  {\n    v4 *= 2LL;\n    v9 = v5 << 63;\n    v5 >>= 1;\n    v8 = v9 | (v8 >> 1);\n    if ( v5 < v7 || v5 == v7 && v8 <= v2 )\n    {\n      ++v4;\n      v7 = (__PAIR128__(v7, v2) - __PAIR128__(v5, v8)) >> 64;\n      v2 -= v8;\n    }\n    --v3;\n  }\n  while ( v3 );\n  v11 = v2;\n  sub_402640(v6, v4);\n  return sub_402340(v11, 9uLL);\n}\n"
        },
        {
            "funcName": "sub_4026F0",
            "funcStartAddr": "0x4026f0",
            "funcEndAddr": "0x4027c2",
            "decompiledFuncCode": "void *__fastcall sub_4026F0(char a1)\n{\n  void *result; // rax\n  __int64 v2; // rbp\n  int v3; // eax\n  char *v4; // rbx\n  char *v5; // rbx\n  size_t v6; // rbp\n\n  result = (void *)qword_613308;\n  v2 = qword_613308 + 1;\n  *(_BYTE *)qword_613308 = a1;\n  qword_613308 = v2;\n  if ( a1 == 10 )\n  {\n    v3 = dword_613230;\n    v4 = (char *)buf;\n    if ( dword_613230 == -1 )\n    {\n      v3 = isatty(0);\n      dword_613230 = v3;\n    }\n    if ( v3 )\n    {\n      return sub_4023D0();\n    }\n    else\n    {\n      result = (void *)(v2 - (_QWORD)v4);\n      v5 = v4 + 512;\n      if ( (unsigned __int64)result > 0x1FF )\n      {\n        while ( *(v5 - 1) != 10 )\n          --v5;\n        qword_613308 = (__int64)v5;\n        v6 = v2 - (_QWORD)v5;\n        sub_4023D0();\n        result = memcpy(buf, v5, v6);\n        qword_613308 = (__int64)result + v6;\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4027D0",
            "funcStartAddr": "0x4027d0",
            "funcEndAddr": "0x402be1",
            "decompiledFuncCode": "void __fastcall sub_4027D0(unsigned __int64 a1, unsigned __int64 a2, __int64 a3)\n{\n  unsigned __int64 v3; // r12\n  unsigned __int64 v4; // rcx\n  int v5; // esi\n  __int64 v6; // rax\n  unsigned __int64 v7; // rdx\n  unsigned __int64 v8; // rdi\n  unsigned __int64 v9; // r8\n  unsigned __int64 v10; // r13\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rbp\n  unsigned __int64 v13; // rbx\n  unsigned __int64 v14; // r15\n  __int64 v15; // rcx\n  __int64 v16; // r14\n  __int64 v17; // r11\n  __int64 v18; // rax\n  __int64 v19; // rdx\n  __int64 v20; // r8\n  unsigned __int64 v21; // r10\n  unsigned __int64 v22; // r9\n  unsigned __int64 v23; // rdx\n  unsigned __int64 v24; // rsi\n  unsigned __int64 v25; // rcx\n  unsigned __int64 v26; // rdx\n  __int64 v27; // rax\n  unsigned __int128 v28; // rax\n  unsigned __int64 v29; // rsi\n  __int64 v30; // rdi\n  unsigned __int64 v31; // rdi\n  unsigned __int64 v32; // rdx\n  unsigned __int64 v33; // rsi\n  unsigned __int64 v34; // rsi\n  unsigned __int64 v35; // rax\n  __int64 v36; // r11\n  __int64 v37; // rcx\n  unsigned __int64 v38; // r11\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // rdx\n  unsigned __int64 v41; // r8\n  char v42; // al\n  unsigned __int64 v43; // rsi\n  __int64 v44; // rdx\n  unsigned __int64 v45; // r8\n  bool v46; // zf\n  char v47; // al\n  unsigned __int64 v48; // [rsp+0h] [rbp-68h]\n  unsigned __int64 v50; // [rsp+10h] [rbp-58h]\n  __int64 v51; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v52; // [rsp+10h] [rbp-58h]\n  __int64 v53; // [rsp+18h] [rbp-50h]\n  unsigned __int64 v54; // [rsp+18h] [rbp-50h]\n  __int64 v55; // [rsp+18h] [rbp-50h]\n  unsigned __int64 v56; // [rsp+20h] [rbp-48h]\n  unsigned __int64 v57; // [rsp+28h] [rbp-40h]\n\n  v48 = a2;\n  if ( a1 <= 1 )\nLABEL_42:\n    __assert_fail(\"(1) < (n)\", \"src/factor.c\", 0x5C2u, \"factor_using_pollard_rho\");\n  v3 = a1;\n  v57 = a2 + 1;\n  while ( 2 )\n  {\n    v4 = v3;\n    v5 = 64;\n    v6 = 1LL;\n    v7 = 0LL;\n    v8 = 0LL;\n    do\n    {\n      v9 = v4 << 63;\n      v4 >>= 1;\n      v7 = v9 | (v7 >> 1);\n      if ( __PAIR128__(v4, v7) <= __PAIR128__(v6, v8) )\n      {\n        v6 = (__PAIR128__(v6, v8) - __PAIR128__(v4, v7)) >> 64;\n        v8 -= v7;\n      }\n      --v5;\n    }\n    while ( v5 );\n    v10 = v8;\n    v11 = 2 * v8 - v3;\n    v12 = v11 + (v3 & -(__int64)(v3 - v8 > v8));\n    if ( v3 <= v48 )\nLABEL_35:\n      __assert_fail(\"a < n\", \"src/factor.c\", 0x5C8u, \"factor_using_pollard_rho\");\n    v13 = v11 + (v3 & -(__int64)(v3 - v8 > v8));\n    v14 = v13;\n    v15 = 1LL;\n    v16 = 1LL;\nLABEL_9:\n    v17 = v15;\n    v18 = (unsigned __int8)byte_40C220[(unsigned __int8)v3 >> 1];\n    v19 = 2 * v18 - v3 * v18 * v18;\n    v20 = 2 * (2 * v19 - v3 * v19 * v19) - v3 * (2 * v19 - v3 * v19 * v19) * (2 * v19 - v3 * v19 * v19);\n    v21 = v3 - v48;\n    v22 = v48 - v3;\n    while ( 1 )\n    {\n      v23 = (v3 * (unsigned __int128)(v20 * v12 * v12)) >> 64;\n      v24 = ((v12 * (unsigned __int128)v12) >> 64) - v23;\n      if ( (v12 * (unsigned __int128)v12) >> 64 < v23 )\n        v24 += v3;\n      v12 = v22 + v24 + (v3 & -(__int64)(v24 < v21));\n      v25 = ((v14 - v12 + (v3 & -(__int64)(v14 < v12))) * (unsigned __int128)v10) >> 64;\n      v26 = (v3 * (unsigned __int128)(v20 * (v14 - v12 + (v3 & -(__int64)(v14 < v12))) * v10)) >> 64;\n      v10 = v25 - v26;\n      if ( v25 < v26 )\n        v10 += v3;\n      if ( (v16 & 0x1F) == 1 )\n        break;\nLABEL_15:\n      if ( !--v16 )\n      {\n        if ( v17 )\n        {\n          v27 = v12;\n          do\n          {\n            v28 = (unsigned __int64)v27 * (unsigned __int128)(unsigned __int64)v27;\n            v29 = *((_QWORD *)&v28 + 1);\n            v30 = *((_QWORD *)&v28 + 1);\n            *((_QWORD *)&v28 + 1) = (v3 * (unsigned __int128)(unsigned __int64)(v20 * v28)) >> 64;\n            v31 = v30 - *((_QWORD *)&v28 + 1);\n            if ( v29 < *((_QWORD *)&v28 + 1) )\n              v31 += v3;\n            ++v16;\n            v27 = v22 + v31 + (v3 & -(__int64)(v31 < v21));\n          }\n          while ( v17 != v16 );\n          v14 = v12;\n          v13 = v22 + v31 + (v3 & -(__int64)(v31 < v21));\n          v17 *= 2LL;\n          v12 = v13;\n        }\n        else\n        {\n          v16 = 0LL;\n          v13 = v12;\n          v17 = 0LL;\n          v14 = v12;\n        }\n      }\n    }\n    if ( sub_401D20(v10, v3) == 1 )\n    {\n      v13 = v12;\n      goto LABEL_15;\n    }\n    do\n    {\n      v32 = (v3 * (unsigned __int128)(v20 * v13 * v13)) >> 64;\n      v33 = ((v13 * (unsigned __int128)v13) >> 64) - v32;\n      if ( (v13 * (unsigned __int128)v13) >> 64 < v32 )\n        v33 += v3;\n      v13 = (v3 & -(__int64)(v33 < v21)) + v22 + v33;\n      v34 = v3;\n      v35 = sub_401D20(v14 - v13 + (v3 & -(__int64)(v14 < v13)), v3);\n    }\n    while ( v35 == 1 );\n    v37 = v36;\n    v38 = v35;\n    if ( v3 == v35 )\n    {\n      ++v48;\n      ++v57;\n      if ( v3 <= 1 )\n        goto LABEL_42;\n      continue;\n    }\n    break;\n  }\n  v39 = v3 / v35;\n  v40 = v3 % v38;\n  v41 = v3 / v38;\n  v3 /= v38;\n  if ( v38 > 0x17DED78 )\n  {\n    v53 = v37;\n    v50 = v38;\n    v56 = v39;\n    v42 = sub_403840(v38, v34, v40, v37, v41);\n    v38 = v50;\n    v37 = v53;\n    v41 = v56;\n    if ( !v42 )\n    {\n      v43 = v57;\n      sub_4027D0(v50, v57, a3);\n      v45 = v56;\n      v15 = v53;\n      v46 = v56 == 1;\n      if ( v56 > 1 )\n        goto LABEL_31;\nLABEL_38:\n      if ( v46 )\n        return;\n      v13 = 0LL;\n      v14 = 0LL;\n      v12 = 0LL;\nLABEL_34:\n      if ( v48 >= v45 )\n        goto LABEL_35;\n      goto LABEL_9;\n    }\n  }\n  v43 = v38;\n  v54 = v41;\n  v51 = v37;\n  sub_401D80(a3, v38, 1);\n  v45 = v54;\n  v15 = v51;\n  v46 = v54 == 1;\n  if ( v54 <= 1 )\n    goto LABEL_38;\nLABEL_31:\n  if ( v45 > 0x17DED78 )\n  {\n    v55 = v15;\n    v52 = v45;\n    v47 = sub_403840(v45, v43, v44, v15, v45);\n    v45 = v52;\n    v15 = v55;\n    if ( !v47 )\n    {\n      v12 %= v52;\n      v14 %= v52;\n      v13 %= v52;\n      goto LABEL_34;\n    }\n  }\n  sub_401D80(a3, v45, 1);\n}\n"
        },
        {
            "funcName": "sub_402BF0",
            "funcStartAddr": "0x402bf0",
            "funcEndAddr": "0x403205",
            "decompiledFuncCode": "void __fastcall sub_402BF0(unsigned __int64 a1, unsigned __int64 a2, unsigned __int64 a3, unsigned __int64 *a4)\n{\n  unsigned __int64 v5; // rbp\n  __int64 v6; // rcx\n  unsigned __int64 v7; // rdx\n  unsigned __int64 v8; // rax\n  unsigned __int64 v9; // rsi\n  bool v10; // cf\n  unsigned __int64 v11; // rdx\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rbx\n  __int64 v14; // rsi\n  unsigned __int128 v15; // kr10_16\n  unsigned __int64 v16; // r15\n  __int64 v17; // r13\n  __int64 v18; // rax\n  __int64 v19; // rax\n  __int64 v20; // r14\n  __int128 v21; // rax\n  unsigned __int128 v22; // rax\n  unsigned __int64 v23; // rsi\n  unsigned __int128 v24; // rax\n  __int64 v25; // rcx\n  unsigned __int64 v26; // r8\n  unsigned __int64 v27; // rdx\n  __int64 i; // r15\n  __int64 v29; // rax\n  unsigned __int128 v30; // kr40_16\n  unsigned __int128 v31; // kr20_16\n  unsigned __int64 v32; // rax\n  __int128 v33; // rax\n  unsigned __int128 v34; // rax\n  unsigned __int64 v35; // rcx\n  unsigned __int128 v36; // rax\n  unsigned __int64 v37; // rdx\n  signed __int64 v38; // rsi\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // r8\n  unsigned __int64 v41; // rsi\n  __int64 v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rcx\n  __int64 v47; // r8\n  unsigned __int64 v48; // r8\n  __int64 v49; // rax\n  __int64 v50; // rdx\n  unsigned __int128 v51; // rax\n  __int64 v52; // rcx\n  char v53; // al\n  unsigned __int64 v54; // rax\n  __int64 v55; // [rsp+0h] [rbp-A8h]\n  unsigned __int64 v56; // [rsp+0h] [rbp-A8h]\n  __int64 v57; // [rsp+8h] [rbp-A0h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-98h]\n  __int64 v60; // [rsp+20h] [rbp-88h]\n  unsigned __int64 v61; // [rsp+28h] [rbp-80h]\n  __int64 v63; // [rsp+48h] [rbp-60h] BYREF\n  __int64 v64; // [rsp+50h] [rbp-58h] BYREF\n  __int64 v65; // [rsp+58h] [rbp-50h] BYREF\n  unsigned __int64 v66; // [rsp+60h] [rbp-48h] BYREF\n  unsigned __int64 v67[8]; // [rsp+68h] [rbp-40h] BYREF\n\n  v5 = a1;\n  v6 = a1 < 2 ? 127LL : 63LL;\n  v7 = a1 < 2;\n  v8 = a1 >= 2;\n  do\n  {\n    v9 = v7;\n    v7 *= 2LL;\n    v8 = (v9 >> 63) | (2 * v8);\n    if ( a1 < v8 || a1 == v8 && v7 >= a2 )\n    {\n      v8 = (__PAIR128__(v8, v7) - __PAIR128__(a1, a2)) >> 64;\n      v7 -= a2;\n    }\n    --v6;\n  }\n  while ( v6 != -1 );\n  v55 = v8;\n  v57 = v7;\n  v10 = __CFADD__(v7, v7);\n  v11 = 2 * v7;\n  v12 = v8 + v10 + v8;\n  v63 = v12;\n  v13 = v11;\n  v14 = v12;\n  if ( v12 > a1 || v12 == a1 && a2 <= v11 )\n  {\n    v63 = (__PAIR128__(v12, v11) - __PAIR128__(a1, a2)) >> 64;\n    v15 = __PAIR128__(v12, v11) - __PAIR128__(a1, a2);\n    v14 = v15 >> 64;\n    v13 = v15;\n  }\n  v64 = v14;\n  v65 = v14;\n  if ( a2 == 1 && !a1 )\n    return;\n  v58 = v13;\n  v16 = v13;\n  v17 = 1LL;\n  v60 = 1LL;\n  while ( 2 )\n  {\n    v18 = (unsigned __int8)byte_40C220[(unsigned __int8)a2 >> 1];\n    v19 = 2 * (2 * v18 - a2 * v18 * v18) - a2 * (2 * v18 - a2 * v18 * v18) * (2 * v18 - a2 * v18 * v18);\n    v20 = 2 * v19 - a2 * v19 * v19;\n    while ( 1 )\n    {\n      *(_QWORD *)&v21 = sub_401F60(v67, v14, v13, v14, v13, v5, a2, v20);\n      *((_QWORD *)&v21 + 1) = v67[0];\n      v22 = a3 + v21;\n      v63 = *((_QWORD *)&v22 + 1);\n      v23 = *((_QWORD *)&v22 + 1);\n      v13 = v22;\n      if ( __PAIR128__(v5, a2) <= v22 )\n      {\n        v24 = v22 - __PAIR128__(v5, a2);\n        v63 = *((_QWORD *)&v24 + 1);\n        v23 = *((_QWORD *)&v24 + 1);\n        v13 = v24;\n      }\n      v25 = (__PAIR128__(v64, v58) - __PAIR128__(v23, v13)) >> 64;\n      v26 = v58 - v13;\n      if ( v25 < 0 )\n      {\n        v25 = (__PAIR128__(v5, a2) + __PAIR128__(v25, v26)) >> 64;\n        v26 += a2;\n      }\n      v57 = sub_401F60(v67, v55, v57, v25, v26, v5, a2, v20);\n      v55 = v67[0];\n      if ( (v17 & 0x1F) == 1 )\n        break;\n      v14 = v63;\nLABEL_21:\n      if ( !--v17 )\n      {\n        v64 = v14;\n        v16 = v13;\n        if ( v60 )\n        {\n          v27 = v13;\n          for ( i = 0LL; i != v60; ++i )\n          {\n            v29 = sub_401F60(v67, v14, v27, v14, v27, v5, a2, v20);\n            v30 = __PAIR128__(v67[0], a3) + (unsigned __int64)v29;\n            v63 = *((_QWORD *)&v30 + 1);\n            v14 = v30 >> 64;\n            v27 = v30;\n            if ( __PAIR128__(v5, a2) <= v30 )\n            {\n              v63 = (v30 - __PAIR128__(v5, a2)) >> 64;\n              v31 = v30 - __PAIR128__(v5, a2);\n              v14 = v31 >> 64;\n              v27 = v31;\n            }\n          }\n          v16 = v27;\n        }\n        v17 = v60;\n        v58 = v13;\n        v13 = v16;\n        v65 = v14;\n        v60 *= 2LL;\n      }\n    }\n    v32 = sub_402490(&v66, v67[0], v57, v5, a2);\n    if ( !v66 && v32 == 1 )\n    {\n      v14 = v63;\n      v16 = v13;\n      v65 = v63;\n      goto LABEL_21;\n    }\n    do\n    {\n      *(_QWORD *)&v33 = sub_401F60(v67, v65, v16, v65, v16, v5, a2, v20);\n      *((_QWORD *)&v33 + 1) = v67[0];\n      v34 = a3 + v33;\n      v65 = *((_QWORD *)&v34 + 1);\n      v35 = *((_QWORD *)&v34 + 1);\n      v16 = v34;\n      if ( __PAIR128__(v5, a2) <= v34 )\n      {\n        v36 = v34 - __PAIR128__(v5, a2);\n        v65 = *((_QWORD *)&v36 + 1);\n        v35 = *((_QWORD *)&v36 + 1);\n        v16 = v36;\n      }\n      v38 = (__PAIR128__(v64, v58) - __PAIR128__(v35, v16)) >> 64;\n      v37 = v58 - v16;\n      if ( v38 < 0 )\n      {\n        v38 = (__PAIR128__(v5, a2) + __PAIR128__(v38, v37)) >> 64;\n        v37 += a2;\n      }\n      v39 = sub_402490(&v66, v38, v37, v5, a2);\n      if ( v66 )\n      {\n        v40 = v39;\n        if ( a2 == v39 && v5 == v66 )\n        {\n          sub_402BF0(v5, a2, a3 + 1, a4, v39);\n          return;\n        }\n        v41 = v39;\n        v56 = v39;\n        v42 = (unsigned __int8)byte_40C220[(unsigned __int8)v39 >> 1];\n        v43 = 2 * (2 * v42 - v40 * v42 * v42) - v40 * (2 * v42 - v40 * v42 * v42) * (2 * v42 - v40 * v42 * v42);\n        a2 *= 2 * v43 - v40 * v43 * v43;\n        if ( (unsigned __int8)sub_404050(v66, v41) )\n        {\n          v44 = v66;\n          sub_402440(a4, v66, v56);\n        }\n        else\n        {\n          v44 = v56;\n          sub_402BF0(v66, v56, a3 + 1, a4, v56);\n        }\n        goto LABEL_43;\n      }\n    }\n    while ( v39 == 1 );\n    v48 = v39;\n    v49 = (unsigned __int8)byte_40C220[(unsigned __int8)v39 >> 1];\n    v50 = 2 * v49 - v48 * v49 * v49;\n    *(_QWORD *)&v51 = 2 * v50;\n    *((_QWORD *)&v51 + 1) = v48 * v50 * v50;\n    v52 = 2 * (v51 - *((_QWORD *)&v51 + 1)) - v48 * (v51 - *((_QWORD *)&v51 + 1)) * (v51 - *((_QWORD *)&v51 + 1));\n    a2 *= v52;\n    if ( v5 < v48 )\n    {\n      v5 = 0LL;\n    }\n    else\n    {\n      v51 = v48 * (unsigned __int128)a2;\n      v5 = v52 * (v5 - *((_QWORD *)&v51 + 1));\n    }\n    if ( v48 > 1\n      && (v48 <= 0x17DED78 || (v61 = v48, v53 = sub_403840(v48, v38, *((_QWORD *)&v51 + 1), v52, v48), v48 = v61, v53)) )\n    {\n      v44 = v48;\n      sub_401D80((__int64)a4, v48, 1);\n    }\n    else\n    {\n      v44 = a3 + 1;\n      sub_4027D0(v48, a3 + 1, (__int64)a4);\n    }\n    if ( !v5 )\n    {\nLABEL_43:\n      if ( a2 > 1 && (a2 <= 0x17DED78 || (unsigned __int8)sub_403840(a2, v44, v45, v46, v47)) )\n        sub_401D80((__int64)a4, a2, 1);\n      else\n        sub_4027D0(a2, a3, (__int64)a4);\n      return;\n    }\n    if ( !(unsigned __int8)sub_404050(v5, a2) )\n    {\n      v13 = sub_402590((unsigned __int64 *)&v63, v63, v13, v5, a2);\n      v58 = sub_402590((unsigned __int64 *)&v64, v64, v58, v5, a2);\n      v54 = sub_402590((unsigned __int64 *)&v65, v65, v16, v5, a2);\n      v14 = v63;\n      v16 = v54;\n      continue;\n    }\n    break;\n  }\n  sub_402440(a4, v5, a2);\n}\n"
        },
        {
            "funcName": "sub_403210",
            "funcStartAddr": "0x403210",
            "funcEndAddr": "0x403836",
            "decompiledFuncCode": "void __fastcall sub_403210(unsigned __int64 a1, unsigned __int64 a2, __int64 a3)\n{\n  unsigned __int64 v3; // r14\n  unsigned __int64 v4; // rcx\n  __int64 v5; // r13\n  unsigned __int64 v6; // r12\n  unsigned int v7; // ebp\n  __int64 v8; // rbx\n  unsigned __int64 v9; // r15\n  __int64 v10; // r8\n  unsigned __int64 v11; // rdx\n  __int64 v12; // rbx\n  __int64 v13; // r13\n  __int64 v14; // r15\n  unsigned __int64 v15; // rsi\n  unsigned __int128 v16; // rax\n  unsigned __int64 v17; // rax\n  unsigned __int64 i; // rbp\n  unsigned __int128 v19; // rax\n  unsigned __int64 v20; // rdx\n  unsigned __int64 v21; // rdx\n  unsigned __int64 v22; // rdx\n  unsigned __int64 v23; // rdx\n  __int64 v24; // rdx\n  unsigned __int64 v25; // rdx\n  _QWORD *v26; // rbx\n  unsigned __int64 v27; // r15\n  unsigned __int64 v28; // r15\n  unsigned __int64 v29; // r15\n  unsigned int v30; // r8d\n  unsigned int v31; // edx\n  unsigned __int64 v32; // rsi\n  __int64 v33; // rdi\n  unsigned int v34; // r8d\n  unsigned int v35; // edx\n  unsigned __int64 v36; // rsi\n  __int64 v37; // rdi\n  unsigned int v38; // r8d\n  unsigned int v39; // edx\n  unsigned __int64 v40; // rsi\n  __int64 v41; // rdi\n  unsigned int v42; // r8d\n  unsigned int v43; // edx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdi\n  unsigned __int64 v46; // [rsp+8h] [rbp-50h]\n  __int64 v48; // [rsp+18h] [rbp-40h]\n  unsigned int v49; // [rsp+18h] [rbp-40h]\n  unsigned int v50; // [rsp+18h] [rbp-40h]\n  unsigned int v51; // [rsp+18h] [rbp-40h]\n  unsigned int v52; // [rsp+18h] [rbp-40h]\n\n  v3 = a2;\n  *(_BYTE *)(a3 + 250) = 0;\n  v46 = a1;\n  *(_QWORD *)(a3 + 8) = 0LL;\n  if ( a1 || a2 > 1 )\n  {\n    if ( (a2 & 1) == 0 )\n    {\n      if ( !a2 )\n      {\n        _BitScanForward64(&v4, a1);\n        v3 = a1 >> v4;\n        sub_401D80(a3, 2uLL, v4 + 64);\n        v46 = 0LL;\nLABEL_7:\n        v5 = 26LL;\n        v6 = 3LL;\n        v7 = 0;\n        v8 = 0LL;\n        v9 = 0x5555555555555555LL;\n        v10 = 0xAAAAAAAAAAAAAAABLL;\n        while ( 1 )\n        {\n          v25 = v10 * v3;\n          v26 = (_QWORD *)(16 * v8 + 4244128);\n          if ( v10 * v3 > v9 )\n          {\n            v20 = v3 * v26[2];\n            if ( v20 > v26[3] )\n              goto LABEL_22;\n          }\n          else\n          {\n            do\n            {\n              v3 = v25;\n              v48 = v10;\n              sub_401D80(a3, v6, 1);\n              v10 = v48;\n              v25 = v48 * v3;\n            }\n            while ( v48 * v3 <= v9 );\n            v20 = v3 * v26[2];\n            if ( v20 > v26[3] )\n            {\nLABEL_22:\n              v21 = v3 * v26[4];\n              if ( v21 > v26[5] )\n                goto LABEL_23;\n              goto LABEL_37;\n            }\n          }\n          v27 = v6 + (unsigned __int8)byte_40EFA0[v7 + 1];\n          do\n          {\n            v3 = v20;\n            sub_401D80(a3, v27, 1);\n            v20 = v3 * v26[2];\n          }\n          while ( v20 <= v26[3] );\n          v21 = v3 * v26[4];\n          if ( v21 > v26[5] )\n          {\nLABEL_23:\n            v22 = v3 * v26[6];\n            if ( v26[7] >= v22 )\n              goto LABEL_40;\n            goto LABEL_24;\n          }\nLABEL_37:\n          v28 = v6 + (unsigned __int8)byte_40EFA0[v7 + 2] + (unsigned __int64)(unsigned __int8)byte_40EFA0[v7 + 1];\n          do\n          {\n            v3 = v21;\n            sub_401D80(a3, v28, 1);\n            v21 = v3 * v26[4];\n          }\n          while ( v21 <= v26[5] );\n          v22 = v3 * v26[6];\n          if ( v26[7] >= v22 )\n          {\nLABEL_40:\n            v29 = (unsigned __int8)byte_40EFA0[v7 + 2]\n                + v6\n                + (unsigned __int8)byte_40EFA0[v7 + 3]\n                + (unsigned __int64)(unsigned __int8)byte_40EFA0[v7 + 1];\n            do\n            {\n              v3 = v22;\n              sub_401D80(a3, v29, 1);\n              v22 = v3 * v26[6];\n            }\n            while ( v22 <= v26[7] );\n            v23 = v3 * v26[8];\n            if ( v26[9] < v23 )\n              goto LABEL_25;\n            goto LABEL_43;\n          }\nLABEL_24:\n          v23 = v3 * v26[8];\n          if ( v26[9] < v23 )\n            goto LABEL_25;\nLABEL_43:\n          v3 = v23;\n          v30 = v7 + 5;\n          while ( 1 )\n          {\n            v31 = v7 + 1;\n            v32 = v6;\n            do\n            {\n              v33 = v31++;\n              v32 += (unsigned __int8)byte_40EFA0[v33];\n            }\n            while ( v30 != v31 );\n            v49 = v30;\n            sub_401D80(a3, v32, 1);\n            v30 = v49;\n            if ( v3 * v26[8] > v26[9] )\n              break;\n            v3 *= v26[8];\n          }\nLABEL_25:\n          if ( v3 * v26[10] <= v26[11] )\n          {\n            v3 *= v26[10];\n            v42 = v7 + 6;\n            while ( 1 )\n            {\n              v43 = v7 + 1;\n              v44 = v6;\n              do\n              {\n                v45 = v43++;\n                v44 += (unsigned __int8)byte_40EFA0[v45];\n              }\n              while ( v42 != v43 );\n              v52 = v42;\n              sub_401D80(a3, v44, 1);\n              v42 = v52;\n              if ( v3 * v26[10] > v26[11] )\n                break;\n              v3 *= v26[10];\n            }\n          }\n          if ( v26[13] >= v3 * v26[12] )\n          {\n            v3 *= v26[12];\n            v38 = v7 + 7;\n            while ( 1 )\n            {\n              v39 = v7 + 1;\n              v40 = v6;\n              do\n              {\n                v41 = v39++;\n                v40 += (unsigned __int8)byte_40EFA0[v41];\n              }\n              while ( v38 != v39 );\n              v51 = v38;\n              sub_401D80(a3, v40, 1);\n              v38 = v51;\n              if ( v3 * v26[12] > v26[13] )\n                break;\n              v3 *= v26[12];\n            }\n          }\n          if ( v3 * v26[14] <= v26[15] )\n          {\n            v3 *= v26[14];\n            v34 = v7 + 8;\n            while ( 1 )\n            {\n              v35 = v7 + 1;\n              v36 = v6;\n              do\n              {\n                v37 = v35++;\n                v36 += (unsigned __int8)byte_40EFA0[v37];\n              }\n              while ( v34 != v35 );\n              v50 = v34;\n              sub_401D80(a3, v36, 1);\n              v34 = v50;\n              if ( v3 * v26[14] > v26[15] )\n                break;\n              v3 *= v26[14];\n            }\n          }\n          v6 += v5;\n          if ( v3 < v6 * v6 )\n            goto LABEL_48;\n          v7 += 8;\n          if ( v7 > 0x29B )\n            goto LABEL_48;\nLABEL_30:\n          v8 = v7;\n          v5 = (unsigned __int8)byte_40ECE0[v7];\n          v24 = 2LL * v7;\n          v10 = qword_40C2A0[v24];\n          v9 = qword_40C2A8[v24];\n        }\n      }\n      _BitScanForward64(&v11, a2);\n      v46 = a1 >> v11;\n      v3 = (a1 << (64 - (unsigned __int8)v11)) | (a2 >> v11);\n      sub_401D80(a3, 2uLL, v11);\n    }\n    if ( v46 )\n    {\n      v12 = 1LL;\n      v13 = 2LL;\n      v14 = 0xAAAAAAAAAAAAAAABLL;\n      v6 = 3LL;\n      while ( 1 )\n      {\n        v15 = v3 * v14;\n        v16 = v6 * (unsigned __int128)(v3 * v14);\n        if ( v46 >= *((_QWORD *)&v16 + 1) )\n        {\n          v17 = v14 * (v46 - *((_QWORD *)&v16 + 1));\n          for ( i = qword_40C298[2 * v12]; v17 <= i; v17 = v14 * (v46 - *((_QWORD *)&v19 + 1)) )\n          {\n            v3 = v15;\n            v46 = v17;\n            sub_401D80(a3, v6, 1);\n            v15 *= v14;\n            v19 = v6 * (unsigned __int128)v15;\n            if ( *((_QWORD *)&v19 + 1) > v46 )\n              break;\n          }\n        }\n        v7 = v12;\n        v6 += v13;\n        ++v12;\n        if ( !v46 || v7 > 0x29B )\n          break;\n        v13 = (unsigned __int8)byte_40EFA0[v12];\n        v14 = qword_40C290[2 * v12];\n      }\n      if ( v7 <= 0x29B )\n        goto LABEL_30;\nLABEL_48:\n      if ( v46 )\n      {\n        if ( !(unsigned __int8)sub_404050(v46, v3) )\n        {\n          sub_402BF0(v46, v3, 1uLL, (unsigned __int64 *)a3);\n          return;\n        }\n      }\n      else\n      {\n        if ( v3 <= 1 )\n          return;\n        if ( !(unsigned __int8)sub_404050(0LL, v3) )\n        {\n          sub_4027D0(v3, 1uLL, a3);\n          return;\n        }\n      }\n      sub_402440((unsigned __int64 *)a3, v46, v3);\n      return;\n    }\n    goto LABEL_7;\n  }\n}\n"
        },
        {
            "funcName": "sub_403840",
            "funcStartAddr": "0x403840",
            "funcEndAddr": "0x403ade",
            "decompiledFuncCode": "__int64 __fastcall sub_403840(unsigned __int64 a1)\n{\n  unsigned __int64 v1; // r14\n  unsigned int v3; // eax\n  unsigned __int64 v4; // rcx\n  int v5; // esi\n  unsigned __int64 v6; // r15\n  __int64 v7; // rax\n  __int64 v8; // rax\n  unsigned __int64 v9; // rdx\n  __int64 v10; // r13\n  __int64 v11; // rax\n  unsigned __int64 v12; // rdi\n  unsigned __int64 v13; // rbp\n  char *v14; // r12\n  unsigned __int64 v15; // r14\n  _QWORD *v16; // r11\n  unsigned __int64 v17; // rax\n  _QWORD *v18; // r11\n  unsigned __int128 v19; // rax\n  char *v20; // rax\n  unsigned __int64 v22; // rsi\n  int v23; // eax\n  unsigned __int64 v24; // rcx\n  unsigned __int64 v25; // rdi\n  unsigned __int64 v26; // [rsp+8h] [rbp-160h]\n  _QWORD *v27; // [rsp+10h] [rbp-158h]\n  unsigned int v28; // [rsp+1Ch] [rbp-14Ch]\n  unsigned __int64 v29; // [rsp+20h] [rbp-148h]\n  int v30; // [rsp+28h] [rbp-140h]\n  unsigned __int8 v31; // [rsp+2Fh] [rbp-139h]\n  char v32[16]; // [rsp+30h] [rbp-138h] BYREF\n  _QWORD v33[29]; // [rsp+40h] [rbp-128h] BYREF\n  unsigned __int8 v34; // [rsp+12Ah] [rbp-3Eh]\n\n  v1 = a1 - 1;\n  v26 = a1 - 1;\n  if ( (((_BYTE)a1 - 1) & 1) != 0 )\n  {\n    v1 = a1 - 1;\n    v28 = 0;\n  }\n  else\n  {\n    v3 = 0;\n    do\n    {\n      v1 >>= 1;\n      ++v3;\n    }\n    while ( (v1 & 1) == 0 );\n    v28 = v3;\n  }\n  v4 = a1;\n  v5 = 64;\n  v6 = 0LL;\n  v7 = (unsigned __int8)byte_40C220[(unsigned __int8)a1 >> 1];\n  v8 = 2 * (2 * v7 - a1 * v7 * v7) - a1 * (2 * v7 - a1 * v7 * v7) * (2 * v7 - a1 * v7 * v7);\n  v9 = 0LL;\n  v10 = 2 * v8 - a1 * v8 * v8;\n  v11 = 1LL;\n  do\n  {\n    v12 = v4 << 63;\n    v4 >>= 1;\n    v9 = v12 | (v9 >> 1);\n    if ( __PAIR128__(v4, v9) <= __PAIR128__(v11, v6) )\n    {\n      v11 = (__PAIR128__(v11, v6) - __PAIR128__(v4, v9)) >> 64;\n      v6 -= v9;\n    }\n    --v5;\n  }\n  while ( v5 );\n  v13 = (a1 & -(__int64)(a1 - v6 > v6)) + 2 * v6 - a1;\n  v31 = sub_401ED0(a1, v10, v13, v1, v28, v6);\n  if ( v31 )\n  {\n    v14 = byte_40EFA0;\n    sub_403210(0LL, v26, (__int64)v32);\n    v29 = v1;\n    v30 = v34;\n    v27 = &v33[(unsigned int)v34 - 1];\n    v15 = 2LL;\n    while ( v30 )\n    {\n      v16 = v33;\n      while ( 1 )\n      {\n        v17 = sub_401E60(v13, v26 / *v16, a1, v10, v6);\n        if ( v27 == v18 )\n          break;\n        v16 = v18 + 1;\n        if ( v17 == v6 )\n          goto LABEL_15;\n      }\n      if ( v17 != v6 )\n        return v31;\nLABEL_15:\n      v15 += (unsigned __int8)*v14;\n      v19 = v15 * (unsigned __int128)v6;\n      v13 = v15 * v6;\n      if ( is_mul_ok(v15, v6) )\n      {\n        v13 = (unsigned __int64)v19 % a1;\n      }\n      else\n      {\n        if ( a1 <= *((_QWORD *)&v19 + 1) )\n          __assert_fail(\"(s1) < (n)\", \"src/factor.c\", 0x4F4u, \"prime_p\");\n        v22 = a1;\n        v23 = 64;\n        v24 = 0LL;\n        do\n        {\n          v25 = v22 << 63;\n          v22 >>= 1;\n          v24 = v25 | (v24 >> 1);\n          if ( v22 < *((_QWORD *)&v19 + 1) || v22 == *((_QWORD *)&v19 + 1) && v24 <= v13 )\n          {\n            *((_QWORD *)&v19 + 1) = (__PAIR128__(*((unsigned __int64 *)&v19 + 1), v13) - __PAIR128__(v22, v24)) >> 64;\n            v13 -= v24;\n          }\n          --v23;\n        }\n        while ( v23 );\n      }\n      if ( !(unsigned __int8)sub_401ED0(a1, v10, v13, v29, v28, v6) )\n        return 0;\n      if ( &unk_40F23C == (_UNKNOWN *)++v14 )\n      {\n        v20 = dcgettext(0LL, \"Lucas prime test failure.  This should not happen\", 5);\n        error(0, 0, v20);\n        abort();\n      }\n    }\n  }\n  else\n  {\n    return 0;\n  }\n  return v31;\n}\n"
        },
        {
            "funcName": "sub_403AE0",
            "funcStartAddr": "0x403ae0",
            "funcEndAddr": "0x404045",
            "decompiledFuncCode": "_BOOL8 __fastcall sub_403AE0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int128 v4; // kr00_16\n  unsigned __int64 v5; // rcx\n  __int64 v6; // rax\n  __int64 v7; // rax\n  __int64 v8; // r13\n  __int64 v9; // rcx\n  unsigned __int64 v10; // rdx\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rsi\n  bool v13; // cf\n  unsigned __int64 v14; // rdx\n  unsigned __int64 v15; // rax\n  char *v16; // r12\n  unsigned __int64 v17; // rbp\n  __int64 i; // r12\n  __int64 v19; // rax\n  __int64 v20; // rax\n  __int64 v21; // rcx\n  unsigned __int64 v22; // rdx\n  unsigned __int64 v23; // rax\n  unsigned __int64 v24; // rdx\n  unsigned __int64 v25; // rcx\n  unsigned __int64 v26; // rsi\n  char *v27; // rax\n  __int64 v29; // rax\n  __int64 v30; // rax\n  bool v31; // al\n  unsigned __int64 v32; // rax\n  unsigned __int128 v33; // [rsp+18h] [rbp-1D0h]\n  char *v34; // [rsp+30h] [rbp-1B8h]\n  unsigned int v35; // [rsp+40h] [rbp-1A8h]\n  bool v36; // [rsp+47h] [rbp-1A1h]\n  unsigned __int64 v37; // [rsp+50h] [rbp-198h] BYREF\n  __int64 v38; // [rsp+58h] [rbp-190h]\n  unsigned __int128 v39; // [rsp+60h] [rbp-188h] BYREF\n  unsigned __int64 v40; // [rsp+70h] [rbp-178h] BYREF\n  unsigned __int64 v41; // [rsp+78h] [rbp-170h]\n  unsigned __int64 v42[2]; // [rsp+80h] [rbp-168h] BYREF\n  unsigned __int128 v43; // [rsp+90h] [rbp-158h] BYREF\n  __int64 v44; // [rsp+A0h] [rbp-148h]\n  __int64 v45; // [rsp+A8h] [rbp-140h] BYREF\n  __int64 v46; // [rsp+B0h] [rbp-138h] BYREF\n  __int64 v47[30]; // [rsp+B8h] [rbp-130h]\n  unsigned __int8 v48; // [rsp+1AAh] [rbp-3Eh]\n\n  v4 = __PAIR128__(a1, a2) - 1;\n  v3 = v4 >> 64;\n  *(_QWORD *)&v33 = v4;\n  *((_QWORD *)&v33 + 1) = v3;\n  if ( a2 == 1 )\n  {\n    _BitScanForward64(&v5, v3);\n    v38 = 0LL;\n    v37 = v3 >> v5;\n    v35 = v5 + 64;\n  }\n  else\n  {\n    _BitScanForward64(&v32, v33);\n    v35 = v32;\n    v37 = ((unsigned __int64)v33 >> v32) | (*((_QWORD *)&v33 + 1) << (64 - (unsigned __int8)v32));\n    v38 = *((_QWORD *)&v33 + 1) >> v32;\n  }\n  v6 = (unsigned __int8)byte_40C220[(unsigned __int8)a2 >> 1];\n  v7 = 2 * (2 * v6 - a2 * v6 * v6) - a2 * (2 * v6 - a2 * v6 * v6) * (2 * v6 - a2 * v6 * v6);\n  v8 = 2 * v7 - a2 * v7 * v7;\n  v9 = a1 < 2 ? 127LL : 63LL;\n  v10 = a1 < 2;\n  v11 = a1 >= 2;\n  do\n  {\n    v12 = v10;\n    v10 *= 2LL;\n    v11 = (v12 >> 63) | (2 * v11);\n    if ( a1 < v11 || a1 == v11 && a2 <= v10 )\n    {\n      v11 = (__PAIR128__(v11, v10) - __PAIR128__(a1, a2)) >> 64;\n      v10 -= a2;\n    }\n    --v9;\n  }\n  while ( v9 != -1 );\n  v41 = v11;\n  v40 = v10;\n  v13 = __CFADD__(v10, v10);\n  v14 = 2 * v10;\n  v15 = v11 + v13 + v11;\n  *((_QWORD *)&v39 + 1) = v15;\n  *(_QWORD *)&v39 = v14;\n  if ( a1 < v15 || a1 == v15 && a2 <= v14 )\n    v39 = __PAIR128__(v15, v14) - __PAIR128__(a1, a2);\n  v42[0] = a2;\n  v42[1] = a1;\n  v36 = sub_402240(v42, v8, (unsigned __int64 *)&v39, &v37, v35, (__int64 *)&v40);\n  if ( !v36 )\n    return v36;\n  v16 = byte_40EFA0;\n  sub_403210(*((unsigned __int64 *)&v33 + 1), v33, (__int64)&v46);\n  v17 = 2LL;\n  while ( v47[0] )\n  {\n    v29 = (unsigned __int8)byte_40C220[(unsigned __int8)v46 >> 1];\n    v30 = 2 * (2 * v29 - v46 * v29 * v29) - v46 * (2 * v29 - v46 * v29 * v29) * (2 * v29 - v46 * v29 * v29);\n    v43 = (unsigned __int64)((2 * v30 - v46 * v30 * v30) * v33);\n    v44 = sub_4020D0(&v45, (unsigned __int64 *)&v39, (unsigned __int64 *)&v43, v42, v8, (__int64 *)&v40);\n    if ( v44 != v40 )\n      break;\n    v31 = v45 != v41;\n    if ( !v48 )\n      goto LABEL_49;\n    if ( v45 != v41 )\n      goto LABEL_15;\nLABEL_26:\n    v17 += (unsigned __int8)*v16;\n    v23 = 0LL;\n    v24 = 0LL;\n    if ( a1 <= v17 )\n      v24 = v17;\n    v25 = (-(__int64)(v17 < a1) & 0xFFFFFFFFFFFFFFC0LL) + 127;\n    if ( a1 > v17 )\n      v23 = v17;\n    do\n    {\n      v26 = v24;\n      v24 *= 2LL;\n      v23 = (v26 >> 63) | (2 * v23);\n      if ( a1 < v23 || a1 == v23 && a2 <= v24 )\n      {\n        v23 = (__PAIR128__(v23, v24) - __PAIR128__(a1, a2)) >> 64;\n        v24 -= a2;\n      }\n      --v25;\n    }\n    while ( v25 != -1LL );\n    *(_QWORD *)&v39 = v24;\n    *((_QWORD *)&v39 + 1) = v23;\n    if ( !sub_402240(v42, v8, (unsigned __int64 *)&v39, &v37, v35, (__int64 *)&v40) )\n      return 0;\n    if ( &unk_40F23C == (_UNKNOWN *)++v16 )\n    {\n      v27 = dcgettext(0LL, \"Lucas prime test failure.  This should not happen\", 5);\n      error(0, 0, v27);\n      abort();\n    }\n  }\n  if ( !v48 )\n    return v36;\nLABEL_15:\n  v34 = v16;\n  for ( i = 1LL; ; ++i )\n  {\n    v22 = v47[i];\n    if ( v22 == 2 )\n    {\n      v43 = v33 >> 1;\n    }\n    else\n    {\n      v19 = (unsigned __int8)byte_40C220[(unsigned __int8)v22 >> 1];\n      v20 = 2 * (2 * v19 - v22 * v19 * v19) - v22 * (2 * v19 - v22 * v19 * v19) * (2 * v19 - v22 * v19 * v19);\n      v21 = 2 * v20 - v22 * v20 * v20;\n      *(_QWORD *)&v43 = v21 * v33;\n      if ( *((_QWORD *)&v33 + 1) < v22 )\n        *((_QWORD *)&v43 + 1) = 0LL;\n      else\n        *((_QWORD *)&v43 + 1) = (*((_QWORD *)&v33 + 1) - ((v22 * (unsigned __int128)(unsigned __int64)(v21 * v33)) >> 64))\n                              * v21;\n    }\n    v44 = sub_4020D0(&v45, (unsigned __int64 *)&v39, (unsigned __int64 *)&v43, v42, v8, (__int64 *)&v40);\n    if ( v44 != v40 )\n    {\n      if ( v48 <= (unsigned int)i )\n        return v36;\n      continue;\n    }\n    if ( v48 <= (unsigned int)i )\n      break;\n    if ( v45 == v41 )\n    {\n      v16 = v34;\n      goto LABEL_26;\n    }\n  }\n  v16 = v34;\n  v31 = v45 != v41;\nLABEL_49:\n  if ( !v31 )\n    goto LABEL_26;\n  return v36;\n}\n"
        },
        {
            "funcName": "sub_404050",
            "funcStartAddr": "0x404050",
            "funcEndAddr": "0x404093",
            "decompiledFuncCode": "__int64 __fastcall sub_404050(unsigned __int64 a1, unsigned __int64 a2)\n{\n  if ( a1 )\n    return sub_403AE0(a1, a2);\n  if ( a2 <= 1 )\n    return 0LL;\n  if ( a2 <= 0x17DED78 )\n    return 1LL;\n  return sub_403840(a2);\n}\n"
        },
        {
            "funcName": "sub_4040A0",
            "funcStartAddr": "0x4040a0",
            "funcEndAddr": "0x40416e",
            "decompiledFuncCode": "void *__fastcall sub_4040A0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  __int64 *v2; // r12\n  __int64 *v3; // rbp\n  unsigned int i; // ebx\n  __int64 v6; // [rsp+0h] [rbp-128h] BYREF\n  unsigned __int64 v7; // [rsp+8h] [rbp-120h]\n  __int64 v8; // [rsp+10h] [rbp-118h] BYREF\n  unsigned __int8 v9; // [rsp+FAh] [rbp-2Eh]\n\n  sub_402640(a1, a2);\n  sub_4026F0(58);\n  sub_403210(a1, a2, (__int64)&v6);\n  if ( v9 )\n  {\n    v2 = &v8;\n    v3 = &v6;\n    do\n    {\n      for ( i = 0; *((unsigned __int8 *)v3 + 224) > i; ++i )\n      {\n        sub_4026F0(32);\n        sub_402340(*v2, 0LL);\n      }\n      v3 = (__int64 *)((char *)v3 + 1);\n      ++v2;\n    }\n    while ( v9 > (unsigned int)v3 - (unsigned int)&v6 );\n  }\n  if ( v7 )\n  {\n    sub_4026F0(32);\n    sub_402640(v7, v6);\n  }\n  return sub_4026F0(10);\n}\n"
        },
        {
            "funcName": "sub_404170",
            "funcStartAddr": "0x404170",
            "funcEndAddr": "0x4042de",
            "decompiledFuncCode": "__int64 __fastcall sub_404170(char *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  char *v6; // rax\n  char i; // dl\n  char *v8; // r8\n  char *v9; // rdx\n  char *v10; // rcx\n  __int64 v11; // rsi\n  __int64 v12; // rdx\n  __int64 v13; // rax\n  const char *v14; // rsi\n  __int64 v15; // rbx\n  char *v16; // rax\n  int v18; // eax\n  __int64 v19; // rdx\n  unsigned __int64 v20; // rbp\n  signed __int64 v21; // rbx\n  __int64 v22; // rsi\n  __int64 v23; // rax\n  unsigned __int64 v24; // rcx\n  __int64 v25; // rax\n  __int64 v26; // rbx\n  bool v27; // cf\n  __int64 v28; // rax\n\n  v6 = a1;\n  for ( i = *a1; *v6 == 32; i = *v6 )\n    ++v6;\n  v8 = v6 + 1;\n  if ( i == 43 )\n  {\n    v9 = v6 + 2;\n    ++v6;\n    v8 = v9;\n  }\n  v10 = v6;\n  v11 = 4LL;\n  while ( 1 )\n  {\n    v12 = (unsigned int)*v10++;\n    if ( !*(v10 - 1) )\n      break;\n    v12 = (unsigned int)(v12 - 48);\n    v11 = 0LL;\n    if ( (unsigned int)v12 > 9 )\n      goto LABEL_8;\n  }\n  if ( (_DWORD)v11 )\n  {\nLABEL_8:\n    v13 = sub_406F50(a1, v11, v12, v10, v8, a6);\n    v14 = \"%s is not a valid positive integer\";\n    v15 = v13;\nLABEL_9:\n    v16 = dcgettext(0LL, v14, 5);\n    error(0, 0, v16, v15);\n    return 0LL;\n  }\n  v18 = *v6;\n  if ( v18 )\n  {\n    LODWORD(v19) = v18 - 48;\n    v20 = 0LL;\n    v21 = 0LL;\n    while ( 1 )\n    {\n      v22 = 10 * v20;\n      v23 = (unsigned int)v19;\n      v24 = (v20 >> 61) + (10 * v20 < 2 * v20) + (unsigned int)(v20 >> 63);\n      v19 = __CFADD__(10 * v20, (unsigned int)v19);\n      v20 = 10 * v20 + v23;\n      v25 = 10 * v21;\n      v26 = (unsigned int)(v19 + v24);\n      v27 = __CFADD__(v25, v26);\n      v21 = v25 + v26;\n      if ( v27 )\n        goto LABEL_16;\n      if ( !*v8++ )\n        break;\n      v19 = (unsigned int)(*(v8 - 1) - 48);\n      if ( (unsigned __int64)v21 > 0x1999999999999999LL )\n        goto LABEL_16;\n    }\n    if ( v21 < 0 )\n    {\nLABEL_16:\n      v28 = sub_406F50(a1, v22, v19, v24, v8, 0x1999999999999999LL);\n      v14 = \"%s is too large\";\n      v15 = v28;\n      goto LABEL_9;\n    }\n  }\n  else\n  {\n    v20 = 0LL;\n    v21 = 0LL;\n  }\n  if ( byte_613310 )\n    fwrite(\"[using single-precision arithmetic] \", 1uLL, 0x24uLL, stderr);\n  sub_4040A0(v21, v20);\n  return 1LL;\n}\n"
        },
        {
            "funcName": "sub_4042E0",
            "funcStartAddr": "0x4042e0",
            "funcEndAddr": "0x4045cd",
            "decompiledFuncCode": "void __fastcall __noreturn sub_4042E0(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  __int64 *v10; // rax\n  char *v11; // rbp\n  char *v12; // rax\n  char *v13; // rax\n  const char *v14; // r12\n  char *v15; // rax\n  char *v16; // rax\n  char *v17; // rax\n  char *v18; // rax\n  char *v19; // rax\n  char *v20; // rax\n  __int64 v21; // rcx\n  __int64 v22[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_613328;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [NUMBER]...\\n  or:  %s OPTION\\n\", 5);\n  __printf_chk(1LL, v3, v1, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"Print the prime factors of each specified integer NUMBER.  If none\\n\"\n         \"are specified on the command line, read them from standard input.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v9, v8);\n  v22[0] = (__int64)\"[\";\n  v10 = v22;\n  v22[1] = (__int64)\"test invocation\";\n  v22[2] = (__int64)\"coreutils\";\n  v22[3] = (__int64)\"Multi-call invocation\";\n  v22[4] = (__int64)\"sha224sum\";\n  v22[5] = (__int64)\"sha2 utilities\";\n  v22[6] = (__int64)\"sha256sum\";\n  v22[7] = (__int64)\"sha2 utilities\";\n  v22[8] = (__int64)\"sha384sum\";\n  v22[9] = (__int64)\"sha2 utilities\";\n  v22[10] = (__int64)\"sha512sum\";\n  v22[11] = (__int64)\"sha2 utilities\";\n  v22[12] = 0LL;\n  v22[13] = 0LL;\n  do\n    v10 += 2;\n  while ( *v10 && strcmp(\"factor\", (const char *)*v10) );\n  v11 = (char *)v10[1];\n  if ( v11 )\n  {\n    v12 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v12, &unk_40BDAC, \"https://www.gnu.org/software/coreutils/\");\n    v13 = setlocale(5, 0LL);\n    if ( !v13 || !strncmp(v13, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v17 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v17, &unk_40BDAC, \"https://www.gnu.org/software/coreutils/\");\n    v18 = setlocale(5, 0LL);\n    if ( !v18 || !strncmp(v18, \"en_\", 3uLL) )\n    {\n      v11 = \"factor\";\n      v19 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v14 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v19, \"https://www.gnu.org/software/coreutils/\", \"factor\");\nLABEL_12:\n      v16 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v16, v11, v14);\nLABEL_3:\n      exit(status);\n    }\n    v11 = \"factor\";\n  }\n  v20 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v20, \"factor\", v21);\nLABEL_10:\n  v14 = \"Multi-call invocation\" + 10;\n  v15 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v15, \"https://www.gnu.org/software/coreutils/\", \"factor\");\n  if ( v11 != \"factor\" )\n    v14 = \"\";\n  goto LABEL_12;\n}\n"
        },
        {
            "funcName": "sub_4045F0",
            "funcStartAddr": "0x4045f0",
            "funcEndAddr": "0x40468e",
            "decompiledFuncCode": "__int64 sub_4045F0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_4091B0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_613318 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_613320 )\n      {\n        v5 = (const char *)sub_406DA0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_4091B0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404690",
            "funcStartAddr": "0x404690",
            "funcEndAddr": "0x404706",
            "decompiledFuncCode": "__int64 __fastcall sub_404690(int fd, char *buf, size_t n)\n{\n  size_t v4; // rbx\n  __int64 v5; // r12\n  __int64 v6; // rax\n\n  if ( !n )\n    return 0LL;\n  v4 = n;\n  v5 = 0LL;\n  do\n  {\n    v6 = sub_4072E0(fd, buf, v4);\n    if ( v6 == -1 )\n      break;\n    if ( !v6 )\n    {\n      *__errno_location() = 28;\n      return v5;\n    }\n    v5 += v6;\n    buf += v6;\n    v4 -= v6;\n  }\n  while ( v4 );\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_404710",
            "funcStartAddr": "0x404710",
            "funcEndAddr": "0x404758",
            "decompiledFuncCode": "__int64 __fastcall sub_404710(unsigned __int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  while ( 1 )\n  {\n    *(_BYTE *)--v2 = a1 % 0xA + 48;\n    if ( a1 <= 9 )\n      break;\n    a1 /= 0xAuLL;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_404760",
            "funcStartAddr": "0x404760",
            "funcEndAddr": "0x4047f9",
            "decompiledFuncCode": "char *__fastcall sub_404760(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_613328 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404800",
            "funcStartAddr": "0x404800",
            "funcEndAddr": "0x40481d",
            "decompiledFuncCode": "void __noreturn sub_404800()\n{\n  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n}\n"
        },
        {
            "funcName": "sub_404820",
            "funcStartAddr": "0x401a40",
            "funcEndAddr": "0x401a45",
            "decompiledFuncCode": "__int64 __fastcall sub_404820(char *a1, __int64 a2)\n{\n  char *v3; // rbp\n  char *v4; // r13\n  __int64 v5; // rbx\n  mbstate_t *p_ps; // r13\n  wint_t v8; // r15d\n  char *v9; // rbx\n  size_t mb_cur_max; // rax\n  char *v11; // rbx\n  __int64 v12; // rax\n  size_t v13; // rax\n  wchar_t v14; // eax\n  wchar_t v15; // eax\n  size_t v16; // rax\n  char *v17; // r15\n  __int64 v18; // rax\n  wint_t v19; // ebx\n  wchar_t v20; // eax\n  size_t v21; // rax\n  char *v22; // r15\n  __int64 v23; // rax\n  size_t v24; // rax\n  size_t v25; // rax\n  size_t v26; // rax\n  char *v27; // rbx\n  __int64 v28; // rax\n  size_t v29; // rax\n  char *v30; // r13\n  __int64 v31; // rax\n  size_t v32; // rax\n  char *s; // [rsp+8h] [rbp-C0h]\n  char v34; // [rsp+10h] [rbp-B8h]\n  char v35; // [rsp+10h] [rbp-B8h]\n  mbstate_t ps; // [rsp+14h] [rbp-B4h] BYREF\n  char v37; // [rsp+1Ch] [rbp-ACh]\n  char *v38; // [rsp+20h] [rbp-A8h]\n  size_t v39; // [rsp+28h] [rbp-A0h]\n  char v40; // [rsp+30h] [rbp-98h]\n  wchar_t pwc[7]; // [rsp+34h] [rbp-94h] BYREF\n  char v42; // [rsp+50h] [rbp-78h]\n  mbstate_t v43; // [rsp+54h] [rbp-74h] BYREF\n  char v44; // [rsp+5Ch] [rbp-6Ch]\n  char *v45; // [rsp+60h] [rbp-68h]\n  size_t v46; // [rsp+68h] [rbp-60h]\n  char v47; // [rsp+70h] [rbp-58h]\n  wchar_t v48[21]; // [rsp+74h] [rbp-54h] BYREF\n\n  s = (char *)sub_4073A0(a2, 2LL);\n  while ( 2 )\n  {\n    if ( !*a1 )\n    {\nLABEL_11:\n      LODWORD(p_ps) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      v3 = (char *)sub_40A420(a1, s);\n      if ( !v3 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v4 = &v3[strlen(s)];\n      if ( a1 >= v3 || ((*__ctype_b_loc())[(unsigned __int8)*(v3 - 1)] & 8) == 0 )\n      {\n        v5 = (unsigned __int8)*v4;\n        if ( !(_BYTE)v5 || ((*__ctype_b_loc())[v5] & 8) == 0 )\n        {\n          LODWORD(p_ps) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *v3 )\n      {\n        a1 = v3 + 1;\n        if ( v3[1] )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v38 = a1;\n    p_ps = &ps;\n    v34 = 0;\n    ps = 0LL;\n    v37 = 0;\n    if ( a1 >= v3 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v34 )\n      {\n        if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n        {\n          v39 = 1LL;\n          v8 = *v38;\n          v40 = 1;\n          pwc[0] = v8;\n          v37 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v34 = 1;\n      }\n      mb_cur_max = __ctype_get_mb_cur_max();\n      v11 = v38;\n      sub_407340(v38, mb_cur_max);\n      v12 = sub_408FC0(pwc, v11);\n      v39 = v12;\n      if ( v12 == -1 )\n      {\n        v8 = pwc[0];\n        v9 = v38;\n        v40 = 0;\n        v39 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v12 == -2 )\n      {\n        v9 = v38;\n        v13 = strlen(v38);\n        v40 = 0;\n        v8 = pwc[0];\n        v39 = v13;\n        goto LABEL_19;\n      }\n      if ( v12 )\n      {\n        v8 = pwc[0];\n      }\n      else\n      {\n        v39 = 1LL;\n        if ( *v38 )\n          goto LABEL_109;\n        v8 = pwc[0];\n        if ( pwc[0] )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v40 = 1;\n      if ( mbsinit(&ps) )\n        v34 = 0;\n      v37 = 1;\nLABEL_17:\n      if ( !v8 )\nLABEL_111:\n        abort();\n      v9 = v38;\nLABEL_19:\n      v37 = 0;\n      v38 = &v9[v39];\n    }\n    while ( &v9[v39] < v3 );\n    if ( v40 )\n    {\n      LOBYTE(p_ps) = iswalnum(v8) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(p_ps) = 1;\nLABEL_36:\n    v38 = v3;\n    v35 = 0;\n    ps = 0LL;\n    v37 = 0;\n    v45 = s;\n    v42 = 0;\n    v43 = 0LL;\n    v44 = 0;\n    while ( 2 )\n    {\n      if ( !v42 )\n      {\n        if ( (((unsigned int)dword_410680[((unsigned __int8)*v45 >> 5) & 7] >> *v45) & 1) == 0 )\n        {\n          if ( !mbsinit(&v43) )\n            goto LABEL_108;\n          v42 = 1;\n          goto LABEL_46;\n        }\n        v46 = 1LL;\n        v14 = *v45;\n        v47 = 1;\n        v48[0] = v14;\n        v44 = 1;\n        if ( !v14 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v16 = __ctype_get_mb_cur_max();\n      v17 = v45;\n      sub_407340(v45, v16);\n      v18 = sub_408FC0(v48, v17);\n      v46 = v18;\n      switch ( v18 )\n      {\n        case -1LL:\n          v46 = 1LL;\n          v47 = 0;\n          v44 = 1;\n          goto LABEL_39;\n        case -2LL:\n          v24 = strlen(v45);\n          v47 = 0;\n          v46 = v24;\n          v44 = 1;\n          goto LABEL_39;\n        case 0LL:\n          v46 = 1LL;\n          if ( *v45 )\n            goto LABEL_109;\n          if ( v48[0] )\n            goto LABEL_110;\n          break;\n      }\n      v47 = 1;\n      if ( mbsinit(&v43) )\n        v42 = 0;\n      v44 = 1;\n      if ( v48[0] )\n      {\nLABEL_39:\n        if ( v37 )\n        {\n          if ( v40 )\n          {\nLABEL_43:\n            if ( !pwc[0] )\n              goto LABEL_111;\n          }\n        }\n        else\n        {\n          if ( !v35 )\n          {\n            if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n            {\n              v39 = 1LL;\n              v15 = *v38;\n              v40 = 1;\n              pwc[0] = v15;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v35 = 1;\n          }\n          v21 = __ctype_get_mb_cur_max();\n          v22 = v38;\n          sub_407340(v38, v21);\n          v23 = sub_408FC0(pwc, v22);\n          v39 = v23;\n          if ( v23 == -1 )\n          {\n            v39 = 1LL;\n            v40 = 0;\n          }\n          else\n          {\n            if ( v23 != -2 )\n            {\n              if ( !v23 )\n              {\n                v39 = 1LL;\n                if ( *v38 )\n                  goto LABEL_109;\n                if ( pwc[0] )\n                  goto LABEL_110;\n              }\n              v40 = 1;\n              if ( mbsinit(&ps) )\n                v35 = 0;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            v25 = strlen(v38);\n            v40 = 0;\n            v39 = v25;\n          }\n        }\n        v38 += v39;\n        v45 += v46;\n        v37 = 0;\n        v44 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v37 )\n    {\n      v19 = pwc[0];\n      if ( v40 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v35 )\n    {\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n      {\n        v39 = 1LL;\n        v19 = *v38;\n        v40 = 1;\n        pwc[0] = v19;\n        v37 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v26 = __ctype_get_mb_cur_max();\n    v27 = v38;\n    sub_407340(v38, v26);\n    v28 = sub_408FC0(pwc, v27);\n    v39 = v28;\n    if ( v28 == -1 )\n    {\n      v39 = 1LL;\n      v19 = pwc[0];\n      v40 = 0;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 == -2 )\n    {\n      v32 = strlen(v38);\n      v40 = 0;\n      v19 = pwc[0];\n      v39 = v32;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 )\n    {\n      v19 = pwc[0];\n      goto LABEL_90;\n    }\n    v39 = 1LL;\n    if ( *v38 )\n      goto LABEL_109;\n    v19 = pwc[0];\n    if ( pwc[0] )\nLABEL_104:\n      sub_404800();\nLABEL_90:\n    v40 = 1;\n    mbsinit(&ps);\n    v37 = 1;\nLABEL_58:\n    if ( v19 )\n    {\nLABEL_59:\n      if ( !v40 || !iswalnum(v19) )\n        break;\nLABEL_62:\n      v38 = v3;\n      ps = 0LL;\n      v37 = 0;\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*v3 >> 5) & 7] >> *v3) & 1) != 0 )\n      {\n        v39 = 1LL;\n        v20 = *v3;\n        v40 = 1;\n        pwc[0] = v20;\n        v37 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v29 = __ctype_get_mb_cur_max();\n        v30 = v38;\n        sub_407340(v38, v29);\n        v31 = sub_408FC0(pwc, v30);\n        v39 = v31;\n        switch ( v31 )\n        {\n          case -1LL:\n            v39 = 1LL;\n            goto LABEL_65;\n          case -2LL:\n            v39 = strlen(v38);\n            goto LABEL_65;\n          case 0LL:\n            v39 = 1LL;\n            if ( !*v38 )\n            {\n              if ( pwc[0] )\n                goto LABEL_104;\n              break;\n            }\nLABEL_109:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n        }\n        v40 = 1;\n        mbsinit(&ps);\n        v37 = 1;\nLABEL_64:\n        if ( pwc[0] )\n        {\nLABEL_65:\n          a1 = &v3[v39];\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)p_ps )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)p_ps;\n}\n\n__int64 __fastcall sub_404820(char *a1, __int64 a2)\n{\n  char *v3; // rbp\n  char *v4; // r13\n  __int64 v5; // rbx\n  mbstate_t *p_ps; // r13\n  wint_t v8; // r15d\n  char *v9; // rbx\n  size_t mb_cur_max; // rax\n  char *v11; // rbx\n  __int64 v12; // rax\n  size_t v13; // rax\n  wchar_t v14; // eax\n  wchar_t v15; // eax\n  size_t v16; // rax\n  char *v17; // r15\n  __int64 v18; // rax\n  wint_t v19; // ebx\n  wchar_t v20; // eax\n  size_t v21; // rax\n  char *v22; // r15\n  __int64 v23; // rax\n  size_t v24; // rax\n  size_t v25; // rax\n  size_t v26; // rax\n  char *v27; // rbx\n  __int64 v28; // rax\n  size_t v29; // rax\n  char *v30; // r13\n  __int64 v31; // rax\n  size_t v32; // rax\n  char *s; // [rsp+8h] [rbp-C0h]\n  char v34; // [rsp+10h] [rbp-B8h]\n  char v35; // [rsp+10h] [rbp-B8h]\n  mbstate_t ps; // [rsp+14h] [rbp-B4h] BYREF\n  char v37; // [rsp+1Ch] [rbp-ACh]\n  char *v38; // [rsp+20h] [rbp-A8h]\n  size_t v39; // [rsp+28h] [rbp-A0h]\n  char v40; // [rsp+30h] [rbp-98h]\n  wchar_t pwc[7]; // [rsp+34h] [rbp-94h] BYREF\n  char v42; // [rsp+50h] [rbp-78h]\n  mbstate_t v43; // [rsp+54h] [rbp-74h] BYREF\n  char v44; // [rsp+5Ch] [rbp-6Ch]\n  char *v45; // [rsp+60h] [rbp-68h]\n  size_t v46; // [rsp+68h] [rbp-60h]\n  char v47; // [rsp+70h] [rbp-58h]\n  wchar_t v48[21]; // [rsp+74h] [rbp-54h] BYREF\n\n  s = (char *)sub_4073A0(a2, 2LL);\n  while ( 2 )\n  {\n    if ( !*a1 )\n    {\nLABEL_11:\n      LODWORD(p_ps) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      v3 = (char *)sub_40A420(a1, s);\n      if ( !v3 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v4 = &v3[strlen(s)];\n      if ( a1 >= v3 || ((*__ctype_b_loc())[(unsigned __int8)*(v3 - 1)] & 8) == 0 )\n      {\n        v5 = (unsigned __int8)*v4;\n        if ( !(_BYTE)v5 || ((*__ctype_b_loc())[v5] & 8) == 0 )\n        {\n          LODWORD(p_ps) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *v3 )\n      {\n        a1 = v3 + 1;\n        if ( v3[1] )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v38 = a1;\n    p_ps = &ps;\n    v34 = 0;\n    ps = 0LL;\n    v37 = 0;\n    if ( a1 >= v3 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v34 )\n      {\n        if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n        {\n          v39 = 1LL;\n          v8 = *v38;\n          v40 = 1;\n          pwc[0] = v8;\n          v37 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v34 = 1;\n      }\n      mb_cur_max = __ctype_get_mb_cur_max();\n      v11 = v38;\n      sub_407340(v38, mb_cur_max);\n      v12 = sub_408FC0(pwc, v11);\n      v39 = v12;\n      if ( v12 == -1 )\n      {\n        v8 = pwc[0];\n        v9 = v38;\n        v40 = 0;\n        v39 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v12 == -2 )\n      {\n        v9 = v38;\n        v13 = strlen(v38);\n        v40 = 0;\n        v8 = pwc[0];\n        v39 = v13;\n        goto LABEL_19;\n      }\n      if ( v12 )\n      {\n        v8 = pwc[0];\n      }\n      else\n      {\n        v39 = 1LL;\n        if ( *v38 )\n          goto LABEL_109;\n        v8 = pwc[0];\n        if ( pwc[0] )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v40 = 1;\n      if ( mbsinit(&ps) )\n        v34 = 0;\n      v37 = 1;\nLABEL_17:\n      if ( !v8 )\nLABEL_111:\n        abort();\n      v9 = v38;\nLABEL_19:\n      v37 = 0;\n      v38 = &v9[v39];\n    }\n    while ( &v9[v39] < v3 );\n    if ( v40 )\n    {\n      LOBYTE(p_ps) = iswalnum(v8) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(p_ps) = 1;\nLABEL_36:\n    v38 = v3;\n    v35 = 0;\n    ps = 0LL;\n    v37 = 0;\n    v45 = s;\n    v42 = 0;\n    v43 = 0LL;\n    v44 = 0;\n    while ( 2 )\n    {\n      if ( !v42 )\n      {\n        if ( (((unsigned int)dword_410680[((unsigned __int8)*v45 >> 5) & 7] >> *v45) & 1) == 0 )\n        {\n          if ( !mbsinit(&v43) )\n            goto LABEL_108;\n          v42 = 1;\n          goto LABEL_46;\n        }\n        v46 = 1LL;\n        v14 = *v45;\n        v47 = 1;\n        v48[0] = v14;\n        v44 = 1;\n        if ( !v14 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v16 = __ctype_get_mb_cur_max();\n      v17 = v45;\n      sub_407340(v45, v16);\n      v18 = sub_408FC0(v48, v17);\n      v46 = v18;\n      switch ( v18 )\n      {\n        case -1LL:\n          v46 = 1LL;\n          v47 = 0;\n          v44 = 1;\n          goto LABEL_39;\n        case -2LL:\n          v24 = strlen(v45);\n          v47 = 0;\n          v46 = v24;\n          v44 = 1;\n          goto LABEL_39;\n        case 0LL:\n          v46 = 1LL;\n          if ( *v45 )\n            goto LABEL_109;\n          if ( v48[0] )\n            goto LABEL_110;\n          break;\n      }\n      v47 = 1;\n      if ( mbsinit(&v43) )\n        v42 = 0;\n      v44 = 1;\n      if ( v48[0] )\n      {\nLABEL_39:\n        if ( v37 )\n        {\n          if ( v40 )\n          {\nLABEL_43:\n            if ( !pwc[0] )\n              goto LABEL_111;\n          }\n        }\n        else\n        {\n          if ( !v35 )\n          {\n            if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n            {\n              v39 = 1LL;\n              v15 = *v38;\n              v40 = 1;\n              pwc[0] = v15;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v35 = 1;\n          }\n          v21 = __ctype_get_mb_cur_max();\n          v22 = v38;\n          sub_407340(v38, v21);\n          v23 = sub_408FC0(pwc, v22);\n          v39 = v23;\n          if ( v23 == -1 )\n          {\n            v39 = 1LL;\n            v40 = 0;\n          }\n          else\n          {\n            if ( v23 != -2 )\n            {\n              if ( !v23 )\n              {\n                v39 = 1LL;\n                if ( *v38 )\n                  goto LABEL_109;\n                if ( pwc[0] )\n                  goto LABEL_110;\n              }\n              v40 = 1;\n              if ( mbsinit(&ps) )\n                v35 = 0;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            v25 = strlen(v38);\n            v40 = 0;\n            v39 = v25;\n          }\n        }\n        v38 += v39;\n        v45 += v46;\n        v37 = 0;\n        v44 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v37 )\n    {\n      v19 = pwc[0];\n      if ( v40 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v35 )\n    {\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n      {\n        v39 = 1LL;\n        v19 = *v38;\n        v40 = 1;\n        pwc[0] = v19;\n        v37 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v26 = __ctype_get_mb_cur_max();\n    v27 = v38;\n    sub_407340(v38, v26);\n    v28 = sub_408FC0(pwc, v27);\n    v39 = v28;\n    if ( v28 == -1 )\n    {\n      v39 = 1LL;\n      v19 = pwc[0];\n      v40 = 0;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 == -2 )\n    {\n      v32 = strlen(v38);\n      v40 = 0;\n      v19 = pwc[0];\n      v39 = v32;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 )\n    {\n      v19 = pwc[0];\n      goto LABEL_90;\n    }\n    v39 = 1LL;\n    if ( *v38 )\n      goto LABEL_109;\n    v19 = pwc[0];\n    if ( pwc[0] )\nLABEL_104:\n      sub_404800();\nLABEL_90:\n    v40 = 1;\n    mbsinit(&ps);\n    v37 = 1;\nLABEL_58:\n    if ( v19 )\n    {\nLABEL_59:\n      if ( !v40 || !iswalnum(v19) )\n        break;\nLABEL_62:\n      v38 = v3;\n      ps = 0LL;\n      v37 = 0;\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*v3 >> 5) & 7] >> *v3) & 1) != 0 )\n      {\n        v39 = 1LL;\n        v20 = *v3;\n        v40 = 1;\n        pwc[0] = v20;\n        v37 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v29 = __ctype_get_mb_cur_max();\n        v30 = v38;\n        sub_407340(v38, v29);\n        v31 = sub_408FC0(pwc, v30);\n        v39 = v31;\n        switch ( v31 )\n        {\n          case -1LL:\n            v39 = 1LL;\n            goto LABEL_65;\n          case -2LL:\n            v39 = strlen(v38);\n            goto LABEL_65;\n          case 0LL:\n            v39 = 1LL;\n            if ( !*v38 )\n            {\n              if ( pwc[0] )\n                goto LABEL_104;\n              break;\n            }\nLABEL_109:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n        }\n        v40 = 1;\n        mbsinit(&ps);\n        v37 = 1;\nLABEL_64:\n        if ( pwc[0] )\n        {\nLABEL_65:\n          a1 = &v3[v39];\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)p_ps )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)p_ps;\n}\n"
        },
        {
            "funcName": "sub_404820",
            "funcStartAddr": "0x401a40",
            "funcEndAddr": "0x401a45",
            "decompiledFuncCode": "__int64 __fastcall sub_404820(char *a1, __int64 a2)\n{\n  char *v3; // rbp\n  char *v4; // r13\n  __int64 v5; // rbx\n  mbstate_t *p_ps; // r13\n  wint_t v8; // r15d\n  char *v9; // rbx\n  size_t mb_cur_max; // rax\n  char *v11; // rbx\n  __int64 v12; // rax\n  size_t v13; // rax\n  wchar_t v14; // eax\n  wchar_t v15; // eax\n  size_t v16; // rax\n  char *v17; // r15\n  __int64 v18; // rax\n  wint_t v19; // ebx\n  wchar_t v20; // eax\n  size_t v21; // rax\n  char *v22; // r15\n  __int64 v23; // rax\n  size_t v24; // rax\n  size_t v25; // rax\n  size_t v26; // rax\n  char *v27; // rbx\n  __int64 v28; // rax\n  size_t v29; // rax\n  char *v30; // r13\n  __int64 v31; // rax\n  size_t v32; // rax\n  char *s; // [rsp+8h] [rbp-C0h]\n  char v34; // [rsp+10h] [rbp-B8h]\n  char v35; // [rsp+10h] [rbp-B8h]\n  mbstate_t ps; // [rsp+14h] [rbp-B4h] BYREF\n  char v37; // [rsp+1Ch] [rbp-ACh]\n  char *v38; // [rsp+20h] [rbp-A8h]\n  size_t v39; // [rsp+28h] [rbp-A0h]\n  char v40; // [rsp+30h] [rbp-98h]\n  wchar_t pwc[7]; // [rsp+34h] [rbp-94h] BYREF\n  char v42; // [rsp+50h] [rbp-78h]\n  mbstate_t v43; // [rsp+54h] [rbp-74h] BYREF\n  char v44; // [rsp+5Ch] [rbp-6Ch]\n  char *v45; // [rsp+60h] [rbp-68h]\n  size_t v46; // [rsp+68h] [rbp-60h]\n  char v47; // [rsp+70h] [rbp-58h]\n  wchar_t v48[21]; // [rsp+74h] [rbp-54h] BYREF\n\n  s = (char *)sub_4073A0(a2, 2LL);\n  while ( 2 )\n  {\n    if ( !*a1 )\n    {\nLABEL_11:\n      LODWORD(p_ps) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      v3 = (char *)sub_40A420(a1, s);\n      if ( !v3 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v4 = &v3[strlen(s)];\n      if ( a1 >= v3 || ((*__ctype_b_loc())[(unsigned __int8)*(v3 - 1)] & 8) == 0 )\n      {\n        v5 = (unsigned __int8)*v4;\n        if ( !(_BYTE)v5 || ((*__ctype_b_loc())[v5] & 8) == 0 )\n        {\n          LODWORD(p_ps) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *v3 )\n      {\n        a1 = v3 + 1;\n        if ( v3[1] )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v38 = a1;\n    p_ps = &ps;\n    v34 = 0;\n    ps = 0LL;\n    v37 = 0;\n    if ( a1 >= v3 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v34 )\n      {\n        if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n        {\n          v39 = 1LL;\n          v8 = *v38;\n          v40 = 1;\n          pwc[0] = v8;\n          v37 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v34 = 1;\n      }\n      mb_cur_max = __ctype_get_mb_cur_max();\n      v11 = v38;\n      sub_407340(v38, mb_cur_max);\n      v12 = sub_408FC0(pwc, v11);\n      v39 = v12;\n      if ( v12 == -1 )\n      {\n        v8 = pwc[0];\n        v9 = v38;\n        v40 = 0;\n        v39 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v12 == -2 )\n      {\n        v9 = v38;\n        v13 = strlen(v38);\n        v40 = 0;\n        v8 = pwc[0];\n        v39 = v13;\n        goto LABEL_19;\n      }\n      if ( v12 )\n      {\n        v8 = pwc[0];\n      }\n      else\n      {\n        v39 = 1LL;\n        if ( *v38 )\n          goto LABEL_109;\n        v8 = pwc[0];\n        if ( pwc[0] )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v40 = 1;\n      if ( mbsinit(&ps) )\n        v34 = 0;\n      v37 = 1;\nLABEL_17:\n      if ( !v8 )\nLABEL_111:\n        abort();\n      v9 = v38;\nLABEL_19:\n      v37 = 0;\n      v38 = &v9[v39];\n    }\n    while ( &v9[v39] < v3 );\n    if ( v40 )\n    {\n      LOBYTE(p_ps) = iswalnum(v8) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(p_ps) = 1;\nLABEL_36:\n    v38 = v3;\n    v35 = 0;\n    ps = 0LL;\n    v37 = 0;\n    v45 = s;\n    v42 = 0;\n    v43 = 0LL;\n    v44 = 0;\n    while ( 2 )\n    {\n      if ( !v42 )\n      {\n        if ( (((unsigned int)dword_410680[((unsigned __int8)*v45 >> 5) & 7] >> *v45) & 1) == 0 )\n        {\n          if ( !mbsinit(&v43) )\n            goto LABEL_108;\n          v42 = 1;\n          goto LABEL_46;\n        }\n        v46 = 1LL;\n        v14 = *v45;\n        v47 = 1;\n        v48[0] = v14;\n        v44 = 1;\n        if ( !v14 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v16 = __ctype_get_mb_cur_max();\n      v17 = v45;\n      sub_407340(v45, v16);\n      v18 = sub_408FC0(v48, v17);\n      v46 = v18;\n      switch ( v18 )\n      {\n        case -1LL:\n          v46 = 1LL;\n          v47 = 0;\n          v44 = 1;\n          goto LABEL_39;\n        case -2LL:\n          v24 = strlen(v45);\n          v47 = 0;\n          v46 = v24;\n          v44 = 1;\n          goto LABEL_39;\n        case 0LL:\n          v46 = 1LL;\n          if ( *v45 )\n            goto LABEL_109;\n          if ( v48[0] )\n            goto LABEL_110;\n          break;\n      }\n      v47 = 1;\n      if ( mbsinit(&v43) )\n        v42 = 0;\n      v44 = 1;\n      if ( v48[0] )\n      {\nLABEL_39:\n        if ( v37 )\n        {\n          if ( v40 )\n          {\nLABEL_43:\n            if ( !pwc[0] )\n              goto LABEL_111;\n          }\n        }\n        else\n        {\n          if ( !v35 )\n          {\n            if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n            {\n              v39 = 1LL;\n              v15 = *v38;\n              v40 = 1;\n              pwc[0] = v15;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v35 = 1;\n          }\n          v21 = __ctype_get_mb_cur_max();\n          v22 = v38;\n          sub_407340(v38, v21);\n          v23 = sub_408FC0(pwc, v22);\n          v39 = v23;\n          if ( v23 == -1 )\n          {\n            v39 = 1LL;\n            v40 = 0;\n          }\n          else\n          {\n            if ( v23 != -2 )\n            {\n              if ( !v23 )\n              {\n                v39 = 1LL;\n                if ( *v38 )\n                  goto LABEL_109;\n                if ( pwc[0] )\n                  goto LABEL_110;\n              }\n              v40 = 1;\n              if ( mbsinit(&ps) )\n                v35 = 0;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            v25 = strlen(v38);\n            v40 = 0;\n            v39 = v25;\n          }\n        }\n        v38 += v39;\n        v45 += v46;\n        v37 = 0;\n        v44 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v37 )\n    {\n      v19 = pwc[0];\n      if ( v40 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v35 )\n    {\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n      {\n        v39 = 1LL;\n        v19 = *v38;\n        v40 = 1;\n        pwc[0] = v19;\n        v37 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v26 = __ctype_get_mb_cur_max();\n    v27 = v38;\n    sub_407340(v38, v26);\n    v28 = sub_408FC0(pwc, v27);\n    v39 = v28;\n    if ( v28 == -1 )\n    {\n      v39 = 1LL;\n      v19 = pwc[0];\n      v40 = 0;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 == -2 )\n    {\n      v32 = strlen(v38);\n      v40 = 0;\n      v19 = pwc[0];\n      v39 = v32;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 )\n    {\n      v19 = pwc[0];\n      goto LABEL_90;\n    }\n    v39 = 1LL;\n    if ( *v38 )\n      goto LABEL_109;\n    v19 = pwc[0];\n    if ( pwc[0] )\nLABEL_104:\n      sub_404800();\nLABEL_90:\n    v40 = 1;\n    mbsinit(&ps);\n    v37 = 1;\nLABEL_58:\n    if ( v19 )\n    {\nLABEL_59:\n      if ( !v40 || !iswalnum(v19) )\n        break;\nLABEL_62:\n      v38 = v3;\n      ps = 0LL;\n      v37 = 0;\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*v3 >> 5) & 7] >> *v3) & 1) != 0 )\n      {\n        v39 = 1LL;\n        v20 = *v3;\n        v40 = 1;\n        pwc[0] = v20;\n        v37 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v29 = __ctype_get_mb_cur_max();\n        v30 = v38;\n        sub_407340(v38, v29);\n        v31 = sub_408FC0(pwc, v30);\n        v39 = v31;\n        switch ( v31 )\n        {\n          case -1LL:\n            v39 = 1LL;\n            goto LABEL_65;\n          case -2LL:\n            v39 = strlen(v38);\n            goto LABEL_65;\n          case 0LL:\n            v39 = 1LL;\n            if ( !*v38 )\n            {\n              if ( pwc[0] )\n                goto LABEL_104;\n              break;\n            }\nLABEL_109:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n        }\n        v40 = 1;\n        mbsinit(&ps);\n        v37 = 1;\nLABEL_64:\n        if ( pwc[0] )\n        {\nLABEL_65:\n          a1 = &v3[v39];\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)p_ps )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)p_ps;\n}\n\n__int64 __fastcall sub_404820(char *a1, __int64 a2)\n{\n  char *v3; // rbp\n  char *v4; // r13\n  __int64 v5; // rbx\n  mbstate_t *p_ps; // r13\n  wint_t v8; // r15d\n  char *v9; // rbx\n  size_t mb_cur_max; // rax\n  char *v11; // rbx\n  __int64 v12; // rax\n  size_t v13; // rax\n  wchar_t v14; // eax\n  wchar_t v15; // eax\n  size_t v16; // rax\n  char *v17; // r15\n  __int64 v18; // rax\n  wint_t v19; // ebx\n  wchar_t v20; // eax\n  size_t v21; // rax\n  char *v22; // r15\n  __int64 v23; // rax\n  size_t v24; // rax\n  size_t v25; // rax\n  size_t v26; // rax\n  char *v27; // rbx\n  __int64 v28; // rax\n  size_t v29; // rax\n  char *v30; // r13\n  __int64 v31; // rax\n  size_t v32; // rax\n  char *s; // [rsp+8h] [rbp-C0h]\n  char v34; // [rsp+10h] [rbp-B8h]\n  char v35; // [rsp+10h] [rbp-B8h]\n  mbstate_t ps; // [rsp+14h] [rbp-B4h] BYREF\n  char v37; // [rsp+1Ch] [rbp-ACh]\n  char *v38; // [rsp+20h] [rbp-A8h]\n  size_t v39; // [rsp+28h] [rbp-A0h]\n  char v40; // [rsp+30h] [rbp-98h]\n  wchar_t pwc[7]; // [rsp+34h] [rbp-94h] BYREF\n  char v42; // [rsp+50h] [rbp-78h]\n  mbstate_t v43; // [rsp+54h] [rbp-74h] BYREF\n  char v44; // [rsp+5Ch] [rbp-6Ch]\n  char *v45; // [rsp+60h] [rbp-68h]\n  size_t v46; // [rsp+68h] [rbp-60h]\n  char v47; // [rsp+70h] [rbp-58h]\n  wchar_t v48[21]; // [rsp+74h] [rbp-54h] BYREF\n\n  s = (char *)sub_4073A0(a2, 2LL);\n  while ( 2 )\n  {\n    if ( !*a1 )\n    {\nLABEL_11:\n      LODWORD(p_ps) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      v3 = (char *)sub_40A420(a1, s);\n      if ( !v3 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v4 = &v3[strlen(s)];\n      if ( a1 >= v3 || ((*__ctype_b_loc())[(unsigned __int8)*(v3 - 1)] & 8) == 0 )\n      {\n        v5 = (unsigned __int8)*v4;\n        if ( !(_BYTE)v5 || ((*__ctype_b_loc())[v5] & 8) == 0 )\n        {\n          LODWORD(p_ps) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *v3 )\n      {\n        a1 = v3 + 1;\n        if ( v3[1] )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v38 = a1;\n    p_ps = &ps;\n    v34 = 0;\n    ps = 0LL;\n    v37 = 0;\n    if ( a1 >= v3 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v34 )\n      {\n        if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n        {\n          v39 = 1LL;\n          v8 = *v38;\n          v40 = 1;\n          pwc[0] = v8;\n          v37 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v34 = 1;\n      }\n      mb_cur_max = __ctype_get_mb_cur_max();\n      v11 = v38;\n      sub_407340(v38, mb_cur_max);\n      v12 = sub_408FC0(pwc, v11);\n      v39 = v12;\n      if ( v12 == -1 )\n      {\n        v8 = pwc[0];\n        v9 = v38;\n        v40 = 0;\n        v39 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v12 == -2 )\n      {\n        v9 = v38;\n        v13 = strlen(v38);\n        v40 = 0;\n        v8 = pwc[0];\n        v39 = v13;\n        goto LABEL_19;\n      }\n      if ( v12 )\n      {\n        v8 = pwc[0];\n      }\n      else\n      {\n        v39 = 1LL;\n        if ( *v38 )\n          goto LABEL_109;\n        v8 = pwc[0];\n        if ( pwc[0] )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v40 = 1;\n      if ( mbsinit(&ps) )\n        v34 = 0;\n      v37 = 1;\nLABEL_17:\n      if ( !v8 )\nLABEL_111:\n        abort();\n      v9 = v38;\nLABEL_19:\n      v37 = 0;\n      v38 = &v9[v39];\n    }\n    while ( &v9[v39] < v3 );\n    if ( v40 )\n    {\n      LOBYTE(p_ps) = iswalnum(v8) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(p_ps) = 1;\nLABEL_36:\n    v38 = v3;\n    v35 = 0;\n    ps = 0LL;\n    v37 = 0;\n    v45 = s;\n    v42 = 0;\n    v43 = 0LL;\n    v44 = 0;\n    while ( 2 )\n    {\n      if ( !v42 )\n      {\n        if ( (((unsigned int)dword_410680[((unsigned __int8)*v45 >> 5) & 7] >> *v45) & 1) == 0 )\n        {\n          if ( !mbsinit(&v43) )\n            goto LABEL_108;\n          v42 = 1;\n          goto LABEL_46;\n        }\n        v46 = 1LL;\n        v14 = *v45;\n        v47 = 1;\n        v48[0] = v14;\n        v44 = 1;\n        if ( !v14 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v16 = __ctype_get_mb_cur_max();\n      v17 = v45;\n      sub_407340(v45, v16);\n      v18 = sub_408FC0(v48, v17);\n      v46 = v18;\n      switch ( v18 )\n      {\n        case -1LL:\n          v46 = 1LL;\n          v47 = 0;\n          v44 = 1;\n          goto LABEL_39;\n        case -2LL:\n          v24 = strlen(v45);\n          v47 = 0;\n          v46 = v24;\n          v44 = 1;\n          goto LABEL_39;\n        case 0LL:\n          v46 = 1LL;\n          if ( *v45 )\n            goto LABEL_109;\n          if ( v48[0] )\n            goto LABEL_110;\n          break;\n      }\n      v47 = 1;\n      if ( mbsinit(&v43) )\n        v42 = 0;\n      v44 = 1;\n      if ( v48[0] )\n      {\nLABEL_39:\n        if ( v37 )\n        {\n          if ( v40 )\n          {\nLABEL_43:\n            if ( !pwc[0] )\n              goto LABEL_111;\n          }\n        }\n        else\n        {\n          if ( !v35 )\n          {\n            if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n            {\n              v39 = 1LL;\n              v15 = *v38;\n              v40 = 1;\n              pwc[0] = v15;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v35 = 1;\n          }\n          v21 = __ctype_get_mb_cur_max();\n          v22 = v38;\n          sub_407340(v38, v21);\n          v23 = sub_408FC0(pwc, v22);\n          v39 = v23;\n          if ( v23 == -1 )\n          {\n            v39 = 1LL;\n            v40 = 0;\n          }\n          else\n          {\n            if ( v23 != -2 )\n            {\n              if ( !v23 )\n              {\n                v39 = 1LL;\n                if ( *v38 )\n                  goto LABEL_109;\n                if ( pwc[0] )\n                  goto LABEL_110;\n              }\n              v40 = 1;\n              if ( mbsinit(&ps) )\n                v35 = 0;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            v25 = strlen(v38);\n            v40 = 0;\n            v39 = v25;\n          }\n        }\n        v38 += v39;\n        v45 += v46;\n        v37 = 0;\n        v44 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v37 )\n    {\n      v19 = pwc[0];\n      if ( v40 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v35 )\n    {\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1) != 0 )\n      {\n        v39 = 1LL;\n        v19 = *v38;\n        v40 = 1;\n        pwc[0] = v19;\n        v37 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v26 = __ctype_get_mb_cur_max();\n    v27 = v38;\n    sub_407340(v38, v26);\n    v28 = sub_408FC0(pwc, v27);\n    v39 = v28;\n    if ( v28 == -1 )\n    {\n      v39 = 1LL;\n      v19 = pwc[0];\n      v40 = 0;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 == -2 )\n    {\n      v32 = strlen(v38);\n      v40 = 0;\n      v19 = pwc[0];\n      v39 = v32;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 )\n    {\n      v19 = pwc[0];\n      goto LABEL_90;\n    }\n    v39 = 1LL;\n    if ( *v38 )\n      goto LABEL_109;\n    v19 = pwc[0];\n    if ( pwc[0] )\nLABEL_104:\n      sub_404800();\nLABEL_90:\n    v40 = 1;\n    mbsinit(&ps);\n    v37 = 1;\nLABEL_58:\n    if ( v19 )\n    {\nLABEL_59:\n      if ( !v40 || !iswalnum(v19) )\n        break;\nLABEL_62:\n      v38 = v3;\n      ps = 0LL;\n      v37 = 0;\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*v3 >> 5) & 7] >> *v3) & 1) != 0 )\n      {\n        v39 = 1LL;\n        v20 = *v3;\n        v40 = 1;\n        pwc[0] = v20;\n        v37 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v29 = __ctype_get_mb_cur_max();\n        v30 = v38;\n        sub_407340(v38, v29);\n        v31 = sub_408FC0(pwc, v30);\n        v39 = v31;\n        switch ( v31 )\n        {\n          case -1LL:\n            v39 = 1LL;\n            goto LABEL_65;\n          case -2LL:\n            v39 = strlen(v38);\n            goto LABEL_65;\n          case 0LL:\n            v39 = 1LL;\n            if ( !*v38 )\n            {\n              if ( pwc[0] )\n                goto LABEL_104;\n              break;\n            }\nLABEL_109:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n        }\n        v40 = 1;\n        mbsinit(&ps);\n        v37 = 1;\nLABEL_64:\n        if ( pwc[0] )\n        {\nLABEL_65:\n          a1 = &v3[v39];\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)p_ps )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)p_ps;\n}\n"
        },
        {
            "funcName": "sub_4050C0",
            "funcStartAddr": "0x4050c0",
            "funcEndAddr": "0x405144",
            "decompiledFuncCode": "const char *__fastcall sub_4050C0(char *s)\n{\n  char *v1; // rax\n  const char *v2; // rbx\n  size_t v4; // r12\n  size_t v5; // rax\n  __int64 v6; // r12\n\n  v1 = dcgettext(0LL, s, 5);\n  v2 = v1;\n  if ( s == v1 || (unsigned __int8)sub_404820(v1, (__int64)s) )\n    return v2;\n  v4 = strlen(v2);\n  v5 = strlen(s);\n  v6 = sub_407EE0(v4 + v5 + 4);\n  __sprintf_chk(v6, 1LL, -1LL, \"%s (%s)\", v2, s);\n  return (const char *)v6;\n}\n"
        },
        {
            "funcName": "sub_405150",
            "funcStartAddr": "0x405150",
            "funcEndAddr": "0x4053d0",
            "decompiledFuncCode": "const char *__fastcall sub_405150(char *s2, char *s)\n{\n  char *v2; // rbx\n  char *v3; // r13\n  const char *v4; // r14\n  char *v5; // r15\n  const char *v6; // r12\n  char *v7; // r14\n  char *v8; // rbp\n  size_t v10; // rbx\n  size_t v11; // rax\n  __int64 v12; // rbx\n  size_t v13; // r15\n  void *v14; // rax\n  char *v15; // rax\n  char *ptr; // [rsp+8h] [rbp-40h]\n\n  v2 = s;\n  v3 = dcgettext(0LL, s2, 5);\n  v4 = (const char *)sub_409270();\n  if ( !(unsigned int)sub_409150(v4, \"UTF-8\") )\n  {\n    if ( s )\n    {\n      v5 = s;\n      v6 = s;\n    }\n    else\n    {\n      v5 = 0LL;\n      v6 = s2;\n    }\n    v7 = 0LL;\nLABEL_5:\n    if ( !strcmp(v3, s2) )\n      return v6;\n    v8 = 0LL;\n    if ( (unsigned __int8)sub_404820(v3, (__int64)s2) )\n      goto LABEL_11;\n    goto LABEL_7;\n  }\n  v6 = (const char *)sub_4081C0(s, \"UTF-8\", v4);\n  v13 = strlen(v4);\n  v14 = (void *)sub_407EE0(v13 + 11);\n  v15 = (char *)memcpy(v14, v4, v13);\n  strcpy(&v15[v13], \"//TRANSLIT\");\n  ptr = v15;\n  v7 = (char *)sub_4081C0(s, \"UTF-8\", v15);\n  free(ptr);\n  if ( !v7 )\n  {\n    if ( v6 )\n      goto LABEL_24;\n    goto LABEL_33;\n  }\n  if ( strchr(v7, 63) )\n  {\n    free(v7);\n    if ( v6 )\n    {\nLABEL_24:\n      if ( !strcmp(v3, s2) )\n        return v6;\n      v5 = 0LL;\n      v7 = 0LL;\n      goto LABEL_26;\n    }\nLABEL_33:\n    v6 = s2;\n    v5 = 0LL;\n    v2 = 0LL;\n    v7 = 0LL;\n    goto LABEL_5;\n  }\n  if ( !v6 )\n  {\n    v5 = v7;\n    v2 = 0LL;\n    v6 = v7;\n    goto LABEL_5;\n  }\n  v5 = v7;\n  if ( !strcmp(v3, s2) )\n  {\n    if ( v6 == v7 )\n      return v6;\n    goto LABEL_12;\n  }\nLABEL_26:\n  if ( (unsigned __int8)sub_404820(v3, (__int64)s2) )\n  {\n    v8 = (char *)v6;\nLABEL_10:\n    free(v8);\nLABEL_11:\n    v6 = v3;\n    if ( !v7 )\n      return v6;\nLABEL_12:\n    free(v7);\n    return v6;\n  }\n  v2 = (char *)v6;\n  v8 = (char *)v6;\nLABEL_7:\n  if ( v2 && (unsigned __int8)sub_404820(v3, (__int64)v2) || v5 && (unsigned __int8)sub_404820(v3, (__int64)v5) )\n  {\n    if ( !v8 )\n      goto LABEL_11;\n    goto LABEL_10;\n  }\n  v10 = strlen(v3);\n  v11 = strlen(v6);\n  v12 = sub_407EE0(v10 + v11 + 4);\n  __sprintf_chk(v12, 1LL, -1LL, \"%s (%s)\", v3, v6);\n  if ( v8 )\n    free(v8);\n  v6 = (const char *)v12;\n  if ( v7 )\n    goto LABEL_12;\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_4053D0",
            "funcStartAddr": "0x4053d0",
            "funcEndAddr": "0x4054c2",
            "decompiledFuncCode": "const char *__fastcall sub_4053D0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_409270();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40F3B0;\n      if ( !v5 )\n        return (const char *)&unk_40F3A5;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40F3AC;\n    if ( !v5 )\n      return (const char *)&unk_40F3A9;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"*iter->cur.ptr == '\\\\0'\" + 21;\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_4054D0",
            "funcStartAddr": "0x401a45",
            "funcEndAddr": "0x401a4a",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4054D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4054D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4054D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408FC0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4054D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4053D0(\"`\", a5);\n        v51 = (char *)sub_4053D0((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_4054D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4054D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4054D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408FC0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4054D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4053D0(\"`\", a5);\n        v51 = (char *)sub_4053D0((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_4054D0",
            "funcStartAddr": "0x401a45",
            "funcEndAddr": "0x401a4a",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4054D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4054D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4054D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408FC0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4054D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4053D0(\"`\", a5);\n        v51 = (char *)sub_4053D0((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_4054D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4054D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4054D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408FC0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4054D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4053D0(\"`\", a5);\n        v51 = (char *)sub_4053D0((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_406700",
            "funcStartAddr": "0x401a4a",
            "funcEndAddr": "0x401a4f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406700(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6132B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408130();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6132A0 )\n    {\n      v7 = (__m128i *)sub_407F40(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6132A0);\n    }\n    else\n    {\n      ptr = (void *)sub_407F40(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6132B0], 0, 16LL * (a1 + 1 - dword_6132B0));\n    dword_6132B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4054D0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_613340 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_407EE0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4054D0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_406700(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6132B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408130();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6132A0 )\n    {\n      v7 = (__m128i *)sub_407F40(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6132A0);\n    }\n    else\n    {\n      ptr = (void *)sub_407F40(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6132B0], 0, 16LL * (a1 + 1 - dword_6132B0));\n    dword_6132B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4054D0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_613340 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_407EE0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4054D0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_406700",
            "funcStartAddr": "0x401a4a",
            "funcEndAddr": "0x401a4f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406700(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6132B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408130();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6132A0 )\n    {\n      v7 = (__m128i *)sub_407F40(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6132A0);\n    }\n    else\n    {\n      ptr = (void *)sub_407F40(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6132B0], 0, 16LL * (a1 + 1 - dword_6132B0));\n    dword_6132B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4054D0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_613340 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_407EE0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4054D0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_406700(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6132B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408130();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6132A0 )\n    {\n      v7 = (__m128i *)sub_407F40(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6132A0);\n    }\n    else\n    {\n      ptr = (void *)sub_407F40(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6132B0], 0, 16LL * (a1 + 1 - dword_6132B0));\n    dword_6132B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4054D0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_613340 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_407EE0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4054D0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_4068A0",
            "funcStartAddr": "0x4068a0",
            "funcEndAddr": "0x4068d4",
            "decompiledFuncCode": "__int64 __fastcall sub_4068A0(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_613440;\n  result = sub_4080E0(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406990",
            "funcStartAddr": "0x406990",
            "funcEndAddr": "0x406a02",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406990(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_613440;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_4054D0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((const char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406A10",
            "funcStartAddr": "0x406a10",
            "funcEndAddr": "0x406af1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406A10(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_613440;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_4054D0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((const char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_407EE0(v11 + 1);\n  sub_4054D0(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((const char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_406B10",
            "funcStartAddr": "0x406b10",
            "funcEndAddr": "0x406ba5",
            "decompiledFuncCode": "void sub_406B10()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_6132B0 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_6132B0 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_613340 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_6132A0 = 256LL;\n    *((_QWORD *)&xmmword_6132A0 + 1) = &unk_613340;\n  }\n  if ( v0 != &xmmword_6132A0 )\n  {\n    free(v0);\n    ptr = &xmmword_6132A0;\n  }\n  dword_6132B0 = 1;\n}\n"
        },
        {
            "funcName": "sub_406C20",
            "funcStartAddr": "0x401a4f",
            "funcEndAddr": "0x401a54",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406C20(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406700(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_406C20(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406700(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_406C20",
            "funcStartAddr": "0x401a4f",
            "funcEndAddr": "0x401a54",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406C20(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406700(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_406C20(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406700(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_406C90",
            "funcStartAddr": "0x401a54",
            "funcEndAddr": "0x401a59",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406C90(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406700(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_406C90(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406700(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_406C90",
            "funcStartAddr": "0x401a54",
            "funcEndAddr": "0x401a59",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406C90(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406700(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_406C90(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406700(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_406D20",
            "funcStartAddr": "0x406d20",
            "funcEndAddr": "0x406d90",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406D20(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_613470;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_613440);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_613450);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_613460);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_406700(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_406DA0",
            "funcStartAddr": "0x406da0",
            "funcEndAddr": "0x406db1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406DA0(__int64 a1)\n{\n  return sub_406D20(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_406DD0",
            "funcStartAddr": "0x401a59",
            "funcEndAddr": "0x401a5e",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406DD0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406700(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_406DD0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406700(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_406DD0",
            "funcStartAddr": "0x401a59",
            "funcEndAddr": "0x401a5e",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406DD0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406700(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_406DD0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406700(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_406E40",
            "funcStartAddr": "0x406e40",
            "funcEndAddr": "0x406eac",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406E40(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_613440);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_613450);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_613460);\n  v8 = qword_613470;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_406700(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_406F50",
            "funcStartAddr": "0x406f50",
            "funcEndAddr": "0x406f66",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406F50(__int64 a1)\n{\n  return sub_406700(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_613260);\n}\n"
        },
        {
            "funcName": "sub_406F70",
            "funcStartAddr": "0x406f70",
            "funcEndAddr": "0x406f80",
            "decompiledFuncCode": "void __fastcall sub_406F70(_QWORD *a1)\n{\n  *a1 = 0LL;\n  a1[1] = 0LL;\n}\n"
        },
        {
            "funcName": "sub_406F80",
            "funcStartAddr": "0x406f80",
            "funcEndAddr": "0x4070f9",
            "decompiledFuncCode": "__int64 __fastcall sub_406F80(__int64 a1, unsigned __int8 *a2, __int64 a3, __int64 *a4)\n{\n  _IO_FILE *v5; // rbp\n  unsigned __int8 *v6; // rdx\n  unsigned __int64 v7; // rcx\n  char *IO_read_ptr; // rax\n  unsigned __int64 v9; // rbx\n  __int64 v10; // rax\n  int v11; // eax\n  _IO_FILE *v12; // r15\n  __int64 v13; // r14\n  __int64 i; // r12\n  _BYTE *v15; // rdx\n  __int64 v16; // rax\n  char *v17; // rax\n  __int128 v19[5]; // [rsp+0h] [rbp-58h] BYREF\n\n  v5 = (_IO_FILE *)a1;\n  memset(v19, 0, 32);\n  if ( !a3 )\n    goto LABEL_7;\n  v6 = &a2[a3];\n  a1 = 1LL;\n  do\n  {\n    v7 = *a2++;\n    *(_QWORD *)((char *)v19 + ((v7 >> 3) & 0x18)) |= 1LL << v7;\n  }\n  while ( v6 != a2 );\n  IO_read_ptr = v5->_IO_read_ptr;\n  if ( IO_read_ptr >= v5->_IO_read_end )\n    goto LABEL_8;\nLABEL_5:\n  v5->_IO_read_ptr = IO_read_ptr + 1;\n  v9 = (unsigned __int8)*IO_read_ptr;\n  do\n  {\n    v10 = *((_QWORD *)v19 + ((unsigned __int64)(int)v9 >> 6));\n    if ( !_bittest64(&v10, v9) )\n      break;\nLABEL_7:\n    IO_read_ptr = v5->_IO_read_ptr;\n    if ( IO_read_ptr < v5->_IO_read_end )\n      goto LABEL_5;\nLABEL_8:\n    a1 = (__int64)v5;\n    v11 = __uflow(v5);\n    v9 = (unsigned int)v11;\n  }\n  while ( v11 >= 0 );\n  v12 = (_IO_FILE *)a4[1];\n  v13 = *a4;\n  for ( i = 0LL; (v9 & 0x80000000) == 0LL || i; ++i )\n  {\n    if ( i == v13 )\n    {\n      if ( v12 )\n      {\n        if ( (unsigned __int64)i > 0x5555555555555553LL )\n          goto LABEL_27;\n        v13 = i + ((unsigned __int64)i >> 1) + 1;\n      }\n      else if ( i )\n      {\n        if ( i < 0 )\nLABEL_27:\n          sub_408130(a1);\n      }\n      else\n      {\n        v13 = 128LL;\n      }\n      a1 = (__int64)v12;\n      v12 = (_IO_FILE *)sub_407F40(v12, v13);\n      v15 = (char *)v12 + i;\n      if ( (v9 & 0x80000000) != 0LL )\n      {\nLABEL_21:\n        *v15 = 0;\n        a4[1] = (__int64)v12;\n        *a4 = v13;\n        return i;\n      }\n    }\n    else\n    {\n      v15 = (char *)v12 + i;\n      if ( (v9 & 0x80000000) != 0LL )\n        goto LABEL_21;\n    }\n    v16 = *((_QWORD *)v19 + ((unsigned __int64)(int)v9 >> 6));\n    if ( _bittest64(&v16, v9) )\n      goto LABEL_21;\n    *v15 = v9;\n    v17 = v5->_IO_read_ptr;\n    if ( v17 >= v5->_IO_read_end )\n    {\n      a1 = (__int64)v5;\n      v9 = (unsigned int)__uflow(v5);\n    }\n    else\n    {\n      v5->_IO_read_ptr = v17 + 1;\n      v9 = (unsigned __int8)*v17;\n    }\n  }\n  return -1LL;\n}\n"
        },
        {
            "funcName": "sub_407100",
            "funcStartAddr": "0x407100",
            "funcEndAddr": "0x4072d9",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407100(\n        _IO_FILE *a1,\n        __int64 a2,\n        unsigned __int8 *a3,\n        __int64 a4,\n        __int64 *a5,\n        _IO_FILE **a6)\n{\n  unsigned __int64 v6; // rbp\n  __int64 v7; // rbx\n  __int64 v8; // rax\n  __int64 v9; // rdi\n  unsigned __int64 v10; // rbx\n  __int64 v11; // r12\n  _IO_FILE *v12; // r13\n  void *v13; // rax\n  __int64 v14; // rax\n  __int64 v15; // r14\n  __int64 v16; // rdx\n  void *v17; // rdi\n  _IO_FILE *v19; // [rsp+0h] [rbp-78h]\n  __int64 v22; // [rsp+18h] [rbp-60h]\n  __int64 v25; // [rsp+30h] [rbp-48h] BYREF\n  void *src; // [rsp+38h] [rbp-40h]\n\n  v19 = a1;\n  if ( a2 )\n  {\n    v6 = a2 + 1;\n    v7 = 8 * (a2 + 1);\n    if ( ((a2 + 1) & 0x1000000000000000LL) != 0 || (unsigned __int64)(a2 + 1) >> 61 )\nLABEL_4:\n      sub_408130(a1);\n  }\n  else\n  {\n    v7 = 512LL;\n    v6 = 64LL;\n  }\n  v8 = sub_407EE0(v7);\n  v9 = v7;\n  v10 = 0LL;\n  v11 = v8;\n  v25 = 0LL;\n  src = 0LL;\n  v12 = (_IO_FILE *)sub_407EE0(v9);\n  while ( 1 )\n  {\n    a1 = v19;\n    v14 = sub_406F80((__int64)v19, a3, a4, &v25);\n    v15 = v14;\n    if ( v10 < v6 )\n    {\n      if ( v14 == -1 )\n        break;\n      goto LABEL_8;\n    }\n    if ( v11 )\n    {\n      if ( v6 > 0xAAAAAAAAAAAAAA9LL )\n        goto LABEL_4;\n      v6 += (v6 >> 1) + 1;\n      v16 = 8 * v6;\n    }\n    else if ( v6 )\n    {\n      v16 = 8 * v6;\n      if ( (v6 & 0x1000000000000000LL) != 0 || v6 >> 61 )\n        goto LABEL_4;\n    }\n    else\n    {\n      v16 = 128LL;\n      v6 = 16LL;\n    }\n    v22 = v16;\n    a1 = v12;\n    v11 = sub_407F40(v11, v16);\n    v12 = (_IO_FILE *)sub_407F40(v12, v22);\n    if ( v15 == -1 )\n      break;\nLABEL_8:\n    if ( v15 + 1 < 0 )\n      goto LABEL_4;\n    v13 = (void *)sub_407EE0(v15 + 1);\n    *((_QWORD *)&v12->_flags + v10) = v15;\n    *(_QWORD *)(v11 + 8 * v10++) = memcpy(v13, src, v15 + 1);\n  }\n  *(_QWORD *)(v11 + 8 * v10) = 0LL;\n  v17 = src;\n  *((_QWORD *)&v12->_flags + v10) = 0LL;\n  free(v17);\n  *a5 = v11;\n  if ( a6 )\n    *a6 = v12;\n  else\n    free(v12);\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_4072E0",
            "funcStartAddr": "0x4072e0",
            "funcEndAddr": "0x40733e",
            "decompiledFuncCode": "ssize_t __fastcall sub_4072E0(int fd, void *buf, size_t n)\n{\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  while ( 1 )\n  {\n    v4 = write(fd, buf, n);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( v5 != 22 || n <= 0x7FFFE000 )\n        return v4;\n      n = 2147475456LL;\n    }\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_407340",
            "funcStartAddr": "0x407340",
            "funcEndAddr": "0x407371",
            "decompiledFuncCode": "__int64 __fastcall sub_407340(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rax\n  __int64 v4; // rsi\n  bool v5; // zf\n  __int64 result; // rax\n\n  v3 = sub_409040(a1, 0LL, a2);\n  v4 = v3 - a1 + 1;\n  v5 = v3 == 0;\n  result = a2;\n  if ( !v5 )\n    return v4;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407380",
            "funcStartAddr": "0x407380",
            "funcEndAddr": "0x40739d",
            "decompiledFuncCode": "void __noreturn sub_407380()\n{\n  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbiter.h\", 0xAAu, \"mbiter_multi_next\");\n}\n"
        },
        {
            "funcName": "sub_4073A0",
            "funcStartAddr": "0x4073a0",
            "funcEndAddr": "0x40793c",
            "decompiledFuncCode": "char *__fastcall sub_4073A0(const char *a1, int a2)\n{\n  char *v2; // r13\n  char *v3; // rax\n  char *v4; // r12\n  int *v5; // rbp\n  int v6; // edx\n  unsigned int v7; // eax\n  char *v8; // rbx\n  __int64 v9; // r14\n  wint_t v10; // eax\n  char *v11; // r15\n  unsigned __int64 v12; // rbp\n  int v13; // eax\n  __int64 v15; // rax\n  __int64 v16; // rbx\n  __int64 v17; // rbx\n  const char *v18; // r13\n  const unsigned __int16 *v19; // rax\n  size_t v20; // rax\n  int *v21; // rdx\n  int v22; // ecx\n  unsigned int v23; // eax\n  char *v24; // rbx\n  const unsigned __int16 *v25; // rdx\n  int *v26; // rbx\n  int v27; // edx\n  unsigned int v28; // eax\n  char *v29; // r14\n  wint_t v30; // eax\n  __int64 v31; // rax\n  size_t v32; // rax\n  char *v33; // [rsp+0h] [rbp-88h]\n  char *v34; // [rsp+0h] [rbp-88h]\n  char v35; // [rsp+8h] [rbp-80h]\n  char v36; // [rsp+8h] [rbp-80h]\n  mbstate_t ps; // [rsp+Ch] [rbp-7Ch] BYREF\n  char v38; // [rsp+14h] [rbp-74h]\n  char *v39; // [rsp+18h] [rbp-70h]\n  __int64 v40; // [rsp+20h] [rbp-68h]\n  char v41; // [rsp+28h] [rbp-60h]\n  wint_t wc[23]; // [rsp+2Ch] [rbp-5Ch] BYREF\n\n  v3 = strdup(a1);\n  if ( !v3 )\n    sub_408130(a1);\n  v4 = v3;\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    if ( !a2 )\n      goto LABEL_45;\n    v17 = (unsigned __int8)*v4;\n    if ( (_BYTE)v17 )\n    {\n      v18 = v4;\n      v19 = *__ctype_b_loc();\n      do\n      {\n        if ( (v19[v17] & 0x2000) == 0 )\n          break;\n        v17 = *(unsigned __int8 *)++v18;\n      }\n      while ( (_BYTE)v17 );\n    }\n    else\n    {\n      v18 = v4;\n    }\n    v20 = strlen(v18);\n    memmove(v4, v18, v20 + 1);\n    if ( a2 != 1 )\n    {\nLABEL_45:\n      v21 = (int *)v4;\n      do\n      {\n        v22 = *v21++;\n        v23 = ~v22 & (v22 - 16843009) & 0x80808080;\n      }\n      while ( !v23 );\n      if ( (~v22 & (v22 - 16843009) & 0x8080) == 0 )\n      {\n        v23 >>= 16;\n        v21 = (int *)((char *)v21 + 2);\n      }\n      v24 = (char *)v21 - __CFADD__((_BYTE)v23, (_BYTE)v23) - 4;\n      if ( v4 <= v24 )\n      {\n        v25 = *__ctype_b_loc();\n        do\n        {\n          if ( (v25[(unsigned __int8)*v24] & 0x2000) == 0 )\n            break;\n          *v24-- = 0;\n        }\n        while ( v4 <= v24 );\n      }\n    }\n    return v4;\n  }\n  if ( !a2 )\n    goto LABEL_4;\n  v39 = v4;\n  v26 = (int *)v4;\n  do\n  {\n    v27 = *v26++;\n    v28 = ~v27 & (v27 - 16843009) & 0x80808080;\n  }\n  while ( !v28 );\n  v36 = 0;\n  v29 = v4;\n  v38 = 0;\n  ps = 0LL;\n  if ( (~v27 & (v27 - 16843009) & 0x8080) == 0 )\n  {\n    v28 >>= 16;\n    v26 = (int *)((char *)v26 + 2);\n  }\n  v34 = (char *)v26 - __CFADD__((_BYTE)v28, (_BYTE)v28) - 3;\n  if ( v34 <= v4 )\n    goto LABEL_79;\n  while ( !v36 )\n  {\n    if ( (((unsigned int)dword_410680[((unsigned __int8)*v29 >> 5) & 7] >> *v29) & 1) == 0 )\n    {\n      if ( !mbsinit(&ps) )\nLABEL_84:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbiter.h\", 0x8Eu, \"mbiter_multi_next\");\n      v36 = 1;\n      break;\n    }\n    v40 = 1LL;\n    v30 = *v29;\n    v41 = 1;\n    v29 = v39;\n    wc[0] = v30;\n    v38 = 1;\nLABEL_65:\n    if ( iswspace(wc[0]) )\n    {\n      v29 += v40;\n      v38 = 0;\n      v39 = v29;\n      if ( v29 < v34 )\n        continue;\n    }\n    goto LABEL_79;\n  }\n  v31 = sub_408FC0((wchar_t *)wc, v29);\n  v40 = v31;\n  if ( v31 == -1 )\n  {\n    v40 = 1LL;\n    v29 = v39;\n    v41 = 0;\n    v38 = 1;\n    goto LABEL_79;\n  }\n  v29 = v39;\n  if ( v31 != -2 )\n  {\n    if ( !v31 )\n    {\n      v40 = 1LL;\n      if ( *v39 )\nLABEL_85:\n        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbiter.h\", 0xA9u, \"mbiter_multi_next\");\n      if ( wc[0] )\nLABEL_86:\n        sub_407380();\n    }\n    v41 = 1;\n    if ( mbsinit(&ps) )\n      v36 = 0;\n    v38 = 1;\n    goto LABEL_65;\n  }\n  v41 = 0;\n  v38 = 1;\n  v40 = v34 - v39;\nLABEL_79:\n  v32 = strlen(v29);\n  memmove(v4, v29, v32 + 1);\n  if ( a2 == 1 )\n    return v4;\nLABEL_4:\n  v39 = v4;\n  v5 = (int *)v4;\n  do\n  {\n    v6 = *v5++;\n    v7 = ~v6 & (v6 - 16843009) & 0x80808080;\n  }\n  while ( !v7 );\n  v35 = 0;\n  v8 = v4;\n  v38 = 0;\n  ps = 0LL;\n  if ( (~v6 & (v6 - 16843009) & 0x8080) == 0 )\n  {\n    v7 >>= 16;\n    v5 = (int *)((char *)v5 + 2);\n  }\n  LODWORD(v9) = 0;\n  v33 = (char *)v5 - __CFADD__((_BYTE)v7, (_BYTE)v7) - 3;\n  if ( v33 > v4 )\n  {\n    while ( 1 )\n    {\n      if ( !v35 )\n      {\n        if ( (((unsigned int)dword_410680[((unsigned __int8)*v8 >> 5) & 7] >> *v8) & 1) != 0 )\n        {\n          v40 = 1LL;\n          v10 = *v8;\n          v11 = v39;\n          v12 = (unsigned __int64)v33;\n          v41 = 1;\n          wc[0] = v10;\n          v8 = v39 + 1;\n          goto LABEL_16;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_84;\n        v35 = 1;\n      }\n      v15 = sub_408FC0((wchar_t *)wc, v8);\n      v16 = v15;\n      v40 = v15;\n      if ( v15 == -1 )\n      {\n        v11 = v39;\n        v12 = (unsigned __int64)v33;\n        v41 = 0;\n        v40 = 1LL;\n        v8 = v39 + 1;\n      }\n      else\n      {\n        v11 = v39;\n        if ( v15 == -2 )\n        {\n          v8 = v33;\n          v41 = 0;\n          v12 = (unsigned __int64)v33;\n          v40 = v33 - v39;\n        }\n        else\n        {\n          if ( !v15 )\n          {\n            v40 = 1LL;\n            if ( *v39 )\n              goto LABEL_85;\n            if ( wc[0] )\n              goto LABEL_86;\n            v16 = 1LL;\n          }\n          v41 = 1;\n          v8 = &v39[v16];\n          v12 = (unsigned __int64)v33;\n          if ( mbsinit(&ps) )\n            v35 = 0;\n        }\n      }\nLABEL_16:\n      v38 = 1;\n      if ( !(_DWORD)v9 )\n      {\n        LODWORD(v9) = 1;\n        if ( v41 )\n          v9 = iswspace(wc[0]) == 0;\n        goto LABEL_12;\n      }\n      if ( (_DWORD)v9 == 1 )\n      {\n        if ( v41 && iswspace(wc[0]) )\n        {\n          v2 = v11;\n          LODWORD(v9) = 2;\n        }\n        goto LABEL_12;\n      }\n      if ( v41 )\n      {\n        v13 = iswspace(wc[0]);\n        v39 = v8;\n        v38 = 0;\n        if ( !v13 )\n          LODWORD(v9) = 1;\n        if ( (unsigned __int64)v8 >= v12 )\n        {\nLABEL_22:\n          if ( (_DWORD)v9 == 2 )\n            *v2 = 0;\n          return v4;\n        }\n      }\n      else\n      {\n        LODWORD(v9) = 1;\nLABEL_12:\n        v39 = v8;\n        v38 = 0;\n        if ( (unsigned __int64)v8 >= v12 )\n          goto LABEL_22;\n      }\n    }\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_407940",
            "funcStartAddr": "0x401a5e",
            "funcEndAddr": "0x401a63",
            "decompiledFuncCode": "__int64 __fastcall sub_407940(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_407940(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_407940",
            "funcStartAddr": "0x401a5e",
            "funcEndAddr": "0x401a63",
            "decompiledFuncCode": "__int64 __fastcall sub_407940(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_407940(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_407D40",
            "funcStartAddr": "0x407d40",
            "funcEndAddr": "0x407da0",
            "decompiledFuncCode": "__int64 __fastcall sub_407D40(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_407940(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_407940(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_407DA0",
            "funcStartAddr": "0x407da0",
            "funcEndAddr": "0x407e5c",
            "decompiledFuncCode": "__int64 __fastcall sub_407DA0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_407940(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_407940(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_407E60",
            "funcStartAddr": "0x407e60",
            "funcEndAddr": "0x407ed4",
            "decompiledFuncCode": "int sub_407E60()\n{\n  char *v0; // rax\n  __int64 v1; // rcx\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\", v1);\n  v2 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v2, &unk_40BDAC, \"https://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v4, v3);\n}\n"
        },
        {
            "funcName": "sub_407EE0",
            "funcStartAddr": "0x407ee0",
            "funcEndAddr": "0x407efa",
            "decompiledFuncCode": "void *__fastcall sub_407EE0(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_408130(a1);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407F30",
            "funcStartAddr": "0x407f30",
            "funcEndAddr": "0x407f32",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_407F30(size_t a1)\n{\n  return sub_407EE0(a1);\n}\n"
        },
        {
            "funcName": "sub_407F40",
            "funcStartAddr": "0x407f40",
            "funcEndAddr": "0x407f76",
            "decompiledFuncCode": "void *__fastcall sub_407F40(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_408130(a1);\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408090",
            "funcStartAddr": "0x408090",
            "funcEndAddr": "0x4080a7",
            "decompiledFuncCode": "void *__fastcall sub_408090(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_407EE0(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_4080B0",
            "funcStartAddr": "0x4080b0",
            "funcEndAddr": "0x4080de",
            "decompiledFuncCode": "void *__fastcall sub_4080B0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  void *result; // rax\n\n  if ( ((a2 * a1) & 0x8000000000000000LL) != 0LL || !is_mul_ok(a2, a1) || (result = calloc(a1, a2)) == 0LL )\n    sub_408130(a1);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4080E0",
            "funcStartAddr": "0x4080e0",
            "funcEndAddr": "0x408108",
            "decompiledFuncCode": "void *__fastcall sub_4080E0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_407EE0(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_408110",
            "funcStartAddr": "0x408110",
            "funcEndAddr": "0x408123",
            "decompiledFuncCode": "void *__fastcall sub_408110(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_4080E0(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_408130",
            "funcStartAddr": "0x408130",
            "funcEndAddr": "0x408161",
            "decompiledFuncCode": "void __noreturn sub_408130()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_408170",
            "funcStartAddr": "0x408170",
            "funcEndAddr": "0x40818f",
            "decompiledFuncCode": "__int64 sub_408170()\n{\n  int v0; // ebx\n\n  v0 = sub_40B2F0();\n  if ( v0 < 0 && *__errno_location() == 12 )\n    sub_408130();\n  return (unsigned int)v0;\n}\n"
        },
        {
            "funcName": "sub_408190",
            "funcStartAddr": "0x408190",
            "funcEndAddr": "0x4081b7",
            "decompiledFuncCode": "__int64 sub_408190()\n{\n  __int64 v0; // rbx\n\n  v0 = sub_40B540();\n  if ( !v0 && *__errno_location() == 12 )\n    sub_408130();\n  return v0;\n}\n"
        },
        {
            "funcName": "sub_4081C0",
            "funcStartAddr": "0x4081c0",
            "funcEndAddr": "0x4081e7",
            "decompiledFuncCode": "__int64 __fastcall sub_4081C0(char *a1, char *a2, char *a3)\n{\n  __int64 v3; // rbx\n\n  v3 = sub_40B710(a1, a2, a3);\n  if ( !v3 && *__errno_location() == 12 )\n    sub_408130();\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_4081F0",
            "funcStartAddr": "0x4081f0",
            "funcEndAddr": "0x4082cf",
            "decompiledFuncCode": "__int64 __fastcall sub_4081F0(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4082D0",
            "funcStartAddr": "0x4082d0",
            "funcEndAddr": "0x4088ec",
            "decompiledFuncCode": "__int64 __fastcall sub_4082D0(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v46 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = a4;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4088F0",
            "funcStartAddr": "0x4088f0",
            "funcEndAddr": "0x408eb6",
            "decompiledFuncCode": "__int64 __fastcall sub_4088F0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_4081F0((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_4081F0((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_4082D0(a1, a2, v12, a4, a5, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_4082D0(a1, a2, v12, a4, a5, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_4082D0(a1, a2, v12, a4, a5, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_408EC0",
            "funcStartAddr": "0x408ec0",
            "funcEndAddr": "0x408f16",
            "decompiledFuncCode": "__int64 __fastcall sub_408EC0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_613480 = dword_6132BC;\n  dword_613484 = dword_6132B8;\n  result = sub_4088F0(a1, a2, a3, a4, a5, a6, &dword_613480, a7);\n  dword_6132BC = dword_613480;\n  qword_613CC8 = qword_613490;\n  dword_6132B4 = dword_613488;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408F20",
            "funcStartAddr": "0x408f20",
            "funcEndAddr": "0x408f38",
            "decompiledFuncCode": "__int64 __fastcall sub_408F20(int a1, __int64 *a2, const char *a3)\n{\n  return sub_408EC0(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_408F40",
            "funcStartAddr": "0x408f40",
            "funcEndAddr": "0x408f53",
            "decompiledFuncCode": "__int64 __fastcall sub_408F40(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_408EC0(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_408F60",
            "funcStartAddr": "0x408f60",
            "funcEndAddr": "0x408f75",
            "decompiledFuncCode": "__int64 __fastcall sub_408F60(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_4088F0(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_408F80",
            "funcStartAddr": "0x408f80",
            "funcEndAddr": "0x408f96",
            "decompiledFuncCode": "__int64 __fastcall sub_408F80(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_408EC0(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_408FA0",
            "funcStartAddr": "0x408fa0",
            "funcEndAddr": "0x408fb8",
            "decompiledFuncCode": "__int64 __fastcall sub_408FA0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_4088F0(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_408FC0",
            "funcStartAddr": "0x408fc0",
            "funcEndAddr": "0x40903a",
            "decompiledFuncCode": "size_t __fastcall sub_408FC0(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_409210(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_409040",
            "funcStartAddr": "0x409040",
            "funcEndAddr": "0x409144",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409040(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax\n  __int64 v4; // r9\n  _BYTE *v5; // rcx\n  _BYTE *v6; // rdi\n\n  if ( !a3 )\n    return 0LL;\n  if ( ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && (((v4 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) == 0 )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( (((v4 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = a1 + 1;\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = v5;\n      if ( v5 == v6 )\n        break;\n      if ( *v5++ == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_409150",
            "funcStartAddr": "0x409150",
            "funcEndAddr": "0x4091a9",
            "decompiledFuncCode": "__int64 __fastcall sub_409150(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n  int v4; // r8d\n  char v5; // al\n  int v6; // r9d\n  char v7; // cl\n\n  result = 0LL;\n  if ( a1 != a2 )\n  {\n    v3 = 0LL;\n    do\n    {\n      v4 = *(unsigned __int8 *)(a1 + v3);\n      v5 = *(_BYTE *)(a1 + v3);\n      if ( (unsigned int)(v4 - 65) <= 0x19 )\n      {\n        LOBYTE(v4) = v4 + 32;\n        v5 += 32;\n      }\n      v6 = *(unsigned __int8 *)(a2 + v3);\n      v7 = *(_BYTE *)(a2 + v3);\n      if ( (unsigned int)(v6 - 65) <= 0x19 )\n      {\n        LOBYTE(v6) = v6 + 32;\n        v7 += 32;\n      }\n      if ( !v5 )\n        break;\n      ++v3;\n    }\n    while ( v5 == v7 );\n    return (unsigned __int8)v4 - (unsigned int)(unsigned __int8)v6;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4091B0",
            "funcStartAddr": "0x4091b0",
            "funcEndAddr": "0x40920d",
            "decompiledFuncCode": "__int64 __fastcall sub_4091B0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_40B800(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n    return 0xFFFFFFFFLL;\n  }\n  if ( !(_DWORD)result )\n    return result;\n  if ( v1 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)-(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_409210",
            "funcStartAddr": "0x409210",
            "funcEndAddr": "0x40926e",
            "decompiledFuncCode": "bool __fastcall sub_409210(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409270",
            "funcStartAddr": "0x409270",
            "funcEndAddr": "0x4097d2",
            "decompiledFuncCode": "const char *sub_409270()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_40B800(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_40B800(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_4097E0",
            "funcStartAddr": "0x4097e0",
            "funcEndAddr": "0x409801",
            "decompiledFuncCode": "int __fastcall sub_4097E0(wint_t wc)\n{\n  int result; // eax\n\n  result = wcwidth(wc);\n  if ( result < 0 )\n    return iswcntrl(wc) == 0;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409810",
            "funcStartAddr": "0x409810",
            "funcEndAddr": "0x409866",
            "decompiledFuncCode": "__int64 __fastcall sub_409810(__int64 a1, __int64 a2)\n{\n  const void *v3; // rax\n  const void *v4; // rsi\n  size_t v5; // rdx\n  __int64 result; // rax\n  void *v7; // rax\n\n  v3 = (const void *)(a2 + 24);\n  v4 = *(const void **)a2;\n  v5 = *(_QWORD *)(a2 + 8);\n  if ( v4 == v3 )\n  {\n    v7 = memcpy((void *)(a1 + 24), v4, v5);\n    v5 = *(_QWORD *)(a2 + 8);\n    *(_QWORD *)a1 = v7;\n  }\n  else\n  {\n    *(_QWORD *)a1 = v4;\n  }\n  result = *(unsigned __int8 *)(a2 + 16);\n  *(_QWORD *)(a1 + 8) = v5;\n  *(_BYTE *)(a1 + 16) = result;\n  if ( (_BYTE)result )\n  {\n    result = *(unsigned int *)(a2 + 20);\n    *(_DWORD *)(a1 + 20) = result;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409890",
            "funcStartAddr": "0x409890",
            "funcEndAddr": "0x409a13",
            "decompiledFuncCode": "__int64 __fastcall sub_409890(unsigned __int8 *a1, __int64 a2, unsigned __int64 a3, _QWORD *a4)\n{\n  unsigned __int64 v5; // rdi\n  void *v6; // rsp\n  __int64 *v7; // rdi\n  __int64 v8; // r8\n  __int64 v9; // r9\n  char v10; // al\n  __int64 v11; // r8\n  unsigned __int8 *v12; // r9\n  __int64 v13; // rax\n  __int64 v14; // r10\n  __int64 v16; // rax\n  __int64 v17; // [rsp+0h] [rbp-30h] BYREF\n  _QWORD *v18; // [rsp+8h] [rbp-28h]\n  __int64 v19[3]; // [rsp+10h] [rbp-20h] BYREF\n\n  v5 = 8 * a3;\n  if ( (a3 & 0x1000000000000000LL) != 0 || a3 >> 61 )\n    return 0LL;\n  if ( v5 > 0xFAF )\n  {\n    v18 = a4;\n    v19[0] = a3;\n    v19[1] = a2;\n    v16 = sub_40B920();\n    a4 = v18;\n    a3 = v19[0];\n    v7 = (__int64 *)v16;\n    if ( v16 )\n      goto LABEL_5;\n    return 0LL;\n  }\n  v6 = alloca(v5 + 24);\n  v7 = v19;\n  if ( &v17 == (__int64 *)-16LL )\n    return 0LL;\nLABEL_5:\n  v7[1] = 1LL;\n  v8 = 0LL;\n  v9 = 2LL;\n  if ( a3 > 2 )\n  {\n    do\n    {\n      v10 = *(_BYTE *)(a2 + v9 - 1);\n      if ( v10 == *(_BYTE *)(a2 + v8) )\n      {\nLABEL_23:\n        ++v8;\n        v7[v9] = v9 - v8;\n      }\n      else\n      {\n        while ( v8 )\n        {\n          v8 -= v7[v8];\n          if ( *(_BYTE *)(a2 + v8) == v10 )\n            goto LABEL_23;\n        }\n        v7[v9] = v9;\n        v8 = 0LL;\n      }\n      ++v9;\n    }\n    while ( a3 != v9 );\n  }\n  *a4 = 0LL;\n  v11 = *a1;\n  v12 = a1;\n  v13 = 0LL;\nLABEL_13:\n  while ( 2 )\n  {\n    if ( (_BYTE)v11 )\n    {\n      while ( *(_BYTE *)(a2 + v13) != (_BYTE)v11 )\n      {\n        if ( !v13 )\n        {\n          v11 = v12[1];\n          ++a1;\n          ++v12;\n          goto LABEL_13;\n        }\n        v14 = v7[v13];\n        a1 += v14;\n        v13 -= v14;\n      }\n      if ( a3 != ++v13 )\n      {\n        v11 = *++v12;\n        continue;\n      }\n      *a4 = a1;\n    }\n    break;\n  }\n  sub_40B990(v7, a2, a3, a4, v11, v12);\n  return 1LL;\n}\n"
        },
        {
            "funcName": "sub_409A20",
            "funcStartAddr": "0x409a20",
            "funcEndAddr": "0x409a3d",
            "decompiledFuncCode": "void __noreturn sub_409A20()\n{\n  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n}\n"
        },
        {
            "funcName": "sub_409A40",
            "funcStartAddr": "0x401a63",
            "funcEndAddr": "0x401a68",
            "decompiledFuncCode": "__int64 __fastcall sub_409A40(char *a1, unsigned __int64 a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 *v5; // r12\n  unsigned __int64 *v6; // rbx\n  unsigned __int64 *v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  __int64 mb_cur_max; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  unsigned __int64 *v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  unsigned __int64 *v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char v24; // al\n  unsigned __int64 *v25; // rax\n  size_t v26; // rdx\n  wchar_t v27; // eax\n  unsigned int v28; // eax\n  __int64 v29; // rdx\n  void *v31; // rax\n  size_t v32; // rax\n  __int64 v33; // rax\n  char *v34; // rbx\n  __int64 v35; // rax\n  size_t v36; // rax\n  unsigned __int64 v37; // rbx\n  __int64 v38; // r14\n  wchar_t v39; // eax\n  __int64 v40; // rax\n  char *v41; // r15\n  __int64 v42; // rax\n  size_t v43; // rax\n  size_t v44; // rax\n  __int64 v45; // rax\n  char *v46; // rbx\n  __int64 v47; // rax\n  size_t v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  unsigned __int64 v52; // [rsp+10h] [rbp-100h] BYREF\n  mbstate_t *v53; // [rsp+18h] [rbp-F8h]\n  char v54; // [rsp+20h] [rbp-F0h]\n  mbstate_t v55; // [rsp+24h] [rbp-ECh] BYREF\n  char v56; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v59; // [rsp+40h] [rbp-D0h]\n  unsigned int v60; // [rsp+44h] [rbp-CCh] BYREF\n  __int64 v61; // [rsp+48h] [rbp-C8h] BYREF\n  char v62; // [rsp+60h] [rbp-B0h]\n  mbstate_t v63; // [rsp+64h] [rbp-ACh] BYREF\n  char v64; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v66; // [rsp+78h] [rbp-98h]\n  char v67; // [rsp+80h] [rbp-90h]\n  wchar_t v68[7]; // [rsp+84h] [rbp-8Ch] BYREF\n  char v69; // [rsp+A0h] [rbp-70h]\n  mbstate_t v70; // [rsp+A4h] [rbp-6Ch] BYREF\n  char v71; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v73; // [rsp+B8h] [rbp-58h]\n  char v74; // [rsp+C0h] [rbp-50h]\n  wchar_t v75[19]; // [rsp+C4h] [rbp-4Ch] BYREF\n\n  v52 = sub_40BA20((char *)a2);\n  if ( ((56 * v52) & 0x8000000000000000LL) != 0LL || !is_mul_ok(v52, 0x38uLL) )\n    return 0LL;\n  if ( 56 * v52 > 0xFAF )\n  {\n    v5 = (unsigned __int64 *)sub_40B920();\n  }\n  else\n  {\n    v4 = alloca(56 * v52 + 24);\n    v5 = &v52;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = (void *)a2;\n  v6 = v5;\n  v54 = 0;\n  v56 = 0;\n  v55 = 0LL;\n  v7 = &v5[6 * v52];\n  while ( 1 )\n  {\n    if ( !v54 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( (((unsigned int)dword_410680[(*(_BYTE *)src >> 5) & 7] >> v8) & 1) != 0 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v59 = 1;\n        v60 = v9;\n        v10 = v9;\n        v56 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit(&v55) )\n        goto LABEL_115;\n      v54 = 1;\n    }\n    mb_cur_max = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_407340((__int64)src, mb_cur_max);\n    a2 = (unsigned __int64)v14;\n    v16 = sub_408FC0((wchar_t *)&v60, v14, v15, &v55);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v59 = 0;\n      v56 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v32 = strlen((const char *)src);\n    v59 = 0;\n    n = v32;\n    v11 = 0;\n    v56 = 1;\nLABEL_10:\n    a2 = (unsigned __int64)src;\n    v12 = n;\n    if ( src == &v61 )\n    {\n      v31 = memcpy(v6 + 3, src, n);\n      v12 = n;\n      *v6 = (unsigned __int64)v31;\n      v11 = v59;\n    }\n    else\n    {\n      *v6 = (unsigned __int64)src;\n    }\n    v6[1] = v12;\n    *((_BYTE *)v6 + 16) = v11;\n    if ( v11 )\n      *((_DWORD *)v6 + 5) = v60;\n    src = (char *)src + v12;\n    v6 += 6;\n    v56 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v60 )\n      goto LABEL_116;\n  }\n  v59 = 1;\n  if ( mbsinit(&v55) )\n    v54 = 0;\n  v10 = v60;\n  v56 = 1;\n  if ( v60 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 6;\n  v19 = v52 <= 2;\n  v7[1] = 1LL;\n  v53 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *((_BYTE *)v18 + 16);\n      while ( 1 )\n      {\n        v21 = &v5[6 * v17];\n        if ( v20 && *((_BYTE *)v21 + 16) )\n        {\n          if ( *((_DWORD *)v18 + 5) == *((_DWORD *)v21 + 5) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v22 = v18[1];\n          if ( v22 == v21[1] )\n          {\n            a2 = *v21;\n            if ( !memcmp((const void *)*v18, (const void *)*v21, v22) )\n            {\nLABEL_33:\n              ++v17;\n              v7[(_QWORD)v53] = (unsigned __int64)v53 - v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= v7[v17];\n      }\n      v7[(_QWORD)v53] = (unsigned __int64)v53;\nLABEL_34:\n      v53 = (mbstate_t *)((char *)v53 + 1);\n      v18 += 6;\n    }\n    while ( (mbstate_t *)v52 != v53 );\n  }\n  v62 = 0;\n  v23 = 0LL;\n  v64 = 0;\n  *a3 = 0LL;\n  v69 = 0;\n  v63 = 0LL;\n  v70 = 0LL;\n  v71 = 0;\n  v53 = &v63;\n  s = a1;\n  s2 = a1;\n  v24 = 0;\nLABEL_36:\n  if ( v24 )\n  {\n    if ( !v74 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v69 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( (((unsigned int)dword_410680[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1) != 0 )\n        {\n          v73 = 1LL;\n          v28 = *(char *)s2;\n          v74 = 1;\n          v75[0] = v28;\n          v71 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(&v70) )\n          goto LABEL_115;\n        v69 = 1;\n      }\n      v33 = __ctype_get_mb_cur_max();\n      v34 = (char *)s2;\n      v35 = sub_407340((__int64)s2, v33);\n      a2 = (unsigned __int64)v34;\n      v36 = sub_408FC0(v75, v34, v35, &v70);\n      v73 = v36;\n      switch ( v36 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          v73 = 1LL;\n          v74 = 0;\n          v71 = 1;\nLABEL_38:\n          v25 = &v5[6 * v23];\n          goto LABEL_39;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v49 = strlen((const char *)s2);\n          v74 = 0;\n          v73 = v49;\n          v71 = 1;\n          goto LABEL_38;\n        case 0uLL:\n          v73 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_114;\n          if ( v75[0] )\n            goto LABEL_116;\n          break;\n      }\n      v74 = 1;\n      if ( mbsinit(&v70) )\n        v69 = 0;\n      v71 = 1;\nLABEL_50:\n      v29 = (unsigned int)v75[0];\n      if ( !v75[0] )\n        goto LABEL_55;\n      v25 = &v5[6 * v23];\n      if ( *((_BYTE *)v25 + 16) )\n      {\n        if ( *((_DWORD *)v25 + 5) != v75[0] )\n        {\nLABEL_40:\n          if ( !v23 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v26 = v25[1];\n        if ( v26 != v73 )\n          goto LABEL_40;\n        a2 = (unsigned __int64)s2;\n        if ( memcmp((const void *)*v25, s2, v26) )\n        {\n          if ( !v23 )\n          {\nLABEL_41:\n            if ( v64 )\n            {\n              if ( v67 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v62 )\n            {\n              if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n              {\n                v66 = 1LL;\n                v27 = *s;\n                v67 = 1;\n                v68[0] = v27;\n                v64 = 1;\nLABEL_45:\n                if ( !v68[0] )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v66;\n                s2 = (char *)s2 + v73;\n                v64 = 0;\n                v71 = 0;\n                continue;\n              }\n              if ( mbsinit(v53) )\n              {\n                v62 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v45 = __ctype_get_mb_cur_max();\n            v46 = s;\n            v47 = sub_407340((__int64)s, v45);\n            a2 = (unsigned __int64)v46;\n            v48 = sub_408FC0(v68, v46, v47, &v63);\n            v66 = v48;\n            if ( v48 == -1LL )\n            {\n              v66 = 1LL;\n              v67 = 0;\n              goto LABEL_46;\n            }\n            if ( v48 == -2LL )\n            {\n              v50 = strlen(s);\n              v67 = 0;\n              v66 = v50;\n              goto LABEL_46;\n            }\n            if ( v48 )\n            {\nLABEL_105:\n              v67 = 1;\n              if ( mbsinit(&v63) )\n                v62 = 0;\n              v64 = 1;\n              goto LABEL_45;\n            }\n            v66 = 1LL;\n            if ( !*s )\n            {\n              if ( !v68[0] )\n                goto LABEL_105;\nLABEL_116:\n              sub_409A20();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v37 = v7[v23];\n          v24 = v71;\n          v38 = v23 - v37;\n          if ( !v37 )\n            goto LABEL_36;\n          if ( !v64 )\n            goto LABEL_79;\n          if ( v67 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v64 = 0;\n              s += v66;\n              if ( !--v37 )\n              {\n                v24 = v71;\n                v23 = v38;\n                goto LABEL_36;\n              }\nLABEL_79:\n              if ( !v62 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> v8) & 1) != 0 )\n                {\n                  v66 = 1LL;\n                  v39 = *s;\n                  v67 = 1;\n                  v68[0] = v39;\n                  v64 = 1;\nLABEL_82:\n                  a2 = (unsigned int)v68[0];\n                  if ( !v68[0] )\n                    goto LABEL_118;\n                  continue;\n                }\n                if ( !mbsinit(v53) )\n                  goto LABEL_115;\n                v62 = 1;\n              }\n              break;\n            }\n            v40 = __ctype_get_mb_cur_max();\n            v41 = s;\n            v42 = sub_407340((__int64)s, v40);\n            a2 = (unsigned __int64)v41;\n            v43 = sub_408FC0(v68, v41, v42, &v63);\n            v66 = v43;\n            switch ( v43 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v66 = 1LL;\n                v67 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v44 = strlen(s);\n                v67 = 0;\n                v66 = v44;\n                continue;\n              case 0uLL:\n                v66 = 1LL;\n                if ( *s )\n                  goto LABEL_114;\n                if ( v68[0] )\n                  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v67 = 1;\n          if ( mbsinit(&v63) )\n            v62 = 0;\n          v64 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v73;\n    v71 = 0;\n    if ( v52 != v23 )\n      continue;\n    break;\n  }\n  *a3 = s;\nLABEL_55:\n  sub_40B990(v5, a2, v29, v8, v10, v3);\n  return 1LL;\n}\n\n__int64 __fastcall sub_409A40(char *a1, unsigned __int64 a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 *v5; // r12\n  unsigned __int64 *v6; // rbx\n  unsigned __int64 *v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  __int64 mb_cur_max; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  unsigned __int64 *v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  unsigned __int64 *v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char v24; // al\n  unsigned __int64 *v25; // rax\n  size_t v26; // rdx\n  wchar_t v27; // eax\n  unsigned int v28; // eax\n  __int64 v29; // rdx\n  void *v31; // rax\n  size_t v32; // rax\n  __int64 v33; // rax\n  char *v34; // rbx\n  __int64 v35; // rax\n  size_t v36; // rax\n  unsigned __int64 v37; // rbx\n  __int64 v38; // r14\n  wchar_t v39; // eax\n  __int64 v40; // rax\n  char *v41; // r15\n  __int64 v42; // rax\n  size_t v43; // rax\n  size_t v44; // rax\n  __int64 v45; // rax\n  char *v46; // rbx\n  __int64 v47; // rax\n  size_t v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  unsigned __int64 v52; // [rsp+10h] [rbp-100h] BYREF\n  mbstate_t *v53; // [rsp+18h] [rbp-F8h]\n  char v54; // [rsp+20h] [rbp-F0h]\n  mbstate_t v55; // [rsp+24h] [rbp-ECh] BYREF\n  char v56; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v59; // [rsp+40h] [rbp-D0h]\n  unsigned int v60; // [rsp+44h] [rbp-CCh] BYREF\n  __int64 v61; // [rsp+48h] [rbp-C8h] BYREF\n  char v62; // [rsp+60h] [rbp-B0h]\n  mbstate_t v63; // [rsp+64h] [rbp-ACh] BYREF\n  char v64; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v66; // [rsp+78h] [rbp-98h]\n  char v67; // [rsp+80h] [rbp-90h]\n  wchar_t v68[7]; // [rsp+84h] [rbp-8Ch] BYREF\n  char v69; // [rsp+A0h] [rbp-70h]\n  mbstate_t v70; // [rsp+A4h] [rbp-6Ch] BYREF\n  char v71; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v73; // [rsp+B8h] [rbp-58h]\n  char v74; // [rsp+C0h] [rbp-50h]\n  wchar_t v75[19]; // [rsp+C4h] [rbp-4Ch] BYREF\n\n  v52 = sub_40BA20((char *)a2);\n  if ( ((56 * v52) & 0x8000000000000000LL) != 0LL || !is_mul_ok(v52, 0x38uLL) )\n    return 0LL;\n  if ( 56 * v52 > 0xFAF )\n  {\n    v5 = (unsigned __int64 *)sub_40B920();\n  }\n  else\n  {\n    v4 = alloca(56 * v52 + 24);\n    v5 = &v52;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = (void *)a2;\n  v6 = v5;\n  v54 = 0;\n  v56 = 0;\n  v55 = 0LL;\n  v7 = &v5[6 * v52];\n  while ( 1 )\n  {\n    if ( !v54 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( (((unsigned int)dword_410680[(*(_BYTE *)src >> 5) & 7] >> v8) & 1) != 0 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v59 = 1;\n        v60 = v9;\n        v10 = v9;\n        v56 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit(&v55) )\n        goto LABEL_115;\n      v54 = 1;\n    }\n    mb_cur_max = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_407340((__int64)src, mb_cur_max);\n    a2 = (unsigned __int64)v14;\n    v16 = sub_408FC0((wchar_t *)&v60, v14, v15, &v55);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v59 = 0;\n      v56 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v32 = strlen((const char *)src);\n    v59 = 0;\n    n = v32;\n    v11 = 0;\n    v56 = 1;\nLABEL_10:\n    a2 = (unsigned __int64)src;\n    v12 = n;\n    if ( src == &v61 )\n    {\n      v31 = memcpy(v6 + 3, src, n);\n      v12 = n;\n      *v6 = (unsigned __int64)v31;\n      v11 = v59;\n    }\n    else\n    {\n      *v6 = (unsigned __int64)src;\n    }\n    v6[1] = v12;\n    *((_BYTE *)v6 + 16) = v11;\n    if ( v11 )\n      *((_DWORD *)v6 + 5) = v60;\n    src = (char *)src + v12;\n    v6 += 6;\n    v56 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v60 )\n      goto LABEL_116;\n  }\n  v59 = 1;\n  if ( mbsinit(&v55) )\n    v54 = 0;\n  v10 = v60;\n  v56 = 1;\n  if ( v60 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 6;\n  v19 = v52 <= 2;\n  v7[1] = 1LL;\n  v53 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *((_BYTE *)v18 + 16);\n      while ( 1 )\n      {\n        v21 = &v5[6 * v17];\n        if ( v20 && *((_BYTE *)v21 + 16) )\n        {\n          if ( *((_DWORD *)v18 + 5) == *((_DWORD *)v21 + 5) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v22 = v18[1];\n          if ( v22 == v21[1] )\n          {\n            a2 = *v21;\n            if ( !memcmp((const void *)*v18, (const void *)*v21, v22) )\n            {\nLABEL_33:\n              ++v17;\n              v7[(_QWORD)v53] = (unsigned __int64)v53 - v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= v7[v17];\n      }\n      v7[(_QWORD)v53] = (unsigned __int64)v53;\nLABEL_34:\n      v53 = (mbstate_t *)((char *)v53 + 1);\n      v18 += 6;\n    }\n    while ( (mbstate_t *)v52 != v53 );\n  }\n  v62 = 0;\n  v23 = 0LL;\n  v64 = 0;\n  *a3 = 0LL;\n  v69 = 0;\n  v63 = 0LL;\n  v70 = 0LL;\n  v71 = 0;\n  v53 = &v63;\n  s = a1;\n  s2 = a1;\n  v24 = 0;\nLABEL_36:\n  if ( v24 )\n  {\n    if ( !v74 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v69 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( (((unsigned int)dword_410680[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1) != 0 )\n        {\n          v73 = 1LL;\n          v28 = *(char *)s2;\n          v74 = 1;\n          v75[0] = v28;\n          v71 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(&v70) )\n          goto LABEL_115;\n        v69 = 1;\n      }\n      v33 = __ctype_get_mb_cur_max();\n      v34 = (char *)s2;\n      v35 = sub_407340((__int64)s2, v33);\n      a2 = (unsigned __int64)v34;\n      v36 = sub_408FC0(v75, v34, v35, &v70);\n      v73 = v36;\n      switch ( v36 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          v73 = 1LL;\n          v74 = 0;\n          v71 = 1;\nLABEL_38:\n          v25 = &v5[6 * v23];\n          goto LABEL_39;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v49 = strlen((const char *)s2);\n          v74 = 0;\n          v73 = v49;\n          v71 = 1;\n          goto LABEL_38;\n        case 0uLL:\n          v73 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_114;\n          if ( v75[0] )\n            goto LABEL_116;\n          break;\n      }\n      v74 = 1;\n      if ( mbsinit(&v70) )\n        v69 = 0;\n      v71 = 1;\nLABEL_50:\n      v29 = (unsigned int)v75[0];\n      if ( !v75[0] )\n        goto LABEL_55;\n      v25 = &v5[6 * v23];\n      if ( *((_BYTE *)v25 + 16) )\n      {\n        if ( *((_DWORD *)v25 + 5) != v75[0] )\n        {\nLABEL_40:\n          if ( !v23 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v26 = v25[1];\n        if ( v26 != v73 )\n          goto LABEL_40;\n        a2 = (unsigned __int64)s2;\n        if ( memcmp((const void *)*v25, s2, v26) )\n        {\n          if ( !v23 )\n          {\nLABEL_41:\n            if ( v64 )\n            {\n              if ( v67 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v62 )\n            {\n              if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n              {\n                v66 = 1LL;\n                v27 = *s;\n                v67 = 1;\n                v68[0] = v27;\n                v64 = 1;\nLABEL_45:\n                if ( !v68[0] )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v66;\n                s2 = (char *)s2 + v73;\n                v64 = 0;\n                v71 = 0;\n                continue;\n              }\n              if ( mbsinit(v53) )\n              {\n                v62 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v45 = __ctype_get_mb_cur_max();\n            v46 = s;\n            v47 = sub_407340((__int64)s, v45);\n            a2 = (unsigned __int64)v46;\n            v48 = sub_408FC0(v68, v46, v47, &v63);\n            v66 = v48;\n            if ( v48 == -1LL )\n            {\n              v66 = 1LL;\n              v67 = 0;\n              goto LABEL_46;\n            }\n            if ( v48 == -2LL )\n            {\n              v50 = strlen(s);\n              v67 = 0;\n              v66 = v50;\n              goto LABEL_46;\n            }\n            if ( v48 )\n            {\nLABEL_105:\n              v67 = 1;\n              if ( mbsinit(&v63) )\n                v62 = 0;\n              v64 = 1;\n              goto LABEL_45;\n            }\n            v66 = 1LL;\n            if ( !*s )\n            {\n              if ( !v68[0] )\n                goto LABEL_105;\nLABEL_116:\n              sub_409A20();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v37 = v7[v23];\n          v24 = v71;\n          v38 = v23 - v37;\n          if ( !v37 )\n            goto LABEL_36;\n          if ( !v64 )\n            goto LABEL_79;\n          if ( v67 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v64 = 0;\n              s += v66;\n              if ( !--v37 )\n              {\n                v24 = v71;\n                v23 = v38;\n                goto LABEL_36;\n              }\nLABEL_79:\n              if ( !v62 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> v8) & 1) != 0 )\n                {\n                  v66 = 1LL;\n                  v39 = *s;\n                  v67 = 1;\n                  v68[0] = v39;\n                  v64 = 1;\nLABEL_82:\n                  a2 = (unsigned int)v68[0];\n                  if ( !v68[0] )\n                    goto LABEL_118;\n                  continue;\n                }\n                if ( !mbsinit(v53) )\n                  goto LABEL_115;\n                v62 = 1;\n              }\n              break;\n            }\n            v40 = __ctype_get_mb_cur_max();\n            v41 = s;\n            v42 = sub_407340((__int64)s, v40);\n            a2 = (unsigned __int64)v41;\n            v43 = sub_408FC0(v68, v41, v42, &v63);\n            v66 = v43;\n            switch ( v43 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v66 = 1LL;\n                v67 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v44 = strlen(s);\n                v67 = 0;\n                v66 = v44;\n                continue;\n              case 0uLL:\n                v66 = 1LL;\n                if ( *s )\n                  goto LABEL_114;\n                if ( v68[0] )\n                  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v67 = 1;\n          if ( mbsinit(&v63) )\n            v62 = 0;\n          v64 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v73;\n    v71 = 0;\n    if ( v52 != v23 )\n      continue;\n    break;\n  }\n  *a3 = s;\nLABEL_55:\n  sub_40B990(v5, a2, v29, v8, v10, v3);\n  return 1LL;\n}\n"
        },
        {
            "funcName": "sub_409A40",
            "funcStartAddr": "0x401a63",
            "funcEndAddr": "0x401a68",
            "decompiledFuncCode": "__int64 __fastcall sub_409A40(char *a1, unsigned __int64 a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 *v5; // r12\n  unsigned __int64 *v6; // rbx\n  unsigned __int64 *v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  __int64 mb_cur_max; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  unsigned __int64 *v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  unsigned __int64 *v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char v24; // al\n  unsigned __int64 *v25; // rax\n  size_t v26; // rdx\n  wchar_t v27; // eax\n  unsigned int v28; // eax\n  __int64 v29; // rdx\n  void *v31; // rax\n  size_t v32; // rax\n  __int64 v33; // rax\n  char *v34; // rbx\n  __int64 v35; // rax\n  size_t v36; // rax\n  unsigned __int64 v37; // rbx\n  __int64 v38; // r14\n  wchar_t v39; // eax\n  __int64 v40; // rax\n  char *v41; // r15\n  __int64 v42; // rax\n  size_t v43; // rax\n  size_t v44; // rax\n  __int64 v45; // rax\n  char *v46; // rbx\n  __int64 v47; // rax\n  size_t v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  unsigned __int64 v52; // [rsp+10h] [rbp-100h] BYREF\n  mbstate_t *v53; // [rsp+18h] [rbp-F8h]\n  char v54; // [rsp+20h] [rbp-F0h]\n  mbstate_t v55; // [rsp+24h] [rbp-ECh] BYREF\n  char v56; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v59; // [rsp+40h] [rbp-D0h]\n  unsigned int v60; // [rsp+44h] [rbp-CCh] BYREF\n  __int64 v61; // [rsp+48h] [rbp-C8h] BYREF\n  char v62; // [rsp+60h] [rbp-B0h]\n  mbstate_t v63; // [rsp+64h] [rbp-ACh] BYREF\n  char v64; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v66; // [rsp+78h] [rbp-98h]\n  char v67; // [rsp+80h] [rbp-90h]\n  wchar_t v68[7]; // [rsp+84h] [rbp-8Ch] BYREF\n  char v69; // [rsp+A0h] [rbp-70h]\n  mbstate_t v70; // [rsp+A4h] [rbp-6Ch] BYREF\n  char v71; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v73; // [rsp+B8h] [rbp-58h]\n  char v74; // [rsp+C0h] [rbp-50h]\n  wchar_t v75[19]; // [rsp+C4h] [rbp-4Ch] BYREF\n\n  v52 = sub_40BA20((char *)a2);\n  if ( ((56 * v52) & 0x8000000000000000LL) != 0LL || !is_mul_ok(v52, 0x38uLL) )\n    return 0LL;\n  if ( 56 * v52 > 0xFAF )\n  {\n    v5 = (unsigned __int64 *)sub_40B920();\n  }\n  else\n  {\n    v4 = alloca(56 * v52 + 24);\n    v5 = &v52;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = (void *)a2;\n  v6 = v5;\n  v54 = 0;\n  v56 = 0;\n  v55 = 0LL;\n  v7 = &v5[6 * v52];\n  while ( 1 )\n  {\n    if ( !v54 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( (((unsigned int)dword_410680[(*(_BYTE *)src >> 5) & 7] >> v8) & 1) != 0 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v59 = 1;\n        v60 = v9;\n        v10 = v9;\n        v56 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit(&v55) )\n        goto LABEL_115;\n      v54 = 1;\n    }\n    mb_cur_max = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_407340((__int64)src, mb_cur_max);\n    a2 = (unsigned __int64)v14;\n    v16 = sub_408FC0((wchar_t *)&v60, v14, v15, &v55);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v59 = 0;\n      v56 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v32 = strlen((const char *)src);\n    v59 = 0;\n    n = v32;\n    v11 = 0;\n    v56 = 1;\nLABEL_10:\n    a2 = (unsigned __int64)src;\n    v12 = n;\n    if ( src == &v61 )\n    {\n      v31 = memcpy(v6 + 3, src, n);\n      v12 = n;\n      *v6 = (unsigned __int64)v31;\n      v11 = v59;\n    }\n    else\n    {\n      *v6 = (unsigned __int64)src;\n    }\n    v6[1] = v12;\n    *((_BYTE *)v6 + 16) = v11;\n    if ( v11 )\n      *((_DWORD *)v6 + 5) = v60;\n    src = (char *)src + v12;\n    v6 += 6;\n    v56 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v60 )\n      goto LABEL_116;\n  }\n  v59 = 1;\n  if ( mbsinit(&v55) )\n    v54 = 0;\n  v10 = v60;\n  v56 = 1;\n  if ( v60 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 6;\n  v19 = v52 <= 2;\n  v7[1] = 1LL;\n  v53 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *((_BYTE *)v18 + 16);\n      while ( 1 )\n      {\n        v21 = &v5[6 * v17];\n        if ( v20 && *((_BYTE *)v21 + 16) )\n        {\n          if ( *((_DWORD *)v18 + 5) == *((_DWORD *)v21 + 5) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v22 = v18[1];\n          if ( v22 == v21[1] )\n          {\n            a2 = *v21;\n            if ( !memcmp((const void *)*v18, (const void *)*v21, v22) )\n            {\nLABEL_33:\n              ++v17;\n              v7[(_QWORD)v53] = (unsigned __int64)v53 - v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= v7[v17];\n      }\n      v7[(_QWORD)v53] = (unsigned __int64)v53;\nLABEL_34:\n      v53 = (mbstate_t *)((char *)v53 + 1);\n      v18 += 6;\n    }\n    while ( (mbstate_t *)v52 != v53 );\n  }\n  v62 = 0;\n  v23 = 0LL;\n  v64 = 0;\n  *a3 = 0LL;\n  v69 = 0;\n  v63 = 0LL;\n  v70 = 0LL;\n  v71 = 0;\n  v53 = &v63;\n  s = a1;\n  s2 = a1;\n  v24 = 0;\nLABEL_36:\n  if ( v24 )\n  {\n    if ( !v74 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v69 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( (((unsigned int)dword_410680[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1) != 0 )\n        {\n          v73 = 1LL;\n          v28 = *(char *)s2;\n          v74 = 1;\n          v75[0] = v28;\n          v71 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(&v70) )\n          goto LABEL_115;\n        v69 = 1;\n      }\n      v33 = __ctype_get_mb_cur_max();\n      v34 = (char *)s2;\n      v35 = sub_407340((__int64)s2, v33);\n      a2 = (unsigned __int64)v34;\n      v36 = sub_408FC0(v75, v34, v35, &v70);\n      v73 = v36;\n      switch ( v36 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          v73 = 1LL;\n          v74 = 0;\n          v71 = 1;\nLABEL_38:\n          v25 = &v5[6 * v23];\n          goto LABEL_39;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v49 = strlen((const char *)s2);\n          v74 = 0;\n          v73 = v49;\n          v71 = 1;\n          goto LABEL_38;\n        case 0uLL:\n          v73 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_114;\n          if ( v75[0] )\n            goto LABEL_116;\n          break;\n      }\n      v74 = 1;\n      if ( mbsinit(&v70) )\n        v69 = 0;\n      v71 = 1;\nLABEL_50:\n      v29 = (unsigned int)v75[0];\n      if ( !v75[0] )\n        goto LABEL_55;\n      v25 = &v5[6 * v23];\n      if ( *((_BYTE *)v25 + 16) )\n      {\n        if ( *((_DWORD *)v25 + 5) != v75[0] )\n        {\nLABEL_40:\n          if ( !v23 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v26 = v25[1];\n        if ( v26 != v73 )\n          goto LABEL_40;\n        a2 = (unsigned __int64)s2;\n        if ( memcmp((const void *)*v25, s2, v26) )\n        {\n          if ( !v23 )\n          {\nLABEL_41:\n            if ( v64 )\n            {\n              if ( v67 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v62 )\n            {\n              if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n              {\n                v66 = 1LL;\n                v27 = *s;\n                v67 = 1;\n                v68[0] = v27;\n                v64 = 1;\nLABEL_45:\n                if ( !v68[0] )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v66;\n                s2 = (char *)s2 + v73;\n                v64 = 0;\n                v71 = 0;\n                continue;\n              }\n              if ( mbsinit(v53) )\n              {\n                v62 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v45 = __ctype_get_mb_cur_max();\n            v46 = s;\n            v47 = sub_407340((__int64)s, v45);\n            a2 = (unsigned __int64)v46;\n            v48 = sub_408FC0(v68, v46, v47, &v63);\n            v66 = v48;\n            if ( v48 == -1LL )\n            {\n              v66 = 1LL;\n              v67 = 0;\n              goto LABEL_46;\n            }\n            if ( v48 == -2LL )\n            {\n              v50 = strlen(s);\n              v67 = 0;\n              v66 = v50;\n              goto LABEL_46;\n            }\n            if ( v48 )\n            {\nLABEL_105:\n              v67 = 1;\n              if ( mbsinit(&v63) )\n                v62 = 0;\n              v64 = 1;\n              goto LABEL_45;\n            }\n            v66 = 1LL;\n            if ( !*s )\n            {\n              if ( !v68[0] )\n                goto LABEL_105;\nLABEL_116:\n              sub_409A20();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v37 = v7[v23];\n          v24 = v71;\n          v38 = v23 - v37;\n          if ( !v37 )\n            goto LABEL_36;\n          if ( !v64 )\n            goto LABEL_79;\n          if ( v67 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v64 = 0;\n              s += v66;\n              if ( !--v37 )\n              {\n                v24 = v71;\n                v23 = v38;\n                goto LABEL_36;\n              }\nLABEL_79:\n              if ( !v62 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> v8) & 1) != 0 )\n                {\n                  v66 = 1LL;\n                  v39 = *s;\n                  v67 = 1;\n                  v68[0] = v39;\n                  v64 = 1;\nLABEL_82:\n                  a2 = (unsigned int)v68[0];\n                  if ( !v68[0] )\n                    goto LABEL_118;\n                  continue;\n                }\n                if ( !mbsinit(v53) )\n                  goto LABEL_115;\n                v62 = 1;\n              }\n              break;\n            }\n            v40 = __ctype_get_mb_cur_max();\n            v41 = s;\n            v42 = sub_407340((__int64)s, v40);\n            a2 = (unsigned __int64)v41;\n            v43 = sub_408FC0(v68, v41, v42, &v63);\n            v66 = v43;\n            switch ( v43 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v66 = 1LL;\n                v67 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v44 = strlen(s);\n                v67 = 0;\n                v66 = v44;\n                continue;\n              case 0uLL:\n                v66 = 1LL;\n                if ( *s )\n                  goto LABEL_114;\n                if ( v68[0] )\n                  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v67 = 1;\n          if ( mbsinit(&v63) )\n            v62 = 0;\n          v64 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v73;\n    v71 = 0;\n    if ( v52 != v23 )\n      continue;\n    break;\n  }\n  *a3 = s;\nLABEL_55:\n  sub_40B990(v5, a2, v29, v8, v10, v3);\n  return 1LL;\n}\n\n__int64 __fastcall sub_409A40(char *a1, unsigned __int64 a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 *v5; // r12\n  unsigned __int64 *v6; // rbx\n  unsigned __int64 *v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  __int64 mb_cur_max; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  unsigned __int64 *v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  unsigned __int64 *v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char v24; // al\n  unsigned __int64 *v25; // rax\n  size_t v26; // rdx\n  wchar_t v27; // eax\n  unsigned int v28; // eax\n  __int64 v29; // rdx\n  void *v31; // rax\n  size_t v32; // rax\n  __int64 v33; // rax\n  char *v34; // rbx\n  __int64 v35; // rax\n  size_t v36; // rax\n  unsigned __int64 v37; // rbx\n  __int64 v38; // r14\n  wchar_t v39; // eax\n  __int64 v40; // rax\n  char *v41; // r15\n  __int64 v42; // rax\n  size_t v43; // rax\n  size_t v44; // rax\n  __int64 v45; // rax\n  char *v46; // rbx\n  __int64 v47; // rax\n  size_t v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  unsigned __int64 v52; // [rsp+10h] [rbp-100h] BYREF\n  mbstate_t *v53; // [rsp+18h] [rbp-F8h]\n  char v54; // [rsp+20h] [rbp-F0h]\n  mbstate_t v55; // [rsp+24h] [rbp-ECh] BYREF\n  char v56; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v59; // [rsp+40h] [rbp-D0h]\n  unsigned int v60; // [rsp+44h] [rbp-CCh] BYREF\n  __int64 v61; // [rsp+48h] [rbp-C8h] BYREF\n  char v62; // [rsp+60h] [rbp-B0h]\n  mbstate_t v63; // [rsp+64h] [rbp-ACh] BYREF\n  char v64; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v66; // [rsp+78h] [rbp-98h]\n  char v67; // [rsp+80h] [rbp-90h]\n  wchar_t v68[7]; // [rsp+84h] [rbp-8Ch] BYREF\n  char v69; // [rsp+A0h] [rbp-70h]\n  mbstate_t v70; // [rsp+A4h] [rbp-6Ch] BYREF\n  char v71; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v73; // [rsp+B8h] [rbp-58h]\n  char v74; // [rsp+C0h] [rbp-50h]\n  wchar_t v75[19]; // [rsp+C4h] [rbp-4Ch] BYREF\n\n  v52 = sub_40BA20((char *)a2);\n  if ( ((56 * v52) & 0x8000000000000000LL) != 0LL || !is_mul_ok(v52, 0x38uLL) )\n    return 0LL;\n  if ( 56 * v52 > 0xFAF )\n  {\n    v5 = (unsigned __int64 *)sub_40B920();\n  }\n  else\n  {\n    v4 = alloca(56 * v52 + 24);\n    v5 = &v52;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = (void *)a2;\n  v6 = v5;\n  v54 = 0;\n  v56 = 0;\n  v55 = 0LL;\n  v7 = &v5[6 * v52];\n  while ( 1 )\n  {\n    if ( !v54 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( (((unsigned int)dword_410680[(*(_BYTE *)src >> 5) & 7] >> v8) & 1) != 0 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v59 = 1;\n        v60 = v9;\n        v10 = v9;\n        v56 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit(&v55) )\n        goto LABEL_115;\n      v54 = 1;\n    }\n    mb_cur_max = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_407340((__int64)src, mb_cur_max);\n    a2 = (unsigned __int64)v14;\n    v16 = sub_408FC0((wchar_t *)&v60, v14, v15, &v55);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v59 = 0;\n      v56 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v32 = strlen((const char *)src);\n    v59 = 0;\n    n = v32;\n    v11 = 0;\n    v56 = 1;\nLABEL_10:\n    a2 = (unsigned __int64)src;\n    v12 = n;\n    if ( src == &v61 )\n    {\n      v31 = memcpy(v6 + 3, src, n);\n      v12 = n;\n      *v6 = (unsigned __int64)v31;\n      v11 = v59;\n    }\n    else\n    {\n      *v6 = (unsigned __int64)src;\n    }\n    v6[1] = v12;\n    *((_BYTE *)v6 + 16) = v11;\n    if ( v11 )\n      *((_DWORD *)v6 + 5) = v60;\n    src = (char *)src + v12;\n    v6 += 6;\n    v56 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v60 )\n      goto LABEL_116;\n  }\n  v59 = 1;\n  if ( mbsinit(&v55) )\n    v54 = 0;\n  v10 = v60;\n  v56 = 1;\n  if ( v60 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 6;\n  v19 = v52 <= 2;\n  v7[1] = 1LL;\n  v53 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *((_BYTE *)v18 + 16);\n      while ( 1 )\n      {\n        v21 = &v5[6 * v17];\n        if ( v20 && *((_BYTE *)v21 + 16) )\n        {\n          if ( *((_DWORD *)v18 + 5) == *((_DWORD *)v21 + 5) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v22 = v18[1];\n          if ( v22 == v21[1] )\n          {\n            a2 = *v21;\n            if ( !memcmp((const void *)*v18, (const void *)*v21, v22) )\n            {\nLABEL_33:\n              ++v17;\n              v7[(_QWORD)v53] = (unsigned __int64)v53 - v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= v7[v17];\n      }\n      v7[(_QWORD)v53] = (unsigned __int64)v53;\nLABEL_34:\n      v53 = (mbstate_t *)((char *)v53 + 1);\n      v18 += 6;\n    }\n    while ( (mbstate_t *)v52 != v53 );\n  }\n  v62 = 0;\n  v23 = 0LL;\n  v64 = 0;\n  *a3 = 0LL;\n  v69 = 0;\n  v63 = 0LL;\n  v70 = 0LL;\n  v71 = 0;\n  v53 = &v63;\n  s = a1;\n  s2 = a1;\n  v24 = 0;\nLABEL_36:\n  if ( v24 )\n  {\n    if ( !v74 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v69 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( (((unsigned int)dword_410680[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1) != 0 )\n        {\n          v73 = 1LL;\n          v28 = *(char *)s2;\n          v74 = 1;\n          v75[0] = v28;\n          v71 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(&v70) )\n          goto LABEL_115;\n        v69 = 1;\n      }\n      v33 = __ctype_get_mb_cur_max();\n      v34 = (char *)s2;\n      v35 = sub_407340((__int64)s2, v33);\n      a2 = (unsigned __int64)v34;\n      v36 = sub_408FC0(v75, v34, v35, &v70);\n      v73 = v36;\n      switch ( v36 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          v73 = 1LL;\n          v74 = 0;\n          v71 = 1;\nLABEL_38:\n          v25 = &v5[6 * v23];\n          goto LABEL_39;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v49 = strlen((const char *)s2);\n          v74 = 0;\n          v73 = v49;\n          v71 = 1;\n          goto LABEL_38;\n        case 0uLL:\n          v73 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_114;\n          if ( v75[0] )\n            goto LABEL_116;\n          break;\n      }\n      v74 = 1;\n      if ( mbsinit(&v70) )\n        v69 = 0;\n      v71 = 1;\nLABEL_50:\n      v29 = (unsigned int)v75[0];\n      if ( !v75[0] )\n        goto LABEL_55;\n      v25 = &v5[6 * v23];\n      if ( *((_BYTE *)v25 + 16) )\n      {\n        if ( *((_DWORD *)v25 + 5) != v75[0] )\n        {\nLABEL_40:\n          if ( !v23 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v26 = v25[1];\n        if ( v26 != v73 )\n          goto LABEL_40;\n        a2 = (unsigned __int64)s2;\n        if ( memcmp((const void *)*v25, s2, v26) )\n        {\n          if ( !v23 )\n          {\nLABEL_41:\n            if ( v64 )\n            {\n              if ( v67 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v62 )\n            {\n              if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n              {\n                v66 = 1LL;\n                v27 = *s;\n                v67 = 1;\n                v68[0] = v27;\n                v64 = 1;\nLABEL_45:\n                if ( !v68[0] )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v66;\n                s2 = (char *)s2 + v73;\n                v64 = 0;\n                v71 = 0;\n                continue;\n              }\n              if ( mbsinit(v53) )\n              {\n                v62 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v45 = __ctype_get_mb_cur_max();\n            v46 = s;\n            v47 = sub_407340((__int64)s, v45);\n            a2 = (unsigned __int64)v46;\n            v48 = sub_408FC0(v68, v46, v47, &v63);\n            v66 = v48;\n            if ( v48 == -1LL )\n            {\n              v66 = 1LL;\n              v67 = 0;\n              goto LABEL_46;\n            }\n            if ( v48 == -2LL )\n            {\n              v50 = strlen(s);\n              v67 = 0;\n              v66 = v50;\n              goto LABEL_46;\n            }\n            if ( v48 )\n            {\nLABEL_105:\n              v67 = 1;\n              if ( mbsinit(&v63) )\n                v62 = 0;\n              v64 = 1;\n              goto LABEL_45;\n            }\n            v66 = 1LL;\n            if ( !*s )\n            {\n              if ( !v68[0] )\n                goto LABEL_105;\nLABEL_116:\n              sub_409A20();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v37 = v7[v23];\n          v24 = v71;\n          v38 = v23 - v37;\n          if ( !v37 )\n            goto LABEL_36;\n          if ( !v64 )\n            goto LABEL_79;\n          if ( v67 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v64 = 0;\n              s += v66;\n              if ( !--v37 )\n              {\n                v24 = v71;\n                v23 = v38;\n                goto LABEL_36;\n              }\nLABEL_79:\n              if ( !v62 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> v8) & 1) != 0 )\n                {\n                  v66 = 1LL;\n                  v39 = *s;\n                  v67 = 1;\n                  v68[0] = v39;\n                  v64 = 1;\nLABEL_82:\n                  a2 = (unsigned int)v68[0];\n                  if ( !v68[0] )\n                    goto LABEL_118;\n                  continue;\n                }\n                if ( !mbsinit(v53) )\n                  goto LABEL_115;\n                v62 = 1;\n              }\n              break;\n            }\n            v40 = __ctype_get_mb_cur_max();\n            v41 = s;\n            v42 = sub_407340((__int64)s, v40);\n            a2 = (unsigned __int64)v41;\n            v43 = sub_408FC0(v68, v41, v42, &v63);\n            v66 = v43;\n            switch ( v43 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v66 = 1LL;\n                v67 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v44 = strlen(s);\n                v67 = 0;\n                v66 = v44;\n                continue;\n              case 0uLL:\n                v66 = 1LL;\n                if ( *s )\n                  goto LABEL_114;\n                if ( v68[0] )\n                  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v67 = 1;\n          if ( mbsinit(&v63) )\n            v62 = 0;\n          v64 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v73;\n    v71 = 0;\n    if ( v52 != v23 )\n      continue;\n    break;\n  }\n  *a3 = s;\nLABEL_55:\n  sub_40B990(v5, a2, v29, v8, v10, v3);\n  return 1LL;\n}\n"
        },
        {
            "funcName": "sub_40A420",
            "funcStartAddr": "0x401a68",
            "funcEndAddr": "0x401a6d",
            "decompiledFuncCode": "size_t __fastcall sub_40A420(char *a1, char *a2)\n{\n  char *v3; // rbp\n  char v4; // r15\n  size_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  char *v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  char v16; // bp\n  wchar_t v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  char *v20; // rdi\n  char *v21; // rdx\n  char v22; // si\n  char v23; // cl\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rbx\n  char v26; // r14\n  __int32 v27; // eax\n  wchar_t v28; // ecx\n  __m128i si128; // xmm1\n  __m128i v30; // xmm0\n  __m128i v31; // xmm2\n  __m128i v32; // xmm3\n  unsigned int v33; // eax\n  wchar_t v34; // eax\n  int v35; // eax\n  int v36; // eax\n  bool v37; // al\n  __int64 v38; // rax\n  char *v39; // r15\n  __int64 v40; // rax\n  size_t v41; // rax\n  size_t v42; // r15\n  __int64 v43; // rax\n  char *v44; // r15\n  __int64 v45; // rax\n  void *v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  void *v51; // rax\n  unsigned __int64 v52; // r14\n  wchar_t v53; // eax\n  __int8 v54; // dl\n  __int64 v55; // rax\n  char *v56; // r15\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  size_t v60; // rax\n  wchar_t v61; // eax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  __int64 v65; // rax\n  char *v66; // r14\n  __int64 v67; // rax\n  size_t v68; // rax\n  __int64 mb_cur_max; // rax\n  char *v70; // r12\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  size_t v75; // rax\n  char *v76; // [rsp+0h] [rbp-188h]\n  char *v77; // [rsp+0h] [rbp-188h]\n  char *v78; // [rsp+0h] [rbp-188h]\n  char *v79; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v80; // [rsp+8h] [rbp-180h]\n  mbstate_t v81; // [rsp+14h] [rbp-174h] BYREF\n  char v82; // [rsp+1Ch] [rbp-16Ch]\n  char *v83; // [rsp+20h] [rbp-168h]\n  size_t v84; // [rsp+28h] [rbp-160h]\n  char v85; // [rsp+30h] [rbp-158h]\n  wchar_t v86[7]; // [rsp+34h] [rbp-154h] BYREF\n  char v87; // [rsp+50h] [rbp-138h]\n  mbstate_t v88; // [rsp+54h] [rbp-134h] BYREF\n  char v89; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v91; // [rsp+68h] [rbp-120h]\n  char v92; // [rsp+70h] [rbp-118h]\n  wchar_t v93[7]; // [rsp+74h] [rbp-114h] BYREF\n  __m128i v94; // [rsp+90h] [rbp-F8h] BYREF\n  size_t n[2]; // [rsp+A0h] [rbp-E8h] BYREF\n  __m128i v96; // [rsp+B0h] [rbp-D8h] BYREF\n  __m128i v97; // [rsp+C0h] [rbp-C8h] BYREF\n  mbstate_t v98[2]; // [rsp+D0h] [rbp-B8h] BYREF\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __int128 v100[2]; // [rsp+F0h] [rbp-98h] BYREF\n  char ps[12]; // [rsp+110h] [rbp-78h] BYREF\n  char v102; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v104; // [rsp+128h] [rbp-60h]\n  char v105; // [rsp+130h] [rbp-58h]\n  wchar_t pwc[21]; // [rsp+134h] [rbp-54h] BYREF\n\n  v3 = a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v83 = a2;\n    v82 = 0;\n    v81 = 0LL;\n    if ( (((unsigned int)dword_410680[(unsigned __int8)v17 >> 5] >> v17) & 1) != 0 )\n    {\n      v84 = 1LL;\n      v86[0] = v17;\n      v85 = 1;\n      v82 = 1;\nLABEL_17:\n      if ( !v86[0] )\n        return (size_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v81) )\n      goto LABEL_172;\n    mb_cur_max = __ctype_get_mb_cur_max();\n    v70 = v83;\n    v71 = sub_407340((__int64)v83, mb_cur_max);\n    v72 = sub_408FC0(v86, v70, v71, &v81);\n    v84 = v72;\n    if ( v72 == -1LL )\n    {\n      v84 = 1LL;\n      v85 = 0;\n      v82 = 1;\n    }\n    else\n    {\n      if ( v72 != -2LL )\n      {\n        if ( !v72 )\n        {\n          v84 = 1LL;\n          if ( *v83 )\n            goto LABEL_173;\n          if ( v86[0] )\n            goto LABEL_161;\n        }\n        v85 = 1;\n        mbsinit(&v81);\n        v82 = 1;\n        goto LABEL_17;\n      }\n      v75 = strlen(v83);\n      v85 = 0;\n      v84 = v75;\n      v82 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v24 = 0LL;\n    v25 = 0LL;\n    v26 = 1;\n    v87 = 0;\n    v88 = 0LL;\n    v89 = 0;\n    n[0] = (size_t)a1;\n    v94.m128i_i8[0] = 0;\n    *(__int64 *)((char *)v94.m128i_i64 + 4) = 0LL;\n    v94.m128i_i8[12] = 0;\n    v80 = 0LL;\n    while ( 1 )\n    {\n      if ( !v94.m128i_i8[0] )\n      {\n        if ( (((unsigned int)dword_410680[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1) != 0 )\n        {\n          n[1] = 1LL;\n          v27 = *(char *)n[0];\n          v96.m128i_i8[0] = 1;\n          v96.m128i_i32[1] = v27;\n          v94.m128i_i8[12] = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)v94.m128i_i64 + 4)) )\n          goto LABEL_172;\n        v94.m128i_i8[0] = 1;\n      }\n      v47 = __ctype_get_mb_cur_max();\n      v78 = (char *)n[0];\n      v48 = sub_407340(n[0], v47);\n      v49 = sub_408FC0(&v96.m128i_i32[1], v78, v48, (mbstate_t *)((char *)v94.m128i_i64 + 4));\n      n[1] = v49;\n      if ( v49 == -1LL )\n      {\n        n[1] = 1LL;\n        v96.m128i_i8[0] = 0;\n        v94.m128i_i8[12] = 1;\n        goto LABEL_85;\n      }\n      if ( v49 == -2LL )\n        break;\n      if ( !v49 )\n      {\n        n[1] = 1LL;\n        if ( *(_BYTE *)n[0] )\n          goto LABEL_173;\n        if ( v96.m128i_i32[1] )\n          goto LABEL_161;\n      }\n      v96.m128i_i8[0] = 1;\n      if ( mbsinit((const mbstate_t *)((char *)v94.m128i_i64 + 4)) )\n        v94.m128i_i8[0] = 0;\n      v94.m128i_i8[12] = 1;\nLABEL_33:\n      if ( !v96.m128i_i32[1] )\n        return 0LL;\n      if ( ((unsigned __int8)v26 & (v24 > 9)) != 0 )\n      {\n        if ( v25 >= 5 * v24 )\n          goto LABEL_106;\n        ++v25;\n        v26 &= v24 > 9;\n      }\n      else\n      {\n        ++v25;\n      }\nLABEL_37:\n      if ( v85 )\n      {\n        if ( v96.m128i_i32[1] == v86[0] )\n          goto LABEL_39;\nLABEL_66:\n        v42 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v42 = n[1];\n      if ( n[1] == v84 && !memcmp((const void *)n[0], v83, n[1]) )\n      {\nLABEL_39:\n        v28 = *a2;\n        si128 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v30 = _mm_load_si128(&v94);\n        ps[0] = 0;\n        *(__m128i *)s1 = si128;\n        v31 = _mm_load_si128(&v96);\n        s1[0] = (void *)(si128.m128i_i64[1] + si128.m128i_i64[0]);\n        v32 = _mm_load_si128(&v97);\n        *(__m128i *)&v98[0].__count = v30;\n        v100[0] = (__int128)v31;\n        v33 = dword_410680[(unsigned __int8)v28 >> 5];\n        v100[1] = (__int128)v32;\n        v98[1].__wchb[0] = 0;\n        v102 = 0;\n        *(_QWORD *)&ps[4] = 0LL;\n        if ( ((v33 >> v28) & 1) != 0 )\n        {\n          v104 = 1LL;\n          pwc[0] = v28;\n          v105 = 1;\n          v102 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((const mbstate_t *)&ps[4]) )\n        {\n          ps[0] = 1;\n          v62 = __ctype_get_mb_cur_max();\n          v79 = (char *)s2;\n          v63 = sub_407340((__int64)s2, v62);\n          v64 = sub_408FC0(pwc, v79, v63, (mbstate_t *)&ps[4]);\n          v104 = v64;\n          switch ( v64 )\n          {\n            case 0xFFFFFFFFFFFFFFFFLL:\n              v104 = 1LL;\n              v105 = 0;\n              break;\n            case 0xFFFFFFFFFFFFFFFELL:\n              v73 = strlen((const char *)s2);\n              v105 = 0;\n              v104 = v73;\n              break;\n            case 0uLL:\n              v104 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc[0] )\n                  goto LABEL_142;\nLABEL_161:\n                sub_409A20();\n              }\nLABEL_173:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            default:\nLABEL_142:\n              v105 = 1;\n              if ( mbsinit((const mbstate_t *)&ps[4]) )\n                ps[0] = 0;\n              v102 = 1;\nLABEL_41:\n              if ( !pwc[0] )\n                abort();\n              break;\n          }\n          v102 = 0;\n          ++v25;\n          s2 = (char *)s2 + v104;\n          while ( 2 )\n          {\n            if ( ps[0] )\n            {\nLABEL_55:\n              v38 = __ctype_get_mb_cur_max();\n              v39 = (char *)s2;\n              v40 = sub_407340((__int64)s2, v38);\n              v41 = sub_408FC0(pwc, v39, v40, (mbstate_t *)&ps[4]);\n              v104 = v41;\n              if ( v41 == -1LL )\n              {\n                v104 = 1LL;\n                v105 = 0;\n                v102 = 1;\n              }\n              else if ( v41 == -2LL )\n              {\n                v50 = strlen((const char *)s2);\n                v105 = 0;\n                v104 = v50;\n                v102 = 1;\n              }\n              else\n              {\n                if ( !v41 )\n                {\n                  v104 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_173;\n                  if ( pwc[0] )\n                    goto LABEL_161;\n                }\n                v105 = 1;\n                if ( mbsinit((const mbstate_t *)&ps[4]) )\n                  ps[0] = 0;\n                v102 = 1;\n                if ( !pwc[0] )\n                  return n[0];\n              }\n            }\n            else\n            {\n              if ( (((unsigned int)dword_410680[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) == 0 )\n              {\n                if ( !mbsinit((const mbstate_t *)&ps[4]) )\n                  goto LABEL_172;\n                ps[0] = 1;\n                goto LABEL_55;\n              }\n              v104 = 1LL;\n              v34 = *(char *)s2;\n              v105 = 1;\n              pwc[0] = v34;\n              v102 = 1;\n              if ( !v34 )\n                return n[0];\n            }\n            if ( !v98[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v98[0].__count) )\n              {\n                if ( (((unsigned int)dword_410680[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1) != 0 )\n                {\n                  s1[1] = (void *)1;\n                  v35 = *(char *)s1[0];\n                  LOBYTE(v100[0]) = 1;\n                  DWORD1(v100[0]) = v35;\n                  v98[1].__wchb[0] = 1;\nLABEL_49:\n                  v36 = DWORD1(v100[0]);\n                  if ( !DWORD1(v100[0]) )\n                    return 0LL;\nLABEL_50:\n                  if ( v105 )\n                  {\n                    v37 = pwc[0] != v36;\nLABEL_52:\n                    if ( v37 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v25;\n                    s2 = (char *)s2 + v104;\n                    v98[1].__wchb[0] = 0;\n                    v102 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v104 )\n                    goto LABEL_66;\n                  v37 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((const mbstate_t *)&v98[0].4) )\n                  goto LABEL_172;\n                LOBYTE(v98[0].__count) = 1;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = (char *)s1[0];\n              v45 = sub_407340((__int64)s1[0], v43);\n              v46 = (void *)sub_408FC0((wchar_t *)v100 + 1, v44, v45, (mbstate_t *)&v98[0].4);\n              s1[1] = v46;\n              if ( v46 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                LOBYTE(v100[0]) = 0;\n                v98[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v46 != (void *)-2LL )\n                {\n                  if ( !v46 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_173;\n                    if ( DWORD1(v100[0]) )\n                      goto LABEL_161;\n                  }\n                  LOBYTE(v100[0]) = 1;\n                  if ( mbsinit((const mbstate_t *)&v98[0].4) )\n                    LOBYTE(v98[0].__count) = 0;\n                  v36 = DWORD1(v100[0]);\n                  v98[1].__wchb[0] = 1;\n                  if ( !DWORD1(v100[0]) )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v51 = (void *)strlen((const char *)s1[0]);\n                LOBYTE(v100[0]) = 0;\n                s1[1] = v51;\n                v98[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( LOBYTE(v100[0]) )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_172:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v42;\n      ++v24;\n      v94.m128i_i8[12] = 0;\n    }\n    v60 = strlen((const char *)n[0]);\n    v96.m128i_i8[0] = 0;\n    n[1] = v60;\n    v94.m128i_i8[12] = 1;\nLABEL_85:\n    if ( ((unsigned __int8)v26 & (v24 > 9)) == 0 )\n    {\n      ++v25;\n      goto LABEL_88;\n    }\n    if ( v25 < 5 * v24 )\n    {\n      ++v25;\n      v26 &= v24 > 9;\n      goto LABEL_88;\n    }\nLABEL_106:\n    v52 = v25 - v80;\n    if ( v25 != v80 )\n    {\n      if ( !v89 )\n        goto LABEL_110;\n      if ( v92 )\n        goto LABEL_113;\n      while ( 1 )\n      {\n        v89 = 0;\n        s += v91;\n        if ( !--v52 )\n          goto LABEL_129;\nLABEL_110:\n        if ( !v87 )\n        {\n          if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n          {\n            v91 = 1LL;\n            v53 = *s;\n            v92 = 1;\n            v93[0] = v53;\n            v89 = 1;\n            goto LABEL_113;\n          }\n          if ( !mbsinit(&v88) )\n            goto LABEL_172;\n          v87 = 1;\n        }\n        v55 = __ctype_get_mb_cur_max();\n        v56 = s;\n        v57 = sub_407340((__int64)s, v55);\n        v58 = sub_408FC0(v93, v56, v57, &v88);\n        v91 = v58;\n        switch ( v58 )\n        {\n          case 0xFFFFFFFFFFFFFFFFLL:\n            v91 = 1LL;\n            v92 = 0;\n            continue;\n          case 0xFFFFFFFFFFFFFFFELL:\n            v59 = strlen(s);\n            v92 = 0;\n            v91 = v59;\n            continue;\n          case 0uLL:\n            v91 = 1LL;\n            if ( *s )\n              goto LABEL_173;\n            if ( v93[0] )\n              goto LABEL_161;\n            break;\n        }\n        v92 = 1;\n        if ( mbsinit(&v88) )\n          v87 = 0;\n        v89 = 1;\nLABEL_113:\n        if ( !v93[0] )\n          goto LABEL_114;\n      }\n    }\n    if ( v89 )\n    {\n      if ( !v92 )\n        goto LABEL_133;\n      goto LABEL_132;\n    }\nLABEL_129:\n    if ( !v87 )\n    {\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n      {\n        v91 = 1LL;\n        v61 = *s;\n        v92 = 1;\n        v93[0] = v61;\n        v89 = 1;\n        goto LABEL_132;\n      }\n      if ( !mbsinit(&v88) )\n        goto LABEL_172;\n      v87 = 1;\n    }\n    v65 = __ctype_get_mb_cur_max();\n    v66 = s;\n    v67 = sub_407340((__int64)s, v65);\n    v68 = sub_408FC0(v93, v66, v67, &v88);\n    v91 = v68;\n    switch ( v68 )\n    {\n      case 0xFFFFFFFFFFFFFFFFLL:\n        v91 = 1LL;\n        v92 = 0;\n        v89 = 1;\n        goto LABEL_133;\n      case 0xFFFFFFFFFFFFFFFELL:\n        v74 = strlen(s);\n        v92 = 0;\n        v91 = v74;\n        v89 = 1;\n        goto LABEL_133;\n      case 0uLL:\n        v91 = 1LL;\n        if ( *s )\n          goto LABEL_173;\n        if ( v93[0] )\n          goto LABEL_161;\n        break;\n    }\n    v92 = 1;\n    if ( mbsinit(&v88) )\n      v87 = 0;\n    v89 = 1;\nLABEL_132:\n    if ( !v93[0] )\n    {\nLABEL_114:\n      v26 = sub_409A40(a1, (unsigned __int64)a2, (char **)ps);\n      if ( v26 )\n        return *(_QWORD *)ps;\n      v54 = v96.m128i_i8[0];\nLABEL_134:\n      v80 = v25++;\n      if ( !v54 )\n        goto LABEL_88;\n      goto LABEL_37;\n    }\nLABEL_133:\n    v54 = v96.m128i_i8[0];\n    v26 = 1;\n    goto LABEL_134;\n  }\n  v4 = *a2;\n  result = (size_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = *a1;\n  if ( !*a1 )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = a2[1];\n    if ( !v18 )\n      return (size_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    v16 = v11 & (v8 > 9);\n    if ( v16 )\n    {\n      if ( v14 < 5 * v8\n        || v7 && (v76 = (char *)v7, v12 = strnlen(v7, v14 - (_QWORD)v10), v10 = (char *)v14, v7 = &v76[v12], v76[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v77 = v10;\n        v13 = strlen(a2);\n        v11 = sub_409890(v15, (__int64)a2, v13, ps);\n        v10 = v77;\n        if ( v11 )\n          return *(_QWORD *)ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = &a2[v19];\n  v21 = &v3[v19];\n  while ( 1 )\n  {\n    v23 = v20[v14];\n    if ( !v23 )\n      return (size_t)v3;\n    v22 = v21[v14];\n    if ( !v22 )\n      return 0LL;\n    ++v14;\n    if ( v23 != v22 )\n      goto LABEL_12;\n  }\n}\n\nsize_t __fastcall sub_40A420(char *a1, char *a2)\n{\n  char *v3; // rbp\n  char v4; // r15\n  size_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  char *v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  char v16; // bp\n  wchar_t v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  char *v20; // rdi\n  char *v21; // rdx\n  char v22; // si\n  char v23; // cl\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rbx\n  char v26; // r14\n  __int32 v27; // eax\n  wchar_t v28; // ecx\n  __m128i si128; // xmm1\n  __m128i v30; // xmm0\n  __m128i v31; // xmm2\n  __m128i v32; // xmm3\n  unsigned int v33; // eax\n  wchar_t v34; // eax\n  int v35; // eax\n  int v36; // eax\n  bool v37; // al\n  __int64 v38; // rax\n  char *v39; // r15\n  __int64 v40; // rax\n  size_t v41; // rax\n  size_t v42; // r15\n  __int64 v43; // rax\n  char *v44; // r15\n  __int64 v45; // rax\n  void *v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  void *v51; // rax\n  unsigned __int64 v52; // r14\n  wchar_t v53; // eax\n  __int8 v54; // dl\n  __int64 v55; // rax\n  char *v56; // r15\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  size_t v60; // rax\n  wchar_t v61; // eax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  __int64 v65; // rax\n  char *v66; // r14\n  __int64 v67; // rax\n  size_t v68; // rax\n  __int64 mb_cur_max; // rax\n  char *v70; // r12\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  size_t v75; // rax\n  char *v76; // [rsp+0h] [rbp-188h]\n  char *v77; // [rsp+0h] [rbp-188h]\n  char *v78; // [rsp+0h] [rbp-188h]\n  char *v79; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v80; // [rsp+8h] [rbp-180h]\n  mbstate_t v81; // [rsp+14h] [rbp-174h] BYREF\n  char v82; // [rsp+1Ch] [rbp-16Ch]\n  char *v83; // [rsp+20h] [rbp-168h]\n  size_t v84; // [rsp+28h] [rbp-160h]\n  char v85; // [rsp+30h] [rbp-158h]\n  wchar_t v86[7]; // [rsp+34h] [rbp-154h] BYREF\n  char v87; // [rsp+50h] [rbp-138h]\n  mbstate_t v88; // [rsp+54h] [rbp-134h] BYREF\n  char v89; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v91; // [rsp+68h] [rbp-120h]\n  char v92; // [rsp+70h] [rbp-118h]\n  wchar_t v93[7]; // [rsp+74h] [rbp-114h] BYREF\n  __m128i v94; // [rsp+90h] [rbp-F8h] BYREF\n  size_t n[2]; // [rsp+A0h] [rbp-E8h] BYREF\n  __m128i v96; // [rsp+B0h] [rbp-D8h] BYREF\n  __m128i v97; // [rsp+C0h] [rbp-C8h] BYREF\n  mbstate_t v98[2]; // [rsp+D0h] [rbp-B8h] BYREF\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __int128 v100[2]; // [rsp+F0h] [rbp-98h] BYREF\n  char ps[12]; // [rsp+110h] [rbp-78h] BYREF\n  char v102; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v104; // [rsp+128h] [rbp-60h]\n  char v105; // [rsp+130h] [rbp-58h]\n  wchar_t pwc[21]; // [rsp+134h] [rbp-54h] BYREF\n\n  v3 = a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v83 = a2;\n    v82 = 0;\n    v81 = 0LL;\n    if ( (((unsigned int)dword_410680[(unsigned __int8)v17 >> 5] >> v17) & 1) != 0 )\n    {\n      v84 = 1LL;\n      v86[0] = v17;\n      v85 = 1;\n      v82 = 1;\nLABEL_17:\n      if ( !v86[0] )\n        return (size_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v81) )\n      goto LABEL_172;\n    mb_cur_max = __ctype_get_mb_cur_max();\n    v70 = v83;\n    v71 = sub_407340((__int64)v83, mb_cur_max);\n    v72 = sub_408FC0(v86, v70, v71, &v81);\n    v84 = v72;\n    if ( v72 == -1LL )\n    {\n      v84 = 1LL;\n      v85 = 0;\n      v82 = 1;\n    }\n    else\n    {\n      if ( v72 != -2LL )\n      {\n        if ( !v72 )\n        {\n          v84 = 1LL;\n          if ( *v83 )\n            goto LABEL_173;\n          if ( v86[0] )\n            goto LABEL_161;\n        }\n        v85 = 1;\n        mbsinit(&v81);\n        v82 = 1;\n        goto LABEL_17;\n      }\n      v75 = strlen(v83);\n      v85 = 0;\n      v84 = v75;\n      v82 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v24 = 0LL;\n    v25 = 0LL;\n    v26 = 1;\n    v87 = 0;\n    v88 = 0LL;\n    v89 = 0;\n    n[0] = (size_t)a1;\n    v94.m128i_i8[0] = 0;\n    *(__int64 *)((char *)v94.m128i_i64 + 4) = 0LL;\n    v94.m128i_i8[12] = 0;\n    v80 = 0LL;\n    while ( 1 )\n    {\n      if ( !v94.m128i_i8[0] )\n      {\n        if ( (((unsigned int)dword_410680[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1) != 0 )\n        {\n          n[1] = 1LL;\n          v27 = *(char *)n[0];\n          v96.m128i_i8[0] = 1;\n          v96.m128i_i32[1] = v27;\n          v94.m128i_i8[12] = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)v94.m128i_i64 + 4)) )\n          goto LABEL_172;\n        v94.m128i_i8[0] = 1;\n      }\n      v47 = __ctype_get_mb_cur_max();\n      v78 = (char *)n[0];\n      v48 = sub_407340(n[0], v47);\n      v49 = sub_408FC0(&v96.m128i_i32[1], v78, v48, (mbstate_t *)((char *)v94.m128i_i64 + 4));\n      n[1] = v49;\n      if ( v49 == -1LL )\n      {\n        n[1] = 1LL;\n        v96.m128i_i8[0] = 0;\n        v94.m128i_i8[12] = 1;\n        goto LABEL_85;\n      }\n      if ( v49 == -2LL )\n        break;\n      if ( !v49 )\n      {\n        n[1] = 1LL;\n        if ( *(_BYTE *)n[0] )\n          goto LABEL_173;\n        if ( v96.m128i_i32[1] )\n          goto LABEL_161;\n      }\n      v96.m128i_i8[0] = 1;\n      if ( mbsinit((const mbstate_t *)((char *)v94.m128i_i64 + 4)) )\n        v94.m128i_i8[0] = 0;\n      v94.m128i_i8[12] = 1;\nLABEL_33:\n      if ( !v96.m128i_i32[1] )\n        return 0LL;\n      if ( ((unsigned __int8)v26 & (v24 > 9)) != 0 )\n      {\n        if ( v25 >= 5 * v24 )\n          goto LABEL_106;\n        ++v25;\n        v26 &= v24 > 9;\n      }\n      else\n      {\n        ++v25;\n      }\nLABEL_37:\n      if ( v85 )\n      {\n        if ( v96.m128i_i32[1] == v86[0] )\n          goto LABEL_39;\nLABEL_66:\n        v42 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v42 = n[1];\n      if ( n[1] == v84 && !memcmp((const void *)n[0], v83, n[1]) )\n      {\nLABEL_39:\n        v28 = *a2;\n        si128 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v30 = _mm_load_si128(&v94);\n        ps[0] = 0;\n        *(__m128i *)s1 = si128;\n        v31 = _mm_load_si128(&v96);\n        s1[0] = (void *)(si128.m128i_i64[1] + si128.m128i_i64[0]);\n        v32 = _mm_load_si128(&v97);\n        *(__m128i *)&v98[0].__count = v30;\n        v100[0] = (__int128)v31;\n        v33 = dword_410680[(unsigned __int8)v28 >> 5];\n        v100[1] = (__int128)v32;\n        v98[1].__wchb[0] = 0;\n        v102 = 0;\n        *(_QWORD *)&ps[4] = 0LL;\n        if ( ((v33 >> v28) & 1) != 0 )\n        {\n          v104 = 1LL;\n          pwc[0] = v28;\n          v105 = 1;\n          v102 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((const mbstate_t *)&ps[4]) )\n        {\n          ps[0] = 1;\n          v62 = __ctype_get_mb_cur_max();\n          v79 = (char *)s2;\n          v63 = sub_407340((__int64)s2, v62);\n          v64 = sub_408FC0(pwc, v79, v63, (mbstate_t *)&ps[4]);\n          v104 = v64;\n          switch ( v64 )\n          {\n            case 0xFFFFFFFFFFFFFFFFLL:\n              v104 = 1LL;\n              v105 = 0;\n              break;\n            case 0xFFFFFFFFFFFFFFFELL:\n              v73 = strlen((const char *)s2);\n              v105 = 0;\n              v104 = v73;\n              break;\n            case 0uLL:\n              v104 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc[0] )\n                  goto LABEL_142;\nLABEL_161:\n                sub_409A20();\n              }\nLABEL_173:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            default:\nLABEL_142:\n              v105 = 1;\n              if ( mbsinit((const mbstate_t *)&ps[4]) )\n                ps[0] = 0;\n              v102 = 1;\nLABEL_41:\n              if ( !pwc[0] )\n                abort();\n              break;\n          }\n          v102 = 0;\n          ++v25;\n          s2 = (char *)s2 + v104;\n          while ( 2 )\n          {\n            if ( ps[0] )\n            {\nLABEL_55:\n              v38 = __ctype_get_mb_cur_max();\n              v39 = (char *)s2;\n              v40 = sub_407340((__int64)s2, v38);\n              v41 = sub_408FC0(pwc, v39, v40, (mbstate_t *)&ps[4]);\n              v104 = v41;\n              if ( v41 == -1LL )\n              {\n                v104 = 1LL;\n                v105 = 0;\n                v102 = 1;\n              }\n              else if ( v41 == -2LL )\n              {\n                v50 = strlen((const char *)s2);\n                v105 = 0;\n                v104 = v50;\n                v102 = 1;\n              }\n              else\n              {\n                if ( !v41 )\n                {\n                  v104 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_173;\n                  if ( pwc[0] )\n                    goto LABEL_161;\n                }\n                v105 = 1;\n                if ( mbsinit((const mbstate_t *)&ps[4]) )\n                  ps[0] = 0;\n                v102 = 1;\n                if ( !pwc[0] )\n                  return n[0];\n              }\n            }\n            else\n            {\n              if ( (((unsigned int)dword_410680[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) == 0 )\n              {\n                if ( !mbsinit((const mbstate_t *)&ps[4]) )\n                  goto LABEL_172;\n                ps[0] = 1;\n                goto LABEL_55;\n              }\n              v104 = 1LL;\n              v34 = *(char *)s2;\n              v105 = 1;\n              pwc[0] = v34;\n              v102 = 1;\n              if ( !v34 )\n                return n[0];\n            }\n            if ( !v98[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v98[0].__count) )\n              {\n                if ( (((unsigned int)dword_410680[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1) != 0 )\n                {\n                  s1[1] = (void *)1;\n                  v35 = *(char *)s1[0];\n                  LOBYTE(v100[0]) = 1;\n                  DWORD1(v100[0]) = v35;\n                  v98[1].__wchb[0] = 1;\nLABEL_49:\n                  v36 = DWORD1(v100[0]);\n                  if ( !DWORD1(v100[0]) )\n                    return 0LL;\nLABEL_50:\n                  if ( v105 )\n                  {\n                    v37 = pwc[0] != v36;\nLABEL_52:\n                    if ( v37 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v25;\n                    s2 = (char *)s2 + v104;\n                    v98[1].__wchb[0] = 0;\n                    v102 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v104 )\n                    goto LABEL_66;\n                  v37 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((const mbstate_t *)&v98[0].4) )\n                  goto LABEL_172;\n                LOBYTE(v98[0].__count) = 1;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = (char *)s1[0];\n              v45 = sub_407340((__int64)s1[0], v43);\n              v46 = (void *)sub_408FC0((wchar_t *)v100 + 1, v44, v45, (mbstate_t *)&v98[0].4);\n              s1[1] = v46;\n              if ( v46 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                LOBYTE(v100[0]) = 0;\n                v98[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v46 != (void *)-2LL )\n                {\n                  if ( !v46 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_173;\n                    if ( DWORD1(v100[0]) )\n                      goto LABEL_161;\n                  }\n                  LOBYTE(v100[0]) = 1;\n                  if ( mbsinit((const mbstate_t *)&v98[0].4) )\n                    LOBYTE(v98[0].__count) = 0;\n                  v36 = DWORD1(v100[0]);\n                  v98[1].__wchb[0] = 1;\n                  if ( !DWORD1(v100[0]) )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v51 = (void *)strlen((const char *)s1[0]);\n                LOBYTE(v100[0]) = 0;\n                s1[1] = v51;\n                v98[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( LOBYTE(v100[0]) )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_172:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v42;\n      ++v24;\n      v94.m128i_i8[12] = 0;\n    }\n    v60 = strlen((const char *)n[0]);\n    v96.m128i_i8[0] = 0;\n    n[1] = v60;\n    v94.m128i_i8[12] = 1;\nLABEL_85:\n    if ( ((unsigned __int8)v26 & (v24 > 9)) == 0 )\n    {\n      ++v25;\n      goto LABEL_88;\n    }\n    if ( v25 < 5 * v24 )\n    {\n      ++v25;\n      v26 &= v24 > 9;\n      goto LABEL_88;\n    }\nLABEL_106:\n    v52 = v25 - v80;\n    if ( v25 != v80 )\n    {\n      if ( !v89 )\n        goto LABEL_110;\n      if ( v92 )\n        goto LABEL_113;\n      while ( 1 )\n      {\n        v89 = 0;\n        s += v91;\n        if ( !--v52 )\n          goto LABEL_129;\nLABEL_110:\n        if ( !v87 )\n        {\n          if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n          {\n            v91 = 1LL;\n            v53 = *s;\n            v92 = 1;\n            v93[0] = v53;\n            v89 = 1;\n            goto LABEL_113;\n          }\n          if ( !mbsinit(&v88) )\n            goto LABEL_172;\n          v87 = 1;\n        }\n        v55 = __ctype_get_mb_cur_max();\n        v56 = s;\n        v57 = sub_407340((__int64)s, v55);\n        v58 = sub_408FC0(v93, v56, v57, &v88);\n        v91 = v58;\n        switch ( v58 )\n        {\n          case 0xFFFFFFFFFFFFFFFFLL:\n            v91 = 1LL;\n            v92 = 0;\n            continue;\n          case 0xFFFFFFFFFFFFFFFELL:\n            v59 = strlen(s);\n            v92 = 0;\n            v91 = v59;\n            continue;\n          case 0uLL:\n            v91 = 1LL;\n            if ( *s )\n              goto LABEL_173;\n            if ( v93[0] )\n              goto LABEL_161;\n            break;\n        }\n        v92 = 1;\n        if ( mbsinit(&v88) )\n          v87 = 0;\n        v89 = 1;\nLABEL_113:\n        if ( !v93[0] )\n          goto LABEL_114;\n      }\n    }\n    if ( v89 )\n    {\n      if ( !v92 )\n        goto LABEL_133;\n      goto LABEL_132;\n    }\nLABEL_129:\n    if ( !v87 )\n    {\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n      {\n        v91 = 1LL;\n        v61 = *s;\n        v92 = 1;\n        v93[0] = v61;\n        v89 = 1;\n        goto LABEL_132;\n      }\n      if ( !mbsinit(&v88) )\n        goto LABEL_172;\n      v87 = 1;\n    }\n    v65 = __ctype_get_mb_cur_max();\n    v66 = s;\n    v67 = sub_407340((__int64)s, v65);\n    v68 = sub_408FC0(v93, v66, v67, &v88);\n    v91 = v68;\n    switch ( v68 )\n    {\n      case 0xFFFFFFFFFFFFFFFFLL:\n        v91 = 1LL;\n        v92 = 0;\n        v89 = 1;\n        goto LABEL_133;\n      case 0xFFFFFFFFFFFFFFFELL:\n        v74 = strlen(s);\n        v92 = 0;\n        v91 = v74;\n        v89 = 1;\n        goto LABEL_133;\n      case 0uLL:\n        v91 = 1LL;\n        if ( *s )\n          goto LABEL_173;\n        if ( v93[0] )\n          goto LABEL_161;\n        break;\n    }\n    v92 = 1;\n    if ( mbsinit(&v88) )\n      v87 = 0;\n    v89 = 1;\nLABEL_132:\n    if ( !v93[0] )\n    {\nLABEL_114:\n      v26 = sub_409A40(a1, (unsigned __int64)a2, (char **)ps);\n      if ( v26 )\n        return *(_QWORD *)ps;\n      v54 = v96.m128i_i8[0];\nLABEL_134:\n      v80 = v25++;\n      if ( !v54 )\n        goto LABEL_88;\n      goto LABEL_37;\n    }\nLABEL_133:\n    v54 = v96.m128i_i8[0];\n    v26 = 1;\n    goto LABEL_134;\n  }\n  v4 = *a2;\n  result = (size_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = *a1;\n  if ( !*a1 )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = a2[1];\n    if ( !v18 )\n      return (size_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    v16 = v11 & (v8 > 9);\n    if ( v16 )\n    {\n      if ( v14 < 5 * v8\n        || v7 && (v76 = (char *)v7, v12 = strnlen(v7, v14 - (_QWORD)v10), v10 = (char *)v14, v7 = &v76[v12], v76[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v77 = v10;\n        v13 = strlen(a2);\n        v11 = sub_409890(v15, (__int64)a2, v13, ps);\n        v10 = v77;\n        if ( v11 )\n          return *(_QWORD *)ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = &a2[v19];\n  v21 = &v3[v19];\n  while ( 1 )\n  {\n    v23 = v20[v14];\n    if ( !v23 )\n      return (size_t)v3;\n    v22 = v21[v14];\n    if ( !v22 )\n      return 0LL;\n    ++v14;\n    if ( v23 != v22 )\n      goto LABEL_12;\n  }\n}\n"
        },
        {
            "funcName": "sub_40A420",
            "funcStartAddr": "0x401a68",
            "funcEndAddr": "0x401a6d",
            "decompiledFuncCode": "size_t __fastcall sub_40A420(char *a1, char *a2)\n{\n  char *v3; // rbp\n  char v4; // r15\n  size_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  char *v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  char v16; // bp\n  wchar_t v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  char *v20; // rdi\n  char *v21; // rdx\n  char v22; // si\n  char v23; // cl\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rbx\n  char v26; // r14\n  __int32 v27; // eax\n  wchar_t v28; // ecx\n  __m128i si128; // xmm1\n  __m128i v30; // xmm0\n  __m128i v31; // xmm2\n  __m128i v32; // xmm3\n  unsigned int v33; // eax\n  wchar_t v34; // eax\n  int v35; // eax\n  int v36; // eax\n  bool v37; // al\n  __int64 v38; // rax\n  char *v39; // r15\n  __int64 v40; // rax\n  size_t v41; // rax\n  size_t v42; // r15\n  __int64 v43; // rax\n  char *v44; // r15\n  __int64 v45; // rax\n  void *v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  void *v51; // rax\n  unsigned __int64 v52; // r14\n  wchar_t v53; // eax\n  __int8 v54; // dl\n  __int64 v55; // rax\n  char *v56; // r15\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  size_t v60; // rax\n  wchar_t v61; // eax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  __int64 v65; // rax\n  char *v66; // r14\n  __int64 v67; // rax\n  size_t v68; // rax\n  __int64 mb_cur_max; // rax\n  char *v70; // r12\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  size_t v75; // rax\n  char *v76; // [rsp+0h] [rbp-188h]\n  char *v77; // [rsp+0h] [rbp-188h]\n  char *v78; // [rsp+0h] [rbp-188h]\n  char *v79; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v80; // [rsp+8h] [rbp-180h]\n  mbstate_t v81; // [rsp+14h] [rbp-174h] BYREF\n  char v82; // [rsp+1Ch] [rbp-16Ch]\n  char *v83; // [rsp+20h] [rbp-168h]\n  size_t v84; // [rsp+28h] [rbp-160h]\n  char v85; // [rsp+30h] [rbp-158h]\n  wchar_t v86[7]; // [rsp+34h] [rbp-154h] BYREF\n  char v87; // [rsp+50h] [rbp-138h]\n  mbstate_t v88; // [rsp+54h] [rbp-134h] BYREF\n  char v89; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v91; // [rsp+68h] [rbp-120h]\n  char v92; // [rsp+70h] [rbp-118h]\n  wchar_t v93[7]; // [rsp+74h] [rbp-114h] BYREF\n  __m128i v94; // [rsp+90h] [rbp-F8h] BYREF\n  size_t n[2]; // [rsp+A0h] [rbp-E8h] BYREF\n  __m128i v96; // [rsp+B0h] [rbp-D8h] BYREF\n  __m128i v97; // [rsp+C0h] [rbp-C8h] BYREF\n  mbstate_t v98[2]; // [rsp+D0h] [rbp-B8h] BYREF\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __int128 v100[2]; // [rsp+F0h] [rbp-98h] BYREF\n  char ps[12]; // [rsp+110h] [rbp-78h] BYREF\n  char v102; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v104; // [rsp+128h] [rbp-60h]\n  char v105; // [rsp+130h] [rbp-58h]\n  wchar_t pwc[21]; // [rsp+134h] [rbp-54h] BYREF\n\n  v3 = a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v83 = a2;\n    v82 = 0;\n    v81 = 0LL;\n    if ( (((unsigned int)dword_410680[(unsigned __int8)v17 >> 5] >> v17) & 1) != 0 )\n    {\n      v84 = 1LL;\n      v86[0] = v17;\n      v85 = 1;\n      v82 = 1;\nLABEL_17:\n      if ( !v86[0] )\n        return (size_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v81) )\n      goto LABEL_172;\n    mb_cur_max = __ctype_get_mb_cur_max();\n    v70 = v83;\n    v71 = sub_407340((__int64)v83, mb_cur_max);\n    v72 = sub_408FC0(v86, v70, v71, &v81);\n    v84 = v72;\n    if ( v72 == -1LL )\n    {\n      v84 = 1LL;\n      v85 = 0;\n      v82 = 1;\n    }\n    else\n    {\n      if ( v72 != -2LL )\n      {\n        if ( !v72 )\n        {\n          v84 = 1LL;\n          if ( *v83 )\n            goto LABEL_173;\n          if ( v86[0] )\n            goto LABEL_161;\n        }\n        v85 = 1;\n        mbsinit(&v81);\n        v82 = 1;\n        goto LABEL_17;\n      }\n      v75 = strlen(v83);\n      v85 = 0;\n      v84 = v75;\n      v82 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v24 = 0LL;\n    v25 = 0LL;\n    v26 = 1;\n    v87 = 0;\n    v88 = 0LL;\n    v89 = 0;\n    n[0] = (size_t)a1;\n    v94.m128i_i8[0] = 0;\n    *(__int64 *)((char *)v94.m128i_i64 + 4) = 0LL;\n    v94.m128i_i8[12] = 0;\n    v80 = 0LL;\n    while ( 1 )\n    {\n      if ( !v94.m128i_i8[0] )\n      {\n        if ( (((unsigned int)dword_410680[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1) != 0 )\n        {\n          n[1] = 1LL;\n          v27 = *(char *)n[0];\n          v96.m128i_i8[0] = 1;\n          v96.m128i_i32[1] = v27;\n          v94.m128i_i8[12] = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)v94.m128i_i64 + 4)) )\n          goto LABEL_172;\n        v94.m128i_i8[0] = 1;\n      }\n      v47 = __ctype_get_mb_cur_max();\n      v78 = (char *)n[0];\n      v48 = sub_407340(n[0], v47);\n      v49 = sub_408FC0(&v96.m128i_i32[1], v78, v48, (mbstate_t *)((char *)v94.m128i_i64 + 4));\n      n[1] = v49;\n      if ( v49 == -1LL )\n      {\n        n[1] = 1LL;\n        v96.m128i_i8[0] = 0;\n        v94.m128i_i8[12] = 1;\n        goto LABEL_85;\n      }\n      if ( v49 == -2LL )\n        break;\n      if ( !v49 )\n      {\n        n[1] = 1LL;\n        if ( *(_BYTE *)n[0] )\n          goto LABEL_173;\n        if ( v96.m128i_i32[1] )\n          goto LABEL_161;\n      }\n      v96.m128i_i8[0] = 1;\n      if ( mbsinit((const mbstate_t *)((char *)v94.m128i_i64 + 4)) )\n        v94.m128i_i8[0] = 0;\n      v94.m128i_i8[12] = 1;\nLABEL_33:\n      if ( !v96.m128i_i32[1] )\n        return 0LL;\n      if ( ((unsigned __int8)v26 & (v24 > 9)) != 0 )\n      {\n        if ( v25 >= 5 * v24 )\n          goto LABEL_106;\n        ++v25;\n        v26 &= v24 > 9;\n      }\n      else\n      {\n        ++v25;\n      }\nLABEL_37:\n      if ( v85 )\n      {\n        if ( v96.m128i_i32[1] == v86[0] )\n          goto LABEL_39;\nLABEL_66:\n        v42 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v42 = n[1];\n      if ( n[1] == v84 && !memcmp((const void *)n[0], v83, n[1]) )\n      {\nLABEL_39:\n        v28 = *a2;\n        si128 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v30 = _mm_load_si128(&v94);\n        ps[0] = 0;\n        *(__m128i *)s1 = si128;\n        v31 = _mm_load_si128(&v96);\n        s1[0] = (void *)(si128.m128i_i64[1] + si128.m128i_i64[0]);\n        v32 = _mm_load_si128(&v97);\n        *(__m128i *)&v98[0].__count = v30;\n        v100[0] = (__int128)v31;\n        v33 = dword_410680[(unsigned __int8)v28 >> 5];\n        v100[1] = (__int128)v32;\n        v98[1].__wchb[0] = 0;\n        v102 = 0;\n        *(_QWORD *)&ps[4] = 0LL;\n        if ( ((v33 >> v28) & 1) != 0 )\n        {\n          v104 = 1LL;\n          pwc[0] = v28;\n          v105 = 1;\n          v102 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((const mbstate_t *)&ps[4]) )\n        {\n          ps[0] = 1;\n          v62 = __ctype_get_mb_cur_max();\n          v79 = (char *)s2;\n          v63 = sub_407340((__int64)s2, v62);\n          v64 = sub_408FC0(pwc, v79, v63, (mbstate_t *)&ps[4]);\n          v104 = v64;\n          switch ( v64 )\n          {\n            case 0xFFFFFFFFFFFFFFFFLL:\n              v104 = 1LL;\n              v105 = 0;\n              break;\n            case 0xFFFFFFFFFFFFFFFELL:\n              v73 = strlen((const char *)s2);\n              v105 = 0;\n              v104 = v73;\n              break;\n            case 0uLL:\n              v104 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc[0] )\n                  goto LABEL_142;\nLABEL_161:\n                sub_409A20();\n              }\nLABEL_173:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            default:\nLABEL_142:\n              v105 = 1;\n              if ( mbsinit((const mbstate_t *)&ps[4]) )\n                ps[0] = 0;\n              v102 = 1;\nLABEL_41:\n              if ( !pwc[0] )\n                abort();\n              break;\n          }\n          v102 = 0;\n          ++v25;\n          s2 = (char *)s2 + v104;\n          while ( 2 )\n          {\n            if ( ps[0] )\n            {\nLABEL_55:\n              v38 = __ctype_get_mb_cur_max();\n              v39 = (char *)s2;\n              v40 = sub_407340((__int64)s2, v38);\n              v41 = sub_408FC0(pwc, v39, v40, (mbstate_t *)&ps[4]);\n              v104 = v41;\n              if ( v41 == -1LL )\n              {\n                v104 = 1LL;\n                v105 = 0;\n                v102 = 1;\n              }\n              else if ( v41 == -2LL )\n              {\n                v50 = strlen((const char *)s2);\n                v105 = 0;\n                v104 = v50;\n                v102 = 1;\n              }\n              else\n              {\n                if ( !v41 )\n                {\n                  v104 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_173;\n                  if ( pwc[0] )\n                    goto LABEL_161;\n                }\n                v105 = 1;\n                if ( mbsinit((const mbstate_t *)&ps[4]) )\n                  ps[0] = 0;\n                v102 = 1;\n                if ( !pwc[0] )\n                  return n[0];\n              }\n            }\n            else\n            {\n              if ( (((unsigned int)dword_410680[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) == 0 )\n              {\n                if ( !mbsinit((const mbstate_t *)&ps[4]) )\n                  goto LABEL_172;\n                ps[0] = 1;\n                goto LABEL_55;\n              }\n              v104 = 1LL;\n              v34 = *(char *)s2;\n              v105 = 1;\n              pwc[0] = v34;\n              v102 = 1;\n              if ( !v34 )\n                return n[0];\n            }\n            if ( !v98[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v98[0].__count) )\n              {\n                if ( (((unsigned int)dword_410680[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1) != 0 )\n                {\n                  s1[1] = (void *)1;\n                  v35 = *(char *)s1[0];\n                  LOBYTE(v100[0]) = 1;\n                  DWORD1(v100[0]) = v35;\n                  v98[1].__wchb[0] = 1;\nLABEL_49:\n                  v36 = DWORD1(v100[0]);\n                  if ( !DWORD1(v100[0]) )\n                    return 0LL;\nLABEL_50:\n                  if ( v105 )\n                  {\n                    v37 = pwc[0] != v36;\nLABEL_52:\n                    if ( v37 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v25;\n                    s2 = (char *)s2 + v104;\n                    v98[1].__wchb[0] = 0;\n                    v102 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v104 )\n                    goto LABEL_66;\n                  v37 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((const mbstate_t *)&v98[0].4) )\n                  goto LABEL_172;\n                LOBYTE(v98[0].__count) = 1;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = (char *)s1[0];\n              v45 = sub_407340((__int64)s1[0], v43);\n              v46 = (void *)sub_408FC0((wchar_t *)v100 + 1, v44, v45, (mbstate_t *)&v98[0].4);\n              s1[1] = v46;\n              if ( v46 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                LOBYTE(v100[0]) = 0;\n                v98[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v46 != (void *)-2LL )\n                {\n                  if ( !v46 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_173;\n                    if ( DWORD1(v100[0]) )\n                      goto LABEL_161;\n                  }\n                  LOBYTE(v100[0]) = 1;\n                  if ( mbsinit((const mbstate_t *)&v98[0].4) )\n                    LOBYTE(v98[0].__count) = 0;\n                  v36 = DWORD1(v100[0]);\n                  v98[1].__wchb[0] = 1;\n                  if ( !DWORD1(v100[0]) )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v51 = (void *)strlen((const char *)s1[0]);\n                LOBYTE(v100[0]) = 0;\n                s1[1] = v51;\n                v98[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( LOBYTE(v100[0]) )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_172:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v42;\n      ++v24;\n      v94.m128i_i8[12] = 0;\n    }\n    v60 = strlen((const char *)n[0]);\n    v96.m128i_i8[0] = 0;\n    n[1] = v60;\n    v94.m128i_i8[12] = 1;\nLABEL_85:\n    if ( ((unsigned __int8)v26 & (v24 > 9)) == 0 )\n    {\n      ++v25;\n      goto LABEL_88;\n    }\n    if ( v25 < 5 * v24 )\n    {\n      ++v25;\n      v26 &= v24 > 9;\n      goto LABEL_88;\n    }\nLABEL_106:\n    v52 = v25 - v80;\n    if ( v25 != v80 )\n    {\n      if ( !v89 )\n        goto LABEL_110;\n      if ( v92 )\n        goto LABEL_113;\n      while ( 1 )\n      {\n        v89 = 0;\n        s += v91;\n        if ( !--v52 )\n          goto LABEL_129;\nLABEL_110:\n        if ( !v87 )\n        {\n          if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n          {\n            v91 = 1LL;\n            v53 = *s;\n            v92 = 1;\n            v93[0] = v53;\n            v89 = 1;\n            goto LABEL_113;\n          }\n          if ( !mbsinit(&v88) )\n            goto LABEL_172;\n          v87 = 1;\n        }\n        v55 = __ctype_get_mb_cur_max();\n        v56 = s;\n        v57 = sub_407340((__int64)s, v55);\n        v58 = sub_408FC0(v93, v56, v57, &v88);\n        v91 = v58;\n        switch ( v58 )\n        {\n          case 0xFFFFFFFFFFFFFFFFLL:\n            v91 = 1LL;\n            v92 = 0;\n            continue;\n          case 0xFFFFFFFFFFFFFFFELL:\n            v59 = strlen(s);\n            v92 = 0;\n            v91 = v59;\n            continue;\n          case 0uLL:\n            v91 = 1LL;\n            if ( *s )\n              goto LABEL_173;\n            if ( v93[0] )\n              goto LABEL_161;\n            break;\n        }\n        v92 = 1;\n        if ( mbsinit(&v88) )\n          v87 = 0;\n        v89 = 1;\nLABEL_113:\n        if ( !v93[0] )\n          goto LABEL_114;\n      }\n    }\n    if ( v89 )\n    {\n      if ( !v92 )\n        goto LABEL_133;\n      goto LABEL_132;\n    }\nLABEL_129:\n    if ( !v87 )\n    {\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n      {\n        v91 = 1LL;\n        v61 = *s;\n        v92 = 1;\n        v93[0] = v61;\n        v89 = 1;\n        goto LABEL_132;\n      }\n      if ( !mbsinit(&v88) )\n        goto LABEL_172;\n      v87 = 1;\n    }\n    v65 = __ctype_get_mb_cur_max();\n    v66 = s;\n    v67 = sub_407340((__int64)s, v65);\n    v68 = sub_408FC0(v93, v66, v67, &v88);\n    v91 = v68;\n    switch ( v68 )\n    {\n      case 0xFFFFFFFFFFFFFFFFLL:\n        v91 = 1LL;\n        v92 = 0;\n        v89 = 1;\n        goto LABEL_133;\n      case 0xFFFFFFFFFFFFFFFELL:\n        v74 = strlen(s);\n        v92 = 0;\n        v91 = v74;\n        v89 = 1;\n        goto LABEL_133;\n      case 0uLL:\n        v91 = 1LL;\n        if ( *s )\n          goto LABEL_173;\n        if ( v93[0] )\n          goto LABEL_161;\n        break;\n    }\n    v92 = 1;\n    if ( mbsinit(&v88) )\n      v87 = 0;\n    v89 = 1;\nLABEL_132:\n    if ( !v93[0] )\n    {\nLABEL_114:\n      v26 = sub_409A40(a1, (unsigned __int64)a2, (char **)ps);\n      if ( v26 )\n        return *(_QWORD *)ps;\n      v54 = v96.m128i_i8[0];\nLABEL_134:\n      v80 = v25++;\n      if ( !v54 )\n        goto LABEL_88;\n      goto LABEL_37;\n    }\nLABEL_133:\n    v54 = v96.m128i_i8[0];\n    v26 = 1;\n    goto LABEL_134;\n  }\n  v4 = *a2;\n  result = (size_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = *a1;\n  if ( !*a1 )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = a2[1];\n    if ( !v18 )\n      return (size_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    v16 = v11 & (v8 > 9);\n    if ( v16 )\n    {\n      if ( v14 < 5 * v8\n        || v7 && (v76 = (char *)v7, v12 = strnlen(v7, v14 - (_QWORD)v10), v10 = (char *)v14, v7 = &v76[v12], v76[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v77 = v10;\n        v13 = strlen(a2);\n        v11 = sub_409890(v15, (__int64)a2, v13, ps);\n        v10 = v77;\n        if ( v11 )\n          return *(_QWORD *)ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = &a2[v19];\n  v21 = &v3[v19];\n  while ( 1 )\n  {\n    v23 = v20[v14];\n    if ( !v23 )\n      return (size_t)v3;\n    v22 = v21[v14];\n    if ( !v22 )\n      return 0LL;\n    ++v14;\n    if ( v23 != v22 )\n      goto LABEL_12;\n  }\n}\n\nsize_t __fastcall sub_40A420(char *a1, char *a2)\n{\n  char *v3; // rbp\n  char v4; // r15\n  size_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  char *v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  char v16; // bp\n  wchar_t v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  char *v20; // rdi\n  char *v21; // rdx\n  char v22; // si\n  char v23; // cl\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rbx\n  char v26; // r14\n  __int32 v27; // eax\n  wchar_t v28; // ecx\n  __m128i si128; // xmm1\n  __m128i v30; // xmm0\n  __m128i v31; // xmm2\n  __m128i v32; // xmm3\n  unsigned int v33; // eax\n  wchar_t v34; // eax\n  int v35; // eax\n  int v36; // eax\n  bool v37; // al\n  __int64 v38; // rax\n  char *v39; // r15\n  __int64 v40; // rax\n  size_t v41; // rax\n  size_t v42; // r15\n  __int64 v43; // rax\n  char *v44; // r15\n  __int64 v45; // rax\n  void *v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  void *v51; // rax\n  unsigned __int64 v52; // r14\n  wchar_t v53; // eax\n  __int8 v54; // dl\n  __int64 v55; // rax\n  char *v56; // r15\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  size_t v60; // rax\n  wchar_t v61; // eax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  __int64 v65; // rax\n  char *v66; // r14\n  __int64 v67; // rax\n  size_t v68; // rax\n  __int64 mb_cur_max; // rax\n  char *v70; // r12\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  size_t v75; // rax\n  char *v76; // [rsp+0h] [rbp-188h]\n  char *v77; // [rsp+0h] [rbp-188h]\n  char *v78; // [rsp+0h] [rbp-188h]\n  char *v79; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v80; // [rsp+8h] [rbp-180h]\n  mbstate_t v81; // [rsp+14h] [rbp-174h] BYREF\n  char v82; // [rsp+1Ch] [rbp-16Ch]\n  char *v83; // [rsp+20h] [rbp-168h]\n  size_t v84; // [rsp+28h] [rbp-160h]\n  char v85; // [rsp+30h] [rbp-158h]\n  wchar_t v86[7]; // [rsp+34h] [rbp-154h] BYREF\n  char v87; // [rsp+50h] [rbp-138h]\n  mbstate_t v88; // [rsp+54h] [rbp-134h] BYREF\n  char v89; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v91; // [rsp+68h] [rbp-120h]\n  char v92; // [rsp+70h] [rbp-118h]\n  wchar_t v93[7]; // [rsp+74h] [rbp-114h] BYREF\n  __m128i v94; // [rsp+90h] [rbp-F8h] BYREF\n  size_t n[2]; // [rsp+A0h] [rbp-E8h] BYREF\n  __m128i v96; // [rsp+B0h] [rbp-D8h] BYREF\n  __m128i v97; // [rsp+C0h] [rbp-C8h] BYREF\n  mbstate_t v98[2]; // [rsp+D0h] [rbp-B8h] BYREF\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __int128 v100[2]; // [rsp+F0h] [rbp-98h] BYREF\n  char ps[12]; // [rsp+110h] [rbp-78h] BYREF\n  char v102; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v104; // [rsp+128h] [rbp-60h]\n  char v105; // [rsp+130h] [rbp-58h]\n  wchar_t pwc[21]; // [rsp+134h] [rbp-54h] BYREF\n\n  v3 = a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v83 = a2;\n    v82 = 0;\n    v81 = 0LL;\n    if ( (((unsigned int)dword_410680[(unsigned __int8)v17 >> 5] >> v17) & 1) != 0 )\n    {\n      v84 = 1LL;\n      v86[0] = v17;\n      v85 = 1;\n      v82 = 1;\nLABEL_17:\n      if ( !v86[0] )\n        return (size_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v81) )\n      goto LABEL_172;\n    mb_cur_max = __ctype_get_mb_cur_max();\n    v70 = v83;\n    v71 = sub_407340((__int64)v83, mb_cur_max);\n    v72 = sub_408FC0(v86, v70, v71, &v81);\n    v84 = v72;\n    if ( v72 == -1LL )\n    {\n      v84 = 1LL;\n      v85 = 0;\n      v82 = 1;\n    }\n    else\n    {\n      if ( v72 != -2LL )\n      {\n        if ( !v72 )\n        {\n          v84 = 1LL;\n          if ( *v83 )\n            goto LABEL_173;\n          if ( v86[0] )\n            goto LABEL_161;\n        }\n        v85 = 1;\n        mbsinit(&v81);\n        v82 = 1;\n        goto LABEL_17;\n      }\n      v75 = strlen(v83);\n      v85 = 0;\n      v84 = v75;\n      v82 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v24 = 0LL;\n    v25 = 0LL;\n    v26 = 1;\n    v87 = 0;\n    v88 = 0LL;\n    v89 = 0;\n    n[0] = (size_t)a1;\n    v94.m128i_i8[0] = 0;\n    *(__int64 *)((char *)v94.m128i_i64 + 4) = 0LL;\n    v94.m128i_i8[12] = 0;\n    v80 = 0LL;\n    while ( 1 )\n    {\n      if ( !v94.m128i_i8[0] )\n      {\n        if ( (((unsigned int)dword_410680[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1) != 0 )\n        {\n          n[1] = 1LL;\n          v27 = *(char *)n[0];\n          v96.m128i_i8[0] = 1;\n          v96.m128i_i32[1] = v27;\n          v94.m128i_i8[12] = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)v94.m128i_i64 + 4)) )\n          goto LABEL_172;\n        v94.m128i_i8[0] = 1;\n      }\n      v47 = __ctype_get_mb_cur_max();\n      v78 = (char *)n[0];\n      v48 = sub_407340(n[0], v47);\n      v49 = sub_408FC0(&v96.m128i_i32[1], v78, v48, (mbstate_t *)((char *)v94.m128i_i64 + 4));\n      n[1] = v49;\n      if ( v49 == -1LL )\n      {\n        n[1] = 1LL;\n        v96.m128i_i8[0] = 0;\n        v94.m128i_i8[12] = 1;\n        goto LABEL_85;\n      }\n      if ( v49 == -2LL )\n        break;\n      if ( !v49 )\n      {\n        n[1] = 1LL;\n        if ( *(_BYTE *)n[0] )\n          goto LABEL_173;\n        if ( v96.m128i_i32[1] )\n          goto LABEL_161;\n      }\n      v96.m128i_i8[0] = 1;\n      if ( mbsinit((const mbstate_t *)((char *)v94.m128i_i64 + 4)) )\n        v94.m128i_i8[0] = 0;\n      v94.m128i_i8[12] = 1;\nLABEL_33:\n      if ( !v96.m128i_i32[1] )\n        return 0LL;\n      if ( ((unsigned __int8)v26 & (v24 > 9)) != 0 )\n      {\n        if ( v25 >= 5 * v24 )\n          goto LABEL_106;\n        ++v25;\n        v26 &= v24 > 9;\n      }\n      else\n      {\n        ++v25;\n      }\nLABEL_37:\n      if ( v85 )\n      {\n        if ( v96.m128i_i32[1] == v86[0] )\n          goto LABEL_39;\nLABEL_66:\n        v42 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v42 = n[1];\n      if ( n[1] == v84 && !memcmp((const void *)n[0], v83, n[1]) )\n      {\nLABEL_39:\n        v28 = *a2;\n        si128 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v30 = _mm_load_si128(&v94);\n        ps[0] = 0;\n        *(__m128i *)s1 = si128;\n        v31 = _mm_load_si128(&v96);\n        s1[0] = (void *)(si128.m128i_i64[1] + si128.m128i_i64[0]);\n        v32 = _mm_load_si128(&v97);\n        *(__m128i *)&v98[0].__count = v30;\n        v100[0] = (__int128)v31;\n        v33 = dword_410680[(unsigned __int8)v28 >> 5];\n        v100[1] = (__int128)v32;\n        v98[1].__wchb[0] = 0;\n        v102 = 0;\n        *(_QWORD *)&ps[4] = 0LL;\n        if ( ((v33 >> v28) & 1) != 0 )\n        {\n          v104 = 1LL;\n          pwc[0] = v28;\n          v105 = 1;\n          v102 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((const mbstate_t *)&ps[4]) )\n        {\n          ps[0] = 1;\n          v62 = __ctype_get_mb_cur_max();\n          v79 = (char *)s2;\n          v63 = sub_407340((__int64)s2, v62);\n          v64 = sub_408FC0(pwc, v79, v63, (mbstate_t *)&ps[4]);\n          v104 = v64;\n          switch ( v64 )\n          {\n            case 0xFFFFFFFFFFFFFFFFLL:\n              v104 = 1LL;\n              v105 = 0;\n              break;\n            case 0xFFFFFFFFFFFFFFFELL:\n              v73 = strlen((const char *)s2);\n              v105 = 0;\n              v104 = v73;\n              break;\n            case 0uLL:\n              v104 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc[0] )\n                  goto LABEL_142;\nLABEL_161:\n                sub_409A20();\n              }\nLABEL_173:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            default:\nLABEL_142:\n              v105 = 1;\n              if ( mbsinit((const mbstate_t *)&ps[4]) )\n                ps[0] = 0;\n              v102 = 1;\nLABEL_41:\n              if ( !pwc[0] )\n                abort();\n              break;\n          }\n          v102 = 0;\n          ++v25;\n          s2 = (char *)s2 + v104;\n          while ( 2 )\n          {\n            if ( ps[0] )\n            {\nLABEL_55:\n              v38 = __ctype_get_mb_cur_max();\n              v39 = (char *)s2;\n              v40 = sub_407340((__int64)s2, v38);\n              v41 = sub_408FC0(pwc, v39, v40, (mbstate_t *)&ps[4]);\n              v104 = v41;\n              if ( v41 == -1LL )\n              {\n                v104 = 1LL;\n                v105 = 0;\n                v102 = 1;\n              }\n              else if ( v41 == -2LL )\n              {\n                v50 = strlen((const char *)s2);\n                v105 = 0;\n                v104 = v50;\n                v102 = 1;\n              }\n              else\n              {\n                if ( !v41 )\n                {\n                  v104 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_173;\n                  if ( pwc[0] )\n                    goto LABEL_161;\n                }\n                v105 = 1;\n                if ( mbsinit((const mbstate_t *)&ps[4]) )\n                  ps[0] = 0;\n                v102 = 1;\n                if ( !pwc[0] )\n                  return n[0];\n              }\n            }\n            else\n            {\n              if ( (((unsigned int)dword_410680[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) == 0 )\n              {\n                if ( !mbsinit((const mbstate_t *)&ps[4]) )\n                  goto LABEL_172;\n                ps[0] = 1;\n                goto LABEL_55;\n              }\n              v104 = 1LL;\n              v34 = *(char *)s2;\n              v105 = 1;\n              pwc[0] = v34;\n              v102 = 1;\n              if ( !v34 )\n                return n[0];\n            }\n            if ( !v98[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v98[0].__count) )\n              {\n                if ( (((unsigned int)dword_410680[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1) != 0 )\n                {\n                  s1[1] = (void *)1;\n                  v35 = *(char *)s1[0];\n                  LOBYTE(v100[0]) = 1;\n                  DWORD1(v100[0]) = v35;\n                  v98[1].__wchb[0] = 1;\nLABEL_49:\n                  v36 = DWORD1(v100[0]);\n                  if ( !DWORD1(v100[0]) )\n                    return 0LL;\nLABEL_50:\n                  if ( v105 )\n                  {\n                    v37 = pwc[0] != v36;\nLABEL_52:\n                    if ( v37 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v25;\n                    s2 = (char *)s2 + v104;\n                    v98[1].__wchb[0] = 0;\n                    v102 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v104 )\n                    goto LABEL_66;\n                  v37 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((const mbstate_t *)&v98[0].4) )\n                  goto LABEL_172;\n                LOBYTE(v98[0].__count) = 1;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = (char *)s1[0];\n              v45 = sub_407340((__int64)s1[0], v43);\n              v46 = (void *)sub_408FC0((wchar_t *)v100 + 1, v44, v45, (mbstate_t *)&v98[0].4);\n              s1[1] = v46;\n              if ( v46 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                LOBYTE(v100[0]) = 0;\n                v98[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v46 != (void *)-2LL )\n                {\n                  if ( !v46 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_173;\n                    if ( DWORD1(v100[0]) )\n                      goto LABEL_161;\n                  }\n                  LOBYTE(v100[0]) = 1;\n                  if ( mbsinit((const mbstate_t *)&v98[0].4) )\n                    LOBYTE(v98[0].__count) = 0;\n                  v36 = DWORD1(v100[0]);\n                  v98[1].__wchb[0] = 1;\n                  if ( !DWORD1(v100[0]) )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v51 = (void *)strlen((const char *)s1[0]);\n                LOBYTE(v100[0]) = 0;\n                s1[1] = v51;\n                v98[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( LOBYTE(v100[0]) )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_172:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v42;\n      ++v24;\n      v94.m128i_i8[12] = 0;\n    }\n    v60 = strlen((const char *)n[0]);\n    v96.m128i_i8[0] = 0;\n    n[1] = v60;\n    v94.m128i_i8[12] = 1;\nLABEL_85:\n    if ( ((unsigned __int8)v26 & (v24 > 9)) == 0 )\n    {\n      ++v25;\n      goto LABEL_88;\n    }\n    if ( v25 < 5 * v24 )\n    {\n      ++v25;\n      v26 &= v24 > 9;\n      goto LABEL_88;\n    }\nLABEL_106:\n    v52 = v25 - v80;\n    if ( v25 != v80 )\n    {\n      if ( !v89 )\n        goto LABEL_110;\n      if ( v92 )\n        goto LABEL_113;\n      while ( 1 )\n      {\n        v89 = 0;\n        s += v91;\n        if ( !--v52 )\n          goto LABEL_129;\nLABEL_110:\n        if ( !v87 )\n        {\n          if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n          {\n            v91 = 1LL;\n            v53 = *s;\n            v92 = 1;\n            v93[0] = v53;\n            v89 = 1;\n            goto LABEL_113;\n          }\n          if ( !mbsinit(&v88) )\n            goto LABEL_172;\n          v87 = 1;\n        }\n        v55 = __ctype_get_mb_cur_max();\n        v56 = s;\n        v57 = sub_407340((__int64)s, v55);\n        v58 = sub_408FC0(v93, v56, v57, &v88);\n        v91 = v58;\n        switch ( v58 )\n        {\n          case 0xFFFFFFFFFFFFFFFFLL:\n            v91 = 1LL;\n            v92 = 0;\n            continue;\n          case 0xFFFFFFFFFFFFFFFELL:\n            v59 = strlen(s);\n            v92 = 0;\n            v91 = v59;\n            continue;\n          case 0uLL:\n            v91 = 1LL;\n            if ( *s )\n              goto LABEL_173;\n            if ( v93[0] )\n              goto LABEL_161;\n            break;\n        }\n        v92 = 1;\n        if ( mbsinit(&v88) )\n          v87 = 0;\n        v89 = 1;\nLABEL_113:\n        if ( !v93[0] )\n          goto LABEL_114;\n      }\n    }\n    if ( v89 )\n    {\n      if ( !v92 )\n        goto LABEL_133;\n      goto LABEL_132;\n    }\nLABEL_129:\n    if ( !v87 )\n    {\n      if ( (((unsigned int)dword_410680[((unsigned __int8)*s >> 5) & 7] >> *s) & 1) != 0 )\n      {\n        v91 = 1LL;\n        v61 = *s;\n        v92 = 1;\n        v93[0] = v61;\n        v89 = 1;\n        goto LABEL_132;\n      }\n      if ( !mbsinit(&v88) )\n        goto LABEL_172;\n      v87 = 1;\n    }\n    v65 = __ctype_get_mb_cur_max();\n    v66 = s;\n    v67 = sub_407340((__int64)s, v65);\n    v68 = sub_408FC0(v93, v66, v67, &v88);\n    v91 = v68;\n    switch ( v68 )\n    {\n      case 0xFFFFFFFFFFFFFFFFLL:\n        v91 = 1LL;\n        v92 = 0;\n        v89 = 1;\n        goto LABEL_133;\n      case 0xFFFFFFFFFFFFFFFELL:\n        v74 = strlen(s);\n        v92 = 0;\n        v91 = v74;\n        v89 = 1;\n        goto LABEL_133;\n      case 0uLL:\n        v91 = 1LL;\n        if ( *s )\n          goto LABEL_173;\n        if ( v93[0] )\n          goto LABEL_161;\n        break;\n    }\n    v92 = 1;\n    if ( mbsinit(&v88) )\n      v87 = 0;\n    v89 = 1;\nLABEL_132:\n    if ( !v93[0] )\n    {\nLABEL_114:\n      v26 = sub_409A40(a1, (unsigned __int64)a2, (char **)ps);\n      if ( v26 )\n        return *(_QWORD *)ps;\n      v54 = v96.m128i_i8[0];\nLABEL_134:\n      v80 = v25++;\n      if ( !v54 )\n        goto LABEL_88;\n      goto LABEL_37;\n    }\nLABEL_133:\n    v54 = v96.m128i_i8[0];\n    v26 = 1;\n    goto LABEL_134;\n  }\n  v4 = *a2;\n  result = (size_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = *a1;\n  if ( !*a1 )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = a2[1];\n    if ( !v18 )\n      return (size_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    v16 = v11 & (v8 > 9);\n    if ( v16 )\n    {\n      if ( v14 < 5 * v8\n        || v7 && (v76 = (char *)v7, v12 = strnlen(v7, v14 - (_QWORD)v10), v10 = (char *)v14, v7 = &v76[v12], v76[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v77 = v10;\n        v13 = strlen(a2);\n        v11 = sub_409890(v15, (__int64)a2, v13, ps);\n        v10 = v77;\n        if ( v11 )\n          return *(_QWORD *)ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = &a2[v19];\n  v21 = &v3[v19];\n  while ( 1 )\n  {\n    v23 = v20[v14];\n    if ( !v23 )\n      return (size_t)v3;\n    v22 = v21[v14];\n    if ( !v22 )\n      return 0LL;\n    ++v14;\n    if ( v23 != v22 )\n      goto LABEL_12;\n  }\n}\n"
        },
        {
            "funcName": "sub_40B2F0",
            "funcStartAddr": "0x401a6d",
            "funcEndAddr": "0x401a72",
            "decompiledFuncCode": "__int64 __fastcall sub_40B2F0(char *a1, char *a2, void *a3, void **a4, size_t *a5)\n{\n  char *v5; // r13\n  __int64 v7; // r14\n  int v8; // eax\n  void *v9; // r14\n  unsigned int v10; // ebx\n  int *v12; // rax\n  int v13; // r12d\n  int *v14; // rbp\n  size_t size; // [rsp+0h] [rbp-1078h]\n  char *inbuf; // [rsp+20h] [rbp-1058h] BYREF\n  size_t inbytesleft; // [rsp+28h] [rbp-1050h] BYREF\n  char *outbuf; // [rsp+30h] [rbp-1048h] BYREF\n  size_t outbytesleft; // [rsp+38h] [rbp-1040h] BYREF\n  size_t v22[519]; // [rsp+40h] [rbp-1038h] BYREF\n\n  v5 = a2;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)v22;\n      outbytesleft = 4096LL;\n      if ( iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      return (unsigned int)-1;\n  }\nLABEL_7:\n  outbuf = (char *)v22;\n  outbytesleft = 4096LL;\n  if ( iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\n    return (unsigned int)-1;\n  size = v7 + outbuf - (char *)v22;\n  if ( !size )\n  {\n    v10 = 0;\n    *a5 = 0LL;\n    return v10;\n  }\n  v9 = *a4;\n  if ( !*a4 || *a5 < size )\n  {\n    v9 = malloc(size);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      return (unsigned int)-1;\n    }\n  }\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22[0] = size;\n  while ( v5 )\n  {\n    if ( iconv(a3, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(a3, 0LL, 0LL, (char **)&outbytesleft, v22) != -1LL )\n  {\n    if ( v22[0] )\n      abort();\n    v10 = 0;\n    *a4 = v9;\n    *a5 = size;\n    return v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *a4 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return v10;\n}\n\n__int64 __fastcall sub_40B2F0(char *a1, char *a2, void *a3, void **a4, size_t *a5)\n{\n  char *v5; // r13\n  __int64 v7; // r14\n  int v8; // eax\n  void *v9; // r14\n  unsigned int v10; // ebx\n  int *v12; // rax\n  int v13; // r12d\n  int *v14; // rbp\n  size_t size; // [rsp+0h] [rbp-1078h]\n  char *inbuf; // [rsp+20h] [rbp-1058h] BYREF\n  size_t inbytesleft; // [rsp+28h] [rbp-1050h] BYREF\n  char *outbuf; // [rsp+30h] [rbp-1048h] BYREF\n  size_t outbytesleft; // [rsp+38h] [rbp-1040h] BYREF\n  size_t v22[519]; // [rsp+40h] [rbp-1038h] BYREF\n\n  v5 = a2;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)v22;\n      outbytesleft = 4096LL;\n      if ( iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      return (unsigned int)-1;\n  }\nLABEL_7:\n  outbuf = (char *)v22;\n  outbytesleft = 4096LL;\n  if ( iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\n    return (unsigned int)-1;\n  size = v7 + outbuf - (char *)v22;\n  if ( !size )\n  {\n    v10 = 0;\n    *a5 = 0LL;\n    return v10;\n  }\n  v9 = *a4;\n  if ( !*a4 || *a5 < size )\n  {\n    v9 = malloc(size);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      return (unsigned int)-1;\n    }\n  }\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22[0] = size;\n  while ( v5 )\n  {\n    if ( iconv(a3, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(a3, 0LL, 0LL, (char **)&outbytesleft, v22) != -1LL )\n  {\n    if ( v22[0] )\n      abort();\n    v10 = 0;\n    *a4 = v9;\n    *a5 = size;\n    return v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *a4 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_40B2F0",
            "funcStartAddr": "0x401a6d",
            "funcEndAddr": "0x401a72",
            "decompiledFuncCode": "__int64 __fastcall sub_40B2F0(char *a1, char *a2, void *a3, void **a4, size_t *a5)\n{\n  char *v5; // r13\n  __int64 v7; // r14\n  int v8; // eax\n  void *v9; // r14\n  unsigned int v10; // ebx\n  int *v12; // rax\n  int v13; // r12d\n  int *v14; // rbp\n  size_t size; // [rsp+0h] [rbp-1078h]\n  char *inbuf; // [rsp+20h] [rbp-1058h] BYREF\n  size_t inbytesleft; // [rsp+28h] [rbp-1050h] BYREF\n  char *outbuf; // [rsp+30h] [rbp-1048h] BYREF\n  size_t outbytesleft; // [rsp+38h] [rbp-1040h] BYREF\n  size_t v22[519]; // [rsp+40h] [rbp-1038h] BYREF\n\n  v5 = a2;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)v22;\n      outbytesleft = 4096LL;\n      if ( iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      return (unsigned int)-1;\n  }\nLABEL_7:\n  outbuf = (char *)v22;\n  outbytesleft = 4096LL;\n  if ( iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\n    return (unsigned int)-1;\n  size = v7 + outbuf - (char *)v22;\n  if ( !size )\n  {\n    v10 = 0;\n    *a5 = 0LL;\n    return v10;\n  }\n  v9 = *a4;\n  if ( !*a4 || *a5 < size )\n  {\n    v9 = malloc(size);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      return (unsigned int)-1;\n    }\n  }\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22[0] = size;\n  while ( v5 )\n  {\n    if ( iconv(a3, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(a3, 0LL, 0LL, (char **)&outbytesleft, v22) != -1LL )\n  {\n    if ( v22[0] )\n      abort();\n    v10 = 0;\n    *a4 = v9;\n    *a5 = size;\n    return v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *a4 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return v10;\n}\n\n__int64 __fastcall sub_40B2F0(char *a1, char *a2, void *a3, void **a4, size_t *a5)\n{\n  char *v5; // r13\n  __int64 v7; // r14\n  int v8; // eax\n  void *v9; // r14\n  unsigned int v10; // ebx\n  int *v12; // rax\n  int v13; // r12d\n  int *v14; // rbp\n  size_t size; // [rsp+0h] [rbp-1078h]\n  char *inbuf; // [rsp+20h] [rbp-1058h] BYREF\n  size_t inbytesleft; // [rsp+28h] [rbp-1050h] BYREF\n  char *outbuf; // [rsp+30h] [rbp-1048h] BYREF\n  size_t outbytesleft; // [rsp+38h] [rbp-1040h] BYREF\n  size_t v22[519]; // [rsp+40h] [rbp-1038h] BYREF\n\n  v5 = a2;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)v22;\n      outbytesleft = 4096LL;\n      if ( iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      return (unsigned int)-1;\n  }\nLABEL_7:\n  outbuf = (char *)v22;\n  outbytesleft = 4096LL;\n  if ( iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\n    return (unsigned int)-1;\n  size = v7 + outbuf - (char *)v22;\n  if ( !size )\n  {\n    v10 = 0;\n    *a5 = 0LL;\n    return v10;\n  }\n  v9 = *a4;\n  if ( !*a4 || *a5 < size )\n  {\n    v9 = malloc(size);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      return (unsigned int)-1;\n    }\n  }\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22[0] = size;\n  while ( v5 )\n  {\n    if ( iconv(a3, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(a3, 0LL, 0LL, (char **)&outbytesleft, v22) != -1LL )\n  {\n    if ( v22[0] )\n      abort();\n    v10 = 0;\n    *a4 = v9;\n    *a5 = size;\n    return v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *a4 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_40B540",
            "funcStartAddr": "0x40b540",
            "funcEndAddr": "0x40b705",
            "decompiledFuncCode": "char *__fastcall sub_40B540(char *a1, void *a2)\n{\n  size_t v2; // rax\n  __int64 v3; // rbx\n  unsigned __int64 v4; // r13\n  char *v5; // r12\n  int *v6; // r15\n  __int64 v7; // rbp\n  char *v8; // rbx\n  char *v9; // rax\n  __int64 v10; // rbp\n  char *v11; // rbx\n  char *v12; // rax\n  char *v13; // rax\n  void *v14; // rax\n  void *v15; // rdi\n  char *v17; // [rsp+0h] [rbp-58h] BYREF\n  size_t inbytesleft; // [rsp+8h] [rbp-50h] BYREF\n  char *outbuf; // [rsp+10h] [rbp-48h] BYREF\n  size_t outbytesleft[8]; // [rsp+18h] [rbp-40h] BYREF\n\n  v17 = a1;\n  v2 = strlen(a1);\n  inbytesleft = v2;\n  v3 = 16 * v2;\n  if ( v2 >= 0x10000000 )\n    v3 = v2;\n  v4 = v3 + 1;\n  v5 = (char *)malloc(v3 + 1);\n  if ( v5 )\n  {\n    iconv(a2, 0LL, 0LL, 0LL, 0LL);\n    outbuf = v5;\n    for ( outbytesleft[0] = v3;\n          iconv(a2, &v17, &inbytesleft, &outbuf, outbytesleft) == -1LL;\n          outbytesleft[0] = v7 - 1 - (_QWORD)v8 )\n    {\n      v6 = __errno_location();\n      if ( *v6 == 22 )\n        break;\n      if ( *v6 != 7 )\n        goto LABEL_22;\n      v7 = 2 * v4;\n      v8 = (char *)(outbuf - v5);\n      if ( v4 >= 2 * v4 || (v9 = (char *)realloc(v5, 2 * v4)) == 0LL )\n      {\nLABEL_21:\n        *v6 = 12;\nLABEL_22:\n        v15 = v5;\n        v5 = 0LL;\n        free(v15);\n        return v5;\n      }\n      v5 = v9;\n      v4 *= 2LL;\n      outbuf = &v8[(_QWORD)v9];\n    }\n    while ( iconv(a2, 0LL, 0LL, &outbuf, outbytesleft) == -1LL )\n    {\n      v6 = __errno_location();\n      if ( *v6 != 7 )\n        goto LABEL_22;\n      v10 = 2 * v4;\n      v11 = (char *)(outbuf - v5);\n      if ( v4 >= 2 * v4 )\n        goto LABEL_21;\n      v12 = (char *)realloc(v5, 2 * v4);\n      if ( !v12 )\n        goto LABEL_21;\n      v4 *= 2LL;\n      v5 = v12;\n      outbuf = &v11[(_QWORD)v12];\n      outbytesleft[0] = v10 - 1 - (_QWORD)v11;\n    }\n    v13 = outbuf++;\n    *v13 = 0;\n    if ( v4 > outbuf - v5 )\n    {\n      v14 = realloc(v5, outbuf - v5);\n      if ( v14 )\n        return (char *)v14;\n    }\n  }\n  else\n  {\n    *__errno_location() = 12;\n  }\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_40B710",
            "funcStartAddr": "0x40b710",
            "funcEndAddr": "0x40b7fc",
            "decompiledFuncCode": "char *__fastcall sub_40B710(char *s, char *fromcode, char *tocode)\n{\n  char *v4; // rbx\n  iconv_t v6; // rax\n  void *v7; // rbp\n  int *v8; // rax\n  char *v9; // rdi\n  int v10; // r12d\n  int *v11; // rbp\n  int *v12; // rax\n  int v13; // r13d\n  int *v14; // r12\n\n  if ( *s && (unsigned int)sub_409150((__int64)fromcode, (__int64)tocode) )\n  {\n    v6 = iconv_open(tocode, fromcode);\n    v7 = v6;\n    if ( v6 == (iconv_t)-1LL )\n      return 0LL;\n    v4 = sub_40B540(s, v6);\n    if ( v4 )\n    {\n      if ( iconv_close(v7) < 0 )\n      {\n        v8 = __errno_location();\n        v9 = v4;\n        v4 = 0LL;\n        v10 = *v8;\n        v11 = v8;\n        free(v9);\n        *v11 = v10;\n      }\n    }\n    else\n    {\n      v12 = __errno_location();\n      v13 = *v12;\n      v14 = v12;\n      iconv_close(v7);\n      *v14 = v13;\n    }\n    return v4;\n  }\n  v4 = strdup(s);\n  if ( v4 )\n    return v4;\n  *__errno_location() = 12;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40B800",
            "funcStartAddr": "0x40b800",
            "funcEndAddr": "0x40b87b",
            "decompiledFuncCode": "int __fastcall sub_40B800(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_40B880(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B880",
            "funcStartAddr": "0x40b880",
            "funcEndAddr": "0x40b8c0",
            "decompiledFuncCode": "int __fastcall sub_40B880(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_40B8C0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_40B8C0",
            "funcStartAddr": "0x40b8c0",
            "funcEndAddr": "0x40b917",
            "decompiledFuncCode": "int __fastcall sub_40B8C0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40B920",
            "funcStartAddr": "0x40b920",
            "funcEndAddr": "0x40b98c",
            "decompiledFuncCode": "__int64 __fastcall sub_40B920(__int64 a1)\n{\n  bool v1; // cf\n  size_t v2; // rdi\n  __int64 *v3; // rax\n  __int64 v4; // rcx\n  __int64 *v5; // rsi\n  unsigned __int64 v6; // rdx\n  __int64 v7; // rax\n\n  v1 = __CFADD__(a1, 16LL);\n  v2 = a1 + 16;\n  if ( v1 )\n    return 0LL;\n  v3 = (__int64 *)malloc(v2);\n  v4 = 0LL;\n  v5 = v3;\n  if ( v3 )\n  {\n    *((_DWORD *)v3 + 3) = 336984906;\n    v4 = (__int64)(v3 + 2);\n    v6 = (unsigned __int64)(v3 + 2) % 0x101;\n    v7 = qword_6134C0[v6];\n    qword_6134C0[v6] = v4;\n    *v5 = v7;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40B990",
            "funcStartAddr": "0x40b990",
            "funcEndAddr": "0x40ba16",
            "decompiledFuncCode": "void __fastcall sub_40B990(unsigned __int64 a1)\n{\n  __int64 v1; // rcx\n  __int64 v2; // rax\n  __int64 *v3; // rcx\n\n  if ( a1 )\n  {\n    if ( *(_DWORD *)(a1 - 4) == 336984906 )\n    {\n      v1 = qword_6134C0[a1 % 0x101];\n      if ( v1 )\n      {\n        if ( v1 == a1 )\n        {\n          v3 = &qword_6134C0[a1 % 0x101];\nLABEL_12:\n          *v3 = *(_QWORD *)(a1 - 16);\n          free((void *)(a1 - 16));\n        }\n        else\n        {\n          while ( 1 )\n          {\n            v2 = *(_QWORD *)(v1 - 16);\n            if ( !v2 )\n              break;\n            if ( a1 == v2 )\n            {\n              v3 = (__int64 *)(v1 - 16);\n              goto LABEL_12;\n            }\n            v1 = *(_QWORD *)(v1 - 16);\n          }\n        }\n      }\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_40BA20",
            "funcStartAddr": "0x40ba20",
            "funcEndAddr": "0x40bbec",
            "decompiledFuncCode": "size_t __fastcall sub_40BA20(char *s)\n{\n  __int64 v1; // rbx\n  wchar_t v3; // eax\n  __int64 mb_cur_max; // rax\n  char *v5; // rbp\n  __int64 v6; // rax\n  size_t v7; // rax\n  size_t v8; // rax\n  char v9; // [rsp+0h] [rbp-58h]\n  mbstate_t ps; // [rsp+4h] [rbp-54h] BYREF\n  char i; // [rsp+Ch] [rbp-4Ch]\n  char *sa; // [rsp+10h] [rbp-48h]\n  size_t v13; // [rsp+18h] [rbp-40h]\n  char v14; // [rsp+20h] [rbp-38h]\n  wchar_t pwc[13]; // [rsp+24h] [rbp-34h] BYREF\n\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    sa = s;\n    v1 = 0LL;\n    v9 = 0;\n    ps = 0LL;\n    for ( i = 0; ; i = 0 )\n    {\n      if ( !v9 )\n      {\n        if ( (((unsigned int)dword_410680[((unsigned __int8)*sa >> 5) & 7] >> *sa) & 1) != 0 )\n        {\n          v13 = 1LL;\n          v3 = *sa;\n          v14 = 1;\n          pwc[0] = v3;\n          goto LABEL_7;\n        }\n        if ( !mbsinit(&ps) )\n          __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n        v9 = 1;\n      }\n      mb_cur_max = __ctype_get_mb_cur_max();\n      v5 = sa;\n      v6 = sub_407340((__int64)sa, mb_cur_max);\n      v7 = sub_408FC0(pwc, v5, v6, &ps);\n      v13 = v7;\n      switch ( v7 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          v13 = 1LL;\n          v14 = 0;\n          goto LABEL_8;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v8 = strlen(sa);\n          v14 = 0;\n          v13 = v8;\n          goto LABEL_8;\n        case 0uLL:\n          v13 = 1LL;\n          if ( *sa )\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          if ( pwc[0] )\n            __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n          break;\n      }\n      v14 = 1;\n      if ( mbsinit(&ps) )\n        v9 = 0;\nLABEL_7:\n      if ( !pwc[0] )\n        return v1;\nLABEL_8:\n      sa += v13;\n      ++v1;\n    }\n  }\n  return strlen(s);\n}\n"
        },
        {
            "funcName": "sub_40BC60",
            "funcStartAddr": "0x40bc60",
            "funcEndAddr": "0x40bc78",
            "decompiledFuncCode": "int __fastcall sub_40BC60(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_613228 )\n    v1 = (void *)qword_613228;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_40BC78",
            "funcStartAddr": "0x40bc78",
            "funcEndAddr": "0x40bc98",
            "decompiledFuncCode": "__int64 __fastcall sub_40BC78(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_612E30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 117
}