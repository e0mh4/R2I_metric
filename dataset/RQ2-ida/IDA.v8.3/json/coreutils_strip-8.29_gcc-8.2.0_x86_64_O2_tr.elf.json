{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_tr.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x4018ff",
            "funcEndAddr": "0x401904",
            "decompiledFuncCode": "int __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  unsigned __int64 v3; // r12\n  int v4; // eax\n  int v5; // ecx\n  int v6; // r15d\n  int v7; // esi\n  int v8; // eax\n  __int64 *v9; // rbx\n  __int64 v10; // r14\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  char *v13; // rax\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rdx\n  __int64 v16; // rcx\n  char v17; // r13\n  __int64 v18; // rax\n  __int64 v19; // rdx\n  unsigned int v20; // eax\n  int v21; // eax\n  char v22; // r13\n  int result; // eax\n  __int64 v24; // rax\n  int j; // eax\n  bool v26; // zf\n  __int64 v27; // r15\n  int v28; // eax\n  __int64 v29; // r14\n  const unsigned __int16 *v30; // r15\n  __int64 v31; // rax\n  __int64 v32; // rax\n  unsigned __int8 v33; // dl\n  int v34; // eax\n  __int64 v35; // r14\n  const unsigned __int16 *v36; // r15\n  char v37; // r13\n  const unsigned __int16 **v38; // rax\n  __int64 v39; // rcx\n  const unsigned __int16 *v40; // rdx\n  __int64 *v41; // rbp\n  __int64 v42; // rax\n  __int64 v43; // rcx\n  bool v44; // r14\n  __int64 v45; // r15\n  __int64 v46; // rbx\n  int v47; // eax\n  unsigned __int64 v48; // rdx\n  __int64 v49; // rsi\n  __int64 v50; // rsi\n  __int64 v51; // rsi\n  __int64 v52; // rcx\n  int v53; // r12d\n  int v54; // eax\n  int v55; // ecx\n  size_t v56; // rax\n  __int64 i; // rax\n  __int64 v58; // rbp\n  int v59; // eax\n  size_t v60; // rax\n  char *v61; // rax\n  char *v62; // rax\n  char *v63; // rbx\n  int *v64; // rax\n  char *v65; // rax\n  char *v66; // rbx\n  int *v67; // rax\n  __int64 v68; // rbx\n  char *v69; // rax\n  const char *v70; // rsi\n  char *v71; // rax\n  char *v72; // rax\n  __int64 v73; // rbx\n  char *v74; // rax\n  char *v75; // rbx\n  int *v76; // rax\n  char *v77; // rax\n  char *v78; // rax\n  char *v79; // rax\n  char *v80; // rax\n  char *v81; // rax\n  unsigned __int64 v82; // [rsp+18h] [rbp-1F0h]\n  unsigned __int64 v83; // [rsp+20h] [rbp-1E8h]\n  __int64 v84; // [rsp+28h] [rbp-1E0h]\n  __int64 v85; // [rsp+30h] [rbp-1D8h]\n  int v86; // [rsp+3Ch] [rbp-1CCh]\n  int v87; // [rsp+4Ch] [rbp-1BCh] BYREF\n  __int64 v88; // [rsp+50h] [rbp-1B8h] BYREF\n  __int64 v89; // [rsp+58h] [rbp-1B0h]\n  __int64 v90; // [rsp+60h] [rbp-1A8h]\n  unsigned __int64 v91; // [rsp+68h] [rbp-1A0h]\n  __int64 v92; // [rsp+70h] [rbp-198h]\n  char v93; // [rsp+81h] [rbp-187h]\n  __int64 v94; // [rsp+90h] [rbp-178h] BYREF\n  __int64 v95; // [rsp+98h] [rbp-170h]\n  int v96[78]; // [rsp+D0h] [rbp-138h] BYREF\n\n  v3 = (unsigned __int64)a2;\n  sub_403F40(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_407E60(sub_403E60);\n  while ( 1 )\n  {\n    v4 = sub_4075A0(a1, a2, \"+cCdst\", &off_4082C0, 0LL);\n    if ( v4 == -1 )\n      break;\n    if ( v4 == 99 )\n      goto LABEL_14;\n    if ( v4 <= 99 )\n    {\n      if ( v4 == -130 )\n        goto LABEL_138;\n      if ( v4 != 67 )\n      {\n        if ( v4 == -131 )\n        {\n          sub_406040(\n            (_DWORD)stdout,\n            (unsigned int)\"tr\",\n            (unsigned int)&unk_407FC7,\n            (_DWORD)off_60D210,\n            (unsigned int)\"Jim Meyering\",\n            0);\n          exit(0);\n        }\nLABEL_13:\n        sub_403AC0(1);\n      }\nLABEL_14:\n      byte_60F5C2 = 1;\n    }\n    else\n    {\n      switch ( v4 )\n      {\n        case 's':\n          byte_60F5C4 = 1;\n          break;\n        case 't':\n          byte_60F5C1 = 1;\n          break;\n        case 'd':\n          byte_60F5C3 = 1;\n          break;\n        default:\n          goto LABEL_13;\n      }\n    }\n  }\n  v5 = dword_60D27C;\n  v6 = a1 - dword_60D27C;\n  if ( a1 - dword_60D27C == 2 )\n  {\n    if ( byte_60F5C3 )\n    {\n      byte_60F5C0 = 0;\n      if ( !byte_60F5C4 )\n      {\nLABEL_19:\n        v7 = 1;\n        v8 = 2 - ((unsigned __int8)byte_60F5C4 < (unsigned __int8)byte_60F5C3);\n        goto LABEL_20;\n      }\n    }\n    else\n    {\n      byte_60F5C0 = 1;\n      v8 = 2;\n      if ( byte_60F5C4 )\n        goto LABEL_21;\n    }\n    v89 = sub_406180(32LL);\n    v88 = v89;\n    *(_QWORD *)(v89 + 8) = 0LL;\n    if ( (unsigned __int8)sub_403010(a2[dword_60D27C], &v88) )\n      goto LABEL_78;\n    return 1;\n  }\n  byte_60F5C0 = 0;\n  if ( byte_60F5C4 != byte_60F5C3 )\n    goto LABEL_19;\n  v7 = 2;\n  v8 = 2;\nLABEL_20:\n  if ( v6 < v7 )\n  {\n    if ( !v6 )\n    {\n      v72 = dcgettext(0LL, \"missing operand\", 5);\n      error(0, 0, v72);\n      goto LABEL_13;\n    }\n    v73 = sub_405B60(*(_QWORD *)(v3 + 8LL * (int)a1 - 8));\n    v74 = dcgettext(0LL, \"missing operand after %s\", 5);\n    error(0, 0, v74, v73);\n    v70 = \"Two strings must be given when both deleting and squeezing repeats.\";\n    if ( !byte_60F5C4 )\n      v70 = \"Two strings must be given when translating.\";\nLABEL_145:\n    v71 = dcgettext(0LL, v70, 5);\n    __fprintf_chk(stderr, 1LL, \"%s\\n\", v71);\n    goto LABEL_13;\n  }\nLABEL_21:\n  if ( v6 > v8 )\n  {\nLABEL_143:\n    v68 = sub_405B60(*(_QWORD *)(v3 + 8LL * (v5 + v8)));\n    v69 = dcgettext(0LL, \"extra operand %s\", 5);\n    error(0, 0, v69, v68);\n    if ( v6 != 2 )\n      goto LABEL_13;\n    v70 = \"Only one string may be given when deleting without squeezing repeats.\";\n    goto LABEL_145;\n  }\n  v89 = sub_406180(32LL);\n  v88 = v89;\n  *(_QWORD *)(v89 + 8) = 0LL;\n  if ( !(unsigned __int8)sub_403010(*(_QWORD *)(v3 + 8LL * dword_60D27C), &v88) )\n    return 1;\n  v9 = 0LL;\n  if ( v6 != 2 )\n    goto LABEL_24;\nLABEL_78:\n  v95 = sub_406180(32LL);\n  v94 = v95;\n  *(_QWORD *)(v95 + 8) = 0LL;\n  if ( !(unsigned __int8)sub_403010(*(_QWORD *)(v3 + 8LL * dword_60D27C + 8), &v94) )\n    return 1;\n  v9 = &v94;\nLABEL_24:\n  sub_402A40(&v88);\n  if ( byte_60F5C2 )\n  {\n    v90 = -2LL;\n    LODWORD(v3) = 256;\n    memset(v96, 0, 0x100uLL);\n    while ( 1 )\n    {\n      v34 = sub_402BC0(&v88, 0LL);\n      if ( v34 == -1 )\n        break;\n      v33 = *((_BYTE *)v96 + v34);\n      *((_BYTE *)v96 + v34) = 1;\n      LODWORD(v3) = v3 - (v33 ^ 1);\n    }\n    v3 = (int)v3;\n    v91 = (int)v3;\n  }\n  v10 = v92;\n  if ( v92 )\n    goto LABEL_153;\n  if ( !v9 )\n    goto LABEL_43;\n  v3 = v91;\n  sub_402A40(v9);\n  v11 = v9[3];\n  if ( v3 >= v11 && v9[4] == 1 )\n  {\n    v26 = byte_60F5C0 == 0;\n    *(_QWORD *)(v9[5] + 24) = v3 - v11;\n    v9[3] = v3;\n    if ( v26 )\n      goto LABEL_32;\n    goto LABEL_89;\n  }\n  v12 = v9[4];\n  if ( v12 > 1 )\n  {\n    v62 = dcgettext(0LL, \"only one [c*] repeat construct may appear in string2\", 5);\n    error(1, 0, v62);\nLABEL_140:\n    v63 = dcgettext(0LL, \"standard input\", 5);\n    v64 = __errno_location();\n    error(1, *v64, v63);\nLABEL_141:\n    v65 = dcgettext(\n            0LL,\n            \"when translating with string1 longer than string2,\\nthe latter string must not end with a character class\",\n            5);\n    error(1, 0, v65);\nLABEL_142:\n    v66 = dcgettext(0LL, \"write error\", 5);\n    v67 = __errno_location();\n    error(1, *v67, v66);\n    goto LABEL_143;\n  }\n  if ( !byte_60F5C0 )\n  {\n    if ( !v12 )\n      goto LABEL_43;\nLABEL_32:\n    v13 = dcgettext(0LL, \"the [c*] construct may appear in string2 only when translating\", 5);\n    error(1, 0, v13);\nLABEL_33:\n    v17 = *(_BYTE *)(v16 + 16);\nLABEL_34:\n    v3 = v14 - v15;\n    v18 = sub_406180(32LL);\n    v19 = v9[1];\n    *(_QWORD *)(v18 + 8) = 0LL;\n    *(_DWORD *)v18 = 4;\n    *(_BYTE *)(v18 + 16) = v17;\n    *(_QWORD *)(v18 + 24) = v3;\n    if ( !v19 )\n      goto LABEL_157;\n    *(_QWORD *)(v19 + 8) = v18;\n    v9[1] = v18;\n    v9[3] = v91;\n    goto LABEL_36;\n  }\nLABEL_89:\n  if ( *((_BYTE *)v9 + 48) )\n    goto LABEL_155;\n  if ( *((_BYTE *)v9 + 50) )\n    goto LABEL_154;\n  v37 = *((_BYTE *)v9 + 49);\n  if ( !v37 )\n    goto LABEL_112;\n  v38 = __ctype_b_loc();\n  v39 = 0LL;\n  v40 = *v38;\n  do\n  {\n    v10 -= ((*v40 & 0x100) == 0) - 1LL;\n    v39 -= ((*v40++ & 0x200) == 0) - 1LL;\n  }\n  while ( v40 != *v38 + 256 );\n  v86 = v6;\n  v41 = v9;\n  v82 = v91;\n  v83 = v9[3];\n  v84 = v89;\n  v85 = v9[1];\n  v9[2] = -2LL;\n  v90 = -2LL;\n  v42 = v39 - 1;\n  v43 = v10 - 1;\n  v44 = v37;\n  v45 = v42;\n  v46 = v43;\n  v47 = sub_402BC0(&v88, &v87);\n  while ( 2 )\n  {\n    v53 = v47;\n    v54 = sub_402BC0(v41, v96);\n    v55 = v96[0];\n    if ( v37 )\n    {\n      if ( v96[0] != 2 )\n      {\n        if ( !v44 || v87 == 2 )\n        {\n          v81 = dcgettext(0LL, \"misaligned [:upper:] and/or [:lower:] construct\", 5);\n          error(1, 0, v81);\n          start();\n        }\n        goto LABEL_98;\n      }\n    }\n    else\n    {\n      if ( v96[0] == 2 )\n        goto LABEL_103;\nLABEL_98:\n      v26 = v87 == 1;\n      v48 = v91;\n      v49 = *(_QWORD *)(v89 + 8);\n      v90 = -1LL;\n      v89 = v49;\n      v50 = *(_QWORD *)(v41[1] + 8);\n      v41[2] = -1LL;\n      v41[1] = v50;\n      v51 = v45;\n      if ( v26 )\n        v51 = v46;\n      v26 = v55 == 1;\n      v52 = v46;\n      v91 = v48 - v51;\n      if ( !v26 )\n        v52 = v45;\n      v41[3] -= v52;\n    }\nLABEL_103:\n    v44 = v90 == -1;\n    v37 = v41[2] == -1;\n    v3 = (unsigned int)(v53 + 1);\n    if ( (_DWORD)v3 && v54 != -1 )\n    {\n      v47 = sub_402BC0(&v88, &v87);\n      continue;\n    }\n    break;\n  }\n  v9 = v41;\n  v6 = v86;\n  if ( v82 < v91 || v83 < v41[3] )\n    __assert_fail(\"old_s1_len >= s1->length && old_s2_len >= s2->length\", \"src/tr.c\", 0x4C5u, \"validate_case_classes\");\n  v89 = v84;\n  v41[1] = v85;\nLABEL_112:\n  v14 = v91;\n  v15 = v9[3];\n  if ( v91 > v15 && !byte_60F5C1 )\n  {\n    if ( v15 )\n    {\n      v16 = v9[1];\n      switch ( *(_DWORD *)v16 )\n      {\n        case 0:\n        case 4:\n          goto LABEL_33;\n        case 1:\n          v17 = *(_BYTE *)(v16 + 17);\n          goto LABEL_34;\n        case 2:\n          goto LABEL_141;\n        default:\n          abort();\n      }\n    }\n    goto LABEL_156;\n  }\nLABEL_36:\n  if ( byte_60F5C2 && v93 )\n  {\n    if ( v9[3] != v91 || (v9[2] = -2LL, v20 = sub_402BC0(v9, 0LL), v3 = v20, v20 == -1) )\n    {\nLABEL_137:\n      v61 = dcgettext(\n              0LL,\n              \"when translating with complemented character classes,\\n\"\n              \"string2 must map all characters in the domain to one\",\n              5);\n      error(1, 0, v61);\nLABEL_138:\n      sub_403AC0(0);\n    }\n    while ( 1 )\n    {\n      v21 = sub_402BC0(v9, 0LL);\n      if ( v21 == -1 )\n        break;\n      if ( (_DWORD)v3 != v21 )\n        goto LABEL_137;\n    }\n  }\nLABEL_43:\n  sub_403F10(stdin, 2LL);\n  v22 = byte_60F5C4;\n  if ( v6 == 1 && byte_60F5C4 )\n  {\n    sub_403860(&v88, (unsigned __int8)byte_60F5C2, &byte_60D4C0);\n    sub_4038C0(sub_402E40);\n    goto LABEL_46;\n  }\n  if ( !byte_60F5C3 )\n  {\nLABEL_53:\n    if ( !byte_60F5C0 )\n      goto LABEL_46;\n    v24 = 0LL;\n    if ( byte_60F5C2 )\n    {\n      sub_403860(&v88, 0LL, byte_60D3C0);\n      v9[2] = -2LL;\n      for ( i = 0LL; i != 256; ++i )\n        byte_60D2C0[i] = i;\n      v58 = 0LL;\n      while ( 1 )\n      {\n        if ( !byte_60D3C0[v58] )\n        {\n          v59 = sub_402BC0(v9, 0LL);\n          if ( v59 == -1 )\n          {\n            if ( !byte_60F5C1 )\n              __assert_fail(\"ch != -1 || truncate_set1\", \"src/tr.c\", 0x727u, \"main\");\nLABEL_119:\n            if ( v22 )\n            {\n              sub_403860(v9, 0LL, &byte_60D4C0);\n              sub_4038C0(sub_402F40);\n              goto LABEL_46;\n            }\n            do\n            {\n              v56 = sub_402F40(&byte_60D5C0, 0x2000uLL);\n              if ( !v56 )\n                goto LABEL_46;\n            }\n            while ( v56 == fwrite_unlocked(&byte_60D5C0, 1uLL, v56, stdout) );\n            v75 = dcgettext(0LL, \"write error\", 5);\n            v76 = __errno_location();\n            error(1, *v76, v75);\nLABEL_153:\n            v77 = dcgettext(0LL, \"the [c*] repeat construct may not appear in string1\", 5);\n            error(1, 0, v77);\nLABEL_154:\n            v78 = dcgettext(\n                    0LL,\n                    \"when translating, the only character classes that may appear in\\nstring2 are 'upper' and 'lower'\",\n                    5);\n            error(1, 0, v78);\nLABEL_155:\n            v79 = dcgettext(0LL, \"[=c=] expressions may not appear in string2 when translating\", 5);\n            error(1, 0, v79);\nLABEL_156:\n            v80 = dcgettext(0LL, \"when not truncating set1, string2 must be non-empty\", 5);\n            error(1, 0, v80);\nLABEL_157:\n            sub_402F90();\n          }\n          byte_60D2C0[v58] = v59;\n        }\n        if ( ++v58 == 256 )\n          goto LABEL_119;\n      }\n    }\n    do\n    {\n      byte_60D2C0[v24] = v24;\n      ++v24;\n    }\n    while ( v24 != 256 );\n    v3 = (unsigned __int64)v96;\n    v90 = -2LL;\n    v9[2] = -2LL;\n    for ( j = sub_402BC0(&v88, &v87); ; j = sub_402BC0(&v88, &v87) )\n    {\n      v27 = j;\n      v28 = sub_402BC0(v9, v96);\n      if ( v87 )\n      {\n        if ( v87 == 1 && !v96[0] )\n        {\n          v29 = 0LL;\n          v30 = *__ctype_b_loc();\n          do\n          {\n            if ( (v30[v29] & 0x100) != 0 )\n              byte_60D2C0[v29] = (*__ctype_tolower_loc())[v29];\n            ++v29;\n          }\n          while ( v29 != 256 );\nLABEL_69:\n          v31 = *(_QWORD *)(v89 + 8);\n          v90 = -1LL;\n          v89 = v31;\n          v32 = *(_QWORD *)(v9[1] + 8);\n          v9[2] = -1LL;\n          v9[1] = v32;\n          continue;\n        }\n      }\n      else if ( v96[0] == 1 )\n      {\n        v35 = 0LL;\n        v36 = *__ctype_b_loc();\n        do\n        {\n          if ( (v36[v35] & 0x200) != 0 )\n            byte_60D2C0[v35] = (*__ctype_toupper_loc())[v35];\n          ++v35;\n        }\n        while ( v35 != 256 );\n        goto LABEL_69;\n      }\n      if ( (_DWORD)v27 == -1 || v28 == -1 )\n      {\n        v6 = v27 + 1;\n        if ( v6 && !byte_60F5C1 )\n          __assert_fail(\"c1 == -1 || truncate_set1\", \"src/tr.c\", 0x75Cu, \"main\");\n        goto LABEL_119;\n      }\n      v26 = v96[0] == 2;\n      byte_60D2C0[v27] = v28;\n      if ( !v26 )\n        goto LABEL_69;\n    }\n  }\n  if ( v6 != 1 )\n  {\n    if ( v6 == 2 && byte_60F5C4 )\n    {\n      sub_403860(&v88, (unsigned __int8)byte_60F5C2, byte_60D3C0);\n      sub_403860(v9, 0LL, &byte_60D4C0);\n      sub_4038C0(sub_402E70);\n      goto LABEL_46;\n    }\n    goto LABEL_53;\n  }\n  sub_403860(&v88, (unsigned __int8)byte_60F5C2, byte_60D3C0);\n  while ( 1 )\n  {\n    v60 = sub_402E70(&byte_60D5C0, 0x2000uLL);\n    if ( !v60 )\n      break;\n    if ( v60 != fwrite_unlocked(&byte_60D5C0, 1uLL, v60, stdout) )\n      goto LABEL_142;\n  }\nLABEL_46:\n  result = close(0);\n  if ( result )\n    goto LABEL_140;\n  return result;\n}\n\nint __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  unsigned __int64 v3; // r12\n  int v4; // eax\n  int v5; // ecx\n  int v6; // r15d\n  int v7; // esi\n  int v8; // eax\n  __int64 *v9; // rbx\n  __int64 v10; // r14\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  char *v13; // rax\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rdx\n  __int64 v16; // rcx\n  char v17; // r13\n  __int64 v18; // rax\n  __int64 v19; // rdx\n  unsigned int v20; // eax\n  int v21; // eax\n  char v22; // r13\n  int result; // eax\n  __int64 v24; // rax\n  int j; // eax\n  bool v26; // zf\n  __int64 v27; // r15\n  int v28; // eax\n  __int64 v29; // r14\n  const unsigned __int16 *v30; // r15\n  __int64 v31; // rax\n  __int64 v32; // rax\n  unsigned __int8 v33; // dl\n  int v34; // eax\n  __int64 v35; // r14\n  const unsigned __int16 *v36; // r15\n  char v37; // r13\n  const unsigned __int16 **v38; // rax\n  __int64 v39; // rcx\n  const unsigned __int16 *v40; // rdx\n  __int64 *v41; // rbp\n  __int64 v42; // rax\n  __int64 v43; // rcx\n  bool v44; // r14\n  __int64 v45; // r15\n  __int64 v46; // rbx\n  int v47; // eax\n  unsigned __int64 v48; // rdx\n  __int64 v49; // rsi\n  __int64 v50; // rsi\n  __int64 v51; // rsi\n  __int64 v52; // rcx\n  int v53; // r12d\n  int v54; // eax\n  int v55; // ecx\n  size_t v56; // rax\n  __int64 i; // rax\n  __int64 v58; // rbp\n  int v59; // eax\n  size_t v60; // rax\n  char *v61; // rax\n  char *v62; // rax\n  char *v63; // rbx\n  int *v64; // rax\n  char *v65; // rax\n  char *v66; // rbx\n  int *v67; // rax\n  __int64 v68; // rbx\n  char *v69; // rax\n  const char *v70; // rsi\n  char *v71; // rax\n  char *v72; // rax\n  __int64 v73; // rbx\n  char *v74; // rax\n  char *v75; // rbx\n  int *v76; // rax\n  char *v77; // rax\n  char *v78; // rax\n  char *v79; // rax\n  char *v80; // rax\n  char *v81; // rax\n  unsigned __int64 v82; // [rsp+18h] [rbp-1F0h]\n  unsigned __int64 v83; // [rsp+20h] [rbp-1E8h]\n  __int64 v84; // [rsp+28h] [rbp-1E0h]\n  __int64 v85; // [rsp+30h] [rbp-1D8h]\n  int v86; // [rsp+3Ch] [rbp-1CCh]\n  int v87; // [rsp+4Ch] [rbp-1BCh] BYREF\n  __int64 v88; // [rsp+50h] [rbp-1B8h] BYREF\n  __int64 v89; // [rsp+58h] [rbp-1B0h]\n  __int64 v90; // [rsp+60h] [rbp-1A8h]\n  unsigned __int64 v91; // [rsp+68h] [rbp-1A0h]\n  __int64 v92; // [rsp+70h] [rbp-198h]\n  char v93; // [rsp+81h] [rbp-187h]\n  __int64 v94; // [rsp+90h] [rbp-178h] BYREF\n  __int64 v95; // [rsp+98h] [rbp-170h]\n  int v96[78]; // [rsp+D0h] [rbp-138h] BYREF\n\n  v3 = (unsigned __int64)a2;\n  sub_403F40(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_407E60(sub_403E60);\n  while ( 1 )\n  {\n    v4 = sub_4075A0(a1, a2, \"+cCdst\", &off_4082C0, 0LL);\n    if ( v4 == -1 )\n      break;\n    if ( v4 == 99 )\n      goto LABEL_14;\n    if ( v4 <= 99 )\n    {\n      if ( v4 == -130 )\n        goto LABEL_138;\n      if ( v4 != 67 )\n      {\n        if ( v4 == -131 )\n        {\n          sub_406040(\n            (_DWORD)stdout,\n            (unsigned int)\"tr\",\n            (unsigned int)&unk_407FC7,\n            (_DWORD)off_60D210,\n            (unsigned int)\"Jim Meyering\",\n            0);\n          exit(0);\n        }\nLABEL_13:\n        sub_403AC0(1);\n      }\nLABEL_14:\n      byte_60F5C2 = 1;\n    }\n    else\n    {\n      switch ( v4 )\n      {\n        case 's':\n          byte_60F5C4 = 1;\n          break;\n        case 't':\n          byte_60F5C1 = 1;\n          break;\n        case 'd':\n          byte_60F5C3 = 1;\n          break;\n        default:\n          goto LABEL_13;\n      }\n    }\n  }\n  v5 = dword_60D27C;\n  v6 = a1 - dword_60D27C;\n  if ( a1 - dword_60D27C == 2 )\n  {\n    if ( byte_60F5C3 )\n    {\n      byte_60F5C0 = 0;\n      if ( !byte_60F5C4 )\n      {\nLABEL_19:\n        v7 = 1;\n        v8 = 2 - ((unsigned __int8)byte_60F5C4 < (unsigned __int8)byte_60F5C3);\n        goto LABEL_20;\n      }\n    }\n    else\n    {\n      byte_60F5C0 = 1;\n      v8 = 2;\n      if ( byte_60F5C4 )\n        goto LABEL_21;\n    }\n    v89 = sub_406180(32LL);\n    v88 = v89;\n    *(_QWORD *)(v89 + 8) = 0LL;\n    if ( (unsigned __int8)sub_403010(a2[dword_60D27C], &v88) )\n      goto LABEL_78;\n    return 1;\n  }\n  byte_60F5C0 = 0;\n  if ( byte_60F5C4 != byte_60F5C3 )\n    goto LABEL_19;\n  v7 = 2;\n  v8 = 2;\nLABEL_20:\n  if ( v6 < v7 )\n  {\n    if ( !v6 )\n    {\n      v72 = dcgettext(0LL, \"missing operand\", 5);\n      error(0, 0, v72);\n      goto LABEL_13;\n    }\n    v73 = sub_405B60(*(_QWORD *)(v3 + 8LL * (int)a1 - 8));\n    v74 = dcgettext(0LL, \"missing operand after %s\", 5);\n    error(0, 0, v74, v73);\n    v70 = \"Two strings must be given when both deleting and squeezing repeats.\";\n    if ( !byte_60F5C4 )\n      v70 = \"Two strings must be given when translating.\";\nLABEL_145:\n    v71 = dcgettext(0LL, v70, 5);\n    __fprintf_chk(stderr, 1LL, \"%s\\n\", v71);\n    goto LABEL_13;\n  }\nLABEL_21:\n  if ( v6 > v8 )\n  {\nLABEL_143:\n    v68 = sub_405B60(*(_QWORD *)(v3 + 8LL * (v5 + v8)));\n    v69 = dcgettext(0LL, \"extra operand %s\", 5);\n    error(0, 0, v69, v68);\n    if ( v6 != 2 )\n      goto LABEL_13;\n    v70 = \"Only one string may be given when deleting without squeezing repeats.\";\n    goto LABEL_145;\n  }\n  v89 = sub_406180(32LL);\n  v88 = v89;\n  *(_QWORD *)(v89 + 8) = 0LL;\n  if ( !(unsigned __int8)sub_403010(*(_QWORD *)(v3 + 8LL * dword_60D27C), &v88) )\n    return 1;\n  v9 = 0LL;\n  if ( v6 != 2 )\n    goto LABEL_24;\nLABEL_78:\n  v95 = sub_406180(32LL);\n  v94 = v95;\n  *(_QWORD *)(v95 + 8) = 0LL;\n  if ( !(unsigned __int8)sub_403010(*(_QWORD *)(v3 + 8LL * dword_60D27C + 8), &v94) )\n    return 1;\n  v9 = &v94;\nLABEL_24:\n  sub_402A40(&v88);\n  if ( byte_60F5C2 )\n  {\n    v90 = -2LL;\n    LODWORD(v3) = 256;\n    memset(v96, 0, 0x100uLL);\n    while ( 1 )\n    {\n      v34 = sub_402BC0(&v88, 0LL);\n      if ( v34 == -1 )\n        break;\n      v33 = *((_BYTE *)v96 + v34);\n      *((_BYTE *)v96 + v34) = 1;\n      LODWORD(v3) = v3 - (v33 ^ 1);\n    }\n    v3 = (int)v3;\n    v91 = (int)v3;\n  }\n  v10 = v92;\n  if ( v92 )\n    goto LABEL_153;\n  if ( !v9 )\n    goto LABEL_43;\n  v3 = v91;\n  sub_402A40(v9);\n  v11 = v9[3];\n  if ( v3 >= v11 && v9[4] == 1 )\n  {\n    v26 = byte_60F5C0 == 0;\n    *(_QWORD *)(v9[5] + 24) = v3 - v11;\n    v9[3] = v3;\n    if ( v26 )\n      goto LABEL_32;\n    goto LABEL_89;\n  }\n  v12 = v9[4];\n  if ( v12 > 1 )\n  {\n    v62 = dcgettext(0LL, \"only one [c*] repeat construct may appear in string2\", 5);\n    error(1, 0, v62);\nLABEL_140:\n    v63 = dcgettext(0LL, \"standard input\", 5);\n    v64 = __errno_location();\n    error(1, *v64, v63);\nLABEL_141:\n    v65 = dcgettext(\n            0LL,\n            \"when translating with string1 longer than string2,\\nthe latter string must not end with a character class\",\n            5);\n    error(1, 0, v65);\nLABEL_142:\n    v66 = dcgettext(0LL, \"write error\", 5);\n    v67 = __errno_location();\n    error(1, *v67, v66);\n    goto LABEL_143;\n  }\n  if ( !byte_60F5C0 )\n  {\n    if ( !v12 )\n      goto LABEL_43;\nLABEL_32:\n    v13 = dcgettext(0LL, \"the [c*] construct may appear in string2 only when translating\", 5);\n    error(1, 0, v13);\nLABEL_33:\n    v17 = *(_BYTE *)(v16 + 16);\nLABEL_34:\n    v3 = v14 - v15;\n    v18 = sub_406180(32LL);\n    v19 = v9[1];\n    *(_QWORD *)(v18 + 8) = 0LL;\n    *(_DWORD *)v18 = 4;\n    *(_BYTE *)(v18 + 16) = v17;\n    *(_QWORD *)(v18 + 24) = v3;\n    if ( !v19 )\n      goto LABEL_157;\n    *(_QWORD *)(v19 + 8) = v18;\n    v9[1] = v18;\n    v9[3] = v91;\n    goto LABEL_36;\n  }\nLABEL_89:\n  if ( *((_BYTE *)v9 + 48) )\n    goto LABEL_155;\n  if ( *((_BYTE *)v9 + 50) )\n    goto LABEL_154;\n  v37 = *((_BYTE *)v9 + 49);\n  if ( !v37 )\n    goto LABEL_112;\n  v38 = __ctype_b_loc();\n  v39 = 0LL;\n  v40 = *v38;\n  do\n  {\n    v10 -= ((*v40 & 0x100) == 0) - 1LL;\n    v39 -= ((*v40++ & 0x200) == 0) - 1LL;\n  }\n  while ( v40 != *v38 + 256 );\n  v86 = v6;\n  v41 = v9;\n  v82 = v91;\n  v83 = v9[3];\n  v84 = v89;\n  v85 = v9[1];\n  v9[2] = -2LL;\n  v90 = -2LL;\n  v42 = v39 - 1;\n  v43 = v10 - 1;\n  v44 = v37;\n  v45 = v42;\n  v46 = v43;\n  v47 = sub_402BC0(&v88, &v87);\n  while ( 2 )\n  {\n    v53 = v47;\n    v54 = sub_402BC0(v41, v96);\n    v55 = v96[0];\n    if ( v37 )\n    {\n      if ( v96[0] != 2 )\n      {\n        if ( !v44 || v87 == 2 )\n        {\n          v81 = dcgettext(0LL, \"misaligned [:upper:] and/or [:lower:] construct\", 5);\n          error(1, 0, v81);\n          start();\n        }\n        goto LABEL_98;\n      }\n    }\n    else\n    {\n      if ( v96[0] == 2 )\n        goto LABEL_103;\nLABEL_98:\n      v26 = v87 == 1;\n      v48 = v91;\n      v49 = *(_QWORD *)(v89 + 8);\n      v90 = -1LL;\n      v89 = v49;\n      v50 = *(_QWORD *)(v41[1] + 8);\n      v41[2] = -1LL;\n      v41[1] = v50;\n      v51 = v45;\n      if ( v26 )\n        v51 = v46;\n      v26 = v55 == 1;\n      v52 = v46;\n      v91 = v48 - v51;\n      if ( !v26 )\n        v52 = v45;\n      v41[3] -= v52;\n    }\nLABEL_103:\n    v44 = v90 == -1;\n    v37 = v41[2] == -1;\n    v3 = (unsigned int)(v53 + 1);\n    if ( (_DWORD)v3 && v54 != -1 )\n    {\n      v47 = sub_402BC0(&v88, &v87);\n      continue;\n    }\n    break;\n  }\n  v9 = v41;\n  v6 = v86;\n  if ( v82 < v91 || v83 < v41[3] )\n    __assert_fail(\"old_s1_len >= s1->length && old_s2_len >= s2->length\", \"src/tr.c\", 0x4C5u, \"validate_case_classes\");\n  v89 = v84;\n  v41[1] = v85;\nLABEL_112:\n  v14 = v91;\n  v15 = v9[3];\n  if ( v91 > v15 && !byte_60F5C1 )\n  {\n    if ( v15 )\n    {\n      v16 = v9[1];\n      switch ( *(_DWORD *)v16 )\n      {\n        case 0:\n        case 4:\n          goto LABEL_33;\n        case 1:\n          v17 = *(_BYTE *)(v16 + 17);\n          goto LABEL_34;\n        case 2:\n          goto LABEL_141;\n        default:\n          abort();\n      }\n    }\n    goto LABEL_156;\n  }\nLABEL_36:\n  if ( byte_60F5C2 && v93 )\n  {\n    if ( v9[3] != v91 || (v9[2] = -2LL, v20 = sub_402BC0(v9, 0LL), v3 = v20, v20 == -1) )\n    {\nLABEL_137:\n      v61 = dcgettext(\n              0LL,\n              \"when translating with complemented character classes,\\n\"\n              \"string2 must map all characters in the domain to one\",\n              5);\n      error(1, 0, v61);\nLABEL_138:\n      sub_403AC0(0);\n    }\n    while ( 1 )\n    {\n      v21 = sub_402BC0(v9, 0LL);\n      if ( v21 == -1 )\n        break;\n      if ( (_DWORD)v3 != v21 )\n        goto LABEL_137;\n    }\n  }\nLABEL_43:\n  sub_403F10(stdin, 2LL);\n  v22 = byte_60F5C4;\n  if ( v6 == 1 && byte_60F5C4 )\n  {\n    sub_403860(&v88, (unsigned __int8)byte_60F5C2, &byte_60D4C0);\n    sub_4038C0(sub_402E40);\n    goto LABEL_46;\n  }\n  if ( !byte_60F5C3 )\n  {\nLABEL_53:\n    if ( !byte_60F5C0 )\n      goto LABEL_46;\n    v24 = 0LL;\n    if ( byte_60F5C2 )\n    {\n      sub_403860(&v88, 0LL, byte_60D3C0);\n      v9[2] = -2LL;\n      for ( i = 0LL; i != 256; ++i )\n        byte_60D2C0[i] = i;\n      v58 = 0LL;\n      while ( 1 )\n      {\n        if ( !byte_60D3C0[v58] )\n        {\n          v59 = sub_402BC0(v9, 0LL);\n          if ( v59 == -1 )\n          {\n            if ( !byte_60F5C1 )\n              __assert_fail(\"ch != -1 || truncate_set1\", \"src/tr.c\", 0x727u, \"main\");\nLABEL_119:\n            if ( v22 )\n            {\n              sub_403860(v9, 0LL, &byte_60D4C0);\n              sub_4038C0(sub_402F40);\n              goto LABEL_46;\n            }\n            do\n            {\n              v56 = sub_402F40(&byte_60D5C0, 0x2000uLL);\n              if ( !v56 )\n                goto LABEL_46;\n            }\n            while ( v56 == fwrite_unlocked(&byte_60D5C0, 1uLL, v56, stdout) );\n            v75 = dcgettext(0LL, \"write error\", 5);\n            v76 = __errno_location();\n            error(1, *v76, v75);\nLABEL_153:\n            v77 = dcgettext(0LL, \"the [c*] repeat construct may not appear in string1\", 5);\n            error(1, 0, v77);\nLABEL_154:\n            v78 = dcgettext(\n                    0LL,\n                    \"when translating, the only character classes that may appear in\\nstring2 are 'upper' and 'lower'\",\n                    5);\n            error(1, 0, v78);\nLABEL_155:\n            v79 = dcgettext(0LL, \"[=c=] expressions may not appear in string2 when translating\", 5);\n            error(1, 0, v79);\nLABEL_156:\n            v80 = dcgettext(0LL, \"when not truncating set1, string2 must be non-empty\", 5);\n            error(1, 0, v80);\nLABEL_157:\n            sub_402F90();\n          }\n          byte_60D2C0[v58] = v59;\n        }\n        if ( ++v58 == 256 )\n          goto LABEL_119;\n      }\n    }\n    do\n    {\n      byte_60D2C0[v24] = v24;\n      ++v24;\n    }\n    while ( v24 != 256 );\n    v3 = (unsigned __int64)v96;\n    v90 = -2LL;\n    v9[2] = -2LL;\n    for ( j = sub_402BC0(&v88, &v87); ; j = sub_402BC0(&v88, &v87) )\n    {\n      v27 = j;\n      v28 = sub_402BC0(v9, v96);\n      if ( v87 )\n      {\n        if ( v87 == 1 && !v96[0] )\n        {\n          v29 = 0LL;\n          v30 = *__ctype_b_loc();\n          do\n          {\n            if ( (v30[v29] & 0x100) != 0 )\n              byte_60D2C0[v29] = (*__ctype_tolower_loc())[v29];\n            ++v29;\n          }\n          while ( v29 != 256 );\nLABEL_69:\n          v31 = *(_QWORD *)(v89 + 8);\n          v90 = -1LL;\n          v89 = v31;\n          v32 = *(_QWORD *)(v9[1] + 8);\n          v9[2] = -1LL;\n          v9[1] = v32;\n          continue;\n        }\n      }\n      else if ( v96[0] == 1 )\n      {\n        v35 = 0LL;\n        v36 = *__ctype_b_loc();\n        do\n        {\n          if ( (v36[v35] & 0x200) != 0 )\n            byte_60D2C0[v35] = (*__ctype_toupper_loc())[v35];\n          ++v35;\n        }\n        while ( v35 != 256 );\n        goto LABEL_69;\n      }\n      if ( (_DWORD)v27 == -1 || v28 == -1 )\n      {\n        v6 = v27 + 1;\n        if ( v6 && !byte_60F5C1 )\n          __assert_fail(\"c1 == -1 || truncate_set1\", \"src/tr.c\", 0x75Cu, \"main\");\n        goto LABEL_119;\n      }\n      v26 = v96[0] == 2;\n      byte_60D2C0[v27] = v28;\n      if ( !v26 )\n        goto LABEL_69;\n    }\n  }\n  if ( v6 != 1 )\n  {\n    if ( v6 == 2 && byte_60F5C4 )\n    {\n      sub_403860(&v88, (unsigned __int8)byte_60F5C2, byte_60D3C0);\n      sub_403860(v9, 0LL, &byte_60D4C0);\n      sub_4038C0(sub_402E70);\n      goto LABEL_46;\n    }\n    goto LABEL_53;\n  }\n  sub_403860(&v88, (unsigned __int8)byte_60F5C2, byte_60D3C0);\n  while ( 1 )\n  {\n    v60 = sub_402E70(&byte_60D5C0, 0x2000uLL);\n    if ( !v60 )\n      break;\n    if ( v60 != fwrite_unlocked(&byte_60D5C0, 1uLL, v60, stdout) )\n      goto LABEL_142;\n  }\nLABEL_46:\n  result = close(0);\n  if ( result )\n    goto LABEL_140;\n  return result;\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x4018ff",
            "funcEndAddr": "0x401904",
            "decompiledFuncCode": "int __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  unsigned __int64 v3; // r12\n  int v4; // eax\n  int v5; // ecx\n  int v6; // r15d\n  int v7; // esi\n  int v8; // eax\n  __int64 *v9; // rbx\n  __int64 v10; // r14\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  char *v13; // rax\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rdx\n  __int64 v16; // rcx\n  char v17; // r13\n  __int64 v18; // rax\n  __int64 v19; // rdx\n  unsigned int v20; // eax\n  int v21; // eax\n  char v22; // r13\n  int result; // eax\n  __int64 v24; // rax\n  int j; // eax\n  bool v26; // zf\n  __int64 v27; // r15\n  int v28; // eax\n  __int64 v29; // r14\n  const unsigned __int16 *v30; // r15\n  __int64 v31; // rax\n  __int64 v32; // rax\n  unsigned __int8 v33; // dl\n  int v34; // eax\n  __int64 v35; // r14\n  const unsigned __int16 *v36; // r15\n  char v37; // r13\n  const unsigned __int16 **v38; // rax\n  __int64 v39; // rcx\n  const unsigned __int16 *v40; // rdx\n  __int64 *v41; // rbp\n  __int64 v42; // rax\n  __int64 v43; // rcx\n  bool v44; // r14\n  __int64 v45; // r15\n  __int64 v46; // rbx\n  int v47; // eax\n  unsigned __int64 v48; // rdx\n  __int64 v49; // rsi\n  __int64 v50; // rsi\n  __int64 v51; // rsi\n  __int64 v52; // rcx\n  int v53; // r12d\n  int v54; // eax\n  int v55; // ecx\n  size_t v56; // rax\n  __int64 i; // rax\n  __int64 v58; // rbp\n  int v59; // eax\n  size_t v60; // rax\n  char *v61; // rax\n  char *v62; // rax\n  char *v63; // rbx\n  int *v64; // rax\n  char *v65; // rax\n  char *v66; // rbx\n  int *v67; // rax\n  __int64 v68; // rbx\n  char *v69; // rax\n  const char *v70; // rsi\n  char *v71; // rax\n  char *v72; // rax\n  __int64 v73; // rbx\n  char *v74; // rax\n  char *v75; // rbx\n  int *v76; // rax\n  char *v77; // rax\n  char *v78; // rax\n  char *v79; // rax\n  char *v80; // rax\n  char *v81; // rax\n  unsigned __int64 v82; // [rsp+18h] [rbp-1F0h]\n  unsigned __int64 v83; // [rsp+20h] [rbp-1E8h]\n  __int64 v84; // [rsp+28h] [rbp-1E0h]\n  __int64 v85; // [rsp+30h] [rbp-1D8h]\n  int v86; // [rsp+3Ch] [rbp-1CCh]\n  int v87; // [rsp+4Ch] [rbp-1BCh] BYREF\n  __int64 v88; // [rsp+50h] [rbp-1B8h] BYREF\n  __int64 v89; // [rsp+58h] [rbp-1B0h]\n  __int64 v90; // [rsp+60h] [rbp-1A8h]\n  unsigned __int64 v91; // [rsp+68h] [rbp-1A0h]\n  __int64 v92; // [rsp+70h] [rbp-198h]\n  char v93; // [rsp+81h] [rbp-187h]\n  __int64 v94; // [rsp+90h] [rbp-178h] BYREF\n  __int64 v95; // [rsp+98h] [rbp-170h]\n  int v96[78]; // [rsp+D0h] [rbp-138h] BYREF\n\n  v3 = (unsigned __int64)a2;\n  sub_403F40(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_407E60(sub_403E60);\n  while ( 1 )\n  {\n    v4 = sub_4075A0(a1, a2, \"+cCdst\", &off_4082C0, 0LL);\n    if ( v4 == -1 )\n      break;\n    if ( v4 == 99 )\n      goto LABEL_14;\n    if ( v4 <= 99 )\n    {\n      if ( v4 == -130 )\n        goto LABEL_138;\n      if ( v4 != 67 )\n      {\n        if ( v4 == -131 )\n        {\n          sub_406040(\n            (_DWORD)stdout,\n            (unsigned int)\"tr\",\n            (unsigned int)&unk_407FC7,\n            (_DWORD)off_60D210,\n            (unsigned int)\"Jim Meyering\",\n            0);\n          exit(0);\n        }\nLABEL_13:\n        sub_403AC0(1);\n      }\nLABEL_14:\n      byte_60F5C2 = 1;\n    }\n    else\n    {\n      switch ( v4 )\n      {\n        case 's':\n          byte_60F5C4 = 1;\n          break;\n        case 't':\n          byte_60F5C1 = 1;\n          break;\n        case 'd':\n          byte_60F5C3 = 1;\n          break;\n        default:\n          goto LABEL_13;\n      }\n    }\n  }\n  v5 = dword_60D27C;\n  v6 = a1 - dword_60D27C;\n  if ( a1 - dword_60D27C == 2 )\n  {\n    if ( byte_60F5C3 )\n    {\n      byte_60F5C0 = 0;\n      if ( !byte_60F5C4 )\n      {\nLABEL_19:\n        v7 = 1;\n        v8 = 2 - ((unsigned __int8)byte_60F5C4 < (unsigned __int8)byte_60F5C3);\n        goto LABEL_20;\n      }\n    }\n    else\n    {\n      byte_60F5C0 = 1;\n      v8 = 2;\n      if ( byte_60F5C4 )\n        goto LABEL_21;\n    }\n    v89 = sub_406180(32LL);\n    v88 = v89;\n    *(_QWORD *)(v89 + 8) = 0LL;\n    if ( (unsigned __int8)sub_403010(a2[dword_60D27C], &v88) )\n      goto LABEL_78;\n    return 1;\n  }\n  byte_60F5C0 = 0;\n  if ( byte_60F5C4 != byte_60F5C3 )\n    goto LABEL_19;\n  v7 = 2;\n  v8 = 2;\nLABEL_20:\n  if ( v6 < v7 )\n  {\n    if ( !v6 )\n    {\n      v72 = dcgettext(0LL, \"missing operand\", 5);\n      error(0, 0, v72);\n      goto LABEL_13;\n    }\n    v73 = sub_405B60(*(_QWORD *)(v3 + 8LL * (int)a1 - 8));\n    v74 = dcgettext(0LL, \"missing operand after %s\", 5);\n    error(0, 0, v74, v73);\n    v70 = \"Two strings must be given when both deleting and squeezing repeats.\";\n    if ( !byte_60F5C4 )\n      v70 = \"Two strings must be given when translating.\";\nLABEL_145:\n    v71 = dcgettext(0LL, v70, 5);\n    __fprintf_chk(stderr, 1LL, \"%s\\n\", v71);\n    goto LABEL_13;\n  }\nLABEL_21:\n  if ( v6 > v8 )\n  {\nLABEL_143:\n    v68 = sub_405B60(*(_QWORD *)(v3 + 8LL * (v5 + v8)));\n    v69 = dcgettext(0LL, \"extra operand %s\", 5);\n    error(0, 0, v69, v68);\n    if ( v6 != 2 )\n      goto LABEL_13;\n    v70 = \"Only one string may be given when deleting without squeezing repeats.\";\n    goto LABEL_145;\n  }\n  v89 = sub_406180(32LL);\n  v88 = v89;\n  *(_QWORD *)(v89 + 8) = 0LL;\n  if ( !(unsigned __int8)sub_403010(*(_QWORD *)(v3 + 8LL * dword_60D27C), &v88) )\n    return 1;\n  v9 = 0LL;\n  if ( v6 != 2 )\n    goto LABEL_24;\nLABEL_78:\n  v95 = sub_406180(32LL);\n  v94 = v95;\n  *(_QWORD *)(v95 + 8) = 0LL;\n  if ( !(unsigned __int8)sub_403010(*(_QWORD *)(v3 + 8LL * dword_60D27C + 8), &v94) )\n    return 1;\n  v9 = &v94;\nLABEL_24:\n  sub_402A40(&v88);\n  if ( byte_60F5C2 )\n  {\n    v90 = -2LL;\n    LODWORD(v3) = 256;\n    memset(v96, 0, 0x100uLL);\n    while ( 1 )\n    {\n      v34 = sub_402BC0(&v88, 0LL);\n      if ( v34 == -1 )\n        break;\n      v33 = *((_BYTE *)v96 + v34);\n      *((_BYTE *)v96 + v34) = 1;\n      LODWORD(v3) = v3 - (v33 ^ 1);\n    }\n    v3 = (int)v3;\n    v91 = (int)v3;\n  }\n  v10 = v92;\n  if ( v92 )\n    goto LABEL_153;\n  if ( !v9 )\n    goto LABEL_43;\n  v3 = v91;\n  sub_402A40(v9);\n  v11 = v9[3];\n  if ( v3 >= v11 && v9[4] == 1 )\n  {\n    v26 = byte_60F5C0 == 0;\n    *(_QWORD *)(v9[5] + 24) = v3 - v11;\n    v9[3] = v3;\n    if ( v26 )\n      goto LABEL_32;\n    goto LABEL_89;\n  }\n  v12 = v9[4];\n  if ( v12 > 1 )\n  {\n    v62 = dcgettext(0LL, \"only one [c*] repeat construct may appear in string2\", 5);\n    error(1, 0, v62);\nLABEL_140:\n    v63 = dcgettext(0LL, \"standard input\", 5);\n    v64 = __errno_location();\n    error(1, *v64, v63);\nLABEL_141:\n    v65 = dcgettext(\n            0LL,\n            \"when translating with string1 longer than string2,\\nthe latter string must not end with a character class\",\n            5);\n    error(1, 0, v65);\nLABEL_142:\n    v66 = dcgettext(0LL, \"write error\", 5);\n    v67 = __errno_location();\n    error(1, *v67, v66);\n    goto LABEL_143;\n  }\n  if ( !byte_60F5C0 )\n  {\n    if ( !v12 )\n      goto LABEL_43;\nLABEL_32:\n    v13 = dcgettext(0LL, \"the [c*] construct may appear in string2 only when translating\", 5);\n    error(1, 0, v13);\nLABEL_33:\n    v17 = *(_BYTE *)(v16 + 16);\nLABEL_34:\n    v3 = v14 - v15;\n    v18 = sub_406180(32LL);\n    v19 = v9[1];\n    *(_QWORD *)(v18 + 8) = 0LL;\n    *(_DWORD *)v18 = 4;\n    *(_BYTE *)(v18 + 16) = v17;\n    *(_QWORD *)(v18 + 24) = v3;\n    if ( !v19 )\n      goto LABEL_157;\n    *(_QWORD *)(v19 + 8) = v18;\n    v9[1] = v18;\n    v9[3] = v91;\n    goto LABEL_36;\n  }\nLABEL_89:\n  if ( *((_BYTE *)v9 + 48) )\n    goto LABEL_155;\n  if ( *((_BYTE *)v9 + 50) )\n    goto LABEL_154;\n  v37 = *((_BYTE *)v9 + 49);\n  if ( !v37 )\n    goto LABEL_112;\n  v38 = __ctype_b_loc();\n  v39 = 0LL;\n  v40 = *v38;\n  do\n  {\n    v10 -= ((*v40 & 0x100) == 0) - 1LL;\n    v39 -= ((*v40++ & 0x200) == 0) - 1LL;\n  }\n  while ( v40 != *v38 + 256 );\n  v86 = v6;\n  v41 = v9;\n  v82 = v91;\n  v83 = v9[3];\n  v84 = v89;\n  v85 = v9[1];\n  v9[2] = -2LL;\n  v90 = -2LL;\n  v42 = v39 - 1;\n  v43 = v10 - 1;\n  v44 = v37;\n  v45 = v42;\n  v46 = v43;\n  v47 = sub_402BC0(&v88, &v87);\n  while ( 2 )\n  {\n    v53 = v47;\n    v54 = sub_402BC0(v41, v96);\n    v55 = v96[0];\n    if ( v37 )\n    {\n      if ( v96[0] != 2 )\n      {\n        if ( !v44 || v87 == 2 )\n        {\n          v81 = dcgettext(0LL, \"misaligned [:upper:] and/or [:lower:] construct\", 5);\n          error(1, 0, v81);\n          start();\n        }\n        goto LABEL_98;\n      }\n    }\n    else\n    {\n      if ( v96[0] == 2 )\n        goto LABEL_103;\nLABEL_98:\n      v26 = v87 == 1;\n      v48 = v91;\n      v49 = *(_QWORD *)(v89 + 8);\n      v90 = -1LL;\n      v89 = v49;\n      v50 = *(_QWORD *)(v41[1] + 8);\n      v41[2] = -1LL;\n      v41[1] = v50;\n      v51 = v45;\n      if ( v26 )\n        v51 = v46;\n      v26 = v55 == 1;\n      v52 = v46;\n      v91 = v48 - v51;\n      if ( !v26 )\n        v52 = v45;\n      v41[3] -= v52;\n    }\nLABEL_103:\n    v44 = v90 == -1;\n    v37 = v41[2] == -1;\n    v3 = (unsigned int)(v53 + 1);\n    if ( (_DWORD)v3 && v54 != -1 )\n    {\n      v47 = sub_402BC0(&v88, &v87);\n      continue;\n    }\n    break;\n  }\n  v9 = v41;\n  v6 = v86;\n  if ( v82 < v91 || v83 < v41[3] )\n    __assert_fail(\"old_s1_len >= s1->length && old_s2_len >= s2->length\", \"src/tr.c\", 0x4C5u, \"validate_case_classes\");\n  v89 = v84;\n  v41[1] = v85;\nLABEL_112:\n  v14 = v91;\n  v15 = v9[3];\n  if ( v91 > v15 && !byte_60F5C1 )\n  {\n    if ( v15 )\n    {\n      v16 = v9[1];\n      switch ( *(_DWORD *)v16 )\n      {\n        case 0:\n        case 4:\n          goto LABEL_33;\n        case 1:\n          v17 = *(_BYTE *)(v16 + 17);\n          goto LABEL_34;\n        case 2:\n          goto LABEL_141;\n        default:\n          abort();\n      }\n    }\n    goto LABEL_156;\n  }\nLABEL_36:\n  if ( byte_60F5C2 && v93 )\n  {\n    if ( v9[3] != v91 || (v9[2] = -2LL, v20 = sub_402BC0(v9, 0LL), v3 = v20, v20 == -1) )\n    {\nLABEL_137:\n      v61 = dcgettext(\n              0LL,\n              \"when translating with complemented character classes,\\n\"\n              \"string2 must map all characters in the domain to one\",\n              5);\n      error(1, 0, v61);\nLABEL_138:\n      sub_403AC0(0);\n    }\n    while ( 1 )\n    {\n      v21 = sub_402BC0(v9, 0LL);\n      if ( v21 == -1 )\n        break;\n      if ( (_DWORD)v3 != v21 )\n        goto LABEL_137;\n    }\n  }\nLABEL_43:\n  sub_403F10(stdin, 2LL);\n  v22 = byte_60F5C4;\n  if ( v6 == 1 && byte_60F5C4 )\n  {\n    sub_403860(&v88, (unsigned __int8)byte_60F5C2, &byte_60D4C0);\n    sub_4038C0(sub_402E40);\n    goto LABEL_46;\n  }\n  if ( !byte_60F5C3 )\n  {\nLABEL_53:\n    if ( !byte_60F5C0 )\n      goto LABEL_46;\n    v24 = 0LL;\n    if ( byte_60F5C2 )\n    {\n      sub_403860(&v88, 0LL, byte_60D3C0);\n      v9[2] = -2LL;\n      for ( i = 0LL; i != 256; ++i )\n        byte_60D2C0[i] = i;\n      v58 = 0LL;\n      while ( 1 )\n      {\n        if ( !byte_60D3C0[v58] )\n        {\n          v59 = sub_402BC0(v9, 0LL);\n          if ( v59 == -1 )\n          {\n            if ( !byte_60F5C1 )\n              __assert_fail(\"ch != -1 || truncate_set1\", \"src/tr.c\", 0x727u, \"main\");\nLABEL_119:\n            if ( v22 )\n            {\n              sub_403860(v9, 0LL, &byte_60D4C0);\n              sub_4038C0(sub_402F40);\n              goto LABEL_46;\n            }\n            do\n            {\n              v56 = sub_402F40(&byte_60D5C0, 0x2000uLL);\n              if ( !v56 )\n                goto LABEL_46;\n            }\n            while ( v56 == fwrite_unlocked(&byte_60D5C0, 1uLL, v56, stdout) );\n            v75 = dcgettext(0LL, \"write error\", 5);\n            v76 = __errno_location();\n            error(1, *v76, v75);\nLABEL_153:\n            v77 = dcgettext(0LL, \"the [c*] repeat construct may not appear in string1\", 5);\n            error(1, 0, v77);\nLABEL_154:\n            v78 = dcgettext(\n                    0LL,\n                    \"when translating, the only character classes that may appear in\\nstring2 are 'upper' and 'lower'\",\n                    5);\n            error(1, 0, v78);\nLABEL_155:\n            v79 = dcgettext(0LL, \"[=c=] expressions may not appear in string2 when translating\", 5);\n            error(1, 0, v79);\nLABEL_156:\n            v80 = dcgettext(0LL, \"when not truncating set1, string2 must be non-empty\", 5);\n            error(1, 0, v80);\nLABEL_157:\n            sub_402F90();\n          }\n          byte_60D2C0[v58] = v59;\n        }\n        if ( ++v58 == 256 )\n          goto LABEL_119;\n      }\n    }\n    do\n    {\n      byte_60D2C0[v24] = v24;\n      ++v24;\n    }\n    while ( v24 != 256 );\n    v3 = (unsigned __int64)v96;\n    v90 = -2LL;\n    v9[2] = -2LL;\n    for ( j = sub_402BC0(&v88, &v87); ; j = sub_402BC0(&v88, &v87) )\n    {\n      v27 = j;\n      v28 = sub_402BC0(v9, v96);\n      if ( v87 )\n      {\n        if ( v87 == 1 && !v96[0] )\n        {\n          v29 = 0LL;\n          v30 = *__ctype_b_loc();\n          do\n          {\n            if ( (v30[v29] & 0x100) != 0 )\n              byte_60D2C0[v29] = (*__ctype_tolower_loc())[v29];\n            ++v29;\n          }\n          while ( v29 != 256 );\nLABEL_69:\n          v31 = *(_QWORD *)(v89 + 8);\n          v90 = -1LL;\n          v89 = v31;\n          v32 = *(_QWORD *)(v9[1] + 8);\n          v9[2] = -1LL;\n          v9[1] = v32;\n          continue;\n        }\n      }\n      else if ( v96[0] == 1 )\n      {\n        v35 = 0LL;\n        v36 = *__ctype_b_loc();\n        do\n        {\n          if ( (v36[v35] & 0x200) != 0 )\n            byte_60D2C0[v35] = (*__ctype_toupper_loc())[v35];\n          ++v35;\n        }\n        while ( v35 != 256 );\n        goto LABEL_69;\n      }\n      if ( (_DWORD)v27 == -1 || v28 == -1 )\n      {\n        v6 = v27 + 1;\n        if ( v6 && !byte_60F5C1 )\n          __assert_fail(\"c1 == -1 || truncate_set1\", \"src/tr.c\", 0x75Cu, \"main\");\n        goto LABEL_119;\n      }\n      v26 = v96[0] == 2;\n      byte_60D2C0[v27] = v28;\n      if ( !v26 )\n        goto LABEL_69;\n    }\n  }\n  if ( v6 != 1 )\n  {\n    if ( v6 == 2 && byte_60F5C4 )\n    {\n      sub_403860(&v88, (unsigned __int8)byte_60F5C2, byte_60D3C0);\n      sub_403860(v9, 0LL, &byte_60D4C0);\n      sub_4038C0(sub_402E70);\n      goto LABEL_46;\n    }\n    goto LABEL_53;\n  }\n  sub_403860(&v88, (unsigned __int8)byte_60F5C2, byte_60D3C0);\n  while ( 1 )\n  {\n    v60 = sub_402E70(&byte_60D5C0, 0x2000uLL);\n    if ( !v60 )\n      break;\n    if ( v60 != fwrite_unlocked(&byte_60D5C0, 1uLL, v60, stdout) )\n      goto LABEL_142;\n  }\nLABEL_46:\n  result = close(0);\n  if ( result )\n    goto LABEL_140;\n  return result;\n}\n\nint __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  unsigned __int64 v3; // r12\n  int v4; // eax\n  int v5; // ecx\n  int v6; // r15d\n  int v7; // esi\n  int v8; // eax\n  __int64 *v9; // rbx\n  __int64 v10; // r14\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  char *v13; // rax\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rdx\n  __int64 v16; // rcx\n  char v17; // r13\n  __int64 v18; // rax\n  __int64 v19; // rdx\n  unsigned int v20; // eax\n  int v21; // eax\n  char v22; // r13\n  int result; // eax\n  __int64 v24; // rax\n  int j; // eax\n  bool v26; // zf\n  __int64 v27; // r15\n  int v28; // eax\n  __int64 v29; // r14\n  const unsigned __int16 *v30; // r15\n  __int64 v31; // rax\n  __int64 v32; // rax\n  unsigned __int8 v33; // dl\n  int v34; // eax\n  __int64 v35; // r14\n  const unsigned __int16 *v36; // r15\n  char v37; // r13\n  const unsigned __int16 **v38; // rax\n  __int64 v39; // rcx\n  const unsigned __int16 *v40; // rdx\n  __int64 *v41; // rbp\n  __int64 v42; // rax\n  __int64 v43; // rcx\n  bool v44; // r14\n  __int64 v45; // r15\n  __int64 v46; // rbx\n  int v47; // eax\n  unsigned __int64 v48; // rdx\n  __int64 v49; // rsi\n  __int64 v50; // rsi\n  __int64 v51; // rsi\n  __int64 v52; // rcx\n  int v53; // r12d\n  int v54; // eax\n  int v55; // ecx\n  size_t v56; // rax\n  __int64 i; // rax\n  __int64 v58; // rbp\n  int v59; // eax\n  size_t v60; // rax\n  char *v61; // rax\n  char *v62; // rax\n  char *v63; // rbx\n  int *v64; // rax\n  char *v65; // rax\n  char *v66; // rbx\n  int *v67; // rax\n  __int64 v68; // rbx\n  char *v69; // rax\n  const char *v70; // rsi\n  char *v71; // rax\n  char *v72; // rax\n  __int64 v73; // rbx\n  char *v74; // rax\n  char *v75; // rbx\n  int *v76; // rax\n  char *v77; // rax\n  char *v78; // rax\n  char *v79; // rax\n  char *v80; // rax\n  char *v81; // rax\n  unsigned __int64 v82; // [rsp+18h] [rbp-1F0h]\n  unsigned __int64 v83; // [rsp+20h] [rbp-1E8h]\n  __int64 v84; // [rsp+28h] [rbp-1E0h]\n  __int64 v85; // [rsp+30h] [rbp-1D8h]\n  int v86; // [rsp+3Ch] [rbp-1CCh]\n  int v87; // [rsp+4Ch] [rbp-1BCh] BYREF\n  __int64 v88; // [rsp+50h] [rbp-1B8h] BYREF\n  __int64 v89; // [rsp+58h] [rbp-1B0h]\n  __int64 v90; // [rsp+60h] [rbp-1A8h]\n  unsigned __int64 v91; // [rsp+68h] [rbp-1A0h]\n  __int64 v92; // [rsp+70h] [rbp-198h]\n  char v93; // [rsp+81h] [rbp-187h]\n  __int64 v94; // [rsp+90h] [rbp-178h] BYREF\n  __int64 v95; // [rsp+98h] [rbp-170h]\n  int v96[78]; // [rsp+D0h] [rbp-138h] BYREF\n\n  v3 = (unsigned __int64)a2;\n  sub_403F40(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_407E60(sub_403E60);\n  while ( 1 )\n  {\n    v4 = sub_4075A0(a1, a2, \"+cCdst\", &off_4082C0, 0LL);\n    if ( v4 == -1 )\n      break;\n    if ( v4 == 99 )\n      goto LABEL_14;\n    if ( v4 <= 99 )\n    {\n      if ( v4 == -130 )\n        goto LABEL_138;\n      if ( v4 != 67 )\n      {\n        if ( v4 == -131 )\n        {\n          sub_406040(\n            (_DWORD)stdout,\n            (unsigned int)\"tr\",\n            (unsigned int)&unk_407FC7,\n            (_DWORD)off_60D210,\n            (unsigned int)\"Jim Meyering\",\n            0);\n          exit(0);\n        }\nLABEL_13:\n        sub_403AC0(1);\n      }\nLABEL_14:\n      byte_60F5C2 = 1;\n    }\n    else\n    {\n      switch ( v4 )\n      {\n        case 's':\n          byte_60F5C4 = 1;\n          break;\n        case 't':\n          byte_60F5C1 = 1;\n          break;\n        case 'd':\n          byte_60F5C3 = 1;\n          break;\n        default:\n          goto LABEL_13;\n      }\n    }\n  }\n  v5 = dword_60D27C;\n  v6 = a1 - dword_60D27C;\n  if ( a1 - dword_60D27C == 2 )\n  {\n    if ( byte_60F5C3 )\n    {\n      byte_60F5C0 = 0;\n      if ( !byte_60F5C4 )\n      {\nLABEL_19:\n        v7 = 1;\n        v8 = 2 - ((unsigned __int8)byte_60F5C4 < (unsigned __int8)byte_60F5C3);\n        goto LABEL_20;\n      }\n    }\n    else\n    {\n      byte_60F5C0 = 1;\n      v8 = 2;\n      if ( byte_60F5C4 )\n        goto LABEL_21;\n    }\n    v89 = sub_406180(32LL);\n    v88 = v89;\n    *(_QWORD *)(v89 + 8) = 0LL;\n    if ( (unsigned __int8)sub_403010(a2[dword_60D27C], &v88) )\n      goto LABEL_78;\n    return 1;\n  }\n  byte_60F5C0 = 0;\n  if ( byte_60F5C4 != byte_60F5C3 )\n    goto LABEL_19;\n  v7 = 2;\n  v8 = 2;\nLABEL_20:\n  if ( v6 < v7 )\n  {\n    if ( !v6 )\n    {\n      v72 = dcgettext(0LL, \"missing operand\", 5);\n      error(0, 0, v72);\n      goto LABEL_13;\n    }\n    v73 = sub_405B60(*(_QWORD *)(v3 + 8LL * (int)a1 - 8));\n    v74 = dcgettext(0LL, \"missing operand after %s\", 5);\n    error(0, 0, v74, v73);\n    v70 = \"Two strings must be given when both deleting and squeezing repeats.\";\n    if ( !byte_60F5C4 )\n      v70 = \"Two strings must be given when translating.\";\nLABEL_145:\n    v71 = dcgettext(0LL, v70, 5);\n    __fprintf_chk(stderr, 1LL, \"%s\\n\", v71);\n    goto LABEL_13;\n  }\nLABEL_21:\n  if ( v6 > v8 )\n  {\nLABEL_143:\n    v68 = sub_405B60(*(_QWORD *)(v3 + 8LL * (v5 + v8)));\n    v69 = dcgettext(0LL, \"extra operand %s\", 5);\n    error(0, 0, v69, v68);\n    if ( v6 != 2 )\n      goto LABEL_13;\n    v70 = \"Only one string may be given when deleting without squeezing repeats.\";\n    goto LABEL_145;\n  }\n  v89 = sub_406180(32LL);\n  v88 = v89;\n  *(_QWORD *)(v89 + 8) = 0LL;\n  if ( !(unsigned __int8)sub_403010(*(_QWORD *)(v3 + 8LL * dword_60D27C), &v88) )\n    return 1;\n  v9 = 0LL;\n  if ( v6 != 2 )\n    goto LABEL_24;\nLABEL_78:\n  v95 = sub_406180(32LL);\n  v94 = v95;\n  *(_QWORD *)(v95 + 8) = 0LL;\n  if ( !(unsigned __int8)sub_403010(*(_QWORD *)(v3 + 8LL * dword_60D27C + 8), &v94) )\n    return 1;\n  v9 = &v94;\nLABEL_24:\n  sub_402A40(&v88);\n  if ( byte_60F5C2 )\n  {\n    v90 = -2LL;\n    LODWORD(v3) = 256;\n    memset(v96, 0, 0x100uLL);\n    while ( 1 )\n    {\n      v34 = sub_402BC0(&v88, 0LL);\n      if ( v34 == -1 )\n        break;\n      v33 = *((_BYTE *)v96 + v34);\n      *((_BYTE *)v96 + v34) = 1;\n      LODWORD(v3) = v3 - (v33 ^ 1);\n    }\n    v3 = (int)v3;\n    v91 = (int)v3;\n  }\n  v10 = v92;\n  if ( v92 )\n    goto LABEL_153;\n  if ( !v9 )\n    goto LABEL_43;\n  v3 = v91;\n  sub_402A40(v9);\n  v11 = v9[3];\n  if ( v3 >= v11 && v9[4] == 1 )\n  {\n    v26 = byte_60F5C0 == 0;\n    *(_QWORD *)(v9[5] + 24) = v3 - v11;\n    v9[3] = v3;\n    if ( v26 )\n      goto LABEL_32;\n    goto LABEL_89;\n  }\n  v12 = v9[4];\n  if ( v12 > 1 )\n  {\n    v62 = dcgettext(0LL, \"only one [c*] repeat construct may appear in string2\", 5);\n    error(1, 0, v62);\nLABEL_140:\n    v63 = dcgettext(0LL, \"standard input\", 5);\n    v64 = __errno_location();\n    error(1, *v64, v63);\nLABEL_141:\n    v65 = dcgettext(\n            0LL,\n            \"when translating with string1 longer than string2,\\nthe latter string must not end with a character class\",\n            5);\n    error(1, 0, v65);\nLABEL_142:\n    v66 = dcgettext(0LL, \"write error\", 5);\n    v67 = __errno_location();\n    error(1, *v67, v66);\n    goto LABEL_143;\n  }\n  if ( !byte_60F5C0 )\n  {\n    if ( !v12 )\n      goto LABEL_43;\nLABEL_32:\n    v13 = dcgettext(0LL, \"the [c*] construct may appear in string2 only when translating\", 5);\n    error(1, 0, v13);\nLABEL_33:\n    v17 = *(_BYTE *)(v16 + 16);\nLABEL_34:\n    v3 = v14 - v15;\n    v18 = sub_406180(32LL);\n    v19 = v9[1];\n    *(_QWORD *)(v18 + 8) = 0LL;\n    *(_DWORD *)v18 = 4;\n    *(_BYTE *)(v18 + 16) = v17;\n    *(_QWORD *)(v18 + 24) = v3;\n    if ( !v19 )\n      goto LABEL_157;\n    *(_QWORD *)(v19 + 8) = v18;\n    v9[1] = v18;\n    v9[3] = v91;\n    goto LABEL_36;\n  }\nLABEL_89:\n  if ( *((_BYTE *)v9 + 48) )\n    goto LABEL_155;\n  if ( *((_BYTE *)v9 + 50) )\n    goto LABEL_154;\n  v37 = *((_BYTE *)v9 + 49);\n  if ( !v37 )\n    goto LABEL_112;\n  v38 = __ctype_b_loc();\n  v39 = 0LL;\n  v40 = *v38;\n  do\n  {\n    v10 -= ((*v40 & 0x100) == 0) - 1LL;\n    v39 -= ((*v40++ & 0x200) == 0) - 1LL;\n  }\n  while ( v40 != *v38 + 256 );\n  v86 = v6;\n  v41 = v9;\n  v82 = v91;\n  v83 = v9[3];\n  v84 = v89;\n  v85 = v9[1];\n  v9[2] = -2LL;\n  v90 = -2LL;\n  v42 = v39 - 1;\n  v43 = v10 - 1;\n  v44 = v37;\n  v45 = v42;\n  v46 = v43;\n  v47 = sub_402BC0(&v88, &v87);\n  while ( 2 )\n  {\n    v53 = v47;\n    v54 = sub_402BC0(v41, v96);\n    v55 = v96[0];\n    if ( v37 )\n    {\n      if ( v96[0] != 2 )\n      {\n        if ( !v44 || v87 == 2 )\n        {\n          v81 = dcgettext(0LL, \"misaligned [:upper:] and/or [:lower:] construct\", 5);\n          error(1, 0, v81);\n          start();\n        }\n        goto LABEL_98;\n      }\n    }\n    else\n    {\n      if ( v96[0] == 2 )\n        goto LABEL_103;\nLABEL_98:\n      v26 = v87 == 1;\n      v48 = v91;\n      v49 = *(_QWORD *)(v89 + 8);\n      v90 = -1LL;\n      v89 = v49;\n      v50 = *(_QWORD *)(v41[1] + 8);\n      v41[2] = -1LL;\n      v41[1] = v50;\n      v51 = v45;\n      if ( v26 )\n        v51 = v46;\n      v26 = v55 == 1;\n      v52 = v46;\n      v91 = v48 - v51;\n      if ( !v26 )\n        v52 = v45;\n      v41[3] -= v52;\n    }\nLABEL_103:\n    v44 = v90 == -1;\n    v37 = v41[2] == -1;\n    v3 = (unsigned int)(v53 + 1);\n    if ( (_DWORD)v3 && v54 != -1 )\n    {\n      v47 = sub_402BC0(&v88, &v87);\n      continue;\n    }\n    break;\n  }\n  v9 = v41;\n  v6 = v86;\n  if ( v82 < v91 || v83 < v41[3] )\n    __assert_fail(\"old_s1_len >= s1->length && old_s2_len >= s2->length\", \"src/tr.c\", 0x4C5u, \"validate_case_classes\");\n  v89 = v84;\n  v41[1] = v85;\nLABEL_112:\n  v14 = v91;\n  v15 = v9[3];\n  if ( v91 > v15 && !byte_60F5C1 )\n  {\n    if ( v15 )\n    {\n      v16 = v9[1];\n      switch ( *(_DWORD *)v16 )\n      {\n        case 0:\n        case 4:\n          goto LABEL_33;\n        case 1:\n          v17 = *(_BYTE *)(v16 + 17);\n          goto LABEL_34;\n        case 2:\n          goto LABEL_141;\n        default:\n          abort();\n      }\n    }\n    goto LABEL_156;\n  }\nLABEL_36:\n  if ( byte_60F5C2 && v93 )\n  {\n    if ( v9[3] != v91 || (v9[2] = -2LL, v20 = sub_402BC0(v9, 0LL), v3 = v20, v20 == -1) )\n    {\nLABEL_137:\n      v61 = dcgettext(\n              0LL,\n              \"when translating with complemented character classes,\\n\"\n              \"string2 must map all characters in the domain to one\",\n              5);\n      error(1, 0, v61);\nLABEL_138:\n      sub_403AC0(0);\n    }\n    while ( 1 )\n    {\n      v21 = sub_402BC0(v9, 0LL);\n      if ( v21 == -1 )\n        break;\n      if ( (_DWORD)v3 != v21 )\n        goto LABEL_137;\n    }\n  }\nLABEL_43:\n  sub_403F10(stdin, 2LL);\n  v22 = byte_60F5C4;\n  if ( v6 == 1 && byte_60F5C4 )\n  {\n    sub_403860(&v88, (unsigned __int8)byte_60F5C2, &byte_60D4C0);\n    sub_4038C0(sub_402E40);\n    goto LABEL_46;\n  }\n  if ( !byte_60F5C3 )\n  {\nLABEL_53:\n    if ( !byte_60F5C0 )\n      goto LABEL_46;\n    v24 = 0LL;\n    if ( byte_60F5C2 )\n    {\n      sub_403860(&v88, 0LL, byte_60D3C0);\n      v9[2] = -2LL;\n      for ( i = 0LL; i != 256; ++i )\n        byte_60D2C0[i] = i;\n      v58 = 0LL;\n      while ( 1 )\n      {\n        if ( !byte_60D3C0[v58] )\n        {\n          v59 = sub_402BC0(v9, 0LL);\n          if ( v59 == -1 )\n          {\n            if ( !byte_60F5C1 )\n              __assert_fail(\"ch != -1 || truncate_set1\", \"src/tr.c\", 0x727u, \"main\");\nLABEL_119:\n            if ( v22 )\n            {\n              sub_403860(v9, 0LL, &byte_60D4C0);\n              sub_4038C0(sub_402F40);\n              goto LABEL_46;\n            }\n            do\n            {\n              v56 = sub_402F40(&byte_60D5C0, 0x2000uLL);\n              if ( !v56 )\n                goto LABEL_46;\n            }\n            while ( v56 == fwrite_unlocked(&byte_60D5C0, 1uLL, v56, stdout) );\n            v75 = dcgettext(0LL, \"write error\", 5);\n            v76 = __errno_location();\n            error(1, *v76, v75);\nLABEL_153:\n            v77 = dcgettext(0LL, \"the [c*] repeat construct may not appear in string1\", 5);\n            error(1, 0, v77);\nLABEL_154:\n            v78 = dcgettext(\n                    0LL,\n                    \"when translating, the only character classes that may appear in\\nstring2 are 'upper' and 'lower'\",\n                    5);\n            error(1, 0, v78);\nLABEL_155:\n            v79 = dcgettext(0LL, \"[=c=] expressions may not appear in string2 when translating\", 5);\n            error(1, 0, v79);\nLABEL_156:\n            v80 = dcgettext(0LL, \"when not truncating set1, string2 must be non-empty\", 5);\n            error(1, 0, v80);\nLABEL_157:\n            sub_402F90();\n          }\n          byte_60D2C0[v58] = v59;\n        }\n        if ( ++v58 == 256 )\n          goto LABEL_119;\n      }\n    }\n    do\n    {\n      byte_60D2C0[v24] = v24;\n      ++v24;\n    }\n    while ( v24 != 256 );\n    v3 = (unsigned __int64)v96;\n    v90 = -2LL;\n    v9[2] = -2LL;\n    for ( j = sub_402BC0(&v88, &v87); ; j = sub_402BC0(&v88, &v87) )\n    {\n      v27 = j;\n      v28 = sub_402BC0(v9, v96);\n      if ( v87 )\n      {\n        if ( v87 == 1 && !v96[0] )\n        {\n          v29 = 0LL;\n          v30 = *__ctype_b_loc();\n          do\n          {\n            if ( (v30[v29] & 0x100) != 0 )\n              byte_60D2C0[v29] = (*__ctype_tolower_loc())[v29];\n            ++v29;\n          }\n          while ( v29 != 256 );\nLABEL_69:\n          v31 = *(_QWORD *)(v89 + 8);\n          v90 = -1LL;\n          v89 = v31;\n          v32 = *(_QWORD *)(v9[1] + 8);\n          v9[2] = -1LL;\n          v9[1] = v32;\n          continue;\n        }\n      }\n      else if ( v96[0] == 1 )\n      {\n        v35 = 0LL;\n        v36 = *__ctype_b_loc();\n        do\n        {\n          if ( (v36[v35] & 0x200) != 0 )\n            byte_60D2C0[v35] = (*__ctype_toupper_loc())[v35];\n          ++v35;\n        }\n        while ( v35 != 256 );\n        goto LABEL_69;\n      }\n      if ( (_DWORD)v27 == -1 || v28 == -1 )\n      {\n        v6 = v27 + 1;\n        if ( v6 && !byte_60F5C1 )\n          __assert_fail(\"c1 == -1 || truncate_set1\", \"src/tr.c\", 0x75Cu, \"main\");\n        goto LABEL_119;\n      }\n      v26 = v96[0] == 2;\n      byte_60D2C0[v27] = v28;\n      if ( !v26 )\n        goto LABEL_69;\n    }\n  }\n  if ( v6 != 1 )\n  {\n    if ( v6 == 2 && byte_60F5C4 )\n    {\n      sub_403860(&v88, (unsigned __int8)byte_60F5C2, byte_60D3C0);\n      sub_403860(v9, 0LL, &byte_60D4C0);\n      sub_4038C0(sub_402E70);\n      goto LABEL_46;\n    }\n    goto LABEL_53;\n  }\n  sub_403860(&v88, (unsigned __int8)byte_60F5C2, byte_60D3C0);\n  while ( 1 )\n  {\n    v60 = sub_402E70(&byte_60D5C0, 0x2000uLL);\n    if ( !v60 )\n      break;\n    if ( v60 != fwrite_unlocked(&byte_60D5C0, 1uLL, v60, stdout) )\n      goto LABEL_142;\n  }\nLABEL_46:\n  result = close(0);\n  if ( result )\n    goto LABEL_140;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4025CB",
            "funcStartAddr": "0x4025cb",
            "funcEndAddr": "0x4025ea",
            "decompiledFuncCode": "__int64 *sub_4025CB()\n{\n  return &program_invocation_short_name;\n}\n"
        },
        {
            "funcName": "sub_4025EA",
            "funcStartAddr": "0x4025ea",
            "funcEndAddr": "0x402621",
            "decompiledFuncCode": "__int64 sub_4025EA()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_402621",
            "funcStartAddr": "0x402621",
            "funcEndAddr": "0x402678",
            "decompiledFuncCode": "__int64 *sub_402621()\n{\n  __int64 *result; // rax\n\n  if ( !byte_60D2A8 )\n  {\n    while ( qword_60D2B0 < (unsigned __int64)(&qword_60CE48 - qword_60CE40 - 1) )\n      ((void (*)(void))qword_60CE40[++qword_60D2B0])();\n    result = sub_4025CB();\n    byte_60D2A8 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402678",
            "funcStartAddr": "0x402678",
            "funcEndAddr": "0x40267d",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_402678()\n{\n  return sub_4025EA();\n}\n"
        },
        {
            "funcName": "sub_402680",
            "funcStartAddr": "0x402680",
            "funcEndAddr": "0x40270c",
            "decompiledFuncCode": "__int64 __fastcall sub_402680(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // r8\n  __int64 result; // rax\n  __int64 v4; // r10\n  unsigned __int64 v5; // r9\n  __int64 v6; // rdx\n  int v7; // edi\n\n  v2 = *a1;\n  result = 0LL;\n  if ( *(_BYTE *)(*a1 + a2) == 42 )\n  {\n    v4 = a1[1];\n    if ( !*(_BYTE *)(v4 + a2) )\n    {\n      v5 = a1[2];\n      v6 = a2 + 1;\n      if ( a2 + 1 < v5 )\n      {\n        v7 = *(unsigned __int8 *)(v2 + a2 + 1);\n        if ( (unsigned int)(v7 - 48) > 9 )\n        {\nLABEL_12:\n          result = 0LL;\n          if ( (_BYTE)v7 == 93 )\n            return *(unsigned __int8 *)(v4 + v6) ^ 1u;\n        }\n        else\n        {\n          result = *(unsigned __int8 *)(v4 + a2 + 1);\n          if ( (_BYTE)result )\n          {\n            return 0LL;\n          }\n          else\n          {\n            do\n            {\n              if ( ++v6 >= v5 )\n                break;\n              v7 = *(unsigned __int8 *)(v2 + v6);\n              if ( (unsigned int)(v7 - 48) > 9 )\n                goto LABEL_12;\n            }\n            while ( !*(_BYTE *)(v4 + v6) );\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402710",
            "funcStartAddr": "0x402710",
            "funcEndAddr": "0x402775",
            "decompiledFuncCode": "unsigned __int8 *__fastcall sub_402710(unsigned __int8 a1)\n{\n  unsigned __int8 *v1; // rbp\n  unsigned __int8 *result; // rax\n\n  v1 = (unsigned __int8 *)sub_406180(5LL);\n  if ( ((*__ctype_b_loc())[a1] & 0x4000) != 0 )\n  {\n    *v1 = a1;\n    result = v1;\n    v1[1] = 0;\n  }\n  else\n  {\n    __sprintf_chk(v1, 1LL, 5LL, \"\\\\%03o\", a1);\n    return v1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402780",
            "funcStartAddr": "0x402780",
            "funcEndAddr": "0x4028ae",
            "decompiledFuncCode": "__int64 __fastcall sub_402780(char *a1, __int64 a2)\n{\n  __int64 v3; // rdi\n  __int64 v4; // rax\n  __int64 v5; // r14\n  char *v6; // r13\n  char *v7; // r12\n  const char *v8; // rsi\n  char v9; // bl\n  char v11[45]; // [rsp+Bh] [rbp-2Dh] BYREF\n\n  v3 = 4 * (a2 + 1);\n  if ( ((a2 + 1) & 0x2000000000000000LL) != 0 || (unsigned __int64)(a2 + 1) >> 62 )\n    sub_4063D0(v3);\n  v4 = sub_406180(v3);\n  v5 = v4;\n  if ( a2 )\n  {\n    v6 = &a1[a2];\n    v7 = (char *)v4;\n    do\n    {\n      v9 = *a1;\n      if ( *a1 == 10 )\n      {\n        v8 = \"\\\\n\";\n      }\n      else\n      {\n        if ( v9 > 10 )\n        {\n          v8 = \"\\\\f\";\n          if ( v9 == 12 )\n            goto LABEL_9;\n          v8 = \"\\\\v\";\n          if ( v9 < 12 )\n            goto LABEL_9;\n          v8 = (const char *)&unk_407ED5;\n          if ( v9 == 13 )\n            goto LABEL_9;\n          v8 = \"\\\\\";\n          if ( v9 == 92 )\n            goto LABEL_9;\n        }\n        else\n        {\n          v8 = \"\\\\b\";\n          if ( v9 == 8 )\n            goto LABEL_9;\n          v8 = \"\\\\t\";\n          if ( v9 > 8 )\n            goto LABEL_9;\n          v8 = \"\\\\a\";\n          if ( v9 == 7 )\n            goto LABEL_9;\n        }\n        if ( ((*__ctype_b_loc())[(unsigned __int8)v9] & 0x4000) != 0 )\n        {\n          v11[0] = v9;\n          v8 = v11;\n          v11[1] = 0;\n        }\n        else\n        {\n          __sprintf_chk(v11, 1LL, 5LL, \"\\\\%03o\", (unsigned __int8)v9);\n          v8 = v11;\n        }\n      }\nLABEL_9:\n      ++a1;\n      v7 = stpcpy(v7, v8);\n    }\n    while ( v6 != a1 );\n  }\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_4028B0",
            "funcStartAddr": "0x4018f0",
            "funcEndAddr": "0x4018f5",
            "decompiledFuncCode": "bool __fastcall sub_4028B0(int a1, unsigned __int8 a2)\n{\n  int v2; // eax\n\n  switch ( a1 )\n  {\n    case 0:\n      v2 = (*__ctype_b_loc())[a2] & 8;\n      break;\n    case 1:\n      v2 = (*__ctype_b_loc())[a2] & 0x400;\n      break;\n    case 2:\n      v2 = (*__ctype_b_loc())[a2] & 1;\n      break;\n    case 3:\n      v2 = (*__ctype_b_loc())[a2] & 2;\n      break;\n    case 4:\n      v2 = (*__ctype_b_loc())[a2] & 0x800;\n      break;\n    case 5:\n      v2 = (*__ctype_b_loc())[a2] & 0x8000;\n      break;\n    case 6:\n      v2 = (*__ctype_b_loc())[a2] & 0x200;\n      break;\n    case 7:\n      v2 = (*__ctype_b_loc())[a2] & 0x4000;\n      break;\n    case 8:\n      v2 = (*__ctype_b_loc())[a2] & 4;\n      break;\n    case 9:\n      v2 = (*__ctype_b_loc())[a2] & 0x2000;\n      break;\n    case 10:\n      v2 = (*__ctype_b_loc())[a2] & 0x100;\n      break;\n    case 11:\n      v2 = (*__ctype_b_loc())[a2] & 0x1000;\n      break;\n    default:\n      abort();\n  }\n  return v2 != 0;\n}\n\nbool __fastcall sub_4028B0(int a1, unsigned __int8 a2)\n{\n  int v2; // eax\n\n  switch ( a1 )\n  {\n    case 0:\n      v2 = (*__ctype_b_loc())[a2] & 8;\n      break;\n    case 1:\n      v2 = (*__ctype_b_loc())[a2] & 0x400;\n      break;\n    case 2:\n      v2 = (*__ctype_b_loc())[a2] & 1;\n      break;\n    case 3:\n      v2 = (*__ctype_b_loc())[a2] & 2;\n      break;\n    case 4:\n      v2 = (*__ctype_b_loc())[a2] & 0x800;\n      break;\n    case 5:\n      v2 = (*__ctype_b_loc())[a2] & 0x8000;\n      break;\n    case 6:\n      v2 = (*__ctype_b_loc())[a2] & 0x200;\n      break;\n    case 7:\n      v2 = (*__ctype_b_loc())[a2] & 0x4000;\n      break;\n    case 8:\n      v2 = (*__ctype_b_loc())[a2] & 4;\n      break;\n    case 9:\n      v2 = (*__ctype_b_loc())[a2] & 0x2000;\n      break;\n    case 10:\n      v2 = (*__ctype_b_loc())[a2] & 0x100;\n      break;\n    case 11:\n      v2 = (*__ctype_b_loc())[a2] & 0x1000;\n      break;\n    default:\n      abort();\n  }\n  return v2 != 0;\n}\n"
        },
        {
            "funcName": "sub_4028B0",
            "funcStartAddr": "0x4018f0",
            "funcEndAddr": "0x4018f5",
            "decompiledFuncCode": "bool __fastcall sub_4028B0(int a1, unsigned __int8 a2)\n{\n  int v2; // eax\n\n  switch ( a1 )\n  {\n    case 0:\n      v2 = (*__ctype_b_loc())[a2] & 8;\n      break;\n    case 1:\n      v2 = (*__ctype_b_loc())[a2] & 0x400;\n      break;\n    case 2:\n      v2 = (*__ctype_b_loc())[a2] & 1;\n      break;\n    case 3:\n      v2 = (*__ctype_b_loc())[a2] & 2;\n      break;\n    case 4:\n      v2 = (*__ctype_b_loc())[a2] & 0x800;\n      break;\n    case 5:\n      v2 = (*__ctype_b_loc())[a2] & 0x8000;\n      break;\n    case 6:\n      v2 = (*__ctype_b_loc())[a2] & 0x200;\n      break;\n    case 7:\n      v2 = (*__ctype_b_loc())[a2] & 0x4000;\n      break;\n    case 8:\n      v2 = (*__ctype_b_loc())[a2] & 4;\n      break;\n    case 9:\n      v2 = (*__ctype_b_loc())[a2] & 0x2000;\n      break;\n    case 10:\n      v2 = (*__ctype_b_loc())[a2] & 0x100;\n      break;\n    case 11:\n      v2 = (*__ctype_b_loc())[a2] & 0x1000;\n      break;\n    default:\n      abort();\n  }\n  return v2 != 0;\n}\n\nbool __fastcall sub_4028B0(int a1, unsigned __int8 a2)\n{\n  int v2; // eax\n\n  switch ( a1 )\n  {\n    case 0:\n      v2 = (*__ctype_b_loc())[a2] & 8;\n      break;\n    case 1:\n      v2 = (*__ctype_b_loc())[a2] & 0x400;\n      break;\n    case 2:\n      v2 = (*__ctype_b_loc())[a2] & 1;\n      break;\n    case 3:\n      v2 = (*__ctype_b_loc())[a2] & 2;\n      break;\n    case 4:\n      v2 = (*__ctype_b_loc())[a2] & 0x800;\n      break;\n    case 5:\n      v2 = (*__ctype_b_loc())[a2] & 0x8000;\n      break;\n    case 6:\n      v2 = (*__ctype_b_loc())[a2] & 0x200;\n      break;\n    case 7:\n      v2 = (*__ctype_b_loc())[a2] & 0x4000;\n      break;\n    case 8:\n      v2 = (*__ctype_b_loc())[a2] & 4;\n      break;\n    case 9:\n      v2 = (*__ctype_b_loc())[a2] & 0x2000;\n      break;\n    case 10:\n      v2 = (*__ctype_b_loc())[a2] & 0x100;\n      break;\n    case 11:\n      v2 = (*__ctype_b_loc())[a2] & 0x1000;\n      break;\n    default:\n      abort();\n  }\n  return v2 != 0;\n}\n"
        },
        {
            "funcName": "sub_402A40",
            "funcStartAddr": "0x4018f5",
            "funcEndAddr": "0x4018fa",
            "decompiledFuncCode": "char __fastcall sub_402A40(__int64 *a1)\n{\n  __int64 v1; // r13\n  __int64 v2; // rax\n  __int64 v3; // rbp\n  __int64 v4; // rbx\n  __int64 v5; // rdx\n  bool v6; // cf\n  __int64 v7; // rbx\n  int v8; // r15d\n  int v9; // r14d\n  int v10; // eax\n  int v11; // edx\n  char *v12; // rax\n  char result; // al\n\n  v1 = 0LL;\n  *((_WORD *)a1 + 24) = 0;\n  v2 = *a1;\n  a1[4] = 0LL;\n  v3 = *(_QWORD *)(v2 + 8);\n  for ( *((_BYTE *)a1 + 50) = 0; v3; v3 = *(_QWORD *)(v3 + 8) )\n  {\n    LODWORD(v2) = *(_DWORD *)v3;\n    switch ( *(_DWORD *)v3 )\n    {\n      case 0:\n        v4 = 1LL;\n        goto LABEL_6;\n      case 1:\n        v10 = *(unsigned __int8 *)(v3 + 17);\n        v11 = *(unsigned __int8 *)(v3 + 16);\n        if ( (unsigned __int8)v10 < (unsigned __int8)v11 )\n          goto LABEL_21;\n        LODWORD(v2) = v10 - v11 + 1;\n        v4 = (int)v2;\nLABEL_6:\n        v6 = __CFADD__(v1, v4);\n        v7 = v1 + v4;\n        v1 = v7;\n        if ( v6 || v7 == -1 )\n        {\n          v12 = dcgettext(0LL, \"too many characters in set\", 5);\n          error(1, 0, v12);\nLABEL_21:\n          __assert_fail(\"p->u.range.last_char >= p->u.range.first_char\", \"src/tr.c\", 0x4EEu, \"get_spec_stats\");\n        }\n        return result;\n      case 2:\n        *((_BYTE *)a1 + 49) = 1;\n        v8 = *(_DWORD *)(v3 + 16);\n        v9 = 0;\n        v4 = 0LL;\n        do\n        {\n          LOBYTE(v2) = sub_4028B0(v8, v9);\n          v4 -= ((_BYTE)v2 == 0) - 1LL;\n          ++v9;\n        }\n        while ( v9 != 256 );\n        if ( v8 != 6 && v8 != 10 )\n          *((_BYTE *)a1 + 50) = 1;\n        goto LABEL_6;\n      case 3:\n        LODWORD(v2) = 0;\n        v4 = 0LL;\n        do\n        {\n          v5 = *(_BYTE *)(v3 + 16) == (unsigned __int8)v2;\n          LODWORD(v2) = v2 + 1;\n          v4 += v5;\n        }\n        while ( (_DWORD)v2 != 256 );\n        *((_BYTE *)a1 + 48) = 1;\n        goto LABEL_6;\n      case 4:\n        v4 = *(_QWORD *)(v3 + 24);\n        if ( v4 )\n          goto LABEL_6;\n        a1[5] = v3;\n        ++a1[4];\n        break;\n      default:\n        abort();\n    }\n  }\n  a1[3] = v1;\n  return v2;\n}\n\nchar __fastcall sub_402A40(__int64 *a1)\n{\n  __int64 v1; // r13\n  __int64 v2; // rax\n  __int64 v3; // rbp\n  __int64 v4; // rbx\n  __int64 v5; // rdx\n  bool v6; // cf\n  __int64 v7; // rbx\n  int v8; // r15d\n  int v9; // r14d\n  int v10; // eax\n  int v11; // edx\n  char *v12; // rax\n  char result; // al\n\n  v1 = 0LL;\n  *((_WORD *)a1 + 24) = 0;\n  v2 = *a1;\n  a1[4] = 0LL;\n  v3 = *(_QWORD *)(v2 + 8);\n  for ( *((_BYTE *)a1 + 50) = 0; v3; v3 = *(_QWORD *)(v3 + 8) )\n  {\n    LODWORD(v2) = *(_DWORD *)v3;\n    switch ( *(_DWORD *)v3 )\n    {\n      case 0:\n        v4 = 1LL;\n        goto LABEL_6;\n      case 1:\n        v10 = *(unsigned __int8 *)(v3 + 17);\n        v11 = *(unsigned __int8 *)(v3 + 16);\n        if ( (unsigned __int8)v10 < (unsigned __int8)v11 )\n          goto LABEL_21;\n        LODWORD(v2) = v10 - v11 + 1;\n        v4 = (int)v2;\nLABEL_6:\n        v6 = __CFADD__(v1, v4);\n        v7 = v1 + v4;\n        v1 = v7;\n        if ( v6 || v7 == -1 )\n        {\n          v12 = dcgettext(0LL, \"too many characters in set\", 5);\n          error(1, 0, v12);\nLABEL_21:\n          __assert_fail(\"p->u.range.last_char >= p->u.range.first_char\", \"src/tr.c\", 0x4EEu, \"get_spec_stats\");\n        }\n        return result;\n      case 2:\n        *((_BYTE *)a1 + 49) = 1;\n        v8 = *(_DWORD *)(v3 + 16);\n        v9 = 0;\n        v4 = 0LL;\n        do\n        {\n          LOBYTE(v2) = sub_4028B0(v8, v9);\n          v4 -= ((_BYTE)v2 == 0) - 1LL;\n          ++v9;\n        }\n        while ( v9 != 256 );\n        if ( v8 != 6 && v8 != 10 )\n          *((_BYTE *)a1 + 50) = 1;\n        goto LABEL_6;\n      case 3:\n        LODWORD(v2) = 0;\n        v4 = 0LL;\n        do\n        {\n          v5 = *(_BYTE *)(v3 + 16) == (unsigned __int8)v2;\n          LODWORD(v2) = v2 + 1;\n          v4 += v5;\n        }\n        while ( (_DWORD)v2 != 256 );\n        *((_BYTE *)a1 + 48) = 1;\n        goto LABEL_6;\n      case 4:\n        v4 = *(_QWORD *)(v3 + 24);\n        if ( v4 )\n          goto LABEL_6;\n        a1[5] = v3;\n        ++a1[4];\n        break;\n      default:\n        abort();\n    }\n  }\n  a1[3] = v1;\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_402A40",
            "funcStartAddr": "0x4018f5",
            "funcEndAddr": "0x4018fa",
            "decompiledFuncCode": "char __fastcall sub_402A40(__int64 *a1)\n{\n  __int64 v1; // r13\n  __int64 v2; // rax\n  __int64 v3; // rbp\n  __int64 v4; // rbx\n  __int64 v5; // rdx\n  bool v6; // cf\n  __int64 v7; // rbx\n  int v8; // r15d\n  int v9; // r14d\n  int v10; // eax\n  int v11; // edx\n  char *v12; // rax\n  char result; // al\n\n  v1 = 0LL;\n  *((_WORD *)a1 + 24) = 0;\n  v2 = *a1;\n  a1[4] = 0LL;\n  v3 = *(_QWORD *)(v2 + 8);\n  for ( *((_BYTE *)a1 + 50) = 0; v3; v3 = *(_QWORD *)(v3 + 8) )\n  {\n    LODWORD(v2) = *(_DWORD *)v3;\n    switch ( *(_DWORD *)v3 )\n    {\n      case 0:\n        v4 = 1LL;\n        goto LABEL_6;\n      case 1:\n        v10 = *(unsigned __int8 *)(v3 + 17);\n        v11 = *(unsigned __int8 *)(v3 + 16);\n        if ( (unsigned __int8)v10 < (unsigned __int8)v11 )\n          goto LABEL_21;\n        LODWORD(v2) = v10 - v11 + 1;\n        v4 = (int)v2;\nLABEL_6:\n        v6 = __CFADD__(v1, v4);\n        v7 = v1 + v4;\n        v1 = v7;\n        if ( v6 || v7 == -1 )\n        {\n          v12 = dcgettext(0LL, \"too many characters in set\", 5);\n          error(1, 0, v12);\nLABEL_21:\n          __assert_fail(\"p->u.range.last_char >= p->u.range.first_char\", \"src/tr.c\", 0x4EEu, \"get_spec_stats\");\n        }\n        return result;\n      case 2:\n        *((_BYTE *)a1 + 49) = 1;\n        v8 = *(_DWORD *)(v3 + 16);\n        v9 = 0;\n        v4 = 0LL;\n        do\n        {\n          LOBYTE(v2) = sub_4028B0(v8, v9);\n          v4 -= ((_BYTE)v2 == 0) - 1LL;\n          ++v9;\n        }\n        while ( v9 != 256 );\n        if ( v8 != 6 && v8 != 10 )\n          *((_BYTE *)a1 + 50) = 1;\n        goto LABEL_6;\n      case 3:\n        LODWORD(v2) = 0;\n        v4 = 0LL;\n        do\n        {\n          v5 = *(_BYTE *)(v3 + 16) == (unsigned __int8)v2;\n          LODWORD(v2) = v2 + 1;\n          v4 += v5;\n        }\n        while ( (_DWORD)v2 != 256 );\n        *((_BYTE *)a1 + 48) = 1;\n        goto LABEL_6;\n      case 4:\n        v4 = *(_QWORD *)(v3 + 24);\n        if ( v4 )\n          goto LABEL_6;\n        a1[5] = v3;\n        ++a1[4];\n        break;\n      default:\n        abort();\n    }\n  }\n  a1[3] = v1;\n  return v2;\n}\n\nchar __fastcall sub_402A40(__int64 *a1)\n{\n  __int64 v1; // r13\n  __int64 v2; // rax\n  __int64 v3; // rbp\n  __int64 v4; // rbx\n  __int64 v5; // rdx\n  bool v6; // cf\n  __int64 v7; // rbx\n  int v8; // r15d\n  int v9; // r14d\n  int v10; // eax\n  int v11; // edx\n  char *v12; // rax\n  char result; // al\n\n  v1 = 0LL;\n  *((_WORD *)a1 + 24) = 0;\n  v2 = *a1;\n  a1[4] = 0LL;\n  v3 = *(_QWORD *)(v2 + 8);\n  for ( *((_BYTE *)a1 + 50) = 0; v3; v3 = *(_QWORD *)(v3 + 8) )\n  {\n    LODWORD(v2) = *(_DWORD *)v3;\n    switch ( *(_DWORD *)v3 )\n    {\n      case 0:\n        v4 = 1LL;\n        goto LABEL_6;\n      case 1:\n        v10 = *(unsigned __int8 *)(v3 + 17);\n        v11 = *(unsigned __int8 *)(v3 + 16);\n        if ( (unsigned __int8)v10 < (unsigned __int8)v11 )\n          goto LABEL_21;\n        LODWORD(v2) = v10 - v11 + 1;\n        v4 = (int)v2;\nLABEL_6:\n        v6 = __CFADD__(v1, v4);\n        v7 = v1 + v4;\n        v1 = v7;\n        if ( v6 || v7 == -1 )\n        {\n          v12 = dcgettext(0LL, \"too many characters in set\", 5);\n          error(1, 0, v12);\nLABEL_21:\n          __assert_fail(\"p->u.range.last_char >= p->u.range.first_char\", \"src/tr.c\", 0x4EEu, \"get_spec_stats\");\n        }\n        return result;\n      case 2:\n        *((_BYTE *)a1 + 49) = 1;\n        v8 = *(_DWORD *)(v3 + 16);\n        v9 = 0;\n        v4 = 0LL;\n        do\n        {\n          LOBYTE(v2) = sub_4028B0(v8, v9);\n          v4 -= ((_BYTE)v2 == 0) - 1LL;\n          ++v9;\n        }\n        while ( v9 != 256 );\n        if ( v8 != 6 && v8 != 10 )\n          *((_BYTE *)a1 + 50) = 1;\n        goto LABEL_6;\n      case 3:\n        LODWORD(v2) = 0;\n        v4 = 0LL;\n        do\n        {\n          v5 = *(_BYTE *)(v3 + 16) == (unsigned __int8)v2;\n          LODWORD(v2) = v2 + 1;\n          v4 += v5;\n        }\n        while ( (_DWORD)v2 != 256 );\n        *((_BYTE *)a1 + 48) = 1;\n        goto LABEL_6;\n      case 4:\n        v4 = *(_QWORD *)(v3 + 24);\n        if ( v4 )\n          goto LABEL_6;\n        a1[5] = v3;\n        ++a1[4];\n        break;\n      default:\n        abort();\n    }\n  }\n  a1[3] = v1;\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_402BC0",
            "funcStartAddr": "0x4018fa",
            "funcEndAddr": "0x4018ff",
            "decompiledFuncCode": "__int64 __fastcall sub_402BC0(_QWORD *a1, _DWORD *a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rbp\n  __int64 v4; // rax\n  unsigned int v5; // r13d\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rax\n  int v9; // r12d\n  __int64 v10; // rbx\n  int v11; // ebx\n  __int64 v12; // rdx\n  __int64 v13; // rax\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  __int64 v16; // rdx\n\n  v2 = a1[2];\n  while ( 2 )\n  {\n    if ( a2 )\n      *a2 = 2;\n    if ( v2 == -2 )\n    {\n      v3 = *(_QWORD *)(*a1 + 8LL);\n      a1[2] = -1LL;\n      a1[1] = v3;\n    }\n    else\n    {\n      v3 = a1[1];\n    }\n    if ( !v3 )\n      return (unsigned int)-1;\n    switch ( *(_DWORD *)v3 )\n    {\n      case 0:\n      case 3:\n        v4 = *(_QWORD *)(v3 + 8);\n        v5 = *(unsigned __int8 *)(v3 + 16);\n        a1[2] = -1LL;\n        a1[1] = v4;\n        return v5;\n      case 1:\n        v12 = a1[2];\n        v13 = v12 + 1;\n        if ( v12 == -1 )\n          v13 = *(unsigned __int8 *)(v3 + 16);\n        v14 = *(unsigned __int8 *)(v3 + 17);\n        a1[2] = v13;\n        v5 = v13;\n        if ( v14 == v13 )\n          goto LABEL_26;\n        return v5;\n      case 2:\n        v9 = *(_DWORD *)(v3 + 16);\n        if ( a2 )\n        {\n          if ( v9 == 6 )\n          {\n            *a2 = 0;\n          }\n          else if ( v9 == 10 )\n          {\n            *a2 = 1;\n          }\n        }\n        v10 = a1[2];\n        if ( v10 == -1 )\n        {\n          LODWORD(v10) = 0;\n          while ( !sub_4028B0(v9, v10) )\n          {\n            LODWORD(v10) = v10 + 1;\n            if ( (_DWORD)v10 == 256 )\n              __assert_fail(\"i < N_CHARS\", \"src/tr.c\", 0x434u, \"get_next\");\n          }\n          a1[2] = (int)v10;\n        }\n        if ( !sub_4028B0(v9, v10) )\n          __assert_fail(\"is_char_class_member (p->u.char_class, s->state)\", \"src/tr.c\", 0x437u, \"get_next\");\n        v5 = v10;\n        v11 = v10 + 1;\n        if ( v11 > 255 )\n          goto LABEL_26;\n        while ( !sub_4028B0(v9, v11) )\n        {\n          if ( ++v11 == 256 )\n            goto LABEL_26;\n        }\n        result = v5;\n        a1[2] = v11;\n        return result;\n      case 4:\n        v7 = *(_QWORD *)(v3 + 24);\n        if ( !v7 )\n        {\n          v8 = *(_QWORD *)(v3 + 8);\n          a1[2] = -1LL;\n          a1[1] = v8;\n          v2 = -1LL;\n          continue;\n        }\n        v5 = *(unsigned __int8 *)(v3 + 16);\n        v16 = a1[2] + 1LL;\n        if ( a1[2] == -1LL )\n          v16 = 1LL;\n        a1[2] = v16;\n        if ( v7 != v16 )\n          return v5;\nLABEL_26:\n        v15 = *(_QWORD *)(v3 + 8);\n        a1[2] = -1LL;\n        a1[1] = v15;\n        return v5;\n      default:\n        abort();\n    }\n  }\n}\n\n__int64 __fastcall sub_402BC0(_QWORD *a1, _DWORD *a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rbp\n  __int64 v4; // rax\n  unsigned int v5; // r13d\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rax\n  int v9; // r12d\n  __int64 v10; // rbx\n  int v11; // ebx\n  __int64 v12; // rdx\n  __int64 v13; // rax\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  __int64 v16; // rdx\n\n  v2 = a1[2];\n  while ( 2 )\n  {\n    if ( a2 )\n      *a2 = 2;\n    if ( v2 == -2 )\n    {\n      v3 = *(_QWORD *)(*a1 + 8LL);\n      a1[2] = -1LL;\n      a1[1] = v3;\n    }\n    else\n    {\n      v3 = a1[1];\n    }\n    if ( !v3 )\n      return (unsigned int)-1;\n    switch ( *(_DWORD *)v3 )\n    {\n      case 0:\n      case 3:\n        v4 = *(_QWORD *)(v3 + 8);\n        v5 = *(unsigned __int8 *)(v3 + 16);\n        a1[2] = -1LL;\n        a1[1] = v4;\n        return v5;\n      case 1:\n        v12 = a1[2];\n        v13 = v12 + 1;\n        if ( v12 == -1 )\n          v13 = *(unsigned __int8 *)(v3 + 16);\n        v14 = *(unsigned __int8 *)(v3 + 17);\n        a1[2] = v13;\n        v5 = v13;\n        if ( v14 == v13 )\n          goto LABEL_26;\n        return v5;\n      case 2:\n        v9 = *(_DWORD *)(v3 + 16);\n        if ( a2 )\n        {\n          if ( v9 == 6 )\n          {\n            *a2 = 0;\n          }\n          else if ( v9 == 10 )\n          {\n            *a2 = 1;\n          }\n        }\n        v10 = a1[2];\n        if ( v10 == -1 )\n        {\n          LODWORD(v10) = 0;\n          while ( !sub_4028B0(v9, v10) )\n          {\n            LODWORD(v10) = v10 + 1;\n            if ( (_DWORD)v10 == 256 )\n              __assert_fail(\"i < N_CHARS\", \"src/tr.c\", 0x434u, \"get_next\");\n          }\n          a1[2] = (int)v10;\n        }\n        if ( !sub_4028B0(v9, v10) )\n          __assert_fail(\"is_char_class_member (p->u.char_class, s->state)\", \"src/tr.c\", 0x437u, \"get_next\");\n        v5 = v10;\n        v11 = v10 + 1;\n        if ( v11 > 255 )\n          goto LABEL_26;\n        while ( !sub_4028B0(v9, v11) )\n        {\n          if ( ++v11 == 256 )\n            goto LABEL_26;\n        }\n        result = v5;\n        a1[2] = v11;\n        return result;\n      case 4:\n        v7 = *(_QWORD *)(v3 + 24);\n        if ( !v7 )\n        {\n          v8 = *(_QWORD *)(v3 + 8);\n          a1[2] = -1LL;\n          a1[1] = v8;\n          v2 = -1LL;\n          continue;\n        }\n        v5 = *(unsigned __int8 *)(v3 + 16);\n        v16 = a1[2] + 1LL;\n        if ( a1[2] == -1LL )\n          v16 = 1LL;\n        a1[2] = v16;\n        if ( v7 != v16 )\n          return v5;\nLABEL_26:\n        v15 = *(_QWORD *)(v3 + 8);\n        a1[2] = -1LL;\n        a1[1] = v15;\n        return v5;\n      default:\n        abort();\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_402BC0",
            "funcStartAddr": "0x4018fa",
            "funcEndAddr": "0x4018ff",
            "decompiledFuncCode": "__int64 __fastcall sub_402BC0(_QWORD *a1, _DWORD *a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rbp\n  __int64 v4; // rax\n  unsigned int v5; // r13d\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rax\n  int v9; // r12d\n  __int64 v10; // rbx\n  int v11; // ebx\n  __int64 v12; // rdx\n  __int64 v13; // rax\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  __int64 v16; // rdx\n\n  v2 = a1[2];\n  while ( 2 )\n  {\n    if ( a2 )\n      *a2 = 2;\n    if ( v2 == -2 )\n    {\n      v3 = *(_QWORD *)(*a1 + 8LL);\n      a1[2] = -1LL;\n      a1[1] = v3;\n    }\n    else\n    {\n      v3 = a1[1];\n    }\n    if ( !v3 )\n      return (unsigned int)-1;\n    switch ( *(_DWORD *)v3 )\n    {\n      case 0:\n      case 3:\n        v4 = *(_QWORD *)(v3 + 8);\n        v5 = *(unsigned __int8 *)(v3 + 16);\n        a1[2] = -1LL;\n        a1[1] = v4;\n        return v5;\n      case 1:\n        v12 = a1[2];\n        v13 = v12 + 1;\n        if ( v12 == -1 )\n          v13 = *(unsigned __int8 *)(v3 + 16);\n        v14 = *(unsigned __int8 *)(v3 + 17);\n        a1[2] = v13;\n        v5 = v13;\n        if ( v14 == v13 )\n          goto LABEL_26;\n        return v5;\n      case 2:\n        v9 = *(_DWORD *)(v3 + 16);\n        if ( a2 )\n        {\n          if ( v9 == 6 )\n          {\n            *a2 = 0;\n          }\n          else if ( v9 == 10 )\n          {\n            *a2 = 1;\n          }\n        }\n        v10 = a1[2];\n        if ( v10 == -1 )\n        {\n          LODWORD(v10) = 0;\n          while ( !sub_4028B0(v9, v10) )\n          {\n            LODWORD(v10) = v10 + 1;\n            if ( (_DWORD)v10 == 256 )\n              __assert_fail(\"i < N_CHARS\", \"src/tr.c\", 0x434u, \"get_next\");\n          }\n          a1[2] = (int)v10;\n        }\n        if ( !sub_4028B0(v9, v10) )\n          __assert_fail(\"is_char_class_member (p->u.char_class, s->state)\", \"src/tr.c\", 0x437u, \"get_next\");\n        v5 = v10;\n        v11 = v10 + 1;\n        if ( v11 > 255 )\n          goto LABEL_26;\n        while ( !sub_4028B0(v9, v11) )\n        {\n          if ( ++v11 == 256 )\n            goto LABEL_26;\n        }\n        result = v5;\n        a1[2] = v11;\n        return result;\n      case 4:\n        v7 = *(_QWORD *)(v3 + 24);\n        if ( !v7 )\n        {\n          v8 = *(_QWORD *)(v3 + 8);\n          a1[2] = -1LL;\n          a1[1] = v8;\n          v2 = -1LL;\n          continue;\n        }\n        v5 = *(unsigned __int8 *)(v3 + 16);\n        v16 = a1[2] + 1LL;\n        if ( a1[2] == -1LL )\n          v16 = 1LL;\n        a1[2] = v16;\n        if ( v7 != v16 )\n          return v5;\nLABEL_26:\n        v15 = *(_QWORD *)(v3 + 8);\n        a1[2] = -1LL;\n        a1[1] = v15;\n        return v5;\n      default:\n        abort();\n    }\n  }\n}\n\n__int64 __fastcall sub_402BC0(_QWORD *a1, _DWORD *a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rbp\n  __int64 v4; // rax\n  unsigned int v5; // r13d\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rax\n  int v9; // r12d\n  __int64 v10; // rbx\n  int v11; // ebx\n  __int64 v12; // rdx\n  __int64 v13; // rax\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  __int64 v16; // rdx\n\n  v2 = a1[2];\n  while ( 2 )\n  {\n    if ( a2 )\n      *a2 = 2;\n    if ( v2 == -2 )\n    {\n      v3 = *(_QWORD *)(*a1 + 8LL);\n      a1[2] = -1LL;\n      a1[1] = v3;\n    }\n    else\n    {\n      v3 = a1[1];\n    }\n    if ( !v3 )\n      return (unsigned int)-1;\n    switch ( *(_DWORD *)v3 )\n    {\n      case 0:\n      case 3:\n        v4 = *(_QWORD *)(v3 + 8);\n        v5 = *(unsigned __int8 *)(v3 + 16);\n        a1[2] = -1LL;\n        a1[1] = v4;\n        return v5;\n      case 1:\n        v12 = a1[2];\n        v13 = v12 + 1;\n        if ( v12 == -1 )\n          v13 = *(unsigned __int8 *)(v3 + 16);\n        v14 = *(unsigned __int8 *)(v3 + 17);\n        a1[2] = v13;\n        v5 = v13;\n        if ( v14 == v13 )\n          goto LABEL_26;\n        return v5;\n      case 2:\n        v9 = *(_DWORD *)(v3 + 16);\n        if ( a2 )\n        {\n          if ( v9 == 6 )\n          {\n            *a2 = 0;\n          }\n          else if ( v9 == 10 )\n          {\n            *a2 = 1;\n          }\n        }\n        v10 = a1[2];\n        if ( v10 == -1 )\n        {\n          LODWORD(v10) = 0;\n          while ( !sub_4028B0(v9, v10) )\n          {\n            LODWORD(v10) = v10 + 1;\n            if ( (_DWORD)v10 == 256 )\n              __assert_fail(\"i < N_CHARS\", \"src/tr.c\", 0x434u, \"get_next\");\n          }\n          a1[2] = (int)v10;\n        }\n        if ( !sub_4028B0(v9, v10) )\n          __assert_fail(\"is_char_class_member (p->u.char_class, s->state)\", \"src/tr.c\", 0x437u, \"get_next\");\n        v5 = v10;\n        v11 = v10 + 1;\n        if ( v11 > 255 )\n          goto LABEL_26;\n        while ( !sub_4028B0(v9, v11) )\n        {\n          if ( ++v11 == 256 )\n            goto LABEL_26;\n        }\n        result = v5;\n        a1[2] = v11;\n        return result;\n      case 4:\n        v7 = *(_QWORD *)(v3 + 24);\n        if ( !v7 )\n        {\n          v8 = *(_QWORD *)(v3 + 8);\n          a1[2] = -1LL;\n          a1[1] = v8;\n          v2 = -1LL;\n          continue;\n        }\n        v5 = *(unsigned __int8 *)(v3 + 16);\n        v16 = a1[2] + 1LL;\n        if ( a1[2] == -1LL )\n          v16 = 1LL;\n        a1[2] = v16;\n        if ( v7 != v16 )\n          return v5;\nLABEL_26:\n        v15 = *(_QWORD *)(v3 + 8);\n        a1[2] = -1LL;\n        a1[1] = v15;\n        return v5;\n      default:\n        abort();\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_402E10",
            "funcStartAddr": "0x402e10",
            "funcEndAddr": "0x402e40",
            "decompiledFuncCode": "__int64 sub_402E10()\n{\n  char *v0; // rbx\n  size_t v1; // rsi\n\n  v0 = dcgettext(0LL, \"read error\", 5);\n  v1 = (unsigned int)*__errno_location();\n  error(1, v1, v0);\n  return sub_402E40((void *)1, v1);\n}\n"
        },
        {
            "funcName": "sub_402E40",
            "funcStartAddr": "0x402e40",
            "funcEndAddr": "0x402e70",
            "decompiledFuncCode": "__int64 __fastcall sub_402E40(void *buf, size_t nbytes)\n{\n  __int64 result; // rax\n\n  result = sub_405B80(0, buf, nbytes);\n  if ( result == -1 )\n  {\n    sub_402E10();\n    return sub_402E70(0LL, (size_t)buf);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402E70",
            "funcStartAddr": "0x402e70",
            "funcEndAddr": "0x402f40",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_402E70(unsigned __int8 *buf, size_t nbytes)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 v5; // rdi\n  unsigned __int64 v6; // rdx\n  __int64 v7; // rsi\n  unsigned __int64 v8; // rdx\n\n  while ( 1 )\n  {\n    result = sub_405B80(0, buf, nbytes);\n    if ( result == -1LL )\n      break;\n    if ( !result )\n      return result;\n    if ( byte_60D3C0[*buf] )\n    {\n      v5 = 0LL;\n      v6 = 1LL;\n      if ( result != 1 )\n        goto LABEL_5;\n    }\n    else\n    {\n      v8 = 0LL;\n      v5 = 1LL;\n      if ( result == 1 )\n      {\nLABEL_16:\n        v5 = result;\n      }\n      else\n      {\n        while ( !byte_60D3C0[buf[v8 + 1]] )\n        {\n          v8 = v5++;\n          if ( v5 == result )\n            goto LABEL_16;\n        }\n      }\n      v6 = v8 + 2;\n      if ( result <= v6 )\n        return v5;\n      do\n      {\nLABEL_5:\n        v7 = buf[v6];\n        if ( !byte_60D3C0[v7] )\n          buf[v5++] = v7;\n        ++v6;\n      }\n      while ( result > v6 );\n      if ( v5 )\n        return v5;\n    }\n  }\n  sub_402E10();\n  return sub_402F40(0LL, (size_t)buf);\n}\n"
        },
        {
            "funcName": "sub_402F40",
            "funcStartAddr": "0x402f40",
            "funcEndAddr": "0x402f90",
            "decompiledFuncCode": "__int64 __fastcall sub_402F40(unsigned __int8 *buf, size_t nbytes)\n{\n  unsigned __int8 *v2; // rbx\n  __int64 result; // rax\n  __int64 v4; // rdx\n\n  v2 = buf;\n  result = sub_405B80(0, buf, nbytes);\n  if ( result == -1 )\n  {\n    sub_402E10();\n    sub_402F90();\n  }\n  if ( result )\n  {\n    do\n    {\n      v4 = *buf++;\n      *(buf - 1) = byte_60D2C0[v4];\n    }\n    while ( &v2[result] != buf );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402F90",
            "funcStartAddr": "0x402f90",
            "funcEndAddr": "0x402fad",
            "decompiledFuncCode": "void __noreturn sub_402F90()\n{\n  __assert_fail(\"list->tail\", \"src/tr.c\", 0x2CFu, \"append_repeated_char\");\n}\n"
        },
        {
            "funcName": "sub_402FB0",
            "funcStartAddr": "0x402fb0",
            "funcEndAddr": "0x403008",
            "decompiledFuncCode": "__int64 __fastcall sub_402FB0(__int64 a1, char a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n\n  result = sub_406180(32LL);\n  v3 = *(_QWORD *)(a1 + 8);\n  *(_QWORD *)(result + 8) = 0LL;\n  *(_DWORD *)result = 0;\n  *(_BYTE *)(result + 16) = a2;\n  if ( !v3 )\n    __assert_fail(\"list->tail\", \"src/tr.c\", 0x287u, \"append_normal_char\");\n  *(_QWORD *)(v3 + 8) = result;\n  *(_QWORD *)(a1 + 8) = result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403010",
            "funcStartAddr": "0x403010",
            "funcEndAddr": "0x40385d",
            "decompiledFuncCode": "__int64 __fastcall sub_403010(const char *a1, __int64 a2)\n{\n  size_t v2; // rbx\n  __int64 v3; // r12\n  _BYTE *v4; // rbx\n  char v5; // al\n  int v6; // ebp\n  unsigned int v7; // r10d\n  const char *v8; // r11\n  __int64 v9; // rdx\n  char v10; // r13\n  _BYTE *v11; // r15\n  _BYTE *v12; // r14\n  unsigned __int8 v13; // r14\n  int v14; // eax\n  _BYTE *v15; // rbp\n  unsigned __int64 v16; // r15\n  unsigned __int8 v17; // si\n  unsigned __int64 v18; // r8\n  unsigned __int64 v19; // r13\n  unsigned __int64 v20; // rax\n  char *v21; // r14\n  __int64 v22; // r13\n  __int64 v23; // r15\n  __int64 v24; // rax\n  __int64 v25; // rdx\n  char *v26; // rax\n  char v27; // dl\n  unsigned __int64 v28; // r12\n  unsigned __int64 v29; // rax\n  char v30; // al\n  void *v31; // r12\n  char *v32; // rax\n  void *v33; // rcx\n  unsigned __int8 v34; // r14\n  __int64 v35; // rax\n  __int64 v36; // rdx\n  unsigned __int8 *v37; // r13\n  unsigned __int8 *v38; // r12\n  char *v39; // rax\n  __int64 i; // rbx\n  const char *v42; // rbp\n  char v43; // al\n  const char *v44; // rsi\n  __int64 v45; // r13\n  unsigned __int64 v46; // r12\n  __int64 v47; // rax\n  __int64 v48; // rdx\n  char v49; // dl\n  unsigned int v50; // edx\n  unsigned int v51; // edx\n  char *v52; // r14\n  char v53; // si\n  char *v54; // rax\n  const char *v55; // rsi\n  char *v56; // rax\n  unsigned __int64 v57; // [rsp+0h] [rbp-B8h]\n  unsigned int v58; // [rsp+0h] [rbp-B8h]\n  __int64 v60; // [rsp+10h] [rbp-A8h]\n  const char *v61; // [rsp+10h] [rbp-A8h]\n  char v62; // [rsp+1Ch] [rbp-9Ch]\n  unsigned int v63; // [rsp+1Ch] [rbp-9Ch]\n  unsigned __int8 v64; // [rsp+20h] [rbp-98h]\n  const char *v65; // [rsp+20h] [rbp-98h]\n  size_t n; // [rsp+28h] [rbp-90h]\n  char *s1; // [rsp+30h] [rbp-88h]\n  _BYTE *v68; // [rsp+38h] [rbp-80h]\n  _BYTE *v69; // [rsp+40h] [rbp-78h]\n  __int64 v70; // [rsp+50h] [rbp-68h]\n  char *v71; // [rsp+58h] [rbp-60h]\n  _BYTE *v72; // [rsp+60h] [rbp-58h] BYREF\n  _BYTE *v73; // [rsp+68h] [rbp-50h]\n  unsigned __int64 v74; // [rsp+70h] [rbp-48h]\n\n  v2 = strlen(a1);\n  v3 = sub_406180(v2);\n  v72 = (_BYTE *)v3;\n  v4 = (_BYTE *)sub_406350(v2, 1LL);\n  v73 = v4;\n  v5 = *a1;\n  if ( *a1 )\n  {\n    v6 = 0;\n    v7 = 0;\n    v8 = a1;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v9 = v7++;\n        v10 = v8[v6 + 1];\n        v11 = (_BYTE *)(v3 + v9);\n        if ( v5 == 92 )\n          break;\n        *v11 = v5;\n        v5 = v10;\n        ++v6;\n        if ( !v10 )\n          goto LABEL_12;\n      }\n      v12 = &v4[v9];\n      v4[v9] = 1;\n      if ( v10 == 98 )\n      {\n        v13 = 8;\n        v14 = v6 + 2;\n        goto LABEL_11;\n      }\n      if ( v10 <= 98 )\n      {\n        if ( v10 > 55 )\n        {\n          if ( v10 == 92 )\n          {\n            v13 = 92;\n            v14 = v6 + 2;\n            goto LABEL_11;\n          }\n          v13 = 7;\n          v14 = v6 + 2;\n          if ( v10 != 97 )\n            goto LABEL_46;\n        }\n        else\n        {\n          if ( v10 >= 48 )\n          {\n            v13 = v10 - 48;\n            v14 = v6 + 2;\n            v50 = v8[v6 + 2] - 48;\n            if ( v50 <= 7 )\n            {\n              v13 = v50 + 8 * v13;\n              v14 = v6 + 3;\n              v51 = v8[v6 + 3] - 48;\n              if ( v51 <= 7 )\n              {\n                if ( (int)(v51 + 8 * v13) > 255 )\n                {\n                  v65 = v8;\n                  v63 = v7;\n                  v54 = dcgettext(\n                          0LL,\n                          \"warning: the ambiguous octal escape \\\\%c%c%c is being\\n\"\n                          \"\\tinterpreted as the 2-byte sequence \\\\0%c%c, %c\",\n                          5);\n                  error(0, 0, v54);\n                  v14 = v6 + 3;\n                  v7 = v63;\n                  v8 = v65;\n                }\n                else\n                {\n                  v13 = v51 + 8 * v13;\n                  v14 = v6 + 4;\n                }\n              }\n            }\n            goto LABEL_11;\n          }\n          if ( v10 )\n            goto LABEL_46;\n          v58 = v7;\n          v61 = v8;\n          v26 = dcgettext(0LL, \"warning: an unescaped backslash at end of string is not portable\", 5);\n          error(0, 0, v26);\n          *v12 = 0;\n          v14 = v6 + 1;\n          v7 = v58;\n          v13 = 92;\n          v8 = v61;\n        }\n      }\n      else\n      {\n        if ( v10 == 114 )\n        {\n          v13 = 13;\n          v14 = v6 + 2;\n          goto LABEL_11;\n        }\n        if ( v10 > 114 )\n        {\n          if ( v10 == 116 )\n          {\n            v13 = 9;\n            v14 = v6 + 2;\n            goto LABEL_11;\n          }\n          v13 = 11;\n          v14 = v6 + 2;\n          if ( v10 != 118 )\n          {\nLABEL_46:\n            v13 = v10;\n            v14 = v6 + 2;\n          }\n        }\n        else if ( v10 == 102 )\n        {\n          v13 = 12;\n          v14 = v6 + 2;\n        }\n        else\n        {\n          v13 = 10;\n          v14 = v6 + 2;\n          if ( v10 != 110 )\n            goto LABEL_46;\n        }\n      }\nLABEL_11:\n      *v11 = v13;\n      v6 = v14;\n      v5 = v8[v14];\n      if ( !v5 )\n      {\nLABEL_12:\n        v57 = v7;\n        goto LABEL_13;\n      }\n    }\n  }\n  v57 = 0LL;\nLABEL_13:\n  v15 = (_BYTE *)v3;\n  v16 = 0LL;\n  v60 = v3;\n  v74 = v57;\n  while ( 1 )\n  {\n    v18 = v16 + 2;\n    if ( v16 + 2 >= v57 )\n      break;\n    v19 = v16 + 1;\n    v62 = v15[v16 + 1];\n    if ( v15[v16] == 91 )\n    {\n      v64 = v4[v16];\n      if ( !v64 )\n      {\n        if ( (v62 == 58 || v62 == 61) && !v4[v19] )\n        {\n          v27 = *(_BYTE *)(v60 + v19);\n          if ( v18 < v57 - 1 )\n          {\n            v28 = v16 + 2;\n            while ( 1 )\n            {\n              v29 = v28 + 1;\n              if ( v27 == v15[v28] && v15[v28 + 1] == 93 && !v4[v28] && !v4[v29] )\n                break;\n              ++v28;\n              if ( v57 - 1 <= v29 )\n                goto LABEL_22;\n            }\n            s1 = (char *)(v18 + v60);\n            n = v28 + -2LL - v16;\n            if ( !n )\n            {\n              v55 = \"missing character class name '[::]'\";\n              if ( v27 != 58 )\n                v55 = \"missing equivalence class character '[==]'\";\n              v56 = dcgettext(0LL, v55, 5);\n              error(0, 0, v56);\n              goto LABEL_71;\n            }\n            if ( v27 == 58 )\n            {\n              v69 = v15;\n              v68 = v4;\n              for ( i = 0LL; i != 12; ++i )\n              {\n                v42 = (&s)[i];\n                if ( !strncmp(s1, v42, n) && n == strlen(v42) )\n                {\n                  v47 = sub_406180(32LL);\n                  *(_QWORD *)(v47 + 8) = 0LL;\n                  v48 = *(_QWORD *)(a2 + 8);\n                  *(_DWORD *)v47 = 2;\n                  *(_DWORD *)(v47 + 16) = i;\n                  if ( !v48 )\n                    __assert_fail(\"list->tail\", \"src/tr.c\", 0x2BBu, \"append_char_class\");\n                  goto LABEL_82;\n                }\n              }\n              v4 = v68;\n              v43 = sub_402680((__int64 *)&v72, v16 + 2);\n              v15 = v69;\n              v18 = v16 + 2;\n              if ( v43 )\n                goto LABEL_22;\n              v31 = (void *)sub_402780(s1, n);\n              v44 = \"invalid character class %s\";\n              v45 = sub_405B60(v31);\nLABEL_79:\n              v32 = dcgettext(0LL, v44, 5);\n              v33 = (void *)v45;\n              goto LABEL_65;\n            }\n            if ( n == 1 )\n            {\n              v47 = sub_406180(32LL);\n              *(_QWORD *)(v47 + 8) = 0LL;\n              v49 = *s1;\n              *(_DWORD *)v47 = 3;\n              *(_BYTE *)(v47 + 16) = v49;\n              v48 = *(_QWORD *)(a2 + 8);\n              if ( !v48 )\n                __assert_fail(\"list->tail\", \"src/tr.c\", 0x2E5u, \"append_equiv_class\");\nLABEL_82:\n              *(_QWORD *)(v48 + 8) = v47;\n              v19 = v28 + 2;\n              *(_QWORD *)(a2 + 8) = v47;\n              goto LABEL_38;\n            }\n            v30 = sub_402680((__int64 *)&v72, v16 + 2);\n            v18 = v16 + 2;\n            if ( !v30 )\n            {\n              v31 = (void *)sub_402780(s1, n);\n              v32 = dcgettext(0LL, \"%s: equivalence class operand must be a single character\", 5);\n              v33 = v31;\nLABEL_65:\n              error(0, 0, v32, v33);\n              free(v31);\n              goto LABEL_71;\n            }\n          }\n        }\nLABEL_22:\n        if ( v15[v18] == 42 && !v4[v18] )\n        {\n          v20 = v16 + 3;\n          if ( v16 + 3 < v57 && !v4[v16 + 3] )\n          {\n            v21 = &v15[v20];\n            if ( v15[v20] == 93 )\n            {\n              v46 = v16 + 3;\nLABEL_80:\n              v70 = 0LL;\n              v23 = 0LL;\nLABEL_36:\n              v24 = sub_406180(32LL);\n              *(_QWORD *)(v24 + 8) = 0LL;\n              *(_BYTE *)(v24 + 16) = v62;\n              *(_DWORD *)v24 = 4;\n              v25 = *(_QWORD *)(a2 + 8);\n              *(_QWORD *)(v24 + 24) = v23;\n              if ( !v25 )\n                sub_402F90();\n              *(_QWORD *)(v25 + 8) = v24;\n              v19 = v46 + 1;\n              *(_QWORD *)(a2 + 8) = v24;\nLABEL_38:\n              v15 = v72;\n              v4 = v73;\n              v57 = v74;\n              goto LABEL_16;\n            }\n            while ( 1 )\n            {\n              v46 = v20 + 1;\n              if ( v20 + 1 >= v57 || v4[v20 + 1] )\n                break;\n              if ( v15[v46] == 93 )\n              {\n                v22 = v20 + ~v19;\n                if ( !v22 )\n                  goto LABEL_80;\n                if ( (unsigned int)sub_406410(v21) || (v23 = v70, v70 == -1) || v71 != &v21[v22] )\n                {\n                  v31 = (void *)sub_402780(v21, v22);\n                  v44 = \"invalid repeat count %s in [c*n] construct\";\n                  v45 = sub_405B60(v31);\n                  goto LABEL_79;\n                }\n                goto LABEL_36;\n              }\n              ++v20;\n            }\n          }\n        }\n      }\n    }\n    v17 = *(_BYTE *)(v60 + v16);\n    if ( v62 != 45 || (v64 = v4[v19]) != 0 )\n    {\n      sub_402FB0(a2, v17);\n    }\n    else\n    {\n      v34 = *(_BYTE *)(v60 + v18);\n      if ( v34 < v17 )\n      {\n        v37 = sub_402710(v17);\n        v38 = sub_402710(v34);\n        v39 = dcgettext(0LL, \"range-endpoints of '%s-%s' are in reverse collating sequence order\", 5);\n        error(0, 0, v39, v37, v38);\n        free(v37);\n        free(v38);\n        goto LABEL_71;\n      }\n      v35 = sub_406180(32LL);\n      *(_QWORD *)(v35 + 8) = 0LL;\n      v36 = *(_QWORD *)(a2 + 8);\n      *(_DWORD *)v35 = 1;\n      *(_BYTE *)(v35 + 16) = v17;\n      *(_BYTE *)(v35 + 17) = v34;\n      if ( !v36 )\n        __assert_fail(\"list->tail\", \"src/tr.c\", 0x2A5u, \"append_range\");\n      *(_QWORD *)(v36 + 8) = v35;\n      v19 = v16 + 3;\n      *(_QWORD *)(a2 + 8) = v35;\n    }\nLABEL_16:\n    v16 = v19;\n  }\n  if ( v16 < v57 )\n  {\n    v52 = (char *)(v60 + v16);\n    do\n    {\n      v53 = *v52++;\n      sub_402FB0(a2, v53);\n    }\n    while ( (char *)(v57 + v60) != v52 );\n  }\n  v64 = 1;\nLABEL_71:\n  free(v15);\n  free(v4);\n  return v64;\n}\n"
        },
        {
            "funcName": "sub_403860",
            "funcStartAddr": "0x403860",
            "funcEndAddr": "0x4038b9",
            "decompiledFuncCode": "__int64 __fastcall sub_403860(_QWORD *a1, char a2, _BYTE *a3)\n{\n  __int64 result; // rax\n  _BYTE *v5; // rdx\n\n  a1[2] = -2LL;\n  while ( 1 )\n  {\n    result = sub_402BC0(a1, 0LL);\n    if ( (_DWORD)result == -1 )\n      break;\n    a3[(int)result] = 1;\n  }\n  if ( a2 )\n  {\n    v5 = a3;\n    result = (__int64)(a3 + 256);\n    do\n      *v5++ ^= 1u;\n    while ( v5 != (_BYTE *)result );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4038C0",
            "funcStartAddr": "0x4038c0",
            "funcEndAddr": "0x403ab3",
            "decompiledFuncCode": "__int64 __fastcall sub_4038C0(__int64 (__fastcall *a1)(char *, __int64))\n{\n  unsigned __int64 v1; // r13\n  int v3; // ebp\n  unsigned __int64 v4; // rbx\n  __int64 v5; // rdi\n  unsigned __int8 v6; // al\n  size_t v7; // r14\n  char *v8; // rdx\n  int *v9; // rax\n  bool v10; // zf\n  __int64 i; // rax\n  __int64 result; // rax\n\n  v1 = 0LL;\n  v3 = 0x7FFFFFFF;\n  v4 = 0LL;\n  while ( 1 )\n  {\nLABEL_2:\n    if ( v4 >= v1 )\n      goto LABEL_19;\n    if ( v3 == 0x7FFFFFFF || v3 != byte_60D5C0[v4] )\n      break;\nLABEL_23:\n    while ( ++v4 != v1 )\n    {\n      if ( byte_60D5C0[v4] != v3 )\n      {\n        v3 = 0x7FFFFFFF;\n        goto LABEL_2;\n      }\n    }\n  }\nLABEL_5:\n  while ( 1 )\n  {\n    v5 = v4;\n    v6 = byte_60D5C0[v4];\n    if ( !byte_60D4C0[v6] )\n      break;\nLABEL_6:\n    v4 = v5;\n    v7 = 1LL;\n    v8 = 0LL;\nLABEL_7:\n    v3 = (char)v6;\n    if ( v4 && byte_60D5BF[v4] == v6 )\n      v7 = (size_t)v8;\n    ++v4;\n    if ( v7 && v7 != fwrite_unlocked((const void *)(v5 + 6346176), 1uLL, v7, stdout) )\n    {\nLABEL_12:\n      v4 = (unsigned __int64)dcgettext(0LL, \"write error\", 5);\n      v9 = __errno_location();\n      v5 = 1LL;\n      error(1, *v9, (const char *)v4);\n      goto LABEL_13;\n    }\nLABEL_21:\n    if ( v1 <= v4 )\n      goto LABEL_2;\n    if ( v3 == byte_60D5C0[v4] )\n      goto LABEL_23;\n  }\n  while ( 1 )\n  {\n    for ( i = v5; ; i = v4 )\n    {\n      v4 = i + 2;\n      v10 = i + 2 == v1;\n      if ( i + 2 >= v1 )\n        break;\n      v6 = byte_60D5C0[v4];\n      if ( byte_60D4C0[v6] )\n        goto LABEL_30;\n    }\nLABEL_13:\n    if ( v10 )\n    {\n      v4 = i + 1;\n      v6 = byte_60D5C0[i + 1];\n      if ( byte_60D4C0[v6] )\n      {\n        if ( v4 < v1 )\n        {\nLABEL_30:\n          v8 = (char *)(v4 - v5);\n          v7 = v4 - v5 + 1;\n          goto LABEL_7;\n        }\n      }\n      else\n      {\n        v4 = v1;\n      }\n    }\n    if ( v1 != v5 && v1 - v5 != fwrite_unlocked((const void *)(v5 + 6346176), 1uLL, v1 - v5, stdout) )\n      goto LABEL_12;\n    v3 = 0x7FFFFFFF;\n    if ( v1 > v4 )\n      goto LABEL_5;\nLABEL_19:\n    result = a1(byte_60D5C0, 0x2000LL);\n    v1 = result;\n    if ( !result )\n      return result;\n    v4 = 0LL;\n    if ( v3 != 0x7FFFFFFF )\n      goto LABEL_21;\n    v5 = 0LL;\n    v6 = byte_60D5C0[0];\n    if ( byte_60D4C0[(unsigned __int8)byte_60D5C0[0]] )\n      goto LABEL_6;\n  }\n}\n"
        },
        {
            "funcName": "sub_403AC0",
            "funcStartAddr": "0x403ac0",
            "funcEndAddr": "0x403e3d",
            "decompiledFuncCode": "void __fastcall __noreturn sub_403AC0(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  __int64 *v18; // rax\n  const char *v19; // rbp\n  char *v20; // rax\n  char *v21; // rax\n  char *v22; // rax\n  char *v23; // rax\n  char *v24; // rax\n  char *v25; // rax\n  char *v26; // rax\n  char *v27; // rax\n  __int64 v28[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_60F5D8;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... SET1 [SET2]\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"Translate, squeeze, and/or delete characters from standard input,\\n\"\n         \"writing to standard output.\\n\"\n         \"\\n\"\n         \"  -c, -C, --complement    use the complement of SET1\\n\"\n         \"  -d, --delete            delete characters in SET1, do not translate\\n\"\n         \"  -s, --squeeze-repeats   replace each sequence of a repeated character\\n\"\n         \"                            that is listed in the last specified SET,\\n\"\n         \"                            with a single occurrence of that character\\n\"\n         \"  -t, --truncate-set1     first truncate SET1 to length of SET2\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"SETs are specified as strings of characters.  Most represent themselves.\\n\"\n          \"Interpreted sequences are:\\n\"\n          \"\\n\"\n          \"  \\\\NNN            character with octal value NNN (1 to 3 octal digits)\\n\"\n          \"  \\\\\\\\              backslash\\n\"\n          \"  \\\\a              audible BEL\\n\"\n          \"  \\\\b              backspace\\n\"\n          \"  \\\\f              form feed\\n\"\n          \"  \\\\n              new line\\n\"\n          \"  \\\\r              return\\n\"\n          \"  \\\\t              horizontal tab\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  \\\\v              vertical tab\\n\"\n          \"  CHAR1-CHAR2     all characters from CHAR1 to CHAR2 in ascending order\\n\"\n          \"  [CHAR*]         in SET2, copies of CHAR until length of SET1\\n\"\n          \"  [CHAR*REPEAT]   REPEAT copies of CHAR, REPEAT octal if starting with 0\\n\"\n          \"  [:alnum:]       all letters and digits\\n\"\n          \"  [:alpha:]       all letters\\n\"\n          \"  [:blank:]       all horizontal whitespace\\n\"\n          \"  [:cntrl:]       all control characters\\n\"\n          \"  [:digit:]       all digits\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"  [:graph:]       all printable characters, not including space\\n\"\n          \"  [:lower:]       all lower case letters\\n\"\n          \"  [:print:]       all printable characters, including space\\n\"\n          \"  [:punct:]       all punctuation characters\\n\"\n          \"  [:space:]       all horizontal or vertical whitespace\\n\"\n          \"  [:upper:]       all upper case letters\\n\"\n          \"  [:xdigit:]      all hexadecimal digits\\n\"\n          \"  [=CHAR=]        all characters which are equivalent to CHAR\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Translation occurs if -d is not given and both SET1 and SET2 appear.\\n\"\n          \"-t may be used only when translating.  SET2 is extended to length of\\n\"\n          \"SET1 by repeating its last character as necessary.  Excess characters\\n\"\n          \"of SET2 are ignored.  Only [:lower:] and [:upper:] are guaranteed to\\n\"\n          \"expand in ascending order; used in SET2 while translating, they may\\n\"\n          \"only be used in pairs to specify case conversion.  -s uses the last\\n\"\n          \"specified SET, and occurs after translation or deletion.\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v28[0] = (__int64)\"[\";\n  v18 = v28;\n  v28[1] = (__int64)\"test invocation\";\n  v28[2] = (__int64)\"coreutils\";\n  v28[3] = (__int64)\"Multi-call invocation\";\n  v28[4] = (__int64)\"sha224sum\";\n  v28[5] = (__int64)\"sha2 utilities\";\n  v28[6] = (__int64)\"sha256sum\";\n  v28[7] = (__int64)\"sha2 utilities\";\n  v28[8] = (__int64)\"sha384sum\";\n  v28[9] = (__int64)\"sha2 utilities\";\n  v28[10] = (__int64)\"sha512sum\";\n  v28[11] = (__int64)\"sha2 utilities\";\n  v28[12] = 0LL;\n  v28[13] = 0LL;\n  do\n    v18 += 2;\n  while ( *v18 && strcmp(\"tr\", (const char *)*v18) );\n  v19 = (const char *)v18[1];\n  if ( v19 )\n  {\n    v20 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v20, &unk_407FC7);\n    v21 = setlocale(5, 0LL);\n    if ( !v21 || !strncmp(v21, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v24 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v24, &unk_407FC7);\n    v25 = setlocale(5, 0LL);\n    if ( !v25 || !strncmp(v25, \"en_\", 3uLL) )\n    {\n      v19 = \"tr\";\n      v26 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v26, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v19 = \"tr\";\n  }\n  v27 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v27, \"tr\");\nLABEL_10:\n  v22 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v22, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v23 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v23, v19);\nLABEL_3:\n  exit(status);\n}\n"
        },
        {
            "funcName": "sub_403E60",
            "funcStartAddr": "0x403e60",
            "funcEndAddr": "0x403efe",
            "decompiledFuncCode": "__int64 sub_403E60()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_4076A0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60F5C8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60F5D0 )\n      {\n        v5 = (const char *)sub_4059B0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_4076A0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403F10",
            "funcStartAddr": "0x403f10",
            "funcEndAddr": "0x403f31",
            "decompiledFuncCode": "void __fastcall sub_403F10(FILE *a1, int a2)\n{\n  int v2; // eax\n\n  if ( a1 )\n  {\n    v2 = fileno(a1);\n    posix_fadvise(v2, 0LL, 0LL, a2);\n  }\n}\n"
        },
        {
            "funcName": "sub_403F40",
            "funcStartAddr": "0x403f40",
            "funcEndAddr": "0x403fd9",
            "decompiledFuncCode": "char *__fastcall sub_403F40(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60F5D8 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403FE0",
            "funcStartAddr": "0x403fe0",
            "funcEndAddr": "0x4040d2",
            "decompiledFuncCode": "char *__fastcall sub_403FE0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_407760();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_409499;\n      if ( !v5 )\n        return (char *)&unk_40948E;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_409495;\n    if ( !v5 )\n      return (char *)&unk_409492;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_4040E0",
            "funcStartAddr": "0x401904",
            "funcEndAddr": "0x401909",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4040E0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4040E0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4040E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_407620((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4040E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403FE0(\"`\", a5);\n        v51 = sub_403FE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_4040E0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4040E0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4040E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_407620((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4040E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403FE0(\"`\", a5);\n        v51 = sub_403FE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_4040E0",
            "funcStartAddr": "0x401904",
            "funcEndAddr": "0x401909",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4040E0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4040E0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4040E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_407620((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4040E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403FE0(\"`\", a5);\n        v51 = sub_403FE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_4040E0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4040E0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4040E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_407620((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4040E0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403FE0(\"`\", a5);\n        v51 = sub_403FE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_405310",
            "funcStartAddr": "0x401909",
            "funcEndAddr": "0x40190e",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405310(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60D270 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4063D0(a1);\n    v9 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_60D260 )\n    {\n      v7 = (__m128i *)sub_4061E0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60D260);\n    }\n    else\n    {\n      ptr = (void *)sub_4061E0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60D270], 0, 16LL * ((int)a1 + 1 - dword_60D270));\n    dword_60D270 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[(int)a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4040E0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F5E0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406180(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4040E0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_405310(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60D270 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4063D0(a1);\n    v9 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_60D260 )\n    {\n      v7 = (__m128i *)sub_4061E0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60D260);\n    }\n    else\n    {\n      ptr = (void *)sub_4061E0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60D270], 0, 16LL * ((int)a1 + 1 - dword_60D270));\n    dword_60D270 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[(int)a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4040E0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F5E0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406180(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4040E0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_405310",
            "funcStartAddr": "0x401909",
            "funcEndAddr": "0x40190e",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405310(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60D270 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4063D0(a1);\n    v9 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_60D260 )\n    {\n      v7 = (__m128i *)sub_4061E0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60D260);\n    }\n    else\n    {\n      ptr = (void *)sub_4061E0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60D270], 0, 16LL * ((int)a1 + 1 - dword_60D270));\n    dword_60D270 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[(int)a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4040E0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F5E0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406180(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4040E0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_405310(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60D270 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4063D0(a1);\n    v9 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_60D260 )\n    {\n      v7 = (__m128i *)sub_4061E0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60D260);\n    }\n    else\n    {\n      ptr = (void *)sub_4061E0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60D270], 0, 16LL * ((int)a1 + 1 - dword_60D270));\n    dword_60D270 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[(int)a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4040E0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F5E0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406180(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4040E0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_4054B0",
            "funcStartAddr": "0x4054b0",
            "funcEndAddr": "0x4054e4",
            "decompiledFuncCode": "__int64 __fastcall sub_4054B0(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_60F6E0;\n  result = sub_406380(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4055A0",
            "funcStartAddr": "0x4055a0",
            "funcEndAddr": "0x405612",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4055A0(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_60F6E0;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_4040E0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405620",
            "funcStartAddr": "0x405620",
            "funcEndAddr": "0x405701",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405620(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_60F6E0;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_4040E0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_406180(v11 + 1);\n  sub_4040E0(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_405720",
            "funcStartAddr": "0x405720",
            "funcEndAddr": "0x4057b5",
            "decompiledFuncCode": "void sub_405720()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_60D270 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_60D270 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_60F5E0 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_60D260 = 256LL;\n    *((_QWORD *)&xmmword_60D260 + 1) = &unk_60F5E0;\n  }\n  if ( v0 != &xmmword_60D260 )\n  {\n    free(v0);\n    ptr = &xmmword_60D260;\n  }\n  dword_60D270 = 1;\n}\n"
        },
        {
            "funcName": "sub_405830",
            "funcStartAddr": "0x40190e",
            "funcEndAddr": "0x401913",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405830(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_405830(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_405830",
            "funcStartAddr": "0x40190e",
            "funcEndAddr": "0x401913",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405830(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_405830(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4058A0",
            "funcStartAddr": "0x401913",
            "funcEndAddr": "0x401918",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4058A0(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405310(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_4058A0(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405310(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4058A0",
            "funcStartAddr": "0x401913",
            "funcEndAddr": "0x401918",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4058A0(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405310(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_4058A0(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405310(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_405930",
            "funcStartAddr": "0x405930",
            "funcEndAddr": "0x4059a0",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405930(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_60F710;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F6E0);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F6F0);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F700);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_405310(0LL, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4059B0",
            "funcStartAddr": "0x4059b0",
            "funcEndAddr": "0x4059c1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4059B0(__int64 a1)\n{\n  return sub_405930(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_4059E0",
            "funcStartAddr": "0x401918",
            "funcEndAddr": "0x40191d",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4059E0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4059E0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4059E0",
            "funcStartAddr": "0x401918",
            "funcEndAddr": "0x40191d",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4059E0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4059E0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405310(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_405A50",
            "funcStartAddr": "0x405a50",
            "funcEndAddr": "0x405abc",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405A50(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F6E0);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F6F0);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_60F700);\n  v8 = qword_60F710;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_405310(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_405B60",
            "funcStartAddr": "0x405b60",
            "funcEndAddr": "0x405b76",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405B60(__int64 a1)\n{\n  return sub_405310(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_60D220);\n}\n"
        },
        {
            "funcName": "sub_405B80",
            "funcStartAddr": "0x405b80",
            "funcEndAddr": "0x405bde",
            "decompiledFuncCode": "ssize_t __fastcall sub_405B80(int fd, void *buf, size_t nbytes)\n{\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  while ( 1 )\n  {\n    v4 = read(fd, buf, nbytes);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( nbytes <= 0x7FFFE000 || v5 != 22 )\n        return v4;\n      nbytes = 2147475456LL;\n    }\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_405BE0",
            "funcStartAddr": "0x40191d",
            "funcEndAddr": "0x401922",
            "decompiledFuncCode": "__int64 __fastcall sub_405BE0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_405BE0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_405BE0",
            "funcStartAddr": "0x40191d",
            "funcEndAddr": "0x401922",
            "decompiledFuncCode": "__int64 __fastcall sub_405BE0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_405BE0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_405FE0",
            "funcStartAddr": "0x405fe0",
            "funcEndAddr": "0x406040",
            "decompiledFuncCode": "__int64 __fastcall sub_405FE0(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_405BE0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_405BE0(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_406040",
            "funcStartAddr": "0x406040",
            "funcEndAddr": "0x4060fc",
            "decompiledFuncCode": "__int64 __fastcall sub_406040(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_405BE0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_405BE0(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_406100",
            "funcStartAddr": "0x406100",
            "funcEndAddr": "0x406174",
            "decompiledFuncCode": "int sub_406100()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_407FC7);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_406180",
            "funcStartAddr": "0x406180",
            "funcEndAddr": "0x40619a",
            "decompiledFuncCode": "void *__fastcall sub_406180(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_4063D0(a1);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4061D0",
            "funcStartAddr": "0x4061d0",
            "funcEndAddr": "0x4061d2",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_4061D0(size_t a1)\n{\n  return sub_406180(a1);\n}\n"
        },
        {
            "funcName": "sub_4061E0",
            "funcStartAddr": "0x4061e0",
            "funcEndAddr": "0x406216",
            "decompiledFuncCode": "void *__fastcall sub_4061E0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_4063D0(a1);\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406330",
            "funcStartAddr": "0x406330",
            "funcEndAddr": "0x406347",
            "decompiledFuncCode": "void *__fastcall sub_406330(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_406180(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_406350",
            "funcStartAddr": "0x406350",
            "funcEndAddr": "0x40637e",
            "decompiledFuncCode": "void *__fastcall sub_406350(unsigned __int64 a1, unsigned __int64 a2)\n{\n  void *result; // rax\n\n  if ( ((a2 * a1) & 0x8000000000000000LL) != 0LL || !is_mul_ok(a2, a1) || (result = calloc(a1, a2)) == 0LL )\n    sub_4063D0(a1);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406380",
            "funcStartAddr": "0x406380",
            "funcEndAddr": "0x4063a8",
            "decompiledFuncCode": "void *__fastcall sub_406380(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_406180(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_4063B0",
            "funcStartAddr": "0x4063b0",
            "funcEndAddr": "0x4063c3",
            "decompiledFuncCode": "void *__fastcall sub_4063B0(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_406380(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_4063D0",
            "funcStartAddr": "0x4063d0",
            "funcEndAddr": "0x406401",
            "decompiledFuncCode": "void __noreturn sub_4063D0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_406410",
            "funcStartAddr": "0x406410",
            "funcEndAddr": "0x406844",
            "decompiledFuncCode": "__int64 __fastcall sub_406410(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // r15\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // r12d\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // r9d\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( (v11[v10] & 0x2000) != 0 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, p_endptr, a3, 0);\n  if ( *p_endptr == nptr )\n  {\n    basea = *p_endptr;\n    if ( a5 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(a5, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( a5 )\n  {\n    v15 = (unsigned __int8)**p_endptr;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *p_endptr;\n      v26 = strchr(a5, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_40:\n        *a4 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      if ( (unsigned __int8)(v15 - 69) > 0x2Fu\n        || (v19 = 0x814400308945LL, !_bittest64(&v19, (unsigned int)(v15 - 69)))\n        || (v37 = v18, v20 = strchr(a5, 48), v18 = v37, !v20) )\n      {\nLABEL_27:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_28;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_28:\n          switch ( (char)v15 )\n          {\n            case 'B':\n              if ( (unsigned __int64)v13 >> 54 )\n                goto LABEL_38;\n              v13 <<= 10;\n              break;\n            case 'E':\n              goto LABEL_71;\n            case 'G':\n            case 'g':\n              goto LABEL_77;\n            case 'K':\n            case 'k':\n              goto LABEL_37;\n            case 'M':\n            case 'm':\n              goto LABEL_30;\n            case 'P':\n              goto LABEL_65;\n            case 'T':\n            case 't':\n              goto LABEL_59;\n            case 'Y':\n              goto LABEL_53;\n            case 'Z':\n              goto LABEL_47;\n            case 'b':\n              goto LABEL_44;\n            case 'c':\n              break;\n            case 'w':\n              if ( v13 < 0 )\n                goto LABEL_38;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_40;\n          }\nLABEL_33:\n          v24 = &v18[v22];\n          *p_endptr = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (char)v15 )\n          {\n            case 'E':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_71:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_51;\n            case 'F':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'L':\n            case 'N':\n            case 'O':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case '[':\n            case '\\\\':\n            case ']':\n            case '^':\n            case '_':\n            case '`':\n            case 'a':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'l':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n              goto LABEL_40;\n            case 'G':\n            case 'g':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_77:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_33;\n            case 'K':\n            case 'k':\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_37:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_33;\n              goto LABEL_38;\n            case 'M':\n            case 'm':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_30:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_38;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 'P':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_65:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_51;\n            case 'T':\n            case 't':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_59:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_51;\n            case 'Y':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_53:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_51;\n            case 'Z':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_47:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_51:\n              v14 |= v28;\n              break;\n            case 'b':\n              v22 = 1;\nLABEL_44:\n              if ( (unsigned __int64)v13 >> 55 )\n              {\nLABEL_38:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 'c':\n              v22 = 1;\n              goto LABEL_33;\n            default:\n              goto LABEL_27;\n          }\n          goto LABEL_33;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_28;\n    }\n  }\nLABEL_13:\n  *a4 = v13;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_406850",
            "funcStartAddr": "0x406850",
            "funcEndAddr": "0x40692f",
            "decompiledFuncCode": "__int64 __fastcall sub_406850(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406930",
            "funcStartAddr": "0x406930",
            "funcEndAddr": "0x406f4c",
            "decompiledFuncCode": "__int64 __fastcall sub_406930(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        const char *a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rdi\n  const char **v35; // rbx\n  _BYTE *v36; // rbp\n  __int64 v37; // r12\n  const char *v38; // r12\n  __int64 v39; // rbp\n  char *v40; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v48; // [rsp+38h] [rbp-50h]\n  char v49; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+44h] [rbp-44h]\n  int v52; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v49 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v49), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v51 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v48 = 0;\n  v52 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v48 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v52 = 1;\n            ptr[v51] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v48 = 1;\n        }\n        else\n        {\n          v48 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v51 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v48 )\n  {\n    if ( a8 )\n    {\n      if ( v48 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v34 = stderr;\n        v35 = (const char **)a4;\n        v36 = ptr;\n        v37 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9, *v35);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v52 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v51;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v38 = *v12;\n          v39 = *a2;\n          v40 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v40, v39, a9, v38);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406F50",
            "funcStartAddr": "0x406f50",
            "funcEndAddr": "0x407516",
            "decompiledFuncCode": "__int64 __fastcall sub_406F50(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_406850((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_406850((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_406930(a1, a2, v12, a4, a5, a6, a7, v8, \"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_406930(a1, a2, v12, a4, a5, a6, a7, v8, \"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_406930(a1, a2, v12, a4, a5, 0, a7, v8, \"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43, v21);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41, v21);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_407520",
            "funcStartAddr": "0x407520",
            "funcEndAddr": "0x407576",
            "decompiledFuncCode": "__int64 __fastcall sub_407520(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_60F720 = dword_60D27C;\n  dword_60F724 = dword_60D278;\n  result = sub_406F50(a1, a2, a3, a4, a5, a6, &dword_60F720, a7);\n  dword_60D27C = dword_60F720;\n  qword_60F760 = qword_60F730;\n  dword_60D274 = dword_60F728;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407580",
            "funcStartAddr": "0x407580",
            "funcEndAddr": "0x407598",
            "decompiledFuncCode": "__int64 __fastcall sub_407580(int a1, __int64 *a2, const char *a3)\n{\n  return sub_407520(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_4075A0",
            "funcStartAddr": "0x4075a0",
            "funcEndAddr": "0x4075b3",
            "decompiledFuncCode": "__int64 __fastcall sub_4075A0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_407520(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_4075C0",
            "funcStartAddr": "0x4075c0",
            "funcEndAddr": "0x4075d5",
            "decompiledFuncCode": "__int64 __fastcall sub_4075C0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_406F50(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_4075E0",
            "funcStartAddr": "0x4075e0",
            "funcEndAddr": "0x4075f6",
            "decompiledFuncCode": "__int64 __fastcall sub_4075E0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_407520(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_407600",
            "funcStartAddr": "0x407600",
            "funcEndAddr": "0x407618",
            "decompiledFuncCode": "__int64 __fastcall sub_407600(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_406F50(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_407620",
            "funcStartAddr": "0x407620",
            "funcEndAddr": "0x40769a",
            "decompiledFuncCode": "size_t __fastcall sub_407620(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_407700(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_4076A0",
            "funcStartAddr": "0x4076a0",
            "funcEndAddr": "0x4076fd",
            "decompiledFuncCode": "__int64 __fastcall sub_4076A0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_407CD0(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n    return 0xFFFFFFFFLL;\n  }\n  if ( !(_DWORD)result )\n    return result;\n  if ( v1 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)-(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_407700",
            "funcStartAddr": "0x407700",
            "funcEndAddr": "0x40775e",
            "decompiledFuncCode": "bool __fastcall sub_407700(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407760",
            "funcStartAddr": "0x407760",
            "funcEndAddr": "0x407cc2",
            "decompiledFuncCode": "const char *sub_407760()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = qword_60F758;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_60F758 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          qword_60F758 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_407CD0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_407CD0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_407CD0",
            "funcStartAddr": "0x407cd0",
            "funcEndAddr": "0x407d4b",
            "decompiledFuncCode": "int __fastcall sub_407CD0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_407D50(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407D50",
            "funcStartAddr": "0x407d50",
            "funcEndAddr": "0x407d90",
            "decompiledFuncCode": "int __fastcall sub_407D50(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_407D90(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_407D90",
            "funcStartAddr": "0x407d90",
            "funcEndAddr": "0x407de7",
            "decompiledFuncCode": "int __fastcall sub_407D90(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_407E60",
            "funcStartAddr": "0x407e60",
            "funcEndAddr": "0x407e78",
            "decompiledFuncCode": "int __fastcall sub_407E60(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_60D208 )\n    v1 = (void *)qword_60D208;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_407E78",
            "funcStartAddr": "0x407e78",
            "funcEndAddr": "0x407e98",
            "decompiledFuncCode": "__int64 __fastcall sub_407E78(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_60CE30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 83
}