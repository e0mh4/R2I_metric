{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_rm.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401e50",
            "funcEndAddr": "0x402363",
            "decompiledFuncCode": "_BOOL8 __fastcall main(int a1, char **a2, char **a3)\n{\n  char v3; // bl\n  char v4; // r13\n  int v5; // eax\n  __int64 i; // rbx\n  char *v7; // r13\n  int v8; // eax\n  char **v9; // rbp\n  int v10; // r12d\n  __int64 v11; // rbx\n  unsigned __int64 v12; // rcx\n  __int64 v13; // r12\n  char *v14; // rdx\n  int v15; // eax\n  unsigned int v16; // edx\n  _BOOL8 result; // rax\n  unsigned __int64 v18; // rcx\n  __int64 v19; // rax\n  char *v20; // rbx\n  __int64 v21; // r12\n  char *v22; // rax\n  __int64 v23; // rbp\n  char *v24; // rbx\n  int *v25; // rax\n  char *v26; // rax\n  char *v27; // rax\n  char v28[4]; // [rsp+0h] [rbp-D8h] BYREF\n  int v29; // [rsp+4h] [rbp-D4h]\n  __int16 v30; // [rsp+8h] [rbp-D0h]\n  char v31; // [rsp+Ah] [rbp-CEh]\n  __int64 v32; // [rsp+10h] [rbp-C8h]\n  bool v33; // [rsp+18h] [rbp-C0h]\n  __int16 v34; // [rsp+19h] [rbp-BFh]\n  struct stat stat_buf; // [rsp+20h] [rbp-B8h] BYREF\n\n  v3 = 1;\n  sub_403D10(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40B1F0(sub_4039D0);\n  v28[0] = 0;\n  v29 = 4;\n  v30 = 0;\n  v31 = 0;\n  v32 = 0LL;\n  v33 = isatty(0) != 0;\n  v4 = 0;\n  v34 = 0;\n  while ( 1 )\n  {\n    v5 = sub_4093F0((unsigned int)a1, a2, \"dfirvIR\", &off_40BD60, 0LL);\n    if ( v5 == -1 )\n      break;\n    if ( v5 == 105 )\n      goto LABEL_29;\n    if ( v5 <= 105 )\n    {\n      if ( v5 == 73 )\n        goto LABEL_37;\n      if ( v5 <= 73 )\n      {\n        if ( v5 == -131 )\n        {\n          sub_405E00(\n            (_DWORD)stdout,\n            (unsigned int)&unk_40B244,\n            (unsigned int)&unk_40B2BD,\n            (_DWORD)off_610270,\n            (unsigned int)\"Paul Rubin\",\n            (unsigned int)\"David MacKenzie\",\n            \"Richard M. Stallman\",\n            \"Jim Meyering\",\n            0LL);\n          exit(0);\n        }\n        if ( v5 == -130 )\n          sub_402450(0);\nLABEL_19:\n        for ( i = 1LL; ; ++i )\n        {\n          if ( a1 <= (int)i )\n            goto LABEL_59;\n          v7 = a2[i];\n          if ( *v7 == 45 && v7[1] && !__lxstat(1, a2[i], &stat_buf) )\n            break;\n        }\n        sub_4056E0(4LL, v7);\n        v19 = sub_405600(1LL, 3LL, v7);\n        v20 = *a2;\n        v21 = v19;\n        v22 = dcgettext(0LL, \"Try '%s ./%s' to remove the file %s.\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v22, v20, v21);\nLABEL_59:\n        sub_402450(1);\n      }\n      switch ( v5 )\n      {\n        case 'd':\n          v31 = 1;\n          break;\n        case 'f':\n          v29 = 5;\n          v4 = 0;\n          v28[0] = 1;\n          break;\n        case 'R':\nLABEL_31:\n          HIBYTE(v30) = 1;\n          break;\n        default:\n          goto LABEL_19;\n      }\n    }\n    else if ( v5 == 129 )\n    {\n      LOBYTE(v30) = 1;\n    }\n    else if ( v5 <= 129 )\n    {\n      switch ( v5 )\n      {\n        case 118:\n          LOBYTE(v34) = 1;\n          break;\n        case 128:\n          if ( !qword_610508 )\n            goto LABEL_29;\n          v8 = dword_40BCF0[sub_403900(\"--interactive\", qword_610508, off_40BD20, dword_40BCF0, 4LL, off_610278)];\n          if ( v8 == 1 )\n          {\nLABEL_37:\n            v29 = 4;\n            v4 = 1;\n            v28[0] = 0;\n          }\n          else if ( v8 )\n          {\n            if ( v8 == 2 )\n            {\nLABEL_29:\n              v29 = 3;\n              v4 = 0;\n              v28[0] = 0;\n            }\n          }\n          else\n          {\n            v29 = 5;\n            v4 = 0;\n          }\n          break;\n        case 114:\n          goto LABEL_31;\n        default:\n          goto LABEL_19;\n      }\n    }\n    else if ( v5 == 131 )\n    {\n      v3 = 1;\n    }\n    else if ( v5 >= 131 )\n    {\n      if ( v5 != 132 )\n        goto LABEL_19;\n      v33 = 1;\n    }\n    else\n    {\n      if ( strcmp(a2[dword_6102FC - 1], \"--no-preserve-root\") )\n        goto LABEL_62;\n      v3 = 0;\n    }\n  }\n  if ( dword_6102FC >= a1 )\n  {\n    if ( !v28[0] )\n    {\nLABEL_63:\n      v27 = dcgettext(0LL, \"missing operand\", 5);\n      error(0, 0, v27);\n      goto LABEL_59;\n    }\n    return 0LL;\n  }\n  if ( HIBYTE(v30) )\n  {\n    if ( v3 )\n    {\n      v32 = sub_405950(&unk_610340);\n      if ( !v32 )\n      {\n        v23 = sub_4056E0(4LL, \"/\");\n        v24 = dcgettext(0LL, \"failed to get attributes of %s\", 5);\n        v25 = __errno_location();\n        error(1, *v25, v24, v23);\nLABEL_62:\n        v26 = dcgettext(0LL, \"you may not abbreviate the --no-preserve-root option\", 5);\n        error(1, 0, v26);\n        goto LABEL_63;\n      }\n    }\n  }\n  v9 = &a2[dword_6102FC];\n  if ( !v4 )\n    goto LABEL_49;\n  v10 = a1 - dword_6102FC;\n  v11 = a1 - dword_6102FC;\n  if ( !HIBYTE(v30) )\n  {\n    if ( (unsigned __int64)v10 > 3 )\n    {\n      v12 = v10;\n      v13 = qword_610368;\n      v14 = dcngettext(0LL, \"%s: remove %lu argument? \", \"%s: remove %lu arguments? \", v12, 5);\n      goto LABEL_48;\n    }\n    goto LABEL_49;\n  }\n  v18 = v10;\n  v13 = qword_610368;\n  v14 = dcngettext(0LL, \"%s: remove %lu argument recursively? \", \"%s: remove %lu arguments recursively? \", v18, 5);\nLABEL_48:\n  __fprintf_chk(stderr, 1LL, v14, v13, v11);\n  if ( !(unsigned __int8)sub_406290() )\n    return 0LL;\nLABEL_49:\n  v15 = sub_402F50(v9, v28);\n  v16 = v15 - 2;\n  result = v15 == 4;\n  if ( v16 > 2 )\n    __assert_fail(\"VALID_STATUS (status)\", \"src/rm.c\", 0x163u, \"main\");\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40239B",
            "funcStartAddr": "0x40239b",
            "funcEndAddr": "0x4023ba",
            "decompiledFuncCode": "__int64 *sub_40239B()\n{\n  return &program_invocation_short_name;\n}\n"
        },
        {
            "funcName": "sub_4023BA",
            "funcStartAddr": "0x4023ba",
            "funcEndAddr": "0x4023f1",
            "decompiledFuncCode": "__int64 sub_4023BA()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4023F1",
            "funcStartAddr": "0x4023f1",
            "funcEndAddr": "0x402448",
            "decompiledFuncCode": "__int64 *sub_4023F1()\n{\n  __int64 *result; // rax\n\n  if ( !byte_610328 )\n  {\n    while ( qword_610330 < (unsigned __int64)(&qword_60FE48 - qword_60FE40 - 1) )\n      ((void (*)(void))qword_60FE40[++qword_610330])();\n    result = sub_40239B();\n    byte_610328 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402448",
            "funcStartAddr": "0x402448",
            "funcEndAddr": "0x40244d",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_402448()\n{\n  return sub_4023BA();\n}\n"
        },
        {
            "funcName": "sub_402450",
            "funcStartAddr": "0x402450",
            "funcEndAddr": "0x40281d",
            "decompiledFuncCode": "void __fastcall __noreturn sub_402450(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  __int64 v3; // r8\n  char *v4; // rax\n  FILE *v5; // rbp\n  char *v6; // rax\n  FILE *v7; // rbp\n  char *v8; // rax\n  FILE *v9; // rbp\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  FILE *v13; // rbp\n  char *v14; // rax\n  FILE *v15; // rbp\n  char *v16; // rax\n  FILE *v17; // rbp\n  char *v18; // rax\n  __int64 v19; // rbp\n  char *v20; // rax\n  FILE *v21; // rbp\n  char *v22; // rax\n  __int64 *v23; // rax\n  const char *v24; // rbp\n  char *v25; // rax\n  char *v26; // rax\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  char *v30; // rax\n  char *v31; // rax\n  char *v32; // rax\n  __int64 v33[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_610368;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1, v3);\n    goto LABEL_3;\n  }\n  v4 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5);\n  __printf_chk(1LL, v4, v1);\n  v5 = stdout;\n  v6 = dcgettext(\n         0LL,\n         \"Remove (unlink) the FILE(s).\\n\"\n         \"\\n\"\n         \"  -f, --force           ignore nonexistent files and arguments, never prompt\\n\"\n         \"  -i                    prompt before every removal\\n\",\n         5);\n  fputs_unlocked(v6, v5);\n  v7 = stdout;\n  v8 = dcgettext(\n         0LL,\n         \"  -I                    prompt once before removing more than three files, or\\n\"\n         \"                          when removing recursively; less intrusive than -i,\\n\"\n         \"                          while still giving protection against most mistakes\\n\"\n         \"      --interactive[=WHEN]  prompt according to WHEN: never, once (-I), or\\n\"\n         \"                          always (-i); without WHEN, prompt always\\n\",\n         5);\n  fputs_unlocked(v8, v7);\n  v9 = stdout;\n  v10 = dcgettext(\n          0LL,\n          \"      --one-file-system  when removing a hierarchy recursively, skip any\\n\"\n          \"                          directory that is on a file system different from\\n\"\n          \"                          that of the corresponding command line argument\\n\",\n          5);\n  fputs_unlocked(v10, v9);\n  v11 = stdout;\n  v12 = dcgettext(\n          0LL,\n          \"      --no-preserve-root  do not treat '/' specially\\n\"\n          \"      --preserve-root   do not remove '/' (default)\\n\"\n          \"  -r, -R, --recursive   remove directories and their contents recursively\\n\"\n          \"  -d, --dir             remove empty directories\\n\"\n          \"  -v, --verbose         explain what is being done\\n\",\n          5);\n  fputs_unlocked(v12, v11);\n  v13 = stdout;\n  v14 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v14, v13);\n  v15 = stdout;\n  v16 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v16, v15);\n  v17 = stdout;\n  v18 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"By default, rm does not remove directories.  Use the --recursive (-r or -R)\\n\"\n          \"option to remove each listed directory, too, along with all of its contents.\\n\",\n          5);\n  fputs_unlocked(v18, v17);\n  v19 = qword_610368;\n  v20 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"To remove a file whose name starts with a '-', for example '-foo',\\n\"\n          \"use one of these commands:\\n\"\n          \"  %s -- -foo\\n\"\n          \"\\n\"\n          \"  %s ./-foo\\n\",\n          5);\n  __printf_chk(1LL, v20, v19);\n  v21 = stdout;\n  v22 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Note that if you use rm to remove a file, it might be possible to recover\\n\"\n          \"some of its contents, given sufficient expertise and/or time.  For greater\\n\"\n          \"assurance that the contents are truly unrecoverable, consider using shred.\\n\",\n          5);\n  fputs_unlocked(v22, v21);\n  v33[0] = (__int64)&unk_40B247;\n  v23 = v33;\n  v33[1] = (__int64)\"test invocation\";\n  v33[2] = (__int64)\"coreutils\";\n  v33[3] = (__int64)\"Multi-call invocation\";\n  v33[4] = (__int64)\"sha224sum\";\n  v33[5] = (__int64)\"sha2 utilities\";\n  v33[6] = (__int64)\"sha256sum\";\n  v33[7] = (__int64)\"sha2 utilities\";\n  v33[8] = (__int64)\"sha384sum\";\n  v33[9] = (__int64)\"sha2 utilities\";\n  v33[10] = (__int64)\"sha512sum\";\n  v33[11] = (__int64)\"sha2 utilities\";\n  v33[12] = 0LL;\n  v33[13] = 0LL;\n  do\n    v23 += 2;\n  while ( *v23 && strcmp(\"rm\", (const char *)*v23) );\n  v24 = (const char *)v23[1];\n  if ( v24 )\n  {\n    v25 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v25, &unk_40B2BD);\n    v26 = setlocale(5, 0LL);\n    if ( !v26 || !strncmp(v26, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v29 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v29, &unk_40B2BD);\n    v30 = setlocale(5, 0LL);\n    if ( !v30 || !strncmp(v30, \"en_\", 3uLL) )\n    {\n      v24 = \"rm\";\n      v31 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v31, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v24 = \"rm\";\n  }\n  v32 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v32, \"rm\");\nLABEL_10:\n  v27 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v27, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v28 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v28, v24);\nLABEL_3:\n  exit(status);\n}\n"
        },
        {
            "funcName": "sub_402820",
            "funcStartAddr": "0x402820",
            "funcEndAddr": "0x402a29",
            "decompiledFuncCode": "__int64 __fastcall sub_402820(__int64 a1, __int64 a2, _BYTE *a3, char a4)\n{\n  int *v6; // rax\n  unsigned __int64 v7; // rdx\n  int *v8; // r13\n  __int64 result; // rax\n  __int64 v10; // rbp\n  char *v11; // rax\n  _QWORD *i; // rax\n  __int64 v13; // rax\n  int v14; // eax\n  __int64 v15; // rbx\n  char *v16; // rsi\n  struct stat v17; // [rsp+0h] [rbp-B8h] BYREF\n\n  if ( unlinkat(*(_DWORD *)(a1 + 44), *(const char **)(a2 + 48), (a4 != 0) << 9) )\n  {\n    v6 = __errno_location();\n    v7 = (unsigned int)*v6;\n    v8 = v6;\n    if ( (_DWORD)v7 == 30 )\n    {\n      if ( !__fxstatat(1, *(_DWORD *)(a1 + 44), *(const char **)(a2 + 48), &v17, 256)\n        || (v7 = (unsigned int)*v8, (_DWORD)v7 != 2) )\n      {\n        *v8 = 30;\n        goto LABEL_9;\n      }\n      result = 2LL;\n      if ( *a3 )\n        return result;\n      if ( *(_WORD *)(a2 + 112) != 4 )\n        goto LABEL_9;\n      goto LABEL_18;\n    }\n    if ( *a3 )\n    {\n      result = 2LL;\n      if ( (_DWORD)v7 == 20 )\n        return result;\n      if ( (int)v7 <= 20 )\n      {\n        if ( (_DWORD)v7 == 2 )\n          return result;\n        if ( *(_WORD *)(a2 + 112) != 4 )\n          goto LABEL_9;\nLABEL_17:\n        if ( (unsigned int)v7 > 0x27 )\n          goto LABEL_9;\nLABEL_18:\n        v13 = 0x8000320000LL;\n        if ( _bittest64(&v13, v7) )\n        {\n          v14 = *(_DWORD *)(a2 + 64);\n          if ( v14 == 1 || v14 == 13 )\n            *v8 = v14;\n        }\n        goto LABEL_9;\n      }\n      if ( (_DWORD)v7 == 22 || (_DWORD)v7 == 84 )\n        return result;\n    }\n    if ( *(_WORD *)(a2 + 112) != 4 )\n    {\nLABEL_9:\n      v10 = sub_4056E0(4LL, *(_QWORD *)(a2 + 56));\n      v11 = dcgettext(0LL, \"cannot remove %s\", 5);\n      error(0, *v8, v11, v10);\n      for ( i = *(_QWORD **)(a2 + 8); (__int64)i[11] >= 0; i = (_QWORD *)i[1] )\n      {\n        if ( i[4] )\n          break;\n        i[4] = 1LL;\n      }\n      return 4LL;\n    }\n    goto LABEL_17;\n  }\n  result = 2LL;\n  if ( a3[25] )\n  {\n    v15 = sub_4056E0(4LL, *(_QWORD *)(a2 + 56));\n    if ( a4 )\n      v16 = dcgettext(0LL, \"removed directory %s\\n\", 5);\n    else\n      v16 = dcgettext(0LL, \"removed %s\\n\", 5);\n    __printf_chk(1LL, v16, v15);\n    return 2LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402A30",
            "funcStartAddr": "0x402a30",
            "funcEndAddr": "0x402aa0",
            "decompiledFuncCode": "__int64 __fastcall sub_402A30(int fildes, char *filename, struct stat *stat_buf)\n{\n  __off_t st_size; // rax\n  int *v6; // rax\n  __ino_t v7; // rcx\n  int st_ino; // edx\n\n  st_size = stat_buf->st_size;\n  if ( st_size == -1 )\n  {\n    if ( __fxstatat(1, fildes, filename, stat_buf, 256) )\n    {\n      stat_buf->st_size = -2LL;\n      v6 = __errno_location();\n      v7 = *v6;\n      stat_buf->st_ino = v7;\n      st_ino = v7;\n      goto LABEL_6;\n    }\n    st_size = stat_buf->st_size;\n  }\n  if ( st_size >= 0 )\n    return 0LL;\n  v6 = __errno_location();\n  st_ino = stat_buf->st_ino;\nLABEL_6:\n  *v6 = st_ino;\n  return 0xFFFFFFFFLL;\n}\n"
        },
        {
            "funcName": "sub_402AA0",
            "funcStartAddr": "0x402aa0",
            "funcEndAddr": "0x402f42",
            "decompiledFuncCode": "__int64 __fastcall sub_402AA0(__int64 a1, _QWORD *a2, char a3, __int64 a4, int a5, int *a6)\n{\n  int v7; // edi\n  char *v8; // r13\n  int v10; // ebx\n  int v11; // eax\n  DIR *v12; // r14\n  struct dirent *v13; // rax\n  int v14; // eax\n  int v15; // eax\n  int v16; // r12d\n  int v17; // r15d\n  __int64 v18; // rax\n  __int64 v19; // rbp\n  __int64 v20; // r12\n  char *v21; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n  __int64 v25; // rbx\n  __int64 v26; // rbp\n  char *v27; // rdx\n  char v28; // al\n  int v29; // eax\n  char *v30; // rbp\n  int *v31; // rax\n  __int64 v32; // [rsp+8h] [rbp-E0h]\n  int v34; // [rsp+18h] [rbp-D0h]\n  int *v35; // [rsp+18h] [rbp-D0h]\n  int v36; // [rsp+18h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+20h] [rbp-C8h] BYREF\n\n  v7 = *(_DWORD *)(a1 + 44);\n  v8 = (char *)a2[6];\n  v32 = a2[7];\n  if ( a6 )\n  {\n    *a6 = 2;\n    stat_buf.st_size = -1LL;\n    v10 = 4 * (a3 != 0);\n    v11 = openat(v7, v8, 198912);\n    if ( v11 < 0 )\n      goto LABEL_8;\n    v34 = v11;\n    v12 = fdopendir(v11);\n    if ( !v12 )\n    {\n      close(v34);\n      v14 = 3;\n      goto LABEL_9;\n    }\n    v35 = __errno_location();\n    *v35 = 0;\n    while ( 1 )\n    {\n      v13 = readdir(v12);\n      if ( !v13 )\n        break;\n      if ( v13->d_name[0] == 46 )\n      {\n        v28 = v13->d_name[(v13->d_name[1] == 46) + 1];\n        if ( !v28 || v28 == 47 )\n          continue;\n      }\n      closedir(v12);\n      goto LABEL_8;\n    }\n    v36 = *v35;\n    closedir(v12);\n    if ( v36 )\n    {\nLABEL_8:\n      LOBYTE(v12) = 0;\n      v14 = 3;\n    }\n    else\n    {\n      LOBYTE(v12) = 1;\n      v14 = 4;\n    }\nLABEL_9:\n    *a6 = v14;\n    goto LABEL_10;\n  }\n  LOBYTE(v12) = a3;\n  stat_buf.st_size = -1LL;\n  v10 = a3 != 0 ? 4 : 0;\n  if ( a3 )\n    LOBYTE(v12) = 0;\nLABEL_10:\n  if ( a2[4] )\n    return 3LL;\n  v15 = *(_DWORD *)(a4 + 4);\n  if ( v15 == 5 )\n    return 2LL;\n  if ( *(_BYTE *)a4 )\n    goto LABEL_29;\n  if ( v15 != 3 && !*(_BYTE *)(a4 + 24) )\n    return 2LL;\n  if ( (unsigned __int8)sub_405F40() )\n    goto LABEL_28;\n  if ( (unsigned int)sub_402A30(v7, v8, &stat_buf) )\n  {\nLABEL_55:\n    v16 = *__errno_location();\n    goto LABEL_56;\n  }\n  if ( (stat_buf.st_mode & 0xF000) == 40960 || !faccessat(v7, v8, 2, 512) )\n  {\nLABEL_28:\n    v15 = *(_DWORD *)(a4 + 4);\nLABEL_29:\n    if ( v15 != 3 )\n      return 2LL;\n    v17 = 0;\n    goto LABEL_31;\n  }\n  v16 = *__errno_location();\n  if ( v16 != 13 )\n  {\nLABEL_56:\n    v23 = sub_4056E0(4LL, v32);\n    goto LABEL_37;\n  }\n  v17 = 1;\nLABEL_31:\n  if ( v10 )\n  {\n    if ( v10 == 4 )\n      goto LABEL_33;\nLABEL_54:\n    v25 = sub_4056E0(4LL, v32);\n    goto LABEL_21;\n  }\n  if ( (unsigned int)sub_402A30(v7, v8, &stat_buf) )\n    goto LABEL_55;\n  v29 = stat_buf.st_mode & 0xF000;\n  if ( v29 == 40960 )\n  {\n    if ( *(_DWORD *)(a4 + 4) != 3 )\n      return 2LL;\n    goto LABEL_54;\n  }\n  if ( v29 != 0x4000 )\n    goto LABEL_54;\nLABEL_33:\n  if ( !*(_BYTE *)(a4 + 9) )\n  {\n    if ( !*(_BYTE *)(a4 + 10) || !(_BYTE)v12 )\n    {\n      v16 = 21;\n      v23 = sub_4056E0(4LL, v32);\nLABEL_37:\n      v24 = dcgettext(0LL, \"cannot remove %s\", 5);\n      error(0, v16, v24, v23);\n      return 4LL;\n    }\n    goto LABEL_54;\n  }\n  v25 = sub_4056E0(4LL, v32);\n  if ( a5 == 2 && !(_BYTE)v12 )\n  {\n    v26 = qword_610368;\n    if ( v17 )\n      v27 = dcgettext(0LL, \"%s: descend into write-protected directory %s? \", 5);\n    else\n      v27 = dcgettext(0LL, \"%s: descend into directory %s? \", 5);\n    __fprintf_chk(stderr, 1LL, v27, v26, v25);\nLABEL_25:\n    if ( (unsigned __int8)sub_406290() )\n      return 2LL;\n    return 3LL;\n  }\nLABEL_21:\n  if ( !(unsigned int)sub_402A30(v7, v8, &stat_buf) )\n  {\n    v18 = sub_403C20(&stat_buf);\n    v19 = qword_610368;\n    v20 = v18;\n    if ( v17 )\n      v21 = dcgettext(0LL, \"%s: remove write-protected %s %s? \", 5);\n    else\n      v21 = dcgettext(0LL, \"%s: remove %s %s? \", 5);\n    __fprintf_chk(stderr, 1LL, v21, v19, v20);\n    goto LABEL_25;\n  }\n  v30 = dcgettext(0LL, \"cannot remove %s\", 5);\n  v31 = __errno_location();\n  error(0, *v31, v30, v25);\n  return 4LL;\n}\n"
        },
        {
            "funcName": "sub_402F50",
            "funcStartAddr": "0x402f50",
            "funcEndAddr": "0x403626",
            "decompiledFuncCode": "__int64 __fastcall sub_402F50(_QWORD *a1, __int64 a2)\n{\n  unsigned int v2; // r12d\n  __int64 v3; // rbp\n  __int64 v4; // rax\n  __int64 v5; // rbx\n  __int16 v6; // ax\n  __int64 v7; // r12\n  char *v8; // rax\n  int *v9; // rbx\n  bool v11; // r15\n  int v12; // r14d\n  __int64 v13; // r12\n  char *v14; // rax\n  int v15; // eax\n  int v16; // r14d\n  DIR *v17; // r15\n  int *v18; // rax\n  int *v19; // r14\n  struct dirent *v20; // rax\n  int v21; // r12d\n  int v22; // r14d\n  _BYTE *v23; // rax\n  _QWORD *v24; // rax\n  _QWORD *j; // rax\n  __int64 v26; // r14\n  char *v27; // rax\n  _QWORD *i; // rax\n  char v29; // al\n  __int64 v30; // r15\n  __int64 v31; // r14\n  __int64 v32; // r12\n  char *v33; // rax\n  char v34; // al\n  __int64 v35; // r12\n  char *v36; // rax\n  char *v37; // rax\n  char *v38; // rax\n  char *v39; // rax\n  _QWORD *k; // rax\n  __int64 v41; // rbx\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned int v44; // ebx\n  __int64 v45; // rbp\n  char *v46; // rax\n  __int64 v47; // r14\n  __int64 v48; // r12\n  char *v49; // rax\n  int v50[15]; // [rsp+Ch] [rbp-3Ch] BYREF\n\n  if ( !*a1 )\n    return 2;\n  v2 = 2;\n  v3 = sub_406210(a1, *(_BYTE *)(a2 + 8) == 0 ? 536 : 600, 0LL);\nLABEL_3:\n  while ( 1 )\n  {\n    v4 = fts_read(v3);\n    v5 = v4;\n    if ( !v4 )\n      break;\n    while ( 2 )\n    {\n      v6 = *(_WORD *)(v4 + 112);\n      switch ( v6 )\n      {\n        case 1:\n          if ( *(_BYTE *)(a2 + 9) )\n            goto LABEL_34;\n          if ( !*(_BYTE *)(a2 + 10) )\n            goto LABEL_47;\n          v15 = openat(*(_DWORD *)(v3 + 44), *(const char **)(v5 + 48), 198912);\n          v16 = v15;\n          if ( v15 < 0 )\n            goto LABEL_31;\n          v17 = fdopendir(v15);\n          if ( !v17 )\n          {\n            close(v16);\nLABEL_31:\n            if ( *(_BYTE *)(a2 + 10) )\n              v21 = 39;\n            else\nLABEL_47:\n              v21 = 21;\n            v26 = sub_4056E0(4LL, *(_QWORD *)(v5 + 56));\n            v27 = dcgettext(0LL, \"cannot remove %s\", 5);\n            error(0, v21, v27, v26);\n            for ( i = *(_QWORD **)(v5 + 8); (__int64)i[11] >= 0; i = (_QWORD *)i[1] )\n            {\n              if ( i[4] )\n                break;\n              i[4] = 1LL;\n            }\n            goto LABEL_6;\n          }\n          v18 = __errno_location();\n          *v18 = 0;\n          v19 = v18;\n          while ( 1 )\n          {\n            v20 = readdir(v17);\n            if ( !v20 )\n              break;\n            if ( v20->d_name[0] == 46 )\n            {\n              v34 = v20->d_name[(v20->d_name[1] == 46) + 1];\n              if ( !v34 || v34 == 47 )\n                continue;\n            }\n            closedir(v17);\n            goto LABEL_31;\n          }\n          v22 = *v19;\n          closedir(v17);\n          if ( v22 )\n            goto LABEL_31;\nLABEL_34:\n          if ( *(_QWORD *)(v5 + 88) )\n            goto LABEL_38;\n          v23 = (_BYTE *)sub_403B90(*(_QWORD *)(v5 + 48));\n          if ( *v23 == 46 )\n          {\n            v29 = v23[(v23[1] == 46) + 1];\n            if ( !v29 || v29 == 47 )\n            {\n              v30 = sub_405600(2LL, 4LL, *(_QWORD *)(v5 + 56));\n              v31 = sub_405600(1LL, 4LL, \"..\");\n              v32 = sub_405600(0LL, 4LL, \".\");\n              v33 = dcgettext(0LL, \"refusing to remove %s or %s directory: skipping %s\", 5);\n              error(0, 0, v33, v32, v31, v30);\nLABEL_6:\n              v2 = 4;\n              fts_set(v3, v5, 4LL);\n              fts_read(v3);\n              v4 = fts_read(v3);\n              v5 = v4;\n              if ( !v4 )\n                goto LABEL_7;\n              continue;\n            }\n          }\n          v24 = *(_QWORD **)(a2 + 16);\n          if ( v24 && *(_QWORD *)(v5 + 128) == *v24 && *(_QWORD *)(v5 + 120) == v24[1] )\n          {\n            if ( !strcmp(*(const char **)(v5 + 56), \"/\") )\n            {\n              v35 = sub_4056E0(4LL, *(_QWORD *)(v5 + 56));\n              v36 = dcgettext(0LL, \"it is dangerous to operate recursively on %s\", 5);\n              error(0, 0, v36, v35);\n            }\n            else\n            {\n              v47 = sub_405600(1LL, 4LL, \"/\");\n              v48 = sub_405600(0LL, 4LL, *(_QWORD *)(v5 + 56));\n              v49 = dcgettext(0LL, \"it is dangerous to operate recursively on %s (same as %s)\", 5);\n              error(0, 0, v49, v48, v47);\n            }\n            v37 = dcgettext(0LL, \"use --no-preserve-root to override this failsafe\", 5);\n            error(0, 0, v37);\n            goto LABEL_6;\n          }\nLABEL_38:\n          v12 = sub_402AA0(v3, (_QWORD *)v5, 1, a2, 2, v50);\n          if ( v12 != 2\n            || v50[0] == 4 && (v12 = sub_402820(v3, v5, (_BYTE *)a2, 1), fts_set(v3, v5, 4LL), fts_read(v3), v12 != 2) )\n          {\n            for ( j = *(_QWORD **)(v5 + 8); (__int64)j[11] >= 0; j = (_QWORD *)j[1] )\n            {\n              if ( j[4] )\n                break;\n              j[4] = 1LL;\n            }\n            fts_set(v3, v5, 4LL);\n            fts_read(v3);\nLABEL_16:\n            if ( (unsigned int)(v12 - 2) > 2 )\n              __assert_fail(\"VALID_STATUS (s)\", \"src/remove.c\", 0x23Eu, \"rm\");\n            if ( v12 == 4 )\n            {\n              v2 = 4;\n            }\n            else if ( v12 == 3 && v2 == 2 )\n            {\n              v2 = 3;\n            }\n          }\n          break;\n        case 2:\n          v13 = sub_4057B0(0LL, 3LL, *(_QWORD *)(v5 + 56));\n          v14 = dcgettext(\n                  0LL,\n                  \"WARNING: Circular directory structure.\\n\"\n                  \"This almost certainly means that you have a corrupted file system.\\n\"\n                  \"NOTIFY YOUR SYSTEM MANAGER.\\n\"\n                  \"The following directory is part of the cycle:\\n\"\n                  \"  %s\\n\",\n                  5);\n          error(0, 0, v14, v13);\n          goto LABEL_6;\n        case 3:\n        case 4:\n        case 6:\n        case 8:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n          if ( v6 != 6\n            || !*(_BYTE *)(a2 + 8)\n            || *(__int64 *)(v5 + 88) <= 0\n            || *(_QWORD *)(v5 + 120) == *(_QWORD *)(v3 + 24) )\n          {\n            v11 = (v6 & 0xFFFD) == 4;\n            v12 = sub_402AA0(v3, (_QWORD *)v5, v11, a2, 3, 0LL);\n            if ( v12 == 2 )\n              v12 = sub_402820(v3, v5, (_BYTE *)a2, v11);\n            goto LABEL_16;\n          }\n          for ( k = *(_QWORD **)(v5 + 8); (__int64)k[11] >= 0; k = (_QWORD *)k[1] )\n          {\n            if ( k[4] )\n              break;\n            k[4] = 1LL;\n          }\n          v2 = 4;\n          v41 = sub_4056E0(4LL, *(_QWORD *)(v5 + 56));\n          v42 = dcgettext(0LL, \"skipping %s, since it's on a different device\", 5);\n          error(0, 0, v42, v41);\n          goto LABEL_3;\n        case 7:\n          v7 = sub_4057B0(0LL, 3LL, *(_QWORD *)(v5 + 56));\n          v8 = dcgettext(0LL, \"traversal failed: %s\", 5);\n          error(0, *(_DWORD *)(v5 + 64), v8, v7);\n          goto LABEL_6;\n        default:\n          v43 = sub_4057B0(0LL, 3LL, *(_QWORD *)(v5 + 56));\n          v44 = *(unsigned __int16 *)(v5 + 112);\n          v45 = v43;\n          v46 = dcgettext(0LL, \"unexpected failure: fts_info=%d: %s\\nplease report to %s\", 5);\n          error(0, 0, v46, v44, v45, \"bug-coreutils@gnu.org\");\n          abort();\n      }\n      break;\n    }\n  }\nLABEL_7:\n  v9 = __errno_location();\n  if ( *v9 )\n  {\n    v2 = 4;\n    v38 = dcgettext(0LL, \"fts_read failed\", 5);\n    error(0, *v9, v38);\n    if ( !(unsigned int)fts_close((void *)v3) )\n      return v2;\nLABEL_64:\n    v2 = 4;\n    v39 = dcgettext(0LL, \"fts_close failed\", 5);\n    error(0, *v9, v39);\n    return v2;\n  }\n  if ( (unsigned int)fts_close((void *)v3) )\n    goto LABEL_64;\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_403630",
            "funcStartAddr": "0x403630",
            "funcEndAddr": "0x40363a",
            "decompiledFuncCode": "void __noreturn sub_403630()\n{\n  sub_402450(1);\n}\n"
        },
        {
            "funcName": "sub_403640",
            "funcStartAddr": "0x403640",
            "funcEndAddr": "0x403756",
            "decompiledFuncCode": "__int64 __fastcall sub_403640(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n\n  v5 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += a4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( a3 )\n      {\n        v10 = memcmp(&a3[a4 * v14], v5, a4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += a4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    return v14;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_403760",
            "funcStartAddr": "0x403760",
            "funcEndAddr": "0x4037d1",
            "decompiledFuncCode": "void __fastcall sub_403760(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_405910(1LL, a1);\n  v5 = sub_405600(0LL, 8LL, a2);\n  error(0, 0, v3, v5, v4);\n}\n"
        },
        {
            "funcName": "sub_4037E0",
            "funcStartAddr": "0x4037e0",
            "funcEndAddr": "0x4038f8",
            "decompiledFuncCode": "int __fastcall sub_4037E0(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  const char *v11; // rax\n  const char *v12; // rax\n  char *IO_write_ptr; // rax\n\n  v3 = 0LL;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, a2, a3) )\n    {\n      ++v9;\n      v3 = a2;\n      a2 += a3;\n      v11 = (const char *)sub_405930(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    a2 += a3;\n    v12 = (const char *)sub_405930(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  IO_write_ptr = stderr->_IO_write_ptr;\n  if ( IO_write_ptr >= stderr->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 10;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_403900",
            "funcStartAddr": "0x403900",
            "funcEndAddr": "0x403970",
            "decompiledFuncCode": "__int64 __fastcall sub_403900(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  __int64 result; // rax\n\n  result = sub_403640(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_403760(a1, (__int64)a2, result);\n    sub_4037E0((__int64 *)a3, a4, a5);\n    a6();\n    return -1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403970",
            "funcStartAddr": "0x403970",
            "funcEndAddr": "0x4039bd",
            "decompiledFuncCode": "__int64 __fastcall sub_403970(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  __int64 *v6; // rbx\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v6 = a2 + 1;\n    do\n    {\n      if ( !memcmp(s1, a3, a4) )\n        break;\n      v4 = *v6;\n      a3 += a4;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_4039D0",
            "funcStartAddr": "0x4039d0",
            "funcEndAddr": "0x403acd",
            "decompiledFuncCode": "__int64 sub_4039D0()\n{\n  FILE *v0; // rbx\n  int v2; // eax\n  FILE *v3; // rdi\n  char *v4; // rax\n  __int64 v5; // rbx\n  const char *v6; // r12\n  int *v7; // rax\n  int *v8; // rbp\n  const char *v9; // rax\n  int v10; // eax\n\n  v0 = stdin;\n  if ( sub_406340(stdin) )\n  {\n    v10 = sub_406370(v0, 0LL, 1LL);\n    v3 = stdin;\n    if ( v10 || (v2 = sub_406300(stdin), v3 = stdin, !v2) )\n    {\n      if ( !(unsigned int)sub_4094F0(v3) )\n        return sub_403AF0();\n    }\n    else\n    {\n      sub_4094F0(stdin);\n    }\nLABEL_6:\n    v4 = dcgettext(0LL, \"error closing file\", 5);\n    v5 = qword_610350;\n    v6 = v4;\n    v7 = __errno_location();\n    v8 = v7;\n    if ( v5 )\n    {\n      v9 = (const char *)sub_405780(v5);\n      error(0, *v8, \"%s: %s\", v9, v6);\n    }\n    else\n    {\n      error(0, *v7, \"%s\", v6);\n    }\n    sub_403AF0();\n    _exit(status);\n  }\n  if ( (unsigned int)sub_4094F0(v0) )\n    goto LABEL_6;\n  return sub_403AF0();\n}\n"
        },
        {
            "funcName": "sub_403AF0",
            "funcStartAddr": "0x403af0",
            "funcEndAddr": "0x403b8e",
            "decompiledFuncCode": "__int64 sub_403AF0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_4094F0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_610358 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_610360 )\n      {\n        v5 = (const char *)sub_405780(qword_610360);\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_4094F0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403B90",
            "funcStartAddr": "0x403b90",
            "funcEndAddr": "0x403beb",
            "decompiledFuncCode": "_BYTE *__fastcall sub_403B90(_BYTE *a1)\n{\n  char v1; // dl\n  _BYTE *result; // rax\n  _BYTE *v3; // rcx\n  char v4; // si\n\n  v1 = *a1;\n  for ( result = a1; *result == 47; v1 = *result )\n    ++result;\n  if ( v1 )\n  {\n    v3 = result;\n    v4 = 0;\n    do\n    {\n      while ( v1 == 47 )\n      {\n        v1 = *++v3;\n        v4 = 1;\n        if ( !*v3 )\n          return result;\n      }\n      if ( v4 )\n      {\n        result = v3;\n        v4 = 0;\n      }\n      v1 = *++v3;\n    }\n    while ( *v3 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403BF0",
            "funcStartAddr": "0x403bf0",
            "funcEndAddr": "0x403c1b",
            "decompiledFuncCode": "size_t __fastcall sub_403BF0(const char *a1)\n{\n  size_t result; // rax\n  size_t v2; // rdx\n\n  result = strlen(a1);\n  if ( result > 1 )\n  {\n    do\n    {\n      v2 = result - 1;\n      if ( a1[result - 1] != 47 )\n        break;\n      --result;\n    }\n    while ( v2 != 1 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403C20",
            "funcStartAddr": "0x403c20",
            "funcEndAddr": "0x403d04",
            "decompiledFuncCode": "char *__fastcall sub_403C20(__int64 a1)\n{\n  int v1; // eax\n\n  v1 = *(_DWORD *)(a1 + 24) & 0xF000;\n  switch ( v1 )\n  {\n    case 32768:\n      if ( *(_QWORD *)(a1 + 48) )\n        return dcgettext(0LL, \"regular file\", 5);\n      else\n        return dcgettext(0LL, \"regular empty file\", 5);\n    case 16384:\n      return dcgettext(0LL, \"directory\", 5);\n    case 40960:\n      return dcgettext(0LL, \"symbolic link\", 5);\n    case 24576:\n      return dcgettext(0LL, \"block special file\", 5);\n    case 8192:\n      return dcgettext(0LL, \"character special file\", 5);\n    case 4096:\n      return dcgettext(0LL, \"fifo\", 5);\n    case 49152:\n      return dcgettext(0LL, \"socket\", 5);\n    default:\n      return dcgettext(0LL, \"weird file\", 5);\n  }\n}\n"
        },
        {
            "funcName": "sub_403D10",
            "funcStartAddr": "0x403d10",
            "funcEndAddr": "0x403da9",
            "decompiledFuncCode": "char *__fastcall sub_403D10(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_610368 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403DB0",
            "funcStartAddr": "0x403db0",
            "funcEndAddr": "0x403ea2",
            "decompiledFuncCode": "char *__fastcall sub_403DB0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40A9A0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40C3E1;\n      if ( !v5 )\n        return (char *)&unk_40C3D6;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40C3DD;\n    if ( !v5 )\n      return (char *)&unk_40C3DA;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_403EB0",
            "funcStartAddr": "0x401e00",
            "funcEndAddr": "0x401e05",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_403EB0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_403EB0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_403EB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409470((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_403EB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403DB0(\"`\", a5);\n        v51 = sub_403DB0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_403EB0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_403EB0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_403EB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409470((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_403EB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403DB0(\"`\", a5);\n        v51 = sub_403DB0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_403EB0",
            "funcStartAddr": "0x401e00",
            "funcEndAddr": "0x401e05",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_403EB0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_403EB0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_403EB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409470((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_403EB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403DB0(\"`\", a5);\n        v51 = sub_403DB0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_403EB0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_403EB0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_403EB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409470((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_403EB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403DB0(\"`\", a5);\n        v51 = sub_403DB0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_4050E0",
            "funcStartAddr": "0x401e05",
            "funcEndAddr": "0x401e0a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4050E0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4061D0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6102E0 )\n    {\n      v7 = (__m128i *)sub_405FE0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      ptr = (void *)sub_405FE0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403EB0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_610380 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_405F80(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403EB0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_4050E0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4061D0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6102E0 )\n    {\n      v7 = (__m128i *)sub_405FE0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      ptr = (void *)sub_405FE0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403EB0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_610380 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_405F80(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403EB0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_4050E0",
            "funcStartAddr": "0x401e05",
            "funcEndAddr": "0x401e0a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4050E0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4061D0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6102E0 )\n    {\n      v7 = (__m128i *)sub_405FE0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      ptr = (void *)sub_405FE0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403EB0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_610380 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_405F80(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403EB0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_4050E0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4061D0();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6102E0 )\n    {\n      v7 = (__m128i *)sub_405FE0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      ptr = (void *)sub_405FE0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403EB0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_610380 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_405F80(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403EB0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_405280",
            "funcStartAddr": "0x405280",
            "funcEndAddr": "0x4052b4",
            "decompiledFuncCode": "__int64 __fastcall sub_405280(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_610480;\n  result = sub_406180(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405370",
            "funcStartAddr": "0x405370",
            "funcEndAddr": "0x4053e2",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405370(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_610480;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_403EB0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4053F0",
            "funcStartAddr": "0x4053f0",
            "funcEndAddr": "0x4054d1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4053F0(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_610480;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_403EB0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_405F80(v11 + 1);\n  sub_403EB0(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_4054F0",
            "funcStartAddr": "0x4054f0",
            "funcEndAddr": "0x405585",
            "decompiledFuncCode": "void sub_4054F0()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_6102F0 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_6102F0 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_610380 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_6102E0 = 256LL;\n    *((_QWORD *)&xmmword_6102E0 + 1) = &unk_610380;\n  }\n  if ( v0 != &xmmword_6102E0 )\n  {\n    free(v0);\n    ptr = &xmmword_6102E0;\n  }\n  dword_6102F0 = 1;\n}\n"
        },
        {
            "funcName": "sub_405600",
            "funcStartAddr": "0x401e0a",
            "funcEndAddr": "0x401e0f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405600(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4050E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_405600(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4050E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_405600",
            "funcStartAddr": "0x401e0a",
            "funcEndAddr": "0x401e0f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405600(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4050E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_405600(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4050E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_405670",
            "funcStartAddr": "0x401e0f",
            "funcEndAddr": "0x401e14",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405670(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4050E0(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_405670(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4050E0(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_405670",
            "funcStartAddr": "0x401e0f",
            "funcEndAddr": "0x401e14",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405670(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4050E0(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_405670(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4050E0(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4056E0",
            "funcStartAddr": "0x4056e0",
            "funcEndAddr": "0x4056ec",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4056E0(int a1, __int64 a2)\n{\n  return sub_405600(0, a1, a2);\n}\n"
        },
        {
            "funcName": "sub_405700",
            "funcStartAddr": "0x405700",
            "funcEndAddr": "0x405770",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405700(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_6104B0;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_610480);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_610490);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6104A0);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_4050E0(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_405780",
            "funcStartAddr": "0x405780",
            "funcEndAddr": "0x405791",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405780(__int64 a1)\n{\n  return sub_405700(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_4057B0",
            "funcStartAddr": "0x401e14",
            "funcEndAddr": "0x401e19",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4057B0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4050E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4057B0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4050E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4057B0",
            "funcStartAddr": "0x401e14",
            "funcEndAddr": "0x401e19",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4057B0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4050E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4057B0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4050E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_405820",
            "funcStartAddr": "0x405820",
            "funcEndAddr": "0x40588c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405820(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_610480);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_610490);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_6104A0);\n  v8 = qword_6104B0;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_4050E0(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_405910",
            "funcStartAddr": "0x405910",
            "funcEndAddr": "0x405921",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405910(int a1, __int64 a2)\n{\n  return sub_4050E0(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6102A0);\n}\n"
        },
        {
            "funcName": "sub_405930",
            "funcStartAddr": "0x405930",
            "funcEndAddr": "0x405946",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405930(__int64 a1)\n{\n  return sub_4050E0(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6102A0);\n}\n"
        },
        {
            "funcName": "sub_405950",
            "funcStartAddr": "0x405950",
            "funcEndAddr": "0x40599b",
            "decompiledFuncCode": "__ino_t *__fastcall sub_405950(__ino_t *a1)\n{\n  struct stat v2; // [rsp+0h] [rbp-98h] BYREF\n\n  if ( __lxstat(1, \"/\", &v2) )\n    return 0LL;\n  *a1 = v2.st_ino;\n  a1[1] = v2.st_dev;\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_4059A0",
            "funcStartAddr": "0x401e19",
            "funcEndAddr": "0x401e1e",
            "decompiledFuncCode": "__int64 __fastcall sub_4059A0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_4059A0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_4059A0",
            "funcStartAddr": "0x401e19",
            "funcEndAddr": "0x401e1e",
            "decompiledFuncCode": "__int64 __fastcall sub_4059A0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_4059A0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_405DA0",
            "funcStartAddr": "0x405da0",
            "funcEndAddr": "0x405e00",
            "decompiledFuncCode": "__int64 __fastcall sub_405DA0(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_4059A0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_4059A0(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_405E00",
            "funcStartAddr": "0x405e00",
            "funcEndAddr": "0x405ebc",
            "decompiledFuncCode": "__int64 __fastcall sub_405E00(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_4059A0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_4059A0(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_405EC0",
            "funcStartAddr": "0x405ec0",
            "funcEndAddr": "0x405f34",
            "decompiledFuncCode": "int sub_405EC0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_40B2BD);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_405F40",
            "funcStartAddr": "0x405f40",
            "funcEndAddr": "0x405f78",
            "decompiledFuncCode": "char sub_405F40()\n{\n  char result; // al\n  __uid_t v1; // eax\n\n  if ( byte_6104B9 )\n    return byte_6104B8;\n  v1 = geteuid();\n  byte_6104B9 = 1;\n  result = v1 == 0;\n  byte_6104B8 = result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405F80",
            "funcStartAddr": "0x405f80",
            "funcEndAddr": "0x405f9a",
            "decompiledFuncCode": "void *__fastcall sub_405F80(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_4061D0();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405FD0",
            "funcStartAddr": "0x405fd0",
            "funcEndAddr": "0x405fd2",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_405FD0(size_t a1)\n{\n  return sub_405F80(a1);\n}\n"
        },
        {
            "funcName": "sub_405FE0",
            "funcStartAddr": "0x405fe0",
            "funcEndAddr": "0x406016",
            "decompiledFuncCode": "void *__fastcall sub_405FE0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_4061D0();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406130",
            "funcStartAddr": "0x406130",
            "funcEndAddr": "0x406147",
            "decompiledFuncCode": "void *__fastcall sub_406130(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_405F80(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_406150",
            "funcStartAddr": "0x406150",
            "funcEndAddr": "0x40617e",
            "decompiledFuncCode": "__int64 __fastcall sub_406150(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_4061D0(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_406180",
            "funcStartAddr": "0x406180",
            "funcEndAddr": "0x4061a8",
            "decompiledFuncCode": "void *__fastcall sub_406180(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_405F80(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_4061B0",
            "funcStartAddr": "0x4061b0",
            "funcEndAddr": "0x4061c3",
            "decompiledFuncCode": "void *__fastcall sub_4061B0(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_406180(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_4061D0",
            "funcStartAddr": "0x4061d0",
            "funcEndAddr": "0x406201",
            "decompiledFuncCode": "void __noreturn sub_4061D0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_406210",
            "funcStartAddr": "0x406210",
            "funcEndAddr": "0x406259",
            "decompiledFuncCode": "__int64 __fastcall sub_406210(__int64 a1, int a2)\n{\n  __int64 result; // rax\n\n  result = fts_open(a1, a2 | 0x200u);\n  if ( !result )\n  {\n    if ( *__errno_location() != 22 )\n      sub_4061D0();\n    __assert_fail(\"errno != EINVAL\", \"lib/xfts.c\", 0x29u, \"xfts_open\");\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406290",
            "funcStartAddr": "0x406290",
            "funcEndAddr": "0x4062f9",
            "decompiledFuncCode": "__int64 sub_406290()\n{\n  unsigned int v0; // ebx\n  __ssize_t v1; // rax\n  char *v2; // rdi\n  char *v3; // rax\n  char *response; // [rsp+0h] [rbp-18h] BYREF\n  size_t n[2]; // [rsp+8h] [rbp-10h] BYREF\n\n  v0 = 0;\n  response = 0LL;\n  n[0] = 0LL;\n  v1 = __getdelim(&response, n, 10, stdin);\n  if ( v1 > 0 )\n  {\n    v2 = response;\n    v3 = &response[v1 - 1];\n    if ( *v3 == 10 )\n    {\n      *v3 = 0;\n      v2 = response;\n    }\n    LOBYTE(v0) = rpmatch(v2) > 0;\n  }\n  free(response);\n  return v0;\n}\n"
        },
        {
            "funcName": "sub_406300",
            "funcStartAddr": "0x406300",
            "funcEndAddr": "0x406340",
            "decompiledFuncCode": "int __fastcall sub_406300(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_406370(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_406340",
            "funcStartAddr": "0x406340",
            "funcEndAddr": "0x406368",
            "decompiledFuncCode": "__int64 __fastcall sub_406340(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  if ( *(_QWORD *)(a1 + 40) <= *(_QWORD *)(a1 + 32) )\n  {\n    result = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);\n    if ( (*(_DWORD *)a1 & 0x100) != 0 )\n      result += *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 72);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406370",
            "funcStartAddr": "0x406370",
            "funcEndAddr": "0x4063c7",
            "decompiledFuncCode": "int __fastcall sub_406370(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_4063D0",
            "funcStartAddr": "0x4063d0",
            "funcEndAddr": "0x4063ea",
            "decompiledFuncCode": "bool __fastcall sub_4063D0(_QWORD *a1, _QWORD *a2)\n{\n  bool result; // al\n\n  result = 0;\n  if ( a1[1] == a2[1] )\n    return *a1 == *a2;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4063F0",
            "funcStartAddr": "0x4063f0",
            "funcEndAddr": "0x4063fd",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4063F0(__int64 a1, unsigned __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "sub_406400",
            "funcStartAddr": "0x406400",
            "funcEndAddr": "0x40640c",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406400(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n"
        },
        {
            "funcName": "sub_406410",
            "funcStartAddr": "0x406410",
            "funcEndAddr": "0x40641a",
            "decompiledFuncCode": "bool __fastcall sub_406410(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n"
        },
        {
            "funcName": "sub_406420",
            "funcStartAddr": "0x406420",
            "funcEndAddr": "0x406442",
            "decompiledFuncCode": "__int64 __fastcall sub_406420(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 v3; // rdx\n\n  result = 0xFFFFFFFFLL;\n  v3 = *(_QWORD *)(*(_QWORD *)a2 + 128LL);\n  if ( *(_QWORD *)(*(_QWORD *)a1 + 128LL) >= v3 )\n    return *(_QWORD *)(*(_QWORD *)a1 + 128LL) > v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406450",
            "funcStartAddr": "0x406450",
            "funcEndAddr": "0x4065fa",
            "decompiledFuncCode": "__int64 __fastcall sub_406450(__int64 a1, __int64 a2, char a3)\n{\n  struct stat *v3; // rbp\n  int v5; // eax\n  bool v6; // zf\n  const char *v7; // rsi\n  int *v8; // r12\n  int v9; // eax\n  __int64 result; // rax\n  int v11; // eax\n  unsigned __int64 v12; // rax\n\n  v3 = (struct stat *)(a2 + 120);\n  v5 = *(_DWORD *)(a1 + 72);\n  v6 = *(_QWORD *)(a2 + 88) == 0LL;\n  v7 = *(const char **)(a2 + 48);\n  if ( v6 && (v5 & 1) != 0 || (v5 & 2) != 0 || a3 )\n  {\n    if ( !__xstat(1, v7, v3) )\n      goto LABEL_10;\n    v8 = __errno_location();\n    v9 = *v8;\n    if ( *v8 == 2 )\n    {\n      if ( !__lxstat(1, *(const char **)(a2 + 48), v3) )\n      {\n        *v8 = 0;\n        return 13LL;\n      }\n      v9 = *v8;\n    }\nLABEL_15:\n    *(_DWORD *)(a2 + 64) = v9;\n    *(_QWORD *)(a2 + 120) = 0LL;\n    v3->__unused[2] = 0LL;\n    memset(\n      (void *)((unsigned __int64)&v3->st_ino & 0xFFFFFFFFFFFFFFF8LL),\n      0,\n      8LL * (((unsigned int)v3 - (((_DWORD)v3 + 8) & 0xFFFFFFF8) + 144) >> 3));\n    return 10LL;\n  }\n  if ( __fxstatat(1, *(_DWORD *)(a1 + 44), v7, v3, 256) )\n  {\n    v9 = *__errno_location();\n    goto LABEL_15;\n  }\nLABEL_10:\n  v11 = *(_DWORD *)(a2 + 144) & 0xF000;\n  if ( v11 == 0x4000 )\n  {\n    v12 = *(_QWORD *)(a2 + 136);\n    if ( v12 <= 1 || *(__int64 *)(a2 + 88) <= 0 )\n    {\n      v12 = -1LL;\n    }\n    else if ( (*(_BYTE *)(a1 + 72) & 0x20) == 0 )\n    {\n      v12 -= 2LL;\n    }\n    v6 = *(_BYTE *)(a2 + 264) == 46;\n    *(_QWORD *)(a2 + 104) = v12;\n    result = 1LL;\n    if ( v6 && (!*(_BYTE *)(a2 + 265) || (*(_DWORD *)(a2 + 264) & 0xFFFF00) == 11776) )\n      return *(_QWORD *)(a2 + 88) == 0LL ? 1 : 5;\n  }\n  else if ( v11 == 40960 )\n  {\n    return 12LL;\n  }\n  else\n  {\n    return 5 * (unsigned int)(v11 == 0x8000) + 3;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406600",
            "funcStartAddr": "0x406600",
            "funcEndAddr": "0x4066fd",
            "decompiledFuncCode": "__int64 __fastcall sub_406600(_QWORD *a1, __int64 a2, size_t a3)\n{\n  __int64 v5; // rbx\n  int (*v6)(const void *, const void *); // r13\n  void *v7; // rdi\n  void *v8; // rax\n  _QWORD *v9; // rdx\n  __int64 *v10; // r8\n  __int64 result; // rax\n  __int64 *v12; // rdx\n  __int64 v13; // rsi\n  size_t v14; // rcx\n  __int64 v15; // rdi\n  __int64 v16; // rdx\n\n  v5 = a2;\n  v6 = (int (*)(const void *, const void *))a1[8];\n  v7 = (void *)a1[2];\n  if ( a1[7] >= a3 )\n    goto LABEL_5;\n  a1[7] = a3 + 40;\n  if ( a3 + 40 > 0x1FFFFFFFFFFFFFFFLL )\n  {\nLABEL_14:\n    free(v7);\n    a1[2] = 0LL;\n    result = a2;\n    a1[7] = 0LL;\n    return result;\n  }\n  v8 = realloc(v7, 8 * (a3 + 40));\n  v7 = v8;\n  if ( !v8 )\n  {\n    v7 = (void *)a1[2];\n    goto LABEL_14;\n  }\n  a1[2] = v8;\nLABEL_5:\n  v9 = v7;\n  if ( a2 )\n  {\n    do\n    {\n      *v9++ = v5;\n      v5 = *(_QWORD *)(v5 + 16);\n    }\n    while ( v5 );\n  }\n  qsort(v7, a3, 8uLL, v6);\n  v10 = (__int64 *)a1[2];\n  result = *v10;\n  v12 = v10;\n  v13 = *v10;\n  v14 = a3 - 1;\n  if ( a3 == 1 )\n  {\n    v16 = *v10;\n  }\n  else\n  {\n    while ( 1 )\n    {\n      v15 = v12[1];\n      ++v12;\n      *(_QWORD *)(v13 + 16) = v15;\n      if ( !--v14 )\n        break;\n      v13 = *v12;\n    }\n    v16 = v10[a3 - 1];\n  }\n  *(_QWORD *)(v16 + 16) = 0LL;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406700",
            "funcStartAddr": "0x406700",
            "funcEndAddr": "0x40678a",
            "decompiledFuncCode": "char *__fastcall sub_406700(__int64 a1, const void *a2, size_t a3)\n{\n  char *v4; // rax\n  char *v5; // rbx\n  __int64 v6; // rax\n\n  v4 = (char *)malloc((a3 + 272) & 0xFFFFFFFFFFFFFFF8LL);\n  v5 = v4;\n  if ( v4 )\n  {\n    memcpy(v4 + 264, a2, a3);\n    v6 = *(_QWORD *)(a1 + 32);\n    v5[a3 + 264] = 0;\n    *((_QWORD *)v5 + 12) = a3;\n    *((_QWORD *)v5 + 10) = a1;\n    *((_QWORD *)v5 + 7) = v6;\n    *((_DWORD *)v5 + 16) = 0;\n    *((_QWORD *)v5 + 3) = 0LL;\n    *(_DWORD *)(v5 + 114) = 196608;\n    *((_QWORD *)v5 + 4) = 0LL;\n    *((_QWORD *)v5 + 5) = 0LL;\n  }\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_406790",
            "funcStartAddr": "0x406790",
            "funcEndAddr": "0x4067d1",
            "decompiledFuncCode": "void __fastcall sub_406790(void *ptr)\n{\n  void *v1; // rbx\n  DIR *v2; // rdi\n  void *v3; // rbp\n  void *v4; // rdi\n\n  if ( ptr )\n  {\n    v1 = ptr;\n    do\n    {\n      v2 = (DIR *)*((_QWORD *)v1 + 3);\n      v3 = (void *)*((_QWORD *)v1 + 2);\n      if ( v2 )\n        closedir(v2);\n      v4 = v1;\n      v1 = v3;\n      free(v4);\n    }\n    while ( v3 );\n  }\n}\n"
        },
        {
            "funcName": "sub_4067E0",
            "funcStartAddr": "0x4067e0",
            "funcEndAddr": "0x406819",
            "decompiledFuncCode": "__int64 __fastcall sub_4067E0(__int64 a1)\n{\n  int v1; // eax\n  __int64 result; // rax\n\n  while ( 1 )\n  {\n    result = sub_40A900(a1);\n    if ( (_BYTE)result )\n      break;\n    v1 = sub_40A950(a1);\n    if ( v1 >= 0 )\n      close(v1);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406820",
            "funcStartAddr": "0x401e1e",
            "funcEndAddr": "0x401e23",
            "decompiledFuncCode": "__fsword_t __fastcall sub_406820(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r12\n  __int64 v3; // rax\n  __fsword_t result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h] BYREF\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( (*(_BYTE *)(v1 + 73) & 2) == 0 )\n    return 0LL;\n  v2 = *(_QWORD *)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_409F20(13LL, 0LL, sub_406400, sub_406410, free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_409CB0(v2, &v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40A6C0(v2, v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    return v8.f_type;\n  }\n  return result;\n}\n\n__fsword_t __fastcall sub_406820(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r12\n  __int64 v3; // rax\n  __fsword_t result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h] BYREF\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( (*(_BYTE *)(v1 + 73) & 2) == 0 )\n    return 0LL;\n  v2 = *(_QWORD *)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_409F20(13LL, 0LL, sub_406400, sub_406410, free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_409CB0(v2, &v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40A6C0(v2, v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    return v8.f_type;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406820",
            "funcStartAddr": "0x401e1e",
            "funcEndAddr": "0x401e23",
            "decompiledFuncCode": "__fsword_t __fastcall sub_406820(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r12\n  __int64 v3; // rax\n  __fsword_t result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h] BYREF\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( (*(_BYTE *)(v1 + 73) & 2) == 0 )\n    return 0LL;\n  v2 = *(_QWORD *)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_409F20(13LL, 0LL, sub_406400, sub_406410, free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_409CB0(v2, &v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40A6C0(v2, v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    return v8.f_type;\n  }\n  return result;\n}\n\n__fsword_t __fastcall sub_406820(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r12\n  __int64 v3; // rax\n  __fsword_t result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h] BYREF\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( (*(_BYTE *)(v1 + 73) & 2) == 0 )\n    return 0LL;\n  v2 = *(_QWORD *)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_409F20(13LL, 0LL, sub_406400, sub_406410, free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_409CB0(v2, &v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40A6C0(v2, v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    return v8.f_type;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406940",
            "funcStartAddr": "0x406940",
            "funcEndAddr": "0x4069a4",
            "decompiledFuncCode": "__int64 __fastcall sub_406940(__int64 a1)\n{\n  __fsword_t v1; // rax\n  unsigned int v2; // edx\n\n  v1 = sub_406820(a1);\n  if ( v1 == 40864 )\n    return 0;\n  if ( v1 > 40864 )\n  {\n    if ( v1 != 1397113167 )\n    {\n      v2 = 2;\n      if ( v1 != 1481003842 )\n        return (unsigned int)(v1 == 1382369651) + 1;\n      return v2;\n    }\n    return 0;\n  }\n  v2 = 0;\n  if ( !v1 )\n    return v2;\n  return v1 != 26985;\n}\n"
        },
        {
            "funcName": "sub_4069B0",
            "funcStartAddr": "0x4069b0",
            "funcEndAddr": "0x406a16",
            "decompiledFuncCode": "void __fastcall sub_4069B0(__int64 a1, int a2, char a3)\n{\n  int v4; // esi\n  int v5; // eax\n\n  v4 = *(_DWORD *)(a1 + 44);\n  if ( v4 == a2 && v4 != -100 )\n    abort();\n  if ( a3 )\n  {\n    v5 = sub_40A910(a1 + 96);\n    if ( v5 < 0 )\n    {\nLABEL_6:\n      *(_DWORD *)(a1 + 44) = a2;\n      return;\n    }\n    close(v5);\n    *(_DWORD *)(a1 + 44) = a2;\n  }\n  else\n  {\n    if ( (*(_BYTE *)(a1 + 72) & 4) != 0 || v4 < 0 )\n      goto LABEL_6;\n    close(v4);\n    *(_DWORD *)(a1 + 44) = a2;\n  }\n}\n"
        },
        {
            "funcName": "sub_406A20",
            "funcStartAddr": "0x406a20",
            "funcEndAddr": "0x406a7a",
            "decompiledFuncCode": "__int64 __fastcall sub_406A20(__int64 a1)\n{\n  int v1; // edx\n  unsigned int v2; // ebp\n\n  v1 = *(_DWORD *)(a1 + 72);\n  v2 = v1 & 4;\n  if ( (v1 & 4) != 0 )\n  {\n    v2 = 0;\n  }\n  else if ( (v1 & 0x200) != 0 )\n  {\n    sub_4069B0(a1, -100, 1);\n  }\n  else\n  {\n    v2 = fchdir(*(_DWORD *)(a1 + 40)) != 0;\n  }\n  sub_4067E0(a1 + 96);\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_406A80",
            "funcStartAddr": "0x406a80",
            "funcEndAddr": "0x406aeb",
            "decompiledFuncCode": "__int64 __fastcall sub_406A80(void **a1, size_t *a2, __int64 a3)\n{\n  void *v4; // rdi\n  size_t v5; // rax\n  void *v6; // rax\n\n  v4 = *a1;\n  v5 = *a2 + a3 + 256;\n  if ( *a2 > v5 )\n  {\n    free(v4);\n    *a1 = 0LL;\n    *__errno_location() = 36;\n    return 0LL;\n  }\n  else\n  {\n    *a2 = v5;\n    v6 = realloc(v4, v5);\n    if ( v6 )\n    {\n      *a1 = v6;\n      return 1LL;\n    }\n    else\n    {\n      free(*a1);\n      *a1 = 0LL;\n      return 0LL;\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_406AF0",
            "funcStartAddr": "0x406af0",
            "funcEndAddr": "0x406b4b",
            "decompiledFuncCode": "bool __fastcall sub_406AF0(__int16 a1, __int64 *a2)\n{\n  __int64 v2; // rax\n  bool result; // al\n  void *v4; // rdi\n\n  if ( (a1 & 0x102) != 0 )\n  {\n    v2 = sub_409F20(31LL, 0LL, sub_4063F0, sub_4063D0, free);\n    *a2 = v2;\n    return v2 != 0;\n  }\n  else\n  {\n    v4 = malloc(0x20uLL);\n    *a2 = (__int64)v4;\n    result = 0;\n    if ( v4 )\n    {\n      sub_409550();\n      return 1;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406B50",
            "funcStartAddr": "0x406b50",
            "funcEndAddr": "0x406b94",
            "decompiledFuncCode": "__int64 __fastcall sub_406B50(int a1, int a2, int a3, __int64 a4, int a5, int a6, char a7)\n{\n  int v8; // edx\n\n  v8 = (a2 << 7) & 0x40000 | (a2 << 13) & 0x20000 | 0x90900;\n  if ( (a2 & 0x200) != 0 )\n    return sub_40AF10(a1, a3, v8, a3, a5, a6, a7);\n  else\n    return sub_4095E0(a3, v8, v8, a3, a5, a6, a7);\n}\n"
        },
        {
            "funcName": "sub_406BA0",
            "funcStartAddr": "0x406ba0",
            "funcEndAddr": "0x406d66",
            "decompiledFuncCode": "__int64 __fastcall sub_406BA0(__int64 a1, __int64 a2, int a3, __int64 a4, int a5, int a6)\n{\n  int v8; // ebp\n  const char *v9; // rbx\n  int v10; // r12d\n  bool v11; // cf\n  bool v12; // zf\n  const char *v13; // rdi\n  const char *v14; // rsi\n  char v15; // r14\n  int v16; // eax\n  int v17; // r12d\n  unsigned int v18; // ebx\n  int *v19; // rax\n  int v20; // r13d\n  int *v21; // rbp\n  char v23; // [rsp+0h] [rbp-D8h]\n  struct stat stat_buf; // [rsp+10h] [rbp-C8h] BYREF\n\n  v8 = a3;\n  v9 = (const char *)a4;\n  v10 = *(_DWORD *)(a1 + 72);\n  v11 = 0;\n  v12 = a4 == 0;\n  if ( !a4 )\n    goto LABEL_12;\n  v13 = \"..\";\n  a4 = 3LL;\n  v14 = v9;\n  do\n  {\n    if ( !a4 )\n      break;\n    v11 = *v14 < (unsigned int)*v13;\n    v12 = *v14++ == *v13++;\n    --a4;\n  }\n  while ( v12 );\n  if ( (!v11 && !v12) == v11 )\n  {\n    if ( (v10 & 4) == 0 )\n    {\n      if ( a3 >= 0 )\n      {\n        v17 = a3;\n        v15 = 1;\n        goto LABEL_15;\n      }\n      if ( (v10 & 0x200) != 0 )\n      {\n        v15 = sub_40A900(a1 + 96);\n        if ( !v15 )\n        {\n          v16 = sub_40A950(a1 + 96);\n          v17 = v16;\n          if ( v16 >= 0 )\n          {\n            v8 = v16;\n            v15 = 1;\n            goto LABEL_15;\n          }\n          v10 = *(_DWORD *)(a1 + 72);\n          v15 = 1;\n        }\n      }\n      else\n      {\n        v15 = 1;\n      }\nLABEL_27:\n      v17 = sub_406B50(*(_DWORD *)(a1 + 44), v10, (int)v9, a4, a5, a6, v23);\n      if ( v17 < 0 )\n        return (unsigned int)-1;\nLABEL_15:\n      v18 = __fxstat(1, v17, &stat_buf);\n      if ( !v18 )\n      {\n        if ( *(_QWORD *)(a2 + 120) == stat_buf.st_dev && *(_QWORD *)(a2 + 128) == stat_buf.st_ino )\n        {\n          if ( (*(_BYTE *)(a1 + 73) & 2) != 0 )\n          {\n            sub_4069B0(a1, v17, v15 ^ 1);\n            return v18;\n          }\n          v18 = fchdir(v17);\n          goto LABEL_20;\n        }\n        *__errno_location() = 2;\n      }\n      v18 = -1;\nLABEL_20:\n      if ( v8 < 0 )\n      {\n        v19 = __errno_location();\n        v20 = *v19;\n        v21 = v19;\n        close(v17);\n        *v21 = v20;\n      }\n      return v18;\n    }\n  }\n  else\n  {\nLABEL_12:\n    if ( (v10 & 4) == 0 )\n    {\n      if ( a3 >= 0 )\n      {\n        v17 = a3;\n        v15 = 0;\n        goto LABEL_15;\n      }\n      v15 = 0;\n      goto LABEL_27;\n    }\n  }\n  if ( (v10 & 0x200) != 0 && a3 >= 0 )\n  {\n    v18 = 0;\n    close(a3);\n  }\n  else\n  {\n    return 0;\n  }\n  return v18;\n}\n"
        },
        {
            "funcName": "sub_406D70",
            "funcStartAddr": "0x406d70",
            "funcEndAddr": "0x406e1f",
            "decompiledFuncCode": "__int64 __fastcall sub_406D70(__int16 a1, _QWORD *a2, __int64 a3)\n{\n  _QWORD *v4; // rbp\n  __int64 v5; // rax\n  __int64 v6; // rdi\n  __int64 v7; // r12\n  __int64 v8; // rax\n  __int64 result; // rax\n\n  if ( (a1 & 0x102) != 0 )\n  {\n    v4 = malloc(0x18uLL);\n    if ( v4 )\n    {\n      v5 = *(_QWORD *)(a3 + 120);\n      v6 = *a2;\n      v4[2] = a3;\n      *v4 = v5;\n      v4[1] = *(_QWORD *)(a3 + 128);\n      v7 = sub_40A6C0(v6, v4);\n      if ( v4 == (_QWORD *)v7 )\n        return 1LL;\n      free(v4);\n      if ( v7 )\n      {\n        v8 = *(_QWORD *)(v7 + 16);\n        *(_WORD *)(a3 + 112) = 2;\n        *(_QWORD *)a3 = v8;\n        return 1LL;\n      }\n    }\n    return 0LL;\n  }\n  else\n  {\n    result = sub_409560(*a2, a3 + 120);\n    if ( !(_BYTE)result )\n      return 1LL;\n    *(_QWORD *)a3 = a3;\n    *(_WORD *)(a3 + 112) = 2;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406E20",
            "funcStartAddr": "0x401e23",
            "funcEndAddr": "0x401e28",
            "decompiledFuncCode": "void __fastcall sub_406E20(__int16 a1, __int64 **a2, _QWORD *a3)\n{\n  __int64 *v3; // rax\n  __int64 *v4; // rcx\n  __int64 *v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9[5]; // [rsp+0h] [rbp-28h] BYREF\n\n  if ( (a1 & 0x102) != 0 )\n  {\n    v5 = *a2;\n    v9[0] = a3[15];\n    v9[1] = a3[16];\n    v6 = (void *)sub_40A700(v5, v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (__int64 *)a3[1];\n  if ( !v3 || v3[11] < 0 )\n    return;\n  v4 = *a2;\n  if ( !(*a2)[2] )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n\nvoid __fastcall sub_406E20(__int16 a1, __int64 **a2, _QWORD *a3)\n{\n  __int64 *v3; // rax\n  __int64 *v4; // rcx\n  __int64 *v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9[5]; // [rsp+0h] [rbp-28h] BYREF\n\n  if ( (a1 & 0x102) != 0 )\n  {\n    v5 = *a2;\n    v9[0] = a3[15];\n    v9[1] = a3[16];\n    v6 = (void *)sub_40A700(v5, v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (__int64 *)a3[1];\n  if ( !v3 || v3[11] < 0 )\n    return;\n  v4 = *a2;\n  if ( !(*a2)[2] )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n"
        },
        {
            "funcName": "sub_406E20",
            "funcStartAddr": "0x401e23",
            "funcEndAddr": "0x401e28",
            "decompiledFuncCode": "void __fastcall sub_406E20(__int16 a1, __int64 **a2, _QWORD *a3)\n{\n  __int64 *v3; // rax\n  __int64 *v4; // rcx\n  __int64 *v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9[5]; // [rsp+0h] [rbp-28h] BYREF\n\n  if ( (a1 & 0x102) != 0 )\n  {\n    v5 = *a2;\n    v9[0] = a3[15];\n    v9[1] = a3[16];\n    v6 = (void *)sub_40A700(v5, v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (__int64 *)a3[1];\n  if ( !v3 || v3[11] < 0 )\n    return;\n  v4 = *a2;\n  if ( !(*a2)[2] )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n\nvoid __fastcall sub_406E20(__int16 a1, __int64 **a2, _QWORD *a3)\n{\n  __int64 *v3; // rax\n  __int64 *v4; // rcx\n  __int64 *v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9[5]; // [rsp+0h] [rbp-28h] BYREF\n\n  if ( (a1 & 0x102) != 0 )\n  {\n    v5 = *a2;\n    v9[0] = a3[15];\n    v9[1] = a3[16];\n    v6 = (void *)sub_40A700(v5, v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (__int64 *)a3[1];\n  if ( !v3 || v3[11] < 0 )\n    return;\n  v4 = *a2;\n  if ( !(*a2)[2] )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n"
        },
        {
            "funcName": "sub_406EC0",
            "funcStartAddr": "0x406ec0",
            "funcEndAddr": "0x407873",
            "decompiledFuncCode": "__int64 __fastcall sub_406EC0(__int64 a1, int a2, __int64 a3, __int64 a4, int a5, int a6)\n{\n  __int64 v7; // r13\n  DIR *v8; // rdi\n  size_t v9; // r8\n  int v10; // r9d\n  int v11; // edi\n  _BYTE *v12; // rax\n  size_t v13; // rbp\n  __int64 v14; // rbx\n  DIR *v15; // r15\n  int *v16; // rax\n  int *v17; // r12\n  struct dirent *v18; // rax\n  struct dirent *v19; // r14\n  size_t v20; // r13\n  char *v21; // r15\n  const void *v22; // rsi\n  __int64 v23; // rax\n  int v24; // eax\n  int d_type; // esi\n  __int64 v26; // rdx\n  __int64 v27; // rax\n  char v28; // al\n  __int64 v29; // rdx\n  _BYTE *v30; // rdx\n  __int64 v31; // r13\n  __int64 v32; // r15\n  _QWORD *v33; // rax\n  __int64 i; // rcx\n  _QWORD *v35; // rdx\n  char *j; // rax\n  char *v37; // rdx\n  char *v38; // rdx\n  int v39; // eax\n  int v40; // ecx\n  int v41; // edi\n  int v42; // eax\n  int v43; // ebx\n  DIR *v44; // rax\n  int v45; // ecx\n  bool v46; // zf\n  int v47; // edi\n  char v48; // r14\n  bool v49; // r12\n  DIR *v50; // rdi\n  __int16 v51; // bp\n  char *v52; // rcx\n  __int64 v53; // r15\n  int v54; // ebx\n  __int64 v56; // rax\n  DIR *v58; // rdi\n  int *v59; // rax\n  int v60; // r12d\n  int *v61; // rbp\n  __fsword_t v62; // rax\n  __int64 v63; // rax\n  __int16 v64; // ax\n  DIR *dirp; // [rsp+8h] [rbp-90h]\n  __int64 v66; // [rsp+10h] [rbp-88h]\n  char *ptr; // [rsp+18h] [rbp-80h]\n  size_t v68; // [rsp+20h] [rbp-78h]\n  __int64 v69; // [rsp+20h] [rbp-78h]\n  __int64 v70; // [rsp+28h] [rbp-70h]\n  __int64 v71; // [rsp+30h] [rbp-68h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-60h]\n  _BYTE *dest; // [rsp+40h] [rbp-58h]\n  __int64 v74; // [rsp+48h] [rbp-50h]\n  DIR *v75; // [rsp+50h] [rbp-48h]\n  char v77; // [rsp+5Eh] [rbp-3Ah]\n  char v78; // [rsp+5Fh] [rbp-39h]\n\n  v7 = *(_QWORD *)a1;\n  v8 = *(DIR **)(*(_QWORD *)a1 + 24LL);\n  v75 = v8;\n  if ( v8 )\n  {\n    if ( dirfd(v8) >= 0 )\n    {\n      if ( !*(_QWORD *)(a1 + 64) )\n      {\n        v72 = 100000LL;\n        v11 = *(_DWORD *)(a1 + 72);\n        v78 = 1;\n        goto LABEL_6;\n      }\n      v72 = -1LL;\n      goto LABEL_5;\n    }\n    closedir(*(DIR **)(v7 + 24));\n    *(_QWORD *)(v7 + 24) = 0LL;\n    if ( a2 == 3 )\n      goto LABEL_130;\n    return 0LL;\n  }\n  v39 = *(_DWORD *)(a1 + 72);\n  v40 = v39 & 0x10;\n  if ( (v39 & 0x10) != 0 )\n  {\n    v40 = 0x20000;\n    if ( (v39 & 1) != 0 )\n      v40 = (*(_QWORD *)(v7 + 88) != 0LL) << 17;\n  }\n  v41 = -100;\n  if ( (v39 & 0x204) == 512 )\n    v41 = *(_DWORD *)(a1 + 44);\n  v42 = sub_40AF10(v41, *(_QWORD *)(v7 + 48), v40 | (v39 << 7) & 0x40000 | 0x90900u, v40, a5, a6);\n  v43 = v42;\n  if ( v42 < 0 )\n  {\nLABEL_117:\n    *(_QWORD *)(v7 + 24) = 0LL;\n    if ( a2 == 3 )\n    {\nLABEL_130:\n      *(_WORD *)(v7 + 112) = 4;\n      *(_DWORD *)(v7 + 64) = *__errno_location();\n    }\n    return 0LL;\n  }\n  v44 = fdopendir(v42);\n  if ( !v44 )\n  {\n    v59 = __errno_location();\n    v60 = *v59;\n    v61 = v59;\n    close(v43);\n    *v61 = v60;\n    goto LABEL_117;\n  }\n  v46 = *(_WORD *)(v7 + 112) == 11;\n  *(_QWORD *)(v7 + 24) = v44;\n  if ( v46 )\n  {\n    *(_WORD *)(v7 + 112) = sub_406450(a1, v7, 0);\n  }\n  else\n  {\n    v47 = *(_DWORD *)(a1 + 72);\n    if ( (v47 & 0x100) != 0 )\n    {\n      sub_406E20(v47, (__int64 **)(a1 + 88), (_QWORD *)v7);\n      sub_406450(a1, v7, 0);\n      if ( !(unsigned __int8)sub_406D70(*(_DWORD *)(a1 + 72), (_QWORD *)(a1 + 88), v7) )\n      {\n        ptr = 0LL;\n        *__errno_location() = 12;\n        return (__int64)ptr;\n      }\n    }\n  }\n  v72 = *(_QWORD *)(a1 + 64) == 0LL ? 100000LL : -1LL;\n  if ( a2 == 2 )\n    goto LABEL_120;\n  if ( (*(_DWORD *)(a1 + 72) & 0x38) == 24 && *(_QWORD *)(v7 + 136) == 2LL && (unsigned int)sub_406940(v7) )\n  {\n    if ( a2 == 3 )\n    {\n      v48 = 0;\n      v49 = 1;\n      goto LABEL_72;\n    }\nLABEL_120:\n    v78 = 0;\n    v11 = *(_DWORD *)(a1 + 72);\n    goto LABEL_6;\n  }\n  v48 = 1;\n  v49 = a2 == 3;\nLABEL_72:\n  if ( (*(_BYTE *)(a1 + 73) & 2) != 0 )\n  {\n    v43 = sub_40B030(v43, 1030, 3, v45, v9, v10);\n    if ( v43 < 0 )\n    {\n      v50 = *(DIR **)(v7 + 24);\n      v51 = *(_WORD *)(v7 + 114) | 1;\n      if ( !v49 || !v48 )\n      {\n        *(_WORD *)(v7 + 114) |= 1u;\n        closedir(v50);\n        v11 = *(_DWORD *)(a1 + 72);\nLABEL_80:\n        *(_QWORD *)(v7 + 24) = 0LL;\n        v78 = 0;\n        goto LABEL_6;\n      }\n      goto LABEL_76;\n    }\n  }\n  if ( (unsigned int)sub_406BA0(a1, v7, v43, 0LL, v9, v10) )\n  {\n    v50 = *(DIR **)(v7 + 24);\n    v51 = *(_WORD *)(v7 + 114) | 1;\n    if ( !v49 || !v48 )\n    {\nLABEL_77:\n      *(_WORD *)(v7 + 114) = v51;\n      closedir(v50);\n      v11 = *(_DWORD *)(a1 + 72);\n      *(_QWORD *)(v7 + 24) = 0LL;\n      if ( (v11 & 0x200) != 0 && v43 >= 0 )\n      {\n        close(v43);\n        v11 = *(_DWORD *)(a1 + 72);\n      }\n      goto LABEL_80;\n    }\nLABEL_76:\n    *(_DWORD *)(v7 + 64) = *__errno_location();\n    goto LABEL_77;\n  }\nLABEL_5:\n  v78 = 1;\n  v11 = *(_DWORD *)(a1 + 72);\nLABEL_6:\n  v66 = *(_QWORD *)(v7 + 72);\n  v74 = v66 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v7 + 56) + v66 - 1) != 47 )\n  {\n    v74 = *(_QWORD *)(v7 + 72);\n    ++v66;\n  }\n  dest = 0LL;\n  if ( (v11 & 4) != 0 )\n  {\n    v12 = (_BYTE *)(*(_QWORD *)(a1 + 32) + v74);\n    *v12 = 47;\n    dest = v12 + 1;\n  }\n  v77 = 0;\n  v13 = 0LL;\n  v68 = *(_QWORD *)(a1 + 48) - v66;\n  v14 = a1;\n  dirp = 0LL;\n  v70 = v7;\n  v71 = *(_QWORD *)(v7 + 88) + 1LL;\n  ptr = 0LL;\n  while ( 1 )\n  {\n    v15 = *(DIR **)(v70 + 24);\n    if ( !v15 )\n    {\n      v31 = v70;\n      v32 = v14;\n      goto LABEL_89;\n    }\n    v16 = __errno_location();\n    *v16 = 0;\n    v17 = v16;\n    v18 = readdir(v15);\n    v19 = v18;\n    if ( !v18 )\n      break;\n    if ( (*(_BYTE *)(v14 + 72) & 0x20) != 0 || v18->d_name[0] != 46 || v18->d_name[1] && *(_WORD *)&v18->d_name[1] != 46 )\n    {\n      v20 = strlen(v18->d_name);\n      v21 = sub_406700(v14, v19->d_name, v20);\n      if ( !v21 )\n        goto LABEL_82;\n      if ( v68 <= v20 )\n      {\n        v69 = *(_QWORD *)(v14 + 32);\n        v28 = sub_406A80((void **)(v14 + 32), (size_t *)(v14 + 48), v74 + v20 + 2);\n        if ( !v28 )\n        {\nLABEL_82:\n          v52 = v21;\n          v53 = v14;\n          v54 = *v17;\n          free(v52);\n          sub_406790(ptr);\n          closedir(*(DIR **)(v70 + 24));\n          *(_QWORD *)(v70 + 24) = 0LL;\n          *(_WORD *)(v70 + 112) = 7;\n          ptr = 0LL;\n          *(_DWORD *)(v53 + 72) |= 0x4000u;\n          *v17 = v54;\n          return (__int64)ptr;\n        }\n        v29 = *(_QWORD *)(v14 + 32);\n        if ( v29 == v69 )\n        {\n          v28 = v77;\n        }\n        else\n        {\n          v30 = (_BYTE *)(v66 + v29);\n          if ( (*(_BYTE *)(v14 + 72) & 4) == 0 )\n            v30 = dest;\n          dest = v30;\n        }\n        v77 = v28;\n        v68 = *(_QWORD *)(v14 + 48) - v66;\n      }\n      v9 = v66 + v20;\n      if ( __CFADD__(v66, v20) )\n      {\n        free(v21);\n        sub_406790(ptr);\n        closedir(*(DIR **)(v70 + 24));\n        *(_QWORD *)(v70 + 24) = 0LL;\n        *(_WORD *)(v70 + 112) = 7;\n        ptr = 0LL;\n        *(_DWORD *)(v14 + 72) |= 0x4000u;\n        *v17 = 36;\n        return (__int64)ptr;\n      }\n      v22 = v21 + 264;\n      *((_QWORD *)v21 + 11) = v71;\n      v23 = *(_QWORD *)v14;\n      *((_QWORD *)v21 + 9) = v9;\n      *((_QWORD *)v21 + 1) = v23;\n      *((_QWORD *)v21 + 16) = v19->d_ino;\n      v24 = *(_DWORD *)(v14 + 72);\n      if ( (v24 & 4) != 0 )\n      {\n        *((_QWORD *)v21 + 6) = *((_QWORD *)v21 + 7);\n        memmove(dest, v22, *((_QWORD *)v21 + 12) + 1LL);\n        v24 = *(_DWORD *)(v14 + 72);\n      }\n      else\n      {\n        *((_QWORD *)v21 + 6) = v22;\n      }\n      if ( *(_QWORD *)(v14 + 64) && (v24 & 0x400) == 0 )\n      {\n        *((_WORD *)v21 + 56) = sub_406450(v14, (__int64)v21, 0);\n      }\n      else\n      {\n        d_type = v19->d_type;\n        v26 = (unsigned int)(d_type - 1);\n        if ( (v24 & 0x18) == 24 && (d_type & 0xFB) != 0 )\n        {\n          *((_WORD *)v21 + 56) = 11;\n          if ( (unsigned int)v26 <= 0xB )\n            *((_DWORD *)v21 + 36) = dword_40D4E0[v26];\n          else\n            *((_DWORD *)v21 + 36) = 0;\n          v27 = 1LL;\n        }\n        else\n        {\n          *((_WORD *)v21 + 56) = 11;\n          if ( (unsigned int)v26 > 0xB )\n            *((_DWORD *)v21 + 36) = 0;\n          else\n            *((_DWORD *)v21 + 36) = dword_40D4E0[v26];\n          v27 = 2LL;\n        }\n        *((_QWORD *)v21 + 21) = v27;\n      }\n      *((_QWORD *)v21 + 2) = 0LL;\n      if ( ptr )\n      {\n        ++v13;\n        *((_QWORD *)dirp + 2) = v21;\n        if ( v13 >= v72 )\n          goto LABEL_39;\n      }\n      else\n      {\n        ptr = v21;\n        if ( ++v13 >= v72 )\n        {\nLABEL_39:\n          v31 = v70;\n          v32 = v14;\n          if ( !v77 )\n            goto LABEL_90;\n          goto LABEL_40;\n        }\n      }\n    }\n    else\n    {\n      v21 = (char *)dirp;\n    }\n    dirp = (DIR *)v21;\n  }\n  v31 = v70;\n  v32 = v14;\n  if ( *v17 )\n  {\n    *(_DWORD *)(v70 + 64) = *v17;\n    *(_WORD *)(v70 + 112) = (v13 | (unsigned __int64)v75) == 0 ? 4 : 7;\n  }\n  v58 = *(DIR **)(v70 + 24);\n  if ( v58 )\n  {\n    closedir(v58);\n    *(_QWORD *)(v70 + 24) = 0LL;\n  }\nLABEL_89:\n  if ( !v77 )\n    goto LABEL_90;\nLABEL_40:\n  v33 = *(_QWORD **)(v32 + 8);\n  for ( i = *(_QWORD *)(v32 + 32); v33; v33 = (_QWORD *)v33[2] )\n  {\n    v35 = (_QWORD *)v33[6];\n    if ( v35 != v33 + 33 )\n      v33[6] = (char *)v35 + i - v33[7];\n    v33[7] = i;\n  }\n  for ( j = ptr; *((__int64 *)j + 11) >= 0; j = v38 )\n  {\n    v37 = (char *)*((_QWORD *)j + 6);\n    if ( v37 != j + 264 )\n      *((_QWORD *)j + 6) = &v37[i - *((_QWORD *)j + 7)];\n    v38 = (char *)*((_QWORD *)j + 2);\n    *((_QWORD *)j + 7) = i;\n    if ( !v38 )\n      v38 = (char *)*((_QWORD *)j + 1);\n  }\nLABEL_90:\n  if ( (*(_BYTE *)(v32 + 72) & 4) != 0 )\n  {\n    if ( *(_QWORD *)(v32 + 48) == v66 || !v13 )\n      --dest;\n    *dest = 0;\n  }\n  if ( v75 || !v78 )\n    goto LABEL_105;\n  if ( a2 != 1 && v13 )\n    goto LABEL_99;\n  if ( !(*(_QWORD *)(v31 + 88)\n       ? (unsigned int)sub_406BA0(v32, *(_QWORD *)(v31 + 8), -1, (__int64)\"..\", v9, v10) != 0\n       : (unsigned int)sub_406A20(v32) != 0) )\n  {\nLABEL_105:\n    if ( !v13 )\n    {\n      if ( a2 == 3 )\n      {\n        v64 = *(_WORD *)(v31 + 112);\n        if ( v64 != 4 && v64 != 7 )\n          *(_WORD *)(v31 + 112) = 6;\n      }\n      sub_406790(ptr);\n      return 0LL;\n    }\nLABEL_99:\n    v56 = *(_QWORD *)(v32 + 64);\n    if ( v13 > 0x2710 )\n    {\n      if ( v56 )\n        return sub_406600((_QWORD *)v32, (__int64)ptr, v13);\n      v62 = sub_406820(v31);\n      if ( v62 != 26985 && v62 != 16914836 )\n      {\n        *(_QWORD *)(v32 + 64) = sub_406420;\n        v63 = sub_406600((_QWORD *)v32, (__int64)ptr, v13);\n        *(_QWORD *)(v32 + 64) = 0LL;\n        return v63;\n      }\n      v56 = *(_QWORD *)(v32 + 64);\n    }\n    if ( !v56 || v13 == 1 )\n      return (__int64)ptr;\n    return sub_406600((_QWORD *)v32, (__int64)ptr, v13);\n  }\n  *(_WORD *)(v31 + 112) = 7;\n  *(_DWORD *)(v32 + 72) |= 0x4000u;\n  sub_406790(ptr);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "fts_open",
            "funcStartAddr": "0x407880",
            "funcEndAddr": "0x407c19",
            "decompiledFuncCode": "__int64 __fastcall fts_open(const char **a1, unsigned int a2, __int64 a3)\n{\n  _QWORD *v5; // rax\n  __int64 v6; // rbx\n  const char *v7; // rdi\n  const char **v8; // r15\n  size_t v9; // r12\n  size_t v10; // rax\n  __int64 v11; // rdx\n  const char *v12; // r15\n  char *v13; // rcx\n  void *v14; // r12\n  size_t v15; // rbp\n  char *v16; // rax\n  char *v17; // r15\n  size_t v18; // rax\n  char *v19; // rax\n  int v20; // edi\n  __int64 v21; // rcx\n  int v22; // r8d\n  int v23; // r9d\n  int v24; // esi\n  void *v26; // rdi\n  unsigned int v27; // eax\n  __int64 v28; // rax\n  int v29; // eax\n  char v30; // [rsp+0h] [rbp-58h]\n  char *ptr; // [rsp+8h] [rbp-50h]\n  char v32; // [rsp+16h] [rbp-42h]\n  _BYTE v33[9]; // [rsp+17h] [rbp-41h]\n\n  if ( (a2 & 0xFFFFE000) != 0 || (a2 & 0x204) == 516 || (a2 & 0x12) == 0 )\n  {\n    v6 = 0LL;\n    *__errno_location() = 22;\n    return v6;\n  }\n  v5 = calloc(0x80uLL, 1uLL);\n  v6 = (__int64)v5;\n  if ( v5 )\n  {\n    v5[8] = a3;\n    if ( (a2 & 2) != 0 )\n    {\n      v27 = a2;\n      BYTE1(v27) = BYTE1(a2) & 0xFD;\n      *(_DWORD *)(v6 + 72) = v27 | 4;\n    }\n    else\n    {\n      *((_DWORD *)v5 + 18) = a2;\n    }\n    v7 = *a1;\n    *(_DWORD *)(v6 + 44) = -100;\n    if ( v7 )\n    {\n      v8 = a1;\n      v9 = 0LL;\n      do\n      {\n        v10 = strlen(v7);\n        if ( v9 < v10 )\n          v9 = v10;\n        v7 = *++v8;\n      }\n      while ( *v8 );\n      v11 = v9 + 1;\n      if ( v9 + 1 < 0x1000 )\n        v11 = 4096LL;\n    }\n    else\n    {\n      v11 = 4096LL;\n    }\n    v32 = sub_406A80((void **)(v6 + 32), (size_t *)(v6 + 48), v11);\n    if ( !v32 )\n      goto LABEL_44;\n    v12 = *a1;\n    if ( *a1 )\n    {\n      v13 = sub_406700(v6, \"\", 0LL);\n      ptr = v13;\n      if ( !v13 )\n      {\nLABEL_43:\n        free(*(void **)(v6 + 32));\nLABEL_44:\n        v26 = (void *)v6;\n        v6 = 0LL;\n        free(v26);\n        return v6;\n      }\n      v12 = *a1;\n      *((_QWORD *)v13 + 11) = -1LL;\n      *((_QWORD *)v13 + 13) = -1LL;\n      if ( !a3 )\n        goto LABEL_19;\n    }\n    else\n    {\n      ptr = 0LL;\n      if ( !a3 )\n      {\nLABEL_47:\n        v14 = 0LL;\nLABEL_36:\n        v19 = sub_406700(v6, \"\", 0LL);\n        *(_QWORD *)v6 = v19;\n        if ( v19 )\n        {\n          *((_QWORD *)v19 + 2) = v14;\n          v20 = *(_DWORD *)(v6 + 72);\n          *((_WORD *)v19 + 56) = 9;\n          if ( sub_406AF0(v20, (__int64 *)(v6 + 88)) )\n          {\n            v24 = *(_DWORD *)(v6 + 72);\n            if ( (v24 & 0x204) == 0 )\n            {\n              v29 = sub_406B50(*(_DWORD *)(v6 + 44), v24, 4243255, v21, v22, v23, v30);\n              *(_DWORD *)(v6 + 40) = v29;\n              if ( v29 < 0 )\n                *(_DWORD *)(v6 + 72) |= 4u;\n            }\n            sub_40A8E0(v6 + 96, 0xFFFFFFFFLL);\n            return v6;\n          }\n        }\nLABEL_42:\n        sub_406790(v14);\n        free(ptr);\n        goto LABEL_43;\n      }\n    }\n    v32 = (*(_DWORD *)(v6 + 72) & 0x400) != 0;\nLABEL_19:\n    if ( v12 )\n    {\n      v33[8] = 0;\n      v14 = 0LL;\n      v15 = 0LL;\n      *(_QWORD *)v33 = ((unsigned __int8)(a2 >> 12) ^ 1) & 1;\n      while ( 1 )\n      {\n        v18 = strlen(v12);\n        if ( v18 > 2 && v33[0] && v12[v18 - 1] == 47 )\n        {\n          do\n          {\n            if ( v12[v18 - 2] != 47 )\n              break;\n            --v18;\n          }\n          while ( v18 != 1 );\n        }\n        v16 = sub_406700(v6, v12, v18);\n        v17 = v16;\n        if ( !v16 )\n          goto LABEL_42;\n        *((_QWORD *)v16 + 11) = 0LL;\n        *((_QWORD *)v16 + 1) = ptr;\n        *((_QWORD *)v16 + 6) = v16 + 264;\n        if ( v14 )\n        {\n          if ( v32 )\n            break;\n        }\n        *((_WORD *)v16 + 56) = sub_406450(v6, (__int64)v16, 0);\n        if ( a3 )\n          goto LABEL_25;\n        *((_QWORD *)v17 + 2) = 0LL;\n        if ( v14 )\n          goto LABEL_52;\n        *(_QWORD *)&v33[1] = v17;\n        v14 = v17;\nLABEL_26:\n        v12 = a1[++v15];\n        if ( !v12 )\n        {\n          if ( a3 && v15 > 1 )\n            v14 = (void *)sub_406600((_QWORD *)v6, (__int64)v14, v15);\n          goto LABEL_36;\n        }\n      }\n      *((_QWORD *)v16 + 21) = 2LL;\n      *((_WORD *)v16 + 56) = 11;\n      if ( !a3 )\n      {\n        *((_QWORD *)v16 + 2) = 0LL;\nLABEL_52:\n        v28 = *(_QWORD *)&v33[1];\n        *(_QWORD *)&v33[1] = v17;\n        *(_QWORD *)(v28 + 16) = v17;\n        goto LABEL_26;\n      }\nLABEL_25:\n      *((_QWORD *)v17 + 2) = v14;\n      v14 = v17;\n      goto LABEL_26;\n    }\n    goto LABEL_47;\n  }\n  return v6;\n}\n"
        },
        {
            "funcName": "fts_close",
            "funcStartAddr": "0x407c20",
            "funcEndAddr": "0x407d99",
            "decompiledFuncCode": "__int64 __fastcall fts_close(void *ptr)\n{\n  __int64 *v2; // rdi\n  void *v3; // rdi\n  int v4; // eax\n  int v5; // edi\n  unsigned int v6; // ebx\n  void *v7; // rdi\n  void *v8; // rdi\n  int *v10; // r12\n  __int64 *v11; // rbx\n\n  v2 = *(__int64 **)ptr;\n  if ( v2 )\n  {\n    if ( v2[11] >= 0 )\n    {\n      do\n      {\n        while ( 1 )\n        {\n          v11 = (__int64 *)v2[2];\n          if ( !v11 )\n            break;\n          free(v2);\n          v2 = v11;\n          if ( v11[11] < 0 )\n            goto LABEL_7;\n        }\n        v11 = (__int64 *)v2[1];\n        free(v2);\n        v2 = v11;\n      }\n      while ( v11[11] >= 0 );\n    }\n    else\n    {\n      v11 = v2;\n    }\nLABEL_7:\n    free(v11);\n  }\n  v3 = (void *)*((_QWORD *)ptr + 1);\n  if ( v3 )\n    sub_406790(v3);\n  free(*((void **)ptr + 2));\n  free(*((void **)ptr + 4));\n  v4 = *((_DWORD *)ptr + 18);\n  if ( (v4 & 0x200) != 0 )\n  {\n    v5 = *((_DWORD *)ptr + 11);\n    if ( v5 >= 0 && close(v5) )\n    {\n      v6 = *__errno_location();\n      goto LABEL_13;\n    }\nLABEL_12:\n    v6 = 0;\n    goto LABEL_13;\n  }\n  if ( (v4 & 4) != 0 )\n    goto LABEL_12;\n  if ( !fchdir(*((_DWORD *)ptr + 10)) )\n  {\n    if ( !close(*((_DWORD *)ptr + 10)) )\n      goto LABEL_12;\n    v10 = __errno_location();\n    goto LABEL_30;\n  }\n  v10 = __errno_location();\n  v6 = *v10;\n  if ( close(*((_DWORD *)ptr + 10)) && !v6 )\nLABEL_30:\n    v6 = *v10;\nLABEL_13:\n  sub_4067E0((__int64)ptr + 96);\n  v7 = (void *)*((_QWORD *)ptr + 10);\n  if ( v7 )\n    sub_40A160(v7);\n  v8 = (void *)*((_QWORD *)ptr + 11);\n  if ( (*((_DWORD *)ptr + 18) & 0x102) != 0 )\n  {\n    if ( v8 )\n      sub_40A160(v8);\n  }\n  else\n  {\n    free(v8);\n  }\n  free(ptr);\n  if ( v6 )\n  {\n    *__errno_location() = v6;\n    return (unsigned int)-1;\n  }\n  return v6;\n}\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "0x401e28",
            "funcEndAddr": "0x401e2d",
            "decompiledFuncCode": "__int64 __fastcall fts_read(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6)\n{\n  __int64 v6; // rbp\n  __int64 v7; // rdx\n  __int16 v8; // ax\n  __int64 v10; // rcx\n  __int16 v11; // ax\n  __int64 v12; // rbx\n  int v13; // r8d\n  int v14; // r9d\n  __int16 v15; // ax\n  int v16; // edi\n  void *v18; // rdi\n  int *v19; // rax\n  _QWORD *v20; // rax\n  void *v21; // rdi\n  int v22; // edi\n  void *v23; // rdi\n  __int64 v24; // rdx\n  void *v25; // rdi\n  char *v26; // rax\n  const void *v27; // r13\n  size_t v28; // r14\n  __int64 v29; // rax\n  int v30; // edi\n  __int16 v31; // ax\n  __int64 v32; // rcx\n  __int64 v33; // rdx\n  __int64 v34; // rax\n  _BYTE *v35; // rax\n  __int16 v36; // ax\n  __int64 v37; // rcx\n  int v38; // r8d\n  int v39; // r9d\n  __int64 v40; // rax\n  int v41; // edi\n  int v42; // eax\n  int v43; // edi\n  __int64 v44; // rbp\n  int v45; // edx\n  __int64 v46; // rcx\n  __int64 v47; // rax\n  __int64 v48; // rdx\n  __int16 v49; // ax\n  __int64 v50; // rcx\n  int v51; // r8d\n  int v52; // r9d\n  int v53; // esi\n  int v54; // esi\n  int v55; // eax\n  int v56; // eax\n  int v57; // eax\n  int v58; // eax\n  char v59; // [rsp+0h] [rbp-28h]\n\n  v6 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v7 = *(unsigned int *)(a1 + 72);\n  if ( (v7 & 0x4000) != 0 )\n    return 0LL;\n  v8 = *(_WORD *)(v6 + 116);\n  *(_WORD *)(v6 + 116) = 3;\n  if ( v8 == 1 )\n  {\n    *(_WORD *)(v6 + 112) = sub_406450(a1, v6, 0);\n    return v6;\n  }\n  v10 = *(unsigned __int16 *)(v6 + 112);\n  if ( v8 != 2 )\n  {\n    if ( (_WORD)v10 != 1 )\n      goto LABEL_9;\n    if ( v8 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v10 - 12) <= 1u )\n  {\n    v36 = sub_406450(a1, v6, 1);\n    *(_WORD *)(v6 + 112) = v36;\n    if ( v36 == 1 )\n    {\n      v53 = *(_DWORD *)(a1 + 72);\n      if ( (v53 & 4) == 0 )\n      {\n        v56 = sub_406B50(*(_DWORD *)(a1 + 44), v53, 4243255, v37, v38, v39, v59);\n        *(_DWORD *)(v6 + 68) = v56;\n        if ( v56 >= 0 )\n        {\n          *(_WORD *)(v6 + 114) |= 2u;\n          v31 = *(_WORD *)(v6 + 112);\n          v12 = v6;\n          goto LABEL_51;\n        }\n        v57 = *__errno_location();\n        *(_WORD *)(v6 + 112) = 7;\n        *(_DWORD *)(v6 + 64) = v57;\n        *(_QWORD *)a1 = v6;\n        return v6;\n      }\n      *(_QWORD *)a1 = v6;\n      v12 = v6;\nLABEL_53:\n      if ( *(_QWORD *)(v12 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v6;\n    if ( v36 != 11 )\n      return v6;\n    v12 = v6;\nLABEL_60:\n    v40 = *(_QWORD *)(v12 + 168);\n    if ( v40 != 2 )\n    {\n      if ( v40 == 1 )\n        return v12;\n      goto LABEL_117;\n    }\n    v44 = *(_QWORD *)(v12 + 8);\n    if ( !*(_QWORD *)(v44 + 104)\n      && (*(_DWORD *)(a1 + 72) & 0x18) == 24\n      && (unsigned int)sub_406940(*(_QWORD *)(v12 + 8)) == 2 )\n    {\n      v31 = *(_WORD *)(v12 + 112);\n      goto LABEL_52;\n    }\n    v31 = sub_406450(a1, v12, 0);\n    v45 = *(_DWORD *)(v12 + 144);\n    *(_WORD *)(v12 + 112) = v31;\n    if ( (v45 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v12 + 88) )\n    {\n      v46 = *(_QWORD *)(v44 + 104);\n      if ( (unsigned __int64)(v46 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v44 + 104) = v46 - 1;\n      if ( v31 != 1 )\n        return v12;\nLABEL_55:\n      v6 = v12;\n      if ( !(unsigned __int8)sub_406D70(*(_DWORD *)(a1 + 72), (_QWORD *)(a1 + 88), v12) )\n      {\n        v6 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v6;\n    }\n    if ( v31 != 1 )\n      return v12;\nLABEL_54:\n    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v12 + 120);\n    goto LABEL_55;\n  }\n  if ( (_WORD)v10 == 1 )\n  {\nLABEL_24:\n    if ( (v7 & 0x40) != 0 && *(_QWORD *)(v6 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( (*(_BYTE *)(v6 + 114) & 2) != 0 )\n        close(*(_DWORD *)(v6 + 68));\n      v21 = *(void **)(a1 + 8);\n      if ( v21 )\n      {\n        sub_406790(v21);\n        *(_QWORD *)(a1 + 8) = 0LL;\n      }\n      v22 = *(_DWORD *)(a1 + 72);\n      *(_WORD *)(v6 + 112) = 6;\n      sub_406E20(v22, (__int64 **)(a1 + 88), (_QWORD *)v6);\n      return v6;\n    }\n    v18 = *(void **)(a1 + 8);\n    if ( v18 )\n    {\n      if ( (v7 & 0x2000) == 0 )\n      {\n        if ( (unsigned int)sub_406BA0(a1, v6, -1, *(_QWORD *)(v6 + 48), a5, a6) )\n        {\n          v19 = __errno_location();\n          v12 = *(_QWORD *)(a1 + 8);\n          LODWORD(v19) = *v19;\n          *(_WORD *)(v6 + 114) |= 1u;\n          *(_DWORD *)(v6 + 64) = (_DWORD)v19;\n          if ( v12 )\n          {\n            v20 = (_QWORD *)v12;\n            do\n            {\n              v20[6] = *(_QWORD *)(v20[1] + 48LL);\n              v20 = (_QWORD *)v20[2];\n            }\n            while ( v20 );\n          }\n        }\n        else\n        {\n          v12 = *(_QWORD *)(a1 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v7) &= ~0x20u;\n      *(_DWORD *)(a1 + 72) = v7;\n      sub_406790(v18);\n      *(_QWORD *)(a1 + 8) = 0LL;\n    }\n    v12 = sub_406EC0(a1, 3, v7, v10, a5, a6);\n    *(_QWORD *)(a1 + 8) = v12;\n    if ( v12 )\n    {\nLABEL_32:\n      *(_QWORD *)(a1 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v41 = *(_DWORD *)(a1 + 72);\n    if ( (v41 & 0x4000) == 0 )\n    {\n      if ( *(_DWORD *)(v6 + 64) && *(_WORD *)(v6 + 112) != 4 )\n        *(_WORD *)(v6 + 112) = 7;\n      sub_406E20(v41, (__int64 **)(a1 + 88), (_QWORD *)v6);\n      return v6;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v12 = *(_QWORD *)(v6 + 16);\n    if ( !v12 )\n    {\n      v12 = *(_QWORD *)(v6 + 8);\n      if ( *(_QWORD *)(v12 + 24) )\n      {\n        v47 = *(_QWORD *)(v12 + 72);\n        v48 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v12;\n        *(_BYTE *)(v48 + v47) = 0;\n        v12 = sub_406EC0(a1, 3, v48, v10, a5, a6);\n        if ( v12 )\n        {\n          free((void *)v6);\n          goto LABEL_48;\n        }\n        if ( (*(_BYTE *)(a1 + 73) & 0x40) != 0 )\n          return 0LL;\n        v12 = *(_QWORD *)(v6 + 8);\n      }\n      *(_QWORD *)a1 = v12;\n      free((void *)v6);\n      if ( *(_QWORD *)(v12 + 88) == -1LL )\n      {\n        v6 = 0LL;\n        free((void *)v12);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v6;\n      }\n      if ( *(_WORD *)(v12 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v12 + 72)) = 0;\n        if ( *(_QWORD *)(v12 + 88) )\n        {\n          v15 = *(_WORD *)(v12 + 114);\n          if ( (v15 & 2) != 0 )\n          {\n            v42 = *(_DWORD *)(a1 + 72);\n            v43 = *(_DWORD *)(v12 + 68);\n            if ( (v42 & 4) == 0 )\n            {\n              if ( (v42 & 0x200) != 0 )\n              {\n                sub_4069B0(a1, v43, 1);\n                v43 = *(_DWORD *)(v12 + 68);\n              }\n              else\n              {\n                if ( fchdir(v43) )\n                {\n                  *(_DWORD *)(v12 + 64) = *__errno_location();\n                  *(_DWORD *)(a1 + 72) |= 0x4000u;\n                }\n                v43 = *(_DWORD *)(v12 + 68);\n              }\n            }\n            close(v43);\n          }\n          else if ( (v15 & 1) == 0 && (unsigned int)sub_406BA0(a1, *(_QWORD *)(v12 + 8), -1, (__int64)\"..\", v13, v14) )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_406A20(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v12 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v12 + 112) == 2 )\n            return 0LL;\n          v16 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v12 + 64) )\n          {\n            *(_WORD *)(v12 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v12 + 112) = 6;\n            sub_406E20(v16, (__int64 **)(a1 + 88), (_QWORD *)v12);\n            v16 = *(_DWORD *)(a1 + 72);\n          }\nLABEL_19:\n          if ( (v16 & 0x4000) != 0 )\n            return 0LL;\n          return v12;\n        }\n        v16 = *(_DWORD *)(a1 + 72);\n        if ( *(_WORD *)(v12 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v12;\n    free((void *)v6);\n    if ( !*(_QWORD *)(v12 + 88) )\n    {\n      if ( !(unsigned int)sub_406A20(a1) )\n      {\n        v23 = *(void **)(a1 + 88);\n        if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n        {\n          if ( v23 )\n            sub_40A160(v23);\n        }\n        else\n        {\n          free(v23);\n        }\n        v24 = *(_QWORD *)(v12 + 96);\n        v25 = *(void **)(a1 + 32);\n        *(_QWORD *)(v12 + 72) = v24;\n        memmove(v25, (const void *)(v12 + 264), v24 + 1);\n        v26 = strrchr((const char *)(v12 + 264), 47);\n        if ( v26 && ((char *)(v12 + 264) != v26 || *(_BYTE *)(v12 + 265)) )\n        {\n          v27 = v26 + 1;\n          v28 = strlen(v26 + 1);\n          memmove((void *)(v12 + 264), v27, v28 + 1);\n          *(_QWORD *)(v12 + 96) = v28;\n        }\n        v29 = *(_QWORD *)(a1 + 32);\n        v30 = *(_DWORD *)(a1 + 72);\n        *(_QWORD *)(v12 + 56) = v29;\n        *(_QWORD *)(v12 + 48) = v29;\n        sub_406AF0(v30, (__int64 *)(a1 + 88));\n        v31 = *(_WORD *)(v12 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v11 = *(_WORD *)(v12 + 116);\n    v6 = v12;\n  }\n  while ( v11 == 4 );\n  if ( v11 == 2 )\n  {\n    v49 = sub_406450(a1, v12, 1);\n    *(_WORD *)(v12 + 112) = v49;\n    if ( v49 == 1 )\n    {\n      v54 = *(_DWORD *)(a1 + 72);\n      if ( (v54 & 4) == 0 )\n      {\n        v55 = sub_406B50(*(_DWORD *)(a1 + 44), v54, 4243255, v50, v51, v52, v59);\n        *(_DWORD *)(v12 + 68) = v55;\n        if ( v55 < 0 )\n        {\n          v58 = *__errno_location();\n          *(_WORD *)(v12 + 112) = 7;\n          *(_DWORD *)(v12 + 64) = v58;\n        }\n        else\n        {\n          *(_WORD *)(v12 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v12 + 116) = 3;\n  }\nLABEL_48:\n  v32 = *(_QWORD *)(v12 + 8);\n  v33 = *(_QWORD *)(v32 + 72);\n  v34 = v33 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v32 + 56) + v33 - 1) != 47 )\n    v34 = *(_QWORD *)(v32 + 72);\n  v35 = (_BYTE *)(*(_QWORD *)(a1 + 32) + v34);\n  *v35 = 47;\n  memmove(v35 + 1, (const void *)(v12 + 264), *(_QWORD *)(v12 + 96) + 1LL);\n  v31 = *(_WORD *)(v12 + 112);\nLABEL_51:\n  *(_QWORD *)a1 = v12;\n  if ( v31 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v6 = v12;\n  if ( v31 == 1 )\n    goto LABEL_53;\n  return v6;\n}\n\n__int64 __fastcall fts_read(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6)\n{\n  __int64 v6; // rbp\n  __int64 v7; // rdx\n  __int16 v8; // ax\n  __int64 v10; // rcx\n  __int16 v11; // ax\n  __int64 v12; // rbx\n  int v13; // r8d\n  int v14; // r9d\n  __int16 v15; // ax\n  int v16; // edi\n  void *v18; // rdi\n  int *v19; // rax\n  _QWORD *v20; // rax\n  void *v21; // rdi\n  int v22; // edi\n  void *v23; // rdi\n  __int64 v24; // rdx\n  void *v25; // rdi\n  char *v26; // rax\n  const void *v27; // r13\n  size_t v28; // r14\n  __int64 v29; // rax\n  int v30; // edi\n  __int16 v31; // ax\n  __int64 v32; // rcx\n  __int64 v33; // rdx\n  __int64 v34; // rax\n  _BYTE *v35; // rax\n  __int16 v36; // ax\n  __int64 v37; // rcx\n  int v38; // r8d\n  int v39; // r9d\n  __int64 v40; // rax\n  int v41; // edi\n  int v42; // eax\n  int v43; // edi\n  __int64 v44; // rbp\n  int v45; // edx\n  __int64 v46; // rcx\n  __int64 v47; // rax\n  __int64 v48; // rdx\n  __int16 v49; // ax\n  __int64 v50; // rcx\n  int v51; // r8d\n  int v52; // r9d\n  int v53; // esi\n  int v54; // esi\n  int v55; // eax\n  int v56; // eax\n  int v57; // eax\n  int v58; // eax\n  char v59; // [rsp+0h] [rbp-28h]\n\n  v6 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v7 = *(unsigned int *)(a1 + 72);\n  if ( (v7 & 0x4000) != 0 )\n    return 0LL;\n  v8 = *(_WORD *)(v6 + 116);\n  *(_WORD *)(v6 + 116) = 3;\n  if ( v8 == 1 )\n  {\n    *(_WORD *)(v6 + 112) = sub_406450(a1, v6, 0);\n    return v6;\n  }\n  v10 = *(unsigned __int16 *)(v6 + 112);\n  if ( v8 != 2 )\n  {\n    if ( (_WORD)v10 != 1 )\n      goto LABEL_9;\n    if ( v8 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v10 - 12) <= 1u )\n  {\n    v36 = sub_406450(a1, v6, 1);\n    *(_WORD *)(v6 + 112) = v36;\n    if ( v36 == 1 )\n    {\n      v53 = *(_DWORD *)(a1 + 72);\n      if ( (v53 & 4) == 0 )\n      {\n        v56 = sub_406B50(*(_DWORD *)(a1 + 44), v53, 4243255, v37, v38, v39, v59);\n        *(_DWORD *)(v6 + 68) = v56;\n        if ( v56 >= 0 )\n        {\n          *(_WORD *)(v6 + 114) |= 2u;\n          v31 = *(_WORD *)(v6 + 112);\n          v12 = v6;\n          goto LABEL_51;\n        }\n        v57 = *__errno_location();\n        *(_WORD *)(v6 + 112) = 7;\n        *(_DWORD *)(v6 + 64) = v57;\n        *(_QWORD *)a1 = v6;\n        return v6;\n      }\n      *(_QWORD *)a1 = v6;\n      v12 = v6;\nLABEL_53:\n      if ( *(_QWORD *)(v12 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v6;\n    if ( v36 != 11 )\n      return v6;\n    v12 = v6;\nLABEL_60:\n    v40 = *(_QWORD *)(v12 + 168);\n    if ( v40 != 2 )\n    {\n      if ( v40 == 1 )\n        return v12;\n      goto LABEL_117;\n    }\n    v44 = *(_QWORD *)(v12 + 8);\n    if ( !*(_QWORD *)(v44 + 104)\n      && (*(_DWORD *)(a1 + 72) & 0x18) == 24\n      && (unsigned int)sub_406940(*(_QWORD *)(v12 + 8)) == 2 )\n    {\n      v31 = *(_WORD *)(v12 + 112);\n      goto LABEL_52;\n    }\n    v31 = sub_406450(a1, v12, 0);\n    v45 = *(_DWORD *)(v12 + 144);\n    *(_WORD *)(v12 + 112) = v31;\n    if ( (v45 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v12 + 88) )\n    {\n      v46 = *(_QWORD *)(v44 + 104);\n      if ( (unsigned __int64)(v46 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v44 + 104) = v46 - 1;\n      if ( v31 != 1 )\n        return v12;\nLABEL_55:\n      v6 = v12;\n      if ( !(unsigned __int8)sub_406D70(*(_DWORD *)(a1 + 72), (_QWORD *)(a1 + 88), v12) )\n      {\n        v6 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v6;\n    }\n    if ( v31 != 1 )\n      return v12;\nLABEL_54:\n    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v12 + 120);\n    goto LABEL_55;\n  }\n  if ( (_WORD)v10 == 1 )\n  {\nLABEL_24:\n    if ( (v7 & 0x40) != 0 && *(_QWORD *)(v6 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( (*(_BYTE *)(v6 + 114) & 2) != 0 )\n        close(*(_DWORD *)(v6 + 68));\n      v21 = *(void **)(a1 + 8);\n      if ( v21 )\n      {\n        sub_406790(v21);\n        *(_QWORD *)(a1 + 8) = 0LL;\n      }\n      v22 = *(_DWORD *)(a1 + 72);\n      *(_WORD *)(v6 + 112) = 6;\n      sub_406E20(v22, (__int64 **)(a1 + 88), (_QWORD *)v6);\n      return v6;\n    }\n    v18 = *(void **)(a1 + 8);\n    if ( v18 )\n    {\n      if ( (v7 & 0x2000) == 0 )\n      {\n        if ( (unsigned int)sub_406BA0(a1, v6, -1, *(_QWORD *)(v6 + 48), a5, a6) )\n        {\n          v19 = __errno_location();\n          v12 = *(_QWORD *)(a1 + 8);\n          LODWORD(v19) = *v19;\n          *(_WORD *)(v6 + 114) |= 1u;\n          *(_DWORD *)(v6 + 64) = (_DWORD)v19;\n          if ( v12 )\n          {\n            v20 = (_QWORD *)v12;\n            do\n            {\n              v20[6] = *(_QWORD *)(v20[1] + 48LL);\n              v20 = (_QWORD *)v20[2];\n            }\n            while ( v20 );\n          }\n        }\n        else\n        {\n          v12 = *(_QWORD *)(a1 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v7) &= ~0x20u;\n      *(_DWORD *)(a1 + 72) = v7;\n      sub_406790(v18);\n      *(_QWORD *)(a1 + 8) = 0LL;\n    }\n    v12 = sub_406EC0(a1, 3, v7, v10, a5, a6);\n    *(_QWORD *)(a1 + 8) = v12;\n    if ( v12 )\n    {\nLABEL_32:\n      *(_QWORD *)(a1 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v41 = *(_DWORD *)(a1 + 72);\n    if ( (v41 & 0x4000) == 0 )\n    {\n      if ( *(_DWORD *)(v6 + 64) && *(_WORD *)(v6 + 112) != 4 )\n        *(_WORD *)(v6 + 112) = 7;\n      sub_406E20(v41, (__int64 **)(a1 + 88), (_QWORD *)v6);\n      return v6;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v12 = *(_QWORD *)(v6 + 16);\n    if ( !v12 )\n    {\n      v12 = *(_QWORD *)(v6 + 8);\n      if ( *(_QWORD *)(v12 + 24) )\n      {\n        v47 = *(_QWORD *)(v12 + 72);\n        v48 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v12;\n        *(_BYTE *)(v48 + v47) = 0;\n        v12 = sub_406EC0(a1, 3, v48, v10, a5, a6);\n        if ( v12 )\n        {\n          free((void *)v6);\n          goto LABEL_48;\n        }\n        if ( (*(_BYTE *)(a1 + 73) & 0x40) != 0 )\n          return 0LL;\n        v12 = *(_QWORD *)(v6 + 8);\n      }\n      *(_QWORD *)a1 = v12;\n      free((void *)v6);\n      if ( *(_QWORD *)(v12 + 88) == -1LL )\n      {\n        v6 = 0LL;\n        free((void *)v12);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v6;\n      }\n      if ( *(_WORD *)(v12 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v12 + 72)) = 0;\n        if ( *(_QWORD *)(v12 + 88) )\n        {\n          v15 = *(_WORD *)(v12 + 114);\n          if ( (v15 & 2) != 0 )\n          {\n            v42 = *(_DWORD *)(a1 + 72);\n            v43 = *(_DWORD *)(v12 + 68);\n            if ( (v42 & 4) == 0 )\n            {\n              if ( (v42 & 0x200) != 0 )\n              {\n                sub_4069B0(a1, v43, 1);\n                v43 = *(_DWORD *)(v12 + 68);\n              }\n              else\n              {\n                if ( fchdir(v43) )\n                {\n                  *(_DWORD *)(v12 + 64) = *__errno_location();\n                  *(_DWORD *)(a1 + 72) |= 0x4000u;\n                }\n                v43 = *(_DWORD *)(v12 + 68);\n              }\n            }\n            close(v43);\n          }\n          else if ( (v15 & 1) == 0 && (unsigned int)sub_406BA0(a1, *(_QWORD *)(v12 + 8), -1, (__int64)\"..\", v13, v14) )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_406A20(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v12 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v12 + 112) == 2 )\n            return 0LL;\n          v16 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v12 + 64) )\n          {\n            *(_WORD *)(v12 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v12 + 112) = 6;\n            sub_406E20(v16, (__int64 **)(a1 + 88), (_QWORD *)v12);\n            v16 = *(_DWORD *)(a1 + 72);\n          }\nLABEL_19:\n          if ( (v16 & 0x4000) != 0 )\n            return 0LL;\n          return v12;\n        }\n        v16 = *(_DWORD *)(a1 + 72);\n        if ( *(_WORD *)(v12 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v12;\n    free((void *)v6);\n    if ( !*(_QWORD *)(v12 + 88) )\n    {\n      if ( !(unsigned int)sub_406A20(a1) )\n      {\n        v23 = *(void **)(a1 + 88);\n        if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n        {\n          if ( v23 )\n            sub_40A160(v23);\n        }\n        else\n        {\n          free(v23);\n        }\n        v24 = *(_QWORD *)(v12 + 96);\n        v25 = *(void **)(a1 + 32);\n        *(_QWORD *)(v12 + 72) = v24;\n        memmove(v25, (const void *)(v12 + 264), v24 + 1);\n        v26 = strrchr((const char *)(v12 + 264), 47);\n        if ( v26 && ((char *)(v12 + 264) != v26 || *(_BYTE *)(v12 + 265)) )\n        {\n          v27 = v26 + 1;\n          v28 = strlen(v26 + 1);\n          memmove((void *)(v12 + 264), v27, v28 + 1);\n          *(_QWORD *)(v12 + 96) = v28;\n        }\n        v29 = *(_QWORD *)(a1 + 32);\n        v30 = *(_DWORD *)(a1 + 72);\n        *(_QWORD *)(v12 + 56) = v29;\n        *(_QWORD *)(v12 + 48) = v29;\n        sub_406AF0(v30, (__int64 *)(a1 + 88));\n        v31 = *(_WORD *)(v12 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v11 = *(_WORD *)(v12 + 116);\n    v6 = v12;\n  }\n  while ( v11 == 4 );\n  if ( v11 == 2 )\n  {\n    v49 = sub_406450(a1, v12, 1);\n    *(_WORD *)(v12 + 112) = v49;\n    if ( v49 == 1 )\n    {\n      v54 = *(_DWORD *)(a1 + 72);\n      if ( (v54 & 4) == 0 )\n      {\n        v55 = sub_406B50(*(_DWORD *)(a1 + 44), v54, 4243255, v50, v51, v52, v59);\n        *(_DWORD *)(v12 + 68) = v55;\n        if ( v55 < 0 )\n        {\n          v58 = *__errno_location();\n          *(_WORD *)(v12 + 112) = 7;\n          *(_DWORD *)(v12 + 64) = v58;\n        }\n        else\n        {\n          *(_WORD *)(v12 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v12 + 116) = 3;\n  }\nLABEL_48:\n  v32 = *(_QWORD *)(v12 + 8);\n  v33 = *(_QWORD *)(v32 + 72);\n  v34 = v33 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v32 + 56) + v33 - 1) != 47 )\n    v34 = *(_QWORD *)(v32 + 72);\n  v35 = (_BYTE *)(*(_QWORD *)(a1 + 32) + v34);\n  *v35 = 47;\n  memmove(v35 + 1, (const void *)(v12 + 264), *(_QWORD *)(v12 + 96) + 1LL);\n  v31 = *(_WORD *)(v12 + 112);\nLABEL_51:\n  *(_QWORD *)a1 = v12;\n  if ( v31 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v6 = v12;\n  if ( v31 == 1 )\n    goto LABEL_53;\n  return v6;\n}\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "0x401e28",
            "funcEndAddr": "0x401e2d",
            "decompiledFuncCode": "__int64 __fastcall fts_read(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6)\n{\n  __int64 v6; // rbp\n  __int64 v7; // rdx\n  __int16 v8; // ax\n  __int64 v10; // rcx\n  __int16 v11; // ax\n  __int64 v12; // rbx\n  int v13; // r8d\n  int v14; // r9d\n  __int16 v15; // ax\n  int v16; // edi\n  void *v18; // rdi\n  int *v19; // rax\n  _QWORD *v20; // rax\n  void *v21; // rdi\n  int v22; // edi\n  void *v23; // rdi\n  __int64 v24; // rdx\n  void *v25; // rdi\n  char *v26; // rax\n  const void *v27; // r13\n  size_t v28; // r14\n  __int64 v29; // rax\n  int v30; // edi\n  __int16 v31; // ax\n  __int64 v32; // rcx\n  __int64 v33; // rdx\n  __int64 v34; // rax\n  _BYTE *v35; // rax\n  __int16 v36; // ax\n  __int64 v37; // rcx\n  int v38; // r8d\n  int v39; // r9d\n  __int64 v40; // rax\n  int v41; // edi\n  int v42; // eax\n  int v43; // edi\n  __int64 v44; // rbp\n  int v45; // edx\n  __int64 v46; // rcx\n  __int64 v47; // rax\n  __int64 v48; // rdx\n  __int16 v49; // ax\n  __int64 v50; // rcx\n  int v51; // r8d\n  int v52; // r9d\n  int v53; // esi\n  int v54; // esi\n  int v55; // eax\n  int v56; // eax\n  int v57; // eax\n  int v58; // eax\n  char v59; // [rsp+0h] [rbp-28h]\n\n  v6 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v7 = *(unsigned int *)(a1 + 72);\n  if ( (v7 & 0x4000) != 0 )\n    return 0LL;\n  v8 = *(_WORD *)(v6 + 116);\n  *(_WORD *)(v6 + 116) = 3;\n  if ( v8 == 1 )\n  {\n    *(_WORD *)(v6 + 112) = sub_406450(a1, v6, 0);\n    return v6;\n  }\n  v10 = *(unsigned __int16 *)(v6 + 112);\n  if ( v8 != 2 )\n  {\n    if ( (_WORD)v10 != 1 )\n      goto LABEL_9;\n    if ( v8 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v10 - 12) <= 1u )\n  {\n    v36 = sub_406450(a1, v6, 1);\n    *(_WORD *)(v6 + 112) = v36;\n    if ( v36 == 1 )\n    {\n      v53 = *(_DWORD *)(a1 + 72);\n      if ( (v53 & 4) == 0 )\n      {\n        v56 = sub_406B50(*(_DWORD *)(a1 + 44), v53, 4243255, v37, v38, v39, v59);\n        *(_DWORD *)(v6 + 68) = v56;\n        if ( v56 >= 0 )\n        {\n          *(_WORD *)(v6 + 114) |= 2u;\n          v31 = *(_WORD *)(v6 + 112);\n          v12 = v6;\n          goto LABEL_51;\n        }\n        v57 = *__errno_location();\n        *(_WORD *)(v6 + 112) = 7;\n        *(_DWORD *)(v6 + 64) = v57;\n        *(_QWORD *)a1 = v6;\n        return v6;\n      }\n      *(_QWORD *)a1 = v6;\n      v12 = v6;\nLABEL_53:\n      if ( *(_QWORD *)(v12 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v6;\n    if ( v36 != 11 )\n      return v6;\n    v12 = v6;\nLABEL_60:\n    v40 = *(_QWORD *)(v12 + 168);\n    if ( v40 != 2 )\n    {\n      if ( v40 == 1 )\n        return v12;\n      goto LABEL_117;\n    }\n    v44 = *(_QWORD *)(v12 + 8);\n    if ( !*(_QWORD *)(v44 + 104)\n      && (*(_DWORD *)(a1 + 72) & 0x18) == 24\n      && (unsigned int)sub_406940(*(_QWORD *)(v12 + 8)) == 2 )\n    {\n      v31 = *(_WORD *)(v12 + 112);\n      goto LABEL_52;\n    }\n    v31 = sub_406450(a1, v12, 0);\n    v45 = *(_DWORD *)(v12 + 144);\n    *(_WORD *)(v12 + 112) = v31;\n    if ( (v45 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v12 + 88) )\n    {\n      v46 = *(_QWORD *)(v44 + 104);\n      if ( (unsigned __int64)(v46 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v44 + 104) = v46 - 1;\n      if ( v31 != 1 )\n        return v12;\nLABEL_55:\n      v6 = v12;\n      if ( !(unsigned __int8)sub_406D70(*(_DWORD *)(a1 + 72), (_QWORD *)(a1 + 88), v12) )\n      {\n        v6 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v6;\n    }\n    if ( v31 != 1 )\n      return v12;\nLABEL_54:\n    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v12 + 120);\n    goto LABEL_55;\n  }\n  if ( (_WORD)v10 == 1 )\n  {\nLABEL_24:\n    if ( (v7 & 0x40) != 0 && *(_QWORD *)(v6 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( (*(_BYTE *)(v6 + 114) & 2) != 0 )\n        close(*(_DWORD *)(v6 + 68));\n      v21 = *(void **)(a1 + 8);\n      if ( v21 )\n      {\n        sub_406790(v21);\n        *(_QWORD *)(a1 + 8) = 0LL;\n      }\n      v22 = *(_DWORD *)(a1 + 72);\n      *(_WORD *)(v6 + 112) = 6;\n      sub_406E20(v22, (__int64 **)(a1 + 88), (_QWORD *)v6);\n      return v6;\n    }\n    v18 = *(void **)(a1 + 8);\n    if ( v18 )\n    {\n      if ( (v7 & 0x2000) == 0 )\n      {\n        if ( (unsigned int)sub_406BA0(a1, v6, -1, *(_QWORD *)(v6 + 48), a5, a6) )\n        {\n          v19 = __errno_location();\n          v12 = *(_QWORD *)(a1 + 8);\n          LODWORD(v19) = *v19;\n          *(_WORD *)(v6 + 114) |= 1u;\n          *(_DWORD *)(v6 + 64) = (_DWORD)v19;\n          if ( v12 )\n          {\n            v20 = (_QWORD *)v12;\n            do\n            {\n              v20[6] = *(_QWORD *)(v20[1] + 48LL);\n              v20 = (_QWORD *)v20[2];\n            }\n            while ( v20 );\n          }\n        }\n        else\n        {\n          v12 = *(_QWORD *)(a1 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v7) &= ~0x20u;\n      *(_DWORD *)(a1 + 72) = v7;\n      sub_406790(v18);\n      *(_QWORD *)(a1 + 8) = 0LL;\n    }\n    v12 = sub_406EC0(a1, 3, v7, v10, a5, a6);\n    *(_QWORD *)(a1 + 8) = v12;\n    if ( v12 )\n    {\nLABEL_32:\n      *(_QWORD *)(a1 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v41 = *(_DWORD *)(a1 + 72);\n    if ( (v41 & 0x4000) == 0 )\n    {\n      if ( *(_DWORD *)(v6 + 64) && *(_WORD *)(v6 + 112) != 4 )\n        *(_WORD *)(v6 + 112) = 7;\n      sub_406E20(v41, (__int64 **)(a1 + 88), (_QWORD *)v6);\n      return v6;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v12 = *(_QWORD *)(v6 + 16);\n    if ( !v12 )\n    {\n      v12 = *(_QWORD *)(v6 + 8);\n      if ( *(_QWORD *)(v12 + 24) )\n      {\n        v47 = *(_QWORD *)(v12 + 72);\n        v48 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v12;\n        *(_BYTE *)(v48 + v47) = 0;\n        v12 = sub_406EC0(a1, 3, v48, v10, a5, a6);\n        if ( v12 )\n        {\n          free((void *)v6);\n          goto LABEL_48;\n        }\n        if ( (*(_BYTE *)(a1 + 73) & 0x40) != 0 )\n          return 0LL;\n        v12 = *(_QWORD *)(v6 + 8);\n      }\n      *(_QWORD *)a1 = v12;\n      free((void *)v6);\n      if ( *(_QWORD *)(v12 + 88) == -1LL )\n      {\n        v6 = 0LL;\n        free((void *)v12);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v6;\n      }\n      if ( *(_WORD *)(v12 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v12 + 72)) = 0;\n        if ( *(_QWORD *)(v12 + 88) )\n        {\n          v15 = *(_WORD *)(v12 + 114);\n          if ( (v15 & 2) != 0 )\n          {\n            v42 = *(_DWORD *)(a1 + 72);\n            v43 = *(_DWORD *)(v12 + 68);\n            if ( (v42 & 4) == 0 )\n            {\n              if ( (v42 & 0x200) != 0 )\n              {\n                sub_4069B0(a1, v43, 1);\n                v43 = *(_DWORD *)(v12 + 68);\n              }\n              else\n              {\n                if ( fchdir(v43) )\n                {\n                  *(_DWORD *)(v12 + 64) = *__errno_location();\n                  *(_DWORD *)(a1 + 72) |= 0x4000u;\n                }\n                v43 = *(_DWORD *)(v12 + 68);\n              }\n            }\n            close(v43);\n          }\n          else if ( (v15 & 1) == 0 && (unsigned int)sub_406BA0(a1, *(_QWORD *)(v12 + 8), -1, (__int64)\"..\", v13, v14) )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_406A20(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v12 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v12 + 112) == 2 )\n            return 0LL;\n          v16 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v12 + 64) )\n          {\n            *(_WORD *)(v12 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v12 + 112) = 6;\n            sub_406E20(v16, (__int64 **)(a1 + 88), (_QWORD *)v12);\n            v16 = *(_DWORD *)(a1 + 72);\n          }\nLABEL_19:\n          if ( (v16 & 0x4000) != 0 )\n            return 0LL;\n          return v12;\n        }\n        v16 = *(_DWORD *)(a1 + 72);\n        if ( *(_WORD *)(v12 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v12;\n    free((void *)v6);\n    if ( !*(_QWORD *)(v12 + 88) )\n    {\n      if ( !(unsigned int)sub_406A20(a1) )\n      {\n        v23 = *(void **)(a1 + 88);\n        if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n        {\n          if ( v23 )\n            sub_40A160(v23);\n        }\n        else\n        {\n          free(v23);\n        }\n        v24 = *(_QWORD *)(v12 + 96);\n        v25 = *(void **)(a1 + 32);\n        *(_QWORD *)(v12 + 72) = v24;\n        memmove(v25, (const void *)(v12 + 264), v24 + 1);\n        v26 = strrchr((const char *)(v12 + 264), 47);\n        if ( v26 && ((char *)(v12 + 264) != v26 || *(_BYTE *)(v12 + 265)) )\n        {\n          v27 = v26 + 1;\n          v28 = strlen(v26 + 1);\n          memmove((void *)(v12 + 264), v27, v28 + 1);\n          *(_QWORD *)(v12 + 96) = v28;\n        }\n        v29 = *(_QWORD *)(a1 + 32);\n        v30 = *(_DWORD *)(a1 + 72);\n        *(_QWORD *)(v12 + 56) = v29;\n        *(_QWORD *)(v12 + 48) = v29;\n        sub_406AF0(v30, (__int64 *)(a1 + 88));\n        v31 = *(_WORD *)(v12 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v11 = *(_WORD *)(v12 + 116);\n    v6 = v12;\n  }\n  while ( v11 == 4 );\n  if ( v11 == 2 )\n  {\n    v49 = sub_406450(a1, v12, 1);\n    *(_WORD *)(v12 + 112) = v49;\n    if ( v49 == 1 )\n    {\n      v54 = *(_DWORD *)(a1 + 72);\n      if ( (v54 & 4) == 0 )\n      {\n        v55 = sub_406B50(*(_DWORD *)(a1 + 44), v54, 4243255, v50, v51, v52, v59);\n        *(_DWORD *)(v12 + 68) = v55;\n        if ( v55 < 0 )\n        {\n          v58 = *__errno_location();\n          *(_WORD *)(v12 + 112) = 7;\n          *(_DWORD *)(v12 + 64) = v58;\n        }\n        else\n        {\n          *(_WORD *)(v12 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v12 + 116) = 3;\n  }\nLABEL_48:\n  v32 = *(_QWORD *)(v12 + 8);\n  v33 = *(_QWORD *)(v32 + 72);\n  v34 = v33 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v32 + 56) + v33 - 1) != 47 )\n    v34 = *(_QWORD *)(v32 + 72);\n  v35 = (_BYTE *)(*(_QWORD *)(a1 + 32) + v34);\n  *v35 = 47;\n  memmove(v35 + 1, (const void *)(v12 + 264), *(_QWORD *)(v12 + 96) + 1LL);\n  v31 = *(_WORD *)(v12 + 112);\nLABEL_51:\n  *(_QWORD *)a1 = v12;\n  if ( v31 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v6 = v12;\n  if ( v31 == 1 )\n    goto LABEL_53;\n  return v6;\n}\n\n__int64 __fastcall fts_read(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6)\n{\n  __int64 v6; // rbp\n  __int64 v7; // rdx\n  __int16 v8; // ax\n  __int64 v10; // rcx\n  __int16 v11; // ax\n  __int64 v12; // rbx\n  int v13; // r8d\n  int v14; // r9d\n  __int16 v15; // ax\n  int v16; // edi\n  void *v18; // rdi\n  int *v19; // rax\n  _QWORD *v20; // rax\n  void *v21; // rdi\n  int v22; // edi\n  void *v23; // rdi\n  __int64 v24; // rdx\n  void *v25; // rdi\n  char *v26; // rax\n  const void *v27; // r13\n  size_t v28; // r14\n  __int64 v29; // rax\n  int v30; // edi\n  __int16 v31; // ax\n  __int64 v32; // rcx\n  __int64 v33; // rdx\n  __int64 v34; // rax\n  _BYTE *v35; // rax\n  __int16 v36; // ax\n  __int64 v37; // rcx\n  int v38; // r8d\n  int v39; // r9d\n  __int64 v40; // rax\n  int v41; // edi\n  int v42; // eax\n  int v43; // edi\n  __int64 v44; // rbp\n  int v45; // edx\n  __int64 v46; // rcx\n  __int64 v47; // rax\n  __int64 v48; // rdx\n  __int16 v49; // ax\n  __int64 v50; // rcx\n  int v51; // r8d\n  int v52; // r9d\n  int v53; // esi\n  int v54; // esi\n  int v55; // eax\n  int v56; // eax\n  int v57; // eax\n  int v58; // eax\n  char v59; // [rsp+0h] [rbp-28h]\n\n  v6 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v7 = *(unsigned int *)(a1 + 72);\n  if ( (v7 & 0x4000) != 0 )\n    return 0LL;\n  v8 = *(_WORD *)(v6 + 116);\n  *(_WORD *)(v6 + 116) = 3;\n  if ( v8 == 1 )\n  {\n    *(_WORD *)(v6 + 112) = sub_406450(a1, v6, 0);\n    return v6;\n  }\n  v10 = *(unsigned __int16 *)(v6 + 112);\n  if ( v8 != 2 )\n  {\n    if ( (_WORD)v10 != 1 )\n      goto LABEL_9;\n    if ( v8 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v10 - 12) <= 1u )\n  {\n    v36 = sub_406450(a1, v6, 1);\n    *(_WORD *)(v6 + 112) = v36;\n    if ( v36 == 1 )\n    {\n      v53 = *(_DWORD *)(a1 + 72);\n      if ( (v53 & 4) == 0 )\n      {\n        v56 = sub_406B50(*(_DWORD *)(a1 + 44), v53, 4243255, v37, v38, v39, v59);\n        *(_DWORD *)(v6 + 68) = v56;\n        if ( v56 >= 0 )\n        {\n          *(_WORD *)(v6 + 114) |= 2u;\n          v31 = *(_WORD *)(v6 + 112);\n          v12 = v6;\n          goto LABEL_51;\n        }\n        v57 = *__errno_location();\n        *(_WORD *)(v6 + 112) = 7;\n        *(_DWORD *)(v6 + 64) = v57;\n        *(_QWORD *)a1 = v6;\n        return v6;\n      }\n      *(_QWORD *)a1 = v6;\n      v12 = v6;\nLABEL_53:\n      if ( *(_QWORD *)(v12 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v6;\n    if ( v36 != 11 )\n      return v6;\n    v12 = v6;\nLABEL_60:\n    v40 = *(_QWORD *)(v12 + 168);\n    if ( v40 != 2 )\n    {\n      if ( v40 == 1 )\n        return v12;\n      goto LABEL_117;\n    }\n    v44 = *(_QWORD *)(v12 + 8);\n    if ( !*(_QWORD *)(v44 + 104)\n      && (*(_DWORD *)(a1 + 72) & 0x18) == 24\n      && (unsigned int)sub_406940(*(_QWORD *)(v12 + 8)) == 2 )\n    {\n      v31 = *(_WORD *)(v12 + 112);\n      goto LABEL_52;\n    }\n    v31 = sub_406450(a1, v12, 0);\n    v45 = *(_DWORD *)(v12 + 144);\n    *(_WORD *)(v12 + 112) = v31;\n    if ( (v45 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v12 + 88) )\n    {\n      v46 = *(_QWORD *)(v44 + 104);\n      if ( (unsigned __int64)(v46 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v44 + 104) = v46 - 1;\n      if ( v31 != 1 )\n        return v12;\nLABEL_55:\n      v6 = v12;\n      if ( !(unsigned __int8)sub_406D70(*(_DWORD *)(a1 + 72), (_QWORD *)(a1 + 88), v12) )\n      {\n        v6 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v6;\n    }\n    if ( v31 != 1 )\n      return v12;\nLABEL_54:\n    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v12 + 120);\n    goto LABEL_55;\n  }\n  if ( (_WORD)v10 == 1 )\n  {\nLABEL_24:\n    if ( (v7 & 0x40) != 0 && *(_QWORD *)(v6 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( (*(_BYTE *)(v6 + 114) & 2) != 0 )\n        close(*(_DWORD *)(v6 + 68));\n      v21 = *(void **)(a1 + 8);\n      if ( v21 )\n      {\n        sub_406790(v21);\n        *(_QWORD *)(a1 + 8) = 0LL;\n      }\n      v22 = *(_DWORD *)(a1 + 72);\n      *(_WORD *)(v6 + 112) = 6;\n      sub_406E20(v22, (__int64 **)(a1 + 88), (_QWORD *)v6);\n      return v6;\n    }\n    v18 = *(void **)(a1 + 8);\n    if ( v18 )\n    {\n      if ( (v7 & 0x2000) == 0 )\n      {\n        if ( (unsigned int)sub_406BA0(a1, v6, -1, *(_QWORD *)(v6 + 48), a5, a6) )\n        {\n          v19 = __errno_location();\n          v12 = *(_QWORD *)(a1 + 8);\n          LODWORD(v19) = *v19;\n          *(_WORD *)(v6 + 114) |= 1u;\n          *(_DWORD *)(v6 + 64) = (_DWORD)v19;\n          if ( v12 )\n          {\n            v20 = (_QWORD *)v12;\n            do\n            {\n              v20[6] = *(_QWORD *)(v20[1] + 48LL);\n              v20 = (_QWORD *)v20[2];\n            }\n            while ( v20 );\n          }\n        }\n        else\n        {\n          v12 = *(_QWORD *)(a1 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v7) &= ~0x20u;\n      *(_DWORD *)(a1 + 72) = v7;\n      sub_406790(v18);\n      *(_QWORD *)(a1 + 8) = 0LL;\n    }\n    v12 = sub_406EC0(a1, 3, v7, v10, a5, a6);\n    *(_QWORD *)(a1 + 8) = v12;\n    if ( v12 )\n    {\nLABEL_32:\n      *(_QWORD *)(a1 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v41 = *(_DWORD *)(a1 + 72);\n    if ( (v41 & 0x4000) == 0 )\n    {\n      if ( *(_DWORD *)(v6 + 64) && *(_WORD *)(v6 + 112) != 4 )\n        *(_WORD *)(v6 + 112) = 7;\n      sub_406E20(v41, (__int64 **)(a1 + 88), (_QWORD *)v6);\n      return v6;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v12 = *(_QWORD *)(v6 + 16);\n    if ( !v12 )\n    {\n      v12 = *(_QWORD *)(v6 + 8);\n      if ( *(_QWORD *)(v12 + 24) )\n      {\n        v47 = *(_QWORD *)(v12 + 72);\n        v48 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v12;\n        *(_BYTE *)(v48 + v47) = 0;\n        v12 = sub_406EC0(a1, 3, v48, v10, a5, a6);\n        if ( v12 )\n        {\n          free((void *)v6);\n          goto LABEL_48;\n        }\n        if ( (*(_BYTE *)(a1 + 73) & 0x40) != 0 )\n          return 0LL;\n        v12 = *(_QWORD *)(v6 + 8);\n      }\n      *(_QWORD *)a1 = v12;\n      free((void *)v6);\n      if ( *(_QWORD *)(v12 + 88) == -1LL )\n      {\n        v6 = 0LL;\n        free((void *)v12);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v6;\n      }\n      if ( *(_WORD *)(v12 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v12 + 72)) = 0;\n        if ( *(_QWORD *)(v12 + 88) )\n        {\n          v15 = *(_WORD *)(v12 + 114);\n          if ( (v15 & 2) != 0 )\n          {\n            v42 = *(_DWORD *)(a1 + 72);\n            v43 = *(_DWORD *)(v12 + 68);\n            if ( (v42 & 4) == 0 )\n            {\n              if ( (v42 & 0x200) != 0 )\n              {\n                sub_4069B0(a1, v43, 1);\n                v43 = *(_DWORD *)(v12 + 68);\n              }\n              else\n              {\n                if ( fchdir(v43) )\n                {\n                  *(_DWORD *)(v12 + 64) = *__errno_location();\n                  *(_DWORD *)(a1 + 72) |= 0x4000u;\n                }\n                v43 = *(_DWORD *)(v12 + 68);\n              }\n            }\n            close(v43);\n          }\n          else if ( (v15 & 1) == 0 && (unsigned int)sub_406BA0(a1, *(_QWORD *)(v12 + 8), -1, (__int64)\"..\", v13, v14) )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_406A20(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v12 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v12 + 112) == 2 )\n            return 0LL;\n          v16 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v12 + 64) )\n          {\n            *(_WORD *)(v12 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v12 + 112) = 6;\n            sub_406E20(v16, (__int64 **)(a1 + 88), (_QWORD *)v12);\n            v16 = *(_DWORD *)(a1 + 72);\n          }\nLABEL_19:\n          if ( (v16 & 0x4000) != 0 )\n            return 0LL;\n          return v12;\n        }\n        v16 = *(_DWORD *)(a1 + 72);\n        if ( *(_WORD *)(v12 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v12;\n    free((void *)v6);\n    if ( !*(_QWORD *)(v12 + 88) )\n    {\n      if ( !(unsigned int)sub_406A20(a1) )\n      {\n        v23 = *(void **)(a1 + 88);\n        if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n        {\n          if ( v23 )\n            sub_40A160(v23);\n        }\n        else\n        {\n          free(v23);\n        }\n        v24 = *(_QWORD *)(v12 + 96);\n        v25 = *(void **)(a1 + 32);\n        *(_QWORD *)(v12 + 72) = v24;\n        memmove(v25, (const void *)(v12 + 264), v24 + 1);\n        v26 = strrchr((const char *)(v12 + 264), 47);\n        if ( v26 && ((char *)(v12 + 264) != v26 || *(_BYTE *)(v12 + 265)) )\n        {\n          v27 = v26 + 1;\n          v28 = strlen(v26 + 1);\n          memmove((void *)(v12 + 264), v27, v28 + 1);\n          *(_QWORD *)(v12 + 96) = v28;\n        }\n        v29 = *(_QWORD *)(a1 + 32);\n        v30 = *(_DWORD *)(a1 + 72);\n        *(_QWORD *)(v12 + 56) = v29;\n        *(_QWORD *)(v12 + 48) = v29;\n        sub_406AF0(v30, (__int64 *)(a1 + 88));\n        v31 = *(_WORD *)(v12 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v11 = *(_WORD *)(v12 + 116);\n    v6 = v12;\n  }\n  while ( v11 == 4 );\n  if ( v11 == 2 )\n  {\n    v49 = sub_406450(a1, v12, 1);\n    *(_WORD *)(v12 + 112) = v49;\n    if ( v49 == 1 )\n    {\n      v54 = *(_DWORD *)(a1 + 72);\n      if ( (v54 & 4) == 0 )\n      {\n        v55 = sub_406B50(*(_DWORD *)(a1 + 44), v54, 4243255, v50, v51, v52, v59);\n        *(_DWORD *)(v12 + 68) = v55;\n        if ( v55 < 0 )\n        {\n          v58 = *__errno_location();\n          *(_WORD *)(v12 + 112) = 7;\n          *(_DWORD *)(v12 + 64) = v58;\n        }\n        else\n        {\n          *(_WORD *)(v12 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v12 + 116) = 3;\n  }\nLABEL_48:\n  v32 = *(_QWORD *)(v12 + 8);\n  v33 = *(_QWORD *)(v32 + 72);\n  v34 = v33 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v32 + 56) + v33 - 1) != 47 )\n    v34 = *(_QWORD *)(v32 + 72);\n  v35 = (_BYTE *)(*(_QWORD *)(a1 + 32) + v34);\n  *v35 = 47;\n  memmove(v35 + 1, (const void *)(v12 + 264), *(_QWORD *)(v12 + 96) + 1LL);\n  v31 = *(_WORD *)(v12 + 112);\nLABEL_51:\n  *(_QWORD *)a1 = v12;\n  if ( v31 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v6 = v12;\n  if ( v31 == 1 )\n    goto LABEL_53;\n  return v6;\n}\n"
        },
        {
            "funcName": "fts_set",
            "funcStartAddr": "0x408500",
            "funcEndAddr": "0x408529",
            "decompiledFuncCode": "__int64 __fastcall fts_set(__int64 a1, __int64 a2, unsigned int a3)\n{\n  if ( a3 > 4 )\n  {\n    *__errno_location() = 22;\n    return 1LL;\n  }\n  else\n  {\n    *(_WORD *)(a2 + 116) = a3;\n    return 0LL;\n  }\n}\n"
        },
        {
            "funcName": "fts_children",
            "funcStartAddr": "0x408530",
            "funcEndAddr": "0x40869d",
            "decompiledFuncCode": "__int64 __fastcall fts_children(__int64 a1, int a2)\n{\n  int *v3; // rax\n  __int64 v4; // rcx\n  int v5; // r8d\n  int v6; // r9d\n  int *v7; // r13\n  __int64 v8; // r12\n  __int64 v9; // rdx\n  __int64 result; // rax\n  void *v11; // rdi\n  int v12; // r14d\n  int v13; // esi\n  __int64 v14; // rdx\n  __int64 v15; // rcx\n  int v16; // ebp\n  int v17; // r8d\n  int v18; // r9d\n  int v19; // ebx\n  char v20; // [rsp+0h] [rbp-28h]\n\n  v3 = __errno_location();\n  v7 = v3;\n  if ( (a2 & 0xFFFFDFFF) != 0 )\n  {\n    *v3 = 22;\n    return 0LL;\n  }\n  v8 = *(_QWORD *)a1;\n  *v3 = 0;\n  if ( (*(_BYTE *)(a1 + 73) & 0x40) != 0 )\n    return 0LL;\n  v9 = *(unsigned __int16 *)(v8 + 112);\n  if ( (_WORD)v9 == 9 )\n    return *(_QWORD *)(v8 + 16);\n  result = 0LL;\n  if ( (_WORD)v9 == 1 )\n  {\n    v11 = *(void **)(a1 + 8);\n    if ( v11 )\n      sub_406790(v11);\n    v12 = 1;\n    if ( a2 == 0x2000 )\n    {\n      *(_DWORD *)(a1 + 72) |= 0x2000u;\n      v12 = 2;\n    }\n    if ( !*(_QWORD *)(v8 + 88) && **(_BYTE **)(v8 + 48) != 47 )\n    {\n      v13 = *(_DWORD *)(a1 + 72);\n      if ( (v13 & 4) == 0 )\n      {\n        v16 = sub_406B50(*(_DWORD *)(a1 + 44), v13, 4243255, v4, v5, v6, v20);\n        if ( v16 < 0 )\n        {\n          *(_QWORD *)(a1 + 8) = 0LL;\n          return 0LL;\n        }\n        *(_QWORD *)(a1 + 8) = sub_406EC0(a1, v12, v14, v15, v17, v18);\n        if ( (*(_BYTE *)(a1 + 73) & 2) != 0 )\n        {\n          sub_4069B0(a1, v16, 1);\n        }\n        else\n        {\n          if ( fchdir(v16) )\n          {\n            v19 = *v7;\n            close(v16);\n            result = 0LL;\n            *v7 = v19;\n            return result;\n          }\n          close(v16);\n        }\n        return *(_QWORD *)(a1 + 8);\n      }\n    }\n    result = sub_406EC0(a1, v12, v9, v4, v5, v6);\n    *(_QWORD *)(a1 + 8) = result;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4086A0",
            "funcStartAddr": "0x4086a0",
            "funcEndAddr": "0x40877f",
            "decompiledFuncCode": "__int64 __fastcall sub_4086A0(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408780",
            "funcStartAddr": "0x408780",
            "funcEndAddr": "0x408d9c",
            "decompiledFuncCode": "__int64 __fastcall sub_408780(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        const char *a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rdi\n  const char **v35; // rbx\n  _BYTE *v36; // rbp\n  __int64 v37; // r12\n  const char *v38; // r12\n  __int64 v39; // rbp\n  char *v40; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v48; // [rsp+38h] [rbp-50h]\n  char v49; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+44h] [rbp-44h]\n  int v52; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v49 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v49), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v51 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v48 = 0;\n  v52 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v48 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v52 = 1;\n            ptr[v51] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v48 = 1;\n        }\n        else\n        {\n          v48 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v51 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v48 )\n  {\n    if ( a8 )\n    {\n      if ( v48 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v34 = stderr;\n        v35 = (const char **)a4;\n        v36 = ptr;\n        v37 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9, *v35);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v52 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v51;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v38 = *v12;\n          v39 = *a2;\n          v40 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v40, v39, a9, v38);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408DA0",
            "funcStartAddr": "0x408da0",
            "funcEndAddr": "0x409366",
            "decompiledFuncCode": "__int64 __fastcall sub_408DA0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_4086A0((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_4086A0((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_408780(a1, a2, v12, a4, a5, a6, a7, v8, \"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_408780(a1, a2, v12, a4, a5, a6, a7, v8, \"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_408780(a1, a2, v12, a4, a5, 0, a7, v8, \"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43, v21);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41, v21);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_409370",
            "funcStartAddr": "0x409370",
            "funcEndAddr": "0x4093c6",
            "decompiledFuncCode": "__int64 __fastcall sub_409370(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_6104C0 = dword_6102FC;\n  dword_6104C4 = dword_6102F8;\n  result = sub_408DA0(a1, a2, a3, a4, a5, a6, &dword_6104C0, a7);\n  dword_6102FC = dword_6104C0;\n  qword_610508 = qword_6104D0;\n  dword_6102F4 = dword_6104C8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4093D0",
            "funcStartAddr": "0x4093d0",
            "funcEndAddr": "0x4093e8",
            "decompiledFuncCode": "__int64 __fastcall sub_4093D0(int a1, __int64 *a2, const char *a3)\n{\n  return sub_409370(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_4093F0",
            "funcStartAddr": "0x4093f0",
            "funcEndAddr": "0x409403",
            "decompiledFuncCode": "__int64 __fastcall sub_4093F0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409370(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_409410",
            "funcStartAddr": "0x409410",
            "funcEndAddr": "0x409425",
            "decompiledFuncCode": "__int64 __fastcall sub_409410(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408DA0(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_409430",
            "funcStartAddr": "0x409430",
            "funcEndAddr": "0x409446",
            "decompiledFuncCode": "__int64 __fastcall sub_409430(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409370(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_409450",
            "funcStartAddr": "0x409450",
            "funcEndAddr": "0x409468",
            "decompiledFuncCode": "__int64 __fastcall sub_409450(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408DA0(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_409470",
            "funcStartAddr": "0x409470",
            "funcEndAddr": "0x4094ea",
            "decompiledFuncCode": "size_t __fastcall sub_409470(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_409630(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_4094F0",
            "funcStartAddr": "0x4094f0",
            "funcEndAddr": "0x40954d",
            "decompiledFuncCode": "__int64 __fastcall sub_4094F0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_40AFB0(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n    return 0xFFFFFFFFLL;\n  }\n  if ( !(_DWORD)result )\n    return result;\n  if ( v1 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)-(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_409550",
            "funcStartAddr": "0x409550",
            "funcEndAddr": "0x409560",
            "decompiledFuncCode": "void __fastcall sub_409550(__int64 a1)\n{\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_DWORD *)(a1 + 24) = 9827862;\n}\n"
        },
        {
            "funcName": "sub_409560",
            "funcStartAddr": "0x409560",
            "funcEndAddr": "0x4095dc",
            "decompiledFuncCode": "__int64 __fastcall sub_409560(__int64 a1, __int64 *a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rdx\n  __int64 v5; // rax\n\n  if ( *(_DWORD *)(a1 + 24) != 9827862 )\n    __assert_fail(\"state->magic == 9827862\", \"lib/cycle-check.c\", 0x3Cu, \"cycle_check\");\n  v2 = *(_QWORD *)(a1 + 16);\n  v3 = a2[1];\n  if ( !v2 )\n  {\n    *(_QWORD *)(a1 + 16) = 1LL;\n    goto LABEL_7;\n  }\n  if ( *(_QWORD *)a1 == v3 && *a2 == *(_QWORD *)(a1 + 8) )\n    return 1LL;\n  *(_QWORD *)(a1 + 16) = v2 + 1;\n  if ( ((v2 + 1) & v2) != 0 )\n    return 0LL;\n  if ( v2 != -1 )\n  {\nLABEL_7:\n    v5 = *a2;\n    *(_QWORD *)a1 = v3;\n    *(_QWORD *)(a1 + 8) = v5;\n    return 0LL;\n  }\n  return 1LL;\n}\n"
        },
        {
            "funcName": "sub_4095E0",
            "funcStartAddr": "0x4095e0",
            "funcEndAddr": "0x40962a",
            "decompiledFuncCode": "__int64 __fastcall sub_4095E0(const char *a1, char a2, unsigned int a3)\n{\n  __int64 v3; // rdx\n  int v4; // eax\n\n  v3 = 0LL;\n  if ( (a2 & 0x40) != 0 )\n    v3 = a3;\n  v4 = open(a1, a2, v3);\n  return sub_40AF60(v4);\n}\n"
        },
        {
            "funcName": "sub_409630",
            "funcStartAddr": "0x409630",
            "funcEndAddr": "0x40968e",
            "decompiledFuncCode": "bool __fastcall sub_409630(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409690",
            "funcStartAddr": "0x409690",
            "funcEndAddr": "0x409723",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_409690(unsigned __int64 a1)\n{\n  __int64 v1; // rsi\n  unsigned __int64 v2; // rsi\n  unsigned __int64 v3; // rax\n  __int64 v4; // r8\n  unsigned __int64 v5; // rdi\n  unsigned __int64 v6; // rcx\n\n  v1 = 10LL;\n  if ( a1 >= 0xA )\n    v1 = a1;\n  v2 = v1 | 1;\n  if ( v2 != -1LL )\n  {\n    while ( 1 )\n    {\n      v3 = v2 % 3;\n      if ( v2 <= 9 )\n        goto LABEL_9;\n      if ( v2 % 3 )\n        break;\nLABEL_10:\n      v2 += 2LL;\n      if ( v2 == -1LL )\n        return v2;\n    }\n    v4 = 16LL;\n    v5 = 9LL;\n    v6 = 3LL;\n    while ( 1 )\n    {\n      v6 += 2LL;\n      v5 += v4;\n      v3 = v2 % v6;\n      if ( v5 >= v2 )\n        break;\n      v4 += 8LL;\n      if ( !(v2 % v6) )\n        goto LABEL_10;\n    }\nLABEL_9:\n    if ( v3 )\n      return v2;\n    goto LABEL_10;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_409730",
            "funcStartAddr": "0x409730",
            "funcEndAddr": "0x409740",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_409730(__int64 a1, unsigned __int64 a2)\n{\n  return __ROR8__(a1, 3) % a2;\n}\n"
        },
        {
            "funcName": "sub_409740",
            "funcStartAddr": "0x409740",
            "funcEndAddr": "0x409747",
            "decompiledFuncCode": "bool __fastcall sub_409740(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n"
        },
        {
            "funcName": "sub_409750",
            "funcStartAddr": "0x401e2d",
            "funcEndAddr": "0x401e32",
            "decompiledFuncCode": "__int64 __fastcall sub_409750(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_409750(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n"
        },
        {
            "funcName": "sub_409750",
            "funcStartAddr": "0x401e2d",
            "funcEndAddr": "0x401e32",
            "decompiledFuncCode": "__int64 __fastcall sub_409750(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_409750(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n"
        },
        {
            "funcName": "sub_409780",
            "funcStartAddr": "0x409780",
            "funcEndAddr": "0x409899",
            "decompiledFuncCode": "__int64 __fastcall sub_409780(__int64 a1, __int64 a2, __m128i **a3, char a4)\n{\n  __m128i *v7; // rax\n  __int64 v8; // rsi\n  __m128i *v9; // rbx\n  __int64 *v10; // rax\n  const __m128i *v12; // rax\n\n  v7 = (__m128i *)sub_409750(a1, a2);\n  *a3 = v7;\n  v8 = v7->m128i_i64[0];\n  if ( v7->m128i_i64[0] )\n  {\n    v9 = v7;\n    if ( v8 != a2 )\n    {\n      if ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(a2) )\n      {\n        v10 = (__int64 *)v9->m128i_i64[1];\n        if ( v10 )\n        {\n          v8 = *v10;\n          if ( a2 != *v10 )\n          {\n            while ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(a2) )\n            {\n              v9 = (__m128i *)v9->m128i_i64[1];\n              v10 = (__int64 *)v9->m128i_i64[1];\n              if ( !v10 )\n                return 0LL;\n              v8 = *v10;\n              if ( *v10 == a2 )\n                goto LABEL_11;\n            }\n            v10 = (__int64 *)v9->m128i_i64[1];\n            v8 = *v10;\n          }\nLABEL_11:\n          if ( a4 )\n          {\n            v9->m128i_i64[1] = v10[1];\n            *v10 = 0LL;\n            v10[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v10;\n          }\n          return v8;\n        }\n        return 0LL;\n      }\n      v8 = v9->m128i_i64[0];\n    }\n    if ( a4 )\n    {\n      v12 = (const __m128i *)v9->m128i_i64[1];\n      if ( v12 )\n      {\n        *v9 = _mm_loadu_si128(v12);\n        v12->m128i_i64[0] = 0LL;\n        v12->m128i_i64[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = v12;\n        return v8;\n      }\n      v9->m128i_i64[0] = 0LL;\n    }\n    return v8;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4098A0",
            "funcStartAddr": "0x4098a0",
            "funcEndAddr": "0x40991e",
            "decompiledFuncCode": "__int64 __fastcall sub_4098A0(float **a1)\n{\n  float *v1; // rax\n  float v2; // xmm0_4\n  float v3; // xmm1_4\n  float v4; // xmm2_4\n  __int64 result; // rax\n\n  v1 = *a1;\n  if ( *a1 == (float *)&unk_40D6F0 )\n    return 1LL;\n  v2 = v1[2];\n  if ( v2 <= 0.1\n    || v2 >= 0.89999998\n    || v1[3] <= 1.1\n    || *v1 < 0.0\n    || (v3 = *v1 + 0.1, v4 = v1[1], v4 <= v3)\n    || v4 > 1.0\n    || (result = 1LL, v2 <= v3) )\n  {\n    *a1 = (float *)&unk_40D6F0;\n    return 0LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409920",
            "funcStartAddr": "0x409920",
            "funcEndAddr": "0x409a6a",
            "decompiledFuncCode": "__int64 __fastcall sub_409920(__int64 a1, __int64 a2, char a3)\n{\n  __int64 *v4; // r12\n  __int64 v5; // r15\n  __int64 *v6; // rbx\n  __int64 v7; // r15\n  _QWORD *v8; // rax\n  __int64 *v9; // rdx\n  _QWORD *v10; // rax\n  _QWORD *v11; // rbx\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n\n  v4 = *(__int64 **)a2;\n  if ( *(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) )\n    return 1LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v5 = *v4;\n      if ( *v4 )\n      {\n        v6 = (__int64 *)v4[1];\n        if ( v6 )\n        {\n          do\n          {\n            while ( 1 )\n            {\n              v7 = *v6;\n              v8 = (_QWORD *)sub_409750(a1, *v6);\n              v9 = (__int64 *)v6[1];\n              if ( !*v8 )\n                break;\n              v6[1] = v8[1];\n              v8[1] = v6;\n              v6 = v9;\n              if ( !v9 )\n                goto LABEL_10;\n            }\n            *v8 = v7;\n            ++*(_QWORD *)(a1 + 24);\n            *v6 = 0LL;\n            v6[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v6;\n            v6 = v9;\n          }\n          while ( v9 );\nLABEL_10:\n          v5 = *v4;\n        }\n        v4[1] = 0LL;\n        if ( !a3 )\n          break;\n      }\n      v4 += 2;\n      if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n        return 1LL;\n    }\n    v10 = (_QWORD *)sub_409750(a1, v5);\n    v11 = v10;\n    if ( !*v10 )\n    {\n      *v10 = v5;\n      ++*(_QWORD *)(a1 + 24);\n      goto LABEL_16;\n    }\n    v12 = *(_QWORD **)(a1 + 72);\n    if ( !v12 )\n      break;\n    *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_15:\n    v13 = v11[1];\n    *v12 = v5;\n    v12[1] = v13;\n    v11[1] = v12;\nLABEL_16:\n    *v4 = 0LL;\n    v4 += 2;\n    --*(_QWORD *)(a2 + 24);\n    if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n      return 1LL;\n  }\n  v12 = malloc(0x10uLL);\n  if ( v12 )\n    goto LABEL_15;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_409B60",
            "funcStartAddr": "0x409b60",
            "funcEndAddr": "0x409ca8",
            "decompiledFuncCode": "__int64 __fastcall sub_409B60(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // rbx\n  __int64 v4; // rcx\n  __int64 v5; // r12\n  __int64 v6; // r13\n  _QWORD *v7; // rsi\n  unsigned __int64 i; // rdi\n  __int64 v9; // rax\n  unsigned __int64 j; // rdx\n  double v11; // xmm0_8\n  double v12; // xmm1_8\n\n  v3 = 0LL;\n  v4 = *(_QWORD *)(a1 + 32);\n  v5 = *(_QWORD *)(a1 + 16);\n  v6 = *(_QWORD *)(a1 + 24);\n  v7 = *(_QWORD **)a1;\n  for ( i = *(_QWORD *)(a1 + 8); (unsigned __int64)v7 < i; v7 += 2 )\n  {\n    while ( !*v7 )\n    {\n      v7 += 2;\n      if ( (unsigned __int64)v7 >= i )\n        goto LABEL_10;\n    }\n    v9 = v7[1];\n    for ( j = 1LL; v9; ++j )\n      v9 = *(_QWORD *)(v9 + 8);\n    if ( v3 < j )\n      v3 = j;\n  }\nLABEL_10:\n  __fprintf_chk(a2, 1LL, \"# entries:         %lu\\n\", v4);\n  __fprintf_chk(a2, 1LL, \"# buckets:         %lu\\n\", v5);\n  if ( v6 < 0 )\n  {\n    v11 = ((double)(int)(v6 & 1 | ((unsigned __int64)v6 >> 1)) + (double)(int)(v6 & 1 | ((unsigned __int64)v6 >> 1)))\n        * 100.0;\n    if ( v5 >= 0 )\n      goto LABEL_12;\nLABEL_15:\n    v12 = (double)(int)(v5 & 1 | ((unsigned __int64)v5 >> 1)) + (double)(int)(v5 & 1 | ((unsigned __int64)v5 >> 1));\n    goto LABEL_13;\n  }\n  v11 = (double)(int)v6 * 100.0;\n  if ( v5 < 0 )\n    goto LABEL_15;\nLABEL_12:\n  v12 = (double)(int)v5;\nLABEL_13:\n  __fprintf_chk(a2, 1LL, \"# buckets used:    %lu (%.2f%%)\\n\", v6, v11 / v12);\n  return __fprintf_chk(a2, 1LL, \"max bucket length: %lu\\n\", v3);\n}\n"
        },
        {
            "funcName": "sub_409CB0",
            "funcStartAddr": "0x409cb0",
            "funcEndAddr": "0x409d03",
            "decompiledFuncCode": "__int64 __fastcall sub_409CB0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  _QWORD *v3; // rax\n  __int64 v4; // rsi\n  _QWORD *v5; // rbx\n\n  v2 = a2;\n  v3 = (_QWORD *)sub_409750(a1, a2);\n  v4 = *v3;\n  if ( !*v3 )\n    return 0LL;\n  v5 = v3;\n  while ( v4 != v2 )\n  {\n    if ( (*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v2) )\n      return *v5;\n    v5 = (_QWORD *)v5[1];\n    if ( !v5 )\n      return 0LL;\n    v4 = *v5;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_409D60",
            "funcStartAddr": "0x409d60",
            "funcEndAddr": "0x409dca",
            "decompiledFuncCode": "__int64 __fastcall sub_409D60(__int64 a1, __int64 a2)\n{\n  _QWORD *v2; // rcx\n  _QWORD *v3; // rdx\n  __int64 v4; // rax\n  __int64 result; // rax\n\n  v2 = (_QWORD *)sub_409750(a1, a2);\n  v3 = v2;\n  while ( 1 )\n  {\n    v4 = *v3;\n    v3 = (_QWORD *)v3[1];\n    if ( v4 == a2 )\n      break;\n    if ( !v3 )\n      goto LABEL_7;\n  }\n  if ( v3 )\n    return *v3;\nLABEL_7:\n  while ( 1 )\n  {\n    v2 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v2 )\n      break;\n    result = *v2;\n    if ( *v2 )\n      return result;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_409E40",
            "funcStartAddr": "0x409e40",
            "funcEndAddr": "0x409eb8",
            "decompiledFuncCode": "__int64 __fastcall sub_409E40(__int64 a1, unsigned __int8 (__fastcall *a2)(__int64, __int64), __int64 a3)\n{\n  __int64 *v3; // r14\n  __int64 v6; // rbp\n  __int64 v7; // rdi\n  __int64 *v9; // rbx\n\n  v3 = *(__int64 **)a1;\n  if ( *(_QWORD *)(a1 + 8) <= *(_QWORD *)a1 )\n    return 0LL;\n  v6 = 0LL;\n  while ( 1 )\n  {\n    v7 = *v3;\n    if ( *v3 )\n      break;\nLABEL_4:\n    v3 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v3 )\n      return v6;\n  }\n  v9 = v3;\n  while ( a2(v7, a3) )\n  {\n    v9 = (__int64 *)v9[1];\n    ++v6;\n    if ( !v9 )\n      goto LABEL_4;\n    v7 = *v9;\n  }\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_409F20",
            "funcStartAddr": "0x409f20",
            "funcEndAddr": "0x40a0aa",
            "decompiledFuncCode": "_QWORD *__fastcall sub_409F20(\n        __int64 a1,\n        __int64 a2,\n        unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2),\n        bool (__fastcall *a4)(__int64 a1, __int64 a2),\n        __int64 a5)\n{\n  bool (__fastcall *v6)(__int64, __int64); // r13\n  unsigned __int64 (__fastcall *v7)(__int64, unsigned __int64); // r12\n  char *v9; // rax\n  _QWORD *v10; // rbx\n  float **v11; // rdi\n  unsigned __int64 v12; // rbp\n  char *v13; // rax\n  void *v14; // rdi\n  float v16; // xmm1_4\n  float v17; // xmm0_4\n  float v18; // xmm0_4\n\n  v6 = a4;\n  v7 = a3;\n  if ( !a3 )\n    v7 = sub_409730;\n  if ( !a4 )\n    v6 = sub_409740;\n  v9 = (char *)malloc(0x50uLL);\n  v10 = v9;\n  if ( v9 )\n  {\n    v11 = (float **)(v9 + 40);\n    if ( a2 )\n    {\n      *((_QWORD *)v9 + 5) = a2;\n      if ( !(unsigned __int8)sub_4098A0(v11) )\n        goto LABEL_14;\n      if ( *(_BYTE *)(a2 + 16) )\n      {\nLABEL_9:\n        v12 = sub_409690(a1);\n        if ( (v12 & 0x1000000000000000LL) == 0 && !(v12 >> 61) )\n        {\n          v10[2] = v12;\n          if ( v12 )\n          {\n            v13 = (char *)calloc(v12, 0x10uLL);\n            *v10 = v13;\n            if ( v13 )\n            {\n              v10[3] = 0LL;\n              v10[4] = 0LL;\n              v10[1] = &v13[16 * v12];\n              v10[6] = v7;\n              v10[7] = v6;\n              v10[8] = a5;\n              v10[9] = 0LL;\n              return v10;\n            }\n          }\n        }\nLABEL_14:\n        v14 = v10;\n        v10 = 0LL;\n        free(v14);\n        return v10;\n      }\n      v16 = *(float *)(a2 + 8);\n      if ( a1 < 0 )\n        goto LABEL_23;\n    }\n    else\n    {\n      *((_QWORD *)v9 + 5) = &unk_40D6F0;\n      v16 = 0.80000001;\n      if ( !(unsigned __int8)sub_4098A0(v11) )\n        goto LABEL_14;\n      if ( a1 < 0 )\n      {\nLABEL_23:\n        v17 = (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1))\n            + (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1));\n        goto LABEL_19;\n      }\n    }\n    v17 = (float)(int)a1;\nLABEL_19:\n    v18 = v17 / v16;\n    if ( v18 >= 1.8446744e19 )\n      goto LABEL_14;\n    if ( v18 < 9.223372e18 )\n      a1 = (unsigned int)(int)v18;\n    else\n      a1 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n    goto LABEL_9;\n  }\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_40A0B0",
            "funcStartAddr": "0x40a0b0",
            "funcEndAddr": "0x40a158",
            "decompiledFuncCode": "void __fastcall sub_40A0B0(_QWORD *a1)\n{\n  _QWORD *v1; // r12\n  _QWORD *v2; // rbx\n  void (__fastcall *v3)(_QWORD); // rax\n  _QWORD *v4; // rdx\n  __int64 v5; // rcx\n\n  v1 = (_QWORD *)*a1;\n  if ( *a1 < a1[1] )\n  {\n    do\n    {\n      while ( !*v1 )\n      {\n        v1 += 2;\n        if ( a1[1] <= (unsigned __int64)v1 )\n          goto LABEL_12;\n      }\n      v2 = (_QWORD *)v1[1];\n      v3 = (void (__fastcall *)(_QWORD))a1[8];\n      if ( v2 )\n      {\n        do\n        {\n          if ( v3 )\n          {\n            v3(*v2);\n            v3 = (void (__fastcall *)(_QWORD))a1[8];\n          }\n          v4 = (_QWORD *)v2[1];\n          v5 = a1[9];\n          *v2 = 0LL;\n          v2[1] = v5;\n          a1[9] = v2;\n          v2 = v4;\n        }\n        while ( v4 );\n      }\n      if ( v3 )\n        v3(*v1);\n      *v1 = 0LL;\n      v1 += 2;\n      *(v1 - 1) = 0LL;\n    }\n    while ( a1[1] > (unsigned __int64)v1 );\n  }\nLABEL_12:\n  a1[3] = 0LL;\n  a1[4] = 0LL;\n}\n"
        },
        {
            "funcName": "sub_40A160",
            "funcStartAddr": "0x40a160",
            "funcEndAddr": "0x40a236",
            "decompiledFuncCode": "void __fastcall sub_40A160(_QWORD *ptr)\n{\n  _QWORD *v2; // rbp\n  unsigned __int64 v3; // rax\n  _QWORD *v4; // rbx\n  _QWORD *v5; // rdi\n  _QWORD *v6; // rbx\n  _QWORD *v7; // rdi\n  _QWORD *v8; // rbx\n\n  v2 = (_QWORD *)*ptr;\n  v3 = ptr[1];\n  if ( ptr[8] && ptr[4] )\n  {\n    if ( (unsigned __int64)v2 >= v3 )\n      goto LABEL_15;\n    do\n    {\n      while ( !*v2 )\n      {\n        v2 += 2;\n        if ( v3 <= (unsigned __int64)v2 )\n          goto LABEL_10;\n      }\n      v4 = v2;\n      do\n      {\n        ((void (*)(void))ptr[8])();\n        v4 = (_QWORD *)v4[1];\n      }\n      while ( v4 );\n      v3 = ptr[1];\n      v2 += 2;\n    }\n    while ( v3 > (unsigned __int64)v2 );\nLABEL_10:\n    v2 = (_QWORD *)*ptr;\n  }\n  if ( (unsigned __int64)v2 < v3 )\n  {\n    do\n    {\n      v5 = (_QWORD *)v2[1];\n      if ( v5 )\n      {\n        do\n        {\n          v6 = (_QWORD *)v5[1];\n          free(v5);\n          v5 = v6;\n        }\n        while ( v6 );\n      }\n      v2 += 2;\n    }\n    while ( ptr[1] > (unsigned __int64)v2 );\n  }\nLABEL_15:\n  v7 = (_QWORD *)ptr[9];\n  if ( v7 )\n  {\n    do\n    {\n      v8 = (_QWORD *)v7[1];\n      free(v7);\n      v7 = v8;\n    }\n    while ( v8 );\n  }\n  free((void *)*ptr);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_40A240",
            "funcStartAddr": "0x401e37",
            "funcEndAddr": "0x401e3c",
            "decompiledFuncCode": "__int64 __fastcall sub_40A240(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_409690(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_409920((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_409920(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_409920(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n\n__int64 __fastcall sub_40A240(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_409690(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_409920((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_409920(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_409920(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_40A240",
            "funcStartAddr": "0x401e37",
            "funcEndAddr": "0x401e3c",
            "decompiledFuncCode": "__int64 __fastcall sub_40A240(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_409690(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_409920((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_409920(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_409920(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n\n__int64 __fastcall sub_40A240(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_409690(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_409920((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_409920(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_409920(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_40A440",
            "funcStartAddr": "0x401e3c",
            "funcEndAddr": "0x401e41",
            "decompiledFuncCode": "__int64 __fastcall sub_40A440(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_409780(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_4098A0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40A240(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_409780(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40A440(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_409780(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_4098A0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40A240(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_409780(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A440",
            "funcStartAddr": "0x401e3c",
            "funcEndAddr": "0x401e41",
            "decompiledFuncCode": "__int64 __fastcall sub_40A440(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_409780(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_4098A0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40A240(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_409780(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40A440(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_409780(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_4098A0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40A240(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_409780(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A6C0",
            "funcStartAddr": "0x40a6c0",
            "funcEndAddr": "0x40a6fb",
            "decompiledFuncCode": "__int64 __fastcall sub_40A6C0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  int v3; // eax\n  __int64 v5; // [rsp+8h] [rbp-10h] BYREF\n\n  v2 = a2;\n  v3 = sub_40A440(a1, a2, &v5);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( !v3 )\n    return v5;\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40A700",
            "funcStartAddr": "0x40a700",
            "funcEndAddr": "0x40a8d7",
            "decompiledFuncCode": "__int64 __fastcall sub_40A700(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rbp\n  __m128i *v4; // rax\n  __int64 v6; // rax\n  float *v7; // rdx\n  float v8; // xmm0_4\n  __int64 v9; // rax\n  float v10; // xmm1_4\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  float v13; // xmm0_4\n  __int64 v14; // rax\n  float v15; // xmm1_4\n  float v16; // xmm0_4\n  __int64 v17; // rsi\n  _QWORD *v18; // rdi\n  _QWORD *v19; // r12\n  int v20; // edx\n  float v21; // xmm0_4\n  __int64 v22; // rcx\n  __int64 v23; // rcx\n  __m128i *v24; // [rsp+8h] [rbp-20h] BYREF\n\n  v3 = sub_409780(a1, a2, &v24, 1);\n  if ( !v3 )\n    return v3;\n  v4 = v24;\n  --*(_QWORD *)(a1 + 32);\n  if ( v4->m128i_i64[0] )\n    return v3;\n  v6 = *(_QWORD *)(a1 + 24) - 1LL;\n  *(_QWORD *)(a1 + 24) = v6;\n  if ( v6 < 0 )\n  {\n    v20 = v6 & 1 | ((unsigned __int64)v6 >> 1);\n    v9 = *(_QWORD *)(a1 + 16);\n    v21 = (float)v20;\n    v7 = *(float **)(a1 + 40);\n    v8 = v21 + v21;\n    if ( v9 >= 0 )\n      goto LABEL_6;\nLABEL_22:\n    v10 = (float)(v9 & 1 | (unsigned int)((unsigned __int64)v9 >> 1))\n        + (float)(v9 & 1 | (unsigned int)((unsigned __int64)v9 >> 1));\n    goto LABEL_7;\n  }\n  v7 = *(float **)(a1 + 40);\n  v8 = (float)(int)v6;\n  v9 = *(_QWORD *)(a1 + 16);\n  if ( v9 < 0 )\n    goto LABEL_22;\nLABEL_6:\n  v10 = (float)(int)v9;\nLABEL_7:\n  if ( (float)(v10 * *v7) > v8 )\n  {\n    sub_4098A0((float **)(a1 + 40));\n    v11 = *(_QWORD *)(a1 + 16);\n    v12 = *(_QWORD *)(a1 + 40);\n    if ( v11 < 0 )\n    {\n      v23 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n      v13 = (float)(int)v23 + (float)(int)v23;\n    }\n    else\n    {\n      v13 = (float)(int)v11;\n    }\n    v14 = *(_QWORD *)(a1 + 24);\n    if ( v14 < 0 )\n    {\n      v22 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n      v15 = (float)(int)v22 + (float)(int)v22;\n    }\n    else\n    {\n      v15 = (float)(int)v14;\n    }\n    if ( (float)(*(float *)v12 * v13) > v15 )\n    {\n      v16 = v13 * *(float *)(v12 + 4);\n      if ( !*(_BYTE *)(v12 + 16) )\n        v16 = v16 * *(float *)(v12 + 8);\n      if ( v16 >= 9.223372e18 )\n        v17 = (unsigned int)(int)(float)(v16 - 9.223372e18) ^ 0x8000000000000000LL;\n      else\n        v17 = (unsigned int)(int)v16;\n      if ( !(unsigned __int8)sub_40A240(a1, v17) )\n      {\n        v18 = *(_QWORD **)(a1 + 72);\n        if ( v18 )\n        {\n          do\n          {\n            v19 = (_QWORD *)v18[1];\n            free(v18);\n            v18 = v19;\n          }\n          while ( v19 );\n        }\n        *(_QWORD *)(a1 + 72) = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40A8E0",
            "funcStartAddr": "0x40a8e0",
            "funcEndAddr": "0x40a8fb",
            "decompiledFuncCode": "void __fastcall sub_40A8E0(__int64 a1, int a2)\n{\n  *(_QWORD *)(a1 + 20) = 0LL;\n  *(_BYTE *)(a1 + 28) = 1;\n  *(_DWORD *)a1 = a2;\n  *(_DWORD *)(a1 + 4) = a2;\n  *(_DWORD *)(a1 + 8) = a2;\n  *(_DWORD *)(a1 + 12) = a2;\n  *(_DWORD *)(a1 + 16) = a2;\n}\n"
        },
        {
            "funcName": "sub_40A900",
            "funcStartAddr": "0x40a900",
            "funcEndAddr": "0x40a905",
            "decompiledFuncCode": "__int64 __fastcall sub_40A900(__int64 a1)\n{\n  return *(unsigned __int8 *)(a1 + 28);\n}\n"
        },
        {
            "funcName": "sub_40A910",
            "funcStartAddr": "0x40a910",
            "funcEndAddr": "0x40a945",
            "decompiledFuncCode": "__int64 __fastcall sub_40A910(__int64 a1, int a2)\n{\n  char v2; // dl\n  int v3; // ecx\n  _DWORD *v4; // r8\n  __int64 result; // rax\n  int v6; // esi\n\n  v2 = *(_BYTE *)(a1 + 28) ^ 1;\n  v3 = (v2 + (unsigned __int8)*(_DWORD *)(a1 + 20)) & 3;\n  v4 = (_DWORD *)(a1 + 4LL * ((v2 + (unsigned __int8)*(_DWORD *)(a1 + 20)) & 3));\n  result = (unsigned int)*v4;\n  *v4 = a2;\n  v6 = *(_DWORD *)(a1 + 24);\n  *(_DWORD *)(a1 + 20) = v3;\n  if ( v6 == v3 )\n    *(_DWORD *)(a1 + 24) = ((_BYTE)v6 + v2) & 3;\n  *(_BYTE *)(a1 + 28) = 0;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A950",
            "funcStartAddr": "0x401e41",
            "funcEndAddr": "0x401e46",
            "decompiledFuncCode": "__int64 __fastcall sub_40A950(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n\n__int64 __fastcall sub_40A950(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A950",
            "funcStartAddr": "0x401e41",
            "funcEndAddr": "0x401e46",
            "decompiledFuncCode": "__int64 __fastcall sub_40A950(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n\n__int64 __fastcall sub_40A950(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A9A0",
            "funcStartAddr": "0x40a9a0",
            "funcEndAddr": "0x40af02",
            "decompiledFuncCode": "const char *sub_40A9A0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_40AFB0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_40AFB0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40AF10",
            "funcStartAddr": "0x40af10",
            "funcEndAddr": "0x40af5a",
            "decompiledFuncCode": "__int64 __fastcall sub_40AF10(int a1, const char *a2, char a3, unsigned int a4)\n{\n  __int64 v4; // rcx\n  int v5; // eax\n\n  v4 = 0LL;\n  if ( (a3 & 0x40) != 0 )\n    v4 = a4;\n  v5 = openat(a1, a2, a3, v4);\n  return sub_40AF60(v5);\n}\n"
        },
        {
            "funcName": "sub_40AF60",
            "funcStartAddr": "0x40af60",
            "funcEndAddr": "0x40afae",
            "decompiledFuncCode": "__int64 __fastcall sub_40AF60(unsigned int fd)\n{\n  __int64 result; // rax\n  unsigned int v2; // r12d\n  int *v3; // rax\n  int v4; // r13d\n  int *v5; // rbp\n\n  if ( fd > 2 )\n    return fd;\n  v2 = sub_40B170();\n  v3 = __errno_location();\n  v4 = *v3;\n  v5 = v3;\n  close(fd);\n  result = v2;\n  *v5 = v4;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40AFB0",
            "funcStartAddr": "0x40afb0",
            "funcEndAddr": "0x40b02b",
            "decompiledFuncCode": "int __fastcall sub_40AFB0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !sub_406300(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B030",
            "funcStartAddr": "0x40b030",
            "funcEndAddr": "0x40b165",
            "decompiledFuncCode": "__int64 __fastcall sub_40B030(int a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ebx\n  int v8; // eax\n  int *v9; // rax\n  int v10; // edi\n  int v11; // r12d\n  int *v12; // rbp\n  int v13; // ecx\n  int v14; // r8d\n  int v15; // r9d\n  int v16; // [rsp+30h] [rbp-38h]\n\n  v16 = a3;\n  if ( a2 == 1030 )\n  {\n    if ( dword_610500 < 0 )\n    {\n      v6 = sub_40B030(a1, 0, a3, a4, a5, a6);\n      if ( v6 >= 0 && dword_610500 == -1 )\n      {\nLABEL_8:\n        v8 = fcntl(v6, 1);\n        if ( v8 < 0 || fcntl(v6, 2, v8 | 1u) == -1 )\n        {\n          v9 = __errno_location();\n          v10 = v6;\n          v6 = -1;\n          v11 = *v9;\n          v12 = v9;\n          close(v10);\n          *v12 = v11;\n        }\n      }\n    }\n    else\n    {\n      v6 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v6 < 0 && *__errno_location() == 22 )\n      {\n        v6 = sub_40B030(a1, 0, v16, v13, v14, v15);\n        if ( v6 >= 0 )\n        {\n          dword_610500 = -1;\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        dword_610500 = 1;\n      }\n    }\n    return (unsigned int)v6;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "sub_40B170",
            "funcStartAddr": "0x40b170",
            "funcEndAddr": "0x40b17e",
            "decompiledFuncCode": "__int64 __fastcall sub_40B170(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_40B030(a1, 0, 3LL, a4, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_40B1F0",
            "funcStartAddr": "0x40b1f0",
            "funcEndAddr": "0x40b208",
            "decompiledFuncCode": "int __fastcall sub_40B1F0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_610268 )\n    v1 = (void *)qword_610268;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_40B208",
            "funcStartAddr": "0x40b208",
            "funcEndAddr": "0x40b228",
            "decompiledFuncCode": "__int64 __fastcall sub_40B208(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_60FE30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 144
}