{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_tail.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401e60",
            "funcEndAddr": "0x4046d6",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  __int64 v3; // r13\n  char *v5; // rdi\n  int v6; // eax\n  char *v7; // rdx\n  char *v8; // rdi\n  __int64 v9; // rax\n  char **v10; // r12\n  __int64 v11; // rbx\n  int v12; // ebp\n  int v13; // eax\n  __int64 v14; // rdx\n  unsigned int v15; // r14d\n  char *v16; // rax\n  char *v17; // r8\n  char *v18; // rax\n  char *v19; // rax\n  char v20; // r12\n  int v21; // eax\n  char *v22; // rdx\n  int v23; // ecx\n  char *v24; // rax\n  unsigned int v25; // ecx\n  char v26; // r14\n  __pid_t v27; // edi\n  __int64 v28; // rcx\n  void **v29; // rbp\n  bool v30; // cf\n  bool v31; // zf\n  __int64 v32; // r8\n  __int64 v33; // r9\n  void **v34; // r12\n  void **v35; // rax\n  const char *v36; // rsi\n  __int64 v37; // rcx\n  const char *v38; // rdi\n  __int64 v39; // rax\n  __int64 v40; // r8\n  __int64 v41; // r9\n  char *v42; // rdx\n  __int64 v43; // r15\n  bool v44; // cf\n  bool v45; // zf\n  char *v46; // r14\n  __int64 v47; // rcx\n  const char *v48; // rdi\n  const char *v49; // rax\n  const char *v50; // rsi\n  __int64 v51; // rax\n  __int64 v52; // rsi\n  __int64 v53; // rdx\n  __int64 v54; // rcx\n  __int64 v55; // r8\n  __int64 v56; // r9\n  char *v57; // rax\n  __int64 v58; // rdx\n  __int64 v59; // rcx\n  __int64 v60; // r8\n  __int64 v61; // r9\n  char *v62; // r14\n  size_t v63; // rbx\n  __int64 v64; // rdi\n  __int64 v65; // rbp\n  unsigned int v66; // r12d\n  __int64 v67; // rsi\n  __int64 v68; // rax\n  __int64 v69; // rcx\n  __int64 v70; // r8\n  __int64 v71; // r9\n  __int64 v72; // rdx\n  __int64 v73; // rdi\n  char *v74; // r12\n  const char *v75; // rsi\n  char *v76; // rax\n  char *v77; // rax\n  char *v78; // rax\n  int v79; // eax\n  char v80; // bl\n  int *v81; // rax\n  int *v82; // rbp\n  int v83; // eax\n  __int64 v84; // rax\n  __int64 v85; // rdx\n  __int64 v86; // rcx\n  __int64 v87; // r8\n  __int64 v88; // r9\n  __int64 v89; // rbx\n  char *v90; // rax\n  __int64 result; // rax\n  __int64 v92; // rdx\n  __int64 v93; // rcx\n  __int64 v94; // r8\n  __int64 v95; // r9\n  __int64 v96; // rcx\n  __int64 v97; // rax\n  __int64 v98; // rax\n  __int64 v99; // rdx\n  __int64 v100; // rcx\n  __int64 v101; // r8\n  __int64 v102; // r9\n  __int64 v103; // rbp\n  char *v104; // rbx\n  int *v105; // rax\n  unsigned int v106; // eax\n  const char *v107; // rax\n  const char *v108; // rdx\n  int v109; // eax\n  const char *v110; // rdi\n  __dev_t st_dev; // rcx\n  __time_t tv_sec; // rcx\n  __syscall_slong_t tv_nsec; // rcx\n  __int64 v114; // rax\n  char *v115; // rbp\n  __int64 v116; // rcx\n  __int64 v117; // rcx\n  char *v118; // rdi\n  char *v119; // rbx\n  int *v120; // rax\n  const char *v121; // rdi\n  int *v122; // rbx\n  __int64 v123; // rax\n  __int64 v124; // rdx\n  __int64 v125; // rcx\n  __int64 v126; // r8\n  __int64 v127; // r9\n  __int64 v128; // rbp\n  char *v129; // rax\n  __int64 v130; // rdi\n  __int64 v131; // rax\n  unsigned __int64 v132; // r12\n  __int64 v133; // rax\n  _QWORD *v134; // rbp\n  __int64 v135; // rdx\n  __int64 v136; // rcx\n  __int64 v137; // r8\n  __int64 v138; // r9\n  _QWORD *v139; // r14\n  _QWORD *v140; // rbx\n  unsigned __int64 v141; // rax\n  __int64 v142; // rax\n  size_t v143; // rax\n  __int64 v144; // rcx\n  __int64 v145; // r8\n  __int64 v146; // r9\n  __int64 v147; // rdx\n  size_t v148; // rsi\n  unsigned int v149; // eax\n  __int64 v150; // rbx\n  char *v151; // rbp\n  int *v152; // rax\n  __int64 v153; // rbx\n  char *v154; // rbp\n  int *v155; // rax\n  __off_t st_size; // rbp\n  signed __int64 v157; // rbx\n  __blksize_t st_blksize; // rax\n  unsigned int v159; // r12d\n  char *v160; // rax\n  __int64 v161; // rdi\n  __int64 v162; // rbx\n  __int64 v163; // rax\n  __int64 v164; // rbx\n  __int64 i; // rbx\n  __int64 v166; // rsi\n  __off_t v167; // rbx\n  signed __int64 v168; // rax\n  __int64 v169; // rax\n  unsigned __int64 v170; // rbp\n  __int64 v171; // r12\n  __int64 v172; // rbx\n  int v173; // edi\n  bool v174; // dl\n  unsigned __int64 v175; // rbx\n  __int64 v176; // rax\n  __int64 v177; // rax\n  char v178; // cl\n  char *v179; // rbx\n  __int64 v180; // rax\n  int v181; // edx\n  int v182; // ecx\n  int v183; // r8d\n  int v184; // r9d\n  int v185; // eax\n  int v186; // eax\n  int v187; // ecx\n  int v188; // r8d\n  int v189; // r9d\n  int v190; // edx\n  __off_t v191; // rcx\n  __int64 v192; // rax\n  char *v193; // rdi\n  unsigned __int64 v194; // rax\n  char *v195; // rax\n  int *v196; // rax\n  char v197; // al\n  char *v198; // rbx\n  __int64 v199; // rax\n  __int64 v200; // rbp\n  char *v201; // rax\n  char *v202; // rax\n  __off_t v203; // rax\n  __mode_t st_mode; // eax\n  __time_t v205; // rdx\n  __syscall_slong_t v206; // rcx\n  int v207; // r12d\n  const char *v208; // rdx\n  int *v209; // rax\n  unsigned __int64 v210; // rax\n  char *v211; // rax\n  int *v212; // rax\n  int *v213; // r12\n  const char *v214; // rax\n  void *v215; // rdi\n  _QWORD *v216; // rbx\n  __int64 v217; // rcx\n  __int64 v218; // rsi\n  unsigned __int64 v219; // rax\n  __int64 v220; // rsi\n  __int64 v221; // rsi\n  _QWORD *v222; // rbx\n  __int64 v223; // rbx\n  char *v224; // r12\n  int *v225; // rax\n  char *v226; // rax\n  __int64 v227; // rbx\n  char *v228; // r12\n  int *v229; // rax\n  _QWORD *v230; // rdi\n  __int64 v231; // rbx\n  char *v232; // rax\n  const char **v233; // rbx\n  fd_set *p_stat_buf; // r15\n  __int64 v235; // rax\n  int v236; // edx\n  int v237; // eax\n  char *v238; // rsi\n  __int64 v239; // rcx\n  __int64 v240; // r8\n  __int64 v241; // r9\n  __int64 v242; // rdx\n  int v243; // eax\n  const char *v244; // rbp\n  char *v245; // rbx\n  const char *v246; // r15\n  unsigned __int64 v247; // kr08_8\n  __int64 v248; // r14\n  const char *v249; // rsi\n  int v250; // eax\n  int *v251; // r14\n  char *v252; // rax\n  char *v253; // rbx\n  int *v254; // rax\n  unsigned __int64 v255; // rbx\n  int v256; // esi\n  int v257; // esi\n  __int64 v258; // rbx\n  char *v259; // rax\n  char *v260; // rbx\n  int *v261; // rax\n  int *v262; // rax\n  int *v263; // rax\n  unsigned __int64 v264; // rbx\n  char *v265; // rax\n  const char *v266; // rax\n  __int64 v267; // rax\n  struct timeval *p_timeout; // r8\n  int v269; // edi\n  int v270; // eax\n  __int64 v271; // rdx\n  int v272; // r9d\n  int v273; // ebx\n  __int64 v274; // rbp\n  char *v275; // r15\n  unsigned int v276; // r14d\n  int v277; // r13d\n  unsigned __int64 v278; // rbx\n  int v279; // eax\n  __int64 v280; // rdx\n  char *v281; // rbx\n  int v282; // eax\n  char *v283; // rax\n  __int64 v284; // rax\n  int *v285; // rax\n  __int64 v286; // rax\n  char *v287; // rax\n  __int64 v288; // rdx\n  __int64 v289; // rcx\n  int *v290; // r8\n  __int64 v291; // r9\n  char *v292; // rax\n  int v293; // esi\n  __int64 v294; // rax\n  __int64 v295; // rdx\n  __int64 v296; // rax\n  __int64 v297; // rax\n  __int64 v298; // rdx\n  __int64 v299; // rcx\n  __int64 v300; // r8\n  __int64 v301; // r9\n  __int64 v302; // rbp\n  char *v303; // r12\n  int *v304; // rbx\n  char *v305; // r14\n  __int64 v306; // rdx\n  __int64 v307; // rcx\n  int *v308; // rbx\n  __int64 v309; // r8\n  __int64 v310; // r9\n  __int64 v311; // rbp\n  char *v312; // rax\n  int *v313; // rax\n  char *v314; // rbx\n  int *v315; // rax\n  char *v316; // rax\n  __int64 v317; // [rsp+0h] [rbp-208h]\n  int *fildes; // [rsp+8h] [rbp-200h]\n  char fildesa; // [rsp+8h] [rbp-200h]\n  char *v320; // [rsp+10h] [rbp-1F8h]\n  __int64 ptr; // [rsp+18h] [rbp-1F0h]\n  char *buf; // [rsp+20h] [rbp-1E8h]\n  char bufa; // [rsp+20h] [rbp-1E8h]\n  __off_t offset; // [rsp+28h] [rbp-1E0h]\n  uint32_t mask; // [rsp+34h] [rbp-1D4h]\n  double v326; // [rsp+38h] [rbp-1D0h]\n  char v327; // [rsp+40h] [rbp-1C8h]\n  __int64 v328; // [rsp+40h] [rbp-1C8h]\n  char *v329; // [rsp+48h] [rbp-1C0h]\n  unsigned __int64 v330; // [rsp+50h] [rbp-1B8h]\n  int v331; // [rsp+58h] [rbp-1B0h]\n  char *v332; // [rsp+60h] [rbp-1A8h]\n  __int64 v333; // [rsp+68h] [rbp-1A0h]\n  unsigned __int64 v334; // [rsp+70h] [rbp-198h]\n  __int64 v335; // [rsp+70h] [rbp-198h]\n  fd_set *v336; // [rsp+78h] [rbp-190h]\n  __int64 v337; // [rsp+78h] [rbp-190h]\n  int *s1; // [rsp+80h] [rbp-188h]\n  char v339; // [rsp+8Bh] [rbp-17Dh]\n  int v340; // [rsp+8Ch] [rbp-17Ch]\n  unsigned __int64 v341; // [rsp+90h] [rbp-178h]\n  unsigned __int64 v342; // [rsp+98h] [rbp-170h] BYREF\n  struct timeval timeout; // [rsp+A0h] [rbp-168h] BYREF\n  struct stat v344; // [rsp+B0h] [rbp-158h] BYREF\n  struct stat stat_buf; // [rsp+140h] [rbp-C8h] BYREF\n\n  v341 = 10LL;\n  sub_407B40(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40C180(sub_406590);\n  byte_61237A = 0;\n  byte_612385 = 1;\n  byte_612381 = 0;\n  byte_612382 = 0;\n  byte_612384 = 0;\n  byte_612380 = 10;\n  if ( a1 != 2 )\n  {\n    if ( a1 == 3 )\n    {\n      v5 = a2[2];\n      if ( *v5 != 45 || !v5[1] )\n        goto LABEL_6;\n    }\n    else\n    {\n      if ( a1 != 4 )\n        goto LABEL_8;\n      v5 = a2[2];\n    }\n    if ( strcmp(v5, \"--\") )\n      goto LABEL_8;\n  }\nLABEL_6:\n  v6 = sub_407AC0();\n  v7 = a2[1];\n  v8 = v7 + 1;\n  if ( *v7 == 43 )\n  {\n    v20 = 1;\n    if ( (unsigned int)(v6 - 200112) <= 0x2B8 )\n      goto LABEL_8;\n  }\n  else\n  {\n    if ( *v7 != 45 || v6 > 200111 && !v7[(v7[1] == 99) + 1] )\n      goto LABEL_8;\n    v20 = 0;\n  }\n  v21 = v7[1];\n  v22 = v7 + 1;\n  LOBYTE(v23) = v21;\n  if ( (unsigned int)(v21 - 48) <= 9 )\n  {\n    do\n      v23 = *++v22;\n    while ( (unsigned int)(v23 - 48) <= 9 );\n  }\n  switch ( (_BYTE)v23 )\n  {\n    case 'c':\n      v3 = 0LL;\n      v25 = 10;\n      break;\n    case 'l':\n      v3 = 1LL;\n      v25 = 10;\n      break;\n    case 'b':\n      v3 = 0LL;\n      v25 = 5120;\n      break;\n    default:\n      v24 = v22;\n      v3 = 1LL;\n      v25 = 10;\n      goto LABEL_66;\n  }\n  v24 = v22 + 1;\nLABEL_66:\n  v26 = 0;\n  if ( *v24 == 102 )\n  {\n    ++v24;\n    v26 = 1;\n  }\n  if ( !*v24 )\n  {\n    if ( v8 == v22 )\n    {\n      v341 = v25;\n      goto LABEL_71;\n    }\n    if ( (sub_40A260(v8) & 0xFFFFFFFD) == 0 )\n    {\nLABEL_71:\n      byte_612382 = v20;\n      v9 = 1LL;\n      byte_612385 = v3;\n      byte_612384 = v26;\n      goto LABEL_9;\n    }\n    v244 = (const char *)sub_409760(a2[1], 0LL);\n    v245 = dcgettext(0LL, \"invalid number\", 5);\n    v263 = __errno_location();\n    error(1, *v263, \"%s: %s\", v245, v244);\nLABEL_413:\n    v238 = v245;\n    if ( !sub_407800(ptr, v245) )\n      goto LABEL_499;\n    fildesa = v327;\nLABEL_415:\n    v245 += 96;\n    if ( v329 != v245 )\n      goto LABEL_387;\n    p_stat_buf = (fd_set *)offset;\n    if ( dword_6122A8 == 2 )\n    {\n      if ( v20 )\n        goto LABEL_399;\n      if ( !fildesa )\n        return 1LL;\n    }\n    v264 = v330;\n    v342 = v330 + v333 - 96;\n    do\n    {\n      if ( !*(_BYTE *)(v264 + 52) )\n      {\n        if ( dword_6122A8 == 1 )\n        {\n          sub_4056E0(v264, 0LL);\n        }\n        else if ( *(_DWORD *)(v264 + 56) != -1\n               && !__xstat(1, *(const char **)v264, (struct stat *)offset)\n               && (*(_QWORD *)(v264 + 32) != stat_buf.st_dev || *(_QWORD *)(v264 + 40) != stat_buf.st_ino) )\n        {\n          v297 = sub_4047E0(*(_QWORD *)v264);\n          v302 = sub_409510(4LL, v297, v298, v299, v300, v301);\n          v303 = dcgettext(0LL, \"%s was replaced\", 5);\n          v304 = __errno_location();\n          error(0, *v304, v303, v302);\n          sub_4072A0((void *)ptr);\n          *v304 = 0;\n          goto LABEL_400;\n        }\n        v238 = (char *)&v342;\n        sub_404F00(v264, &v342);\n      }\n      v264 += 96LL;\n    }\n    while ( v329 != (char *)v264 );\n    v266 = v244 + 17;\n    v46 = 0LL;\n    v170 = 0LL;\n    offset = (__off_t)v266;\n    v331 = 3;\n    buf = (char *)sub_409DD0(v266, v238, v242, v239, v240, v241);\n    v171 = 1LL << v3;\n    fildes = (int *)(int)v3;\n    while ( 1 )\n    {\nLABEL_430:\n      if ( dword_6122A8 == 1 && !byte_612386 && !sub_406BD0(ptr) )\n      {\n        v283 = dcgettext(0LL, \"no files remaining\", 5);\n        error(0, 0, v283);\n        return 1LL;\n      }\n      while ( 1 )\n      {\n        do\n        {\n          if ( v170 < (unsigned __int64)v46 )\n            goto LABEL_448;\n          if ( pid )\n          {\n            if ( (_BYTE)v320 )\n              exit(0);\n            if ( !kill(pid, 0) || *__errno_location() == 1 )\n            {\n              timeout.tv_sec = (unsigned int)(int)v326;\n              timeout.tv_usec = (unsigned int)(int)(1000000.0 * (v326 - (double)(int)v326));\n            }\n            else\n            {\n              timeout.tv_usec = 0LL;\n              timeout.tv_sec = 0LL;\n              LOBYTE(v320) = v327;\n            }\n          }\n          memset(p_stat_buf, 0, sizeof(fd_set));\n          v267 = __fdelt_chk(fildes);\n          *(&stat_buf.st_dev + v267) |= v171;\n          if ( byte_612383 )\n            stat_buf.st_dev |= 2uLL;\n          p_timeout = 0LL;\n          v269 = 1;\n          if ( pid )\n            p_timeout = &timeout;\n          if ( (int)v3 > 0 )\n            v269 = v3;\n          v270 = select(v269 + 1, p_stat_buf, 0LL, 0LL, p_timeout);\n        }\n        while ( !v270 );\n        if ( v270 == -1 )\n        {\n          v314 = dcgettext(0LL, \"error waiting for inotify and output events\", 5);\n          v315 = __errno_location();\n          error(1, *v315, v314);\nLABEL_505:\n          fildes = v290;\n          v316 = dcgettext(0LL, \"inotify resources exhausted\", 5);\n          error(0, 0, v316);\n          sub_4072A0((void *)ptr);\n          *fildes = 0;\n          goto LABEL_400;\n        }\n        if ( (stat_buf.st_dev & 2) == 0 )\n          break;\n        raise(13);\n      }\n      v284 = sub_409780(v3, buf, offset);\n      v46 = (char *)v284;\n      if ( !v284 )\n        goto LABEL_477;\n      v170 = 0LL;\n      if ( v284 == -1 )\n      {\n        if ( *__errno_location() == 22 )\n        {\nLABEL_477:\n          if ( v331 )\n          {\n            v46 = 0LL;\n            v170 = 0LL;\n            --v331;\n            offset *= 2LL;\n            buf = (char *)sub_409E30(buf, offset);\n            continue;\n          }\n        }\n        v281 = dcgettext(0LL, \"error reading inotify event\", 5);\n        v285 = __errno_location();\n        error(1, *v285, v281);\n        goto LABEL_471;\n      }\nLABEL_448:\n      v271 = *(unsigned int *)&buf[v170 + 12];\n      v272 = *(_DWORD *)&buf[v170 + 4];\n      v332 = &buf[v170];\n      v273 = *(_DWORD *)&buf[v170];\n      v170 += v271 + 16;\n      if ( (v272 & 0x400) == 0 )\n      {\n        if ( !(_DWORD)v271 )\n          goto LABEL_462;\n        goto LABEL_450;\n      }\n      if ( !(_DWORD)v271 )\n        break;\nLABEL_450:\n      v334 = v170;\n      v336 = p_stat_buf;\n      v274 = 0LL;\n      v275 = v46;\n      v276 = v3;\n      v277 = v273;\n      v278 = v330;\n      while ( 1 )\n      {\n        if ( *(_DWORD *)(v278 + 72) == v277 )\n        {\n          v340 = v272;\n          v279 = strcmp(v332 + 16, (const char *)(*(_QWORD *)v278 + *(_QWORD *)(v278 + 80)));\n          v272 = v340;\n          if ( !v279 )\n            break;\n        }\n        ++v274;\n        v278 += 96LL;\n        if ( v317 == v274 )\n        {\n          v3 = v276;\n          v170 = v334;\n          v46 = v275;\n          p_stat_buf = v336;\n          goto LABEL_430;\n        }\n      }\n      v280 = v274;\n      v3 = v276;\n      v170 = v334;\n      v46 = v275;\n      p_stat_buf = v336;\n      v281 = (char *)(v330 + 96 * v280);\n      if ( (v340 & 0x200) != 0 )\n      {\n        if ( dword_6122A8 == 1 )\n          goto LABEL_497;\nLABEL_456:\n        if ( v281 )\n          goto LABEL_457;\n      }\n      else\n      {\n        LODWORD(v334) = inotify_add_watch(v3, *(const char **)v281, mask);\n        if ( (v334 & 0x80000000) != 0LL )\n        {\n          v290 = __errno_location();\n          if ( (*v290 & 0xFFFFFFEF) == 12 )\n            goto LABEL_505;\n          s1 = v290;\n          v337 = sub_409510(4LL, *(_QWORD *)v281, v288, v289, v290, v291);\n          v292 = dcgettext(0LL, \"cannot watch %s\", 5);\n          error(0, *s1, v292, v337);\n        }\n        v293 = *((_DWORD *)v281 + 17);\n        if ( v293 >= 0 && (_DWORD)v334 == v293 )\n          goto LABEL_496;\n        if ( v293 >= 0 )\n        {\n          inotify_rm_watch(v3, v293);\n          sub_407840(ptr, v281);\n        }\n        *((_DWORD *)v281 + 17) = v334;\n        if ( (_DWORD)v334 != -1 )\n        {\n          v294 = sub_407840(ptr, v281);\n          v295 = v294;\n          if ( v294 && v281 != (char *)v294 )\n          {\n            if ( dword_6122A8 == 1 )\n              goto LABEL_503;\n            goto LABEL_494;\n          }\n          goto LABEL_495;\n        }\n      }\n    }\n    v286 = 0LL;\n    while ( *(_DWORD *)(v330 + 96 * v286 + 72) != v273 )\n    {\n      if ( v317 == ++v286 )\n      {\nLABEL_462:\n        HIDWORD(stat_buf.st_blocks) = v273;\n        v281 = (char *)sub_406DF0(ptr, p_stat_buf);\n        goto LABEL_456;\n      }\n    }\n    sub_4072A0((void *)ptr);\n    v287 = dcgettext(0LL, \"directory containing watched file was removed\", 5);\n    error(0, 0, v287);\n    *__errno_location() = 0;\nLABEL_400:\n    v253 = dcgettext(0LL, \"inotify cannot be used, reverting to polling\", 5);\n    v254 = __errno_location();\n    error(0, *v254, v253);\n    v255 = v330;\n    LODWORD(v170) = (_DWORD)v329;\n    do\n    {\n      v256 = *(_DWORD *)(v255 + 68);\n      if ( v256 != -1 )\n        inotify_rm_watch(v3, v256);\n      v257 = *(_DWORD *)(v255 + 72);\n      if ( v257 != -1 )\n        inotify_rm_watch(v3, v257);\n      v255 += 96LL;\n    }\n    while ( v329 != (char *)v255 );\nLABEL_264:\n    byte_612378 = 1;\n    if ( pid || dword_6122A8 != 2 || v317 != 1 || *(_DWORD *)(v330 + 56) == -1 )\n    {\n      LODWORD(v43) = 0;\n    }\n    else\n    {\n      LODWORD(fildes) = *(_DWORD *)(v330 + 48);\n      LODWORD(v43) = ((unsigned __int16)fildes & 0xF000) != 0x8000;\n    }\n    LOBYTE(mask) = 0;\n    LOBYTE(buf) = v43 & 1;\n    v320 = (char *)(v317 - 1);\n    ptr = v330 + v333 + 52;\nLABEL_269:\n    v46 = (char *)v330;\n    LOBYTE(fildes) = 0;\n    v179 = 0LL;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        if ( v46[52] )\n          goto LABEL_278;\n        v170 = *((unsigned int *)v46 + 14);\n        if ( (v170 & 0x80000000) == 0LL )\n          break;\n        v193 = v46;\n        ++v179;\n        v46 += 96;\n        sub_4056E0(v193, (unsigned int)v43);\n        if ( (char *)v317 == v179 )\n        {\nLABEL_282:\n          if ( !byte_612386 || dword_6122A8 != 1 )\n          {\n            v194 = v330 + 52;\n            do\n            {\n              if ( *(int *)(v194 + 4) >= 0 || *(_BYTE *)v194 != 1 && byte_612386 )\n                goto LABEL_326;\n              v194 += 96LL;\n            }\n            while ( ptr != v194 );\n            v195 = dcgettext(0LL, \"no files remaining\", 5);\n            error(0, 0, v195);\n            while ( 1 )\n            {\nLABEL_149:\n              if ( !byte_61237A || close(0) >= 0 )\n                return (unsigned __int8)v339 ^ 1u;\n              v196 = __errno_location();\n              error(1, *v196, \"-\");\nLABEL_294:\n              v197 = byte_612386;\n              v46[54] = 0;\n              v198 = (char *)\"\";\n              *((_DWORD *)v46 + 15) = -1;\n              v197 ^= 1u;\n              v46[52] = v197;\n              if ( v197 )\n                v198 = dcgettext(0LL, \"; giving up on this name\", 5);\n              v199 = sub_4047E0(*(_QWORD *)v46);\n              v200 = sub_4095E0(0LL, 3LL, v199);\n              v201 = dcgettext(0LL, \"%s: cannot follow end of this type of file%s\", 5);\n              error(0, 0, v201, v200, v198);\nLABEL_184:\n              v130 = *(_QWORD *)v46;\n              v46[52] = byte_612386 ^ 1;\n              v131 = sub_4047E0(v130);\n              sub_404820((unsigned int)fildes, v131);\n              *((_DWORD *)v46 + 14) = -1;\n              LOBYTE(ptr) = 0;\n              while ( 1 )\n              {\n                v46 += 96;\n                v339 &= ptr;\n                v44 = v329 < v46;\n                v45 = v329 == v46;\n                if ( v329 == v46 )\n                  break;\nLABEL_111:\n                v47 = 2LL;\n                v48 = \"-\";\n                offset = v341;\n                v49 = *(const char **)v46;\n                v50 = *(const char **)v46;\n                do\n                {\n                  if ( !v47 )\n                    break;\n                  v44 = *v50 < (unsigned int)*v48;\n                  v45 = *v50++ == *v48++;\n                  --v47;\n                }\n                while ( v45 );\n                LOBYTE(v42) = (!v44 && !v45) - v44;\n                mask = (char)v42;\n                if ( !(_BYTE)v42 )\n                {\n                  byte_61237A = 1;\n                  LODWORD(fildes) = 0;\nLABEL_116:\n                  v46[54] = 1;\n                  goto LABEL_117;\n                }\n                v79 = sub_406780((_DWORD)v49, 0, (_DWORD)v42, v47, v40, v41, v317);\n                v80 = byte_612386;\n                LODWORD(fildes) = v79;\n                if ( byte_612386 )\n                {\n                  if ( v79 != -1 )\n                  {\n                    v49 = *(const char **)v46;\n                    goto LABEL_116;\n                  }\n                  v46[54] = 0;\nLABEL_144:\n                  v81 = __errno_location();\n                  v82 = v81;\n                  if ( byte_612384 )\n                  {\n                    v83 = *v81;\n                    *((_DWORD *)v46 + 14) = -1;\n                    v46[52] = v80 ^ 1;\n                    *((_DWORD *)v46 + 15) = v83;\n                    *((_QWORD *)v46 + 5) = 0LL;\n                    *((_QWORD *)v46 + 4) = 0LL;\n                  }\n                  v84 = sub_4047E0(*(_QWORD *)v46);\n                  v89 = sub_409510(4LL, v84, v85, v86, v87, v88);\n                  v90 = dcgettext(0LL, \"cannot open %s for reading\", 5);\n                  error(0, *v82, v90, v89);\n                  LOBYTE(ptr) = 0;\n                }\n                else\n                {\n                  v46[54] = 1;\n                  if ( v79 == -1 )\n                    goto LABEL_144;\n                  v49 = *(const char **)v46;\nLABEL_117:\n                  if ( byte_612381 )\n                  {\n                    v107 = (const char *)sub_4047E0(v49);\n                    v108 = \"\";\n                    if ( !byte_612290 )\n                      v108 = \"\\n\";\n                    __printf_chk(1LL, \"%s==> %s <==\\n\", v108, v107);\n                    byte_612290 = 0;\n                  }\n                  v51 = sub_4047E0(*(_QWORD *)v46);\n                  v52 = (unsigned int)fildes;\n                  v344.st_dev = 0LL;\n                  v328 = v51;\n                  LOBYTE(ptr) = byte_612385;\n                  if ( byte_612385 )\n                  {\n                    if ( __fxstat(1, (int)fildes, &stat_buf) )\n                    {\n                      v150 = sub_409510(4LL, v328, v53, v54, v55, v56);\n                      v151 = dcgettext(0LL, \"cannot fstat %s\", 5);\n                      v152 = __errno_location();\n                      error(0, *v152, v151, v150);\n                      LOBYTE(v331) = 0;\n                    }\n                    else\n                    {\n                      LOBYTE(v331) = byte_612382;\n                      if ( byte_612382 )\n                      {\n                        v149 = sub_404920(v328, (unsigned int)fildes, v341, &v344);\n                        if ( v149 )\n                        {\n                          v331 = v149 >> 31;\n                        }\n                        else\n                        {\n                          v169 = sub_404A20(0LL, v328, (unsigned int)fildes, -1LL);\n                          v344.st_dev += v169;\n                        }\n                      }\n                      else\n                      {\n                        if ( !byte_612379 && (stat_buf.st_mode & 0xF000) == 0x8000 )\n                        {\n                          LODWORD(v43) = (_DWORD)fildes;\n                          v52 = 0LL;\n                          v167 = lseek((int)fildes, 0LL, 1);\n                          if ( v167 != -1 )\n                          {\n                            v168 = lseek((int)fildes, 0LL, 2);\n                            if ( v167 < v168 )\n                            {\n                              v344.st_dev = v168;\n                              LOBYTE(v331) = ptr;\n                              if ( v168 )\n                                LOBYTE(v331) = sub_404CD0(v328, (unsigned int)fildes, v341, v167, v168, &v344);\n                              goto LABEL_182;\n                            }\n                            v52 = v167;\n                            sub_404C20((unsigned int)fildes, v167, 0LL, v328);\n                          }\n                        }\n                        v57 = (char *)sub_409DD0(8216LL, v52, v53, v54, v55, v56);\n                        *((_QWORD *)v57 + 1025) = 0LL;\n                        *((_QWORD *)v57 + 1024) = 0LL;\n                        *((_QWORD *)v57 + 1026) = 0LL;\n                        v320 = v57;\n                        v332 = v46;\n                        v62 = v57;\n                        buf = 0LL;\n                        v43 = sub_409DD0(8216LL, v52, v58, v59, v60, v61);\n                        while ( 1 )\n                        {\n                          v63 = sub_409780((int)fildes, (void *)v43, 0x2000uLL);\n                          if ( v63 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n                            break;\n                          *(_QWORD *)(v43 + 0x2000) = v63;\n                          v3 = v43 + v63;\n                          v64 = v43;\n                          v65 = 0LL;\n                          v344.st_dev += v63;\n                          v66 = byte_612380;\n                          *(_QWORD *)(v43 + 8200) = 0LL;\n                          *(_QWORD *)(v43 + 8208) = 0LL;\n                          while ( 1 )\n                          {\n                            v67 = v66;\n                            v68 = sub_40B730(v64, v66, v3 - v64);\n                            v72 = v65 + 1;\n                            if ( !v68 )\n                              break;\n                            *(_QWORD *)(v43 + 8200) = v72;\n                            v64 = v68 + 1;\n                            ++v65;\n                          }\n                          v73 = *((_QWORD *)v320 + 1024);\n                          v74 = &buf[v65];\n                          if ( v63 + v73 <= 0x1FFF )\n                          {\n                            memcpy(&v320[v73], (const void *)v43, v63);\n                            buf += v65;\n                            *((_QWORD *)v320 + 1024) += *(_QWORD *)(v43 + 0x2000);\n                            *((_QWORD *)v320 + 1025) += *(_QWORD *)(v43 + 8200);\n                          }\n                          else\n                          {\n                            *((_QWORD *)v320 + 1026) = v43;\n                            buf = &v74[-*((_QWORD *)v62 + 1025)];\n                            v320 = (char *)v43;\n                            if ( v341 >= (unsigned __int64)buf )\n                            {\n                              buf = v74;\n                              v43 = sub_409DD0(8216LL, v67, v72, v69, v70, v71);\n                            }\n                            else\n                            {\n                              v43 = (__int64)v62;\n                              v62 = (char *)*((_QWORD *)v62 + 1026);\n                            }\n                          }\n                        }\n                        v115 = v62;\n                        v46 = v332;\n                        free((void *)v43);\n                        if ( v63 != -1LL )\n                        {\n                          v117 = *((_QWORD *)v320 + 1024);\n                          LOBYTE(v42) = v341 == 0 || v117 == 0;\n                          LOBYTE(v331) = (_BYTE)v42;\n                          if ( (_BYTE)v42 )\n                            goto LABEL_180;\n                          v159 = byte_612380;\n                          if ( v320[v117 - 1] != byte_612380 )\n                          {\n                            ++*((_QWORD *)v320 + 1025);\n                            ++buf;\n                          }\n                          v3 = (__int64)v115;\n                          v160 = &buf[-*((_QWORD *)v115 + 1025)];\n                          if ( v341 < (unsigned __int64)v160 )\n                          {\n                            do\n                            {\n                              v3 = *(_QWORD *)(v3 + 8208);\n                              v42 = v160;\n                              v160 -= *(_QWORD *)(v3 + 8200);\n                            }\n                            while ( v341 < (unsigned __int64)v160 );\n                            buf = v42;\n                          }\n                          v161 = v3;\n                          LODWORD(v43) = (_DWORD)buf;\n                          v162 = v3 + *(_QWORD *)(v3 + 0x2000);\n                          if ( v341 < (unsigned __int64)buf )\n                          {\n                            v43 = (__int64)&buf[-v341];\n                            while ( 1 )\n                            {\n                              v163 = sub_40B730(v161, v159, v162 - v161);\n                              if ( !v163 )\n                                break;\n                              v161 = v163 + 1;\n                              if ( !--v43 )\n                                goto LABEL_222;\n                            }\nLABEL_408:\n                            __assert_fail(\"beg\", \"src/tail.c\", 0x2C9u, \"pipe_lines\");\n                          }\nLABEL_222:\n                          v164 = v162 - v161;\n                          if ( v164 )\n                            sub_4048A0(v161, v164, v42);\n                          for ( i = *(_QWORD *)(v3 + 8208); i; i = *(_QWORD *)(i + 8208) )\n                          {\n                            v166 = *(_QWORD *)(i + 0x2000);\n                            if ( v166 )\n                              sub_4048A0(i, v166, v42);\n                          }\n                          v118 = v115;\n                          LOBYTE(v331) = ptr;\n                          goto LABEL_181;\n                        }\n                        v223 = sub_409510(4LL, v328, v42, v116, v40, v41);\n                        v224 = dcgettext(0LL, \"error reading %s\", 5);\n                        v225 = __errno_location();\n                        error(0, *v225, v224, v223);\nLABEL_180:\n                        v118 = v115;\n                        if ( v115 )\n                        {\n                          do\n                          {\nLABEL_181:\n                            v119 = (char *)*((_QWORD *)v118 + 1026);\n                            free(v118);\n                            v118 = v119;\n                          }\n                          while ( v119 );\n                        }\n                      }\n                    }\nLABEL_182:\n                    LOBYTE(ptr) = v331;\n                    goto LABEL_159;\n                  }\n                  if ( __fxstat(1, (int)fildes, &stat_buf) )\n                  {\n                    v153 = sub_409510(4LL, v328, v92, v93, v94, v95);\n                    v154 = dcgettext(0LL, \"cannot fstat %s\", 5);\n                    v155 = __errno_location();\n                    error(0, *v155, v154, v153);\n                    goto LABEL_159;\n                  }\n                  v96 = (unsigned __int8)byte_612382;\n                  LOBYTE(ptr) = byte_612382;\n                  if ( byte_612382 )\n                  {\n                    if ( byte_612379\n                      || (v341 & 0x8000000000000000LL) != 0LL\n                      || ((stat_buf.st_mode & 0xF000) != 0x8000 || sub_404C20((unsigned int)fildes, v341, 1LL, v328) < 0)\n                      && lseek((int)fildes, v341, 1) == -1 )\n                    {\n                      v106 = sub_404B40(v328, (unsigned int)fildes, v341, &v344);\n                      offset = -1LL;\n                      if ( v106 )\n                      {\n                        LODWORD(ptr) = v106 >> 31;\n                        goto LABEL_159;\n                      }\n                    }\n                    else\n                    {\n                      v344.st_dev += v341;\n                      offset = -1LL;\n                    }\n                  }\n                  else\n                  {\n                    if ( byte_612379 || (v341 & 0x8000000000000000LL) != 0LL )\n                      goto LABEL_186;\n                    if ( (stat_buf.st_mode & 0xD000) == 0x8000 )\n                    {\n                      st_size = stat_buf.st_size;\n                      v157 = -1LL;\n                    }\n                    else\n                    {\n                      LODWORD(v43) = v341;\n                      v52 = -(__int64)v341;\n                      v203 = lseek((int)fildes, -(__int64)v341, 2);\n                      v157 = v203;\n                      if ( v203 == -1 )\n                        goto LABEL_186;\n                      st_size = v203 + v341;\n                    }\n                    st_blksize = stat_buf.st_blksize;\n                    v52 = 0x1FFFFFFFFFFFFFFFLL;\n                    v92 = 512LL;\n                    if ( (unsigned __int64)(stat_buf.st_blksize - 1) > 0x1FFFFFFFFFFFFFFFLL )\n                      st_blksize = 512LL;\n                    if ( st_size <= st_blksize )\n                    {\nLABEL_186:\n                      v132 = 0LL;\n                      v133 = sub_409DD0(8208LL, v52, v92, v96, v94, v95);\n                      *(_QWORD *)(v133 + 0x2000) = 0LL;\n                      *(_QWORD *)(v133 + 8200) = 0LL;\n                      v134 = (_QWORD *)v133;\n                      v320 = v46;\n                      LODWORD(v43) = (_DWORD)fildes;\n                      v139 = (_QWORD *)v133;\n                      v140 = (_QWORD *)sub_409DD0(8208LL, v52, v135, v136, v137, v138);\n                      v3 = v341;\n                      while ( 1 )\n                      {\n                        v143 = sub_409780((int)fildes, v140, 0x2000uLL);\n                        if ( v143 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n                          break;\n                        v344.st_dev += v143;\n                        v132 += v143;\n                        v140[1024] = v143;\n                        v147 = v139[1024];\n                        v140[1025] = 0LL;\n                        v148 = v143 + v147;\n                        if ( v143 + v147 > 0x1FFF )\n                        {\n                          v141 = v132 - v134[1024];\n                          v139[1025] = v140;\n                          if ( v341 >= v141 )\n                          {\n                            v142 = sub_409DD0(8208LL, v148, v147, v144, v145, v146);\n                          }\n                          else\n                          {\n                            v132 = v141;\n                            v142 = (__int64)v134;\n                            v134 = (_QWORD *)v134[1025];\n                          }\n                        }\n                        else\n                        {\n                          memcpy((char *)v139 + v147, v140, v143);\n                          v139[1024] += v140[1024];\n                          v142 = (__int64)v140;\n                          v140 = v139;\n                        }\n                        v139 = v140;\n                        v140 = (_QWORD *)v142;\n                      }\n                      v215 = v140;\n                      buf = (char *)v143;\n                      v46 = v320;\n                      v216 = v134;\n                      free(v215);\n                      v42 = (char *)v341;\n                      if ( buf == (char *)-1LL )\n                      {\n                        v227 = sub_409510(4LL, v328, v341, v217, v40, v41);\n                        v228 = dcgettext(0LL, \"error reading %s\", 5);\n                        v229 = __errno_location();\n                        error(0, *v229, v228, v227);\n                        v230 = v134;\n                      }\n                      else\n                      {\n                        while ( 1 )\n                        {\n                          v218 = v216[1024];\n                          if ( v341 >= v132 - v218 )\n                            break;\n                          v216 = (_QWORD *)v216[1025];\n                          v132 -= v218;\n                        }\n                        v219 = 0LL;\n                        if ( v341 < v132 )\n                          v219 = v132 - v341;\n                        v220 = v218 - v219;\n                        if ( v220 )\n                          sub_4048A0((char *)v216 + v219, v220, v341);\n                        while ( 1 )\n                        {\n                          v216 = (_QWORD *)v216[1025];\n                          if ( !v216 )\n                            break;\n                          v221 = v216[1024];\n                          if ( v221 )\n                            sub_4048A0(v216, v221, v42);\n                        }\n                        LOBYTE(ptr) = 1;\n                        v230 = v134;\n                      }\n                      while ( v230 )\n                      {\n                        v222 = (_QWORD *)v230[1025];\n                        free(v230);\n                        v230 = v222;\n                      }\n                      goto LABEL_159;\n                    }\n                    if ( v157 == -1 )\n                      v157 = sub_404C20((unsigned int)fildes, 0LL, 1LL, v328);\n                    if ( st_size > v157 && v341 < st_size - v157 )\n                    {\n                      v157 = st_size - v341;\n                      sub_404C20((unsigned int)fildes, st_size - v341, 0LL, v328);\n                    }\n                    v344.st_dev = v157;\n                  }\n                  v97 = sub_404A20(0LL, v328, (unsigned int)fildes, offset);\n                  v344.st_dev += v97;\n                  LOBYTE(ptr) = 1;\nLABEL_159:\n                  if ( byte_612384 )\n                  {\n                    *((_DWORD *)v46 + 15) = (unsigned __int8)ptr - 1;\n                    if ( __fxstat(1, (int)fildes, &stat_buf) < 0 )\n                    {\n                      v120 = __errno_location();\n                      v121 = *(const char **)v46;\n                      v122 = v120;\n                      *((_DWORD *)v46 + 15) = *v120;\n                      v123 = sub_4047E0(v121);\n                      v128 = sub_409510(4LL, v123, v124, v125, v126, v127);\n                      v129 = dcgettext(0LL, \"error reading %s\", 5);\n                      error(0, *v122, v129, v128);\n                      goto LABEL_184;\n                    }\n                    if ( (((stat_buf.st_mode & 0xF000) - 4096) & 0xFFFFE000) != 0\n                      && (stat_buf.st_mode & 0xB000) != 0x8000 )\n                    {\n                      goto LABEL_294;\n                    }\n                    if ( !(_BYTE)ptr )\n                      goto LABEL_184;\n                    v109 = 1;\n                    v110 = *(const char **)v46;\n                    *((_DWORD *)v46 + 12) = stat_buf.st_mode;\n                    st_dev = v344.st_dev;\n                    v46[52] = 0;\n                    if ( !mask )\n                      v109 = v334;\n                    *((_DWORD *)v46 + 14) = (_DWORD)fildes;\n                    *((_QWORD *)v46 + 1) = st_dev;\n                    tv_sec = stat_buf.st_mtim.tv_sec;\n                    *((_DWORD *)v46 + 16) = v109;\n                    *((_QWORD *)v46 + 2) = tv_sec;\n                    tv_nsec = stat_buf.st_mtim.tv_nsec;\n                    *((_QWORD *)v46 + 11) = 0LL;\n                    *((_QWORD *)v46 + 3) = tv_nsec;\n                    *((_QWORD *)v46 + 4) = stat_buf.st_dev;\n                    *((_QWORD *)v46 + 5) = stat_buf.st_ino;\n                    v114 = sub_4047E0(v110);\n                    v46[53] = sub_405090((unsigned int)fildes, v114);\n                  }\n                  else if ( mask && close((int)fildes) )\n                  {\n                    v98 = sub_4047E0(*(_QWORD *)v46);\n                    v103 = sub_409510(4LL, v98, v99, v100, v101, v102);\n                    v104 = dcgettext(0LL, \"error reading %s\", 5);\n                    v105 = __errno_location();\n                    error(0, *v105, v104, v103);\n                    LOBYTE(ptr) = 0;\n                  }\n                }\n              }\n              v327 = byte_612384;\n              if ( byte_612384 )\n              {\n                v170 = v330;\n                v171 = (__int64)v329;\n                v172 = 0LL;\n                do\n                {\n                  if ( !strcmp(*(const char **)v170, \"-\")\n                    && !*(_BYTE *)(v170 + 52)\n                    && (v173 = *(_DWORD *)(v170 + 56), v173 >= 0)\n                    && ((*(_DWORD *)(v170 + 48) & 0xF000) == 4096 || (unsigned int)sub_40B5B0(v173)) )\n                  {\n                    *(_DWORD *)(v170 + 56) = -1;\n                    *(_BYTE *)(v170 + 52) = 1;\n                  }\n                  else\n                  {\n                    ++v172;\n                  }\n                  v170 += 96LL;\n                }\n                while ( v329 != (char *)v170 );\n                if ( v172 )\n                {\n                  if ( __fxstat(1, 1, &v344) >= 0 )\n                  {\n                    v174 = 1;\n                    if ( (v344.st_mode & 0xF000) != 4096 )\n                      v174 = (unsigned int)sub_40B5B0(1) != 0;\n                    byte_612383 = v174;\n                    if ( !byte_612378 )\n                    {\n                      v175 = v330;\n                      v170 = (unsigned __int64)v329;\n                      do\n                      {\n                        if ( !*(_BYTE *)(v175 + 52) && !strcmp(*(const char **)v175, \"-\") )\n                          goto LABEL_264;\n                        v175 += 96LL;\n                      }\n                      while ( v329 != (char *)v175 );\n                      v176 = 0LL;\n                      do\n                      {\n                        if ( *(int *)(v330 + v176 + 56) >= 0 && *(_BYTE *)(v330 + v176 + 53) )\n                          goto LABEL_264;\n                        v176 += 96LL;\n                      }\n                      while ( v333 != v176 );\n                      v177 = 0LL;\n                      while ( 1 )\n                      {\n                        if ( *(int *)(v330 + v177 + 56) >= 0 )\n                        {\n                          v178 = *(_BYTE *)(v330 + v177 + 53);\n                          if ( !v178 )\n                            break;\n                        }\n                        v177 += 96LL;\n                        if ( v333 == v177 )\n                          goto LABEL_264;\n                      }\nLABEL_370:\n                      LOBYTE(v320) = v178;\n                      v233 = (const char **)v330;\n                      p_stat_buf = (fd_set *)&stat_buf;\n                      do\n                      {\n                        if ( !__lxstat(1, *v233, &stat_buf) && (stat_buf.st_mode & 0xF000) == 40960 )\n                          goto LABEL_264;\n                        v233 += 12;\n                      }\n                      while ( v329 != (char *)v233 );\n                      v235 = 0LL;\n                      do\n                      {\n                        if ( *(int *)(v330 + v235 + 56) >= 0 )\n                        {\n                          v236 = *(_DWORD *)(v330 + v235 + 48) & 0xF000;\n                          if ( v236 != 0x8000 && v236 != 4096 )\n                            goto LABEL_264;\n                        }\n                        v235 += 96LL;\n                      }\n                      while ( v333 != v235 );\n                      if ( v339 || dword_6122A8 != 2 )\n                      {\n                        v237 = inotify_init();\n                        v3 = (unsigned int)v237;\n                        if ( v237 < 0 )\n                          goto LABEL_400;\n                        if ( !fflush_unlocked(stdout) )\n                        {\n                          v238 = 0LL;\n                          ptr = sub_407060(v317, 0LL, sub_4047C0, sub_4047D0, 0LL);\n                          if ( !ptr )\n                            goto LABEL_499;\n                          v242 = 2LL;\n                          v243 = 3078;\n                          if ( dword_6122A8 != 1 )\n                            v243 = 2;\n                          fildesa = 0;\n                          v20 = 0;\n                          v244 = 0LL;\n                          offset = (__off_t)&stat_buf;\n                          v245 = (char *)v330;\n                          mask = v243;\nLABEL_387:\n                          if ( v245[52] )\n                            goto LABEL_415;\n                          v246 = *(const char **)v245;\n                          v247 = strlen(*(const char **)v245) + 1;\n                          *((_DWORD *)v245 + 17) = -1;\n                          if ( (unsigned __int64)v244 < v247 - 1 )\n                            v244 = (const char *)(v247 - 1);\n                          if ( dword_6122A8 != 1 )\n                            goto LABEL_394;\n                          v248 = sub_406630(v246);\n                          v331 = (_DWORD)v246 + v248;\n                          bufa = v246[v248];\n                          *((_QWORD *)v245 + 10) = sub_4066F0(v246) - (_QWORD)v246;\n                          v246[v248] = 0;\n                          v249 = \".\";\n                          if ( v248 )\n                            v249 = *(const char **)v245;\n                          *((_DWORD *)v245 + 18) = inotify_add_watch(v3, v249, 0x784u);\n                          *(_BYTE *)(*(_QWORD *)v245 + v248) = bufa;\n                          if ( *((int *)v245 + 18) >= 0 )\n                          {\nLABEL_394:\n                            v238 = *(char **)v245;\n                            v250 = inotify_add_watch(v3, *(const char **)v245, mask);\n                            *((_DWORD *)v245 + 17) = v250;\n                            if ( v250 < 0 )\n                            {\n                              if ( *((_DWORD *)v245 + 14) != -1 )\n                                v20 = v327;\n                              v251 = __errno_location();\n                              v242 = *v251 & 0xFFFFFFEF;\n                              if ( (_DWORD)v242 == 12 )\n                              {\nLABEL_398:\n                                v252 = dcgettext(0LL, \"inotify resources exhausted\", 5);\n                                error(0, 0, v252);\n                                goto LABEL_399;\n                              }\n                              if ( *v251 != *((_DWORD *)v245 + 15) )\n                              {\n                                buf = (char *)sub_409510(4LL, *(_QWORD *)v245, v242, v239, v240, v241);\n                                v265 = dcgettext(0LL, \"cannot watch %s\", 5);\n                                v238 = (char *)(unsigned int)*v251;\n                                error(0, (int)v238, v265, buf);\n                              }\n                              goto LABEL_415;\n                            }\n                            goto LABEL_413;\n                          }\n                          v305 = v245;\n                          v308 = __errno_location();\n                          if ( *v308 == 28 )\n                            goto LABEL_398;\n                          v311 = sub_409510(4LL, *(_QWORD *)v305, v306, v307, v309, v310);\n                          v312 = dcgettext(0LL, \"cannot watch parent directory of %s\", 5);\n                          error(0, *v308, v312, v311);\nLABEL_399:\n                          sub_4072A0((void *)ptr);\n                          *__errno_location() = 0;\n                          goto LABEL_400;\n                        }\n                        v281 = dcgettext(0LL, \"write error\", 5);\n                        v313 = __errno_location();\n                        error(1, *v313, v281);\nLABEL_503:\n                        v335 = v294;\n                        sub_4056E0(v294, 0LL);\n                        v295 = v335;\nLABEL_494:\n                        *(_DWORD *)(v295 + 68) = -1;\n                        v334 = v295;\n                        v296 = sub_4047E0(*(_QWORD *)v295);\n                        sub_404820(*(unsigned int *)(v334 + 56), v296);\nLABEL_495:\n                        if ( !sub_407800(ptr, v281) )\nLABEL_499:\n                          sub_40A020();\nLABEL_496:\n                        if ( dword_6122A8 == 1 )\n                        {\nLABEL_497:\n                          sub_4056E0(v281, 0LL);\n                          goto LABEL_456;\n                        }\nLABEL_457:\n                        v282 = *((_DWORD *)v332 + 1);\n                        if ( (v282 & 0xE04) != 0 )\n                        {\n                          if ( (v282 & 0x400) != 0 )\n                          {\n                            inotify_rm_watch(v3, *((_DWORD *)v281 + 17));\n                            sub_407840(ptr, v281);\n                          }\n                          sub_4056E0(v281, 0LL);\n                          goto LABEL_430;\n                        }\nLABEL_471:\n                        sub_404F00(v281, &v342);\n                        goto LABEL_430;\n                      }\n                    }\n                    goto LABEL_264;\n                  }\n                  v260 = dcgettext(0LL, \"standard output\", 5);\n                  v261 = __errno_location();\n                  error(1, *v261, v260);\nLABEL_410:\n                  v179 = dcgettext(0LL, \"write error\", 5);\n                  v262 = __errno_location();\n                  error(1, *v262, v179);\nLABEL_411:\n                  v191 = -2LL;\n                  goto LABEL_277;\n                }\n              }\n            }\n          }\nLABEL_326:\n          if ( (_BYTE)fildes == 1 && !(_BYTE)buf )\n          {\n            if ( !byte_612383 )\n              goto LABEL_269;\n            goto LABEL_329;\n          }\n          if ( fflush_unlocked(stdout) )\n            goto LABEL_410;\n          if ( byte_612383 )\n          {\nLABEL_329:\n            timeout.tv_usec = 0LL;\n            timeout.tv_sec = 0LL;\n            memset(&stat_buf, 0, 0x80uLL);\n            stat_buf.st_dev |= 2uLL;\n            if ( select(2, (fd_set *)&stat_buf, 0LL, 0LL, &timeout) == 1 )\n              raise(13);\n          }\n          if ( (_BYTE)fildes )\n            goto LABEL_269;\n          if ( (_BYTE)mask )\n            goto LABEL_149;\n          if ( pid && kill(pid, 0) && *__errno_location() != 1 )\n          {\n            LOBYTE(mask) = v327;\n            goto LABEL_269;\n          }\n          if ( !(unsigned int)sub_40A160(v326) )\n            goto LABEL_269;\n          v179 = dcgettext(0LL, \"cannot read realtime clock\", 5);\n          v212 = __errno_location();\n          error(1, *v212, v179);\nLABEL_336:\n          *((_DWORD *)v46 + 14) = -1;\n          v213 = __errno_location();\n          *((_DWORD *)v46 + 15) = *v213;\n          v214 = (const char *)sub_4095E0(0LL, 3LL, v3);\n          error(0, *v213, \"%s\", v214);\n          close(v170);\n          goto LABEL_278;\n        }\n      }\n      v180 = sub_4047E0(*(_QWORD *)v46);\n      v171 = *((unsigned int *)v46 + 12);\n      v3 = v180;\n      v185 = *((_DWORD *)v46 + 16);\n      if ( (_DWORD)v43 != v185 )\n      {\n        v186 = sub_40A6A0(v170, 3, v181, v182, v183, v184, v317);\n        if ( (_DWORD)v43 )\n        {\n          if ( v186 >= 0 )\n            goto LABEL_275;\n        }\n        else if ( v186 >= 0 )\n        {\n          v190 = v186;\n          BYTE1(v190) = BYTE1(v186) | 8;\n          if ( v186 == v190 || (unsigned int)sub_40A6A0(v170, 4, v190, v187, v188, v189, v317) != -1 )\n          {\nLABEL_275:\n            *((_DWORD *)v46 + 16) = v43;\n            v185 = v43;\n            goto LABEL_276;\n          }\n        }\n        v209 = __errno_location();\n        if ( (*((_DWORD *)v46 + 12) & 0xF000) != 0x8000 || *v209 != 1 )\n        {\n          v317 = (__int64)v209;\n          v231 = sub_4095E0(0LL, 3LL, v3);\n          v232 = dcgettext(0LL, \"%s: cannot change nonblocking mode\", 5);\n          error(1, *(_DWORD *)v317, v232, v231);\n          goto LABEL_370;\n        }\n        v185 = *((_DWORD *)v46 + 16);\n      }\nLABEL_276:\n      v191 = -2LL;\n      if ( v185 )\n        goto LABEL_277;\n      if ( __fxstat(1, v170, &stat_buf) )\n        goto LABEL_336;\n      st_mode = stat_buf.st_mode;\n      if ( *((_DWORD *)v46 + 12) != stat_buf.st_mode )\n      {\n        v205 = stat_buf.st_mtim.tv_sec;\n        v206 = stat_buf.st_mtim.tv_nsec;\nLABEL_304:\n        v207 = v171 & 0xF000;\n        *((_QWORD *)v46 + 2) = v205;\n        *((_QWORD *)v46 + 3) = v206;\n        *((_DWORD *)v46 + 12) = st_mode;\n        *((_QWORD *)v46 + 11) = 0LL;\n        if ( v207 == 0x8000 && stat_buf.st_size < *((_QWORD *)v46 + 1) )\n        {\n          offset = sub_4095E0(0LL, 3LL, v3);\n          v211 = dcgettext(0LL, \"%s: file truncated\", 5);\n          error(0, 0, v211, offset);\n          sub_404C20((unsigned int)v170, 0LL, 0LL, v3);\n          *((_QWORD *)v46 + 1) = 0LL;\n        }\n        if ( v179 != v320 )\n        {\n          v320 = v179;\n          if ( byte_612381 )\n          {\n            v208 = \"\\n\";\n            if ( byte_612290 )\n              v208 = \"\";\n            __printf_chk(1LL, \"%s==> %s <==\\n\", v208, (const char *)v3);\n            byte_612290 = 0;\n            v320 = v179;\n          }\n        }\n        if ( *((_DWORD *)v46 + 16) )\n          goto LABEL_411;\n        v191 = -1LL;\n        if ( v207 == 0x8000 && v46[53] )\n          v191 = stat_buf.st_size - *((_QWORD *)v46 + 1);\nLABEL_277:\n        v192 = sub_404A20(0LL, v3, (unsigned int)v170, v191);\n        *((_QWORD *)v46 + 1) += v192;\n        LOBYTE(fildes) = (v192 != 0) | (unsigned __int8)fildes;\n        goto LABEL_278;\n      }\n      v205 = stat_buf.st_mtim.tv_sec;\n      if ( (stat_buf.st_mode & 0xF000) == 0x8000 && *((_QWORD *)v46 + 1) != stat_buf.st_size )\n      {\n        v206 = stat_buf.st_mtim.tv_nsec;\n        goto LABEL_304;\n      }\n      v206 = stat_buf.st_mtim.tv_nsec;\n      if ( *((_QWORD *)v46 + 2) != stat_buf.st_mtim.tv_sec || *((_DWORD *)v46 + 6) != LODWORD(stat_buf.st_mtim.tv_nsec) )\n        goto LABEL_304;\n      v210 = *((_QWORD *)v46 + 11);\n      v30 = v210 < qword_6122A0;\n      *((_QWORD *)v46 + 11) = v210 + 1;\n      if ( !v30 && dword_6122A8 == 1 )\n      {\n        sub_4056E0(v46, *((_DWORD *)v46 + 16) != 0);\n        *((_QWORD *)v46 + 11) = 0LL;\n      }\nLABEL_278:\n      ++v179;\n      v46 += 96;\n      if ( (char *)v317 == v179 )\n        goto LABEL_282;\n    }\n  }\nLABEL_8:\n  v9 = 0LL;\nLABEL_9:\n  v10 = &a2[v9];\n  LODWORD(v11) = 0;\n  v12 = a1 - (unsigned __int8)v9;\n  v326 = 1.0;\n  while ( 1 )\n  {\n    v13 = sub_40B530((unsigned int)v12, v10, \"c:n:fFqs:vz0123456789\", &off_40D560, 0LL);\n    if ( v13 == -1 )\n      break;\n    if ( v13 == 113 )\n    {\n      LODWORD(v11) = 2;\n    }\n    else if ( v13 <= 113 )\n    {\n      if ( v13 <= 57 )\n      {\n        v15 = v13;\n        if ( v13 >= 48 )\n        {\n          v226 = dcgettext(0LL, \"option used in invalid context -- %c\", 5);\n          error(1, 0, v226, v15);\n        }\n        else\n        {\n          if ( v13 == -131 )\n          {\n            sub_409C90(\n              (_DWORD)stdout,\n              (unsigned int)\"tail\",\n              (unsigned int)&unk_40C375,\n              (_DWORD)off_6122B0,\n              (unsigned int)\"Paul Rubin\",\n              (unsigned int)\"David MacKenzie\",\n              \"Ian Lance Taylor\",\n              \"Jim Meyering\",\n              0LL);\n            exit(0);\n          }\n          if ( v13 == -130 )\n            sub_405D10(0);\n        }\nLABEL_366:\n        sub_405D10(1);\n      }\n      if ( v13 == 99 )\n      {\nLABEL_37:\n        byte_612385 = v13 == 110;\n        if ( *(_BYTE *)qword_612540 == 43 )\n        {\n          byte_612382 = 1;\n        }\n        else if ( *(_BYTE *)qword_612540 == 45 )\n        {\n          ++qword_612540;\n        }\n        if ( v13 == 110 )\n          v17 = dcgettext(0LL, \"invalid number of lines\", 5);\n        else\n          v17 = dcgettext(0LL, \"invalid number of bytes\", 5);\n        v341 = sub_40A130(qword_612540, 0LL, -1LL, \"bkKmMGTPEZY0\", v17, 0LL);\n      }\n      else if ( v13 > 99 )\n      {\n        if ( v13 != 102 )\n          goto LABEL_36;\nLABEL_27:\n        byte_612384 = 1;\n        if ( qword_612540 )\n          dword_6122A8 = dword_40D760[sub_406440(\"--follow\", qword_612540, &off_40D770, dword_40D760, 4LL, off_6122B8)];\n        else\n          dword_6122A8 = 2;\n      }\n      else\n      {\n        if ( v13 != 70 )\n          goto LABEL_366;\n        byte_612384 = 1;\n        dword_6122A8 = 1;\n        byte_612386 = 1;\n      }\n    }\n    else if ( v13 == 129 )\n    {\n      v18 = dcgettext(0LL, \"invalid maximum number of unchanged stats between opens\", 5);\n      qword_6122A0 = sub_40A130(qword_612540, 0LL, -1LL, \"\", v18, 0LL);\n    }\n    else if ( v13 > 129 )\n    {\n      if ( v13 == 131 )\n      {\n        byte_612379 = 1;\n      }\n      else if ( v13 < 131 )\n      {\n        v19 = dcgettext(0LL, \"invalid PID\", 5);\n        pid = sub_40A130(qword_612540, 0LL, 0x7FFFFFFFLL, \"\", v19, 0LL);\n      }\n      else\n      {\n        if ( v13 == 132 )\n          goto LABEL_27;\n        if ( v13 != 133 )\n          goto LABEL_366;\n        byte_612378 = 1;\n      }\n    }\n    else if ( v13 == 118 )\n    {\n      LODWORD(v11) = 1;\n    }\n    else if ( v13 <= 118 )\n    {\n      if ( v13 != 115 )\n        goto LABEL_366;\n      if ( !(unsigned __int8)sub_40A1C0(qword_612540, 0LL, &stat_buf, sub_406500)\n        || (v326 = *(double *)&stat_buf.st_dev, *(double *)&stat_buf.st_dev < 0.0) )\n      {\n        v11 = sub_409760(qword_612540, 0LL);\n        v16 = dcgettext(0LL, \"invalid number of seconds: %s\", 5);\n        error(1, 0, v16, v11);\nLABEL_36:\n        if ( v13 != 110 )\n          goto LABEL_366;\n        goto LABEL_37;\n      }\n    }\n    else if ( v13 == 122 )\n    {\n      byte_612380 = 0;\n    }\n    else\n    {\n      if ( v13 != 128 )\n        goto LABEL_366;\n      byte_612386 = 1;\n    }\n  }\n  if ( byte_612386 )\n  {\n    if ( byte_612384 )\n    {\n      if ( dword_6122A8 != 2 )\n      {\n        v27 = pid;\n        if ( pid )\n          goto LABEL_82;\n        goto LABEL_83;\n      }\n      v75 = \"warning: --retry only effective for the initial open\";\n    }\n    else\n    {\n      byte_612386 = 0;\n      v75 = \"warning: --retry ignored; --retry is useful only when following\";\n    }\n    v76 = dcgettext(0LL, v75, 5);\n    error(0, 0, v76);\n  }\n  v27 = pid;\n  if ( pid )\n  {\n    if ( byte_612384 )\n    {\nLABEL_82:\n      if ( kill(v27, 0) && *__errno_location() == 38 )\n      {\n        v202 = dcgettext(0LL, \"warning: --pid=PID is not supported on this system\", 5);\n        error(0, 0, v202);\n        pid = 0;\n      }\n    }\n    else\n    {\n      v77 = dcgettext(0LL, \"warning: PID ignored; --pid=PID is useful only when following\", 5);\n      error(0, 0, v77);\n    }\n  }\nLABEL_83:\n  if ( byte_612382 && v341 )\n    --v341;\n  if ( dword_61233C >= v12 )\n  {\n    v29 = &off_612298;\n    v317 = 1LL;\n  }\n  else\n  {\n    v28 = v12 - dword_61233C;\n    v29 = (void **)&v10[dword_61233C];\n    v317 = v28;\n  }\n  v30 = 0;\n  v31 = 1;\n  v32 = 0LL;\n  v33 = 1LL;\n  v34 = &v29[v317];\n  v35 = v29;\n  do\n  {\n    v36 = (const char *)*v35;\n    v37 = 2LL;\n    v38 = \"-\";\n    do\n    {\n      if ( !v37 )\n        break;\n      v30 = *v36 < (unsigned int)*v38;\n      v31 = *v36++ == *v38++;\n      --v37;\n    }\n    while ( v31 );\n    LOBYTE(v14) = (!v30 && !v31) - v30;\n    if ( !(_BYTE)v14 )\n      v32 = 1LL;\n    v30 = ++v35 < v34;\n    v31 = v35 == v34;\n  }\n  while ( v35 != v34 );\n  if ( !(_BYTE)v32 )\n  {\nLABEL_103:\n    if ( !v341 && !byte_612384 )\n      goto LABEL_233;\n    goto LABEL_105;\n  }\n  if ( dword_6122A8 == 1 )\n  {\n    v258 = sub_409510(4LL, \"-\", v14, v37, v32, 1LL);\n    v259 = dcgettext(0LL, \"cannot follow %s by name\", 5);\n    error(1, 0, v259, v258);\n    goto LABEL_408;\n  }\n  if ( byte_612384 )\n  {\n    if ( pid\n      || v317 != 1\n      || dword_6122A8 != 2\n      || (v36 = 0LL, __fxstat(1, 0, &stat_buf))\n      || (stat_buf.st_mode & 0xF000) == 0x8000 )\n    {\n      if ( isatty(0) )\n      {\n        v78 = dcgettext(0LL, \"warning: following standard input indefinitely is ineffective\", 5);\n        v36 = 0LL;\n        error(0, 0, v78);\n      }\n    }\n    goto LABEL_103;\n  }\n  if ( v341 )\n  {\nLABEL_105:\n    v333 = 96 * v317;\n    v39 = sub_409DD0(96 * v317, v36, v14, v37, v32, v33);\n    v330 = v39;\n    do\n    {\n      v42 = (char *)*v29++;\n      v39 += 96LL;\n      *(_QWORD *)(v39 - 96) = v42;\n    }\n    while ( v29 != v34 );\n    if ( (_DWORD)v11 == 1 || !(_DWORD)v11 && v317 != 1 )\n      byte_612381 = 1;\n    LODWORD(v43) = v330;\n    LODWORD(v334) = -1;\n    v339 = 1;\n    v44 = __CFADD__(v330, v333);\n    v45 = v330 + v333 == 0;\n    v46 = (char *)v330;\n    v329 = (char *)(v330 + v333);\n    goto LABEL_111;\n  }\nLABEL_233:\n  result = 0LL;\n  if ( byte_612382 )\n    goto LABEL_105;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40470B",
            "funcStartAddr": "0x40470b",
            "funcEndAddr": "0x40472a",
            "decompiledFuncCode": "__int64 *sub_40470B()\n{\n  return &program_invocation_short_name;\n}\n"
        },
        {
            "funcName": "sub_40472A",
            "funcStartAddr": "0x40472a",
            "funcEndAddr": "0x404761",
            "decompiledFuncCode": "__int64 sub_40472A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_404761",
            "funcStartAddr": "0x404761",
            "funcEndAddr": "0x4047b8",
            "decompiledFuncCode": "__int64 *sub_404761()\n{\n  __int64 *result; // rax\n\n  if ( !byte_612368 )\n  {\n    while ( qword_612370 < (unsigned __int64)(&qword_611E48 - qword_611E40 - 1) )\n      ((void (*)(void))qword_611E40[++qword_612370])();\n    result = sub_40470B();\n    byte_612368 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4047B8",
            "funcStartAddr": "0x4047b8",
            "funcEndAddr": "0x4047bd",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_4047B8()\n{\n  return sub_40472A();\n}\n"
        },
        {
            "funcName": "sub_4047C0",
            "funcStartAddr": "0x4047c0",
            "funcEndAddr": "0x4047cd",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4047C0(__int64 a1, unsigned __int64 a2)\n{\n  return *(int *)(a1 + 68) % a2;\n}\n"
        },
        {
            "funcName": "sub_4047D0",
            "funcStartAddr": "0x4047d0",
            "funcEndAddr": "0x4047da",
            "decompiledFuncCode": "bool __fastcall sub_4047D0(__int64 a1, __int64 a2)\n{\n  return *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68);\n}\n"
        },
        {
            "funcName": "sub_4047E0",
            "funcStartAddr": "0x4047e0",
            "funcEndAddr": "0x404811",
            "decompiledFuncCode": "char *__fastcall sub_4047E0(const char *a1)\n{\n  char *result; // rax\n\n  result = (char *)a1;\n  if ( !strcmp(a1, \"-\") )\n    return dcgettext(0LL, \"standard input\", 5);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404820",
            "funcStartAddr": "0x404820",
            "funcEndAddr": "0x404891",
            "decompiledFuncCode": "void __fastcall sub_404820(unsigned int a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  __int64 v3; // rcx\n  __int64 v4; // r8\n  __int64 v5; // r9\n  __int64 v6; // r12\n  char *v7; // rbp\n  int *v8; // rax\n\n  if ( a1 + 1 > 1 )\n  {\n    if ( close(a1) )\n    {\n      v6 = sub_409510(4LL, a2, v2, v3, v4, v5);\n      v7 = dcgettext(0LL, \"closing %s (fd=%d)\", 5);\n      v8 = __errno_location();\n      error(0, *v8, v7, v6, a1);\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_4048A0",
            "funcStartAddr": "0x4048a0",
            "funcEndAddr": "0x404920",
            "decompiledFuncCode": "size_t __fastcall sub_4048A0(const void *a1, size_t a2)\n{\n  size_t result; // rax\n  __int64 v3; // rdx\n  __int64 v4; // rcx\n  __int64 v5; // r8\n  __int64 v6; // r9\n  __int64 v7; // rbp\n  char *v8; // rbx\n  __int64 v9; // rsi\n  __int64 v10; // rdx\n  __int64 v11; // rcx\n\n  result = fwrite_unlocked(a1, 1uLL, a2, stdout);\n  if ( a2 > result )\n  {\n    clearerr_unlocked(stdout);\n    v7 = sub_409510(4LL, \"standard output\", v3, v4, v5, v6);\n    v8 = dcgettext(0LL, \"error writing %s\", 5);\n    v9 = (unsigned int)*__errno_location();\n    error(1, v9, v8, v7);\n    return sub_404920(1LL, v9, v10, v11);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404920",
            "funcStartAddr": "0x404920",
            "funcEndAddr": "0x404a19",
            "decompiledFuncCode": "__int64 __fastcall sub_404920(__int64 a1, int a2, __int64 a3, _QWORD *a4)\n{\n  __int64 result; // rax\n  __int64 v7; // rbx\n  __int64 v8; // rax\n  __int64 v9; // rdx\n  __int64 v10; // rcx\n  __int64 v11; // r8\n  __int64 v12; // r9\n  unsigned int v13; // r12d\n  char *v14; // rbp\n  char *v15; // rdi\n  __int64 v16; // rax\n  size_t v17; // rbp\n  __int64 v18; // rbp\n  char *v19; // rbx\n  int *v20; // rax\n  unsigned int v21; // [rsp+0h] [rbp-203Ch]\n  char buf[8248]; // [rsp+4h] [rbp-2038h] BYREF\n\n  result = 0LL;\n  if ( a3 )\n  {\n    v7 = a3;\n    while ( 1 )\n    {\n      v8 = sub_409780(a2, buf, 0x2000uLL);\n      if ( !v8 )\n        return 0xFFFFFFFFLL;\n      if ( v8 == -1 )\n        break;\n      *a4 += v8;\n      v13 = byte_612380;\n      v14 = &buf[v8];\n      v15 = buf;\n      while ( 1 )\n      {\n        v16 = sub_40B730(v15, v13, v14 - v15);\n        if ( !v16 )\n          break;\n        v15 = (char *)(v16 + 1);\n        if ( !--v7 )\n        {\n          result = 0LL;\n          if ( v14 > v15 )\n          {\n            v17 = v14 - v15;\n            if ( v17 )\n            {\n              v21 = 0;\n              sub_4048A0(v15, v17);\n              return v21;\n            }\n          }\n          return result;\n        }\n      }\n    }\n    v18 = sub_409510(4LL, a1, v9, v10, v11, v12);\n    v19 = dcgettext(0LL, \"error reading %s\", 5);\n    v20 = __errno_location();\n    error(0, *v20, v19, v18);\n    return 1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404A20",
            "funcStartAddr": "0x404a20",
            "funcEndAddr": "0x404b40",
            "decompiledFuncCode": "__int64 __fastcall sub_404A20(char a1, const char *a2, int a3, unsigned __int64 a4)\n{\n  __int64 v6; // r12\n  unsigned __int64 v8; // rbx\n  size_t v9; // rdx\n  __int64 v10; // rax\n  size_t v11; // r14\n  const char *v12; // rdx\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  int *v15; // rbx\n  __int64 v16; // r8\n  __int64 v17; // r9\n  __int64 v19; // rbp\n  char *v20; // rax\n  __int64 v21; // rsi\n  __int64 v22; // rdx\n  __int64 v23; // rcx\n  char buf[8248]; // [rsp+10h] [rbp-2038h] BYREF\n\n  v6 = 0LL;\n  v8 = a4;\n  while ( 1 )\n  {\n    v9 = 0x2000LL;\n    if ( v8 <= 0x2000 )\n      v9 = v8;\n    v10 = sub_409780(a3, buf, v9);\n    v11 = v10;\n    if ( v10 == -1 )\n      break;\n    if ( !v10 )\n      return v6;\n    if ( a1 )\n    {\n      v12 = \"\";\n      if ( !byte_612290 )\n        v12 = \"\\n\";\n      __printf_chk(1LL, \"%s==> %s <==\\n\", v12, a2);\n      byte_612290 = 0;\n    }\n    v6 += v11;\n    sub_4048A0(buf, v11);\n    if ( a4 != -1LL )\n    {\n      v8 -= v11;\n      if ( !v8 || a4 == -2LL )\n        return v6;\n    }\n    a1 = 0;\n  }\n  v15 = __errno_location();\n  if ( *v15 == 11 )\n    return v6;\n  v19 = sub_409510(4LL, a2, v13, v14, v16, v17);\n  v20 = dcgettext(0LL, \"error reading %s\", 5);\n  v21 = (unsigned int)*v15;\n  error(1, v21, v20, v19);\n  return sub_404B40(1LL, v21, v22, v23);\n}\n"
        },
        {
            "funcName": "sub_404B40",
            "funcStartAddr": "0x404b40",
            "funcEndAddr": "0x404c20",
            "decompiledFuncCode": "__int64 __fastcall sub_404B40(__int64 a1, int a2, unsigned __int64 a3, _QWORD *a4)\n{\n  unsigned __int64 v5; // rbx\n  unsigned __int64 v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rcx\n  __int64 v9; // r8\n  __int64 v10; // r9\n  __int64 v12; // rbp\n  char *v13; // rbx\n  int *v14; // rax\n  char v15[8232]; // [rsp+0h] [rbp-2028h] BYREF\n\n  if ( !a3 )\n    return 0LL;\n  v5 = a3;\n  while ( 1 )\n  {\n    v6 = sub_409780(a2, v15, 0x2000uLL);\n    if ( !v6 )\n      return 0xFFFFFFFFLL;\n    if ( v6 == -1LL )\n      break;\n    *a4 += v6;\n    if ( v6 > v5 )\n    {\n      sub_4048A0(&v15[v5], v6 - v5);\n      return 0LL;\n    }\n    v5 -= v6;\n    if ( !v5 )\n      return 0LL;\n  }\n  v12 = sub_409510(4LL, a1, v7, v8, v9, v10);\n  v13 = dcgettext(0LL, \"error reading %s\", 5);\n  v14 = __errno_location();\n  error(0, *v14, v13, v12);\n  return 1LL;\n}\n"
        },
        {
            "funcName": "sub_404C20",
            "funcStartAddr": "0x404c20",
            "funcEndAddr": "0x404cc4",
            "decompiledFuncCode": "__off_t __fastcall sub_404C20(int a1, __off_t a2, int a3, __int64 a4)\n{\n  __off_t result; // rax\n  __int64 v7; // r13\n  int *v8; // rbp\n  __int64 v9; // rax\n  const char *v10; // rsi\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // [rsp+0h] [rbp-48h] BYREF\n\n  result = lseek(a1, a2, a3);\n  if ( result < 0 )\n  {\n    v7 = sub_407A20(a2, &v13);\n    v8 = __errno_location();\n    v9 = sub_4095E0(0LL, 3LL, a4);\n    if ( a3 == 1 )\n      v10 = \"%s: cannot seek to relative offset %s\";\n    else\n      v10 = \"%s: cannot seek to offset %s\";\n    v11 = v9;\n    v12 = dcgettext(0LL, v10, 5);\n    error(0, *v8, v12, v11, v7);\n    exit(1);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404CD0",
            "funcStartAddr": "0x404cd0",
            "funcEndAddr": "0x404ef1",
            "decompiledFuncCode": "__int64 __fastcall sub_404CD0(const char *a1, int a2, __int64 a3, __int64 a4, unsigned __int64 a5, _QWORD *a6)\n{\n  __int64 v6; // r15\n  __int64 v7; // rbp\n  __off_t v8; // r13\n  __int64 v9; // rax\n  __int64 v10; // rdx\n  __int64 v11; // rcx\n  __int64 v12; // r8\n  __int64 v13; // r9\n  __int64 v14; // r12\n  __int64 v15; // rax\n  int v16; // ebp\n  size_t v17; // rdx\n  char *v18; // rax\n  __int64 v20; // rbp\n  char *v21; // rbx\n  int *v22; // rax\n  unsigned __int64 v25; // [rsp+18h] [rbp-2040h]\n  char s[8248]; // [rsp+20h] [rbp-2038h] BYREF\n\n  v25 = a5;\n  if ( !a3 )\n    return 1LL;\n  v6 = a3;\n  v7 = (__int64)(v25 - a4) % 0x2000;\n  if ( !v7 )\n    v7 = 0x2000LL;\n  v8 = v25 - v7;\n  sub_404C20(a2, v25 - v7, 0, (__int64)a1);\n  v9 = sub_409780(a2, s, v7);\n  v14 = v9;\n  if ( v9 != -1 )\n  {\n    *a6 = v8 + v9;\n    if ( v9 )\n    {\n      v6 -= s[v9 - 1] != (unsigned __int8)byte_612380;\n      goto LABEL_9;\n    }\nLABEL_6:\n    while ( v8 != a4 )\n    {\n      v8 -= 0x2000LL;\n      sub_404C20(a2, v8, 0, (__int64)a1);\n      v15 = sub_409780(a2, s, 0x2000uLL);\n      v14 = v15;\n      if ( v15 == -1 )\n        goto LABEL_19;\n      *a6 = v8 + v15;\n      if ( !v15 )\n        return 1LL;\nLABEL_9:\n      v16 = byte_612380;\n      v17 = v14;\n      while ( 1 )\n      {\n        v18 = (char *)memrchr(s, v16, v17);\n        if ( !v18 )\n          break;\n        v17 = v18 - s;\n        if ( !v6 )\n        {\n          if ( v14 - 1 != v17 )\n            sub_4048A0(v18 + 1, v14 - 1 - v17);\n          *a6 += sub_404A20(0, a1, a2, v25 - v14 - v8);\n          return 1LL;\n        }\n        --v6;\n        if ( !v17 )\n          goto LABEL_6;\n      }\n    }\n    sub_404C20(a2, v8, 0, (__int64)a1);\n    *a6 = sub_404A20(0, a1, a2, v25) + v8;\n    return 1LL;\n  }\nLABEL_19:\n  v20 = sub_409510(4LL, a1, v10, v11, v12, v13);\n  v21 = dcgettext(0LL, \"error reading %s\", 5);\n  v22 = __errno_location();\n  error(0, *v22, v21, v20);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_404F00",
            "funcStartAddr": "0x404f00",
            "funcEndAddr": "0x405090",
            "decompiledFuncCode": "void __fastcall sub_404F00(__int64 a1, _QWORD *a2)\n{\n  char *v2; // rbx\n  char *v3; // r13\n  int v4; // eax\n  bool v5; // bp\n  __int64 v6; // rax\n  __off_t v7; // rax\n  int *v8; // rax\n  int *v9; // rax\n  unsigned int v10; // edi\n  __int64 v11; // r14\n  char *v12; // rax\n  struct stat v13; // [rsp-30h] [rbp-B8h] BYREF\n\n  if ( *(_DWORD *)(a1 + 56) != -1 )\n  {\n    v2 = (char *)a1;\n    v3 = sub_4047E0(*(const char **)a1);\n    v4 = __fxstat(1, *(_DWORD *)(a1 + 56), &v13);\n    v5 = v4;\n    if ( v4 )\n    {\nLABEL_16:\n      v9 = __errno_location();\n      v10 = *((_DWORD *)v2 + 14);\n      *((_DWORD *)v2 + 15) = *v9;\n      sub_404820(v10, (__int64)v3);\n      *((_DWORD *)v2 + 14) = -1;\n      return;\n    }\n    if ( (*(_DWORD *)(a1 + 48) & 0xF000) == 0x8000 )\n    {\n      v7 = *(_QWORD *)(a1 + 8);\n      if ( v13.st_size < v7 )\n      {\n        v11 = sub_4095E0(0LL, 3LL, v3);\n        v12 = dcgettext(0LL, \"%s: file truncated\", 5);\n        error(0, 0, v12, v11);\n        sub_404C20(*(_DWORD *)(a1 + 56), 0LL, 0, (__int64)v3);\n        *(_QWORD *)(a1 + 8) = 0LL;\n      }\n      else if ( v13.st_size == v7\n             && *(_QWORD *)(a1 + 16) == v13.st_mtim.tv_sec\n             && *(_DWORD *)(a1 + 24) == LODWORD(v13.st_mtim.tv_nsec) )\n      {\n        return;\n      }\n    }\n    if ( byte_612381 )\n      v5 = *a2 != a1;\n    v6 = sub_404A20(v5, v3, *(_DWORD *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);\n    *(_QWORD *)(a1 + 8) += v6;\n    if ( v6 )\n    {\n      *a2 = a1;\n      if ( fflush_unlocked(stdout) )\n      {\n        v2 = dcgettext(0LL, \"write error\", 5);\n        v8 = __errno_location();\n        error(1, *v8, v2);\n        goto LABEL_16;\n      }\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_405090",
            "funcStartAddr": "0x405090",
            "funcEndAddr": "0x4056d7",
            "decompiledFuncCode": "__int64 __fastcall sub_405090(int a1, __int64 a2)\n{\n  unsigned int v2; // ebx\n  __int64 v3; // rdx\n  __int64 v4; // rcx\n  int *v5; // rbp\n  __int64 v6; // r8\n  __int64 v7; // r9\n  __int64 v9; // r12\n  char *v10; // rax\n  struct statfs v11; // [rsp+0h] [rbp-98h] BYREF\n\n  if ( !fstatfs(a1, &v11) )\n  {\n    if ( v11.f_type != 352400198 )\n    {\n      if ( v11.f_type > 352400198 )\n      {\n        if ( v11.f_type != 1650746742 )\n        {\n          if ( v11.f_type > 1650746742 )\n          {\n            if ( v11.f_type != 1936880249 )\n            {\n              if ( v11.f_type > 1936880249 )\n              {\n                if ( v11.f_type != 3380511080LL )\n                {\n                  if ( v11.f_type > 3380511080LL )\n                  {\n                    if ( v11.f_type != 4076150800LL )\n                    {\n                      if ( v11.f_type > 4076150800LL )\n                      {\n                        if ( v11.f_type != 4185718668LL )\n                        {\n                          LOBYTE(v2) = v11.f_type != 4187351113LL;\n                          return v2;\n                        }\n                      }\n                      else if ( v11.f_type != 3405662737LL )\n                      {\n                        LOBYTE(v2) = v11.f_type != 3730735588LL;\n                        return v2;\n                      }\n                    }\n                  }\n                  else if ( v11.f_type != 2435016766LL )\n                  {\n                    if ( v11.f_type > 2435016766LL )\n                    {\n                      if ( v11.f_type != 2508478710LL )\n                      {\n                        LOBYTE(v2) = v11.f_type != 2881100148LL;\n                        return v2;\n                      }\n                    }\n                    else if ( v11.f_type != 1953653091 )\n                    {\n                      LOBYTE(v2) = v11.f_type != 2240043254LL;\n                      return v2;\n                    }\n                  }\n                }\n              }\n              else if ( v11.f_type != 1684300152 )\n              {\n                if ( v11.f_type > 1684300152 )\n                {\n                  if ( v11.f_type != 1853056627 )\n                  {\n                    if ( v11.f_type > 1853056627 )\n                    {\n                      if ( v11.f_type != 1935894131 )\n                      {\n                        LOBYTE(v2) = v11.f_type != 1936814952;\n                        return v2;\n                      }\n                    }\n                    else if ( v11.f_type != 1733912937 )\n                    {\n                      LOBYTE(v2) = v11.f_type != 1746473250;\n                      return v2;\n                    }\n                  }\n                }\n                else if ( v11.f_type != 1650812274 )\n                {\n                  if ( v11.f_type <= 1650812274 )\n                  {\n                    LOBYTE(v2) = v11.f_type != 1650812272;\n                    return v2;\n                  }\n                  if ( v11.f_type != 1667723888 )\n                  {\n                    LOBYTE(v2) = v11.f_type != 1684170528;\n                    return v2;\n                  }\n                }\n              }\n            }\n          }\n          else if ( v11.f_type != 1161678120 )\n          {\n            if ( v11.f_type > 1161678120 )\n            {\n              if ( v11.f_type != 1410924800 )\n              {\n                if ( v11.f_type > 1410924800 )\n                {\n                  if ( v11.f_type != 1481003842 )\n                  {\n                    if ( v11.f_type > 1481003842 )\n                    {\n                      if ( v11.f_type != 1513908720 )\n                      {\n                        LOBYTE(v2) = v11.f_type != 1634035564;\n                        return v2;\n                      }\n                    }\n                    else if ( v11.f_type != 1448756819 )\n                    {\n                      LOBYTE(v2) = v11.f_type != 1479104553;\n                      return v2;\n                    }\n                  }\n                }\n                else if ( v11.f_type != 1397114950 )\n                {\n                  if ( v11.f_type > 1397114950 )\n                  {\n                    if ( v11.f_type != 1397118030 )\n                    {\n                      LOBYTE(v2) = v11.f_type != 1397703499;\n                      return v2;\n                    }\n                  }\n                  else if ( v11.f_type != 1382369651 )\n                  {\n                    LOBYTE(v2) = v11.f_type != 1397109069;\n                    return v2;\n                  }\n                }\n              }\n            }\n            else if ( v11.f_type != 732765674 )\n            {\n              if ( v11.f_type > 732765674 )\n              {\n                if ( v11.f_type != 1111905073 )\n                {\n                  if ( v11.f_type > 1111905073 )\n                  {\n                    if ( v11.f_type != 1112100429 )\n                    {\n                      LOBYTE(v2) = v11.f_type != 1128357203;\n                      return v2;\n                    }\n                  }\n                  else if ( v11.f_type != 801189825 )\n                  {\n                    LOBYTE(v2) = v11.f_type != 827541066;\n                    return v2;\n                  }\n                }\n              }\n              else if ( v11.f_type != 464386766 )\n              {\n                if ( v11.f_type <= 464386766 )\n                {\n                  LOBYTE(v2) = v11.f_type != 427819522;\n                  return v2;\n                }\n                if ( v11.f_type != 604313861 )\n                {\n                  LOBYTE(v2) = v11.f_type != 684539205;\n                  return v2;\n                }\n              }\n            }\n          }\n        }\n      }\n      else if ( v11.f_type != 29366 )\n      {\n        if ( v11.f_type > 29366 )\n        {\n          if ( v11.f_type != 4278867 )\n          {\n            if ( v11.f_type > 4278867 )\n            {\n              if ( v11.f_type > 19920823 )\n              {\n                if ( v11.f_type != 195894762 )\n                {\n                  if ( v11.f_type > 195894762 )\n                  {\n                    if ( v11.f_type != 288389204 )\n                    {\n                      LOBYTE(v2) = v11.f_type != 325456742;\n                      return v2;\n                    }\n                  }\n                  else if ( v11.f_type != 124082209 )\n                  {\n                    LOBYTE(v2) = v11.f_type != 151263540;\n                    return v2;\n                  }\n                }\n              }\n              else if ( v11.f_type < 19920820 && v11.f_type != 16914836 )\n              {\n                if ( v11.f_type <= 16914836 )\n                {\n                  LOBYTE(v2) = v11.f_type != 12648430;\n                  return v2;\n                }\n                if ( v11.f_type != 16914839 )\n                {\n                  LOBYTE(v2) = v11.f_type != 19911021;\n                  return v2;\n                }\n              }\n            }\n            else if ( v11.f_type != 44543 )\n            {\n              if ( v11.f_type > 44543 )\n              {\n                if ( v11.f_type != 61791 )\n                {\n                  if ( v11.f_type > 61791 )\n                  {\n                    if ( v11.f_type != 72020 )\n                    {\n                      LOBYTE(v2) = v11.f_type != 2613483;\n                      return v2;\n                    }\n                  }\n                  else if ( v11.f_type != 61265 )\n                  {\n                    LOBYTE(v2) = v11.f_type != 61267;\n                    return v2;\n                  }\n                }\n              }\n              else\n              {\n                if ( v11.f_type > 40866 )\n                {\n                  LOBYTE(v2) = v11.f_type != 44533;\n                  return v2;\n                }\n                if ( v11.f_type < 40864 )\n                {\n                  LOBYTE(v2) = v11.f_type != 38496;\n                  return v2;\n                }\n              }\n            }\n          }\n        }\n        else if ( v11.f_type != 13364 )\n        {\n          if ( v11.f_type > 13364 )\n          {\n            if ( v11.f_type != 18475 )\n            {\n              if ( v11.f_type > 18475 )\n              {\n                if ( v11.f_type != 19802 )\n                {\n                  if ( v11.f_type > 19802 )\n                  {\n                    if ( v11.f_type != 24053 )\n                    {\n                      LOBYTE(v2) = v11.f_type != 29301;\n                      return v2;\n                    }\n                  }\n                  else if ( v11.f_type != 18520 )\n                  {\n                    LOBYTE(v2) = v11.f_type != 19780;\n                    return v2;\n                  }\n                }\n              }\n              else if ( v11.f_type != 16388 )\n              {\n                if ( v11.f_type <= 16388 )\n                {\n                  LOBYTE(v2) = v11.f_type != 0x4000;\n                  return v2;\n                }\n                if ( v11.f_type != 16390 )\n                {\n                  LOBYTE(v2) = v11.f_type != 16964;\n                  return v2;\n                }\n              }\n            }\n          }\n          else if ( v11.f_type != 4989 )\n          {\n            if ( v11.f_type > 4989 )\n            {\n              if ( v11.f_type != 7377 )\n              {\n                if ( v11.f_type > 7377 )\n                {\n                  if ( v11.f_type != 9320 )\n                  {\n                    LOBYTE(v2) = v11.f_type != 9336;\n                    return v2;\n                  }\n                }\n                else if ( v11.f_type != 4991 )\n                {\n                  LOBYTE(v2) = v11.f_type != 5007;\n                  return v2;\n                }\n              }\n            }\n            else if ( v11.f_type != 391 )\n            {\n              if ( v11.f_type <= 391 )\n              {\n                LOBYTE(v2) = v11.f_type != 47;\n                return v2;\n              }\n              if ( v11.f_type != 1984 )\n              {\n                LOBYTE(v2) = v11.f_type != 4979;\n                return v2;\n              }\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n  v2 = 1;\n  v5 = __errno_location();\n  if ( *v5 == 38 )\n    return v2;\n  v9 = sub_409510(4LL, a2, v3, v4, v6, v7);\n  v10 = dcgettext(0LL, \"cannot determine location of %s. reverting to polling\", 5);\n  error(0, *v5, v10, v9);\n  return 1LL;\n}\n"
        },
        {
            "funcName": "sub_4056E0",
            "funcStartAddr": "0x4056e0",
            "funcEndAddr": "0x405d03",
            "decompiledFuncCode": "void __fastcall sub_4056E0(__int64 a1, char a2, int a3, __int64 a4, int a5, int a6)\n{\n  int v6; // r13d\n  int v8; // r14d\n  bool v9; // zf\n  _BOOL4 v10; // ebp\n  unsigned int v11; // r12d\n  int v12; // eax\n  char v13; // r15\n  char v14; // al\n  int *v15; // rax\n  char v16; // r15\n  const char *v17; // rbp\n  int *v18; // r13\n  int v19; // eax\n  char *v20; // rax\n  char *v21; // rax\n  char *v22; // rax\n  char v23; // al\n  int v24; // eax\n  char *v25; // rax\n  __int64 v26; // rdx\n  __int64 v27; // rcx\n  __int64 v28; // r8\n  __int64 v29; // r9\n  const char *v30; // rsi\n  __int64 v31; // r14\n  char *v32; // rax\n  __time_t tv_sec; // rax\n  const char *v34; // rdi\n  __syscall_slong_t tv_nsec; // rax\n  __dev_t st_dev; // rax\n  char *v37; // rax\n  char *v38; // rax\n  __int64 v39; // rdx\n  __int64 v40; // rcx\n  __int64 v41; // r8\n  __int64 v42; // r9\n  __int64 v43; // rbp\n  char *v44; // rax\n  char *v45; // rax\n  const char *v46; // rax\n  const char *v47; // rdi\n  char *v48; // rax\n  char *v49; // rax\n  __int64 v50; // rdx\n  __int64 v51; // rcx\n  __int64 v52; // r8\n  __int64 v53; // r9\n  __int64 v54; // r14\n  char *v55; // rax\n  char *v56; // rax\n  const char *v57; // r13\n  char *v58; // rax\n  char *v59; // rax\n  __int64 v60; // rdx\n  __int64 v61; // rcx\n  __int64 v62; // r8\n  __int64 v63; // r9\n  __int64 v64; // rbp\n  char *v65; // rax\n  const char *v66; // rdi\n  char *v67; // rax\n  __int64 v68; // rdx\n  __int64 v69; // rcx\n  __int64 v70; // r8\n  __int64 v71; // r9\n  __int64 v72; // rbp\n  char *v73; // rax\n  char *v74; // rax\n  __int64 v75; // rdx\n  __int64 v76; // rcx\n  __int64 v77; // r8\n  __int64 v78; // r9\n  __int64 v79; // rbp\n  char *v80; // rax\n  char *v81; // rax\n  __int64 v82; // rdx\n  __int64 v83; // rcx\n  __int64 v84; // r8\n  __int64 v85; // r9\n  char v86; // [rsp+7h] [rbp-D1h]\n  struct stat stat_buf; // [rsp+10h] [rbp-C8h] BYREF\n\n  LOBYTE(v6) = a2;\n  v8 = *(_DWORD *)(a1 + 60);\n  v9 = strcmp(*(const char **)a1, \"-\") == 0;\n  v86 = *(_BYTE *)(a1 + 54);\n  v10 = !v9;\n  if ( v9 )\n  {\n    v12 = *(_DWORD *)(a1 + 60);\n    v11 = 0;\n  }\n  else\n  {\n    v11 = sub_406780(*(_QWORD *)a1, (unsigned __int8)(a2 == 0) << 11, a3, *(unsigned __int8 *)(a1 + 54), a5, a6);\n    v12 = *(_DWORD *)(a1 + 60);\n  }\n  if ( (*(_DWORD *)(a1 + 56) == -1) == (v12 == 0) )\n    __assert_fail(\"valid_file_spec (f)\", \"src/tail.c\", 0x3C7u, \"recheck\");\n  v13 = byte_612386;\n  v14 = byte_612378;\n  if ( byte_612386 )\n  {\n    if ( v11 == -1 )\n    {\n      *(_BYTE *)(a1 + 54) = 0;\n      v17 = *(const char **)a1;\n      if ( v14 )\n      {\n        *(_DWORD *)(a1 + 60) = *__errno_location();\n        goto LABEL_28;\n      }\n      if ( !__lxstat(1, *(const char **)a1, &stat_buf) && (stat_buf.st_mode & 0xF000) == 40960 )\n        goto LABEL_53;\nLABEL_7:\n      v15 = __errno_location();\n      v16 = *(_BYTE *)(a1 + 54);\n      v17 = *(const char **)a1;\n      v18 = v15;\n      v19 = *v15;\n      *(_DWORD *)(a1 + 60) = v19;\n      if ( v16 )\n      {\n        if ( v19 != v8 )\n        {\n          v45 = sub_4047E0(v17);\n          v46 = (const char *)sub_4095E0(0LL, 3LL, v45);\n          error(0, *v18, \"%s\", v46);\n          v17 = *(const char **)a1;\n        }\n        goto LABEL_10;\n      }\nLABEL_28:\n      if ( v86 )\n      {\n        v38 = sub_4047E0(v17);\n        v43 = sub_409510(4LL, v38, v39, v40, v41, v42);\n        v44 = dcgettext(0LL, \"%s has become inaccessible\", 5);\n        error(0, *(_DWORD *)(a1 + 60), v44, v43);\n        v17 = *(const char **)a1;\n      }\n      goto LABEL_10;\n    }\n    *(_BYTE *)(a1 + 54) = 1;\n    if ( !v14 && !__lxstat(1, *(const char **)a1, &stat_buf) && (stat_buf.st_mode & 0xF000) == 40960 )\n      goto LABEL_53;\n  }\n  else\n  {\n    *(_BYTE *)(a1 + 54) = 1;\n    if ( !v14 && !__lxstat(1, *(const char **)a1, &stat_buf) && (stat_buf.st_mode & 0xF000) == 40960 )\n    {\nLABEL_53:\n      *(_DWORD *)(a1 + 60) = -1;\n      v66 = *(const char **)a1;\n      *(_BYTE *)(a1 + 52) = 1;\n      v67 = sub_4047E0(v66);\n      v72 = sub_409510(4LL, v67, v68, v69, v70, v71);\n      v73 = dcgettext(0LL, \"%s has been replaced with an untailable symbolic link\", 5);\n      error(0, 0, v73, v72);\n      v17 = *(const char **)a1;\n      goto LABEL_10;\n    }\n    if ( v11 == -1 )\n      goto LABEL_7;\n  }\n  if ( __fxstat(1, v11, &stat_buf) < 0 )\n    goto LABEL_7;\n  if ( (((stat_buf.st_mode & 0xF000) - 4096) & 0xFFFFE000) != 0 && (stat_buf.st_mode & 0xB000) != 0x8000 )\n  {\n    *(_DWORD *)(a1 + 60) = -1;\n    *(_BYTE *)(a1 + 54) = 0;\n    if ( v13 && dword_6122A8 == 1 )\n    {\n      v17 = *(const char **)a1;\n      *(_BYTE *)(a1 + 52) = 0;\n      if ( v86 )\n      {\n        v57 = \"\";\n      }\n      else\n      {\n        v57 = \"\";\n        if ( v8 == -1 )\n          goto LABEL_10;\n      }\n    }\n    else\n    {\n      *(_BYTE *)(a1 + 52) = 1;\n      if ( !v86 && v8 == -1 )\n        goto LABEL_50;\n      v58 = dcgettext(0LL, \"; giving up on this name\", 5);\n      v17 = *(const char **)a1;\n      v57 = v58;\n    }\n    v59 = sub_4047E0(v17);\n    v64 = sub_409510(4LL, v59, v60, v61, v62, v63);\n    v65 = dcgettext(0LL, \"%s has been replaced with an untailable file%s\", 5);\n    error(0, 0, v65, v64, v57);\nLABEL_50:\n    v17 = *(const char **)a1;\nLABEL_10:\n    v20 = sub_4047E0(v17);\n    sub_404820(v11, (__int64)v20);\n    v21 = sub_4047E0(*(const char **)a1);\n    sub_404820(*(_DWORD *)(a1 + 56), (__int64)v21);\n    *(_DWORD *)(a1 + 56) = -1;\n    return;\n  }\n  v22 = sub_4047E0(*(const char **)a1);\n  v23 = sub_405090(v11, (__int64)v22);\n  *(_BYTE *)(a1 + 53) = v23;\n  if ( v23 && !byte_612378 )\n  {\n    *(_DWORD *)(a1 + 60) = -1;\n    v74 = sub_4047E0(*(const char **)a1);\n    v79 = sub_409510(4LL, v74, v75, v76, v77, v78);\n    v80 = dcgettext(0LL, \"%s has been replaced with an untailable remote file\", 5);\n    error(0, 0, v80, v79);\n    v17 = *(const char **)a1;\n    *(_WORD *)(a1 + 52) = 257;\n    goto LABEL_10;\n  }\n  *(_DWORD *)(a1 + 60) = 0;\n  v24 = *(_DWORD *)(a1 + 56);\n  if ( (v8 & 0xFFFFFFFD) != 0 )\n  {\n    if ( v24 != -1 )\n      __assert_fail(\"f->fd == -1\", \"src/tail.c\", 0x414u, \"recheck\");\n    v25 = sub_4047E0(*(const char **)a1);\n    v30 = \"%s has become accessible\";\n    v31 = sub_409510(4LL, v25, v26, v27, v28, v29);\n    goto LABEL_22;\n  }\n  v47 = *(const char **)a1;\n  if ( v24 == -1 )\n  {\n    v81 = sub_4047E0(v47);\n    v30 = \"%s has appeared;  following new file\";\n    v31 = sub_409510(4LL, v81, v82, v83, v84, v85);\nLABEL_22:\n    v32 = dcgettext(0LL, v30, 5);\n    error(0, 0, v32, v31);\n    goto LABEL_23;\n  }\n  if ( *(_QWORD *)(a1 + 40) == stat_buf.st_ino && *(_QWORD *)(a1 + 32) == stat_buf.st_dev )\n  {\n    v48 = sub_4047E0(v47);\n    sub_404820(v11, (__int64)v48);\n    return;\n  }\n  v49 = sub_4047E0(v47);\n  v54 = sub_409510(4LL, v49, v50, v51, v52, v53);\n  v55 = dcgettext(0LL, \"%s has been replaced;  following new file\", 5);\n  error(0, 0, v55, v54);\n  v56 = sub_4047E0(*(const char **)a1);\n  sub_404820(*(_DWORD *)(a1 + 56), (__int64)v56);\nLABEL_23:\n  v6 = (unsigned __int8)v6;\n  *(_DWORD *)(a1 + 56) = v11;\n  if ( !v10 )\n    v6 = -1;\n  tv_sec = stat_buf.st_mtim.tv_sec;\n  v34 = *(const char **)a1;\n  *(_BYTE *)(a1 + 52) = 0;\n  *(_QWORD *)(a1 + 8) = 0LL;\n  *(_QWORD *)(a1 + 16) = tv_sec;\n  tv_nsec = stat_buf.st_mtim.tv_nsec;\n  *(_DWORD *)(a1 + 64) = v6;\n  *(_QWORD *)(a1 + 24) = tv_nsec;\n  st_dev = stat_buf.st_dev;\n  *(_QWORD *)(a1 + 88) = 0LL;\n  *(_QWORD *)(a1 + 32) = st_dev;\n  *(_QWORD *)(a1 + 40) = stat_buf.st_ino;\n  *(_DWORD *)(a1 + 48) = stat_buf.st_mode;\n  v37 = sub_4047E0(v34);\n  sub_404C20(v11, 0LL, 0, (__int64)v37);\n}\n"
        },
        {
            "funcName": "sub_405D10",
            "funcStartAddr": "0x405d10",
            "funcEndAddr": "0x406165",
            "decompiledFuncCode": "void __fastcall __noreturn sub_405D10(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  char *v4; // rax\n  FILE *v5; // rbp\n  char *v6; // rax\n  FILE *v7; // rbp\n  char *v8; // rax\n  FILE *v9; // rbp\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  FILE *v24; // rbp\n  char *v25; // rax\n  FILE *v26; // rbp\n  char *v27; // rax\n  __int64 *v28; // rax\n  char *v29; // rbp\n  char *v30; // rax\n  char *v31; // rax\n  const char *v32; // r12\n  char *v33; // rax\n  char *v34; // rax\n  char *v35; // rax\n  char *v36; // rax\n  char *v37; // rax\n  char *v38; // rax\n  __int64 v39[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_6123A0;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = dcgettext(\n         0LL,\n         \"Print the last %d lines of each FILE to standard output.\\n\"\n         \"With more than one FILE, precede each with a header giving the file name.\\n\",\n         5);\n  __printf_chk(1LL, v4, 10LL);\n  v5 = stdout;\n  v6 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v6, v5);\n  v7 = stdout;\n  v8 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v8, v7);\n  v9 = stdout;\n  v10 = dcgettext(\n          0LL,\n          \"  -c, --bytes=[+]NUM       output the last NUM bytes; or use -c +NUM to\\n\"\n          \"                             output starting with byte NUM of each file\\n\",\n          5);\n  fputs_unlocked(v10, v9);\n  v11 = stdout;\n  v12 = dcgettext(\n          0LL,\n          \"  -f, --follow[={name|descriptor}]\\n\"\n          \"                           output appended data as the file grows;\\n\"\n          \"                             an absent option argument means 'descriptor'\\n\"\n          \"  -F                       same as --follow=name --retry\\n\",\n          5);\n  fputs_unlocked(v12, v11);\n  v13 = dcgettext(\n          0LL,\n          \"  -n, --lines=[+]NUM       output the last NUM lines, instead of the last %d;\\n\"\n          \"                             or use -n +NUM to output starting with line NUM\\n\"\n          \"      --max-unchanged-stats=N\\n\"\n          \"                           with --follow=name, reopen a FILE which has not\\n\"\n          \"                             changed size after N (default %d) iterations\\n\"\n          \"                             to see if it has been unlinked or renamed\\n\"\n          \"                             (this is the usual case of rotated log files);\\n\"\n          \"                             with inotify, this option is rarely useful\\n\",\n          5);\n  __printf_chk(1LL, v13, 10LL, 5LL);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"      --pid=PID            with -f, terminate after process ID, PID dies\\n\"\n          \"  -q, --quiet, --silent    never output headers giving file names\\n\"\n          \"      --retry              keep trying to open a file if it is inaccessible\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"  -s, --sleep-interval=N   with -f, sleep for approximately N seconds\\n\"\n          \"                             (default 1.0) between iterations;\\n\"\n          \"                             with inotify and --pid=P, check process P at\\n\"\n          \"                             least once every N seconds\\n\"\n          \"  -v, --verbose            always output headers giving file names\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"NUM may have a multiplier suffix:\\n\"\n          \"b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\\n\"\n          \"GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(\n          0LL,\n          \"With --follow (-f), tail defaults to following the file descriptor, which\\n\"\n          \"means that even if a tail'ed file is renamed, tail will continue to track\\n\"\n          \"its end.  This default behavior is not desirable when you really want to\\n\"\n          \"track the actual name of the file, not the file descriptor (e.g., log\\n\"\n          \"rotation).  Use --follow=name in that case.  That causes tail to track the\\n\"\n          \"named file in a way that accommodates renaming, removal and creation.\\n\",\n          5);\n  fputs_unlocked(v27, v26);\n  v39[0] = (__int64)\"[\";\n  v28 = v39;\n  v39[1] = (__int64)\"test invocation\";\n  v39[2] = (__int64)\"coreutils\";\n  v39[3] = (__int64)\"Multi-call invocation\";\n  v39[4] = (__int64)\"sha224sum\";\n  v39[5] = (__int64)\"sha2 utilities\";\n  v39[6] = (__int64)\"sha256sum\";\n  v39[7] = (__int64)\"sha2 utilities\";\n  v39[8] = (__int64)\"sha384sum\";\n  v39[9] = (__int64)\"sha2 utilities\";\n  v39[10] = (__int64)\"sha512sum\";\n  v39[11] = (__int64)\"sha2 utilities\";\n  v39[12] = 0LL;\n  v39[13] = 0LL;\n  do\n    v28 += 2;\n  while ( *v28 && strcmp(\"tail\", (const char *)*v28) );\n  v29 = (char *)v28[1];\n  if ( v29 )\n  {\n    v30 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v30, &unk_40C375, \"https://www.gnu.org/software/coreutils/\");\n    v31 = setlocale(5, 0LL);\n    if ( !v31 || !strncmp(v31, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v35 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v35, &unk_40C375, \"https://www.gnu.org/software/coreutils/\");\n    v36 = setlocale(5, 0LL);\n    if ( !v36 || !strncmp(v36, \"en_\", 3uLL) )\n    {\n      v29 = \"tail\";\n      v37 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v32 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v37, \"https://www.gnu.org/software/coreutils/\", \"tail\");\nLABEL_12:\n      v34 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v34, v29, v32);\nLABEL_3:\n      exit(status);\n    }\n    v29 = \"tail\";\n  }\n  v38 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v38, \"tail\");\nLABEL_10:\n  v32 = \"Multi-call invocation\" + 10;\n  v33 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v33, \"https://www.gnu.org/software/coreutils/\", \"tail\");\n  if ( v29 != \"tail\" )\n    v32 = \"\";\n  goto LABEL_12;\n}\n"
        },
        {
            "funcName": "sub_406170",
            "funcStartAddr": "0x406170",
            "funcEndAddr": "0x40617a",
            "decompiledFuncCode": "void __noreturn sub_406170()\n{\n  sub_405D10(1);\n}\n"
        },
        {
            "funcName": "sub_406180",
            "funcStartAddr": "0x406180",
            "funcEndAddr": "0x406296",
            "decompiledFuncCode": "__int64 __fastcall sub_406180(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n\n  v5 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += a4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( a3 )\n      {\n        v10 = memcmp(&a3[a4 * v14], v5, a4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += a4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    return v14;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_4062A0",
            "funcStartAddr": "0x4062a0",
            "funcEndAddr": "0x406311",
            "decompiledFuncCode": "void __fastcall sub_4062A0(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_409740(1LL, a1);\n  v5 = sub_409430(0LL, 8LL, a2);\n  error(0, 0, v3, v5, v4);\n}\n"
        },
        {
            "funcName": "sub_406320",
            "funcStartAddr": "0x406320",
            "funcEndAddr": "0x406438",
            "decompiledFuncCode": "int __fastcall sub_406320(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  FILE *v6; // rbx\n  char *v7; // rax\n  __int64 v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  const char *v11; // rax\n  const char *v12; // rax\n  char *IO_write_ptr; // rax\n\n  v3 = 0LL;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = (__int64)v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, (FILE *)v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( 1 )\n    {\n      if ( v9 )\n      {\n        v8 = (__int64)a2;\n        if ( !memcmp(v3, a2, a3) )\n          break;\n      }\n      ++v9;\n      v3 = a2;\n      a2 += a3;\n      v11 = (const char *)sub_409760(i, v8);\n      v8 = 1LL;\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    a2 += a3;\n    v12 = (const char *)sub_409760(i, v8);\n    v8 = 1LL;\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  IO_write_ptr = stderr->_IO_write_ptr;\n  if ( IO_write_ptr >= stderr->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 10;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_406440",
            "funcStartAddr": "0x406440",
            "funcEndAddr": "0x4064b0",
            "decompiledFuncCode": "__int64 __fastcall sub_406440(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  __int64 result; // rax\n\n  result = sub_406180(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_4062A0(a1, (__int64)a2, result);\n    sub_406320((__int64 *)a3, a4, a5);\n    a6();\n    return -1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4064B0",
            "funcStartAddr": "0x4064b0",
            "funcEndAddr": "0x4064fd",
            "decompiledFuncCode": "__int64 __fastcall sub_4064B0(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  __int64 *v6; // rbx\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v6 = a2 + 1;\n    do\n    {\n      if ( !memcmp(s1, a3, a4) )\n        break;\n      v4 = *v6;\n      a3 += a4;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_406500",
            "funcStartAddr": "0x406500",
            "funcEndAddr": "0x40656a",
            "decompiledFuncCode": "double __fastcall sub_406500(char *nptr, char **endptr)\n{\n  if ( !loc )\n    loc = newlocale(8127, \"C\", 0LL);\n  if ( loc )\n    return strtod_l(nptr, endptr, loc);\n  if ( endptr )\n    *endptr = nptr;\n  return 0.0;\n}\n"
        },
        {
            "funcName": "sub_406590",
            "funcStartAddr": "0x406590",
            "funcEndAddr": "0x40662e",
            "decompiledFuncCode": "__int64 sub_406590()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_40B8F0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_612390 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_612398 )\n      {\n        v5 = (const char *)sub_4095B0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_40B8F0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406630",
            "funcStartAddr": "0x406630",
            "funcEndAddr": "0x40668d",
            "decompiledFuncCode": "__int64 __fastcall sub_406630(_BYTE *a1)\n{\n  unsigned __int64 v1; // rbp\n  __int64 v2; // rax\n  __int64 v3; // rdx\n\n  v1 = *a1 == 47;\n  v2 = sub_4066F0(a1);\n  if ( v2 - (__int64)a1 <= v1 )\n    return v2 - (_QWORD)a1;\n  v3 = v2 - (_QWORD)a1 - 1;\n  if ( *(_BYTE *)(v2 - 1) != 47 )\n    return v2 - (_QWORD)a1;\n  while ( v1 != v3 && a1[v3 - 1] == 47 )\n    --v3;\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_406690",
            "funcStartAddr": "0x406690",
            "funcEndAddr": "0x4066ea",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406690(_BYTE *src)\n{\n  __int64 v1; // rbx\n  _BYTE *v2; // rax\n  _BYTE *v3; // rcx\n  _BYTE *v4; // rax\n\n  v1 = sub_406630(src);\n  v2 = malloc(v1 + (v1 == 0) + 1);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = memcpy(v2, src, v1);\n    v3 = v4;\n    if ( !v1 )\n    {\n      *v4 = 46;\n      v1 = 1LL;\n    }\n    v4[v1] = 0;\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_4066F0",
            "funcStartAddr": "0x4066f0",
            "funcEndAddr": "0x40674b",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4066F0(_BYTE *a1)\n{\n  char v1; // dl\n  _BYTE *result; // rax\n  _BYTE *v3; // rcx\n  char v4; // si\n\n  v1 = *a1;\n  for ( result = a1; *result == 47; v1 = *result )\n    ++result;\n  if ( v1 )\n  {\n    v3 = result;\n    v4 = 0;\n    do\n    {\n      while ( v1 == 47 )\n      {\n        v1 = *++v3;\n        v4 = 1;\n        if ( !*v3 )\n          return result;\n      }\n      if ( v4 )\n      {\n        result = v3;\n        v4 = 0;\n      }\n      v1 = *++v3;\n    }\n    while ( *v3 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406750",
            "funcStartAddr": "0x406750",
            "funcEndAddr": "0x40677b",
            "decompiledFuncCode": "size_t __fastcall sub_406750(const char *a1)\n{\n  size_t result; // rax\n  size_t v2; // rdx\n\n  result = strlen(a1);\n  if ( result > 1 )\n  {\n    do\n    {\n      v2 = result - 1;\n      if ( a1[result - 1] != 47 )\n        break;\n      --result;\n    }\n    while ( v2 != 1 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406780",
            "funcStartAddr": "0x406780",
            "funcEndAddr": "0x4067ca",
            "decompiledFuncCode": "__int64 __fastcall sub_406780(const char *a1, char a2, unsigned int a3)\n{\n  __int64 v3; // rdx\n  int v4; // eax\n\n  v3 = 0LL;\n  if ( (a2 & 0x40) != 0 )\n    v3 = a3;\n  v4 = open(a1, a2, v3);\n  return sub_4097E0(v4);\n}\n"
        },
        {
            "funcName": "sub_4067D0",
            "funcStartAddr": "0x4067d0",
            "funcEndAddr": "0x406863",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4067D0(unsigned __int64 a1)\n{\n  __int64 v1; // rsi\n  unsigned __int64 v2; // rsi\n  unsigned __int64 v3; // rax\n  __int64 v4; // r8\n  unsigned __int64 v5; // rdi\n  unsigned __int64 v6; // rcx\n\n  v1 = 10LL;\n  if ( a1 >= 0xA )\n    v1 = a1;\n  v2 = v1 | 1;\n  if ( v2 != -1LL )\n  {\n    while ( 1 )\n    {\n      v3 = v2 % 3;\n      if ( v2 <= 9 )\n        goto LABEL_9;\n      if ( v2 % 3 )\n        break;\nLABEL_10:\n      v2 += 2LL;\n      if ( v2 == -1LL )\n        return v2;\n    }\n    v4 = 16LL;\n    v5 = 9LL;\n    v6 = 3LL;\n    while ( 1 )\n    {\n      v6 += 2LL;\n      v5 += v4;\n      v3 = v2 % v6;\n      if ( v5 >= v2 )\n        break;\n      v4 += 8LL;\n      if ( !(v2 % v6) )\n        goto LABEL_10;\n    }\nLABEL_9:\n    if ( v3 )\n      return v2;\n    goto LABEL_10;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_406870",
            "funcStartAddr": "0x406870",
            "funcEndAddr": "0x406880",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406870(__int64 a1, unsigned __int64 a2)\n{\n  return __ROR8__(a1, 3) % a2;\n}\n"
        },
        {
            "funcName": "sub_406880",
            "funcStartAddr": "0x406880",
            "funcEndAddr": "0x406887",
            "decompiledFuncCode": "bool __fastcall sub_406880(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n"
        },
        {
            "funcName": "sub_406890",
            "funcStartAddr": "0x401e20",
            "funcEndAddr": "0x401e25",
            "decompiledFuncCode": "__int64 __fastcall sub_406890(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_406890(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n"
        },
        {
            "funcName": "sub_406890",
            "funcStartAddr": "0x401e20",
            "funcEndAddr": "0x401e25",
            "decompiledFuncCode": "__int64 __fastcall sub_406890(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_406890(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n"
        },
        {
            "funcName": "sub_4068C0",
            "funcStartAddr": "0x4068c0",
            "funcEndAddr": "0x4069d9",
            "decompiledFuncCode": "__int64 __fastcall sub_4068C0(__int64 a1, __int64 a2, __m128i **a3, char a4)\n{\n  __m128i *v7; // rax\n  __int64 v8; // rsi\n  __m128i *v9; // rbx\n  __int64 *v10; // rax\n  const __m128i *v12; // rax\n\n  v7 = (__m128i *)sub_406890(a1, a2);\n  *a3 = v7;\n  v8 = v7->m128i_i64[0];\n  if ( v7->m128i_i64[0] )\n  {\n    v9 = v7;\n    if ( v8 != a2 )\n    {\n      if ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(a2) )\n      {\n        v10 = (__int64 *)v9->m128i_i64[1];\n        if ( v10 )\n        {\n          v8 = *v10;\n          if ( a2 != *v10 )\n          {\n            while ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(a2) )\n            {\n              v9 = (__m128i *)v9->m128i_i64[1];\n              v10 = (__int64 *)v9->m128i_i64[1];\n              if ( !v10 )\n                return 0LL;\n              v8 = *v10;\n              if ( *v10 == a2 )\n                goto LABEL_11;\n            }\n            v10 = (__int64 *)v9->m128i_i64[1];\n            v8 = *v10;\n          }\nLABEL_11:\n          if ( a4 )\n          {\n            v9->m128i_i64[1] = v10[1];\n            *v10 = 0LL;\n            v10[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v10;\n          }\n          return v8;\n        }\n        return 0LL;\n      }\n      v8 = v9->m128i_i64[0];\n    }\n    if ( a4 )\n    {\n      v12 = (const __m128i *)v9->m128i_i64[1];\n      if ( v12 )\n      {\n        *v9 = _mm_loadu_si128(v12);\n        v12->m128i_i64[0] = 0LL;\n        v12->m128i_i64[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = v12;\n        return v8;\n      }\n      v9->m128i_i64[0] = 0LL;\n    }\n    return v8;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4069E0",
            "funcStartAddr": "0x4069e0",
            "funcEndAddr": "0x406a5e",
            "decompiledFuncCode": "__int64 __fastcall sub_4069E0(float **a1)\n{\n  float *v1; // rax\n  float v2; // xmm0_4\n  float v3; // xmm1_4\n  float v4; // xmm2_4\n  __int64 result; // rax\n\n  v1 = *a1;\n  if ( *a1 == (float *)&unk_40D880 )\n    return 1LL;\n  v2 = v1[2];\n  if ( v2 <= 0.1\n    || v2 >= 0.89999998\n    || v1[3] <= 1.1\n    || *v1 < 0.0\n    || (v3 = *v1 + 0.1, v4 = v1[1], v4 <= v3)\n    || v4 > 1.0\n    || (result = 1LL, v2 <= v3) )\n  {\n    *a1 = (float *)&unk_40D880;\n    return 0LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406A60",
            "funcStartAddr": "0x406a60",
            "funcEndAddr": "0x406baa",
            "decompiledFuncCode": "__int64 __fastcall sub_406A60(__int64 a1, __int64 a2, char a3)\n{\n  __int64 *v4; // r12\n  __int64 v5; // r15\n  __int64 *v6; // rbx\n  __int64 v7; // r15\n  _QWORD *v8; // rax\n  __int64 *v9; // rdx\n  _QWORD *v10; // rax\n  _QWORD *v11; // rbx\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n\n  v4 = *(__int64 **)a2;\n  if ( *(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) )\n    return 1LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v5 = *v4;\n      if ( *v4 )\n      {\n        v6 = (__int64 *)v4[1];\n        if ( v6 )\n        {\n          do\n          {\n            while ( 1 )\n            {\n              v7 = *v6;\n              v8 = (_QWORD *)sub_406890(a1, *v6);\n              v9 = (__int64 *)v6[1];\n              if ( !*v8 )\n                break;\n              v6[1] = v8[1];\n              v8[1] = v6;\n              v6 = v9;\n              if ( !v9 )\n                goto LABEL_10;\n            }\n            *v8 = v7;\n            ++*(_QWORD *)(a1 + 24);\n            *v6 = 0LL;\n            v6[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v6;\n            v6 = v9;\n          }\n          while ( v9 );\nLABEL_10:\n          v5 = *v4;\n        }\n        v4[1] = 0LL;\n        if ( !a3 )\n          break;\n      }\n      v4 += 2;\n      if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n        return 1LL;\n    }\n    v10 = (_QWORD *)sub_406890(a1, v5);\n    v11 = v10;\n    if ( !*v10 )\n    {\n      *v10 = v5;\n      ++*(_QWORD *)(a1 + 24);\n      goto LABEL_16;\n    }\n    v12 = *(_QWORD **)(a1 + 72);\n    if ( !v12 )\n      break;\n    *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_15:\n    v13 = v11[1];\n    *v12 = v5;\n    v12[1] = v13;\n    v11[1] = v12;\nLABEL_16:\n    *v4 = 0LL;\n    v4 += 2;\n    --*(_QWORD *)(a2 + 24);\n    if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n      return 1LL;\n  }\n  v12 = malloc(0x10uLL);\n  if ( v12 )\n    goto LABEL_15;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_406BD0",
            "funcStartAddr": "0x406bd0",
            "funcEndAddr": "0x406bd5",
            "decompiledFuncCode": "__int64 __fastcall sub_406BD0(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "sub_406CA0",
            "funcStartAddr": "0x406ca0",
            "funcEndAddr": "0x406de8",
            "decompiledFuncCode": "__int64 __fastcall sub_406CA0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // rbx\n  __int64 v4; // rcx\n  __int64 v5; // r12\n  __int64 v6; // r13\n  _QWORD *v7; // rsi\n  unsigned __int64 i; // rdi\n  __int64 v9; // rax\n  unsigned __int64 j; // rdx\n  double v11; // xmm0_8\n  double v12; // xmm1_8\n\n  v3 = 0LL;\n  v4 = *(_QWORD *)(a1 + 32);\n  v5 = *(_QWORD *)(a1 + 16);\n  v6 = *(_QWORD *)(a1 + 24);\n  v7 = *(_QWORD **)a1;\n  for ( i = *(_QWORD *)(a1 + 8); (unsigned __int64)v7 < i; v7 += 2 )\n  {\n    while ( !*v7 )\n    {\n      v7 += 2;\n      if ( (unsigned __int64)v7 >= i )\n        goto LABEL_10;\n    }\n    v9 = v7[1];\n    for ( j = 1LL; v9; ++j )\n      v9 = *(_QWORD *)(v9 + 8);\n    if ( v3 < j )\n      v3 = j;\n  }\nLABEL_10:\n  __fprintf_chk(a2, 1LL, \"# entries:         %lu\\n\", v4);\n  __fprintf_chk(a2, 1LL, \"# buckets:         %lu\\n\", v5);\n  if ( v6 < 0 )\n  {\n    v11 = ((double)(int)(v6 & 1 | ((unsigned __int64)v6 >> 1)) + (double)(int)(v6 & 1 | ((unsigned __int64)v6 >> 1)))\n        * 100.0;\n    if ( v5 >= 0 )\n      goto LABEL_12;\nLABEL_15:\n    v12 = (double)(int)(v5 & 1 | ((unsigned __int64)v5 >> 1)) + (double)(int)(v5 & 1 | ((unsigned __int64)v5 >> 1));\n    goto LABEL_13;\n  }\n  v11 = (double)(int)v6 * 100.0;\n  if ( v5 < 0 )\n    goto LABEL_15;\nLABEL_12:\n  v12 = (double)(int)v5;\nLABEL_13:\n  __fprintf_chk(a2, 1LL, \"# buckets used:    %lu (%.2f%%)\\n\", v6, v11 / v12);\n  return __fprintf_chk(a2, 1LL, \"max bucket length: %lu\\n\", v3);\n}\n"
        },
        {
            "funcName": "sub_406DF0",
            "funcStartAddr": "0x406df0",
            "funcEndAddr": "0x406e43",
            "decompiledFuncCode": "__int64 __fastcall sub_406DF0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  _QWORD *v3; // rax\n  __int64 v4; // rsi\n  _QWORD *v5; // rbx\n\n  v2 = a2;\n  v3 = (_QWORD *)sub_406890(a1, a2);\n  v4 = *v3;\n  if ( !*v3 )\n    return 0LL;\n  v5 = v3;\n  while ( v4 != v2 )\n  {\n    if ( (*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v2) )\n      return *v5;\n    v5 = (_QWORD *)v5[1];\n    if ( !v5 )\n      return 0LL;\n    v4 = *v5;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_406EA0",
            "funcStartAddr": "0x406ea0",
            "funcEndAddr": "0x406f0a",
            "decompiledFuncCode": "__int64 __fastcall sub_406EA0(__int64 a1, __int64 a2)\n{\n  _QWORD *v2; // rcx\n  _QWORD *v3; // rdx\n  __int64 v4; // rax\n  __int64 result; // rax\n\n  v2 = (_QWORD *)sub_406890(a1, a2);\n  v3 = v2;\n  while ( 1 )\n  {\n    v4 = *v3;\n    v3 = (_QWORD *)v3[1];\n    if ( v4 == a2 )\n      break;\n    if ( !v3 )\n      goto LABEL_7;\n  }\n  if ( v3 )\n    return *v3;\nLABEL_7:\n  while ( 1 )\n  {\n    v2 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v2 )\n      break;\n    result = *v2;\n    if ( *v2 )\n      return result;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_406F80",
            "funcStartAddr": "0x406f80",
            "funcEndAddr": "0x406ff8",
            "decompiledFuncCode": "__int64 __fastcall sub_406F80(__int64 a1, unsigned __int8 (__fastcall *a2)(__int64, __int64), __int64 a3)\n{\n  __int64 *v3; // r14\n  __int64 v6; // rbp\n  __int64 v7; // rdi\n  __int64 *v9; // rbx\n\n  v3 = *(__int64 **)a1;\n  if ( *(_QWORD *)(a1 + 8) <= *(_QWORD *)a1 )\n    return 0LL;\n  v6 = 0LL;\n  while ( 1 )\n  {\n    v7 = *v3;\n    if ( *v3 )\n      break;\nLABEL_4:\n    v3 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v3 )\n      return v6;\n  }\n  v9 = v3;\n  while ( a2(v7, a3) )\n  {\n    v9 = (__int64 *)v9[1];\n    ++v6;\n    if ( !v9 )\n      goto LABEL_4;\n    v7 = *v9;\n  }\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_407060",
            "funcStartAddr": "0x407060",
            "funcEndAddr": "0x4071ea",
            "decompiledFuncCode": "_QWORD *__fastcall sub_407060(\n        __int64 a1,\n        __int64 a2,\n        unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2),\n        bool (__fastcall *a4)(__int64 a1, __int64 a2),\n        __int64 a5)\n{\n  bool (__fastcall *v6)(__int64, __int64); // r13\n  unsigned __int64 (__fastcall *v7)(__int64, unsigned __int64); // r12\n  char *v9; // rax\n  _QWORD *v10; // rbx\n  float **v11; // rdi\n  unsigned __int64 v12; // rbp\n  char *v13; // rax\n  void *v14; // rdi\n  float v16; // xmm1_4\n  float v17; // xmm0_4\n  float v18; // xmm0_4\n\n  v6 = a4;\n  v7 = a3;\n  if ( !a3 )\n    v7 = sub_406870;\n  if ( !a4 )\n    v6 = sub_406880;\n  v9 = (char *)malloc(0x50uLL);\n  v10 = v9;\n  if ( v9 )\n  {\n    v11 = (float **)(v9 + 40);\n    if ( a2 )\n    {\n      *((_QWORD *)v9 + 5) = a2;\n      if ( !(unsigned __int8)sub_4069E0(v11) )\n        goto LABEL_14;\n      if ( *(_BYTE *)(a2 + 16) )\n      {\nLABEL_9:\n        v12 = sub_4067D0(a1);\n        if ( (v12 & 0x1000000000000000LL) == 0 && !(v12 >> 61) )\n        {\n          v10[2] = v12;\n          if ( v12 )\n          {\n            v13 = (char *)calloc(v12, 0x10uLL);\n            *v10 = v13;\n            if ( v13 )\n            {\n              v10[3] = 0LL;\n              v10[4] = 0LL;\n              v10[1] = &v13[16 * v12];\n              v10[6] = v7;\n              v10[7] = v6;\n              v10[8] = a5;\n              v10[9] = 0LL;\n              return v10;\n            }\n          }\n        }\nLABEL_14:\n        v14 = v10;\n        v10 = 0LL;\n        free(v14);\n        return v10;\n      }\n      v16 = *(float *)(a2 + 8);\n      if ( a1 < 0 )\n        goto LABEL_23;\n    }\n    else\n    {\n      *((_QWORD *)v9 + 5) = &unk_40D880;\n      v16 = 0.80000001;\n      if ( !(unsigned __int8)sub_4069E0(v11) )\n        goto LABEL_14;\n      if ( a1 < 0 )\n      {\nLABEL_23:\n        v17 = (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1))\n            + (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1));\n        goto LABEL_19;\n      }\n    }\n    v17 = (float)(int)a1;\nLABEL_19:\n    v18 = v17 / v16;\n    if ( v18 >= 1.8446744e19 )\n      goto LABEL_14;\n    if ( v18 < 9.223372e18 )\n      a1 = (unsigned int)(int)v18;\n    else\n      a1 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n    goto LABEL_9;\n  }\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_4071F0",
            "funcStartAddr": "0x4071f0",
            "funcEndAddr": "0x407298",
            "decompiledFuncCode": "void __fastcall sub_4071F0(_QWORD *a1)\n{\n  _QWORD *v1; // r12\n  _QWORD *v2; // rbx\n  void (__fastcall *v3)(_QWORD); // rax\n  _QWORD *v4; // rdx\n  __int64 v5; // rcx\n\n  v1 = (_QWORD *)*a1;\n  if ( *a1 < a1[1] )\n  {\n    do\n    {\n      while ( !*v1 )\n      {\n        v1 += 2;\n        if ( a1[1] <= (unsigned __int64)v1 )\n          goto LABEL_12;\n      }\n      v2 = (_QWORD *)v1[1];\n      v3 = (void (__fastcall *)(_QWORD))a1[8];\n      if ( v2 )\n      {\n        do\n        {\n          if ( v3 )\n          {\n            v3(*v2);\n            v3 = (void (__fastcall *)(_QWORD))a1[8];\n          }\n          v4 = (_QWORD *)v2[1];\n          v5 = a1[9];\n          *v2 = 0LL;\n          v2[1] = v5;\n          a1[9] = v2;\n          v2 = v4;\n        }\n        while ( v4 );\n      }\n      if ( v3 )\n        v3(*v1);\n      *v1 = 0LL;\n      v1 += 2;\n      *(v1 - 1) = 0LL;\n    }\n    while ( a1[1] > (unsigned __int64)v1 );\n  }\nLABEL_12:\n  a1[3] = 0LL;\n  a1[4] = 0LL;\n}\n"
        },
        {
            "funcName": "sub_4072A0",
            "funcStartAddr": "0x4072a0",
            "funcEndAddr": "0x407376",
            "decompiledFuncCode": "void __fastcall sub_4072A0(_QWORD *ptr)\n{\n  _QWORD *v2; // rbp\n  unsigned __int64 v3; // rax\n  _QWORD *v4; // rbx\n  _QWORD *v5; // rdi\n  _QWORD *v6; // rbx\n  _QWORD *v7; // rdi\n  _QWORD *v8; // rbx\n\n  v2 = (_QWORD *)*ptr;\n  v3 = ptr[1];\n  if ( ptr[8] && ptr[4] )\n  {\n    if ( (unsigned __int64)v2 >= v3 )\n      goto LABEL_15;\n    do\n    {\n      while ( !*v2 )\n      {\n        v2 += 2;\n        if ( v3 <= (unsigned __int64)v2 )\n          goto LABEL_10;\n      }\n      v4 = v2;\n      do\n      {\n        ((void (*)(void))ptr[8])();\n        v4 = (_QWORD *)v4[1];\n      }\n      while ( v4 );\n      v3 = ptr[1];\n      v2 += 2;\n    }\n    while ( v3 > (unsigned __int64)v2 );\nLABEL_10:\n    v2 = (_QWORD *)*ptr;\n  }\n  if ( (unsigned __int64)v2 < v3 )\n  {\n    do\n    {\n      v5 = (_QWORD *)v2[1];\n      if ( v5 )\n      {\n        do\n        {\n          v6 = (_QWORD *)v5[1];\n          free(v5);\n          v5 = v6;\n        }\n        while ( v6 );\n      }\n      v2 += 2;\n    }\n    while ( ptr[1] > (unsigned __int64)v2 );\n  }\nLABEL_15:\n  v7 = (_QWORD *)ptr[9];\n  if ( v7 )\n  {\n    do\n    {\n      v8 = (_QWORD *)v7[1];\n      free(v7);\n      v7 = v8;\n    }\n    while ( v8 );\n  }\n  free((void *)*ptr);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_407380",
            "funcStartAddr": "0x401e2a",
            "funcEndAddr": "0x401e2f",
            "decompiledFuncCode": "__int64 __fastcall sub_407380(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_4067D0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_406A60((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_406A60(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_406A60(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n\n__int64 __fastcall sub_407380(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_4067D0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_406A60((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_406A60(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_406A60(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_407380",
            "funcStartAddr": "0x401e2a",
            "funcEndAddr": "0x401e2f",
            "decompiledFuncCode": "__int64 __fastcall sub_407380(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_4067D0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_406A60((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_406A60(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_406A60(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n\n__int64 __fastcall sub_407380(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_4067D0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_406A60((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_406A60(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_406A60(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_407580",
            "funcStartAddr": "0x401e2f",
            "funcEndAddr": "0x401e34",
            "decompiledFuncCode": "__int64 __fastcall sub_407580(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_4068C0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_4069E0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_407380(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_4068C0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_407580(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_4068C0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_4069E0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_407380(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_4068C0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407580",
            "funcStartAddr": "0x401e2f",
            "funcEndAddr": "0x401e34",
            "decompiledFuncCode": "__int64 __fastcall sub_407580(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_4068C0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_4069E0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_407380(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_4068C0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_407580(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_4068C0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_4069E0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_407380(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_4068C0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407800",
            "funcStartAddr": "0x407800",
            "funcEndAddr": "0x40783b",
            "decompiledFuncCode": "__int64 __fastcall sub_407800(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  int v3; // eax\n  __int64 v5; // [rsp+8h] [rbp-10h] BYREF\n\n  v2 = a2;\n  v3 = sub_407580(a1, a2, &v5);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( !v3 )\n    return v5;\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_407840",
            "funcStartAddr": "0x407840",
            "funcEndAddr": "0x407a17",
            "decompiledFuncCode": "__int64 __fastcall sub_407840(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rbp\n  __m128i *v4; // rax\n  __int64 v6; // rax\n  float *v7; // rdx\n  float v8; // xmm0_4\n  __int64 v9; // rax\n  float v10; // xmm1_4\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  float v13; // xmm0_4\n  __int64 v14; // rax\n  float v15; // xmm1_4\n  float v16; // xmm0_4\n  __int64 v17; // rsi\n  _QWORD *v18; // rdi\n  _QWORD *v19; // r12\n  int v20; // edx\n  float v21; // xmm0_4\n  __int64 v22; // rcx\n  __int64 v23; // rcx\n  __m128i *v24; // [rsp+8h] [rbp-20h] BYREF\n\n  v3 = sub_4068C0(a1, a2, &v24, 1);\n  if ( !v3 )\n    return v3;\n  v4 = v24;\n  --*(_QWORD *)(a1 + 32);\n  if ( v4->m128i_i64[0] )\n    return v3;\n  v6 = *(_QWORD *)(a1 + 24) - 1LL;\n  *(_QWORD *)(a1 + 24) = v6;\n  if ( v6 < 0 )\n  {\n    v20 = v6 & 1 | ((unsigned __int64)v6 >> 1);\n    v9 = *(_QWORD *)(a1 + 16);\n    v21 = (float)v20;\n    v7 = *(float **)(a1 + 40);\n    v8 = v21 + v21;\n    if ( v9 >= 0 )\n      goto LABEL_6;\nLABEL_22:\n    v10 = (float)(v9 & 1 | (unsigned int)((unsigned __int64)v9 >> 1))\n        + (float)(v9 & 1 | (unsigned int)((unsigned __int64)v9 >> 1));\n    goto LABEL_7;\n  }\n  v7 = *(float **)(a1 + 40);\n  v8 = (float)(int)v6;\n  v9 = *(_QWORD *)(a1 + 16);\n  if ( v9 < 0 )\n    goto LABEL_22;\nLABEL_6:\n  v10 = (float)(int)v9;\nLABEL_7:\n  if ( (float)(v10 * *v7) > v8 )\n  {\n    sub_4069E0((float **)(a1 + 40));\n    v11 = *(_QWORD *)(a1 + 16);\n    v12 = *(_QWORD *)(a1 + 40);\n    if ( v11 < 0 )\n    {\n      v23 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n      v13 = (float)(int)v23 + (float)(int)v23;\n    }\n    else\n    {\n      v13 = (float)(int)v11;\n    }\n    v14 = *(_QWORD *)(a1 + 24);\n    if ( v14 < 0 )\n    {\n      v22 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n      v15 = (float)(int)v22 + (float)(int)v22;\n    }\n    else\n    {\n      v15 = (float)(int)v14;\n    }\n    if ( (float)(*(float *)v12 * v13) > v15 )\n    {\n      v16 = v13 * *(float *)(v12 + 4);\n      if ( !*(_BYTE *)(v12 + 16) )\n        v16 = v16 * *(float *)(v12 + 8);\n      if ( v16 >= 9.223372e18 )\n        v17 = (unsigned int)(int)(float)(v16 - 9.223372e18) ^ 0x8000000000000000LL;\n      else\n        v17 = (unsigned int)(int)v16;\n      if ( !(unsigned __int8)sub_407380(a1, v17) )\n      {\n        v18 = *(_QWORD **)(a1 + 72);\n        if ( v18 )\n        {\n          do\n          {\n            v19 = (_QWORD *)v18[1];\n            free(v18);\n            v18 = v19;\n          }\n          while ( v19 );\n        }\n        *(_QWORD *)(a1 + 72) = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_407A20",
            "funcStartAddr": "0x407a20",
            "funcEndAddr": "0x407abc",
            "decompiledFuncCode": "__int64 __fastcall sub_407A20(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n  int v4; // eax\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  if ( a1 < 0 )\n  {\n    while ( 1 )\n    {\n      v4 = 10 * (a1 / 10) + 48 - a1;\n      a1 /= 10LL;\n      *(_BYTE *)(v2 - 1) = v4;\n      if ( !a1 )\n        break;\n      --v2;\n    }\n    *(_BYTE *)(v2 - 2) = 45;\n    return v2 - 2;\n  }\n  else\n  {\n    do\n    {\n      *(_BYTE *)--v2 = a1 % 0xAuLL + 48;\n      a1 /= 0xAuLL;\n    }\n    while ( a1 );\n    return v2;\n  }\n}\n"
        },
        {
            "funcName": "sub_407AC0",
            "funcStartAddr": "0x407ac0",
            "funcEndAddr": "0x407b32",
            "decompiledFuncCode": "__int64 sub_407AC0()\n{\n  unsigned int v0; // ebx\n  char *v1; // rax\n  __int64 v3; // rax\n  unsigned int v4; // ebx\n  char *endptr; // [rsp+8h] [rbp-10h] BYREF\n\n  v0 = 200809;\n  v1 = getenv(\"_POSIX2_VERSION\");\n  if ( !v1 )\n    return v0;\n  if ( !*v1 )\n    return v0;\n  v3 = strtol(v1, &endptr, 10);\n  if ( *endptr )\n    return v0;\n  if ( v3 < (__int64)0xFFFFFFFF80000000LL )\n    return 0x80000000;\n  v4 = 0x7FFFFFFF;\n  if ( v3 <= 0x7FFFFFFF )\n    return (unsigned int)v3;\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_407B40",
            "funcStartAddr": "0x407b40",
            "funcEndAddr": "0x407bd9",
            "decompiledFuncCode": "char *__fastcall sub_407B40(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_6123A0 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407BE0",
            "funcStartAddr": "0x407be0",
            "funcEndAddr": "0x407cd2",
            "decompiledFuncCode": "char *__fastcall sub_407BE0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40BA70();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40D921;\n      if ( !v5 )\n        return (char *)&unk_40D916;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40D91D;\n    if ( !v5 )\n      return (char *)&unk_40D91A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_407CE0",
            "funcStartAddr": "0x401e34",
            "funcEndAddr": "0x401e39",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407CE0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_407CE0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_407CE0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40B6B0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_407CE0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_407BE0(\"`\", a5);\n        v51 = sub_407BE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_407CE0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_407CE0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_407CE0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40B6B0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_407CE0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_407BE0(\"`\", a5);\n        v51 = sub_407BE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_407CE0",
            "funcStartAddr": "0x401e34",
            "funcEndAddr": "0x401e39",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407CE0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_407CE0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_407CE0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40B6B0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_407CE0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_407BE0(\"`\", a5);\n        v51 = sub_407BE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_407CE0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_407CE0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_407CE0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40B6B0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_407CE0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_407BE0(\"`\", a5);\n        v51 = sub_407BE0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_408F10",
            "funcStartAddr": "0x401e39",
            "funcEndAddr": "0x401e3e",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408F10(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 v15; // r8\n  __int64 v16; // r9\n  unsigned __int64 v17; // rsi\n  _BYTE *v18; // rax\n  int v19; // r8d\n  unsigned __int64 v22; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v23; // [rsp+10h] [rbp-48h]\n  int v24; // [rsp+18h] [rbp-40h]\n  int v25; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v24 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40A020();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_612320 )\n    {\n      v7 = (__m128i *)sub_409E30(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      ptr = (void *)sub_409E30(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_612330], 0, 16LL * (a1 + 1 - dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v25 = *(_DWORD *)(a4 + 4) | 1;\n  v22 = *v10;\n  v12 = sub_407CE0(v11, *v10, a2, a3, *(_DWORD *)a4, v25, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v22 <= v12 )\n  {\n    v17 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6123C0 )\n    {\n      v23 = v12 + 1;\n      free(v11);\n      v17 = v23;\n    }\n    v18 = (_BYTE *)sub_409DD0(v17, v17, v13, v14, v15, v16);\n    v19 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v18;\n    v11 = v18;\n    sub_407CE0(v18, v17, a2, a3, v19, v25, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v24;\n  return v11;\n}\n\n_BYTE *__fastcall sub_408F10(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 v15; // r8\n  __int64 v16; // r9\n  unsigned __int64 v17; // rsi\n  _BYTE *v18; // rax\n  int v19; // r8d\n  unsigned __int64 v22; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v23; // [rsp+10h] [rbp-48h]\n  int v24; // [rsp+18h] [rbp-40h]\n  int v25; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v24 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40A020();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_612320 )\n    {\n      v7 = (__m128i *)sub_409E30(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      ptr = (void *)sub_409E30(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_612330], 0, 16LL * (a1 + 1 - dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v25 = *(_DWORD *)(a4 + 4) | 1;\n  v22 = *v10;\n  v12 = sub_407CE0(v11, *v10, a2, a3, *(_DWORD *)a4, v25, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v22 <= v12 )\n  {\n    v17 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6123C0 )\n    {\n      v23 = v12 + 1;\n      free(v11);\n      v17 = v23;\n    }\n    v18 = (_BYTE *)sub_409DD0(v17, v17, v13, v14, v15, v16);\n    v19 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v18;\n    v11 = v18;\n    sub_407CE0(v18, v17, a2, a3, v19, v25, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v24;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_408F10",
            "funcStartAddr": "0x401e39",
            "funcEndAddr": "0x401e3e",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408F10(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 v15; // r8\n  __int64 v16; // r9\n  unsigned __int64 v17; // rsi\n  _BYTE *v18; // rax\n  int v19; // r8d\n  unsigned __int64 v22; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v23; // [rsp+10h] [rbp-48h]\n  int v24; // [rsp+18h] [rbp-40h]\n  int v25; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v24 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40A020();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_612320 )\n    {\n      v7 = (__m128i *)sub_409E30(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      ptr = (void *)sub_409E30(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_612330], 0, 16LL * (a1 + 1 - dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v25 = *(_DWORD *)(a4 + 4) | 1;\n  v22 = *v10;\n  v12 = sub_407CE0(v11, *v10, a2, a3, *(_DWORD *)a4, v25, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v22 <= v12 )\n  {\n    v17 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6123C0 )\n    {\n      v23 = v12 + 1;\n      free(v11);\n      v17 = v23;\n    }\n    v18 = (_BYTE *)sub_409DD0(v17, v17, v13, v14, v15, v16);\n    v19 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v18;\n    v11 = v18;\n    sub_407CE0(v18, v17, a2, a3, v19, v25, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v24;\n  return v11;\n}\n\n_BYTE *__fastcall sub_408F10(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 v15; // r8\n  __int64 v16; // r9\n  unsigned __int64 v17; // rsi\n  _BYTE *v18; // rax\n  int v19; // r8d\n  unsigned __int64 v22; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v23; // [rsp+10h] [rbp-48h]\n  int v24; // [rsp+18h] [rbp-40h]\n  int v25; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v24 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40A020();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_612320 )\n    {\n      v7 = (__m128i *)sub_409E30(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      ptr = (void *)sub_409E30(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_612330], 0, 16LL * (a1 + 1 - dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v25 = *(_DWORD *)(a4 + 4) | 1;\n  v22 = *v10;\n  v12 = sub_407CE0(v11, *v10, a2, a3, *(_DWORD *)a4, v25, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v22 <= v12 )\n  {\n    v17 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6123C0 )\n    {\n      v23 = v12 + 1;\n      free(v11);\n      v17 = v23;\n    }\n    v18 = (_BYTE *)sub_409DD0(v17, v17, v13, v14, v15, v16);\n    v19 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v18;\n    v11 = v18;\n    sub_407CE0(v18, v17, a2, a3, v19, v25, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v24;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_4090B0",
            "funcStartAddr": "0x4090b0",
            "funcEndAddr": "0x4090e4",
            "decompiledFuncCode": "__int64 __fastcall sub_4090B0(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_6124C0;\n  result = sub_409FD0(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4091A0",
            "funcStartAddr": "0x4091a0",
            "funcEndAddr": "0x409212",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4091A0(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_6124C0;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_407CE0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409220",
            "funcStartAddr": "0x409220",
            "funcEndAddr": "0x409301",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409220(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  __int64 v8; // rdx\n  __int64 v9; // rcx\n  __int64 v10; // r8\n  __int64 v11; // r9\n  int v13; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v14; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v15; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_6124C0;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v13 = *v6;\n  v15 = sub_407CE0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v14 = (_BYTE *)sub_409DD0(v15 + 1, v15 + 1, v8, v9, v10, v11);\n  sub_407CE0(v14, v15 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v13;\n  if ( a3 )\n    *a3 = v15;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_409320",
            "funcStartAddr": "0x409320",
            "funcEndAddr": "0x4093b5",
            "decompiledFuncCode": "void sub_409320()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_612330 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_612330 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_6123C0 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_612320 = 256LL;\n    *((_QWORD *)&xmmword_612320 + 1) = &unk_6123C0;\n  }\n  if ( v0 != &xmmword_612320 )\n  {\n    free(v0);\n    ptr = &xmmword_612320;\n  }\n  dword_612330 = 1;\n}\n"
        },
        {
            "funcName": "sub_409430",
            "funcStartAddr": "0x401e3e",
            "funcEndAddr": "0x401e43",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409430(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408F10(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_409430(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408F10(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_409430",
            "funcStartAddr": "0x401e3e",
            "funcEndAddr": "0x401e43",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409430(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408F10(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_409430(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408F10(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4094A0",
            "funcStartAddr": "0x401e43",
            "funcEndAddr": "0x401e48",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4094A0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408F10(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_4094A0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408F10(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4094A0",
            "funcStartAddr": "0x401e43",
            "funcEndAddr": "0x401e48",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4094A0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408F10(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_4094A0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408F10(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_409510",
            "funcStartAddr": "0x409510",
            "funcEndAddr": "0x40951c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409510(int a1, __int64 a2)\n{\n  return sub_409430(0, a1, a2);\n}\n"
        },
        {
            "funcName": "sub_409530",
            "funcStartAddr": "0x409530",
            "funcEndAddr": "0x4095a0",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409530(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_6124F0;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6124C0);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6124D0);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6124E0);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_408F10(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4095B0",
            "funcStartAddr": "0x4095b0",
            "funcEndAddr": "0x4095c1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4095B0(__int64 a1)\n{\n  return sub_409530(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_4095E0",
            "funcStartAddr": "0x401e48",
            "funcEndAddr": "0x401e4d",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4095E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408F10(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4095E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408F10(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4095E0",
            "funcStartAddr": "0x401e48",
            "funcEndAddr": "0x401e4d",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4095E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408F10(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4095E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408F10(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_409650",
            "funcStartAddr": "0x409650",
            "funcEndAddr": "0x4096bc",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409650(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6124C0);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6124D0);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_6124E0);\n  v8 = qword_6124F0;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_408F10(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_409740",
            "funcStartAddr": "0x409740",
            "funcEndAddr": "0x409751",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409740(int a1, __int64 a2)\n{\n  return sub_408F10(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6122E0);\n}\n"
        },
        {
            "funcName": "sub_409760",
            "funcStartAddr": "0x409760",
            "funcEndAddr": "0x409776",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409760(__int64 a1)\n{\n  return sub_408F10(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6122E0);\n}\n"
        },
        {
            "funcName": "sub_409780",
            "funcStartAddr": "0x409780",
            "funcEndAddr": "0x4097de",
            "decompiledFuncCode": "ssize_t __fastcall sub_409780(int fd, void *buf, size_t nbytes)\n{\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  while ( 1 )\n  {\n    v4 = read(fd, buf, nbytes);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( nbytes <= 0x7FFFE000 || v5 != 22 )\n        return v4;\n      nbytes = 2147475456LL;\n    }\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_4097E0",
            "funcStartAddr": "0x4097e0",
            "funcEndAddr": "0x40982e",
            "decompiledFuncCode": "__int64 __fastcall sub_4097E0(unsigned int fd)\n{\n  __int64 result; // rax\n  unsigned int v2; // r12d\n  int *v3; // rax\n  int v4; // r13d\n  int *v5; // rbp\n\n  if ( fd > 2 )\n    return fd;\n  v2 = sub_40BFE0();\n  v3 = __errno_location();\n  v4 = *v3;\n  v5 = v3;\n  close(fd);\n  result = v2;\n  *v5 = v4;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409830",
            "funcStartAddr": "0x401e4d",
            "funcEndAddr": "0x401e52",
            "decompiledFuncCode": "__int64 __fastcall sub_409830(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_409830(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_409830",
            "funcStartAddr": "0x401e4d",
            "funcEndAddr": "0x401e52",
            "decompiledFuncCode": "__int64 __fastcall sub_409830(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_409830(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_409C30",
            "funcStartAddr": "0x409c30",
            "funcEndAddr": "0x409c90",
            "decompiledFuncCode": "__int64 __fastcall sub_409C30(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_409830(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_409830(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_409C90",
            "funcStartAddr": "0x409c90",
            "funcEndAddr": "0x409d4c",
            "decompiledFuncCode": "__int64 __fastcall sub_409C90(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_409830(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_409830(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_409D50",
            "funcStartAddr": "0x409d50",
            "funcEndAddr": "0x409dc4",
            "decompiledFuncCode": "int sub_409D50()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_40C375, \"https://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_409DD0",
            "funcStartAddr": "0x409dd0",
            "funcEndAddr": "0x409dea",
            "decompiledFuncCode": "void *__fastcall sub_409DD0(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_40A020();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409E20",
            "funcStartAddr": "0x409e20",
            "funcEndAddr": "0x409e22",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_409E20(size_t a1)\n{\n  return sub_409DD0(a1);\n}\n"
        },
        {
            "funcName": "sub_409E30",
            "funcStartAddr": "0x409e30",
            "funcEndAddr": "0x409e66",
            "decompiledFuncCode": "void *__fastcall sub_409E30(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_40A020();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409F80",
            "funcStartAddr": "0x409f80",
            "funcEndAddr": "0x409f97",
            "decompiledFuncCode": "void *__fastcall sub_409F80(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_409DD0(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_409FA0",
            "funcStartAddr": "0x409fa0",
            "funcEndAddr": "0x409fce",
            "decompiledFuncCode": "__int64 __fastcall sub_409FA0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_40A020(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_409FD0",
            "funcStartAddr": "0x409fd0",
            "funcEndAddr": "0x409ff8",
            "decompiledFuncCode": "void *__fastcall sub_409FD0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_409DD0(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_40A000",
            "funcStartAddr": "0x40a000",
            "funcEndAddr": "0x40a013",
            "decompiledFuncCode": "void *__fastcall sub_40A000(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_409FD0(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_40A020",
            "funcStartAddr": "0x40a020",
            "funcEndAddr": "0x40a051",
            "decompiledFuncCode": "void __noreturn sub_40A020()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_40A060",
            "funcStartAddr": "0x40a060",
            "funcEndAddr": "0x40a130",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40A060(\n        char *a1,\n        __int64 a2,\n        unsigned __int64 a3,\n        unsigned __int64 a4,\n        __int64 a5,\n        __int64 a6,\n        int a7)\n{\n  int v10; // ebx\n  int v11; // eax\n  unsigned __int64 v12; // rbp\n  int *v13; // r14\n  _BYTE *v14; // rax\n  int v15; // esi\n  int v17; // ebp\n  int *v18; // rax\n  unsigned __int64 v19; // [rsp+8h] [rbp-40h]\n\n  v10 = a7;\n  v11 = sub_40A260(a1);\n  if ( v11 )\n  {\n    v17 = v11;\n    v18 = __errno_location();\n    v13 = v18;\n    if ( v17 == 1 )\n    {\n      *v18 = 75;\n    }\n    else if ( v17 == 3 )\n    {\n      *v18 = 0;\n    }\n  }\n  else\n  {\n    v12 = v19;\n    if ( v19 >= a3 && v19 <= a4 )\n      return v12;\n    v13 = __errno_location();\n    *v13 = v19 < 0x40000000 ? 34 : 75;\n  }\n  v14 = sub_409760((__int64)a1);\n  v15 = *v13;\n  if ( *v13 == 22 )\n    v15 = 0;\n  if ( !a7 )\n    v10 = 1;\n  error(v10, v15, \"%s: %s\", a6, v14);\n  return v19;\n}\n"
        },
        {
            "funcName": "sub_40A130",
            "funcStartAddr": "0x40a130",
            "funcEndAddr": "0x40a151",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40A130(\n        char *a1,\n        unsigned __int64 a2,\n        unsigned __int64 a3,\n        __int64 a4,\n        __int64 a5,\n        int a6)\n{\n  return sub_40A060(a1, 10LL, a2, a3, a4, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_40A160",
            "funcStartAddr": "0x40a160",
            "funcEndAddr": "0x40a1b3",
            "decompiledFuncCode": "__int64 sub_40A160()\n{\n  __int64 v0; // rdx\n  int *v1; // rbx\n  __int64 result; // rax\n  __int64 v3[3]; // [rsp+0h] [rbp-18h] BYREF\n\n  v3[0] = sub_40B950();\n  v3[1] = v0;\n  v1 = __errno_location();\n  while ( 1 )\n  {\n    *v1 = 0;\n    result = sub_40B840(v3, 0LL);\n    if ( !(_DWORD)result )\n      break;\n    if ( (*v1 & 0xFFFFFFFB) != 0 )\n      return 0xFFFFFFFFLL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A1C0",
            "funcStartAddr": "0x40a1c0",
            "funcEndAddr": "0x40a25c",
            "decompiledFuncCode": "bool __fastcall sub_40A1C0(_BYTE *a1, _QWORD *a2, double *a3, void (__fastcall *a4)(_BYTE *, __int64 *), double a5)\n{\n  int *v7; // r12\n  bool result; // al\n  __int64 v9[6]; // [rsp+8h] [rbp-30h] BYREF\n\n  v7 = __errno_location();\n  *v7 = 0;\n  a4(a1, v9);\n  if ( (_BYTE *)v9[0] == a1 )\n  {\n    result = 0;\n  }\n  else\n  {\n    if ( a2 )\n    {\n      result = 1;\n      if ( a5 == 0.0 )\n      {\nLABEL_6:\n        *a2 = v9[0];\n        goto LABEL_7;\n      }\n    }\n    else\n    {\n      result = 0;\n      if ( *(_BYTE *)v9[0] )\n        goto LABEL_7;\n      if ( a5 == 0.0 )\n      {\n        result = 1;\n        goto LABEL_7;\n      }\n    }\n    result = *v7 != 34;\n  }\n  if ( a2 )\n    goto LABEL_6;\nLABEL_7:\n  *a3 = a5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A260",
            "funcStartAddr": "0x40a260",
            "funcEndAddr": "0x40a694",
            "decompiledFuncCode": "__int64 __fastcall sub_40A260(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // r15\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // r12d\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // r9d\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( (v11[v10] & 0x2000) != 0 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, p_endptr, a3, 0);\n  if ( *p_endptr == nptr )\n  {\n    basea = *p_endptr;\n    if ( a5 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(a5, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( a5 )\n  {\n    v15 = (unsigned __int8)**p_endptr;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *p_endptr;\n      v26 = strchr(a5, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_40:\n        *a4 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      if ( (unsigned __int8)(v15 - 69) > 0x2Fu\n        || (v19 = 0x814400308945LL, !_bittest64(&v19, (unsigned int)(v15 - 69)))\n        || (v37 = v18, v20 = strchr(a5, 48), v18 = v37, !v20) )\n      {\nLABEL_27:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_28;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_28:\n          switch ( (char)v15 )\n          {\n            case 'B':\n              if ( (unsigned __int64)v13 >> 54 )\n                goto LABEL_38;\n              v13 <<= 10;\n              break;\n            case 'E':\n              goto LABEL_71;\n            case 'G':\n            case 'g':\n              goto LABEL_77;\n            case 'K':\n            case 'k':\n              goto LABEL_37;\n            case 'M':\n            case 'm':\n              goto LABEL_30;\n            case 'P':\n              goto LABEL_65;\n            case 'T':\n            case 't':\n              goto LABEL_59;\n            case 'Y':\n              goto LABEL_53;\n            case 'Z':\n              goto LABEL_47;\n            case 'b':\n              goto LABEL_44;\n            case 'c':\n              break;\n            case 'w':\n              if ( v13 < 0 )\n                goto LABEL_38;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_40;\n          }\nLABEL_33:\n          v24 = &v18[v22];\n          *p_endptr = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (char)v15 )\n          {\n            case 'E':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_71:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_51;\n            case 'F':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'L':\n            case 'N':\n            case 'O':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case '[':\n            case '\\\\':\n            case ']':\n            case '^':\n            case '_':\n            case '`':\n            case 'a':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'l':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n              goto LABEL_40;\n            case 'G':\n            case 'g':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_77:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_33;\n            case 'K':\n            case 'k':\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_37:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_33;\n              goto LABEL_38;\n            case 'M':\n            case 'm':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_30:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_38;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 'P':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_65:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_51;\n            case 'T':\n            case 't':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_59:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_51;\n            case 'Y':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_53:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_51;\n            case 'Z':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_47:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_51:\n              v14 |= v28;\n              break;\n            case 'b':\n              v22 = 1;\nLABEL_44:\n              if ( (unsigned __int64)v13 >> 55 )\n              {\nLABEL_38:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 'c':\n              v22 = 1;\n              goto LABEL_33;\n            default:\n              goto LABEL_27;\n          }\n          goto LABEL_33;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_28;\n    }\n  }\nLABEL_13:\n  *a4 = v13;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_40A6A0",
            "funcStartAddr": "0x40a6a0",
            "funcEndAddr": "0x40a7d5",
            "decompiledFuncCode": "__int64 __fastcall sub_40A6A0(int a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ebx\n  int v8; // eax\n  int *v9; // rax\n  int v10; // edi\n  int v11; // r12d\n  int *v12; // rbp\n  int v13; // ecx\n  int v14; // r8d\n  int v15; // r9d\n  int v16; // [rsp+30h] [rbp-38h]\n\n  v16 = a3;\n  if ( a2 == 1030 )\n  {\n    if ( dword_6124F8 < 0 )\n    {\n      v6 = sub_40A6A0(a1, 0, a3, a4, a5, a6);\n      if ( v6 >= 0 && dword_6124F8 == -1 )\n      {\nLABEL_8:\n        v8 = fcntl(v6, 1);\n        if ( v8 < 0 || fcntl(v6, 2, v8 | 1u) == -1 )\n        {\n          v9 = __errno_location();\n          v10 = v6;\n          v6 = -1;\n          v11 = *v9;\n          v12 = v9;\n          close(v10);\n          *v12 = v11;\n        }\n      }\n    }\n    else\n    {\n      v6 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v6 < 0 && *__errno_location() == 22 )\n      {\n        v6 = sub_40A6A0(a1, 0, v16, v13, v14, v15);\n        if ( v6 >= 0 )\n        {\n          dword_6124F8 = -1;\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        dword_6124F8 = 1;\n      }\n    }\n    return (unsigned int)v6;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "sub_40A7E0",
            "funcStartAddr": "0x40a7e0",
            "funcEndAddr": "0x40a8bf",
            "decompiledFuncCode": "__int64 __fastcall sub_40A7E0(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A8C0",
            "funcStartAddr": "0x40a8c0",
            "funcEndAddr": "0x40aedc",
            "decompiledFuncCode": "__int64 __fastcall sub_40A8C0(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        const char *a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rdi\n  const char **v35; // rbx\n  _BYTE *v36; // rbp\n  __int64 v37; // r12\n  const char *v38; // r12\n  __int64 v39; // rbp\n  char *v40; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v48; // [rsp+38h] [rbp-50h]\n  char v49; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+44h] [rbp-44h]\n  int v52; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v49 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v49), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v51 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v48 = 0;\n  v52 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v48 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v52 = 1;\n            ptr[v51] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v48 = 1;\n        }\n        else\n        {\n          v48 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v51 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v48 )\n  {\n    if ( a8 )\n    {\n      if ( v48 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v34 = stderr;\n        v35 = (const char **)a4;\n        v36 = ptr;\n        v37 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9, *v35);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v52 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v51;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v38 = *v12;\n          v39 = *a2;\n          v40 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v40, v39, a9, v38);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40AEE0",
            "funcStartAddr": "0x40aee0",
            "funcEndAddr": "0x40b4a6",
            "decompiledFuncCode": "__int64 __fastcall sub_40AEE0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_40A7E0((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_40A7E0((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_40A8C0(a1, a2, v12, a4, a5, a6, a7, v8, \"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_40A8C0(a1, a2, v12, a4, a5, a6, a7, v8, \"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_40A8C0(a1, a2, v12, a4, a5, 0, a7, v8, \"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43, v21);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41, v21);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_40B4B0",
            "funcStartAddr": "0x40b4b0",
            "funcEndAddr": "0x40b506",
            "decompiledFuncCode": "__int64 __fastcall sub_40B4B0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_612500 = dword_61233C;\n  dword_612504 = dword_612338;\n  result = sub_40AEE0(a1, a2, a3, a4, a5, a6, &dword_612500, a7);\n  dword_61233C = dword_612500;\n  qword_612540 = qword_612510;\n  dword_612334 = dword_612508;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B510",
            "funcStartAddr": "0x40b510",
            "funcEndAddr": "0x40b528",
            "decompiledFuncCode": "__int64 __fastcall sub_40B510(int a1, __int64 *a2, const char *a3)\n{\n  return sub_40B4B0(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_40B530",
            "funcStartAddr": "0x40b530",
            "funcEndAddr": "0x40b543",
            "decompiledFuncCode": "__int64 __fastcall sub_40B530(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40B4B0(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_40B550",
            "funcStartAddr": "0x40b550",
            "funcEndAddr": "0x40b565",
            "decompiledFuncCode": "__int64 __fastcall sub_40B550(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40AEE0(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40B570",
            "funcStartAddr": "0x40b570",
            "funcEndAddr": "0x40b586",
            "decompiledFuncCode": "__int64 __fastcall sub_40B570(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40B4B0(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_40B590",
            "funcStartAddr": "0x40b590",
            "funcEndAddr": "0x40b5a8",
            "decompiledFuncCode": "__int64 __fastcall sub_40B590(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40AEE0(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40B5B0",
            "funcStartAddr": "0x40b5b0",
            "funcEndAddr": "0x40b6a1",
            "decompiledFuncCode": "__int64 __fastcall sub_40B5B0(int fildes)\n{\n  unsigned int v1; // ebx\n  int *v3; // rbp\n  int v4; // r12d\n  int v5; // edx\n  int pipedes[2]; // [rsp+8h] [rbp-140h] BYREF\n  struct stat stat_buf; // [rsp+10h] [rbp-138h] BYREF\n  struct stat v8; // [rsp+A0h] [rbp-A8h] BYREF\n\n  v1 = __fxstat(1, fildes, &stat_buf);\n  if ( !v1 )\n  {\n    LOBYTE(v1) = (stat_buf.st_mode & 0xF000) == 49152 || (stat_buf.st_mode & 0xF000) == 4096;\n    if ( !(_BYTE)v1 )\n      return (unsigned __int8)v1;\n    v1 = pipe(pipedes);\n    if ( !v1 )\n    {\n      v1 = __fxstat(1, pipedes[0], &v8);\n      v3 = __errno_location();\n      v4 = *v3;\n      close(pipedes[0]);\n      close(pipedes[1]);\n      if ( v1 )\n      {\n        *v3 = v4;\n        return v1;\n      }\n      if ( stat_buf.st_nlink <= v8.st_nlink )\n      {\n        v5 = stat_buf.st_mode & 0xF000;\n        v1 = v5 == 4096;\n        if ( (v8.st_mode & 0xF000) != 4096 )\n        {\n          LOBYTE(v1) = v5 == 49152;\n          return (unsigned __int8)v1;\n        }\n      }\n    }\n  }\n  return v1;\n}\n"
        },
        {
            "funcName": "sub_40B6B0",
            "funcStartAddr": "0x40b6b0",
            "funcEndAddr": "0x40b72a",
            "decompiledFuncCode": "size_t __fastcall sub_40B6B0(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_40BA10(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40B730",
            "funcStartAddr": "0x40b730",
            "funcEndAddr": "0x40b834",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B730(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax\n  __int64 v4; // r9\n  _BYTE *v5; // rcx\n  _BYTE *v6; // rdi\n\n  if ( !a3 )\n    return 0LL;\n  if ( ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && (((v4 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) == 0 )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( (((v4 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = a1 + 1;\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = v5;\n      if ( v5 == v6 )\n        break;\n      if ( *v5++ == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_40B840",
            "funcStartAddr": "0x40b840",
            "funcEndAddr": "0x40b8e2",
            "decompiledFuncCode": "int __fastcall sub_40B840(__time_t *a1, struct timespec *a2)\n{\n  __time_t v2; // rbx\n  int result; // eax\n  struct timespec v4[2]; // [rsp+0h] [rbp-28h] BYREF\n\n  if ( (unsigned __int64)a1[1] > 0x3B9AC9FF )\n  {\n    *__errno_location() = 22;\n    return -1;\n  }\n  else\n  {\n    v2 = *a1;\n    v4[0].tv_nsec = a1[1];\n    if ( v2 > 2073600 )\n    {\n      while ( 1 )\n      {\n        v4[0].tv_sec = 2073600LL;\n        v2 -= 2073600LL;\n        result = nanosleep(v4, a2);\n        if ( result )\n          break;\n        v4[0].tv_nsec = 0LL;\n        if ( v2 <= 2073600 )\n          goto LABEL_8;\n      }\n      if ( a2 )\n        a2->tv_sec += v2;\n    }\n    else\n    {\nLABEL_8:\n      v4[0].tv_sec = v2;\n      return nanosleep(v4, a2);\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B8F0",
            "funcStartAddr": "0x40b8f0",
            "funcEndAddr": "0x40b94d",
            "decompiledFuncCode": "__int64 __fastcall sub_40B8F0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_40BFF0(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n    return 0xFFFFFFFFLL;\n  }\n  if ( !(_DWORD)result )\n    return result;\n  if ( v1 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)-(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_40B950",
            "funcStartAddr": "0x40b950",
            "funcEndAddr": "0x40ba0c",
            "decompiledFuncCode": "__int64 __fastcall sub_40B950(double a1)\n{\n  __int64 result; // rax\n  __int64 v2; // rsi\n  signed __int64 v3; // rcx\n\n  if ( a1 <= -9.223372036854776e18 )\n    return 0x8000000000000000LL;\n  if ( a1 >= 9.223372036854776e18 )\n    return 0x7FFFFFFFFFFFFFFFLL;\n  v2 = (unsigned int)(int)a1;\n  v3 = (unsigned int)(int)((a1 - (double)(int)v2) * 1000000000.0)\n     + (unsigned __int64)((a1 - (double)(int)v2) * 1000000000.0 > (double)(int)((a1 - (double)(int)v2) * 1000000000.0));\n  result = v3 / 1000000000 + v2;\n  if ( v3 % 1000000000 < 0 )\n    --result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40BA10",
            "funcStartAddr": "0x40ba10",
            "funcEndAddr": "0x40ba6e",
            "decompiledFuncCode": "bool __fastcall sub_40BA10(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40BA70",
            "funcStartAddr": "0x40ba70",
            "funcEndAddr": "0x40bfd2",
            "decompiledFuncCode": "const char *sub_40BA70()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_40BFF0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_40BFF0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40BFE0",
            "funcStartAddr": "0x40bfe0",
            "funcEndAddr": "0x40bfee",
            "decompiledFuncCode": "__int64 __fastcall sub_40BFE0(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_40A6A0(a1, 0, 3LL, a4, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_40BFF0",
            "funcStartAddr": "0x40bff0",
            "funcEndAddr": "0x40c06b",
            "decompiledFuncCode": "int __fastcall sub_40BFF0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_40C070(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40C070",
            "funcStartAddr": "0x40c070",
            "funcEndAddr": "0x40c0b0",
            "decompiledFuncCode": "int __fastcall sub_40C070(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_40C0B0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_40C0B0",
            "funcStartAddr": "0x40c0b0",
            "funcEndAddr": "0x40c107",
            "decompiledFuncCode": "int __fastcall sub_40C0B0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40C180",
            "funcStartAddr": "0x40c180",
            "funcEndAddr": "0x40c198",
            "decompiledFuncCode": "int __fastcall sub_40C180(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_612288 )\n    v1 = (void *)qword_612288;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_40C198",
            "funcStartAddr": "0x40c198",
            "funcEndAddr": "0x40c1b8",
            "decompiledFuncCode": "__int64 __fastcall sub_40C198(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_611E30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 125
}