{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_sha384sum.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401940",
            "funcEndAddr": "0x402869",
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  char v3; // r14\n  char *v4; // r13\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbp\n  char *v7; // rbx\n  int v8; // eax\n  const char *v9; // rsi\n  __int64 v10; // rax\n  unsigned int v11; // eax\n  char *v12; // rax\n  __int64 v13; // rbx\n  __ssize_t v14; // rax\n  __ssize_t v15; // r8\n  char *v16; // r15\n  unsigned __int64 v17; // rcx\n  __int64 v18; // rdx\n  char v19; // r10\n  bool v20; // cf\n  bool v21; // zf\n  const char *v22; // rdi\n  __int64 v23; // rcx\n  const char *v24; // rsi\n  char v25; // al\n  char *v26; // rax\n  __int64 v27; // rdx\n  char v28; // al\n  __int64 v29; // rax\n  char v30; // si\n  const char *v31; // r15\n  bool v32; // cf\n  bool v33; // zf\n  char *v34; // rdi\n  const char *v35; // rsi\n  _BOOL8 v36; // r14\n  unsigned int v37; // eax\n  char *v38; // rax\n  const char *v39; // rsi\n  char *v40; // rax\n  __int64 v41; // rcx\n  __int64 v42; // r8\n  int v43; // ebx\n  char v44; // al\n  __int64 v45; // r15\n  char *v46; // rax\n  const __int32_t **v47; // rax\n  unsigned __int64 v48; // rdx\n  const __int32_t *v49; // rdi\n  char *v50; // rax\n  const char *v52; // r11\n  const char *v53; // rdx\n  const char *v54; // rbx\n  int *v55; // rax\n  char *v56; // rax\n  unsigned int v57; // ebx\n  __int64 v58; // rdx\n  char *v59; // rax\n  char *v60; // rax\n  char *v61; // rax\n  char v62; // dl\n  const char *v63; // rax\n  const char *v64; // rax\n  char v65; // dl\n  char v66; // al\n  char *v67; // rax\n  __int64 v68; // rbx\n  char *v69; // rax\n  __int64 v70; // rax\n  int *v71; // rax\n  char *v72; // rax\n  char *v73; // rax\n  char *v74; // rax\n  char *v75; // rax\n  char *v76; // rax\n  char *IO_write_ptr; // rax\n  const char **v78; // [rsp+0h] [rbp-128h]\n  char *s; // [rsp+8h] [rbp-120h]\n  char v80; // [rsp+13h] [rbp-115h]\n  int v81; // [rsp+14h] [rbp-114h]\n  unsigned __int64 v82; // [rsp+18h] [rbp-110h]\n  __ssize_t v83; // [rsp+20h] [rbp-108h]\n  unsigned __int8 v84; // [rsp+20h] [rbp-108h]\n  unsigned __int64 v85; // [rsp+20h] [rbp-108h]\n  unsigned __int8 v86; // [rsp+20h] [rbp-108h]\n  const char *v87; // [rsp+20h] [rbp-108h]\n  unsigned __int64 v88; // [rsp+20h] [rbp-108h]\n  char v89; // [rsp+28h] [rbp-100h]\n  unsigned __int64 v90; // [rsp+28h] [rbp-100h]\n  unsigned __int64 v91; // [rsp+28h] [rbp-100h]\n  unsigned __int64 v92; // [rsp+28h] [rbp-100h]\n  __int64 v93; // [rsp+30h] [rbp-F8h]\n  const char **v94; // [rsp+38h] [rbp-F0h]\n  unsigned __int64 v95; // [rsp+40h] [rbp-E8h]\n  char v96; // [rsp+48h] [rbp-E0h]\n  char v97; // [rsp+49h] [rbp-DFh]\n  char v98; // [rsp+4Ah] [rbp-DEh]\n  char v99; // [rsp+4Bh] [rbp-DDh]\n  int v100; // [rsp+4Ch] [rbp-DCh]\n  char v101; // [rsp+5Fh] [rbp-C9h] BYREF\n  char *lineptr; // [rsp+60h] [rbp-C8h] BYREF\n  size_t n; // [rsp+68h] [rbp-C0h] BYREF\n  char v104[64]; // [rsp+70h] [rbp-B8h] BYREF\n  char v105[120]; // [rsp+B0h] [rbp-78h] BYREF\n\n  v3 = 0;\n  LOBYTE(v4) = 0;\n  LODWORD(v5) = -1;\n  LODWORD(v6) = a1;\n  v7 = (char *)a2;\n  sub_407930(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40B500(sub_403080);\n  setvbuf(stdout, 0LL, 1, 0LL);\n  while ( 1 )\n  {\n    v8 = sub_40AD60(a1, a2, \"bctw\", &off_40C0C0, 0LL);\n    if ( v8 == -1 )\n      break;\n    if ( v8 == 119 )\n    {\n      byte_60F2DC = 0;\n      byte_60F2DB = 1;\n      byte_60F2D9 = 0;\n    }\n    else if ( v8 <= 119 )\n    {\n      if ( v8 == 98 )\n        goto LABEL_15;\n      if ( v8 <= 98 )\n      {\n        if ( v8 == -131 )\n        {\n          sub_4099E0(\n            (_DWORD)stdout,\n            (unsigned int)\"sha384sum\",\n            (unsigned int)&unk_40B5F2,\n            (_DWORD)off_60F218,\n            (unsigned int)\"Ulrich Drepper\",\n            (unsigned int)\"Scott Miller\",\n            \"David Madore\",\n            0LL);\n          exit(0);\n        }\n        if ( v8 == -130 )\n          sub_402C90(0);\nLABEL_203:\n        sub_402C90(1);\n      }\n      if ( v8 == 99 )\n      {\n        LOBYTE(v4) = 1;\n      }\n      else\n      {\n        if ( v8 != 116 )\n          goto LABEL_203;\n        LODWORD(v5) = 0;\n      }\n    }\n    else if ( v8 == 130 )\n    {\n      byte_60F2DC = 0;\n      byte_60F2DB = 0;\n      byte_60F2D9 = 1;\n    }\n    else if ( v8 > 130 )\n    {\n      if ( v8 == 131 )\n      {\n        byte_60F2D8 = 1;\n      }\n      else\n      {\n        if ( v8 != 132 )\n          goto LABEL_203;\n        v3 = 1;\nLABEL_15:\n        LODWORD(v5) = 1;\n      }\n    }\n    else if ( v8 == 128 )\n    {\n      byte_60F2DA = 1;\n    }\n    else\n    {\n      if ( v8 != 129 )\n        goto LABEL_203;\n      byte_60F2DC = 1;\n      byte_60F2DB = 0;\n      byte_60F2D9 = 0;\n    }\n  }\n  qword_60F2E8 = 98LL;\n  qword_60F2E0 = 96LL;\n  if ( !(_DWORD)v5 && v3 )\n  {\n    v9 = \"--tag does not support --text mode\";\n    goto LABEL_202;\n  }\n  if ( (_BYTE)v4 )\n  {\n    v9 = \"the --tag option is meaningless when verifying checksums\";\n    if ( v3 )\n      goto LABEL_202;\n  }\n  v9 = \"the --binary and --text options are meaningless when verifying checksums\";\n  if ( (((v5 & 0x80000000) == 0LL) & (unsigned __int8)v4) != 0 )\n    goto LABEL_202;\n  if ( byte_60F2DA )\n    goto LABEL_70;\n  if ( !byte_60F2DC )\n  {\n    if ( !byte_60F2DB )\n      goto LABEL_200;\n    v9 = \"the --warn option is meaningful only when verifying checksums\";\n    if ( (_BYTE)v4 )\n      goto LABEL_39;\n    goto LABEL_202;\n  }\n  v9 = \"the --status option is meaningful only when verifying checksums\";\n  if ( !(_BYTE)v4 )\n  {\nLABEL_202:\n    v72 = dcgettext(0LL, v9, 5);\n    error(0, 0, v72);\n    goto LABEL_203;\n  }\nLABEL_36:\n  if ( !byte_60F2DB )\n    goto LABEL_37;\n  while ( 1 )\n  {\nLABEL_39:\n    if ( (_DWORD)v5 == -1 )\n      LODWORD(v5) = 0;\n    v94 = (const char **)&v7[8 * (int)v6];\n    v10 = dword_60F29C;\n    if ( dword_60F29C == (_DWORD)v6 )\n      *v94++ = \"-\";\n    v78 = (const char **)&v7[8 * v10];\n    if ( v94 <= v78 )\n    {\n      v96 = 1;\n      goto LABEL_129;\n    }\n    v96 = 1;\n    v80 = (char)v4;\n    v11 = (_DWORD)v5 == 0 ? 0xFFFFFFF6 : 0;\n    v98 = v3;\n    v100 = v11 + 42;\n    v99 = v11 + 42;\n    do\n    {\n      s = (char *)*v78;\n      if ( !v80 )\n      {\n        if ( !(unsigned __int8)sub_402AF0(s, v104, v105) )\n        {\n          v96 = 0;\n          goto LABEL_128;\n        }\n        if ( strchr(s, 92) || strchr(s, 10) )\n        {\n          if ( v98 )\n          {\n            IO_write_ptr = stdout->_IO_write_ptr;\n            v57 = 1;\n            if ( stdout->_IO_write_end <= IO_write_ptr )\n            {\n              __overflow(stdout, 92);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = IO_write_ptr + 1;\n              *IO_write_ptr = 92;\n            }\nLABEL_196:\n            fwrite_unlocked(\"SHA384\", 1uLL, 6uLL, stdout);\n            fwrite_unlocked(\" (\", 1uLL, 2uLL, stdout);\n            sub_402A40(s, v57);\n            fwrite_unlocked(\") = \", 1uLL, 4uLL, stdout);\n            if ( !((unsigned __int64)qword_60F2E0 >> 1) )\n              goto LABEL_152;\n            goto LABEL_150;\n          }\n          v56 = stdout->_IO_write_ptr;\n          if ( v56 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 92);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v56 + 1;\n            *v56 = 92;\n          }\n          v57 = 1;\n          if ( !((unsigned __int64)qword_60F2E0 >> 1) )\n            goto LABEL_156;\n        }\n        else\n        {\n          v57 = 0;\n          if ( v98 )\n            goto LABEL_196;\n          if ( !((unsigned __int64)qword_60F2E0 >> 1) )\n            goto LABEL_156;\n        }\nLABEL_150:\n        v6 = 0LL;\n        do\n        {\n          v58 = (unsigned __int8)v104[v6++];\n          __printf_chk(1LL, \"%02x\", v58);\n        }\n        while ( (unsigned __int64)qword_60F2E0 >> 1 > v6 );\nLABEL_152:\n        if ( v98 )\n        {\nLABEL_153:\n          v59 = stdout->_IO_write_ptr;\n          if ( v59 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 10);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v59 + 1;\n            *v59 = 10;\n          }\n          goto LABEL_128;\n        }\nLABEL_156:\n        v60 = stdout->_IO_write_ptr;\n        if ( v60 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 32);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v60 + 1;\n          *v60 = 32;\n        }\n        v61 = stdout->_IO_write_ptr;\n        if ( v61 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v100);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v61 + 1;\n          *v61 = v99;\n        }\n        sub_402A40(s, v57);\n        goto LABEL_153;\n      }\n      v81 = strcmp(*v78, \"-\");\n      if ( v81 )\n      {\n        v6 = sub_407890(s, 4240911LL);\n        if ( !v6 )\n          goto LABEL_140;\n      }\n      else\n      {\n        byte_60F2F0 = 1;\n        v12 = dcgettext(0LL, \"standard input\", 5);\n        v6 = (unsigned __int64)stdin;\n        s = v12;\n      }\n      v97 = 0;\n      v3 = 0;\n      v5 = 0LL;\n      v13 = 1LL;\n      lineptr = 0LL;\n      n = 0LL;\n      v95 = 0LL;\n      v82 = 0LL;\n      while ( 1 )\n      {\n        v14 = __getdelim(&lineptr, &n, 10, (FILE *)v6);\n        if ( v14 <= 0 )\n          break;\n        v16 = lineptr;\n        v17 = (unsigned __int8)*lineptr;\n        if ( (_BYTE)v17 == 35 )\n          goto LABEL_67;\n        v15 = v14;\n        if ( lineptr[v14 - 1] == 10 )\n        {\n          v15 = v14 - 1;\n          lineptr[v14 - 1] = 0;\n          v16 = lineptr;\n          LOBYTE(v17) = *lineptr;\n        }\n        v18 = 0LL;\n        while ( (_BYTE)v17 == 32 )\nLABEL_54:\n          LOBYTE(v17) = v16[++v18];\n        if ( (_BYTE)v17 == 9 )\n          goto LABEL_54;\n        v19 = 0;\n        v20 = (unsigned __int8)v17 < 0x5Cu;\n        v21 = (_BYTE)v17 == 92;\n        if ( (_BYTE)v17 == 92 )\n        {\n          v19 = v80;\n          v20 = __CFADD__(v18, 1LL);\n          v21 = v18++ == -1;\n        }\n        v4 = &v16[v18];\n        v22 = \"SHA384\";\n        v23 = 6LL;\n        v24 = &v16[v18];\n        do\n        {\n          if ( !v23 )\n            break;\n          v20 = *v24 < (unsigned int)*v22;\n          v21 = *v24++ == *v22++;\n          --v23;\n        }\n        while ( v21 );\n        if ( (!v20 && !v21) == v20 )\n        {\n          v25 = v16[v18 + 6];\n          v17 = v18 + 6;\n          if ( v25 == 32 )\n          {\n            v25 = v16[v18 + 7];\n            v17 = v18 + 7;\n          }\n          if ( v25 != 40 || (++v17, (v15 -= v17) == 0) )\n          {\nLABEL_65:\n            ++v5;\n            if ( byte_60F2DB )\n            {\n              v45 = sub_4093D0(0LL, 3LL, s, v17, v15);\n              v46 = dcgettext(0LL, \"%s: %lu: improperly formatted %s checksum line\", 5);\n              error(0, 0, v46, v45, v13, \"SHA384\");\n            }\nLABEL_67:\n            if ( (*(_BYTE *)v6 & 0x30) != 0 )\n              break;\n            goto LABEL_68;\n          }\n          v31 = &v16[v17];\n          v52 = (const char *)(v15 - 1);\n          if ( v15 != 1 )\n          {\n            if ( v31[v15 - 1] == 41 )\n            {\nLABEL_161:\n              v53 = &v52[(_QWORD)v31];\nLABEL_162:\n              if ( v19 )\n              {\n                v24 = v52;\n                v87 = v53;\n                v70 = sub_4029B0(v31, v52);\n                v53 = v87;\n                if ( !v70 )\n                  goto LABEL_65;\n              }\n              *v53 = 0;\n              v62 = v52[(_QWORD)v31 + 1];\n              v63 = v52 + 1;\n              if ( v62 == 9 || v62 == 32 )\n              {\n                do\n                {\n                  do\n                    v62 = (++v63)[(_QWORD)v31];\n                  while ( v62 == 32 );\n                }\n                while ( v62 == 9 );\n              }\n              if ( v62 != 61 )\n                goto LABEL_65;\n              v4 = (char *)&v63[(_QWORD)v31 + 1];\n              if ( *v4 == 32 || *v4 == 9 )\n              {\n                v64 = &v63[(_QWORD)v31 + 2];\n                do\n                {\n                  do\n                  {\n                    v65 = *v64;\n                    v4 = (char *)v64++;\n                  }\n                  while ( v65 == 32 );\n                }\n                while ( v65 == 9 );\n              }\n              v66 = sub_402950(v4, v24);\n              goto LABEL_174;\n            }\n            while ( --v52 )\n            {\n              if ( v52[(_QWORD)v31] == 41 )\n                goto LABEL_161;\n            }\n          }\n          if ( *v31 != 41 )\n            goto LABEL_65;\n          v53 = v31;\n          v52 = 0LL;\n          goto LABEL_162;\n        }\n        v17 = v15 - v18;\n        if ( v15 - v18 < qword_60F2E8 + (unsigned __int64)(*v4 == 92) )\n          goto LABEL_65;\n        v27 = qword_60F2E0 + v18;\n        v17 = (unsigned __int64)&v16[v27];\n        v28 = v16[v27];\n        if ( v28 != 32 && v28 != 9 )\n          goto LABEL_65;\n        *(_BYTE *)v17 = 0;\n        v93 = v27;\n        v89 = v19;\n        v83 = v15;\n        if ( !(unsigned __int8)sub_402950(v4, v24) )\n          goto LABEL_65;\n        v15 = v83;\n        v17 = (unsigned int)dword_60F210;\n        v29 = v93 + 1;\n        if ( v83 - (v93 + 1) != 1 && ((v30 = v16[v93 + 1], v30 == 32) || v30 == 42) )\n        {\n          if ( dword_60F210 != 1 )\n          {\n            dword_60F210 = 0;\n            v29 = v93 + 2;\n          }\n        }\n        else\n        {\n          if ( !dword_60F210 )\n            goto LABEL_65;\n          dword_60F210 = 1;\n        }\n        v31 = &v16[v29];\n        if ( v89 )\n        {\n          v66 = sub_4029B0(v31, v83 - v29) != 0;\nLABEL_174:\n          if ( !v66 )\n            goto LABEL_65;\n        }\n        v32 = 0;\n        v33 = v81 == 0;\n        if ( !v81 )\n        {\n          v34 = \"-\";\n          v17 = 2LL;\n          v35 = v31;\n          do\n          {\n            if ( !v17 )\n              break;\n            v32 = (unsigned int)*v35 < (unsigned __int8)*v34;\n            v33 = *v35++ == (unsigned __int8)*v34++;\n            --v17;\n          }\n          while ( v33 );\n          if ( (!v32 && !v33) == v32 )\n            goto LABEL_65;\n        }\n        LODWORD(v36) = 0;\n        if ( !byte_60F2DC )\n          v36 = strchr(v31, 10) != 0LL;\n        v37 = sub_402AF0(v31, v105, &v101);\n        v15 = v37;\n        if ( !(_BYTE)v37 )\n        {\n          ++v82;\n          if ( byte_60F2DC )\n            goto LABEL_96;\n          if ( v36 )\n          {\n            v38 = stdout->_IO_write_ptr;\n            if ( v38 >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, 92);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v38 + 1;\n              *v38 = 92;\n            }\n          }\n          sub_402A40(v31, v36);\n          v39 = \"FAILED open or read\";\n          goto LABEL_95;\n        }\n        if ( byte_60F2DA && v101 )\n          goto LABEL_96;\n        v17 = (unsigned __int64)qword_60F2E0 >> 1;\n        if ( (unsigned __int64)qword_60F2E0 >> 1 )\n        {\n          v90 = (unsigned __int64)qword_60F2E0 >> 1;\n          v84 = v37;\n          v47 = __ctype_tolower_loc();\n          v48 = 0LL;\n          v15 = v84;\n          v17 = v90;\n          v49 = *v47;\n          while ( v49[(unsigned __int8)v4[2 * v48]] == byte_40C0A0[((unsigned __int8)v105[v48] >> 4) & 0xF]\n               && v49[(unsigned __int8)v4[2 * v48 + 1]] == byte_40C0A0[v105[v48] & 0xF] )\n          {\n            if ( v90 == ++v48 )\n            {\n              v48 = v90;\n              goto LABEL_179;\n            }\n          }\n          ++v95;\n          if ( byte_60F2DC )\n            goto LABEL_96;\n          if ( v36 )\n          {\nLABEL_122:\n            v50 = stdout->_IO_write_ptr;\n            if ( v50 >= stdout->_IO_write_end )\n            {\n              v92 = v48;\n              v88 = v17;\n              __overflow(stdout, 92);\n              v17 = v88;\n              v48 = v92;\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v50 + 1;\n              *v50 = 92;\n            }\n          }\n          v91 = v48;\n          v85 = v17;\n          sub_402A40(v31, v36);\n          v17 = v85;\n          if ( v85 != v91 )\n          {\n            v39 = \"FAILED\";\nLABEL_95:\n            v40 = dcgettext(0LL, v39, 5);\n            __printf_chk(1LL, \": %s\\n\", v40);\n            goto LABEL_96;\n          }\n          goto LABEL_187;\n        }\n        v48 = 0LL;\nLABEL_179:\n        v97 = byte_60F2DC;\n        if ( byte_60F2DC )\n          goto LABEL_96;\n        v97 = byte_60F2D9;\n        if ( byte_60F2D9 )\n          goto LABEL_96;\n        if ( v36 )\n        {\n          v97 = v15;\n          goto LABEL_122;\n        }\n        v86 = v15;\n        sub_402A40(v31, 0LL);\n        v15 = v86;\n        v97 = v86;\nLABEL_187:\n        if ( !byte_60F2D9 )\n        {\n          v39 = \"OK\";\n          goto LABEL_95;\n        }\nLABEL_96:\n        v3 = v80;\n        if ( (*(_BYTE *)v6 & 0x30) != 0 )\n          break;\nLABEL_68:\n        if ( !++v13 )\n        {\n          v7 = (char *)sub_4093D0(0LL, 3LL, s, v17, v15);\n          v26 = dcgettext(0LL, \"%s: too many checksum lines\", 5);\n          error(1, 0, v26, v7);\nLABEL_70:\n          v9 = \"the --ignore-missing option is meaningful only when verifying checksums\";\n          if ( !(_BYTE)v4 )\n            goto LABEL_202;\n          goto LABEL_36;\n        }\n      }\n      free(lineptr);\n      v43 = *(_DWORD *)v6 & 0x20;\n      if ( v43 )\n      {\n        v68 = sub_4093D0(0LL, 3LL, s, v41, v42);\n        v69 = dcgettext(0LL, \"%s: read error\", 5);\n        error(0, 0, v69, v68);\n        v44 = 0;\n        goto LABEL_112;\n      }\n      if ( !v81 || !(unsigned int)sub_409DB0((FILE *)v6) )\n      {\n        if ( v3 )\n        {\n          if ( byte_60F2DC )\n            goto LABEL_143;\n          if ( v5 )\n          {\n            v76 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu line is improperly formatted\",\n                    \"WARNING: %lu lines are improperly formatted\",\n                    v5,\n                    5);\n            error(0, 0, v76, v5);\n          }\n          if ( v82 )\n          {\n            v3 = v82;\n            v75 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu listed file could not be read\",\n                    \"WARNING: %lu listed files could not be read\",\n                    v82,\n                    5);\n            error(0, 0, v75, v82);\n          }\n          if ( v95 )\n          {\n            v3 = v95;\n            v74 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu computed checksum did NOT match\",\n                    \"WARNING: %lu computed checksums did NOT match\",\n                    v95,\n                    5);\n            error(0, 0, v74, v95);\n          }\n          if ( !byte_60F2DA )\n          {\nLABEL_143:\n            if ( v97 )\n              goto LABEL_109;\n          }\n          else if ( v97 )\n          {\nLABEL_109:\n            if ( !(v95 | v82) )\n              LOBYTE(v43) = (v5 == 0) | byte_60F2D8 ^ 1;\n          }\n          else\n          {\n            v6 = sub_4093D0(0LL, 3LL, s, v41, v42);\n            v73 = dcgettext(0LL, \"%s: no file was verified\", 5);\n            error(0, 0, v73, v6);\n          }\n        }\n        else\n        {\n          v6 = sub_4093D0(0LL, 3LL, s, v41, v42);\n          v67 = dcgettext(0LL, \"%s: no properly formatted %s checksum lines found\", 5);\n          error(0, 0, v67, v6, \"SHA384\");\n        }\n        v44 = v43 & 1;\n        goto LABEL_112;\n      }\nLABEL_140:\n      v54 = (const char *)sub_4093D0(0LL, 3LL, s, v41, v42);\n      v55 = __errno_location();\n      error(0, *v55, \"%s\", v54);\n      v44 = 0;\nLABEL_112:\n      v96 &= v44;\nLABEL_128:\n      ++v78;\n    }\n    while ( v94 > v78 );\nLABEL_129:\n    if ( !byte_60F2F0 || (unsigned int)sub_409DB0(stdin) != -1 )\n      return (unsigned __int8)v96 ^ 1u;\n    v7 = dcgettext(0LL, \"standard input\", 5);\n    v71 = __errno_location();\n    error(1, *v71, v7);\nLABEL_200:\n    if ( byte_60F2D9 == 1 )\n    {\n      v9 = \"the --quiet option is meaningful only when verifying checksums\";\n      if ( !(_BYTE)v4 )\n        goto LABEL_202;\n    }\nLABEL_37:\n    if ( byte_60F2D8 )\n    {\n      v9 = \"the --strict option is meaningful only when verifying checksums\";\n      if ( !(_BYTE)v4 )\n        goto LABEL_202;\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_40289B",
            "funcStartAddr": "0x40289b",
            "funcEndAddr": "0x4028ba",
            "decompiledFuncCode": "__int64 *sub_40289B()\n{\n  return &program_invocation_short_name;\n}\n"
        },
        {
            "funcName": "sub_4028BA",
            "funcStartAddr": "0x4028ba",
            "funcEndAddr": "0x4028f1",
            "decompiledFuncCode": "__int64 sub_4028BA()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4028F1",
            "funcStartAddr": "0x4028f1",
            "funcEndAddr": "0x402948",
            "decompiledFuncCode": "__int64 *sub_4028F1()\n{\n  __int64 *result; // rax\n\n  if ( !byte_60F2C8 )\n  {\n    while ( qword_60F2D0 < (unsigned __int64)(&qword_60EE48 - qword_60EE40 - 1) )\n      ((void (*)(void))qword_60EE40[++qword_60F2D0])();\n    result = sub_40289B();\n    byte_60F2C8 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402948",
            "funcStartAddr": "0x402948",
            "funcEndAddr": "0x40294d",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_402948()\n{\n  return sub_4028BA();\n}\n"
        },
        {
            "funcName": "sub_402950",
            "funcStartAddr": "0x402950",
            "funcEndAddr": "0x4029ad",
            "decompiledFuncCode": "bool __fastcall sub_402950(_BYTE *a1)\n{\n  unsigned __int64 v2; // rbp\n  const unsigned __int16 *v3; // rcx\n  unsigned __int64 v4; // rax\n\n  v2 = qword_60F2E0;\n  if ( !qword_60F2E0 )\n    return *a1 == 0;\n  v3 = *__ctype_b_loc();\n  LODWORD(v4) = 0;\n  while ( (v3[(unsigned __int8)*a1] & 0x1000) != 0 )\n  {\n    ++a1;\n    v4 = (unsigned int)(v4 + 1);\n    if ( v4 >= v2 )\n      return *a1 == 0;\n  }\n  return 0;\n}\n"
        },
        {
            "funcName": "sub_4029B0",
            "funcStartAddr": "0x4029b0",
            "funcEndAddr": "0x402a31",
            "decompiledFuncCode": "__int64 __fastcall sub_4029B0(__int64 a1, unsigned __int64 a2)\n{\n  _BYTE *v2; // rax\n  unsigned __int64 v3; // rdx\n  char v4; // cl\n  char v5; // cl\n  _BYTE *v7; // r9\n\n  v2 = (_BYTE *)(a1 + 1);\n  v3 = 0LL;\n  if ( a2 )\n  {\n    do\n    {\n      v4 = *(_BYTE *)(a1 + v3);\n      if ( !v4 )\n        return 0LL;\n      if ( v4 == 92 )\n      {\n        if ( a2 - 1 == v3 )\n          return 0LL;\n        ++v3;\n        v5 = *(_BYTE *)(a1 + v3);\n        if ( v5 == 92 )\n        {\n          v7 = v2;\n          *(v2 - 1) = 92;\n        }\n        else\n        {\n          if ( v5 != 110 )\n            return 0LL;\n          v7 = v2;\n          *(v2 - 1) = 10;\n        }\n      }\n      else\n      {\n        *(v2 - 1) = v4;\n        v7 = v2;\n      }\n      ++v3;\n      ++v2;\n    }\n    while ( a2 > v3 );\n    if ( (unsigned __int64)v7 < a1 + a2 )\n      *v7 = 0;\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_402A40",
            "funcStartAddr": "0x402a40",
            "funcEndAddr": "0x402ae5",
            "decompiledFuncCode": "void __fastcall sub_402A40(const char *a1, char a2)\n{\n  const char *v2; // rbx\n  char *IO_write_ptr; // rax\n  int v4; // esi\n\n  v2 = a1;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      v4 = *(unsigned __int8 *)v2;\n      if ( !(_BYTE)v4 )\n        break;\n      if ( (_BYTE)v4 == 10 )\n      {\n        fwrite_unlocked(&unk_40B564, 1uLL, 2uLL, stdout);\n      }\n      else if ( (_BYTE)v4 == 92 )\n      {\n        fwrite_unlocked(&unk_40B567, 1uLL, 2uLL, stdout);\n      }\n      else\n      {\n        IO_write_ptr = stdout->_IO_write_ptr;\n        if ( IO_write_ptr >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v4);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = IO_write_ptr + 1;\n          *IO_write_ptr = v4;\n        }\n      }\n      ++v2;\n    }\n  }\n  else\n  {\n    fputs_unlocked(a1, stdout);\n  }\n}\n"
        },
        {
            "funcName": "sub_402AF0",
            "funcStartAddr": "0x402af0",
            "funcEndAddr": "0x402c82",
            "decompiledFuncCode": "__int64 __fastcall sub_402AF0(const char *a1, __int64 a2, _BYTE *a3)\n{\n  FILE *v3; // rbx\n  __int64 v4; // rcx\n  __int64 v5; // r8\n  unsigned int v6; // r12d\n  __int64 v9; // rax\n  __int64 v10; // rcx\n  __int64 v11; // r8\n  const char *v12; // rbx\n  int *v13; // rax\n  const char *v14; // rbp\n  int *v15; // rax\n  int *v16; // rax\n  __int64 v17; // rcx\n  __int64 v18; // r8\n  int *v19; // rbx\n  const char *v20; // rax\n\n  *a3 = 0;\n  if ( !strcmp(a1, \"-\") )\n  {\n    v3 = stdin;\n    byte_60F2F0 = 1;\n    sub_407860(stdin, 2LL);\n    if ( !(unsigned int)sub_4076B0(v3) )\n      return 1;\nLABEL_9:\n    v6 = 0;\n    v14 = (const char *)sub_4093D0(0LL, 3LL, a1, v4, v5);\n    v15 = __errno_location();\n    error(0, *v15, \"%s\", v14);\n    if ( stdin != v3 )\n      sub_409DB0(v3);\n    return v6;\n  }\n  v9 = sub_407890(a1, 4240911LL);\n  v3 = (FILE *)v9;\n  if ( v9 )\n  {\n    sub_407860(v9, 2LL);\n    if ( !(unsigned int)sub_4076B0(v3) )\n    {\n      if ( (unsigned int)sub_409DB0(v3) )\n      {\n        v6 = 0;\n        v12 = (const char *)sub_4093D0(0LL, 3LL, a1, v10, v11);\n        v13 = __errno_location();\n        error(0, *v13, \"%s\", v12);\n        return v6;\n      }\n      return 1;\n    }\n    goto LABEL_9;\n  }\n  v16 = __errno_location();\n  v6 = (unsigned __int8)byte_60F2DA;\n  v19 = v16;\n  if ( byte_60F2DA && *v16 == 2 )\n  {\n    *a3 = 1;\n  }\n  else\n  {\n    v6 = 0;\n    v20 = (const char *)sub_4093D0(0LL, 3LL, a1, v17, v18);\n    error(0, *v19, \"%s\", v20);\n  }\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_402C90",
            "funcStartAddr": "0x402c90",
            "funcEndAddr": "0x40305d",
            "decompiledFuncCode": "void __fastcall __noreturn sub_402C90(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  char *v8; // rax\n  FILE *v9; // rbp\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  FILE *v13; // rbp\n  char *v14; // rax\n  FILE *v15; // rbp\n  char *v16; // rax\n  FILE *v17; // rbp\n  char *v18; // rax\n  char *v19; // rax\n  __int64 *v20; // rax\n  char *v21; // rbp\n  char *v22; // rax\n  char *v23; // rax\n  const char *v24; // r12\n  char *v25; // rax\n  char *v26; // rax\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  char *v30; // rax\n  __int64 v31[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_60F308;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]...\\nPrint or check %s (%d-bit) checksums.\\n\", 5);\n  __printf_chk(1LL, v3, v1, \"SHA384\", 384LL);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\n  -b, --binary         read in binary mode\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = dcgettext(0LL, \"  -c, --check          read %s sums from the FILEs and check them\\n\", 5);\n  __printf_chk(1LL, v8, \"SHA384\");\n  v9 = stdout;\n  v10 = dcgettext(0LL, \"      --tag            create a BSD-style checksum\\n\", 5);\n  fputs_unlocked(v10, v9);\n  v11 = stdout;\n  v12 = dcgettext(0LL, \"  -t, --text           read in text mode (default)\\n\", 5);\n  fputs_unlocked(v12, v11);\n  v13 = stdout;\n  v14 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The following five options are useful only when verifying checksums:\\n\"\n          \"      --ignore-missing  don't fail or report status for missing files\\n\"\n          \"      --quiet          don't print OK for each successfully verified file\\n\"\n          \"      --status         don't output anything, status code shows success\\n\"\n          \"      --strict         exit non-zero for improperly formatted checksum lines\\n\"\n          \"  -w, --warn           warn about improperly formatted checksum lines\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v14, v13);\n  v15 = stdout;\n  v16 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v16, v15);\n  v17 = stdout;\n  v18 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v18, v17);\n  v19 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The sums are computed as described in %s.  When checking, the input\\n\"\n          \"should be a former output of this program.  The default mode is to print a\\n\"\n          \"line with checksum, a space, a character indicating input mode ('*' for binary,\\n\"\n          \"' ' for text or where binary is insignificant), and name for each FILE.\\n\",\n          5);\n  __printf_chk(1LL, v19, \"FIPS-180-2\");\n  v31[0] = (__int64)\"[\";\n  v20 = v31;\n  v31[1] = (__int64)\"test invocation\";\n  v31[2] = (__int64)\"coreutils\";\n  v31[3] = (__int64)\"Multi-call invocation\";\n  v31[4] = (__int64)\"sha224sum\";\n  v31[5] = (__int64)\"sha2 utilities\";\n  v31[6] = (__int64)\"sha256sum\";\n  v31[7] = (__int64)\"sha2 utilities\";\n  v31[8] = (__int64)\"sha384sum\";\n  v31[9] = (__int64)\"sha2 utilities\";\n  v31[10] = (__int64)\"sha512sum\";\n  v31[11] = (__int64)\"sha2 utilities\";\n  v31[12] = 0LL;\n  v31[13] = 0LL;\n  do\n    v20 += 2;\n  while ( *v20 && strcmp(\"sha384sum\", (const char *)*v20) );\n  v21 = (char *)v20[1];\n  if ( v21 )\n  {\n    v22 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v22, &unk_40B5F2, \"https://www.gnu.org/software/coreutils/\");\n    v23 = setlocale(5, 0LL);\n    if ( !v23 || !strncmp(v23, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v27 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v27, &unk_40B5F2, \"https://www.gnu.org/software/coreutils/\");\n    v28 = setlocale(5, 0LL);\n    if ( !v28 || !strncmp(v28, \"en_\", 3uLL) )\n    {\n      v21 = \"sha384sum\";\n      v29 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v24 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v29, \"https://www.gnu.org/software/coreutils/\", \"sha384sum\");\nLABEL_12:\n      v26 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v26, v21, v24);\nLABEL_3:\n      exit(status);\n    }\n    v21 = \"sha384sum\";\n  }\n  v30 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v30, \"sha384sum\");\nLABEL_10:\n  v24 = \"Multi-call invocation\" + 10;\n  v25 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v25, \"https://www.gnu.org/software/coreutils/\", \"sha384sum\");\n  if ( v21 != \"sha384sum\" )\n    v24 = \"\";\n  goto LABEL_12;\n}\n"
        },
        {
            "funcName": "sub_403080",
            "funcStartAddr": "0x403080",
            "funcEndAddr": "0x40311e",
            "decompiledFuncCode": "__int64 sub_403080()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_40AE60(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60F2F8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60F300 )\n      {\n        v5 = (const char *)sub_4093A0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_40AE60(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403240",
            "funcStartAddr": "0x403240",
            "funcEndAddr": "0x40325e",
            "decompiledFuncCode": "__int64 __fastcall sub_403240(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 i; // rdx\n\n  result = a2;\n  for ( i = 0LL; i != 64; i += 8LL )\n    *(_QWORD *)(a2 + i) = _byteswap_uint64(*(_QWORD *)(a1 + i));\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403260",
            "funcStartAddr": "0x403260",
            "funcEndAddr": "0x40327e",
            "decompiledFuncCode": "__int64 __fastcall sub_403260(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 i; // rdx\n\n  result = a2;\n  for ( i = 0LL; i != 48; i += 8LL )\n    *(_QWORD *)(a2 + i) = _byteswap_uint64(*(_QWORD *)(a1 + i));\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403280",
            "funcStartAddr": "0x403280",
            "funcEndAddr": "0x406ece",
            "decompiledFuncCode": "__int64 __fastcall sub_403280(unsigned __int64 a1, __int64 a2, __int64 *a3)\n{\n  unsigned __int64 v4; // rcx\n  bool v5; // cf\n  __int64 v6; // r13\n  __int64 v7; // rbp\n  __int64 v8; // r9\n  __int64 v9; // r8\n  __int64 v10; // rdi\n  __int64 v11; // r10\n  __int64 result; // rax\n  __int64 v13; // r11\n  __int64 v14; // rcx\n  __int64 v15; // r14\n  __int64 v16; // r9\n  __int64 i; // rdx\n  __int64 v18; // rsi\n  __int64 v19; // r12\n  __int64 v20; // rdx\n  __int64 v21; // r10\n  __int64 v22; // rbp\n  __int64 v23; // rsi\n  __int64 v24; // r8\n  __int64 v25; // rdi\n  __int64 v26; // rbx\n  __int64 v27; // r8\n  __int64 v28; // rcx\n  __int64 v29; // r11\n  __int64 v30; // rax\n  __int64 v31; // rdx\n  __int64 v32; // r10\n  __int64 v33; // r8\n  __int64 v34; // r9\n  __int64 v35; // rax\n  __int64 v36; // rsi\n  __int64 v37; // rbx\n  __int64 v38; // r8\n  __int64 v39; // rcx\n  __int64 v40; // r11\n  __int64 v41; // rdi\n  __int64 v42; // rdx\n  __int64 v43; // r10\n  __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  __int64 v47; // rcx\n  __int64 v48; // r9\n  __int64 v49; // r8\n  __int64 v50; // rdx\n  __int64 v51; // r9\n  __int64 v52; // rdi\n  __int64 v53; // r13\n  __int64 v54; // r9\n  __int64 v55; // rsi\n  __int64 v56; // r14\n  __int64 v57; // rax\n  __int64 v58; // rcx\n  __int64 v59; // r12\n  __int64 v60; // rax\n  __int64 v61; // rdx\n  __int64 v62; // rbp\n  __int64 v63; // rax\n  __int64 v64; // r13\n  __int64 v65; // r8\n  unsigned __int64 v66; // rbx\n  __int64 v67; // rax\n  __int64 v68; // r14\n  __int64 v69; // rdi\n  unsigned __int64 v70; // r11\n  __int64 v71; // rax\n  __int64 v72; // r12\n  __int64 v73; // rsi\n  unsigned __int64 v74; // r10\n  __int64 v75; // rax\n  __int64 v76; // rbp\n  __int64 v77; // rcx\n  unsigned __int64 v78; // r9\n  __int64 v79; // rdx\n  __int64 v80; // r8\n  __int64 v81; // rax\n  __int64 v82; // r13\n  __int64 v83; // rdi\n  __int64 v84; // rdx\n  __int64 v85; // r12\n  __int64 v86; // rsi\n  __int64 v87; // r14\n  __int64 v88; // rbp\n  __int64 v89; // rcx\n  __int64 v90; // r13\n  __int64 v91; // r8\n  __int64 v92; // rax\n  __int64 v93; // r12\n  __int64 v94; // rdi\n  __int64 v95; // rdx\n  __int64 v96; // rbp\n  __int64 v97; // rsi\n  __int64 v98; // r14\n  __int64 v99; // r8\n  __int64 v100; // rcx\n  __int64 v101; // r13\n  __int64 v102; // rdi\n  __int64 v103; // rcx\n  __int64 v104; // r12\n  __int64 v105; // rax\n  __int64 v106; // rdx\n  __int64 v107; // rbp\n  __int64 v108; // rsi\n  __int64 v109; // rdx\n  __int64 v110; // r8\n  __int64 v111; // rcx\n  __int64 v112; // r14\n  __int64 v113; // r13\n  __int64 v114; // rdx\n  __int64 v115; // r12\n  __int64 v116; // rdi\n  __int64 v117; // r12\n  unsigned __int64 v118; // r15\n  __int64 v119; // rax\n  __int64 v120; // rsi\n  __int64 v121; // rbx\n  unsigned __int64 v122; // r14\n  __int64 v123; // rax\n  __int64 v124; // rcx\n  __int64 v125; // r8\n  __int64 v126; // rax\n  unsigned __int64 v127; // r13\n  __int64 v128; // rdx\n  __int64 v129; // r10\n  __int64 v130; // rax\n  __int64 v131; // r9\n  unsigned __int64 v132; // r12\n  __int64 v133; // rdi\n  unsigned __int64 v134; // r13\n  unsigned __int64 v135; // r11\n  unsigned __int64 v136; // r13\n  unsigned __int64 v137; // rax\n  unsigned __int64 v138; // rbx\n  unsigned __int64 v139; // rsi\n  __int64 v140; // rax\n  __int64 v141; // r11\n  __int64 v142; // rcx\n  unsigned __int64 v143; // r13\n  __int64 v144; // rax\n  __int64 v145; // r10\n  __int64 v146; // rdx\n  __int64 v147; // rax\n  __int64 v148; // r9\n  __int64 v149; // r12\n  __int64 v150; // rax\n  unsigned __int64 v151; // rbx\n  __int64 v152; // rbp\n  __int64 v153; // rax\n  __int64 v154; // r11\n  __int64 v155; // r13\n  __int64 v156; // rax\n  __int64 v157; // rdx\n  __int64 v158; // r10\n  __int64 v159; // rax\n  __int64 v160; // r12\n  __int64 v161; // r8\n  unsigned __int64 v162; // rsi\n  unsigned __int64 v163; // rbx\n  __int64 v164; // rax\n  __int64 v165; // rbp\n  __int64 v166; // r9\n  __int64 v167; // rax\n  __int64 v168; // r13\n  __int64 v169; // rdi\n  __int64 v170; // rax\n  __int64 v171; // r10\n  __int64 v172; // rdx\n  __int64 v173; // rax\n  __int64 v174; // r8\n  __int64 v175; // rcx\n  unsigned __int64 v176; // r12\n  unsigned __int64 v177; // r15\n  __int64 v178; // rax\n  __int64 v179; // r9\n  __int64 v180; // rsi\n  unsigned __int64 v181; // rax\n  unsigned __int64 v182; // r14\n  __int64 v183; // rax\n  __int64 v184; // rdi\n  __int64 v185; // rbx\n  __int64 v186; // rax\n  __int64 v187; // rdx\n  __int64 v188; // r10\n  unsigned __int64 v189; // r13\n  __int64 v190; // rax\n  __int64 v191; // rcx\n  __int64 v192; // r8\n  unsigned __int64 v193; // r12\n  unsigned __int64 v194; // r11\n  unsigned __int64 v195; // r12\n  __int64 v196; // rax\n  __int64 v197; // rsi\n  __int64 v198; // r9\n  unsigned __int64 v199; // r11\n  unsigned __int64 v200; // r13\n  __int64 v201; // rax\n  __int64 v202; // rbx\n  __int64 v203; // rdi\n  __int64 v204; // rax\n  __int64 v205; // r10\n  __int64 v206; // rdx\n  unsigned __int64 v207; // rax\n  unsigned __int64 v208; // r13\n  __int64 v209; // rax\n  __int64 v210; // r8\n  unsigned __int64 v211; // r14\n  __int64 v212; // r12\n  unsigned __int64 v213; // rbp\n  __int64 v214; // rax\n  __int64 v215; // r9\n  __int64 v216; // rcx\n  __int64 v217; // rax\n  __int64 v218; // rdi\n  __int64 v219; // r11\n  __int64 v220; // rax\n  __int64 v221; // rdx\n  __int64 v222; // r10\n  __int64 v223; // rsi\n  __int64 v224; // r8\n  unsigned __int64 v225; // r12\n  __int64 v226; // rbx\n  __int64 v227; // rax\n  __int64 v228; // rcx\n  __int64 v229; // r13\n  __int64 v230; // rax\n  __int64 v231; // r11\n  __int64 v232; // r14\n  __int64 v233; // rax\n  __int64 v234; // rsi\n  __int64 v235; // rdx\n  __int64 v236; // r8\n  __int64 v237; // rax\n  __int64 v238; // rdi\n  __int64 v239; // rcx\n  __int64 v240; // r13\n  __int64 v241; // r10\n  __int64 v242; // rcx\n  __int64 v243; // r14\n  __int64 v244; // r9\n  __int64 v245; // rcx\n  __int64 v246; // rdx\n  __int64 v247; // r8\n  __int64 v248; // rcx\n  __int64 v249; // rdi\n  __int64 v250; // rax\n  __int64 v251; // rcx\n  __int64 v252; // r10\n  __int64 v253; // rsi\n  __int64 v254; // r13\n  __int64 v255; // r9\n  __int64 v256; // rcx\n  __int64 v257; // r13\n  __int64 v258; // r8\n  __int64 v259; // rdx\n  __int64 v260; // r13\n  __int64 v261; // rdi\n  __int64 v262; // r13\n  __int64 v263; // rax\n  __int64 v264; // rsi\n  __int64 v265; // r10\n  __int64 v266; // rax\n  __int64 v267; // rcx\n  __int64 v268; // r9\n  __int64 v269; // r8\n  __int64 v270; // rdx\n  __int64 v271; // r8\n  __int64 v272; // rax\n  __int64 v273; // r13\n  __int64 v274; // rax\n  __int64 v275; // rbx\n  __int64 v276; // r10\n  __int64 v277; // rbx\n  __int64 v278; // rsi\n  __int64 v279; // r9\n  __int64 v280; // rsi\n  __int64 v281; // rdx\n  __int64 v282; // r8\n  __int64 v283; // rdx\n  __int64 v284; // rcx\n  unsigned __int64 v285; // [rsp+0h] [rbp-1A0h]\n  unsigned __int64 v286; // [rsp+0h] [rbp-1A0h]\n  unsigned __int64 v287; // [rsp+0h] [rbp-1A0h]\n  unsigned __int64 v288; // [rsp+8h] [rbp-198h]\n  unsigned __int64 v289; // [rsp+8h] [rbp-198h]\n  unsigned __int64 v290; // [rsp+10h] [rbp-190h]\n  unsigned __int64 v291; // [rsp+10h] [rbp-190h]\n  unsigned __int64 v292; // [rsp+10h] [rbp-190h]\n  unsigned __int64 v293; // [rsp+18h] [rbp-188h]\n  unsigned __int64 v294; // [rsp+18h] [rbp-188h]\n  unsigned __int64 v295; // [rsp+20h] [rbp-180h]\n  unsigned __int64 v296; // [rsp+20h] [rbp-180h]\n  unsigned __int64 v297; // [rsp+28h] [rbp-178h]\n  unsigned __int64 v298; // [rsp+28h] [rbp-178h]\n  unsigned __int64 v299; // [rsp+28h] [rbp-178h]\n  unsigned __int64 v300; // [rsp+30h] [rbp-170h]\n  unsigned __int64 v301; // [rsp+30h] [rbp-170h]\n  unsigned __int64 v302; // [rsp+30h] [rbp-170h]\n  unsigned __int64 v303; // [rsp+38h] [rbp-168h]\n  unsigned __int64 v304; // [rsp+38h] [rbp-168h]\n  unsigned __int64 v305; // [rsp+38h] [rbp-168h]\n  unsigned __int64 v306; // [rsp+40h] [rbp-160h]\n  unsigned __int64 v307; // [rsp+40h] [rbp-160h]\n  unsigned __int64 v308; // [rsp+40h] [rbp-160h]\n  unsigned __int64 v309; // [rsp+48h] [rbp-158h]\n  unsigned __int64 v310; // [rsp+48h] [rbp-158h]\n  unsigned __int64 v311; // [rsp+48h] [rbp-158h]\n  unsigned __int64 v312; // [rsp+50h] [rbp-150h]\n  unsigned __int64 v313; // [rsp+50h] [rbp-150h]\n  unsigned __int64 v314; // [rsp+50h] [rbp-150h]\n  unsigned __int64 v315; // [rsp+58h] [rbp-148h]\n  unsigned __int64 v316; // [rsp+58h] [rbp-148h]\n  unsigned __int64 v317; // [rsp+60h] [rbp-140h]\n  unsigned __int64 v318; // [rsp+60h] [rbp-140h]\n  unsigned __int64 v319; // [rsp+68h] [rbp-138h]\n  unsigned __int64 v320; // [rsp+68h] [rbp-138h]\n  unsigned __int64 v321; // [rsp+70h] [rbp-130h]\n  unsigned __int64 v322; // [rsp+70h] [rbp-130h]\n  unsigned __int64 v323; // [rsp+78h] [rbp-128h]\n  unsigned __int64 v324; // [rsp+80h] [rbp-120h]\n  unsigned __int64 v325; // [rsp+88h] [rbp-118h]\n  __int64 v326; // [rsp+90h] [rbp-110h]\n  __int64 v327; // [rsp+98h] [rbp-108h]\n  __int64 v328; // [rsp+A0h] [rbp-100h]\n  __int64 v329; // [rsp+A8h] [rbp-F8h]\n  __int64 v330; // [rsp+B0h] [rbp-F0h]\n  __int64 v331; // [rsp+B8h] [rbp-E8h]\n  __int64 v332; // [rsp+C0h] [rbp-E0h]\n  unsigned __int64 v333; // [rsp+C8h] [rbp-D8h]\n  __int64 v334; // [rsp+D0h] [rbp-D0h]\n  unsigned __int64 v335; // [rsp+D8h] [rbp-C8h]\n  unsigned __int64 v337; // [rsp+E8h] [rbp-B8h]\n  unsigned __int64 v338; // [rsp+F0h] [rbp-B0h]\n  unsigned __int64 v339; // [rsp+F8h] [rbp-A8h]\n  unsigned __int64 v340; // [rsp+100h] [rbp-A0h]\n  unsigned __int64 v341; // [rsp+108h] [rbp-98h]\n  unsigned __int64 v342; // [rsp+110h] [rbp-90h]\n  unsigned __int64 v343; // [rsp+118h] [rbp-88h]\n  unsigned __int64 v344; // [rsp+120h] [rbp-80h]\n  unsigned __int64 v345; // [rsp+128h] [rbp-78h]\n  unsigned __int64 v346; // [rsp+130h] [rbp-70h]\n  unsigned __int64 v347; // [rsp+138h] [rbp-68h]\n  unsigned __int64 v348; // [rsp+140h] [rbp-60h]\n  unsigned __int64 v349; // [rsp+148h] [rbp-58h]\n  unsigned __int64 v350; // [rsp+150h] [rbp-50h]\n  unsigned __int64 v351; // [rsp+158h] [rbp-48h]\n  unsigned __int64 v352; // [rsp+160h] [rbp-40h]\n\n  v4 = a1 + (a2 & 0xFFFFFFFFFFFFFFF8LL);\n  v5 = __CFADD__(a3[8], a2);\n  v6 = a3[2];\n  v7 = a3[3];\n  v8 = a3[4];\n  v325 = a1;\n  v9 = a3[5];\n  v10 = a3[1];\n  v335 = v4;\n  v11 = a3[6];\n  result = *a3;\n  v13 = a3[7];\n  a3[8] += a2;\n  a3[9] += v5;\n  if ( a1 < v4 )\n  {\n    v332 = v13;\n    v14 = v8;\n    v15 = v9;\n    v331 = v11;\n    v330 = v9;\n    v328 = v7;\n    v327 = v6;\n    v326 = v10;\n    v334 = result;\n    v329 = v8;\n    v16 = v11;\n    do\n    {\n      for ( i = 0LL; i != 128; i += 8LL )\n        *(unsigned __int64 *)((char *)&v337 + i) = _byteswap_uint64(*(_QWORD *)(v325 + i));\n      v325 += 128LL;\n      v18 = (__ROR8__(v14, 18) ^ __ROR8__(v14, 14) ^ __ROL8__(v14, 23))\n          + v337\n          + 0x428A2F98D728AE22LL\n          + v13\n          + (v16 ^ v14 & (v16 ^ v15));\n      v19 = v18 + v7;\n      v20 = v18\n          + (__ROL8__(result, 25) ^ __ROR8__(result, 28) ^ __ROL8__(result, 30))\n          + (v10 & result | v6 & (v10 | result));\n      v21 = (v15 ^ (v18 + v7) & (v15 ^ v14))\n          + v16\n          + v338\n          + 0x7137449123EF65CDLL\n          + (__ROR8__(v18 + v7, 14) ^ __ROR8__(v18 + v7, 18) ^ __ROL8__(v18 + v7, 23));\n      v22 = v21 + v6;\n      v23 = v21 + (__ROL8__(v20, 25) ^ __ROR8__(v20, 28) ^ __ROL8__(v20, 30)) + (result & v20 | v10 & (result | v20));\n      v24 = (v14 ^ (v21 + v6) & (v14 ^ v19))\n          + v15\n          + v339\n          - 0x4A3F043013B2C4D1LL\n          + (__ROR8__(v21 + v6, 14) ^ __ROR8__(v21 + v6, 18) ^ __ROL8__(v21 + v6, 23));\n      v25 = v24 + v10;\n      v26 = v24 + (__ROL8__(v23, 25) ^ __ROR8__(v23, 28) ^ __ROL8__(v23, 30)) + (v23 & v20 | result & (v23 | v20));\n      v27 = (v19 ^ v25 & ((v21 + v6) ^ v19))\n          + v340\n          - 0x164A245A7E762444LL\n          + v14\n          + (__ROR8__(v25, 14) ^ __ROR8__(v25, 18) ^ __ROL8__(v25, 23));\n      v28 = v27 + result;\n      v29 = v27 + (__ROL8__(v26, 25) ^ __ROR8__(v26, 28) ^ __ROL8__(v26, 30)) + (v26 & v23 | v20 & (v26 | v23));\n      v30 = (v22 ^ v28 & (v25 ^ v22))\n          + v341\n          + 0x3956C25BF348B538LL\n          + v19\n          + (__ROR8__(v28, 14) ^ __ROR8__(v27 + result, 18) ^ __ROL8__(v28, 23));\n      v31 = v30 + v20;\n      v32 = v30 + (__ROL8__(v29, 25) ^ __ROR8__(v29, 28) ^ __ROL8__(v29, 30)) + (v29 & v26 | v23 & (v29 | v26));\n      v33 = (v25 ^ v31 & (v28 ^ v25))\n          + v342\n          + 0x59F111F1B605D019LL\n          + v22\n          + (__ROR8__(v31, 14) ^ __ROR8__(v31, 18) ^ __ROL8__(v31, 23));\n      v34 = v23 + v33;\n      v35 = v33 + (__ROL8__(v32, 25) ^ __ROR8__(v32, 28) ^ __ROL8__(v32, 30)) + (v32 & v29 | v26 & (v32 | v29));\n      v36 = (v28 ^ v34 & (v31 ^ v28))\n          + v343\n          - 0x6DC07D5B50E6B065LL\n          + v25\n          + (__ROR8__(v23 + v33, 14) ^ __ROR8__(v23 + v33, 18) ^ __ROL8__(v34, 23));\n      v37 = v36 + v26;\n      v38 = v36 + (__ROL8__(v35, 25) ^ __ROR8__(v35, 28) ^ __ROL8__(v35, 30)) + (v35 & v32 | v29 & (v35 | v32));\n      v39 = v344\n          - 0x54E3A12A25927EE8LL\n          + v28\n          + (v31 ^ v37 & (v34 ^ v31))\n          + (__ROR8__(v37, 14) ^ __ROR8__(v37, 18) ^ __ROL8__(v37, 23));\n      v40 = v39 + v29;\n      v41 = v39 + (__ROL8__(v38, 25) ^ __ROR8__(v38, 28) ^ __ROL8__(v38, 30)) + (v38 & v35 | v32 & (v38 | v35));\n      v42 = v345\n          - 0x27F855675CFCFDBELL\n          + v31\n          + (v34 ^ v40 & (v37 ^ v34))\n          + (__ROR8__(v40, 14) ^ __ROR8__(v40, 18) ^ __ROL8__(v40, 23));\n      v43 = v42 + v32;\n      v44 = v42 + (__ROL8__(v41, 25) ^ __ROR8__(v41, 28) ^ __ROL8__(v41, 30)) + (v41 & v38 | v35 & (v41 | v38));\n      v45 = (v37 ^ v43 & (v40 ^ v37))\n          + v346\n          + 0x12835B0145706FBELL\n          + v34\n          + (__ROR8__(v43, 14) ^ __ROR8__(v43, 18) ^ __ROL8__(v43, 23));\n      v46 = v45 + v35;\n      v47 = v45 + (__ROL8__(v44, 25) ^ __ROR8__(v44, 28) ^ __ROL8__(v44, 30)) + (v44 & v41 | v38 & (v44 | v41));\n      v48 = (v40 ^ v46 & (v43 ^ v40))\n          + v347\n          + 0x243185BE4EE4B28CLL\n          + v37\n          + (__ROR8__(v46, 14) ^ __ROR8__(v46, 18) ^ __ROL8__(v46, 23));\n      v49 = v48 + v38;\n      v50 = v48 + (__ROL8__(v47, 25) ^ __ROR8__(v47, 28) ^ __ROL8__(v47, 30)) + (v47 & v44 | v41 & (v47 | v44));\n      v51 = (v43 ^ v49 & (v46 ^ v43))\n          + v348\n          + 0x550C7DC3D5FFB4E2LL\n          + v40\n          + (__ROR8__(v49, 14) ^ __ROR8__(v49, 18) ^ __ROL8__(v49, 23));\n      v52 = v51 + v41;\n      v53 = v51 + (__ROL8__(v50, 25) ^ __ROR8__(v50, 28) ^ __ROL8__(v50, 30)) + (v50 & v47 | v44 & (v50 | v47));\n      v54 = (v46 ^ v52 & (v49 ^ v46))\n          + v349\n          + 0x72BE5D74F27B896FLL\n          + v43\n          + (__ROR8__(v52, 14) ^ __ROR8__(v52, 18) ^ __ROL8__(v52, 23));\n      v55 = v54 + v44;\n      v56 = v54 + (__ROL8__(v53, 25) ^ __ROR8__(v53, 28) ^ __ROL8__(v53, 30)) + (v53 & v50 | v47 & (v53 | v50));\n      v57 = (v49 ^ v55 & (v52 ^ v49))\n          + v350\n          - 0x7F214E01C4E9694FLL\n          + v46\n          + (__ROR8__(v55, 14) ^ __ROR8__(v55, 18) ^ __ROL8__(v55, 23));\n      v58 = v57 + v47;\n      v59 = v57 + (__ROL8__(v56, 25) ^ __ROR8__(v56, 28) ^ __ROL8__(v56, 30)) + (v56 & v53 | v50 & (v56 | v53));\n      v60 = (v52 ^ v58 & (v55 ^ v52))\n          + v351\n          - 0x6423F958DA38EDCBLL\n          + v49\n          + (__ROR8__(v58, 14) ^ __ROR8__(v58, 18) ^ __ROL8__(v58, 23));\n      v61 = v60 + v50;\n      v62 = v60 + (__ROL8__(v59, 25) ^ __ROR8__(v59, 28) ^ __ROL8__(v59, 30)) + (v59 & v56 | v53 & (v59 | v56));\n      v63 = (v55 ^ v61 & (v58 ^ v55))\n          + v352\n          - 0x3E640E8B3096D96CLL\n          + v52\n          + (__ROR8__(v61, 14) ^ __ROR8__(v61, 18) ^ __ROL8__(v61, 23));\n      v64 = v63 + v53;\n      v65 = v63 + (__ROL8__(v62, 25) ^ __ROR8__(v62, 28) ^ __ROL8__(v62, 30)) + (v62 & v59 | v56 & (v62 | v59));\n      v66 = (__ROR8__(v351, 19) ^ __ROL8__(v351, 3) ^ (v351 >> 6))\n          + v346\n          + v337\n          + ((v338 >> 7) ^ __ROR8__(v338, 1) ^ __ROR8__(v338, 8));\n      v67 = (v58 ^ v64 & (v61 ^ v58))\n          + v66\n          - 0x1B64963E610EB52ELL\n          + v55\n          + (__ROR8__(v64, 14) ^ __ROR8__(v64, 18) ^ __ROL8__(v64, 23));\n      v68 = v67 + v56;\n      v69 = v67 + (__ROL8__(v65, 25) ^ __ROR8__(v65, 28) ^ __ROL8__(v65, 30)) + (v65 & v62 | v59 & (v65 | v62));\n      v70 = (__ROR8__(v352, 19) ^ __ROL8__(v352, 3) ^ (v352 >> 6))\n          + v338\n          + v347\n          + ((v339 >> 7) ^ __ROR8__(v339, 1) ^ __ROR8__(v339, 8));\n      v71 = (v61 ^ v68 & (v64 ^ v61))\n          + v70\n          - 0x1041B879C7B0DA1DLL\n          + v58\n          + (__ROR8__(v68, 14) ^ __ROR8__(v68, 18) ^ __ROL8__(v68, 23));\n      v72 = v71 + v59;\n      v73 = v71 + (__ROL8__(v69, 25) ^ __ROR8__(v69, 28) ^ __ROL8__(v69, 30)) + (v69 & v65 | v62 & (v69 | v65));\n      v74 = (__ROR8__(v340, 1) ^ __ROR8__(v340, 8) ^ (v340 >> 7))\n          + v348\n          + v339\n          + ((v66 >> 6) ^ __ROR8__(v66, 19) ^ __ROL8__(v66, 3));\n      v75 = (v64 ^ v72 & (v68 ^ v64))\n          + v74\n          + 0xFC19DC68B8CD5B5LL\n          + v61\n          + (__ROR8__(v72, 14) ^ __ROR8__(v72, 18) ^ __ROL8__(v72, 23));\n      v76 = v75 + v62;\n      v77 = v75 + (__ROL8__(v73, 25) ^ __ROR8__(v73, 28) ^ __ROL8__(v73, 30)) + (v73 & v69 | v65 & (v73 | v69));\n      v78 = (__ROR8__(v341, 1) ^ __ROR8__(v341, 8) ^ (v341 >> 7))\n          + v349\n          + v340\n          + ((v70 >> 6) ^ __ROR8__(v70, 19) ^ __ROL8__(v70, 3));\n      v79 = (v68 ^ v76 & (v72 ^ v68))\n          + v78\n          + 0x240CA1CC77AC9C65LL\n          + v64\n          + (__ROR8__(v76, 14) ^ __ROR8__(v76, 18) ^ __ROL8__(v76, 23));\n      v80 = v79 + v65;\n      v81 = v79 + (__ROL8__(v77, 25) ^ __ROR8__(v77, 28) ^ __ROL8__(v77, 30)) + (v77 & v73 | v69 & (v77 | v73));\n      v306 = v350\n           + v341\n           + (__ROR8__(v342, 8) ^ __ROR8__(v342, 1) ^ (v342 >> 7))\n           + ((v74 >> 6) ^ __ROR8__(v74, 19) ^ __ROL8__(v74, 3));\n      v82 = (v72 ^ v80 & (v76 ^ v72))\n          + v306\n          + 0x2DE92C6F592B0275LL\n          + v68\n          + (__ROR8__(v80, 14) ^ __ROR8__(v80, 18) ^ __ROL8__(v80, 23));\n      v83 = v82 + v69;\n      v84 = v82 + (__ROL8__(v81, 25) ^ __ROR8__(v81, 28) ^ __ROL8__(v81, 30)) + (v81 & v77 | v73 & (v81 | v77));\n      v297 = ((v78 >> 6) ^ __ROR8__(v78, 19) ^ __ROL8__(v78, 3))\n           + v351\n           + v342\n           + (__ROR8__(v343, 8) ^ __ROR8__(v343, 1) ^ (v343 >> 7));\n      v85 = (v76 ^ v83 & (v80 ^ v76))\n          + v297\n          + 0x4A7484AA6EA6E483LL\n          + v72\n          + (__ROR8__(v83, 14) ^ __ROR8__(v83, 18) ^ __ROL8__(v83, 23));\n      v86 = v85 + v73;\n      v87 = v85 + (__ROL8__(v84, 25) ^ __ROR8__(v84, 28) ^ __ROL8__(v84, 30)) + (v84 & v81 | v77 & (v84 | v81));\n      v300 = v352\n           + v343\n           + (__ROR8__(v344, 8) ^ __ROR8__(v344, 1) ^ (v344 >> 7))\n           + ((v306 >> 6) ^ __ROR8__(v306, 19) ^ __ROL8__(v306, 3));\n      v88 = (v80 ^ v86 & (v83 ^ v80))\n          + v300\n          + 0x5CB0A9DCBD41FBD4LL\n          + v76\n          + (__ROR8__(v86, 14) ^ __ROR8__(v86, 18) ^ __ROL8__(v86, 23));\n      v89 = v88 + v77;\n      v90 = v88 + (__ROL8__(v87, 25) ^ __ROR8__(v87, 28) ^ __ROL8__(v87, 30)) + (v87 & v84 | v81 & (v87 | v84));\n      v285 = ((v297 >> 6) ^ __ROR8__(v297, 19) ^ __ROL8__(v297, 3))\n           + v66\n           + v344\n           + ((v345 >> 7) ^ __ROR8__(v345, 1) ^ __ROR8__(v345, 8));\n      v91 = (v83 ^ v89 & (v86 ^ v83))\n          + v285\n          + 0x76F988DA831153B5LL\n          + v80\n          + (__ROR8__(v89, 14) ^ __ROR8__(v89, 18) ^ __ROL8__(v89, 23));\n      v92 = v91 + v81;\n      v93 = v91 + (__ROL8__(v90, 25) ^ __ROR8__(v90, 28) ^ __ROL8__(v90, 30)) + (v90 & v87 | v84 & (v90 | v87));\n      v303 = ((v300 >> 6) ^ __ROR8__(v300, 19) ^ __ROL8__(v300, 3))\n           + v70\n           + v345\n           + ((v346 >> 7) ^ __ROR8__(v346, 1) ^ __ROR8__(v346, 8));\n      v94 = (v86 ^ v92 & (v89 ^ v86))\n          + v303\n          - 0x67C1AEAD11992055LL\n          + v83\n          + (__ROR8__(v92, 14) ^ __ROR8__(v92, 18) ^ __ROL8__(v92, 23));\n      v95 = v94 + v84;\n      v96 = v94 + (__ROL8__(v93, 25) ^ __ROR8__(v93, 28) ^ __ROL8__(v93, 30)) + (v93 & v90 | v87 & (v93 | v90));\n      v288 = ((v285 >> 6) ^ __ROR8__(v285, 19) ^ __ROL8__(v285, 3))\n           + v74\n           + v346\n           + ((v347 >> 7) ^ __ROR8__(v347, 1) ^ __ROR8__(v347, 8));\n      v97 = (v89 ^ v95 & (v92 ^ v89))\n          + v288\n          - 0x57CE3992D24BCDF0LL\n          + v86\n          + (__ROR8__(v95, 14) ^ __ROR8__(v95, 18) ^ __ROL8__(v95, 23));\n      v98 = v97 + v87;\n      v99 = v97 + (__ROL8__(v96, 25) ^ __ROR8__(v96, 28) ^ __ROL8__(v96, 30)) + (v96 & v93 | v90 & (v96 | v93));\n      v290 = ((v303 >> 6) ^ __ROR8__(v303, 19) ^ __ROL8__(v303, 3))\n           + v78\n           + v347\n           + ((v348 >> 7) ^ __ROR8__(v348, 1) ^ __ROR8__(v348, 8));\n      v100 = (v92 ^ v98 & (v95 ^ v92))\n           + v290\n           - 0x4FFCD8376704DEC1LL\n           + v89\n           + (__ROR8__(v98, 14) ^ __ROR8__(v98, 18) ^ __ROL8__(v98, 23));\n      v101 = v100 + v90;\n      v102 = v100 + (__ROL8__(v99, 25) ^ __ROR8__(v99, 28) ^ __ROL8__(v99, 30)) + (v99 & v96 | v93 & (v99 | v96));\n      v309 = ((v288 >> 6) ^ __ROR8__(v288, 19) ^ __ROL8__(v288, 3))\n           + v306\n           + v348\n           + ((v349 >> 7) ^ __ROR8__(v349, 1) ^ __ROR8__(v349, 8));\n      v103 = (v95 ^ v101 & (v98 ^ v95))\n           + v309\n           - 0x40A680384110F11CLL\n           + v92\n           + (__ROR8__(v101, 14) ^ __ROR8__(v101, 18) ^ __ROL8__(v101, 23));\n      v104 = v103 + v93;\n      v105 = v103 + (__ROL8__(v102, 25) ^ __ROR8__(v102, 28) ^ __ROL8__(v102, 30)) + (v102 & v99 | v96 & (v102 | v99));\n      v293 = ((v290 >> 6) ^ __ROR8__(v290, 19) ^ __ROL8__(v290, 3))\n           + v297\n           + v349\n           + ((v350 >> 7) ^ __ROR8__(v350, 1) ^ __ROR8__(v350, 8));\n      v106 = (v98 ^ v104 & (v101 ^ v98))\n           + v293\n           - 0x391FF40CC257703ELL\n           + v95\n           + (__ROR8__(v104, 14) ^ __ROR8__(v104, 18) ^ __ROL8__(v104, 23));\n      v107 = v106 + v96;\n      v108 = v106 + (__ROL8__(v105, 25) ^ __ROR8__(v105, 28) ^ __ROL8__(v105, 30)) + (v105 & v102 | v99 & (v105 | v102));\n      v295 = ((v309 >> 6) ^ __ROR8__(v309, 19) ^ __ROL8__(v309, 3))\n           + v300\n           + v350\n           + ((v351 >> 7) ^ __ROR8__(v351, 1) ^ __ROR8__(v351, 8));\n      v109 = (v101 ^ v107 & (v104 ^ v101))\n           + v295\n           - 0x2A586EB86CF558DBLL\n           + v98\n           + (__ROR8__(v107, 14) ^ __ROR8__(v107, 18) ^ __ROL8__(v107, 23));\n      v110 = v109 + v99;\n      v111 = v109\n           + (__ROL8__(v108, 25) ^ __ROR8__(v108, 28) ^ __ROL8__(v108, 30))\n           + (v108 & v105 | v102 & (v108 | v105));\n      v315 = ((v293 >> 6) ^ __ROR8__(v293, 19) ^ __ROL8__(v293, 3))\n           + v285\n           + v351\n           + ((v352 >> 7) ^ __ROR8__(v352, 1) ^ __ROR8__(v352, 8));\n      v112 = (v104 ^ v110 & (v107 ^ v104))\n           + v315\n           + 0x6CA6351E003826FLL\n           + v101\n           + (__ROR8__(v110, 14) ^ __ROR8__(v110, 18) ^ __ROL8__(v110, 23));\n      v113 = v102 + v112;\n      v114 = v112\n           + (__ROL8__(v111, 25) ^ __ROR8__(v111, 28) ^ __ROL8__(v111, 30))\n           + (v111 & v108 | v105 & (v111 | v108));\n      v312 = ((v295 >> 6) ^ __ROR8__(v295, 19) ^ __ROL8__(v295, 3))\n           + v303\n           + v352\n           + ((v66 >> 7) ^ __ROR8__(v66, 1) ^ __ROR8__(v66, 8));\n      v115 = (v107 ^ (v102 + v112) & (v110 ^ v107))\n           + v312\n           + 0x142929670A0E6E70LL\n           + v104\n           + (__ROL8__(v113, 23) ^ __ROR8__(v113, 14) ^ __ROR8__(v113, 18));\n      v116 = v105 + v115;\n      v117 = (__ROL8__(v114, 25) ^ __ROR8__(v114, 28) ^ __ROL8__(v114, 30))\n           + (v114 & v111 | v108 & (v114 | v111))\n           + v115;\n      v118 = v288\n           + ((v70 >> 7) ^ __ROR8__(v70, 1) ^ __ROR8__(v70, 8))\n           + v66\n           + ((v315 >> 6) ^ __ROR8__(v315, 19) ^ __ROL8__(v315, 3));\n      v119 = (v110 ^ v116 & (v113 ^ v110))\n           + v118\n           + 0x27B70A8546D22FFCLL\n           + v107\n           + (__ROL8__(v116, 23) ^ __ROR8__(v116, 14) ^ __ROR8__(v116, 18));\n      v120 = v119 + v108;\n      v121 = v119\n           + (v117 & v114 | v111 & (v117 | v114))\n           + (__ROL8__(v117, 25) ^ __ROR8__(v117, 28) ^ __ROL8__(v117, 30));\n      v122 = v290\n           + ((v74 >> 7) ^ __ROR8__(v74, 1) ^ __ROR8__(v74, 8))\n           + v70\n           + ((v312 >> 6) ^ __ROR8__(v312, 19) ^ __ROL8__(v312, 3));\n      v123 = (v113 ^ v120 & (v116 ^ v113))\n           + v122\n           + 0x2E1B21385C26C926LL\n           + v110\n           + (__ROL8__(v120, 23) ^ __ROR8__(v120, 14) ^ __ROR8__(v120, 18));\n      v124 = v123 + v111;\n      v125 = v123\n           + (v121 & v117 | v114 & (v121 | v117))\n           + (__ROL8__(v121, 25) ^ __ROR8__(v121, 28) ^ __ROL8__(v121, 30));\n      v317 = ((v118 >> 6) ^ __ROR8__(v118, 19) ^ __ROL8__(v118, 3))\n           + v309\n           + ((v78 >> 7) ^ __ROR8__(v78, 1) ^ __ROR8__(v78, 8))\n           + v74;\n      v126 = (v116 ^ v124 & (v120 ^ v116))\n           + v317\n           + 0x4D2C6DFC5AC42AEDLL\n           + v113\n           + (__ROL8__(v124, 23) ^ __ROR8__(v124, 14) ^ __ROR8__(v124, 18));\n      v127 = v306;\n      v128 = v126 + v114;\n      v129 = v126\n           + (v125 & v121 | v117 & (v125 | v121))\n           + (__ROL8__(v125, 25) ^ __ROR8__(v125, 28) ^ __ROL8__(v125, 30));\n      v307 = ((v122 >> 6) ^ __ROR8__(v122, 19) ^ __ROL8__(v122, 3))\n           + v293\n           + ((v306 >> 7) ^ __ROR8__(v306, 1) ^ __ROR8__(v306, 8))\n           + v78;\n      v130 = (v120 ^ v128 & (v124 ^ v120))\n           + v307\n           + 0x53380D139D95B3DFLL\n           + v116\n           + (__ROL8__(v128, 23) ^ __ROR8__(v128, 14) ^ __ROR8__(v128, 18));\n      v131 = v117 + v130;\n      v132 = v297;\n      v133 = v130\n           + (v129 & v125 | v121 & (v129 | v125))\n           + (__ROL8__(v129, 25) ^ __ROR8__(v129, 28) ^ __ROL8__(v129, 30));\n      v134 = ((v317 >> 6) ^ __ROR8__(v317, 19) ^ __ROL8__(v317, 3))\n           + v295\n           + v127\n           + ((v297 >> 7) ^ __ROR8__(v297, 1) ^ __ROR8__(v297, 8));\n      v135 = v134 + 0x650A73548BAF63DELL;\n      v298 = v134;\n      v136 = v300;\n      v137 = (v124 ^ v131 & (v128 ^ v124))\n           + v135\n           + v120\n           + (__ROL8__(v131, 23) ^ __ROR8__(v131, 14) ^ __ROR8__(v131, 18));\n      v138 = v137 + v121;\n      v139 = v137\n           + (v133 & v129 | v125 & (v133 | v129))\n           + (__ROL8__(v133, 25) ^ __ROR8__(v133, 28) ^ __ROL8__(v133, 30));\n      v301 = ((v307 >> 6) ^ __ROR8__(v307, 19) ^ __ROL8__(v307, 3))\n           + v315\n           + v132\n           + ((v300 >> 7) ^ __ROR8__(v300, 1) ^ __ROR8__(v300, 8));\n      v140 = (v128 ^ v138 & (v131 ^ v128))\n           + v301\n           + 0x766A0ABB3C77B2A8LL\n           + v124\n           + (__ROL8__(v138, 23) ^ __ROR8__(v138, 14) ^ __ROR8__(v138, 18));\n      v141 = v125 + v140;\n      v142 = v140\n           + (v139 & v133 | v129 & (v139 | v133))\n           + (__ROL8__(v139, 25) ^ __ROR8__(v139, 28) ^ __ROL8__(v139, 30));\n      v319 = v312\n           + v136\n           + ((v285 >> 7) ^ __ROR8__(v285, 1) ^ __ROR8__(v285, 8))\n           + ((v298 >> 6) ^ __ROR8__(v298, 19) ^ __ROL8__(v298, 3));\n      v143 = v303;\n      v144 = (v131 ^ v141 & (v138 ^ v131))\n           + v319\n           - 0x7E3D36D1B812511ALL\n           + v128\n           + (__ROL8__(v141, 23) ^ __ROR8__(v125 + v140, 14) ^ __ROR8__(v125 + v140, 18));\n      v145 = v144 + v129;\n      v146 = v144\n           + (v142 & v139 | v133 & (v142 | v139))\n           + (__ROL8__(v142, 25) ^ __ROR8__(v142, 28) ^ __ROL8__(v142, 30));\n      v304 = v118\n           + v285\n           + ((v303 >> 7) ^ __ROR8__(v303, 1) ^ __ROR8__(v303, 8))\n           + ((v301 >> 6) ^ __ROR8__(v301, 19) ^ __ROL8__(v301, 3));\n      v147 = (v138 ^ v145 & (v141 ^ v138))\n           + v304\n           - 0x6D8DD37AEB7DCAC5LL\n           + v131\n           + (__ROL8__(v145, 23) ^ __ROR8__(v145, 14) ^ __ROR8__(v145, 18));\n      v148 = v133 + v147;\n      v149 = (__ROL8__(v146, 25) ^ __ROR8__(v146, 28) ^ __ROL8__(v146, 30))\n           + (v146 & v142 | v139 & (v146 | v142))\n           + v147;\n      v286 = v122\n           + v143\n           + ((v288 >> 7) ^ __ROR8__(v288, 1) ^ __ROR8__(v288, 8))\n           + ((v319 >> 6) ^ __ROR8__(v319, 19) ^ __ROL8__(v319, 3));\n      v150 = (v141 ^ v148 & (v145 ^ v141))\n           + v286\n           - 0x5D40175EB30EFC9CLL\n           + v138\n           + (__ROL8__(v148, 23) ^ __ROR8__(v133 + v147, 14) ^ __ROR8__(v133 + v147, 18));\n      v151 = v139 + v150;\n      v152 = (__ROL8__(v149, 25) ^ __ROR8__(v149, 28) ^ __ROL8__(v149, 30))\n           + (v149 & v146 | v142 & (v149 | v146))\n           + v150;\n      v321 = v317\n           + v288\n           + ((v290 >> 7) ^ __ROR8__(v290, 1) ^ __ROR8__(v290, 8))\n           + ((v304 >> 6) ^ __ROR8__(v304, 19) ^ __ROL8__(v304, 3));\n      v153 = (v145 ^ v151 & (v148 ^ v145))\n           + v321\n           - 0x57E599B443BDCFFFLL\n           + v141\n           + (__ROL8__(v151, 23) ^ __ROR8__(v139 + v150, 14) ^ __ROR8__(v139 + v150, 18));\n      v154 = v142 + v153;\n      v155 = (__ROL8__(v152, 25) ^ __ROR8__(v152, 28) ^ __ROL8__(v152, 30))\n           + (v152 & v149 | v146 & (v152 | v149))\n           + v153;\n      v291 = v307\n           + v290\n           + ((v309 >> 7) ^ __ROR8__(v309, 1) ^ __ROR8__(v309, 8))\n           + ((v286 >> 6) ^ __ROR8__(v286, 19) ^ __ROL8__(v286, 3));\n      v156 = (v148 ^ v154 & (v151 ^ v148))\n           + v291\n           - 0x3DB4748F2F07686FLL\n           + v145\n           + (__ROL8__(v154, 23) ^ __ROR8__(v142 + v153, 14) ^ __ROR8__(v142 + v153, 18));\n      v157 = v156 + v146;\n      v158 = (__ROL8__(v155, 25) ^ __ROR8__(v155, 28) ^ __ROL8__(v155, 30))\n           + (v155 & v152 | v149 & (v155 | v152))\n           + v156;\n      v310 = v298\n           + v309\n           + ((v293 >> 7) ^ __ROR8__(v293, 1) ^ __ROR8__(v293, 8))\n           + ((v321 >> 6) ^ __ROR8__(v321, 19) ^ __ROL8__(v321, 3));\n      v159 = (v151 ^ v157 & (v154 ^ v151))\n           + v310\n           - 0x3893AE5CF9AB41D0LL\n           + v148\n           + (__ROL8__(v157, 23) ^ __ROR8__(v157, 14) ^ __ROR8__(v157, 18));\n      v160 = v159 + v149;\n      v161 = (__ROL8__(v158, 25) ^ __ROR8__(v158, 28) ^ __ROL8__(v158, 30))\n           + (v158 & v155 | v152 & (v158 | v155))\n           + v159;\n      v323 = v301\n           + v293\n           + ((v295 >> 7) ^ __ROR8__(v295, 1) ^ __ROR8__(v295, 8))\n           + ((v291 >> 6) ^ __ROR8__(v291, 19) ^ __ROL8__(v291, 3));\n      v162 = v323 - 0x2E6D17E62910ADE8LL + v151;\n      v163 = v315;\n      v164 = (v154 ^ v160 & (v157 ^ v154)) + v162 + (__ROL8__(v160, 23) ^ __ROR8__(v160, 14) ^ __ROR8__(v160, 18));\n      v165 = v164 + v152;\n      v166 = (__ROL8__(v161, 25) ^ __ROR8__(v161, 28) ^ __ROL8__(v161, 30))\n           + (v161 & v158 | v155 & (v161 | v158))\n           + v164;\n      v316 = v319\n           + v295\n           + ((v315 >> 7) ^ __ROR8__(v315, 1) ^ __ROR8__(v315, 8))\n           + ((v310 >> 6) ^ __ROR8__(v310, 19) ^ __ROL8__(v310, 3));\n      v167 = (v157 ^ v165 & (v160 ^ v157))\n           + v154\n           + v316\n           - 0x2966F9DBAA9A56F0LL\n           + (__ROL8__(v165, 23) ^ __ROR8__(v165, 14) ^ __ROR8__(v165, 18));\n      v168 = v167 + v155;\n      v169 = v167\n           + (v166 & v161 | v158 & (v166 | v161))\n           + (__ROL8__(v166, 25) ^ __ROR8__(v166, 28) ^ __ROL8__(v166, 30));\n      v333 = ((v323 >> 6) ^ __ROR8__(v323, 19) ^ __ROL8__(v323, 3))\n           + v304\n           + v163\n           + ((v312 >> 7) ^ __ROR8__(v312, 1) ^ __ROR8__(v312, 8));\n      v170 = (v160 ^ v168 & (v165 ^ v160))\n           + v333\n           - 0xBF1CA7AA88EDFD6LL\n           + v157\n           + (__ROL8__(v168, 23) ^ __ROR8__(v168, 14) ^ __ROR8__(v168, 18));\n      v171 = v170 + v158;\n      v172 = v170\n           + (v169 & v166 | v161 & (v169 | v166))\n           + (__ROL8__(v169, 25) ^ __ROR8__(v169, 28) ^ __ROL8__(v169, 30));\n      v313 = ((v316 >> 6) ^ __ROR8__(v316, 19) ^ __ROL8__(v316, 3))\n           + v286\n           + v312\n           + ((v118 >> 7) ^ __ROR8__(v118, 1) ^ __ROR8__(v118, 8));\n      v173 = (v165 ^ v171 & (v168 ^ v165))\n           + v313\n           + 0x106AA07032BBD1B8LL\n           + v160\n           + (__ROL8__(v171, 23) ^ __ROR8__(v171, 14) ^ __ROR8__(v171, 18));\n      v174 = v173 + v161;\n      v175 = v173\n           + (v172 & v169 | v166 & (v172 | v169))\n           + (__ROL8__(v172, 25) ^ __ROR8__(v172, 28) ^ __ROL8__(v172, 30));\n      v176 = v317;\n      v177 = v321\n           + v118\n           + ((v122 >> 7) ^ __ROR8__(v122, 1) ^ __ROR8__(v122, 8))\n           + ((v333 >> 6) ^ __ROR8__(v333, 19) ^ __ROL8__(v333, 3));\n      v178 = (v168 ^ v174 & (v171 ^ v168))\n           + v177\n           + 0x19A4C116B8D2D0C8LL\n           + v165\n           + (__ROL8__(v174, 23) ^ __ROR8__(v174, 14) ^ __ROR8__(v174, 18));\n      v179 = v178 + v166;\n      v180 = v178\n           + (v175 & v172 | v169 & (v175 | v172))\n           + (__ROL8__(v175, 25) ^ __ROR8__(v175, 28) ^ __ROL8__(v175, 30));\n      v181 = v291 + v122 + ((v317 >> 7) ^ __ROR8__(v317, 1) ^ __ROR8__(v317, 8));\n      v182 = v307;\n      v318 = ((v313 >> 6) ^ __ROR8__(v313, 19) ^ __ROL8__(v313, 3)) + v181;\n      v183 = (v171 ^ v179 & (v174 ^ v171))\n           + v318\n           + 0x1E376C085141AB53LL\n           + v168\n           + (__ROL8__(v179, 23) ^ __ROR8__(v179, 14) ^ __ROR8__(v179, 18));\n      v184 = v183 + v169;\n      v185 = v183\n           + (__ROL8__(v180, 25) ^ __ROR8__(v180, 28) ^ __ROL8__(v180, 30))\n           + (v180 & v175 | v172 & (v180 | v175));\n      v308 = ((v177 >> 6) ^ __ROR8__(v177, 19) ^ __ROL8__(v177, 3))\n           + v310\n           + v176\n           + ((v307 >> 7) ^ __ROR8__(v307, 1) ^ __ROR8__(v307, 8));\n      v186 = (v174 ^ v184 & (v179 ^ v174))\n           + v308\n           + 0x2748774CDF8EEB99LL\n           + v171\n           + (__ROL8__(v184, 23) ^ __ROR8__(v184, 14) ^ __ROR8__(v184, 18));\n      v187 = v186 + v172;\n      v188 = v186\n           + (v185 & v180 | v175 & (v185 | v180))\n           + (__ROL8__(v185, 25) ^ __ROR8__(v185, 28) ^ __ROL8__(v185, 30));\n      v189 = ((v318 >> 6) ^ __ROR8__(v318, 19) ^ __ROL8__(v318, 3))\n           + v323\n           + v182\n           + ((v298 >> 7) ^ __ROR8__(v298, 1) ^ __ROR8__(v298, 8));\n      v190 = (v179 ^ v187 & (v184 ^ v179))\n           + v189\n           + 0x34B0BCB5E19B48A8LL\n           + v174\n           + (__ROL8__(v187, 23) ^ __ROR8__(v187, 14) ^ __ROR8__(v187, 18));\n      v191 = v190 + v175;\n      v192 = v190\n           + (v188 & v185 | v180 & (v188 | v185))\n           + (__ROL8__(v188, 25) ^ __ROR8__(v188, 28) ^ __ROL8__(v188, 30));\n      v193 = v316\n           + v298\n           + ((v301 >> 7) ^ __ROR8__(v301, 1) ^ __ROR8__(v301, 8))\n           + ((v308 >> 6) ^ __ROR8__(v308, 19) ^ __ROL8__(v308, 3));\n      v194 = v193 + 0x391C0CB3C5C95A63LL;\n      v324 = v193;\n      v195 = v319;\n      v196 = (v184 ^ v191 & (v187 ^ v184))\n           + v194\n           + v179\n           + (__ROL8__(v191, 23) ^ __ROR8__(v191, 14) ^ __ROR8__(v191, 18));\n      v197 = v196 + v180;\n      v198 = v196\n           + (v192 & v188 | v185 & (v192 | v188))\n           + (__ROL8__(v192, 25) ^ __ROR8__(v192, 28) ^ __ROL8__(v192, 30));\n      v199 = (v319 >> 7) ^ __ROR8__(v319, 1) ^ __ROR8__(v319, 8);\n      v320 = v189;\n      v200 = v333 + v301 + v199 + ((v189 >> 6) ^ __ROR8__(v189, 19) ^ __ROL8__(v189, 3));\n      v201 = (v187 ^ v197 & (v191 ^ v187))\n           + v200\n           + 0x4ED8AA4AE3418ACBLL\n           + v184\n           + (__ROL8__(v197, 23) ^ __ROR8__(v197, 14) ^ __ROR8__(v197, 18));\n      v202 = v201 + v185;\n      v203 = v201\n           + (v198 & v192 | v188 & (v198 | v192))\n           + (__ROL8__(v198, 25) ^ __ROR8__(v198, 28) ^ __ROL8__(v198, 30));\n      v289 = ((v324 >> 6) ^ __ROR8__(v324, 19) ^ __ROL8__(v324, 3))\n           + v313\n           + v195\n           + ((v304 >> 7) ^ __ROR8__(v304, 1) ^ __ROR8__(v304, 8));\n      v204 = (v191 ^ v202 & (v197 ^ v191))\n           + v289\n           + 0x5B9CCA4F7763E373LL\n           + v187\n           + (__ROL8__(v202, 23) ^ __ROR8__(v202, 14) ^ __ROR8__(v202, 18));\n      v205 = v204 + v188;\n      v206 = v204\n           + (v203 & v198 | v192 & (v203 | v198))\n           + (__ROL8__(v203, 25) ^ __ROR8__(v203, 28) ^ __ROL8__(v203, 30));\n      v207 = v304 + ((v286 >> 7) ^ __ROR8__(v286, 1) ^ __ROR8__(v286, 8));\n      v305 = v200;\n      v208 = ((v200 >> 6) ^ __ROR8__(v200, 19) ^ __ROL8__(v200, 3)) + v177 + v207;\n      v209 = (v197 ^ v205 & (v202 ^ v197))\n           + v208\n           + 0x682E6FF3D6B2B8A3LL\n           + v191\n           + (__ROL8__(v205, 23) ^ __ROR8__(v205, 14) ^ __ROR8__(v205, 18));\n      v210 = v209 + v192;\n      v211 = v321;\n      v322 = v208;\n      v212 = (__ROL8__(v206, 25) ^ __ROR8__(v206, 28) ^ __ROL8__(v206, 30))\n           + (v206 & v203 | v198 & (v206 | v203))\n           + v209;\n      v213 = v291;\n      v287 = v286\n           + ((v211 >> 7) ^ __ROR8__(v211, 1) ^ __ROR8__(v211, 8))\n           + v318\n           + ((v289 >> 6) ^ __ROR8__(v289, 19) ^ __ROL8__(v289, 3));\n      v214 = (v202 ^ v210 & (v205 ^ v202))\n           + v287\n           + 0x748F82EE5DEFB2FCLL\n           + v197\n           + (__ROR8__(v210, 14) ^ __ROR8__(v210, 18) ^ __ROL8__(v210, 23));\n      v215 = v214 + v198;\n      v216 = v214\n           + (__ROL8__(v212, 25) ^ __ROR8__(v212, 28) ^ __ROL8__(v212, 30))\n           + (v212 & v206 | v203 & (v212 | v206));\n      v292 = ((v208 >> 6) ^ __ROR8__(v208, 19) ^ __ROL8__(v208, 3))\n           + v211\n           + ((v291 >> 7) ^ __ROR8__(v291, 1) ^ __ROR8__(v291, 8))\n           + v308;\n      v217 = (v205 ^ v215 & (v210 ^ v205))\n           + v292\n           + 0x78A5636F43172F60LL\n           + v202\n           + (__ROR8__(v215, 14) ^ __ROR8__(v215, 18) ^ __ROL8__(v215, 23));\n      v218 = v217 + v203;\n      v219 = v217\n           + (__ROL8__(v216, 25) ^ __ROR8__(v216, 28) ^ __ROL8__(v216, 30))\n           + (v216 & v212 | v206 & (v216 | v212));\n      v294 = ((v287 >> 6) ^ __ROR8__(v287, 19) ^ __ROL8__(v287, 3))\n           + v213\n           + ((v310 >> 7) ^ __ROR8__(v310, 1) ^ __ROR8__(v310, 8))\n           + v320;\n      v220 = (v210 ^ v218 & (v215 ^ v210))\n           + v294\n           - 0x7B3787EB5E0F548ELL\n           + v205\n           + (__ROR8__(v218, 14) ^ __ROR8__(v218, 18) ^ __ROL8__(v218, 23));\n      v221 = v220 + v206;\n      v222 = v220\n           + (__ROL8__(v219, 25) ^ __ROR8__(v219, 28) ^ __ROL8__(v219, 30))\n           + (v219 & v216 | v212 & (v219 | v216));\n      v296 = v310\n           + ((v323 >> 7) ^ __ROR8__(v323, 1) ^ __ROR8__(v323, 8))\n           + v324\n           + ((v292 >> 6) ^ __ROR8__(v292, 19) ^ __ROL8__(v292, 3));\n      v223 = (v215 ^ v221 & (v218 ^ v215))\n           + v296\n           - 0x7338FDF7E59BC614LL\n           + v210\n           + (__ROR8__(v221, 14) ^ __ROR8__(v221, 18) ^ __ROL8__(v221, 23));\n      v224 = v212 + v223;\n      v225 = v313;\n      v226 = (__ROL8__(v222, 25) ^ __ROR8__(v222, 28) ^ __ROL8__(v222, 30))\n           + (v222 & v219 | v216 & (v222 | v219))\n           + v223;\n      v311 = ((v294 >> 6) ^ __ROR8__(v294, 19) ^ __ROL8__(v294, 3))\n           + v305\n           + v323\n           + ((v316 >> 7) ^ __ROR8__(v316, 1) ^ __ROR8__(v316, 8));\n      v227 = (v218 ^ v224 & (v221 ^ v218))\n           + v311\n           - 0x6F410005DC9CE1D8LL\n           + v215\n           + (__ROR8__(v224, 14) ^ __ROR8__(v224, 18) ^ __ROL8__(v224, 23));\n      v228 = v227 + v216;\n      v229 = v227\n           + (__ROL8__(v226, 25) ^ __ROR8__(v226, 28) ^ __ROL8__(v226, 30))\n           + (v226 & v222 | v219 & (v226 | v222));\n      v299 = ((v296 >> 6) ^ __ROR8__(v296, 19) ^ __ROL8__(v296, 3))\n           + v289\n           + v316\n           + ((v333 >> 7) ^ __ROR8__(v333, 1) ^ __ROR8__(v333, 8));\n      v230 = (v221 ^ v228 & (v224 ^ v221))\n           + v299\n           - 0x5BAF9314217D4217LL\n           + v218\n           + (__ROR8__(v228, 14) ^ __ROR8__(v228, 18) ^ __ROL8__(v228, 23));\n      v231 = v230 + v219;\n      v232 = v230\n           + (__ROL8__(v229, 25) ^ __ROR8__(v229, 28) ^ __ROL8__(v229, 30))\n           + (v229 & v226 | v222 & (v229 | v226));\n      v314 = ((v311 >> 6) ^ __ROR8__(v311, 19) ^ __ROL8__(v311, 3))\n           + v322\n           + v333\n           + ((v313 >> 7) ^ __ROR8__(v313, 1) ^ __ROR8__(v313, 8));\n      v233 = (v224 ^ v231 & (v228 ^ v224))\n           + v314\n           - 0x41065C084D3986EBLL\n           + v221\n           + (__ROR8__(v231, 14) ^ __ROR8__(v231, 18) ^ __ROL8__(v231, 23));\n      v234 = v222 + v233;\n      v235 = v233\n           + (__ROL8__(v232, 25) ^ __ROR8__(v232, 28) ^ __ROL8__(v232, 30))\n           + (v232 & v229 | v226 & (v232 | v229));\n      v302 = ((v299 >> 6) ^ __ROR8__(v299, 19) ^ __ROL8__(v299, 3))\n           + v287\n           + v225\n           + ((v177 >> 7) ^ __ROR8__(v177, 1) ^ __ROR8__(v177, 8));\n      v236 = (v228 ^ (v222 + v233) & (v231 ^ v228))\n           + v302\n           - 0x398E870D1C8DACD5LL\n           + v224\n           + (__ROR8__(v234, 14) ^ __ROR8__(v222 + v233, 18) ^ __ROL8__(v234, 23));\n      v237 = v226 + v236;\n      v238 = v236\n           + (__ROL8__(v235, 25) ^ __ROR8__(v235, 28) ^ __ROL8__(v235, 30))\n           + (v235 & v232 | v229 & (v235 | v232));\n      v337 = v292\n           + ((v318 >> 7) ^ __ROR8__(v318, 1) ^ __ROR8__(v318, 8))\n           + v177\n           + ((v314 >> 6) ^ __ROR8__(v314, 19) ^ __ROL8__(v314, 3));\n      v239 = (v231 ^ (v226 + v236) & (v234 ^ v231))\n           + v337\n           - 0x35D8C13115D99E64LL\n           + v228\n           + (__ROR8__(v237, 14) ^ __ROR8__(v237, 18) ^ __ROL8__(v237, 23));\n      v240 = v239 + v229;\n      v241 = v239\n           + (__ROL8__(v238, 25) ^ __ROR8__(v238, 28) ^ __ROL8__(v238, 30))\n           + (v238 & v235 | v232 & (v238 | v235));\n      v338 = v294\n           + v318\n           + ((v308 >> 7) ^ __ROR8__(v308, 1) ^ __ROR8__(v308, 8))\n           + ((v302 >> 6) ^ __ROR8__(v302, 19) ^ __ROL8__(v302, 3));\n      v242 = (v234 ^ v240 & ((v226 + v236) ^ v234))\n           + v338\n           - 0x2E794738DE3F3DF9LL\n           + v231\n           + (__ROR8__(v240, 14) ^ __ROR8__(v240, 18) ^ __ROL8__(v240, 23));\n      v243 = v242 + v232;\n      v244 = v242\n           + (__ROL8__(v241, 25) ^ __ROR8__(v241, 28) ^ __ROL8__(v241, 30))\n           + (v241 & v238 | v235 & (v241 | v238));\n      v339 = v296\n           + v308\n           + ((v320 >> 7) ^ __ROR8__(v320, 1) ^ __ROR8__(v320, 8))\n           + ((v337 >> 6) ^ __ROR8__(v337, 19) ^ __ROL8__(v337, 3));\n      v245 = (v237 ^ v243 & (v240 ^ v237))\n           + v339\n           - 0x15258229321F14E2LL\n           + v234\n           + (__ROR8__(v243, 14) ^ __ROR8__(v243, 18) ^ __ROL8__(v243, 23));\n      v246 = v245 + v235;\n      v247 = v245\n           + (__ROL8__(v244, 25) ^ __ROR8__(v244, 28) ^ __ROL8__(v244, 30))\n           + (v244 & v241 | v238 & (v244 | v241));\n      v340 = v311\n           + v320\n           + ((v324 >> 7) ^ __ROR8__(v324, 1) ^ __ROR8__(v324, 8))\n           + ((v338 >> 6) ^ __ROR8__(v338, 19) ^ __ROL8__(v338, 3));\n      v248 = (v240 ^ v246 & (v243 ^ v240))\n           + v340\n           - 0xA82B08011912E88LL\n           + v237\n           + (__ROR8__(v246, 14) ^ __ROR8__(v246, 18) ^ __ROL8__(v246, 23));\n      v249 = v248 + v238;\n      v250 = v248\n           + (__ROL8__(v247, 25) ^ __ROR8__(v247, 28) ^ __ROL8__(v247, 30))\n           + (v247 & v244 | v241 & (v247 | v244));\n      v341 = ((v305 >> 7) ^ __ROR8__(v305, 1) ^ __ROR8__(v305, 8))\n           + v324\n           + v299\n           + ((v339 >> 6) ^ __ROR8__(v339, 19) ^ __ROL8__(v339, 3));\n      v251 = (v243 ^ v249 & (v246 ^ v243))\n           + v341\n           + 0x6F067AA72176FBALL\n           + v240\n           + (__ROR8__(v249, 14) ^ __ROR8__(v249, 18) ^ __ROL8__(v249, 23));\n      v252 = v251 + v241;\n      v253 = v251\n           + (__ROL8__(v250, 25) ^ __ROR8__(v250, 28) ^ __ROL8__(v250, 30))\n           + (v250 & v247 | v244 & (v250 | v247));\n      v342 = v314\n           + v305\n           + ((v289 >> 7) ^ __ROR8__(v289, 1) ^ __ROR8__(v289, 8))\n           + ((v340 >> 6) ^ __ROR8__(v340, 19) ^ __ROL8__(v340, 3));\n      v254 = (v246 ^ v252 & (v249 ^ v246))\n           + v342\n           + 0xA637DC5A2C898A6LL\n           + v243\n           + (__ROR8__(v252, 14) ^ __ROR8__(v252, 18) ^ __ROL8__(v252, 23));\n      v255 = v254 + v244;\n      v256 = v254\n           + (__ROL8__(v253, 25) ^ __ROR8__(v253, 28) ^ __ROL8__(v253, 30))\n           + (v253 & v250 | v247 & (v253 | v250));\n      v343 = ((v341 >> 6) ^ __ROR8__(v341, 19) ^ __ROL8__(v341, 3))\n           + v302\n           + v289\n           + ((v322 >> 7) ^ __ROR8__(v322, 1) ^ __ROR8__(v322, 8));\n      v257 = (v249 ^ v255 & (v252 ^ v249))\n           + v343\n           + 0x113F9804BEF90DAELL\n           + v246\n           + (__ROR8__(v255, 14) ^ __ROR8__(v255, 18) ^ __ROL8__(v255, 23));\n      v258 = v257 + v247;\n      v259 = v257\n           + (__ROL8__(v256, 25) ^ __ROR8__(v256, 28) ^ __ROL8__(v256, 30))\n           + (v256 & v253 | v250 & (v256 | v253));\n      v344 = ((v342 >> 6) ^ __ROR8__(v342, 19) ^ __ROL8__(v342, 3))\n           + v337\n           + v322\n           + ((v287 >> 7) ^ __ROR8__(v287, 1) ^ __ROR8__(v287, 8));\n      v260 = (v252 ^ v258 & (v255 ^ v252))\n           + v344\n           + 0x1B710B35131C471BLL\n           + v249\n           + (__ROL8__(v258, 23) ^ __ROR8__(v258, 14) ^ __ROR8__(v258, 18));\n      v261 = v250 + v260;\n      v262 = (__ROL8__(v259, 25) ^ __ROR8__(v259, 28) ^ __ROL8__(v259, 30))\n           + (v259 & v256 | v253 & (v259 | v256))\n           + v260;\n      v345 = v287\n           + ((v292 >> 7) ^ __ROR8__(v292, 1) ^ __ROR8__(v292, 8))\n           + v338\n           + ((v343 >> 6) ^ __ROR8__(v343, 19) ^ __ROL8__(v343, 3));\n      v263 = (v255 ^ v261 & (v258 ^ v255))\n           + v345\n           + 0x28DB77F523047D84LL\n           + v252\n           + (__ROR8__(v261, 14) ^ __ROR8__(v261, 18) ^ __ROL8__(v261, 23));\n      v264 = v263 + v253;\n      v265 = v263\n           + (__ROL8__(v262, 25) ^ __ROR8__(v262, 28) ^ __ROL8__(v262, 30))\n           + (v262 & v259 | v256 & (v262 | v259));\n      v346 = v339\n           + v292\n           + ((v294 >> 7) ^ __ROR8__(v294, 1) ^ __ROR8__(v294, 8))\n           + ((v344 >> 6) ^ __ROR8__(v344, 19) ^ __ROL8__(v344, 3));\n      v266 = (v258 ^ v264 & (v261 ^ v258))\n           + v346\n           + 0x32CAAB7B40C72493LL\n           + v255\n           + (__ROR8__(v264, 14) ^ __ROR8__(v264, 18) ^ __ROL8__(v264, 23));\n      v267 = v266 + v256;\n      v268 = v266\n           + (__ROL8__(v265, 25) ^ __ROR8__(v265, 28) ^ __ROL8__(v265, 30))\n           + (v265 & v262 | v259 & (v265 | v262));\n      v347 = v340\n           + v294\n           + ((v296 >> 7) ^ __ROR8__(v296, 1) ^ __ROR8__(v296, 8))\n           + ((v345 >> 6) ^ __ROR8__(v345, 19) ^ __ROL8__(v345, 3));\n      v269 = (v261 ^ v267 & (v264 ^ v261))\n           + v347\n           + 0x3C9EBE0A15C9BEBCLL\n           + v258\n           + (__ROL8__(v267, 23) ^ __ROR8__(v267, 14) ^ __ROR8__(v267, 18));\n      v270 = v269 + v259;\n      v271 = (__ROL8__(v268, 25) ^ __ROR8__(v268, 28) ^ __ROL8__(v268, 30))\n           + (v268 & v265 | v262 & (v268 | v265))\n           + v269;\n      v348 = v341\n           + v296\n           + ((v311 >> 7) ^ __ROR8__(v311, 1) ^ __ROR8__(v311, 8))\n           + ((v346 >> 6) ^ __ROR8__(v346, 19) ^ __ROL8__(v346, 3));\n      v272 = (v264 ^ v270 & (v267 ^ v264))\n           + v348\n           + 0x431D67C49C100D4CLL\n           + v261\n           + (__ROL8__(v270, 23) ^ __ROR8__(v270, 14) ^ __ROR8__(v270, 18));\n      v273 = v272 + v262;\n      v274 = (__ROL8__(v271, 25) ^ __ROR8__(v271, 28) ^ __ROL8__(v271, 30))\n           + (v271 & v268 | v265 & (v271 | v268))\n           + v272;\n      v349 = v311\n           + ((v299 >> 7) ^ __ROR8__(v299, 1) ^ __ROR8__(v299, 8))\n           + v342\n           + ((v347 >> 6) ^ __ROR8__(v347, 19) ^ __ROL8__(v347, 3));\n      v275 = (v267 ^ v273 & (v270 ^ v267))\n           + v349\n           + 0x4CC5D4BECB3E42B6LL\n           + v264\n           + (__ROL8__(v273, 23) ^ __ROR8__(v273, 14) ^ __ROR8__(v273, 18));\n      v276 = v275 + v265;\n      v277 = (__ROL8__(v274, 25) ^ __ROR8__(v274, 28) ^ __ROL8__(v274, 30))\n           + (v274 & v271 | v268 & (v274 | v271))\n           + v275;\n      v350 = v343\n           + v299\n           + ((v314 >> 7) ^ __ROR8__(v314, 1) ^ __ROR8__(v314, 8))\n           + (__ROR8__(v348, 19) ^ __ROL8__(v348, 3) ^ (v348 >> 6));\n      v278 = (v270 ^ v276 & (v273 ^ v270))\n           + v350\n           + 0x597F299CFC657E2ALL\n           + v267\n           + (__ROL8__(v276, 23) ^ __ROR8__(v276, 14) ^ __ROR8__(v276, 18));\n      v279 = v278 + v268;\n      v280 = (__ROL8__(v277, 25) ^ __ROR8__(v277, 28) ^ __ROL8__(v277, 30))\n           + (v277 & v274 | v271 & (v277 | v274))\n           + v278;\n      v351 = ((v349 >> 6) ^ __ROR8__(v349, 19) ^ __ROL8__(v349, 3))\n           + v314\n           + ((v302 >> 7) ^ __ROR8__(v302, 1) ^ __ROR8__(v302, 8))\n           + v344;\n      v281 = v351\n           + 0x5FCB6FAB3AD6FAECLL\n           + v270\n           + (v273 ^ v279 & (v276 ^ v273))\n           + (__ROL8__(v279, 23) ^ __ROR8__(v279, 14) ^ __ROR8__(v279, 18));\n      v282 = v281 + v271;\n      v283 = (__ROL8__(v280, 25) ^ __ROR8__(v280, 28) ^ __ROL8__(v280, 30))\n           + (v280 & v277 | v274 & (v280 | v277))\n           + v281;\n      v326 += v283;\n      v352 = ((v350 >> 6) ^ __ROR8__(v350, 19) ^ __ROL8__(v350, 3))\n           + v302\n           + ((v337 >> 7) ^ __ROR8__(v337, 1) ^ __ROR8__(v337, 8))\n           + v345;\n      v284 = (v276 ^ v282 & (v279 ^ v276))\n           + v352\n           + 0x6C44198C4A475817LL\n           + v273\n           + (__ROL8__(v282, 23) ^ __ROR8__(v282, 14) ^ __ROR8__(v282, 18));\n      v334 += (v283 & v280 | v277 & (v283 | v280))\n            + (__ROL8__(v283, 25) ^ __ROR8__(v283, 28) ^ __ROL8__(v283, 30))\n            + v284;\n      *a3 = v334;\n      v10 = v326;\n      a3[1] = v326;\n      v327 += v280;\n      v6 = v327;\n      v328 += v277;\n      v7 = v328;\n      v329 += v284 + v274;\n      v14 = v329;\n      result = v334;\n      v330 += v282;\n      v15 = v330;\n      v331 += v279;\n      v16 = v331;\n      v332 += v276;\n      v13 = v332;\n      a3[2] = v327;\n      a3[3] = v328;\n      a3[4] = v329;\n      a3[5] = v330;\n      a3[6] = v331;\n      a3[7] = v332;\n    }\n    while ( v325 < v335 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406ED0",
            "funcStartAddr": "0x406ed0",
            "funcEndAddr": "0x406ff5",
            "decompiledFuncCode": "__int64 __fastcall sub_406ED0(__int64 *a1)\n{\n  unsigned __int64 v1; // rcx\n  __int64 v2; // rax\n  __int64 v3; // rbp\n  bool v4; // cf\n  unsigned __int64 v5; // rdx\n\n  v1 = a1[10];\n  v2 = a1[9];\n  v3 = (-(__int64)(v1 < 0x70) & 0xFFFFFFFFFFFFFF80LL) + 256;\n  v4 = __CFADD__(a1[8], v1);\n  v5 = a1[8] + v1;\n  a1[8] = v5;\n  if ( v4 )\n    a1[9] = ++v2;\n  a1[(-(__int64)(v1 < 0x70) & 0xFFFFFFFFFFFFFFF0LL) + 41] = _byteswap_uint64((v5 >> 61) | (8 * v2));\n  a1[(-(__int64)(v1 < 0x70) & 0xFFFFFFFFFFFFFFF0LL) + 42] = ((8 * v5) >> 40) & 0xFF00 | ((8 * v5) >> 24) & 0xFF0000 | ((8 * v5) >> 8) & 0xFF000000 | ((8 * v5) >> 56) | (v5 << 11) & 0xFF00000000LL | (v5 << 59) | (v5 << 27) & 0xFF0000000000LL | (v5 << 43) & 0xFF000000000000LL;\n  memcpy((char *)a1 + v1 + 88, &unk_40C260, v3 - v1 - 16);\n  return sub_403280((unsigned __int64)(a1 + 11), v3, a1);\n}\n"
        },
        {
            "funcName": "sub_407000",
            "funcStartAddr": "0x407000",
            "funcEndAddr": "0x407022",
            "decompiledFuncCode": "__int64 __fastcall sub_407000(__int64 *a1, __int64 a2)\n{\n  sub_406ED0(a1);\n  return sub_403240((__int64)a1, a2);\n}\n"
        },
        {
            "funcName": "sub_407030",
            "funcStartAddr": "0x407030",
            "funcEndAddr": "0x407052",
            "decompiledFuncCode": "__int64 __fastcall sub_407030(__int64 *a1, __int64 a2)\n{\n  sub_406ED0(a1);\n  return sub_403260((__int64)a1, a2);\n}\n"
        },
        {
            "funcName": "sub_407060",
            "funcStartAddr": "0x407060",
            "funcEndAddr": "0x40736e",
            "decompiledFuncCode": "void __fastcall sub_407060(const __m128i *src, size_t n, __int64 a3)\n{\n  unsigned __int64 v3; // r13\n  const __m128i *v5; // rbx\n  __int64 v6; // rbp\n  __m128i *v7; // rbp\n  const __m128i *v8; // r14\n  __m128i v9; // xmm0\n  __int64 v10; // rdx\n  char *v11; // rsi\n  size_t v12; // r13\n  unsigned __int64 v13; // rbp\n  unsigned __int64 v14; // rdi\n  unsigned __int64 v15; // r15\n  size_t v16; // r14\n  unsigned __int64 v17; // rsi\n  char *v18; // rdi\n  unsigned int v19; // ecx\n  unsigned __int64 v20; // rbp\n  _QWORD *v21; // rsi\n  __int64 v22; // rcx\n\n  v3 = n;\n  v5 = src;\n  v6 = *(_QWORD *)(a3 + 80);\n  if ( v6 )\n  {\n    v15 = a3 + 88;\n    v16 = 256 - v6;\n    if ( 256 - v6 > n )\n      v16 = n;\n    memcpy((void *)(a3 + 88 + v6), src, v16);\n    v17 = v16 + *(_QWORD *)(a3 + 80);\n    *(_QWORD *)(a3 + 80) = v17;\n    if ( v17 > 0x80 )\n    {\n      sub_403280(v15, v17 & 0xFFFFFFFFFFFFFF80LL, (__int64 *)a3);\n      v20 = (v16 + v6) & 0xFFFFFFFFFFFFFF80LL;\n      v21 = (_QWORD *)(v15 + v20);\n      v22 = *(_QWORD *)(a3 + 80) & 0x7FLL;\n      *(_QWORD *)(a3 + 80) = v22;\n      if ( (unsigned int)v22 >= 8 )\n      {\n        *(_QWORD *)(a3 + 88) = *v21;\n        *(_QWORD *)(v15 + (unsigned int)v22 - 8) = *(_QWORD *)((char *)v21 + (unsigned int)v22 - 8);\n        qmemcpy(\n          (void *)((a3 + 96) & 0xFFFFFFFFFFFFFFF8LL),\n          (const void *)(v20 + ((a3 + 96) & 0xFFFFFFFFFFFFFFF8LL)),\n          8LL * (((unsigned int)v15 - (((_DWORD)a3 + 96) & 0xFFFFFFF8) + (unsigned int)v22) >> 3));\n      }\n      else if ( (v22 & 4) != 0 )\n      {\n        *(_DWORD *)(a3 + 88) = *(_DWORD *)v21;\n        *(_DWORD *)(v15 + (unsigned int)v22 - 4) = *(_DWORD *)((char *)v21 + (unsigned int)v22 - 4);\n      }\n      else if ( (_DWORD)v22 )\n      {\n        *(_BYTE *)(a3 + 88) = *(_BYTE *)v21;\n        if ( (v22 & 2) != 0 )\n          *(_WORD *)(v15 + (unsigned int)v22 - 2) = *(_WORD *)((char *)v21 + (unsigned int)v22 - 2);\n      }\n    }\n    v5 = (const __m128i *)((char *)src + v16);\n    v3 -= v16;\n  }\n  if ( v3 > 0x7F )\n  {\n    if ( ((unsigned __int8)v5 & 7) != 0 )\n    {\n      v7 = (__m128i *)(a3 + 88);\n      if ( v3 == 128 )\n      {\n        v8 = v5;\n      }\n      else\n      {\n        v8 = &v5[8 * ((v3 - 129) >> 7) + 8];\n        do\n        {\n          v9 = _mm_loadu_si128(v5);\n          v5 += 8;\n          *v7 = v9;\n          *(__m128i *)(a3 + 104) = _mm_loadu_si128(v5 - 7);\n          *(__m128i *)(a3 + 120) = _mm_loadu_si128(v5 - 6);\n          *(__m128i *)(a3 + 136) = _mm_loadu_si128(v5 - 5);\n          *(__m128i *)(a3 + 152) = _mm_loadu_si128(v5 - 4);\n          *(__m128i *)(a3 + 168) = _mm_loadu_si128(v5 - 3);\n          *(__m128i *)(a3 + 184) = _mm_loadu_si128(v5 - 2);\n          *(__m128i *)(a3 + 200) = _mm_loadu_si128(v5 - 1);\n          sub_403280(a3 + 88, 128LL, (__int64 *)a3);\n        }\n        while ( v5 != v8 );\n        v3 = v3 - ((v3 - 129) >> 7 << 7) - 128;\n      }\nLABEL_8:\n      v10 = *(_QWORD *)(a3 + 80);\n      v11 = &v7->m128i_i8[v10];\n      if ( (unsigned int)v3 >= 8 )\n      {\n        v18 = (char *)((unsigned __int64)(v11 + 8) & 0xFFFFFFFFFFFFFFF8LL);\n        *(_QWORD *)v11 = v8->m128i_i64[0];\n        *(_QWORD *)&v11[(unsigned int)v3 - 8] = *(__int64 *)((char *)&v8->m128i_i64[-1] + (unsigned int)v3);\n        v19 = v3 + (_DWORD)v11 - (_DWORD)v18;\n        v12 = v10 + v3;\n        qmemcpy(v18, (char *)v8 - (v11 - v18), 8LL * (v19 >> 3));\n        if ( v12 <= 0x7F )\n        {\nLABEL_14:\n          *(_QWORD *)(a3 + 80) = v12;\n          return;\n        }\n      }\n      else\n      {\n        if ( (v3 & 4) != 0 )\n        {\n          *(_DWORD *)v11 = v8->m128i_i32[0];\n          *(_DWORD *)&v11[(unsigned int)v3 - 4] = *(__int32 *)((char *)&v8->m128i_i32[-1] + (unsigned int)v3);\n        }\n        else if ( (_DWORD)v3 )\n        {\n          *v11 = v8->m128i_i8[0];\n          if ( (v3 & 2) != 0 )\n            *(_WORD *)&v11[(unsigned int)v3 - 2] = *(__int16 *)((char *)&v8->m128i_i16[-1] + (unsigned int)v3);\n        }\n        v12 = v10 + v3;\n        if ( v12 <= 0x7F )\n          goto LABEL_14;\n      }\n      v12 -= 128LL;\n      sub_403280((unsigned __int64)v7, 128LL, (__int64 *)a3);\n      memcpy(v7, (const void *)(a3 + 216), v12);\n      goto LABEL_14;\n    }\n    v13 = v3;\n    v14 = (unsigned __int64)v5;\n    v3 &= 0x7Fu;\n    v5 = (const __m128i *)((char *)v5 + (v13 & 0xFFFFFFFFFFFFFF80LL));\n    sub_403280(v14, v13 & 0xFFFFFFFFFFFFFF80LL, (__int64 *)a3);\n  }\n  if ( v3 )\n  {\n    v7 = (__m128i *)(a3 + 88);\n    v8 = v5;\n    goto LABEL_8;\n  }\n}\n"
        },
        {
            "funcName": "sub_407370",
            "funcStartAddr": "0x407370",
            "funcEndAddr": "0x407431",
            "decompiledFuncCode": "__int64 __fastcall sub_407370(const __m128i *a1, size_t a2, __int64 a3)\n{\n  __int64 v5[45]; // [rsp+0h] [rbp-168h] BYREF\n\n  v5[0] = 0x6A09E667F3BCC908LL;\n  v5[1] = 0xBB67AE8584CAA73BLL;\n  v5[2] = 0x3C6EF372FE94F82BLL;\n  v5[3] = 0xA54FF53A5F1D36F1LL;\n  v5[4] = 0x510E527FADE682D1LL;\n  v5[5] = 0x9B05688C2B3E6C1FLL;\n  v5[6] = 0x1F83D9ABFB41BD6BLL;\n  v5[7] = 0x5BE0CD19137E2179LL;\n  memset(&v5[8], 0, 24);\n  sub_407060(a1, a2, (__int64)v5);\n  sub_406ED0(v5);\n  return sub_403240((__int64)v5, a3);\n}\n"
        },
        {
            "funcName": "sub_407440",
            "funcStartAddr": "0x407440",
            "funcEndAddr": "0x407501",
            "decompiledFuncCode": "__int64 __fastcall sub_407440(const __m128i *a1, size_t a2, __int64 a3)\n{\n  __int64 v5[45]; // [rsp+0h] [rbp-168h] BYREF\n\n  v5[0] = 0xCBBB9D5DC1059ED8LL;\n  v5[1] = 0x629A292A367CD507LL;\n  v5[2] = 0x9159015A3070DD17LL;\n  v5[3] = 0x152FECD8F70E5939LL;\n  v5[4] = 0x67332667FFC00B31LL;\n  v5[5] = 0x8EB44A8768581511LL;\n  v5[6] = 0xDB0C2E0D64F98FA7LL;\n  v5[7] = 0x47B5481DBEFA4FA4LL;\n  memset(&v5[8], 0, 24);\n  sub_407060(a1, a2, (__int64)v5);\n  sub_406ED0(v5);\n  return sub_403260((__int64)v5, a3);\n}\n"
        },
        {
            "funcName": "sub_407510",
            "funcStartAddr": "0x407510",
            "funcEndAddr": "0x4076a5",
            "decompiledFuncCode": "__int64 __fastcall sub_407510(FILE *stream, __int64 a2)\n{\n  __m128i *v2; // rax\n  __m128i *v3; // r12\n  size_t v4; // rbx\n  int flags; // edx\n  size_t v6; // rax\n  __int64 v8[49]; // [rsp+0h] [rbp-188h] BYREF\n\n  v2 = (__m128i *)malloc(0x8048uLL);\n  if ( !v2 )\n    return 1LL;\n  v3 = v2;\n  v8[0] = 0x6A09E667F3BCC908LL;\n  v8[1] = 0xBB67AE8584CAA73BLL;\n  v8[2] = 0x3C6EF372FE94F82BLL;\n  v8[3] = 0xA54FF53A5F1D36F1LL;\n  v8[4] = 0x510E527FADE682D1LL;\n  v8[5] = 0x9B05688C2B3E6C1FLL;\n  v8[6] = 0x1F83D9ABFB41BD6BLL;\n  v8[7] = 0x5BE0CD19137E2179LL;\n  memset(&v8[8], 0, 24);\nLABEL_3:\n  v4 = 0LL;\n  while ( 1 )\n  {\n    v6 = fread_unlocked(&v3->m128i_i8[v4], 1uLL, 0x8000 - v4, stream);\n    v4 += v6;\n    if ( v4 == 0x8000 )\n    {\n      sub_403280((unsigned __int64)v3, 0x8000LL, v8);\n      goto LABEL_3;\n    }\n    flags = stream->_flags;\n    if ( !v6 )\n      break;\n    if ( (flags & 0x10) != 0 )\n      goto LABEL_9;\n  }\n  if ( (flags & 0x20) != 0 )\n  {\n    free(v3);\n    return 1LL;\n  }\nLABEL_9:\n  if ( v4 )\n    sub_407060(v3, v4, (__int64)v8);\n  sub_406ED0(v8);\n  sub_403240((__int64)v8, a2);\n  free(v3);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4076B0",
            "funcStartAddr": "0x4076b0",
            "funcEndAddr": "0x407845",
            "decompiledFuncCode": "__int64 __fastcall sub_4076B0(FILE *stream, __int64 a2)\n{\n  __m128i *v2; // rax\n  __m128i *v3; // r12\n  size_t v4; // rbx\n  int flags; // edx\n  size_t v6; // rax\n  __int64 v8[49]; // [rsp+0h] [rbp-188h] BYREF\n\n  v2 = (__m128i *)malloc(0x8048uLL);\n  if ( !v2 )\n    return 1LL;\n  v3 = v2;\n  v8[0] = 0xCBBB9D5DC1059ED8LL;\n  v8[1] = 0x629A292A367CD507LL;\n  v8[2] = 0x9159015A3070DD17LL;\n  v8[3] = 0x152FECD8F70E5939LL;\n  v8[4] = 0x67332667FFC00B31LL;\n  v8[5] = 0x8EB44A8768581511LL;\n  v8[6] = 0xDB0C2E0D64F98FA7LL;\n  v8[7] = 0x47B5481DBEFA4FA4LL;\n  memset(&v8[8], 0, 24);\nLABEL_3:\n  v4 = 0LL;\n  while ( 1 )\n  {\n    v6 = fread_unlocked(&v3->m128i_i8[v4], 1uLL, 0x8000 - v4, stream);\n    v4 += v6;\n    if ( v4 == 0x8000 )\n    {\n      sub_403280((unsigned __int64)v3, 0x8000LL, v8);\n      goto LABEL_3;\n    }\n    flags = stream->_flags;\n    if ( !v6 )\n      break;\n    if ( (flags & 0x10) != 0 )\n      goto LABEL_9;\n  }\n  if ( (flags & 0x20) != 0 )\n  {\n    free(v3);\n    return 1LL;\n  }\nLABEL_9:\n  if ( v4 )\n    sub_407060(v3, v4, (__int64)v8);\n  sub_406ED0(v8);\n  sub_403260((__int64)v8, a2);\n  free(v3);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_407860",
            "funcStartAddr": "0x407860",
            "funcEndAddr": "0x407881",
            "decompiledFuncCode": "void __fastcall sub_407860(FILE *a1, int a2)\n{\n  int v2; // eax\n\n  if ( a1 )\n  {\n    v2 = fileno(a1);\n    posix_fadvise(v2, 0LL, 0LL, a2);\n  }\n}\n"
        },
        {
            "funcName": "sub_407890",
            "funcStartAddr": "0x407890",
            "funcEndAddr": "0x407923",
            "decompiledFuncCode": "FILE *__fastcall sub_407890(const char *a1, const char *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  unsigned int v4; // eax\n  int v6; // r12d\n  int *v7; // rax\n  int v8; // ebp\n  int *v9; // rbx\n  int *v10; // rax\n  FILE *v11; // rdi\n  int v12; // r12d\n  int *v13; // rbp\n\n  v2 = fopen(a1, a2);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = fileno(v2);\n    if ( v4 <= 2 )\n    {\n      v6 = sub_409570(v4);\n      if ( v6 < 0 )\n      {\n        v10 = __errno_location();\n        v11 = v3;\n        v3 = 0LL;\n        v12 = *v10;\n        v13 = v10;\n        sub_409DB0(v11);\n        *v13 = v12;\n      }\n      else if ( (unsigned int)sub_409DB0(v3) || (v3 = fdopen(v6, a2)) == 0LL )\n      {\n        v7 = __errno_location();\n        v8 = *v7;\n        v9 = v7;\n        close(v6);\n        *v9 = v8;\n        return 0LL;\n      }\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_407930",
            "funcStartAddr": "0x407930",
            "funcEndAddr": "0x4079c9",
            "decompiledFuncCode": "char *__fastcall sub_407930(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60F308 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4079D0",
            "funcStartAddr": "0x4079d0",
            "funcEndAddr": "0x407ac2",
            "decompiledFuncCode": "char *__fastcall sub_4079D0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40AF20();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40C331;\n      if ( !v5 )\n        return (char *)&unk_40C326;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40C32D;\n    if ( !v5 )\n      return (char *)&unk_40C32A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_407AD0",
            "funcStartAddr": "0x401920",
            "funcEndAddr": "0x401925",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407AD0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_407AD0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_407AD0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40ADE0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_407AD0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4079D0(\"`\", a5);\n        v51 = sub_4079D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_407AD0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_407AD0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_407AD0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40ADE0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_407AD0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4079D0(\"`\", a5);\n        v51 = sub_4079D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_407AD0",
            "funcStartAddr": "0x401920",
            "funcEndAddr": "0x401925",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407AD0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_407AD0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_407AD0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40ADE0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_407AD0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4079D0(\"`\", a5);\n        v51 = sub_4079D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_407AD0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_407AD0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_407AD0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40ADE0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_407AD0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4079D0(\"`\", a5);\n        v51 = sub_4079D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_408D00",
            "funcStartAddr": "0x401925",
            "funcEndAddr": "0x40192a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408D00(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_409D70();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60F280 )\n    {\n      v7 = (__m128i *)sub_409B80(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60F280);\n    }\n    else\n    {\n      ptr = (void *)sub_409B80(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60F290], 0, 16LL * (a1 + 1 - dword_60F290));\n    dword_60F290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407AD0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409B20(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407AD0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_408D00(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_409D70();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60F280 )\n    {\n      v7 = (__m128i *)sub_409B80(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60F280);\n    }\n    else\n    {\n      ptr = (void *)sub_409B80(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60F290], 0, 16LL * (a1 + 1 - dword_60F290));\n    dword_60F290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407AD0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409B20(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407AD0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_408D00",
            "funcStartAddr": "0x401925",
            "funcEndAddr": "0x40192a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408D00(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_409D70();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60F280 )\n    {\n      v7 = (__m128i *)sub_409B80(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60F280);\n    }\n    else\n    {\n      ptr = (void *)sub_409B80(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60F290], 0, 16LL * (a1 + 1 - dword_60F290));\n    dword_60F290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407AD0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409B20(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407AD0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_408D00(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_409D70();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60F280 )\n    {\n      v7 = (__m128i *)sub_409B80(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60F280);\n    }\n    else\n    {\n      ptr = (void *)sub_409B80(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60F290], 0, 16LL * (a1 + 1 - dword_60F290));\n    dword_60F290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407AD0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409B20(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407AD0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_408EA0",
            "funcStartAddr": "0x408ea0",
            "funcEndAddr": "0x408ed4",
            "decompiledFuncCode": "__int64 __fastcall sub_408EA0(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_60F420;\n  result = sub_409D20(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408F90",
            "funcStartAddr": "0x408f90",
            "funcEndAddr": "0x409002",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_408F90(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_60F420;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_407AD0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409010",
            "funcStartAddr": "0x409010",
            "funcEndAddr": "0x4090f1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409010(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_60F420;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_407AD0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_409B20(v11 + 1);\n  sub_407AD0(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_409110",
            "funcStartAddr": "0x409110",
            "funcEndAddr": "0x4091a5",
            "decompiledFuncCode": "void sub_409110()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_60F290 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_60F290 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_60F320 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_60F280 = 256LL;\n    *((_QWORD *)&xmmword_60F280 + 1) = &unk_60F320;\n  }\n  if ( v0 != &xmmword_60F280 )\n  {\n    free(v0);\n    ptr = &xmmword_60F280;\n  }\n  dword_60F290 = 1;\n}\n"
        },
        {
            "funcName": "sub_409220",
            "funcStartAddr": "0x40192a",
            "funcEndAddr": "0x40192f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409220(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_409220(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_409220",
            "funcStartAddr": "0x40192a",
            "funcEndAddr": "0x40192f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409220(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_409220(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_409290",
            "funcStartAddr": "0x40192f",
            "funcEndAddr": "0x401934",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409290(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_409290(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_409290",
            "funcStartAddr": "0x40192f",
            "funcEndAddr": "0x401934",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409290(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_409290(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_409320",
            "funcStartAddr": "0x409320",
            "funcEndAddr": "0x409390",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409320(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_60F450;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F420);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F430);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F440);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_408D00(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4093A0",
            "funcStartAddr": "0x4093a0",
            "funcEndAddr": "0x4093b1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4093A0(__int64 a1)\n{\n  return sub_409320(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_4093D0",
            "funcStartAddr": "0x401934",
            "funcEndAddr": "0x401939",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4093D0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4093D0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4093D0",
            "funcStartAddr": "0x401934",
            "funcEndAddr": "0x401939",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4093D0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4093D0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_409440",
            "funcStartAddr": "0x409440",
            "funcEndAddr": "0x4094ac",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409440(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F420);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F430);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_60F440);\n  v8 = qword_60F450;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_408D00(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_409570",
            "funcStartAddr": "0x409570",
            "funcEndAddr": "0x40957e",
            "decompiledFuncCode": "__int64 __fastcall sub_409570(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6, char a7)\n{\n  return sub_409E30(a1, 0, 3, a4, a5, a6, a7);\n}\n"
        },
        {
            "funcName": "sub_409580",
            "funcStartAddr": "0x401939",
            "funcEndAddr": "0x40193e",
            "decompiledFuncCode": "__int64 __fastcall sub_409580(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_409580(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_409580",
            "funcStartAddr": "0x401939",
            "funcEndAddr": "0x40193e",
            "decompiledFuncCode": "__int64 __fastcall sub_409580(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_409580(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_409980",
            "funcStartAddr": "0x409980",
            "funcEndAddr": "0x4099e0",
            "decompiledFuncCode": "__int64 __fastcall sub_409980(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_409580(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_409580(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_4099E0",
            "funcStartAddr": "0x4099e0",
            "funcEndAddr": "0x409a9c",
            "decompiledFuncCode": "__int64 __fastcall sub_4099E0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_409580(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_409580(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_409AA0",
            "funcStartAddr": "0x409aa0",
            "funcEndAddr": "0x409b14",
            "decompiledFuncCode": "int sub_409AA0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_40B5F2, \"https://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_409B20",
            "funcStartAddr": "0x409b20",
            "funcEndAddr": "0x409b3a",
            "decompiledFuncCode": "void *__fastcall sub_409B20(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_409D70();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409B70",
            "funcStartAddr": "0x409b70",
            "funcEndAddr": "0x409b72",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_409B70(size_t a1)\n{\n  return sub_409B20(a1);\n}\n"
        },
        {
            "funcName": "sub_409B80",
            "funcStartAddr": "0x409b80",
            "funcEndAddr": "0x409bb6",
            "decompiledFuncCode": "void *__fastcall sub_409B80(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_409D70();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409CD0",
            "funcStartAddr": "0x409cd0",
            "funcEndAddr": "0x409ce7",
            "decompiledFuncCode": "void *__fastcall sub_409CD0(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_409B20(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_409CF0",
            "funcStartAddr": "0x409cf0",
            "funcEndAddr": "0x409d1e",
            "decompiledFuncCode": "__int64 __fastcall sub_409CF0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_409D70(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_409D20",
            "funcStartAddr": "0x409d20",
            "funcEndAddr": "0x409d48",
            "decompiledFuncCode": "void *__fastcall sub_409D20(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_409B20(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_409D50",
            "funcStartAddr": "0x409d50",
            "funcEndAddr": "0x409d63",
            "decompiledFuncCode": "void *__fastcall sub_409D50(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_409D20(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_409D70",
            "funcStartAddr": "0x409d70",
            "funcEndAddr": "0x409da1",
            "decompiledFuncCode": "void __noreturn sub_409D70()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_409DB0",
            "funcStartAddr": "0x409db0",
            "funcEndAddr": "0x409e2b",
            "decompiledFuncCode": "int __fastcall sub_409DB0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_409F70(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409E30",
            "funcStartAddr": "0x409e30",
            "funcEndAddr": "0x409f65",
            "decompiledFuncCode": "__int64 __fastcall sub_409E30(int a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ebx\n  int v8; // eax\n  int *v9; // rax\n  int v10; // edi\n  int v11; // r12d\n  int *v12; // rbp\n  int v13; // ecx\n  int v14; // r8d\n  int v15; // r9d\n  int v16; // [rsp+30h] [rbp-38h]\n\n  v16 = a3;\n  if ( a2 == 1030 )\n  {\n    if ( dword_60F458 < 0 )\n    {\n      v6 = sub_409E30(a1, 0, a3, a4, a5, a6);\n      if ( v6 >= 0 && dword_60F458 == -1 )\n      {\nLABEL_8:\n        v8 = fcntl(v6, 1);\n        if ( v8 < 0 || fcntl(v6, 2, v8 | 1u) == -1 )\n        {\n          v9 = __errno_location();\n          v10 = v6;\n          v6 = -1;\n          v11 = *v9;\n          v12 = v9;\n          close(v10);\n          *v12 = v11;\n        }\n      }\n    }\n    else\n    {\n      v6 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v6 < 0 && *__errno_location() == 22 )\n      {\n        v6 = sub_409E30(a1, 0, v16, v13, v14, v15);\n        if ( v6 >= 0 )\n        {\n          dword_60F458 = -1;\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        dword_60F458 = 1;\n      }\n    }\n    return (unsigned int)v6;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "sub_409F70",
            "funcStartAddr": "0x409f70",
            "funcEndAddr": "0x409fb0",
            "decompiledFuncCode": "int __fastcall sub_409F70(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_409FB0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_409FB0",
            "funcStartAddr": "0x409fb0",
            "funcEndAddr": "0x40a007",
            "decompiledFuncCode": "int __fastcall sub_409FB0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40A010",
            "funcStartAddr": "0x40a010",
            "funcEndAddr": "0x40a0ef",
            "decompiledFuncCode": "__int64 __fastcall sub_40A010(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A0F0",
            "funcStartAddr": "0x40a0f0",
            "funcEndAddr": "0x40a70c",
            "decompiledFuncCode": "__int64 __fastcall sub_40A0F0(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v46 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = a4;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A710",
            "funcStartAddr": "0x40a710",
            "funcEndAddr": "0x40acd6",
            "decompiledFuncCode": "__int64 __fastcall sub_40A710(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_40A010((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_40A010((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_40A0F0(a1, a2, v12, a4, a5, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_40A0F0(a1, a2, v12, a4, a5, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_40A0F0(a1, a2, v12, a4, a5, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_40ACE0",
            "funcStartAddr": "0x40ace0",
            "funcEndAddr": "0x40ad36",
            "decompiledFuncCode": "__int64 __fastcall sub_40ACE0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_60F460 = dword_60F29C;\n  dword_60F464 = dword_60F298;\n  result = sub_40A710(a1, a2, a3, a4, a5, a6, &dword_60F460, a7);\n  dword_60F29C = dword_60F460;\n  qword_60F4A0 = qword_60F470;\n  dword_60F294 = dword_60F468;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40AD40",
            "funcStartAddr": "0x40ad40",
            "funcEndAddr": "0x40ad58",
            "decompiledFuncCode": "__int64 __fastcall sub_40AD40(int a1, __int64 *a2, const char *a3)\n{\n  return sub_40ACE0(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_40AD60",
            "funcStartAddr": "0x40ad60",
            "funcEndAddr": "0x40ad73",
            "decompiledFuncCode": "__int64 __fastcall sub_40AD60(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40ACE0(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_40AD80",
            "funcStartAddr": "0x40ad80",
            "funcEndAddr": "0x40ad95",
            "decompiledFuncCode": "__int64 __fastcall sub_40AD80(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40A710(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40ADA0",
            "funcStartAddr": "0x40ada0",
            "funcEndAddr": "0x40adb6",
            "decompiledFuncCode": "__int64 __fastcall sub_40ADA0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40ACE0(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_40ADC0",
            "funcStartAddr": "0x40adc0",
            "funcEndAddr": "0x40add8",
            "decompiledFuncCode": "__int64 __fastcall sub_40ADC0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40A710(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40ADE0",
            "funcStartAddr": "0x40ade0",
            "funcEndAddr": "0x40ae5a",
            "decompiledFuncCode": "size_t __fastcall sub_40ADE0(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_40AEC0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40AE60",
            "funcStartAddr": "0x40ae60",
            "funcEndAddr": "0x40aebd",
            "decompiledFuncCode": "int __fastcall sub_40AE60(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_409DB0(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n    return -1;\n  }\n  if ( !result )\n    return result;\n  if ( v1 )\n    return -1;\n  return -(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_40AEC0",
            "funcStartAddr": "0x40aec0",
            "funcEndAddr": "0x40af1e",
            "decompiledFuncCode": "bool __fastcall sub_40AEC0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40AF20",
            "funcStartAddr": "0x40af20",
            "funcEndAddr": "0x40b482",
            "decompiledFuncCode": "const char *sub_40AF20()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_409DB0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_409DB0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40B500",
            "funcStartAddr": "0x40b500",
            "funcEndAddr": "0x40b518",
            "decompiledFuncCode": "int __fastcall sub_40B500(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_60F208 )\n    v1 = (void *)qword_60F208;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_40B518",
            "funcStartAddr": "0x40b518",
            "funcEndAddr": "0x40b538",
            "decompiledFuncCode": "__int64 __fastcall sub_40B518(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_60EE30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 79
}