{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_printf.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x4017a0",
            "funcEndAddr": "0x40250d",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  long double v3; // fst7\n  int v4; // ebp\n  char **v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rsi\n  char **v8; // r14\n  int v9; // r13d\n  unsigned __int8 *v10; // r12\n  unsigned __int8 *v11; // r15\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned __int8 *v14; // rbx\n  int v15; // eax\n  int v16; // eax\n  __int64 v17; // rbx\n  char *v18; // rax\n  unsigned int v19; // r12d\n  int v21; // ebp\n  FILE *v22; // rbp\n  const char *v23; // rax\n  char *v24; // rbp\n  int i; // esi\n  char *v26; // rax\n  char *v27; // rax\n  char *IO_write_ptr; // rax\n  char v29; // r11\n  char v30; // dl\n  char v31; // r10\n  char v32; // al\n  char v33; // di\n  char v34; // r9\n  char v35; // si\n  char v36; // r8\n  __int64 v37; // rcx\n  __int64 v38; // rsi\n  char *v39; // rdx\n  __int64 v40; // rax\n  __int64 v41; // rcx\n  const char *v42; // r8\n  char v43; // cl\n  char *v44; // rdi\n  _BYTE *v45; // rax\n  const char *v46; // r13\n  __int64 v47; // rdi\n  const char *v48; // r9\n  __int64 v49; // rax\n  _BOOL8 v50; // rcx\n  void *v51; // rax\n  _BYTE *v52; // rax\n  unsigned int v53; // edx\n  int v54; // r9d\n  _BOOL4 v55; // ecx\n  int v56; // r8d\n  _BYTE *v57; // rax\n  int v58; // eax\n  int v59; // edx\n  int v60; // ecx\n  int v61; // edx\n  int v62; // ebp\n  __int16 v63; // ax\n  __int64 v64; // r15\n  unsigned __int8 *v65; // rax\n  char *v66; // rcx\n  __int64 v67; // rax\n  int v68; // ecx\n  char *v69; // rax\n  char *v70; // rax\n  char *v71; // rax\n  __int64 v72; // rbx\n  char *v73; // rax\n  char *v74; // rax\n  long double v75; // [rsp+0h] [rbp-1C8h]\n  long double v76; // [rsp+0h] [rbp-1C8h]\n  char v77; // [rsp+10h] [rbp-1B8h]\n  char **v78; // [rsp+18h] [rbp-1B0h]\n  int v79; // [rsp+24h] [rbp-1A4h]\n  char *ptr; // [rsp+28h] [rbp-1A0h]\n  void *ptra; // [rsp+28h] [rbp-1A0h]\n  unsigned __int8 *src; // [rsp+30h] [rbp-198h]\n  int v83; // [rsp+38h] [rbp-190h]\n  _BOOL8 v84; // [rsp+40h] [rbp-188h]\n  size_t v85; // [rsp+50h] [rbp-178h]\n  char n; // [rsp+60h] [rbp-168h]\n  size_t na; // [rsp+60h] [rbp-168h]\n  char *nptr; // [rsp+68h] [rbp-160h]\n  int v89; // [rsp+70h] [rbp-158h]\n  char v90; // [rsp+77h] [rbp-151h]\n  const char *v91; // [rsp+78h] [rbp-150h]\n  char *endptr; // [rsp+88h] [rbp-140h] BYREF\n  int v93[78]; // [rsp+90h] [rbp-138h] BYREF\n\n  v4 = a1;\n  v5 = a2;\n  sub_403130(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_408ED0(sub_403090);\n  dword_60D29C = 0;\n  byte_60D298 = getenv(\"POSIXLY_CORRECT\") != 0LL;\n  if ( a1 == 2 )\n  {\n    v46 = a2[1];\n    if ( !strcmp(v46, \"--help\") )\n      sub_402C40(0);\n    v19 = strcmp(v46, \"--version\");\n    if ( !v19 )\n    {\n      sub_405590(\n        (_DWORD)stdout,\n        (unsigned int)\"printf\",\n        (unsigned int)&unk_40981B,\n        (_DWORD)off_60D1F0,\n        (unsigned int)\"David MacKenzie\",\n        0);\n      return v19;\n    }\n    if ( !strcmp(v46, \"--\") )\n    {\nLABEL_3:\n      v6 = dcgettext(0LL, \"missing operand\", 5);\n      error(0, 0, v6);\n      sub_402C40(1);\n    }\n  }\n  else\n  {\n    if ( a1 <= 1 )\n      goto LABEL_3;\n    if ( !strcmp(a2[1], \"--\") )\n    {\n      v4 = a1 - 1;\n      v5 = a2 + 1;\n    }\n  }\n  src = (unsigned __int8 *)v5[1];\n  v79 = v4 - 2;\n  v78 = v5 + 2;\n  do\n  {\n    v7 = *src;\n    if ( !(_BYTE)v7 )\n    {\n      v9 = v79;\n      break;\n    }\n    v8 = v78;\n    v9 = v79;\n    v83 = 0;\n    v10 = src;\n    v89 = 0;\n    while ( 2 )\n    {\n      if ( (_BYTE)v7 == 37 )\n      {\n        v21 = v10[1];\n        v13 = (__int64)(v10 + 1);\n        v11 = v10 + 2;\n        switch ( (_BYTE)v21 )\n        {\n          case '%':\n            IO_write_ptr = stdout->_IO_write_ptr;\n            if ( IO_write_ptr >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, 37);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = IO_write_ptr + 1;\n              *IO_write_ptr = 37;\n            }\n            goto LABEL_11;\n          case 'b':\n            if ( v9 )\n            {\n              v24 = *v8;\n              for ( i = (unsigned __int8)**v8; (_BYTE)i; v24 = v27 + 1 )\n              {\n                if ( (_BYTE)i == 92 )\n                {\n                  v27 = &v24[(int)sub_4025F0(v24, 1LL)];\n                }\n                else\n                {\n                  v26 = stdout->_IO_write_ptr;\n                  if ( v26 >= stdout->_IO_write_end )\n                  {\n                    __overflow(stdout, i);\n                  }\n                  else\n                  {\n                    stdout->_IO_write_ptr = v26 + 1;\n                    *v26 = i;\n                  }\n                  v27 = v24;\n                }\n                i = (unsigned __int8)v27[1];\n              }\n              goto LABEL_30;\n            }\nLABEL_26:\n            LODWORD(v7) = v10[2];\n            if ( !(_BYTE)v7 )\n              return (unsigned int)dword_60D29C;\n            v9 = 0;\n            goto LABEL_12;\n          case 'q':\n            if ( v9 )\n            {\n              v22 = stdout;\n              v23 = (const char *)sub_404B00(3LL, *v8);\n              fputs_unlocked(v23, v22);\nLABEL_30:\n              ++v8;\n              --v9;\n              goto LABEL_11;\n            }\n            goto LABEL_26;\n        }\n        LOBYTE(v11) = 0;\n        v29 = 0;\n        LOBYTE(ptr) = 0;\n        v30 = 0;\n        memset(v93, 0, 0x100uLL);\n        LOBYTE(v93[22]) = 1;\n        v31 = 1;\n        HIWORD(v93[17]) = 257;\n        v32 = v21 - 32;\n        v33 = 0;\n        v34 = 0;\n        LOBYTE(v93[30]) = 1;\n        v35 = 1;\n        v36 = 1;\n        v37 = 1LL;\n        BYTE1(v93[29]) = 1;\n        HIBYTE(v93[28]) = 1;\n        HIBYTE(v93[27]) = 1;\n        BYTE1(v93[26]) = 1;\n        BYTE1(v93[17]) = 1;\n        HIBYTE(v93[24]) = 1;\n        v93[25] = 16843009;\n        BYTE1(v93[16]) = 1;\n        BYTE1(v93[24]) = 1;\n        while ( 2 )\n        {\n          switch ( v32 )\n          {\n            case 0:\n            case 11:\n            case 13:\n              goto LABEL_46;\n            case 3:\n              LOBYTE(ptr) = 1;\n              LOBYTE(v11) = 1;\n              v29 = 1;\n              v31 = 0;\n              goto LABEL_45;\n            case 7:\n            case 41:\n              v33 = 1;\n              v30 = 1;\n              v35 = 0;\n              v36 = 0;\n              v34 = 1;\n              goto LABEL_46;\n            case 16:\nLABEL_45:\n              v33 = 1;\n              v30 = 1;\n              v35 = 0;\nLABEL_46:\n              v21 = *(unsigned __int8 *)++v13;\n              ++v37;\n              v32 = v21 - 32;\n              if ( (unsigned __int8)(v21 - 32) > 0x29u )\n                goto LABEL_47;\n              continue;\n            default:\nLABEL_47:\n              if ( !v34 )\n                goto LABEL_165;\n              LOBYTE(v93[22]) = v36;\n              LOBYTE(v93[30]) = v36;\n              if ( v30 )\n                goto LABEL_49;\n              break;\n          }\n          break;\n        }\nLABEL_82:\n        HIBYTE(v93[27]) = v36;\n        BYTE1(v93[17]) = v36;\n        BYTE1(v93[25]) = v36;\n        if ( !v33 )\n        {\nLABEL_52:\n          BYTE1(v93[16]) = v36;\n          BYTE1(v93[24]) = v36;\n          goto LABEL_53;\n        }\nLABEL_51:\n        HIBYTE(v93[24]) = v35;\n        if ( v34 )\n          goto LABEL_52;\n        while ( 1 )\n        {\nLABEL_53:\n          if ( v29 )\n            BYTE1(v93[29]) = v31;\n          if ( (_BYTE)v11 )\n            BYTE1(v93[26]) = v31;\n          if ( (_BYTE)ptr )\n            LOBYTE(v93[25]) = v31;\n          v38 = v13 + 1;\n          if ( (_BYTE)v21 != 42 )\n            break;\n          v39 = (char *)(v37 + 1);\n          if ( !v9 )\n          {\n            v89 = 0;\n            v21 = *(unsigned __int8 *)(v13 + 1);\n            v11 = (unsigned __int8 *)(v13 + 2);\n            ++v13;\n            n = 1;\n            goto LABEL_62;\n          }\n          ptr = (char *)(v37 + 1);\n          v67 = sub_402BB0(*v8);\n          if ( (unsigned __int64)(v67 + 0x80000000LL) <= 0xFFFFFFFF )\n          {\n            v21 = *(unsigned __int8 *)(v13 + 1);\n            v11 = (unsigned __int8 *)(v13 + 2);\n            v89 = v67;\n            ++v8;\n            v38 = v13 + 1;\n            --v9;\n            n = 1;\n            v39 = ptr;\n            ++v13;\nLABEL_62:\n            if ( (_BYTE)v21 == 46 )\n              goto LABEL_63;\nLABEL_130:\n            v90 = 0;\n            goto LABEL_69;\n          }\nLABEL_163:\n          v72 = sub_404D50(*v8, v38);\n          v73 = dcgettext(0LL, \"invalid field width: %s\", 5);\n          v38 = 0LL;\n          error(1, 0, v73, v72);\nLABEL_164:\n          v13 = sub_404D50(*v8, v38);\n          v74 = dcgettext(0LL, \"invalid precision: %s\", 5);\n          v35 = 0;\n          v33 = 1;\n          error(1, 0, v74, v13);\nLABEL_165:\n          if ( v30 )\n          {\nLABEL_49:\n            HIBYTE(v93[28]) = v35;\n            if ( v34 )\n              goto LABEL_82;\n          }\n          if ( v33 )\n            goto LABEL_51;\n        }\n        v64 = v13;\n        if ( (unsigned int)((char)v21 - 48) > 9 )\n        {\n          v11 = (unsigned __int8 *)(v13 + 1);\n          v39 = (char *)v37;\n          n = 0;\n          goto LABEL_62;\n        }\n        while ( 1 )\n        {\n          v38 = v64 + 1;\n          v21 = *(char *)(v64 + 1);\n          v39 = (char *)(v64 + 1 + v37 - v13);\n          if ( (unsigned int)(v21 - 48) > 9 )\n            break;\n          ++v64;\n        }\n        v11 = (unsigned __int8 *)(v64 + 2);\n        v13 = v38;\n        n = 0;\n        if ( (_BYTE)v21 != 46 )\n          goto LABEL_130;\nLABEL_63:\n        v21 = *(unsigned __int8 *)(v13 + 1);\n        HIBYTE(v93[24]) = 0;\n        if ( (_BYTE)v21 == 42 )\n        {\n          v39 += 2;\n          if ( v9 )\n          {\n            v83 = v13 + 2;\n            ptr = v39;\n            v40 = sub_402BB0(*v8);\n            v39 = ptr;\n            if ( v40 < 0 )\n            {\n              v83 = -1;\n            }\n            else\n            {\n              if ( v40 > 0x7FFFFFFF )\n                goto LABEL_164;\n              v83 = v40;\n            }\n            v21 = *(unsigned __int8 *)(v13 + 2);\n            v11 = (unsigned __int8 *)(v13 + 3);\n            v90 = 1;\n            v13 += 2LL;\n            ++v8;\n            --v9;\n          }\n          else\n          {\n            v21 = *(unsigned __int8 *)(v13 + 2);\n            v11 = (unsigned __int8 *)(v13 + 3);\n            v90 = 1;\n            v13 += 2LL;\n            v83 = 0;\n          }\n        }\n        else\n        {\n          v38 = (__int64)(v39 + 1);\n          v65 = v11;\n          if ( (unsigned int)((char)v21 - 48) <= 9 )\n          {\n            while ( 1 )\n            {\n              v38 = (__int64)(v65 + 2);\n              v13 = (__int64)(v65 + 1);\n              v21 = (char)v65[1];\n              v66 = (char *)(&v39[(_QWORD)(v65 + 2)] - (char *)v11);\n              if ( (unsigned int)(v21 - 48) > 9 )\n                break;\n              ++v65;\n            }\n            v11 = v65 + 2;\n            v39 = v66;\n            v90 = 0;\n          }\n          else\n          {\n            v13 = (__int64)v11;\n            ++v39;\n            ++v11;\n            v90 = 0;\n          }\n        }\nLABEL_69:\n        if ( (unsigned __int8)(v21 - 76) <= 0x2Eu )\n        {\n          v41 = 0x410150000001LL;\n          if ( _bittest64(&v41, (unsigned int)(v21 - 76)) )\n          {\n            while ( 1 )\n            {\n              v21 = *(unsigned __int8 *)(v13 + 1);\n              if ( (unsigned __int8)(v21 - 76) > 0x2Eu )\n                break;\n              v47 = 0x410150000001LL;\n              if ( !_bittest64(&v47, (unsigned int)(v21 - 76)) )\n                break;\n              ++v13;\n            }\n            v11 = (unsigned __int8 *)(v13 + 2);\n            ++v13;\n          }\n        }\n        if ( *((_BYTE *)v93 + (unsigned __int8)v21) )\n        {\n          v42 = \"\";\n          if ( v9 )\n          {\n            v42 = *v8;\n            --v9;\n            ++v8;\n          }\n          v43 = v21 - 65;\n          v44 = v39 + 2;\n          if ( (unsigned __int8)(v21 - 65) > 0x37u )\n          {\n            na = (size_t)v39;\n            ptra = (void *)sub_4056D0(v44, v38);\n            v45 = mempcpy(ptra, v10, na);\n            *v45 = v21;\n            v45[1] = 0;\n            goto LABEL_78;\n          }\n          if ( ((1LL << v43) & 0x90410800800000LL) != 0 )\n          {\n            v50 = 1LL;\n            v48 = \"ld\";\n          }\n          else\n          {\n            v48 = \"L\";\n            v49 = (1LL << v43) & 0x7100000071LL;\n            if ( !v49 )\n              v48 = (const char *)v10;\n            v50 = v49 != 0;\n          }\n          nptr = (char *)v42;\n          v84 = v50;\n          v91 = v48;\n          v85 = (size_t)v39;\n          v51 = (void *)sub_4056D0(&v44[v50], v38);\n          LODWORD(v38) = (_DWORD)v10;\n          ptra = v51;\n          v52 = mempcpy(v51, v10, v85);\n          v55 = v84;\n          v56 = (int)nptr;\n          if ( v84 )\n          {\n            v54 = (int)v91;\n            v53 = 0;\n            do\n            {\n              v38 = v53++;\n              v52[v38] = v91[v38];\n            }\n            while ( v53 < (unsigned int)v84 );\n          }\n          v57 = &v52[v84];\n          *v57 = v21;\n          v57[1] = 0;\n          switch ( (char)v21 )\n          {\n            case 'A':\n            case 'E':\n            case 'F':\n            case 'G':\n            case 'a':\n            case 'e':\n            case 'f':\n            case 'g':\n              if ( (*nptr == 34 || *nptr == 39) && (v63 = (unsigned __int8)nptr[1], (_BYTE)v63) )\n              {\n                v3 = (long double)v63;\n                if ( nptr[2] && !byte_60D298 )\n                {\n                  v69 = dcgettext(0LL, \"warning: %s: character(s) following character constant have been ignored\", 5);\n                  LODWORD(v38) = 0;\n                  error(0, 0, v69, nptr + 2);\n                }\n                if ( !n )\n                {\nLABEL_123:\n                  v75 = v3;\n                  if ( v90 )\n                    sub_4059C0((_DWORD)ptra, v83, v53, v55, v56, v54, SLOBYTE(v75));\n                  else\n                    sub_4059C0((_DWORD)ptra, v38, v53, v55, v56, v54, SLOBYTE(v75));\n                  goto LABEL_78;\n                }\n              }\n              else\n              {\n                *__errno_location() = 0;\n                sub_402FF0(nptr, &endptr);\n                LODWORD(v38) = (_DWORD)endptr;\n                sub_402B00(nptr, endptr);\n                if ( !n )\n                  goto LABEL_123;\n              }\n              v76 = v3;\n              if ( v90 )\n                sub_4059C0((_DWORD)ptra, v89, v83, v55, v56, v54, SLOBYTE(v76));\n              else\n                sub_4059C0((_DWORD)ptra, v89, v53, v55, v56, v54, SLOBYTE(v76));\n              goto LABEL_78;\n            case 'X':\n            case 'o':\n            case 'u':\n            case 'x':\n              if ( (*nptr == 34 || *nptr == 39) && (v62 = (unsigned __int8)nptr[1], (_BYTE)v62) )\n              {\n                if ( nptr[2] && !byte_60D298 )\n                {\n                  v70 = dcgettext(0LL, \"warning: %s: character(s) following character constant have been ignored\", 5);\n                  error(0, 0, v70, nptr + 2);\n                }\n                if ( !n )\n                {\nLABEL_114:\n                  if ( v90 )\n                    sub_4059C0((_DWORD)ptra, v83, v62, v55, v56, v54, v77);\n                  else\n                    sub_4059C0((_DWORD)ptra, v62, v53, v55, v56, v54, v77);\n                  goto LABEL_78;\n                }\n              }\n              else\n              {\n                *__errno_location() = 0;\n                v62 = __strtoul_internal(nptr, &endptr, 0, 0);\n                sub_402B00(nptr, endptr);\n                if ( !n )\n                  goto LABEL_114;\n              }\n              if ( v90 )\n              {\n                v68 = v62;\n                goto LABEL_154;\n              }\n              sub_4059C0((_DWORD)ptra, v89, v62, v55, v56, v54, v77);\nLABEL_78:\n              free(ptra);\n              break;\n            case 'c':\n              v61 = *nptr;\n              if ( n )\n                sub_4059C0((_DWORD)ptra, v89, v61, v84, (_DWORD)nptr, v54, v77);\n              else\n                sub_4059C0((_DWORD)ptra, v61, v61, v84, (_DWORD)nptr, v54, v77);\n              goto LABEL_78;\n            case 'd':\n            case 'i':\n              v58 = sub_402BB0(nptr);\n              if ( n )\n              {\n                if ( v90 )\n                {\n                  v68 = v58;\n                  goto LABEL_154;\n                }\n                sub_4059C0((_DWORD)ptra, v89, v58, v60, v56, v54, v77);\n              }\n              else if ( v90 )\n              {\n                sub_4059C0((_DWORD)ptra, v83, v58, v60, v56, v54, v77);\n              }\n              else\n              {\n                sub_4059C0((_DWORD)ptra, v58, v59, v60, v56, v54, v77);\n              }\n              goto LABEL_78;\n            case 's':\n              if ( n )\n              {\n                if ( v90 )\n                {\n                  v68 = (int)nptr;\nLABEL_154:\n                  sub_4059C0((_DWORD)ptra, v89, v83, v68, v56, v54, v77);\n                }\n                else\n                {\n                  sub_4059C0((_DWORD)ptra, v89, (_DWORD)nptr, v84, (_DWORD)nptr, v54, v77);\n                }\n              }\n              else if ( v90 )\n              {\n                sub_4059C0((_DWORD)ptra, v83, (_DWORD)nptr, v84, (_DWORD)nptr, v54, v77);\n              }\n              else\n              {\n                sub_4059C0((_DWORD)ptra, (_DWORD)nptr, v53, v84, (_DWORD)nptr, v54, v77);\n              }\n              goto LABEL_78;\n            default:\n              goto LABEL_78;\n          }\nLABEL_11:\n          v7 = *(unsigned __int8 *)(v13 + 1);\n          if ( !(_BYTE)v7 )\n            goto LABEL_16;\nLABEL_12:\n          v10 = v11;\n          continue;\n        }\n        v71 = dcgettext(0LL, \"%.*s: invalid conversion specification\", 5);\n        v38 = 0LL;\n        error(1, 0, v71, v11 - v10, v10);\n        goto LABEL_163;\n      }\n      break;\n    }\n    if ( (_BYTE)v7 != 92 )\n    {\n      v11 = v10 + 1;\n      v12 = stdout->_IO_write_ptr;\n      if ( v12 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, v7);\n        v13 = (__int64)v10;\n      }\n      else\n      {\n        v13 = (__int64)v10;\n        stdout->_IO_write_ptr = v12 + 1;\n        *v12 = v7;\n      }\n      goto LABEL_11;\n    }\n    v14 = &v10[(int)sub_4025F0(v10, 0LL)];\n    v7 = v14[1];\n    v11 = v14 + 1;\n    if ( (_BYTE)v7 )\n      goto LABEL_12;\nLABEL_16:\n    v15 = v79;\n    v79 = v9;\n    v16 = v15 - v9;\n    v78 += v16;\n  }\n  while ( v16 > 0 && v9 > 0 );\n  if ( v9 )\n  {\n    v17 = sub_404D50(*v78, v7);\n    v18 = dcgettext(0LL, \"warning: ignoring excess arguments, starting with %s\", 5);\n    error(0, 0, v18, v17);\n  }\n  return (unsigned int)dword_60D29C;\n}\n"
        },
        {
            "funcName": "sub_40253B",
            "funcStartAddr": "0x40253b",
            "funcEndAddr": "0x40255a",
            "decompiledFuncCode": "void *sub_40253B()\n{\n  return &unk_60D258;\n}\n"
        },
        {
            "funcName": "sub_40255A",
            "funcStartAddr": "0x40255a",
            "funcEndAddr": "0x402591",
            "decompiledFuncCode": "__int64 sub_40255A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_402591",
            "funcStartAddr": "0x402591",
            "funcEndAddr": "0x4025e8",
            "decompiledFuncCode": "void *sub_402591()\n{\n  void *result; // rax\n\n  if ( !byte_60D288 )\n  {\n    while ( qword_60D290 < (unsigned __int64)(&qword_60CE48 - qword_60CE40 - 1) )\n      ((void (*)(void))qword_60CE40[++qword_60D290])();\n    result = sub_40253B();\n    byte_60D288 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4025E8",
            "funcStartAddr": "0x4025e8",
            "funcEndAddr": "0x4025ed",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_4025E8()\n{\n  return sub_40255A();\n}\n"
        },
        {
            "funcName": "sub_4025F0",
            "funcStartAddr": "0x4025f0",
            "funcEndAddr": "0x402b00",
            "decompiledFuncCode": "__int64 __fastcall sub_4025F0(__int64 a1, unsigned __int8 a2)\n{\n  char v3; // r12\n  int v4; // ecx\n  __int64 v5; // rsi\n  unsigned __int8 *v6; // rdx\n  unsigned __int8 *v7; // rbp\n  unsigned __int8 v8; // al\n  unsigned int v9; // ebp\n  char *v10; // rax\n  _IO_FILE *v12; // rdi\n  char *v13; // rax\n  unsigned __int8 v14; // al\n  char *v15; // rdx\n  const unsigned __int16 **v16; // rax\n  int v17; // edi\n  const unsigned __int16 *v18; // r8\n  int v19; // edx\n  unsigned __int8 v20; // al\n  int v21; // esi\n  int v22; // edx\n  int v23; // ecx\n  unsigned int v24; // ebx\n  bool v25; // zf\n  _BYTE *v26; // r12\n  _BOOL4 v27; // ebp\n  const unsigned __int16 **v28; // rax\n  unsigned int v29; // ebp\n  unsigned int v30; // r9d\n  const unsigned __int16 *v31; // r10\n  __int64 v32; // r8\n  int v33; // ecx\n  int v34; // r9d\n  int v35; // eax\n  char *v36; // rax\n  char *v37; // rax\n  char *v38; // rax\n  char *v39; // rax\n  char *v40; // rax\n  char *v41; // rax\n  char *v42; // rax\n  char *IO_write_ptr; // rax\n  char *v44; // rax\n  char *v45; // rax\n  char *v46; // rax\n  unsigned int v47; // [rsp+Ch] [rbp-2Ch]\n\n  v3 = *(_BYTE *)(a1 + 1);\n  if ( v3 == 120 )\n  {\n    v7 = (unsigned __int8 *)(a1 + 2);\n    v16 = __ctype_b_loc();\n    v17 = 0;\n    v4 = 0;\n    v18 = *v16;\n    while ( 1 )\n    {\n      v19 = (char)*v7;\n      v20 = *v7;\n      if ( (v18[*v7] & 0x1000) == 0 )\n        break;\n      v21 = 16 * v4;\n      if ( (unsigned __int8)(v20 - 97) > 5u )\n      {\n        v23 = v19 - 48;\n        v22 = v19 - 55;\n        if ( (unsigned __int8)(v20 - 65) > 5u )\n          v22 = v23;\n      }\n      else\n      {\n        v22 = v19 - 87;\n      }\n      v4 = v21 + v22;\n      ++v7;\n      if ( v17 == 1 )\n        goto LABEL_6;\n      v17 = 1;\n    }\n    if ( v17 )\n      goto LABEL_6;\n    goto LABEL_62;\n  }\n  if ( (unsigned __int8)(v3 - 48) > 7u )\n  {\n    if ( !v3 )\n      goto LABEL_10;\n    v24 = v3;\n    if ( strchr(\"\\\"\\\\abcefnrtv\", v3) )\n    {\n      switch ( v3 )\n      {\n        case 'a':\n          v9 = 1;\n          IO_write_ptr = stdout->_IO_write_ptr;\n          if ( IO_write_ptr >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 7);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = IO_write_ptr + 1;\n            *IO_write_ptr = 7;\n          }\n          break;\n        case 'b':\n          v9 = 1;\n          v42 = stdout->_IO_write_ptr;\n          if ( v42 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 8);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v42 + 1;\n            *v42 = 8;\n          }\n          break;\n        case 'c':\n          exit(0);\n        case 'e':\n          v9 = 1;\n          v41 = stdout->_IO_write_ptr;\n          if ( v41 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 27);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v41 + 1;\n            *v41 = 27;\n          }\n          break;\n        case 'f':\n          v9 = 1;\n          v40 = stdout->_IO_write_ptr;\n          if ( v40 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 12);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v40 + 1;\n            *v40 = 12;\n          }\n          break;\n        case 'n':\n          v9 = 1;\n          v39 = stdout->_IO_write_ptr;\n          if ( v39 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 10);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v39 + 1;\n            *v39 = 10;\n          }\n          break;\n        case 'r':\n          v9 = 1;\n          v38 = stdout->_IO_write_ptr;\n          if ( v38 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 13);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v38 + 1;\n            *v38 = 13;\n          }\n          break;\n        case 't':\n          v9 = 1;\n          v37 = stdout->_IO_write_ptr;\n          if ( v37 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 9);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v37 + 1;\n            *v37 = 9;\n          }\n          break;\n        case 'v':\n          v9 = 1;\n          v36 = stdout->_IO_write_ptr;\n          if ( v36 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 11);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v36 + 1;\n            *v36 = 11;\n          }\n          break;\n        default:\n          v9 = 1;\n          v44 = stdout->_IO_write_ptr;\n          if ( v44 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, (unsigned __int8)v3);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v44 + 1;\n            *v44 = v3;\n          }\n          break;\n      }\n      return v9;\n    }\n    if ( (v3 & 0xDF) != 85 )\n    {\nLABEL_10:\n      v12 = stdout;\n      v13 = stdout->_IO_write_ptr;\n      if ( v13 < stdout->_IO_write_end )\n      {\n        stdout->_IO_write_ptr = v13 + 1;\n        *v13 = 92;\n        goto LABEL_12;\n      }\nLABEL_63:\n      __overflow(v12, 92);\nLABEL_12:\n      v14 = *(_BYTE *)(a1 + 1);\n      v9 = 0;\n      if ( v14 )\n      {\n        v15 = stdout->_IO_write_ptr;\n        if ( v15 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v14);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v15 + 1;\n          *v15 = v14;\n        }\n        return 1;\n      }\n      return v9;\n    }\n    v25 = v3 == 117;\n    v26 = (_BYTE *)(a1 + 2);\n    v27 = !v25;\n    v28 = __ctype_b_loc();\n    v29 = 4 * v27 + 4;\n    v30 = 0;\n    v31 = *v28;\n    v32 = a1 + v29 - 1 + 3;\n    while ( 1 )\n    {\n      v33 = (char)*v26;\n      if ( (v31[(unsigned __int8)*v26] & 0x1000) == 0 )\n        break;\n      v34 = 16 * v30;\n      if ( (unsigned __int8)(v33 - 97) <= 5u )\n      {\n        ++v26;\n        v30 = v33 - 87 + v34;\n        if ( v26 == (_BYTE *)v32 )\n          goto LABEL_35;\n      }\n      else\n      {\n        v35 = v33 - 55;\n        if ( (unsigned __int8)(*v26 - 65) > 5u )\n          v35 = v33 - 48;\n        ++v26;\n        v30 = v35 + v34;\n        if ( v26 == (_BYTE *)v32 )\n        {\nLABEL_35:\n          if ( (v30 > 0x9F || v30 == 36 || (v30 & 0xFFFFFFDF) == 64) && v30 - 55296 > 0x7FF )\n          {\n            sub_405060(stdout, v30, 0LL);\n            return v29 + 1;\n          }\n          else\n          {\n            v47 = v30;\n            v46 = dcgettext(0LL, \"invalid universal character name \\\\%c%0*x\", 5);\n            error(1, 0, v46, v24, v29, v47);\n            return sub_402B00(1LL, 0LL);\n          }\n        }\n      }\n    }\nLABEL_62:\n    v45 = dcgettext(0LL, \"missing hexadecimal number in escape\", 5);\n    v12 = (_IO_FILE *)1;\n    error(1, 0, v45);\n    goto LABEL_63;\n  }\n  LOBYTE(v4) = 0;\n  v5 = (v3 == 48) & a2;\n  v6 = (unsigned __int8 *)(a1 + v5 + 1);\n  v7 = (unsigned __int8 *)(a1 + v5 + 4);\n  while ( 1 )\n  {\n    v8 = *v6;\n    if ( (unsigned __int8)(*v6 - 48) > 7u )\n      break;\n    ++v6;\n    LOBYTE(v4) = v8 + 8 * v4 - 48;\n    if ( v6 == v7 )\n      goto LABEL_6;\n  }\n  LODWORD(v7) = (_DWORD)v6;\nLABEL_6:\n  v9 = (_DWORD)v7 - a1 - 1;\n  v10 = stdout->_IO_write_ptr;\n  if ( v10 >= stdout->_IO_write_end )\n  {\n    __overflow(stdout, (unsigned __int8)v4);\n  }\n  else\n  {\n    stdout->_IO_write_ptr = v10 + 1;\n    *v10 = v4;\n  }\n  return v9;\n}\n"
        },
        {
            "funcName": "sub_402B00",
            "funcStartAddr": "0x402b00",
            "funcEndAddr": "0x402ba4",
            "decompiledFuncCode": "void __fastcall sub_402B00(_BYTE *a1, _BYTE *a2)\n{\n  int *v2; // rax\n  __int64 v3; // rax\n  const char *v4; // rsi\n  __int64 v5; // rbx\n  char *v6; // rax\n  int *v7; // rbx\n  const char *v8; // rax\n\n  v2 = __errno_location();\n  if ( *v2 )\n  {\n    v7 = v2;\n    v8 = (const char *)sub_404D50(a1, a2);\n    error(0, *v7, \"%s\", v8);\n    dword_60D29C = 1;\n  }\n  else if ( *a2 )\n  {\n    v3 = sub_404D50(a1, a2);\n    if ( a1 == a2 )\n      v4 = \"%s: expected a numeric value\";\n    else\n      v4 = \"%s: value not completely converted\";\n    v5 = v3;\n    v6 = dcgettext(0LL, v4, 5);\n    error(0, 0, v6, v5);\n    dword_60D29C = 1;\n  }\n}\n"
        },
        {
            "funcName": "sub_402BB0",
            "funcStartAddr": "0x402bb0",
            "funcEndAddr": "0x402c3c",
            "decompiledFuncCode": "__int64 __fastcall sub_402BB0(char *nptr)\n{\n  __int64 v1; // rbp\n  char *v3; // rax\n  char *endptr; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( (*nptr == 34 || *nptr == 39) && (v1 = (unsigned __int8)nptr[1], (_BYTE)v1) )\n  {\n    if ( nptr[2] && !byte_60D298 )\n    {\n      v3 = dcgettext(0LL, \"warning: %s: character(s) following character constant have been ignored\", 5);\n      error(0, 0, v3, nptr + 2);\n    }\n  }\n  else\n  {\n    *__errno_location() = 0;\n    v1 = __strtol_internal(nptr, &endptr, 0, 0);\n    sub_402B00(nptr, endptr);\n  }\n  return v1;\n}\n"
        },
        {
            "funcName": "sub_402C40",
            "funcStartAddr": "0x402c40",
            "funcEndAddr": "0x402fe5",
            "decompiledFuncCode": "void __fastcall __noreturn sub_402C40(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  char *v18; // rax\n  __int64 v19; // rcx\n  __int64 *v20; // rax\n  char *v21; // rbp\n  char *v22; // rax\n  char *v23; // rax\n  const char *v24; // r12\n  char *v25; // rax\n  char *v26; // rax\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_60D2B8;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s FORMAT [ARGUMENT]...\\n  or:  %s OPTION\\n\", 5);\n  __printf_chk(1LL, v3, v1, v1);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"Print ARGUMENT(s) according to FORMAT, or execute according to OPTION:\\n\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"\\nFORMAT controls the output as in C printf.  Interpreted sequences are:\\n\\n  \\\\\\\"      double quote\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  \\\\\\\\      backslash\\n\"\n          \"  \\\\a      alert (BEL)\\n\"\n          \"  \\\\b      backspace\\n\"\n          \"  \\\\c      produce no further output\\n\"\n          \"  \\\\e      escape\\n\"\n          \"  \\\\f      form feed\\n\"\n          \"  \\\\n      new line\\n\"\n          \"  \\\\r      carriage return\\n\"\n          \"  \\\\t      horizontal tab\\n\"\n          \"  \\\\v      vertical tab\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"  \\\\NNN    byte with octal value NNN (1 to 3 digits)\\n\"\n          \"  \\\\xHH    byte with hexadecimal value HH (1 to 2 digits)\\n\"\n          \"  \\\\uHHHH  Unicode (ISO/IEC 10646) character with hex value HHHH (4 digits)\\n\"\n          \"  \\\\UHHHHHHHH  Unicode character with hex value HHHHHHHH (8 digits)\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"  %%      a single %\\n\"\n          \"  %b      ARGUMENT as a string with '\\\\' escapes interpreted,\\n\"\n          \"          except that octal escapes are of the form \\\\0 or \\\\0NNN\\n\"\n          \"  %q      ARGUMENT is printed in a format that can be reused as shell input,\\n\"\n          \"          escaping non-printable characters with the proposed POSIX $'' syntax.\\n\"\n          \"\\n\"\n          \"and all C format specifications ending with one of diouxXfeEgGcs, with\\n\"\n          \"ARGUMENTs converted to proper type first.  Variable widths are handled.\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"NOTE: your shell may have its own version of %s, which usually supersedes\\n\"\n          \"the version described here.  Please refer to your shell's documentation\\n\"\n          \"for details about the options it supports.\\n\",\n          5);\n  __printf_chk(1LL, v18, \"printf\", v19);\n  v32[0] = (__int64)\"[\";\n  v20 = v32;\n  v32[1] = (__int64)\"test invocation\";\n  v32[2] = (__int64)\"coreutils\";\n  v32[3] = (__int64)\"Multi-call invocation\";\n  v32[4] = (__int64)\"sha224sum\";\n  v32[5] = (__int64)\"sha2 utilities\";\n  v32[6] = (__int64)\"sha256sum\";\n  v32[7] = (__int64)\"sha2 utilities\";\n  v32[8] = (__int64)\"sha384sum\";\n  v32[9] = (__int64)\"sha2 utilities\";\n  v32[10] = (__int64)\"sha512sum\";\n  v32[11] = (__int64)\"sha2 utilities\";\n  v32[12] = 0LL;\n  v32[13] = 0LL;\n  do\n    v20 += 2;\n  while ( *v20 && strcmp(\"printf\", (const char *)*v20) );\n  v21 = (char *)v20[1];\n  if ( v21 )\n  {\n    v22 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v22, &unk_40981B, \"https://www.gnu.org/software/coreutils/\");\n    v23 = setlocale(5, 0LL);\n    if ( !v23 || !strncmp(v23, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v27 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v27, &unk_40981B, \"https://www.gnu.org/software/coreutils/\");\n    v28 = setlocale(5, 0LL);\n    if ( !v28 || !strncmp(v28, \"en_\", 3uLL) )\n    {\n      v21 = \"printf\";\n      v29 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v24 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v29, \"https://www.gnu.org/software/coreutils/\", \"printf\");\nLABEL_12:\n      v26 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v26, v21, v24);\nLABEL_3:\n      exit(status);\n    }\n    v21 = \"printf\";\n  }\n  v30 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v30, \"printf\", v31);\nLABEL_10:\n  v24 = \"Multi-call invocation\" + 10;\n  v25 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v25, \"https://www.gnu.org/software/coreutils/\", \"printf\");\n  if ( v21 != \"printf\" )\n    v24 = \"\";\n  goto LABEL_12;\n}\n"
        },
        {
            "funcName": "sub_402FF0",
            "funcStartAddr": "0x402ff0",
            "funcEndAddr": "0x403064",
            "decompiledFuncCode": "long double __fastcall sub_402FF0(char *nptr, char **endptr)\n{\n  if ( !loc )\n    loc = newlocale(8127, \"C\", 0LL);\n  if ( loc )\n    return strtold_l(nptr, endptr, loc);\n  if ( endptr )\n    *endptr = nptr;\n  return 0.0;\n}\n"
        },
        {
            "funcName": "sub_403090",
            "funcStartAddr": "0x403090",
            "funcEndAddr": "0x40312e",
            "decompiledFuncCode": "__int64 sub_403090()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_405CB0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60D2A8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60D2B0 )\n      {\n        v5 = (const char *)sub_404BA0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_405CB0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403130",
            "funcStartAddr": "0x403130",
            "funcEndAddr": "0x4031c9",
            "decompiledFuncCode": "char *__fastcall sub_403130(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60D2B8 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4031D0",
            "funcStartAddr": "0x4031d0",
            "funcEndAddr": "0x4032c2",
            "decompiledFuncCode": "const char *__fastcall sub_4031D0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_405D70();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_409CD9;\n      if ( !v5 )\n        return (const char *)&unk_409CCE;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_409CD5;\n    if ( !v5 )\n      return (const char *)&unk_409CD2;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_4032D0",
            "funcStartAddr": "0x401770",
            "funcEndAddr": "0x401775",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4032D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4032D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4032D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_405B50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4032D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4031D0(\"`\", a5);\n        v51 = (char *)sub_4031D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_4032D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4032D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4032D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_405B50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4032D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4031D0(\"`\", a5);\n        v51 = (char *)sub_4031D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_4032D0",
            "funcStartAddr": "0x401770",
            "funcEndAddr": "0x401775",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4032D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4032D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4032D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_405B50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4032D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4031D0(\"`\", a5);\n        v51 = (char *)sub_4031D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_4032D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4032D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4032D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_405B50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4032D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4031D0(\"`\", a5);\n        v51 = (char *)sub_4031D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_404500",
            "funcStartAddr": "0x401775",
            "funcEndAddr": "0x40177a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404500(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60D250 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405920();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60D240 )\n    {\n      v7 = (__m128i *)sub_405730(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60D240);\n    }\n    else\n    {\n      ptr = (void *)sub_405730(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60D250], 0, 16LL * (a1 + 1 - dword_60D250));\n    dword_60D250 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4032D0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60D2C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4056D0(v13, v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4032D0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_404500(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60D250 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405920();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60D240 )\n    {\n      v7 = (__m128i *)sub_405730(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60D240);\n    }\n    else\n    {\n      ptr = (void *)sub_405730(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60D250], 0, 16LL * (a1 + 1 - dword_60D250));\n    dword_60D250 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4032D0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60D2C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4056D0(v13, v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4032D0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_404500",
            "funcStartAddr": "0x401775",
            "funcEndAddr": "0x40177a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404500(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60D250 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405920();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60D240 )\n    {\n      v7 = (__m128i *)sub_405730(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60D240);\n    }\n    else\n    {\n      ptr = (void *)sub_405730(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60D250], 0, 16LL * (a1 + 1 - dword_60D250));\n    dword_60D250 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4032D0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60D2C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4056D0(v13, v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4032D0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_404500(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60D250 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405920();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60D240 )\n    {\n      v7 = (__m128i *)sub_405730(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60D240);\n    }\n    else\n    {\n      ptr = (void *)sub_405730(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60D250], 0, 16LL * (a1 + 1 - dword_60D250));\n    dword_60D250 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4032D0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60D2C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4056D0(v13, v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4032D0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_4046A0",
            "funcStartAddr": "0x4046a0",
            "funcEndAddr": "0x4046d4",
            "decompiledFuncCode": "__int64 __fastcall sub_4046A0(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_60D3C0;\n  result = sub_4058D0(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404790",
            "funcStartAddr": "0x404790",
            "funcEndAddr": "0x404802",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404790(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_60D3C0;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_4032D0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((const char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404810",
            "funcStartAddr": "0x404810",
            "funcEndAddr": "0x4048f1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404810(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_60D3C0;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_4032D0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((const char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_4056D0(v11 + 1, v11 + 1);\n  sub_4032D0(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((const char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_404910",
            "funcStartAddr": "0x404910",
            "funcEndAddr": "0x4049a5",
            "decompiledFuncCode": "void sub_404910()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_60D250 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_60D250 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_60D2C0 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_60D240 = 256LL;\n    *((_QWORD *)&xmmword_60D240 + 1) = &unk_60D2C0;\n  }\n  if ( v0 != &xmmword_60D240 )\n  {\n    free(v0);\n    ptr = &xmmword_60D240;\n  }\n  dword_60D250 = 1;\n}\n"
        },
        {
            "funcName": "sub_404A20",
            "funcStartAddr": "0x40177a",
            "funcEndAddr": "0x40177f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404A20(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404500(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_404A20(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404500(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_404A20",
            "funcStartAddr": "0x40177a",
            "funcEndAddr": "0x40177f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404A20(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404500(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_404A20(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404500(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_404A90",
            "funcStartAddr": "0x40177f",
            "funcEndAddr": "0x401784",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404A90(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404500(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_404A90(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404500(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_404A90",
            "funcStartAddr": "0x40177f",
            "funcEndAddr": "0x401784",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404A90(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404500(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_404A90(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404500(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_404B00",
            "funcStartAddr": "0x404b00",
            "funcEndAddr": "0x404b0c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404B00(int a1, __int64 a2)\n{\n  return sub_404A20(0, a1, a2);\n}\n"
        },
        {
            "funcName": "sub_404B20",
            "funcStartAddr": "0x404b20",
            "funcEndAddr": "0x404b90",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404B20(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_60D3F0;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D3C0);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D3D0);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D3E0);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_404500(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_404BA0",
            "funcStartAddr": "0x404ba0",
            "funcEndAddr": "0x404bb1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404BA0(__int64 a1)\n{\n  return sub_404B20(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_404BD0",
            "funcStartAddr": "0x401784",
            "funcEndAddr": "0x401789",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404BD0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404500(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_404BD0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404500(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_404BD0",
            "funcStartAddr": "0x401784",
            "funcEndAddr": "0x401789",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404BD0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404500(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_404BD0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404500(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_404C40",
            "funcStartAddr": "0x404c40",
            "funcEndAddr": "0x404cac",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404C40(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D3C0);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D3D0);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_60D3E0);\n  v8 = qword_60D3F0;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_404500(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_404D50",
            "funcStartAddr": "0x404d50",
            "funcEndAddr": "0x404d66",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404D50(__int64 a1)\n{\n  return sub_404500(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_60D200);\n}\n"
        },
        {
            "funcName": "sub_404D70",
            "funcStartAddr": "0x404d70",
            "funcEndAddr": "0x404d8b",
            "decompiledFuncCode": "__int64 __fastcall sub_404D70(const void *a1, size_t a2, FILE *a3)\n{\n  fwrite(a1, 1uLL, a2, a3);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_404D90",
            "funcStartAddr": "0x404d90",
            "funcEndAddr": "0x404ddd",
            "decompiledFuncCode": "__int64 __fastcall sub_404D90(unsigned int a1, __int64 a2, __int64 a3)\n{\n  if ( a1 > 0xFFFF )\n    __fprintf_chk(a3, 1LL, \"\\\\U%08X\", a1);\n  else\n    __fprintf_chk(a3, 1LL, \"\\\\u%04X\", a1);\n  return -1LL;\n}\n"
        },
        {
            "funcName": "sub_404DE0",
            "funcStartAddr": "0x404de0",
            "funcEndAddr": "0x404e65",
            "decompiledFuncCode": "__int64 __fastcall sub_404DE0(unsigned int a1, const char *a2)\n{\n  char *v2; // rbp\n  char *v3; // rax\n  char *v5; // rax\n\n  if ( a2 )\n  {\n    v2 = dcgettext(0LL, a2, 5);\n    v3 = dcgettext(0LL, \"cannot convert U+%04X to local character set: %s\", 5);\n    error(1, 0, v3, a1, v2);\n  }\n  else\n  {\n    v5 = dcgettext(0LL, \"cannot convert U+%04X to local character set\", 5);\n    error(1, 0, v5, a1);\n  }\n  return -1LL;\n}\n"
        },
        {
            "funcName": "sub_404E70",
            "funcStartAddr": "0x404e70",
            "funcEndAddr": "0x405060",
            "decompiledFuncCode": "__int64 __fastcall sub_404E70(\n        __int64 a1,\n        __int64 (__fastcall *a2)(char *, size_t, __int64),\n        __int64 (__fastcall *a3)(_QWORD, const char *, __int64),\n        __int64 a4)\n{\n  int v7; // edx\n  size_t v8; // rsi\n  const char *v10; // rax\n  bool v11; // zf\n  int v12; // eax\n  size_t v13; // rax\n  char v14[6]; // [rsp+Ah] [rbp-6Eh] BYREF\n  char *inbuf; // [rsp+10h] [rbp-68h] BYREF\n  size_t inbytesleft; // [rsp+18h] [rbp-60h] BYREF\n  char *outbuf; // [rsp+20h] [rbp-58h] BYREF\n  size_t outbytesleft; // [rsp+28h] [rbp-50h] BYREF\n  char v19[72]; // [rsp+30h] [rbp-48h] BYREF\n\n  v7 = dword_60D400;\n  if ( !dword_60D404 )\n  {\n    v10 = (const char *)sub_405D70(a1, a2, (unsigned int)dword_60D400);\n    v11 = strcmp(v10, \"UTF-8\") == 0;\n    v7 = v11;\n    dword_60D400 = v7;\n    if ( !v11 )\n    {\n      cd = iconv_open(v10, \"UTF-8\");\n      if ( cd == (iconv_t)-1LL )\n        cd = iconv_open(\"ASCII\", \"UTF-8\");\n      v7 = dword_60D400;\n    }\n    dword_60D404 = 1;\n  }\n  if ( !v7 && cd == (iconv_t)-1LL )\n    return a3((unsigned int)a1, \"iconv function not usable\", a4);\n  if ( (unsigned int)a1 > 0x7F )\n  {\n    v12 = sub_405080(v14, (unsigned int)a1, 6LL);\n    v7 = dword_60D400;\n    v8 = v12;\n    if ( v12 < 0 )\n      return a3((unsigned int)a1, \"character out of range\", a4);\n  }\n  else\n  {\n    v14[0] = a1;\n    v8 = 1LL;\n  }\n  if ( v7 )\n    return a2(v14, v8, a4);\n  inbuf = v14;\n  inbytesleft = v8;\n  outbuf = v19;\n  outbytesleft = 25LL;\n  v13 = iconv(cd, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n  if ( inbytesleft || v13 == -1LL || iconv(cd, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\n    return a3((unsigned int)a1, 0LL, a4);\n  else\n    return a2(v19, outbuf - v19, a4);\n}\n"
        },
        {
            "funcName": "sub_405060",
            "funcStartAddr": "0x405060",
            "funcEndAddr": "0x40507f",
            "decompiledFuncCode": "__int64 __fastcall sub_405060(__int64 a1, unsigned int a2, int a3)\n{\n  bool v3; // zf\n  __int64 (__fastcall *v4)(_QWORD, const char *, __int64); // rdx\n\n  v3 = a3 == 0;\n  v4 = (__int64 (__fastcall *)(_QWORD, const char *, __int64))sub_404DE0;\n  if ( v3 )\n    v4 = (__int64 (__fastcall *)(_QWORD, const char *, __int64))sub_404D90;\n  return sub_404E70(a2, (__int64 (__fastcall *)(char *, size_t, __int64))sub_404D70, v4, a1);\n}\n"
        },
        {
            "funcName": "sub_405080",
            "funcStartAddr": "0x405080",
            "funcEndAddr": "0x40512c",
            "decompiledFuncCode": "__int64 __fastcall sub_405080(_BYTE *a1, unsigned int a2, int a3)\n{\n  __int64 result; // rax\n  char v4; // dl\n  char v5; // al\n\n  if ( a2 <= 0x7F )\n    return 4294967294LL;\n  if ( a2 <= 0x7FF )\n  {\n    if ( a3 > 1 )\n    {\n      result = 2LL;\n      goto LABEL_8;\n    }\n    return 4294967294LL;\n  }\n  if ( a2 > 0xFFFF )\n  {\n    if ( a2 <= 0x10FFFF )\n    {\n      if ( a3 > 3 )\n      {\n        v5 = a2;\n        a2 = (a2 >> 6) | 0x10000;\n        a1[3] = v5 & 0x3F | 0x80;\n        result = 4LL;\n        goto LABEL_7;\n      }\n      return 4294967294LL;\n    }\n  }\n  else if ( a2 - 55296 > 0x7FF )\n  {\n    if ( a3 > 2 )\n    {\n      result = 3LL;\nLABEL_7:\n      v4 = a2;\n      a2 = (a2 >> 6) | 0x800;\n      a1[2] = v4 & 0x3F | 0x80;\nLABEL_8:\n      *a1 = (a2 >> 6) | 0xC0;\n      a1[1] = a2 & 0x3F | 0x80;\n      return result;\n    }\n    return 4294967294LL;\n  }\n  return 0xFFFFFFFFLL;\n}\n"
        },
        {
            "funcName": "sub_405130",
            "funcStartAddr": "0x401789",
            "funcEndAddr": "0x40178e",
            "decompiledFuncCode": "__int64 __fastcall sub_405130(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_405130(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_405130",
            "funcStartAddr": "0x401789",
            "funcEndAddr": "0x40178e",
            "decompiledFuncCode": "__int64 __fastcall sub_405130(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_405130(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_405530",
            "funcStartAddr": "0x405530",
            "funcEndAddr": "0x405590",
            "decompiledFuncCode": "__int64 __fastcall sub_405530(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_405130(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_405130(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_405590",
            "funcStartAddr": "0x405590",
            "funcEndAddr": "0x40564c",
            "decompiledFuncCode": "__int64 __fastcall sub_405590(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_405130(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_405130(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_405650",
            "funcStartAddr": "0x405650",
            "funcEndAddr": "0x4056c4",
            "decompiledFuncCode": "int sub_405650()\n{\n  char *v0; // rax\n  __int64 v1; // rcx\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\", v1);\n  v2 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v2, &unk_40981B, \"https://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v4, v3);\n}\n"
        },
        {
            "funcName": "sub_4056D0",
            "funcStartAddr": "0x4056d0",
            "funcEndAddr": "0x4056ea",
            "decompiledFuncCode": "void *__fastcall sub_4056D0(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_405920();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405720",
            "funcStartAddr": "0x405720",
            "funcEndAddr": "0x405722",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_405720(size_t a1)\n{\n  return sub_4056D0(a1);\n}\n"
        },
        {
            "funcName": "sub_405730",
            "funcStartAddr": "0x405730",
            "funcEndAddr": "0x405766",
            "decompiledFuncCode": "void *__fastcall sub_405730(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_405920();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405880",
            "funcStartAddr": "0x405880",
            "funcEndAddr": "0x405897",
            "decompiledFuncCode": "void *__fastcall sub_405880(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_4056D0(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_4058A0",
            "funcStartAddr": "0x4058a0",
            "funcEndAddr": "0x4058ce",
            "decompiledFuncCode": "__int64 __fastcall sub_4058A0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_405920(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_4058D0",
            "funcStartAddr": "0x4058d0",
            "funcEndAddr": "0x4058f8",
            "decompiledFuncCode": "void *__fastcall sub_4058D0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_4056D0(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_405900",
            "funcStartAddr": "0x405900",
            "funcEndAddr": "0x405913",
            "decompiledFuncCode": "void *__fastcall sub_405900(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_4058D0(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_405920",
            "funcStartAddr": "0x405920",
            "funcEndAddr": "0x405951",
            "decompiledFuncCode": "void __noreturn sub_405920()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_405960",
            "funcStartAddr": "0x405960",
            "funcEndAddr": "0x4059bd",
            "decompiledFuncCode": "__int64 sub_405960()\n{\n  int v0; // ebx\n  char *v2; // rbp\n  int *v3; // rax\n\n  v0 = sub_405C90();\n  if ( v0 < 0 && !ferror(stdout) )\n  {\n    v2 = dcgettext(0LL, \"cannot perform formatted output\", 5);\n    v3 = __errno_location();\n    error(status, *v3, v2);\n  }\n  return (unsigned int)v0;\n}\n"
        },
        {
            "funcName": "sub_4059C0",
            "funcStartAddr": "0x4059c0",
            "funcEndAddr": "0x405a54",
            "decompiledFuncCode": "__int64 sub_4059C0(__int64 a1, ...)\n{\n  gcc_va_list va; // [rsp+8h] [rbp-D0h] BYREF\n\n  va_start(va, a1);\n  return sub_405960(a1, va);\n}\n"
        },
        {
            "funcName": "sub_405A60",
            "funcStartAddr": "0x405a60",
            "funcEndAddr": "0x405ab9",
            "decompiledFuncCode": "__int64 __fastcall sub_405A60(FILE *stream)\n{\n  int v1; // ebx\n  char *v3; // rbp\n  int *v4; // rax\n\n  v1 = sub_405BD0(stream);\n  if ( v1 < 0 && !ferror(stream) )\n  {\n    v3 = dcgettext(0LL, \"cannot perform formatted output\", 5);\n    v4 = __errno_location();\n    error(status, *v4, v3);\n  }\n  return (unsigned int)v1;\n}\n"
        },
        {
            "funcName": "sub_405AC0",
            "funcStartAddr": "0x405ac0",
            "funcEndAddr": "0x405b4f",
            "decompiledFuncCode": "__int64 __fastcall sub_405AC0(FILE *a1)\n{\n  return sub_405A60(a1);\n}\n"
        },
        {
            "funcName": "sub_405B50",
            "funcStartAddr": "0x405b50",
            "funcEndAddr": "0x405bca",
            "decompiledFuncCode": "size_t __fastcall sub_405B50(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"Written by %s, %s, and %s.\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_405D10(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_405BD0",
            "funcStartAddr": "0x405bd0",
            "funcEndAddr": "0x405c8d",
            "decompiledFuncCode": "__int64 __fastcall sub_405BD0(FILE *s, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  size_t v4; // rbx\n  char *v5; // rbp\n  int *v7; // rax\n  int v8; // r13d\n  int *v9; // r12\n  size_t n; // [rsp+8h] [rbp-800h] BYREF\n  char v11[2040]; // [rsp+10h] [rbp-7F8h] BYREF\n\n  n = 2000LL;\n  v3 = (char *)sub_406410(v11, &n, a2, a3);\n  v4 = n;\n  if ( !v3 )\n    goto LABEL_10;\n  v5 = v3;\n  if ( fwrite(v3, 1uLL, n, s) >= v4 )\n  {\n    if ( v5 != v11 )\n      free(v5);\n    if ( v4 <= 0x7FFFFFFF )\n      return (unsigned int)v4;\n    *__errno_location() = 75;\nLABEL_10:\n    LODWORD(v4) = -1;\n    sub_406400(s);\n    return (unsigned int)v4;\n  }\n  LODWORD(v4) = -1;\n  if ( v5 != v11 )\n  {\n    v7 = __errno_location();\n    v8 = *v7;\n    v9 = v7;\n    free(v5);\n    *v9 = v8;\n  }\n  return (unsigned int)v4;\n}\n"
        },
        {
            "funcName": "sub_405C90",
            "funcStartAddr": "0x405c90",
            "funcEndAddr": "0x405ca2",
            "decompiledFuncCode": "__int64 __fastcall sub_405C90(__int64 a1, __int64 a2)\n{\n  return sub_405BD0(stdout, a1, a2);\n}\n"
        },
        {
            "funcName": "sub_405CB0",
            "funcStartAddr": "0x405cb0",
            "funcEndAddr": "0x405d0d",
            "decompiledFuncCode": "__int64 __fastcall sub_405CB0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_4062E0(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n    return 0xFFFFFFFFLL;\n  }\n  if ( !(_DWORD)result )\n    return result;\n  if ( v1 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)-(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_405D10",
            "funcStartAddr": "0x405d10",
            "funcEndAddr": "0x405d6e",
            "decompiledFuncCode": "bool __fastcall sub_405D10(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405D70",
            "funcStartAddr": "0x405d70",
            "funcEndAddr": "0x4062d2",
            "decompiledFuncCode": "const char *sub_405D70()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = qword_60D408;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_60D408 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"Written by %s, %s, and %s.\\n\" + 27);\nLABEL_20:\n          qword_60D408 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"Written by %s, %s, and %s.\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_4062E0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_4062E0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"Written by %s, %s, and %s.\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_4062E0",
            "funcStartAddr": "0x4062e0",
            "funcEndAddr": "0x40635b",
            "decompiledFuncCode": "int __fastcall sub_4062E0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_406360(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406360",
            "funcStartAddr": "0x406360",
            "funcEndAddr": "0x4063a0",
            "decompiledFuncCode": "int __fastcall sub_406360(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_4063A0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_4063A0",
            "funcStartAddr": "0x4063a0",
            "funcEndAddr": "0x4063f7",
            "decompiledFuncCode": "int __fastcall sub_4063A0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_406400",
            "funcStartAddr": "0x406400",
            "funcEndAddr": "0x406404",
            "decompiledFuncCode": "void __fastcall sub_406400(_DWORD *a1)\n{\n  *a1 |= 0x20u;\n}\n"
        },
        {
            "funcName": "sub_406410",
            "funcStartAddr": "0x40178e",
            "funcEndAddr": "0x401793",
            "decompiledFuncCode": "char *__fastcall sub_406410(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_408150(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_407F30(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_406410(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_408150(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_407F30(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_406410",
            "funcStartAddr": "0x40178e",
            "funcEndAddr": "0x401793",
            "decompiledFuncCode": "char *__fastcall sub_406410(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_408150(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_407F30(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_406410(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_408150(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_407F30(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_407F30",
            "funcStartAddr": "0x407f30",
            "funcEndAddr": "0x408149",
            "decompiledFuncCode": "__int64 __fastcall sub_407F30(int *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  _DWORD *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( *(_DWORD *)v2 )\n      {\n        case 1:\n        case 2:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *(_BYTE *)(v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3:\n        case 4:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *(_WORD *)(v2 + 16) = *v10;\n          goto LABEL_7;\n        case 5:\n        case 6:\n        case 0xD:\n        case 0xE:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          *(_DWORD *)(v2 + 16) = *v8;\n          goto LABEL_7;\n        case 7:\n        case 8:\n        case 9:\n        case 0xA:\n        case 0x11:\n        case 0x12:\n        case 0x13:\n        case 0x14:\n        case 0x15:\n        case 0x16:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *(_QWORD *)(v2 + 16) = *v5;\n          goto LABEL_7;\n        case 0xB:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *(_QWORD *)(v2 + 16) = *v14;\n          goto LABEL_7;\n        case 0xC:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *(long double *)(v2 + 16) = *v15;\n          goto LABEL_7;\n        case 0xF:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *(_QWORD *)(v2 + 16) = v21;\n          goto LABEL_7;\n        case 0x10:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_40B090;\n          *(_QWORD *)(v2 + 16) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 32LL;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_408150",
            "funcStartAddr": "0x408150",
            "funcEndAddr": "0x408e59",
            "decompiledFuncCode": "__int64 __fastcall sub_408150(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 v6; // r9\n  __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  char *v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  _QWORD *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  _QWORD *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  char *v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  _QWORD *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  _QWORD *v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  __int64 v94; // [rsp+38h] [rbp-50h]\n  __int64 v95; // [rsp+38h] [rbp-50h]\n  __int64 v96; // [rsp+38h] [rbp-50h]\n  __int64 v97; // [rsp+38h] [rbp-50h]\n  __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = a2 + 4;\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (char *)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *((_DWORD *)v12 + 4) = 0;\n  *((_QWORD *)v12 + 3) = 0LL;\n  *((_QWORD *)v12 + 4) = 0LL;\n  *((_QWORD *)v12 + 5) = -1LL;\n  *((_QWORD *)v12 + 6) = 0LL;\n  *((_QWORD *)v12 + 7) = 0LL;\n  *((_QWORD *)v12 + 8) = -1LL;\n  *((_QWORD *)v12 + 10) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_16;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_16;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_130;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_130;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_16:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case '\\'':\n        *((_DWORD *)v12 + 4) |= 1u;\n        goto LABEL_15;\n      case '-':\n        *((_DWORD *)v12 + 4) |= 2u;\n        goto LABEL_15;\n      case '+':\n        *((_DWORD *)v12 + 4) |= 4u;\n        goto LABEL_15;\n      case ' ':\n        *((_DWORD *)v12 + 4) |= 8u;\n        goto LABEL_15;\n      case '#':\n        *((_DWORD *)v12 + 4) |= 0x10u;\n        goto LABEL_15;\n    }\n    if ( v13 != 48 )\n      break;\n    *((_DWORD *)v12 + 4) |= 0x20u;\nLABEL_15:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *((_DWORD *)v12 + 4) |= 0x40u;\n    goto LABEL_15;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *((_QWORD *)v12 + 3) = v9;\n    *((_QWORD *)v12 + 4) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_39;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 == 36 )\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_130;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_130;\n      *((_QWORD *)v12 + 5) = v18;\n      v14 = v47 + 2;\n    }\n    else\n    {\nLABEL_39:\n      v18 = *((_QWORD *)v12 + 5);\n      if ( v18 == -1LL )\n      {\n        *((_QWORD *)v12 + 5) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v18 = v81++;\n      }\n    }\n    v19 = (_DWORD *)a3[1];\n    if ( v6 > v18 )\n    {\n      v20 = *a3;\nLABEL_42:\n      if ( v20 <= v18 )\n      {\n        do\n        {\n          ++v20;\n          v19[8 * v20 - 8] = 0;\n        }\n        while ( v20 <= v18 );\n        *a3 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_25;\n        }\n        goto LABEL_131;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_26;\nLABEL_47:\n      v22 = v9[1] == 42;\n      *((_QWORD *)v12 + 6) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *((_QWORD *)v12 + 7) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_26;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *((_QWORD *)v12 + 7) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_51;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 == 36 )\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_130;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *((_QWORD *)v12 + 8) = v26;\n          v24 = v72 + 2;\nLABEL_52:\n          v19 = (_DWORD *)a3[1];\n          if ( v6 > v26 )\n          {\n            v27 = *a3;\n            goto LABEL_54;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_162;\n              v27 = *a3;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)a3[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_160;\n              v27 = *a3;\n              if ( src != v40 )\n                goto LABEL_171;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *a3;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_171:\n            a3[1] = (unsigned __int64)v19;\nLABEL_54:\n            if ( v27 <= v26 )\n            {\n              do\n              {\n                ++v27;\n                v19[8 * v27 - 8] = 0;\n              }\n              while ( v27 <= v26 );\n              *a3 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_26;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_26;\n            }\n            goto LABEL_131;\n          }\nLABEL_159:\n          v40 = v19;\n          goto LABEL_160;\n        }\n      }\n      else\n      {\nLABEL_51:\n        v26 = *((_QWORD *)v12 + 8);\n        if ( v26 != -1LL )\n          goto LABEL_52;\n        *((_QWORD *)v12 + 8) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_52;\n        }\n      }\nLABEL_130:\n      v19 = (_DWORD *)a3[1];\nLABEL_131:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (_QWORD *)v4[1];\n      if ( v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_159;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_162;\n      v20 = *a3;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)a3[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_160;\n      v20 = *a3;\n      if ( src != v40 )\n        goto LABEL_93;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *a3;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_93:\n    a3[1] = (unsigned __int64)v19;\n    goto LABEL_42;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *((_QWORD *)v12 + 3) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = i + 1;\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - v9;\n      v9 = v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *((_QWORD *)v12 + 4) = v9;\n    v13 = *v9;\n  }\nLABEL_25:\n  if ( v13 == 46 )\n    goto LABEL_47;\nLABEL_26:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_33;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_33;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_33:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case '%':\n      goto LABEL_70;\n    case 'A':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'a':\n    case 'e':\n    case 'f':\n    case 'g':\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_62;\n    case 'C':\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_62;\n    case 'S':\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_62;\n    case 'X':\n    case 'o':\n    case 'u':\n    case 'x':\n      v29 = 10;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 6 : 4;\n        }\n      }\n      goto LABEL_62;\n    case 'c':\n      v29 = (v15 > 7) + 13;\n      goto LABEL_62;\n    case 'd':\n    case 'i':\n      v29 = 9;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 5 : 3;\n        }\n      }\n      goto LABEL_62;\n    case 'n':\n      v29 = 22;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( (v15 & 2) == 0 )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_62;\n    case 'p':\n      v29 = 17;\n      goto LABEL_62;\n    case 's':\n      v29 = (v15 > 7) + 15;\nLABEL_62:\n      if ( v11 == -1LL )\n      {\n        *((_QWORD *)v12 + 10) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v11 = v81++;\n      }\n      else\n      {\n        *((_QWORD *)v12 + 10) = v11;\n      }\n      v19 = (_DWORD *)a3[1];\n      if ( v6 > v11 )\n        goto LABEL_65;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_159;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_162;\n        goto LABEL_158;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_210;\n      if ( src == (_DWORD *)a3[1] )\n      {\n        v19 = src;\nLABEL_158:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *a3);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      a3[1] = (unsigned __int64)v19;\nLABEL_65:\n      v30 = *a3;\n      if ( *a3 <= v11 )\n      {\n        do\n        {\n          ++v30;\n          v19[8 * v30 - 8] = 0;\n        }\n        while ( v30 <= v11 );\n        *a3 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_131;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_70:\n      v12[72] = v13;\n      v32 = *v4;\n      *((_QWORD *)v12 + 1) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > (unsigned __int64)(v32 + 1) )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( v7 >= 0 )\n      {\n        v33 = 2 * v7;\n        if ( (unsigned __int64)(2 * v7) <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (_QWORD *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)a3[1];\n              if ( src != v40 )\n                goto LABEL_161;\n              goto LABEL_164;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_210;\n            v34 = (_QWORD *)v91[1];\n            v8 = *v91;\n            if ( v82 != v34 )\n              goto LABEL_77;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_77:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_210:\n      v40 = (_DWORD *)a3[1];\nLABEL_160:\n      if ( src != v40 )\n      {\nLABEL_161:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_162:\n      v58 = (_QWORD *)v4[1];\n      if ( v82 != v58 )\n        free(v58);\nLABEL_164:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_130;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408ED0",
            "funcStartAddr": "0x408ed0",
            "funcEndAddr": "0x408ee8",
            "decompiledFuncCode": "int __fastcall sub_408ED0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_60D1E8 )\n    v1 = (void *)qword_60D1E8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_408EE8",
            "funcStartAddr": "0x408ee8",
            "funcEndAddr": "0x408f08",
            "decompiledFuncCode": "__int64 __fastcall sub_408EE8(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_60CE30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 74
}