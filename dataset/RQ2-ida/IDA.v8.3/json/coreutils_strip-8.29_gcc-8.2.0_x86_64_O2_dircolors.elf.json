{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_dircolors.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401d70",
            "funcEndAddr": "0x4021a2",
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  __int64 v3; // r13\n  char v4; // bp\n  int v5; // eax\n  int v6; // r12d\n  char **v7; // rbx\n  const char *v8; // rbx\n  const char *v10; // rbx\n  char v11; // r12\n  const void *v12; // r12\n  size_t v13; // rbx\n  const char *v14; // r14\n  char *v15; // rax\n  const char *v16; // rdi\n  char *v17; // rax\n  const char *v18; // r13\n  const char *v19; // rbx\n  int *v20; // rax\n  __int64 v21; // rbx\n  char *v22; // rax\n  char *v23; // rax\n  char *v24; // rax\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n\n  LODWORD(v3) = 2;\n  v4 = 0;\n  sub_403110(*a2, a2, a3);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_409580(sub_402DE0);\n  while ( 1 )\n  {\n    v5 = sub_4089A0(a1, a2, \"bcp\", &off_409D80, 0LL);\n    if ( v5 == -1 )\n      break;\n    if ( v5 == 98 )\n    {\n      LODWORD(v3) = 0;\n    }\n    else\n    {\n      if ( v5 <= 98 )\n      {\n        if ( v5 == -131 )\n        {\n          sub_4051B0(\n            (_DWORD)stdout,\n            (unsigned int)\"dircolors\",\n            (unsigned int)&unk_4096B5,\n            (_DWORD)off_60F250,\n            (unsigned int)\"H. Peter Anvin\",\n            0);\n          exit(0);\n        }\n        if ( v5 == -130 )\n          sub_402A50(0);\nLABEL_44:\n        sub_402A50(1);\n      }\n      if ( v5 == 99 )\n      {\n        LODWORD(v3) = 1;\n      }\n      else\n      {\n        if ( v5 != 112 )\n          goto LABEL_44;\n        v4 = 1;\n      }\n    }\n  }\n  v6 = a1 - dword_60F2BC;\n  v7 = &a2[dword_60F2BC];\n  if ( (_DWORD)v3 != 2 && v4 )\n  {\n    v24 = dcgettext(\n            0LL,\n            \"the options to output dircolors' internal database and\\nto select a shell syntax are mutually exclusive\",\n            5);\n    error(0, 0, v24);\n    goto LABEL_44;\n  }\n  if ( (unsigned __int8)(v4 ^ 1) < v6 )\n  {\n    if ( v4 )\n    {\n      v21 = sub_404D30(*v7);\n      v22 = dcgettext(0LL, \"extra operand %s\", 5);\n      error(0, 0, v22, v21);\n      v23 = dcgettext(0LL, \"file operands cannot be combined with --print-database (-p)\", 5);\n      __fprintf_chk(stderr, 1LL, \"%s\\n\", v23);\n      goto LABEL_44;\n    }\n    goto LABEL_47;\n  }\n  if ( v4 )\n  {\n    v8 = \"# Configuration file for dircolors, a utility to help you set the\";\n    do\n    {\n      puts(v8);\n      v8 += strlen(v8) + 1;\n    }\n    while ( (unsigned __int64)(v8 - \"# Configuration file for dircolors, a utility to help you set the\") <= 0x104C );\n    return (unsigned __int8)v4 ^ 1u;\n  }\n  if ( (_DWORD)v3 == 2 )\n  {\n    v17 = getenv(\"SHELL\");\n    if ( v17 && *v17 )\n    {\n      v18 = (const char *)sub_402E80(v17);\n      if ( !strcmp(v18, \"csh\") )\n        LODWORD(v3) = 1;\n      else\n        v3 = strcmp(v18, \"tcsh\") == 0;\n      goto LABEL_22;\n    }\n    v25 = dcgettext(0LL, \"no SHELL environment variable, and no shell type option given\", 5);\n    error(1, 0, v25);\nLABEL_47:\n    v26 = sub_404D30(v7[1]);\n    v27 = dcgettext(0LL, \"extra operand %s\", 5);\n    error(0, 0, v27, v26);\n    goto LABEL_44;\n  }\nLABEL_22:\n  obstack_begin(&unk_60F320, 0LL, 0LL, malloc, free);\n  if ( v6 )\n  {\n    v10 = *v7;\n    if ( strcmp(v10, \"-\") && !sub_402F60(v10, \"r\", stdin) || (v11 = sub_402480(stdin), (unsigned int)sub_4055A0(stdin)) )\n    {\n      v19 = (const char *)sub_404BB0(0LL, 3LL, v10);\n      v20 = __errno_location();\n      error(0, *v20, \"%s\", v19);\n      return (unsigned __int8)v4 ^ 1u;\n    }\n    v4 = v11;\n  }\n  else\n  {\n    v4 = sub_402480(0LL);\n  }\n  if ( v4 )\n  {\n    v12 = ptr;\n    v13 = qword_60F338 - (_QWORD)ptr;\n    if ( (void *)qword_60F338 == ptr )\n      byte_60F370 |= 2u;\n    v14 = \"';\\nexport LS_COLORS\\n\";\n    v15 = (char *)(~qword_60F350 & (qword_60F350 + qword_60F338));\n    v16 = \"LS_COLORS='\";\n    if ( (unsigned __int64)&v15[-qword_60F328] > qword_60F340 - qword_60F328 )\n      v15 = (char *)qword_60F340;\n    qword_60F338 = (__int64)v15;\n    ptr = v15;\n    if ( (_DWORD)v3 )\n    {\n      v14 = \"'\\n\";\n      v16 = \"setenv LS_COLORS '\";\n    }\n    fputs_unlocked(v16, stdout);\n    fwrite_unlocked(v12, 1uLL, v13, stdout);\n    fputs_unlocked(v14, stdout);\n  }\n  return (unsigned __int8)v4 ^ 1u;\n}\n"
        },
        {
            "funcName": "sub_4021DB",
            "funcStartAddr": "0x4021db",
            "funcEndAddr": "0x4021fa",
            "decompiledFuncCode": "void *sub_4021DB()\n{\n  return &unk_60F2C8;\n}\n"
        },
        {
            "funcName": "sub_4021FA",
            "funcStartAddr": "0x4021fa",
            "funcEndAddr": "0x402231",
            "decompiledFuncCode": "__int64 sub_4021FA()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_402231",
            "funcStartAddr": "0x402231",
            "funcEndAddr": "0x402288",
            "decompiledFuncCode": "void *sub_402231()\n{\n  void *result; // rax\n\n  if ( !byte_60F308 )\n  {\n    while ( qword_60F310 < (unsigned __int64)(&qword_60EE48 - qword_60EE40 - 1) )\n      ((void (*)(void))qword_60EE40[++qword_60F310])();\n    result = sub_4021DB();\n    byte_60F308 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402288",
            "funcStartAddr": "0x402288",
            "funcEndAddr": "0x40228d",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_402288()\n{\n  return sub_4021FA();\n}\n"
        },
        {
            "funcName": "sub_402290",
            "funcStartAddr": "0x402290",
            "funcEndAddr": "0x402471",
            "decompiledFuncCode": "__int64 __fastcall sub_402290(unsigned __int8 *a1)\n{\n  __int64 result; // rax\n  char v2; // bp\n  unsigned __int8 *v3; // rbx\n  _BYTE *v4; // rax\n  _BYTE *v5; // rdx\n  _BYTE *v6; // rax\n  __int64 v7; // rcx\n  _BYTE *v8; // rdx\n\n  result = *a1;\n  if ( (_BYTE)result )\n  {\n    v2 = 1;\n    v3 = a1;\n    do\n    {\n      v7 = qword_60F340;\n      v8 = (_BYTE *)qword_60F338;\n      if ( (_BYTE)result == 61 )\n        goto LABEL_16;\n      if ( (char)result > 61 )\n      {\n        if ( (_BYTE)result != 92 && (_BYTE)result != 94 )\n          goto LABEL_21;\n        v2 ^= 1u;\n      }\n      else\n      {\n        if ( (_BYTE)result != 39 )\n        {\n          if ( (_BYTE)result == 58 )\n          {\nLABEL_16:\n            if ( v2 )\n            {\n              if ( qword_60F340 == qword_60F338 )\n              {\n                obstack_newchunk(&unk_60F320, 1LL, qword_60F338, qword_60F340);\n                v8 = (_BYTE *)qword_60F338;\n              }\n              qword_60F338 = (__int64)(v8 + 1);\n              *v8 = 92;\n              v7 = qword_60F340;\n              v8 = (_BYTE *)qword_60F338;\n              if ( qword_60F340 != qword_60F338 )\n                goto LABEL_11;\nLABEL_20:\n              obstack_newchunk(&unk_60F320, 1LL, v8, v7);\n              v8 = (_BYTE *)qword_60F338;\n              goto LABEL_11;\n            }\n          }\nLABEL_21:\n          v2 = 1;\n          goto LABEL_10;\n        }\n        if ( qword_60F340 == qword_60F338 )\n        {\n          obstack_newchunk(&unk_60F320, 1LL, qword_60F338, qword_60F340);\n          v8 = (_BYTE *)qword_60F338;\n        }\n        qword_60F338 = (__int64)(v8 + 1);\n        *v8 = 39;\n        v4 = (_BYTE *)qword_60F338;\n        if ( qword_60F340 == qword_60F338 )\n        {\n          obstack_newchunk(&unk_60F320, 1LL, v8, v7);\n          v4 = (_BYTE *)qword_60F338;\n        }\n        v5 = v4 + 1;\n        qword_60F338 = (__int64)(v4 + 1);\n        *v4 = 92;\n        v6 = (_BYTE *)qword_60F338;\n        if ( qword_60F340 == qword_60F338 )\n        {\n          obstack_newchunk(&unk_60F320, 1LL, v5, v7);\n          v6 = (_BYTE *)qword_60F338;\n        }\n        v2 = 1;\n        qword_60F338 = (__int64)(v6 + 1);\n        *v6 = 39;\n        v7 = qword_60F340;\n        v8 = (_BYTE *)qword_60F338;\n      }\nLABEL_10:\n      if ( (_BYTE *)v7 == v8 )\n        goto LABEL_20;\nLABEL_11:\n      ++v3;\n      qword_60F338 = (__int64)(v8 + 1);\n      *v8 = *(v3 - 1);\n      result = *v3;\n    }\n    while ( (_BYTE)result );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402480",
            "funcStartAddr": "0x402480",
            "funcEndAddr": "0x402a41",
            "decompiledFuncCode": "__int64 __fastcall sub_402480(FILE *stream, __int64 a2)\n{\n  char *v3; // rax\n  char *v4; // rbx\n  bool v5; // zf\n  const char *v6; // rax\n  int v7; // r15d\n  char *v8; // r12\n  __int64 v9; // rbp\n  char *v10; // rbx\n  const unsigned __int16 **v11; // rax\n  const unsigned __int16 *v12; // rsi\n  __int64 v13; // rcx\n  char *v14; // r13\n  char *v15; // rbx\n  const unsigned __int16 *v16; // rdi\n  __int64 v17; // rax\n  unsigned __int8 *v18; // rax\n  unsigned __int8 *i; // rsi\n  __int64 v20; // rax\n  unsigned __int8 *v21; // r13\n  __int64 v22; // rdx\n  __int64 v23; // rcx\n  char v24; // al\n  __int64 v25; // r13\n  char *v26; // rax\n  _BYTE *v27; // rax\n  __int64 v28; // rdx\n  __int64 v29; // rcx\n  _BYTE *v30; // rax\n  __int64 v31; // rdx\n  __int64 v32; // rcx\n  _BYTE *v33; // rax\n  __int64 v35; // rdx\n  __int64 v36; // rcx\n  _BYTE *v37; // rax\n  __int64 v38; // rdx\n  const char *v39; // rsi\n  __int64 v40; // rdx\n  __int64 v41; // rcx\n  char *v42; // rdx\n  _BYTE *v43; // rax\n  __int64 v44; // rcx\n  _BYTE *v45; // rax\n  char *v46; // rcx\n  char *v47; // rax\n  const unsigned __int16 **v48; // [rsp+0h] [rbp-68h]\n  __int64 v49; // [rsp+0h] [rbp-68h]\n  char *v50; // [rsp+0h] [rbp-68h]\n  char *v51; // [rsp+0h] [rbp-68h]\n  const char *v53; // [rsp+10h] [rbp-58h]\n  unsigned __int8 v54; // [rsp+1Bh] [rbp-4Dh]\n  int v55; // [rsp+1Ch] [rbp-4Ch]\n  char *lineptr; // [rsp+20h] [rbp-48h] BYREF\n  size_t n[8]; // [rsp+28h] [rbp-40h] BYREF\n\n  lineptr = 0LL;\n  n[0] = 0LL;\n  v3 = getenv(\"TERM\");\n  if ( v3 )\n  {\n    v4 = v3;\n    v5 = *v3 == 0;\n    v6 = \"none\";\n    if ( !v5 )\n      v6 = v4;\n    v53 = v6;\n  }\n  else\n  {\n    v53 = \"none\";\n  }\n  v54 = 1;\n  v7 = 3;\n  v8 = \"# Configuration file for dircolors, a utility to help you set the\";\n  v9 = 0LL;\nLABEL_6:\n  ++v9;\n  if ( !stream )\n  {\n    while ( 1 )\n    {\n      if ( v8 == \"8.29\" )\n        return v54;\n      v10 = v8;\n      v8 += strlen(v8) + 1;\nLABEL_9:\n      v11 = __ctype_b_loc();\n      v12 = *v11;\n      while ( 1 )\n      {\n        v13 = (unsigned __int8)*v10;\n        if ( (v12[v13] & 0x2000) == 0 )\n          break;\n        ++v10;\n      }\n      if ( !(_BYTE)v13 || (_BYTE)v13 == 35 )\n        goto LABEL_6;\n      v14 = v10;\n      do\n        ++v14;\n      while ( (((v12[(unsigned __int8)*v14] >> 13) ^ 1) & (*v14 != 0)) != 0 );\n      v48 = v11;\n      v15 = (char *)sub_405580(v10, v14 - v10);\n      if ( !*v14 )\n        goto LABEL_38;\n      v16 = *v48;\n      do\n        v17 = (unsigned __int8)*++v14;\n      while ( (v16[v17] & 0x2000) != 0 );\n      if ( !(_BYTE)v17 || (v18 = (unsigned __int8 *)v14, *v14 == 35) )\n      {\nLABEL_38:\n        if ( !v15 )\n          goto LABEL_6;\nLABEL_39:\n        v25 = sub_404BB0(0LL, 3LL, a2);\n        v26 = dcgettext(0LL, \"%s:%lu: invalid line;  missing second token\", 5);\n        error(0, 0, v26, v25, v9);\n        free(v15);\n        v54 = 0;\n        goto LABEL_6;\n      }\n      while ( 1 )\n      {\n        i = v18 + 1;\n        if ( v18[1] == 35 || v18[1] == 0 )\n          break;\n        ++v18;\n      }\n      if ( (v16[*v18] & 0x2000) != 0 )\n      {\n        for ( i = v18; (v16[*(i - 1)] & 0x2000) != 0; --i )\n          ;\n      }\n      v20 = sub_405580(v14, i - (unsigned __int8 *)v14);\n      v21 = (unsigned __int8 *)v20;\n      if ( !v15 )\n        goto LABEL_6;\n      if ( !v20 )\n        goto LABEL_39;\n      if ( !(unsigned int)sub_402D60(v15, \"TERM\") )\n      {\n        if ( !(unsigned int)sub_407910(v21, v53, 0LL) || (v5 = v7 == 2, v7 = 0, v5) )\n          v7 = 2;\n        goto LABEL_34;\n      }\n      if ( v7 == 2 )\n        break;\n      if ( v7 )\n      {\n        v24 = *v15;\n        if ( *v15 != 46 )\n          goto LABEL_30;\nLABEL_44:\n        v27 = (_BYTE *)qword_60F338;\n        if ( qword_60F340 == qword_60F338 )\n        {\n          obstack_newchunk(&unk_60F320, 1LL, v22, v23);\n          v27 = (_BYTE *)qword_60F338;\n        }\n        qword_60F338 = (__int64)(v27 + 1);\n        *v27 = 42;\n        sub_402290((unsigned __int8 *)v15);\n        v30 = (_BYTE *)qword_60F338;\n        if ( qword_60F340 == qword_60F338 )\n        {\n          obstack_newchunk(&unk_60F320, 1LL, v28, v29);\n          v30 = (_BYTE *)qword_60F338;\n        }\n        qword_60F338 = (__int64)(v30 + 1);\n        *v30 = 61;\n        sub_402290(v21);\n        v33 = (_BYTE *)qword_60F338;\n        if ( qword_60F340 != qword_60F338 )\n        {\nLABEL_49:\n          qword_60F338 = (__int64)(v33 + 1);\n          *v33 = 58;\n          goto LABEL_34;\n        }\nLABEL_58:\n        obstack_newchunk(&unk_60F320, 1LL, v31, v32);\nLABEL_57:\n        v33 = (_BYTE *)qword_60F338;\n        goto LABEL_49;\n      }\nLABEL_34:\n      ++v9;\n      free(v15);\n      free(v21);\n      if ( stream )\n        goto LABEL_7;\n    }\n    v24 = *v15;\n    v7 = 1;\n    if ( *v15 == 46 )\n      goto LABEL_44;\nLABEL_30:\n    if ( v24 == 42 )\n    {\n      sub_402290((unsigned __int8 *)v15);\n      if ( qword_60F340 != qword_60F338 )\n        goto LABEL_56;\n    }\n    else\n    {\n      if ( !(unsigned int)sub_402D60(v15, \"OPTIONS\")\n        || !(unsigned int)sub_402D60(v15, \"COLOR\")\n        || !(unsigned int)sub_402D60(v15, \"EIGHTBIT\") )\n      {\n        goto LABEL_34;\n      }\n      v38 = 0LL;\n      v39 = \"NORMAL\";\n      while ( 1 )\n      {\n        v55 = v38;\n        v49 = v38;\n        if ( !(unsigned int)sub_402D60(v15, v39) )\n          break;\n        v38 = v49 + 1;\n        v39 = off_409FC0[v49 + 1];\n        if ( !v39 )\n        {\n          if ( v7 != 3 )\n          {\n            if ( a2 )\n              v46 = (char *)sub_404BB0(0LL, 3LL, a2);\n            else\n              v46 = dcgettext(0LL, \"<internal>\", 5);\n            v50 = v46;\n            v47 = dcgettext(0LL, \"%s:%lu: unrecognized keyword %s\", 5);\n            error(0, 0, v47, v50, v9, v15);\n            v54 = 0;\n          }\n          goto LABEL_34;\n        }\n      }\n      if ( qword_60F340 == qword_60F338 )\n        obstack_newchunk(&unk_60F320, 1LL, v40, v41);\n      v42 = off_409E80[v55];\n      v43 = (_BYTE *)qword_60F338++;\n      v44 = (unsigned __int8)*v42;\n      *v43 = v44;\n      if ( qword_60F340 == qword_60F338 )\n      {\n        v51 = v42;\n        obstack_newchunk(&unk_60F320, 1LL, v42, v44);\n        v42 = v51;\n      }\n      v45 = (_BYTE *)qword_60F338;\n      v36 = ++qword_60F338;\n      v35 = (unsigned __int8)v42[1];\n      *v45 = v35;\n      if ( qword_60F340 != qword_60F338 )\n        goto LABEL_56;\n    }\n    obstack_newchunk(&unk_60F320, 1LL, v35, v36);\nLABEL_56:\n    v37 = (_BYTE *)qword_60F338++;\n    *v37 = 61;\n    sub_402290(v21);\n    if ( qword_60F340 == qword_60F338 )\n      goto LABEL_58;\n    goto LABEL_57;\n  }\nLABEL_7:\n  if ( __getdelim(&lineptr, n, 10, stream) > 0 )\n  {\n    v10 = lineptr;\n    goto LABEL_9;\n  }\n  free(lineptr);\n  return v54;\n}\n"
        },
        {
            "funcName": "sub_402A50",
            "funcStartAddr": "0x402a50",
            "funcEndAddr": "0x402d5d",
            "decompiledFuncCode": "void __fastcall __noreturn sub_402A50(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  __int64 *v12; // rax\n  const char *v13; // rbp\n  char *v14; // rax\n  char *v15; // rax\n  char *v16; // rax\n  char *v17; // rax\n  char *v18; // rax\n  char *v19; // rax\n  char *v20; // rax\n  char *v21; // rax\n  __int64 v22[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_60F388;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"Output commands to set the LS_COLORS environment variable.\\n\"\n         \"\\n\"\n         \"Determine format of output:\\n\"\n         \"  -b, --sh, --bourne-shell    output Bourne shell code to set LS_COLORS\\n\"\n         \"  -c, --csh, --c-shell        output C shell code to set LS_COLORS\\n\"\n         \"  -p, --print-database        output defaults\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"If FILE is specified, read it to determine which colors to use for which\\n\"\n          \"file types and extensions.  Otherwise, a precompiled database is used.\\n\"\n          \"For details on the format of these files, run 'dircolors --print-database'.\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v22[0] = (__int64)\"[\";\n  v12 = v22;\n  v22[1] = (__int64)\"test invocation\";\n  v22[2] = (__int64)\"coreutils\";\n  v22[3] = (__int64)\"Multi-call invocation\";\n  v22[4] = (__int64)\"sha224sum\";\n  v22[5] = (__int64)\"sha2 utilities\";\n  v22[6] = (__int64)\"sha256sum\";\n  v22[7] = (__int64)\"sha2 utilities\";\n  v22[8] = (__int64)\"sha384sum\";\n  v22[9] = (__int64)\"sha2 utilities\";\n  v22[10] = (__int64)\"sha512sum\";\n  v22[11] = (__int64)\"sha2 utilities\";\n  v22[12] = 0LL;\n  v22[13] = 0LL;\n  do\n    v12 += 2;\n  while ( *v12 && strcmp(\"dircolors\", (const char *)*v12) );\n  v13 = (const char *)v12[1];\n  if ( v13 )\n  {\n    v14 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v14, &unk_4096B5);\n    v15 = setlocale(5, 0LL);\n    if ( !v15 || !strncmp(v15, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v18 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v18, &unk_4096B5);\n    v19 = setlocale(5, 0LL);\n    if ( !v19 || !strncmp(v19, \"en_\", 3uLL) )\n    {\n      v13 = \"dircolors\";\n      v20 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v20, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v13 = \"dircolors\";\n  }\n  v21 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v21, \"dircolors\");\nLABEL_10:\n  v16 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v16, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v17 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v17, v13);\nLABEL_3:\n  exit(status);\n}\n"
        },
        {
            "funcName": "sub_402D60",
            "funcStartAddr": "0x402d60",
            "funcEndAddr": "0x402db9",
            "decompiledFuncCode": "__int64 __fastcall sub_402D60(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n  int v4; // r8d\n  char v5; // al\n  int v6; // r9d\n  char v7; // cl\n\n  result = 0LL;\n  if ( a1 != a2 )\n  {\n    v3 = 0LL;\n    do\n    {\n      v4 = *(unsigned __int8 *)(a1 + v3);\n      v5 = *(_BYTE *)(a1 + v3);\n      if ( (unsigned int)(v4 - 65) <= 0x19 )\n      {\n        LOBYTE(v4) = v4 + 32;\n        v5 += 32;\n      }\n      v6 = *(unsigned __int8 *)(a2 + v3);\n      v7 = *(_BYTE *)(a2 + v3);\n      if ( (unsigned int)(v6 - 65) <= 0x19 )\n      {\n        LOBYTE(v6) = v6 + 32;\n        v7 += 32;\n      }\n      if ( !v5 )\n        break;\n      ++v3;\n    }\n    while ( v5 == v7 );\n    return (unsigned __int8)v4 - (unsigned int)(unsigned __int8)v6;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402DE0",
            "funcStartAddr": "0x402de0",
            "funcEndAddr": "0x402e7e",
            "decompiledFuncCode": "__int64 sub_402DE0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_408EE0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60F378 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60F380 )\n      {\n        v5 = (const char *)sub_404B80();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_408EE0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402E80",
            "funcStartAddr": "0x402e80",
            "funcEndAddr": "0x402edb",
            "decompiledFuncCode": "_BYTE *__fastcall sub_402E80(_BYTE *a1)\n{\n  char v1; // dl\n  _BYTE *result; // rax\n  _BYTE *v3; // rcx\n  char v4; // si\n\n  v1 = *a1;\n  for ( result = a1; *result == 47; v1 = *result )\n    ++result;\n  if ( v1 )\n  {\n    v3 = result;\n    v4 = 0;\n    do\n    {\n      while ( v1 == 47 )\n      {\n        v1 = *++v3;\n        v4 = 1;\n        if ( !*v3 )\n          return result;\n      }\n      if ( v4 )\n      {\n        result = v3;\n        v4 = 0;\n      }\n      v1 = *++v3;\n    }\n    while ( *v3 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402EE0",
            "funcStartAddr": "0x402ee0",
            "funcEndAddr": "0x402f0b",
            "decompiledFuncCode": "size_t __fastcall sub_402EE0(const char *a1)\n{\n  size_t result; // rax\n  size_t v2; // rdx\n\n  result = strlen(a1);\n  if ( result > 1 )\n  {\n    do\n    {\n      v2 = result - 1;\n      if ( a1[result - 1] != 47 )\n        break;\n      --result;\n    }\n    while ( v2 != 1 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402F10",
            "funcStartAddr": "0x402f10",
            "funcEndAddr": "0x402f5b",
            "decompiledFuncCode": "__int64 __fastcall sub_402F10(int a1)\n{\n  unsigned int v1; // ebx\n  int v2; // eax\n\n  v1 = 1;\n  v2 = open(\"/dev/null\", 0);\n  if ( a1 == v2 )\n    return v1;\n  v1 = 0;\n  if ( v2 < 0 )\n    return v1;\n  close(v2);\n  *__errno_location() = 9;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_402F60",
            "funcStartAddr": "0x402f60",
            "funcEndAddr": "0x40310f",
            "decompiledFuncCode": "__int64 __fastcall sub_402F60(char *a1, char *a2, FILE *a3)\n{\n  int v3; // ebx\n  int *v4; // r14\n  char v5; // bl\n  char v6; // bp\n  char v7; // r13\n  __int64 v8; // r12\n  int v9; // r15d\n\n  v3 = fileno(a3);\n  v4 = __errno_location();\n  if ( v3 == 1 )\n  {\n    v5 = 0;\n    v6 = 0;\n  }\n  else\n  {\n    if ( v3 == 2 )\n    {\n      v5 = 0;\n    }\n    else\n    {\n      if ( !v3 )\n      {\n        v5 = 0;\n        v6 = 0;\n        v7 = 0;\nLABEL_11:\n        v8 = sub_407B50(a1, a2);\n        goto LABEL_12;\n      }\n      v5 = dup2(2, 2) != 2;\n    }\n    v6 = dup2(1, 1) != 1;\n  }\n  if ( !dup2(0, 0) )\n  {\n    v7 = 0;\n    if ( !v6 )\n      goto LABEL_9;\n    goto LABEL_18;\n  }\n  v7 = sub_402F10(0);\n  if ( !v7 )\n  {\n    v7 = 1;\n    v8 = 0LL;\nLABEL_12:\n    v9 = *v4;\n    if ( !v5 )\n      goto LABEL_13;\n    goto LABEL_27;\n  }\n  if ( v6 )\n  {\nLABEL_18:\n    v6 = sub_402F10(1);\n    if ( !v6 )\n    {\n      v9 = *v4;\n      v8 = 0LL;\n      if ( v5 )\n        close(2);\n      goto LABEL_21;\n    }\n  }\nLABEL_9:\n  if ( !v5 )\n    goto LABEL_11;\n  v5 = sub_402F10(2);\n  if ( v5 )\n    goto LABEL_11;\n  v9 = *v4;\n  v8 = 0LL;\nLABEL_27:\n  close(2);\nLABEL_13:\n  if ( !v6 )\n  {\n    if ( !v7 )\n      goto LABEL_15;\nLABEL_22:\n    close(0);\n    if ( v8 )\n      return v8;\nLABEL_23:\n    *v4 = v9;\n    return v8;\n  }\nLABEL_21:\n  close(1);\n  if ( v7 )\n    goto LABEL_22;\nLABEL_15:\n  if ( !v8 )\n    goto LABEL_23;\n  return v8;\n}\n"
        },
        {
            "funcName": "sub_403110",
            "funcStartAddr": "0x403110",
            "funcEndAddr": "0x4031a9",
            "decompiledFuncCode": "char *__fastcall sub_403110(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60F388 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4031B0",
            "funcStartAddr": "0x4031b0",
            "funcEndAddr": "0x4032a2",
            "decompiledFuncCode": "const char *__fastcall sub_4031B0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_408FA0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40B1C1;\n      if ( !v5 )\n        return (const char *)&unk_40B1B6;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40B1BD;\n    if ( !v5 )\n      return (const char *)&unk_40B1BA;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"setenv LS_COLORS '\" + 17;\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_4032B0",
            "funcStartAddr": "0x401d40",
            "funcEndAddr": "0x401d45",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4032B0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"setenv LS_COLORS '\" + 17;\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4032B0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"setenv LS_COLORS '\" + 17;\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4032B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408A20((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4032B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4031B0(\"`\", a5);\n        v51 = (char *)sub_4031B0((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_4032B0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"setenv LS_COLORS '\" + 17;\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4032B0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"setenv LS_COLORS '\" + 17;\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4032B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408A20((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4032B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4031B0(\"`\", a5);\n        v51 = (char *)sub_4031B0((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_4032B0",
            "funcStartAddr": "0x401d40",
            "funcEndAddr": "0x401d45",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4032B0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"setenv LS_COLORS '\" + 17;\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4032B0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"setenv LS_COLORS '\" + 17;\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4032B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408A20((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4032B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4031B0(\"`\", a5);\n        v51 = (char *)sub_4031B0((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_4032B0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"setenv LS_COLORS '\" + 17;\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"setenv LS_COLORS '\" + 17;\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4032B0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"setenv LS_COLORS '\" + 17;\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4032B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408A20((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4032B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4031B0(\"`\", a5);\n        v51 = (char *)sub_4031B0((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_4044E0",
            "funcStartAddr": "0x401d45",
            "funcEndAddr": "0x401d4a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4044E0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_60F298;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405540();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60F298 == &xmmword_60F2A0 )\n    {\n      v7 = (__m128i *)sub_405350(0LL, v9);\n      off_60F298 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60F2A0);\n    }\n    else\n    {\n      off_60F298 = (void *)sub_405350(off_60F298, v9);\n      v7 = (__m128i *)off_60F298;\n    }\n    memset(&v7[dword_60F2B0], 0, 16LL * (a1 + 1 - dword_60F2B0));\n    dword_60F2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4032B0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F3A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4052F0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4032B0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_4044E0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_60F298;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405540();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60F298 == &xmmword_60F2A0 )\n    {\n      v7 = (__m128i *)sub_405350(0LL, v9);\n      off_60F298 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60F2A0);\n    }\n    else\n    {\n      off_60F298 = (void *)sub_405350(off_60F298, v9);\n      v7 = (__m128i *)off_60F298;\n    }\n    memset(&v7[dword_60F2B0], 0, 16LL * (a1 + 1 - dword_60F2B0));\n    dword_60F2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4032B0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F3A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4052F0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4032B0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_4044E0",
            "funcStartAddr": "0x401d45",
            "funcEndAddr": "0x401d4a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4044E0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_60F298;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405540();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60F298 == &xmmword_60F2A0 )\n    {\n      v7 = (__m128i *)sub_405350(0LL, v9);\n      off_60F298 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60F2A0);\n    }\n    else\n    {\n      off_60F298 = (void *)sub_405350(off_60F298, v9);\n      v7 = (__m128i *)off_60F298;\n    }\n    memset(&v7[dword_60F2B0], 0, 16LL * (a1 + 1 - dword_60F2B0));\n    dword_60F2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4032B0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F3A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4052F0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4032B0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_4044E0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_60F298;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405540();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60F298 == &xmmword_60F2A0 )\n    {\n      v7 = (__m128i *)sub_405350(0LL, v9);\n      off_60F298 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60F2A0);\n    }\n    else\n    {\n      off_60F298 = (void *)sub_405350(off_60F298, v9);\n      v7 = (__m128i *)off_60F298;\n    }\n    memset(&v7[dword_60F2B0], 0, 16LL * (a1 + 1 - dword_60F2B0));\n    dword_60F2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4032B0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F3A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4052F0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4032B0(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_404680",
            "funcStartAddr": "0x404680",
            "funcEndAddr": "0x4046b4",
            "decompiledFuncCode": "__int64 __fastcall sub_404680(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_60F4A0;\n  result = sub_4054F0(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404770",
            "funcStartAddr": "0x404770",
            "funcEndAddr": "0x4047e2",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404770(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_60F4A0;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_4032B0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((const char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4047F0",
            "funcStartAddr": "0x4047f0",
            "funcEndAddr": "0x4048d1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4047F0(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_60F4A0;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_4032B0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((const char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_4052F0(v11 + 1);\n  sub_4032B0(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((const char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_4048F0",
            "funcStartAddr": "0x4048f0",
            "funcEndAddr": "0x404985",
            "decompiledFuncCode": "void sub_4048F0()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)off_60F298;\n  if ( dword_60F2B0 > 1 )\n  {\n    v1 = (void **)((char *)off_60F298 + 24);\n    v2 = (void **)((char *)off_60F298 + 16 * (unsigned int)(dword_60F2B0 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_60F3A0 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_60F2A0 = 256LL;\n    *((_QWORD *)&xmmword_60F2A0 + 1) = &unk_60F3A0;\n  }\n  if ( v0 != &xmmword_60F2A0 )\n  {\n    free(v0);\n    off_60F298 = &xmmword_60F2A0;\n  }\n  dword_60F2B0 = 1;\n}\n"
        },
        {
            "funcName": "sub_404A00",
            "funcStartAddr": "0x401d4a",
            "funcEndAddr": "0x401d4f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404A00(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4044E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_404A00(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4044E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_404A00",
            "funcStartAddr": "0x401d4a",
            "funcEndAddr": "0x401d4f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404A00(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4044E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_404A00(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4044E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_404A70",
            "funcStartAddr": "0x401d4f",
            "funcEndAddr": "0x401d54",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404A70(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4044E0(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_404A70(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4044E0(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_404A70",
            "funcStartAddr": "0x401d4f",
            "funcEndAddr": "0x401d54",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404A70(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4044E0(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_404A70(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4044E0(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_404B00",
            "funcStartAddr": "0x404b00",
            "funcEndAddr": "0x404b70",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404B00(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_60F4D0;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F4A0);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F4B0);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F4C0);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_4044E0(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_404B80",
            "funcStartAddr": "0x404b80",
            "funcEndAddr": "0x404b91",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404B80(__int64 a1)\n{\n  return sub_404B00(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_404BB0",
            "funcStartAddr": "0x401d54",
            "funcEndAddr": "0x401d59",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404BB0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4044E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_404BB0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4044E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_404BB0",
            "funcStartAddr": "0x401d54",
            "funcEndAddr": "0x401d59",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404BB0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4044E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_404BB0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4044E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_404C20",
            "funcStartAddr": "0x404c20",
            "funcEndAddr": "0x404c8c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404C20(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F4A0);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F4B0);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_60F4C0);\n  v8 = qword_60F4D0;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_4044E0(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_404D30",
            "funcStartAddr": "0x404d30",
            "funcEndAddr": "0x404d46",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404D30(__int64 a1)\n{\n  return sub_4044E0(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_60F260);\n}\n"
        },
        {
            "funcName": "sub_404D50",
            "funcStartAddr": "0x401d59",
            "funcEndAddr": "0x401d5e",
            "decompiledFuncCode": "__int64 __fastcall sub_404D50(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_404D50(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_404D50",
            "funcStartAddr": "0x401d59",
            "funcEndAddr": "0x401d5e",
            "decompiledFuncCode": "__int64 __fastcall sub_404D50(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_404D50(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_405150",
            "funcStartAddr": "0x405150",
            "funcEndAddr": "0x4051b0",
            "decompiledFuncCode": "__int64 __fastcall sub_405150(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_404D50(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_404D50(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_4051B0",
            "funcStartAddr": "0x4051b0",
            "funcEndAddr": "0x40526c",
            "decompiledFuncCode": "__int64 __fastcall sub_4051B0(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_404D50(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_404D50(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_405270",
            "funcStartAddr": "0x405270",
            "funcEndAddr": "0x4052e4",
            "decompiledFuncCode": "int sub_405270()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_4096B5);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_4052F0",
            "funcStartAddr": "0x4052f0",
            "funcEndAddr": "0x40530a",
            "decompiledFuncCode": "void *__fastcall sub_4052F0(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_405540();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405340",
            "funcStartAddr": "0x405340",
            "funcEndAddr": "0x405342",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_405340(size_t a1)\n{\n  return sub_4052F0(a1);\n}\n"
        },
        {
            "funcName": "sub_405350",
            "funcStartAddr": "0x405350",
            "funcEndAddr": "0x405386",
            "decompiledFuncCode": "void *__fastcall sub_405350(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_405540();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4054A0",
            "funcStartAddr": "0x4054a0",
            "funcEndAddr": "0x4054b7",
            "decompiledFuncCode": "void *__fastcall sub_4054A0(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_4052F0(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_4054C0",
            "funcStartAddr": "0x4054c0",
            "funcEndAddr": "0x4054ee",
            "decompiledFuncCode": "__int64 __fastcall sub_4054C0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_405540(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_4054F0",
            "funcStartAddr": "0x4054f0",
            "funcEndAddr": "0x405518",
            "decompiledFuncCode": "void *__fastcall sub_4054F0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_4052F0(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_405520",
            "funcStartAddr": "0x405520",
            "funcEndAddr": "0x405533",
            "decompiledFuncCode": "void *__fastcall sub_405520(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_4054F0(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_405540",
            "funcStartAddr": "0x405540",
            "funcEndAddr": "0x405571",
            "decompiledFuncCode": "void __noreturn sub_405540()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_405580",
            "funcStartAddr": "0x405580",
            "funcEndAddr": "0x405598",
            "decompiledFuncCode": "char *__fastcall sub_405580(const char *a1, size_t a2)\n{\n  char *result; // rax\n\n  result = strndup(a1, a2);\n  if ( !result )\n    sub_405540();\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4055A0",
            "funcStartAddr": "0x4055a0",
            "funcEndAddr": "0x40561b",
            "decompiledFuncCode": "int __fastcall sub_4055A0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_405620(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405620",
            "funcStartAddr": "0x405620",
            "funcEndAddr": "0x405660",
            "decompiledFuncCode": "int __fastcall sub_405620(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_407BF0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_405660",
            "funcStartAddr": "0x405660",
            "funcEndAddr": "0x405759",
            "decompiledFuncCode": "_DWORD *__fastcall sub_405660(_DWORD *a1)\n{\n  __int64 v1; // r12\n  _DWORD *v2; // rbx\n  int v3; // edx\n  unsigned __int64 v4; // rcx\n  int v6; // edx\n\n  v1 = 3221227009LL;\n  v2 = a1;\nLABEL_2:\n  while ( 1 )\n  {\n    v3 = v2[1];\n    if ( !v3 )\n      return a1;\n    while ( v3 != 91 )\n    {\n      v4 = (unsigned int)(v3 - 33);\n      if ( (unsigned int)v4 <= 0x1F )\n      {\n        if ( _bittest64(&v1, v4) && v2[2] == 40 )\n        {\n          v2 = (_DWORD *)sub_405660(v2 + 2);\n          goto LABEL_2;\n        }\n        if ( v3 == 41 )\n          return v2 + 2;\n      }\n      ++v2;\n      v3 = v2[1];\n      if ( !v3 )\n        return a1;\n    }\n    if ( !dword_60F4D8 )\n      dword_60F4D8 = getenv(\"POSIXLY_CORRECT\") == 0LL ? -1 : 1;\n    v6 = v2[2];\n    if ( v6 == 33 || dword_60F4D8 < 0 && v6 == 94 )\n    {\n      v6 = v2[3];\n      v2 += 3;\n    }\n    else\n    {\n      v2 += 2;\n    }\n    if ( v6 == 93 )\n    {\n      v6 = v2[1];\n      ++v2;\n    }\n    while ( v6 != 93 )\n    {\n      if ( !v6 )\n        return a1;\n      v6 = v2[1];\n      ++v2;\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_405760",
            "funcStartAddr": "0x405760",
            "funcEndAddr": "0x405859",
            "decompiledFuncCode": "unsigned __int8 *__fastcall sub_405760(unsigned __int8 *a1)\n{\n  __int64 v1; // r12\n  unsigned __int8 *v2; // rbx\n  int v3; // edx\n  unsigned __int8 v5; // dl\n\n  v1 = 3221227009LL;\n  v2 = a1;\nLABEL_2:\n  while ( 1 )\n  {\n    v3 = v2[1];\n    if ( !(_BYTE)v3 )\n      return a1;\n    while ( (_BYTE)v3 != 91 )\n    {\n      if ( (unsigned __int8)(v3 - 33) <= 0x1Fu )\n      {\n        if ( _bittest64(&v1, (unsigned int)(v3 - 33)) && v2[2] == 40 )\n        {\n          v2 = (unsigned __int8 *)sub_405760(v2 + 2);\n          goto LABEL_2;\n        }\n        if ( (_BYTE)v3 == 41 )\n          return v2 + 2;\n      }\n      v3 = (++v2)[1];\n      if ( !(_BYTE)v3 )\n        return a1;\n    }\n    if ( !dword_60F4D8 )\n      dword_60F4D8 = getenv(\"POSIXLY_CORRECT\") == 0LL ? -1 : 1;\n    v5 = v2[2];\n    if ( v5 == 33 || dword_60F4D8 < 0 && v5 == 94 )\n    {\n      v5 = v2[3];\n      v2 += 3;\n    }\n    else\n    {\n      v2 += 2;\n    }\n    if ( v5 == 93 )\n      v5 = *++v2;\n    while ( v5 != 93 )\n    {\n      if ( !v5 )\n        return a1;\n      v5 = *++v2;\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_405860",
            "funcStartAddr": "0x405860",
            "funcEndAddr": "0x405de3",
            "decompiledFuncCode": "__int64 __fastcall sub_405860(\n        int a1,\n        __int64 a2,\n        unsigned __int64 a3,\n        unsigned __int64 a4,\n        unsigned __int8 a5,\n        unsigned int a6)\n{\n  unsigned int v6; // r12d\n  int v7; // eax\n  __int64 v8; // r14\n  const wchar_t *v9; // rsi\n  size_t *v10; // rbx\n  __int64 v11; // r15\n  __int64 v12; // r13\n  unsigned __int64 v13; // rdx\n  wchar_t v15; // eax\n  __int64 v16; // rdx\n  unsigned __int64 v17; // rdx\n  unsigned __int64 v18; // rax\n  void *v19; // rsp\n  wchar_t *v20; // rax\n  char *v21; // rax\n  size_t *v22; // r13\n  __int64 v23; // rbx\n  unsigned __int64 v24; // rax\n  void *v25; // rsp\n  __int64 v26; // r13\n  unsigned __int64 v27; // r14\n  unsigned int v28; // r12d\n  __int64 v29; // rax\n  unsigned __int64 v30; // rbx\n  unsigned __int64 v31; // r15\n  _BOOL8 v32; // rcx\n  _BOOL8 v33; // rcx\n  unsigned __int64 v34; // r15\n  unsigned __int64 v35; // r14\n  unsigned int v36; // ebx\n  _QWORD *v37; // r13\n  __int64 v38; // rcx\n  unsigned __int64 v39; // r15\n  unsigned int v40; // ebx\n  wchar_t *v41; // rax\n  __int64 v42; // [rsp+0h] [rbp-80h] BYREF\n  const wchar_t *v43; // [rsp+8h] [rbp-78h] BYREF\n  __int64 v44; // [rsp+10h] [rbp-70h]\n  unsigned __int64 v45; // [rsp+18h] [rbp-68h]\n  unsigned __int8 v46; // [rsp+23h] [rbp-5Dh]\n  unsigned int v47; // [rsp+24h] [rbp-5Ch]\n  unsigned __int64 v48; // [rsp+28h] [rbp-58h]\n  __int64 v49; // [rsp+30h] [rbp-50h]\n  size_t v50; // [rsp+38h] [rbp-48h]\n  size_t v51; // [rsp+48h] [rbp-38h] BYREF\n\n  LOBYTE(v6) = a5;\n  LODWORD(v49) = a1;\n  v45 = a3;\n  v48 = a4;\n  v47 = a6;\n  v46 = a5;\n  v51 = 0LL;\n  v50 = wcslen((const wchar_t *)a2);\n  v7 = *(_DWORD *)(a2 + 4);\n  if ( !v7 )\n    return 0xFFFFFFFFLL;\n  v8 = a2 + 4;\n  v44 = a2;\n  v9 = (const wchar_t *)(a2 + 4);\n  v10 = &v51;\n  v11 = 3221227009LL;\n  v12 = 0LL;\n  while ( 2 )\n  {\n    while ( v7 == 91 )\n    {\n      if ( !dword_60F4D8 )\n      {\n        v43 = v9;\n        v21 = getenv(\"POSIXLY_CORRECT\");\n        v9 = v43;\n        dword_60F4D8 = v21 == 0LL ? -1 : 1;\n      }\n      v15 = *(_DWORD *)(v8 + 4);\n      if ( v15 == 33 || dword_60F4D8 < 0 && v15 == 94 )\n      {\n        v16 = v8 + 8;\n        v15 = *(_DWORD *)(v8 + 8);\n      }\n      else\n      {\n        v16 = v8 + 4;\n      }\n      if ( v15 == 93 )\n      {\n        v15 = *(_DWORD *)(v16 + 4);\n        v16 += 4LL;\n      }\n      while ( 1 )\n      {\n        v8 = v16 + 4;\n        if ( v15 == 93 )\n          break;\n        if ( !v15 )\n          return 0xFFFFFFFFLL;\n        v15 = *(_DWORD *)v8;\n        v16 += 4LL;\n      }\n      v7 = *(_DWORD *)(v16 + 4);\nLABEL_6:\n      if ( !v7 )\n        return 0xFFFFFFFFLL;\n    }\n    while ( 1 )\n    {\n      v13 = (unsigned int)(v7 - 33);\n      if ( (unsigned int)v13 > 0x1F )\n      {\n        if ( v7 == 124 && !v12 )\n        {\n          v17 = v50;\n          if ( (unsigned int)(v49 - 63) > 1 )\n            v17 = ((v8 - (__int64)v9) >> 2) + 1;\n          v18 = (4 * v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;\n          if ( v18 - 8 > 0x1F37 || v17 > 0x3FFFFFFFFFFFFFFFLL )\n            return 0xFFFFFFFFLL;\n          v19 = alloca(v18 + 8);\n          v20 = wmempcpy((wchar_t *)&v43, v9, (v8 - (__int64)v9) >> 2);\n          v9 = (const wchar_t *)(v8 + 4);\n          *v20 = 0;\n          v7 = *(_DWORD *)(v8 + 4);\n          v8 += 4LL;\n          v42 = 0LL;\n          *v10 = (size_t)&v42;\n          v10 = (size_t *)&v42;\n          v12 = 0LL;\n        }\n        else\n        {\nLABEL_5:\n          v7 = *(_DWORD *)(v8 + 4);\n          v8 += 4LL;\n        }\n        goto LABEL_6;\n      }\n      if ( !_bittest64(&v11, v13) || *(_DWORD *)(v8 + 4) != 40 )\n        break;\n      ++v12;\n      v8 += 4LL;\n      v7 = 40;\n    }\n    if ( v7 != 41 )\n      goto LABEL_5;\n    if ( v12 )\n    {\n      v7 = *(_DWORD *)(v8 + 4);\n      --v12;\n      v8 += 4LL;\n      if ( !v7 )\n        return 0xFFFFFFFFLL;\n      continue;\n    }\n    break;\n  }\n  v22 = v10;\n  v23 = v44;\n  if ( (unsigned int)(v49 - 63) > 1 )\n    v50 = ((v8 - (__int64)v9) >> 2) + 1;\n  v24 = (4 * v50 + 15) & 0xFFFFFFFFFFFFFFF8LL;\n  if ( v24 - 8 > 0x1F37 || v50 > 0x3FFFFFFFFFFFFFFFLL )\n    return 0xFFFFFFFFLL;\n  v25 = alloca(v24 + 8);\n  *wmempcpy((wchar_t *)&v43, v9, (v8 - (__int64)v9) >> 2) = 0;\n  *v22 = (size_t)&v42;\n  v26 = v51;\n  v42 = 0LL;\n  if ( !v51 )\n    __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 0x454u, \"ext_wmatch\");\n  if ( *(_DWORD *)(v8 - 4) != 41 )\n    __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 0x455u, \"ext_wmatch\");\n  switch ( (int)v49 )\n  {\n    case '!':\n      if ( v45 > v48 )\n        return 1LL;\n      v34 = v45;\n      v50 = v51;\n      v49 = v8;\n      v35 = v45;\n      v36 = v47 & 0xFFFFFFFB;\n      if ( (v47 & 1) != 0 )\n        v36 = v47;\n      while ( 2 )\n      {\n        v37 = (_QWORD *)v50;\n        while ( (unsigned int)sub_405DF0(v37 + 1, v34, v35, (unsigned __int8)v6, v36) )\n        {\n          v37 = (_QWORD *)*v37;\n          if ( !v37 )\n          {\n            if ( v34 == v35 )\n            {\n              v38 = (unsigned __int8)v6;\n            }\n            else\n            {\n              v38 = 0LL;\n              if ( *(_DWORD *)(v35 - 4) == 47 )\n                v38 = (v47 & 5) == 5;\n            }\n            if ( !(unsigned int)sub_405DF0(v49, v35, v48, v38, v36) )\n              return 0LL;\n            break;\n          }\n        }\n        v35 += 4LL;\n        if ( v48 >= v35 )\n          continue;\n        break;\n      }\n      return 1LL;\n    case '*':\n      if ( (unsigned int)sub_405DF0(v8, v45, v48, (unsigned __int8)v6, v47) )\n        goto LABEL_42;\n      return 0LL;\n    case '+':\nLABEL_42:\n      v44 = v8;\n      v27 = v45;\n      v28 = v47 & 0xFFFFFFFB;\n      if ( (v47 & 1) != 0 )\n        v28 = v47;\n      v29 = v23 - 4;\n      LODWORD(v49) = v47 & 1;\n      v30 = v48;\n      v43 = (const wchar_t *)v29;\n      do\n      {\n        if ( v27 <= v30 )\n        {\n          v31 = v27;\n          LODWORD(v50) = v46;\n          do\n          {\n            if ( !(unsigned int)sub_405DF0(v26 + 8, v27, v31, (unsigned int)v50, v28) )\n            {\n              if ( v27 == v31 )\n              {\n                if ( !(unsigned int)sub_405DF0(v44, v27, v30, (unsigned int)v50, v28) )\n                  return 0LL;\n              }\n              else\n              {\n                v32 = 0LL;\n                if ( *(_DWORD *)(v31 - 4) == 47 )\n                  v32 = (v47 & 5) == 5;\n                if ( !(unsigned int)sub_405DF0(v44, v31, v30, v32, v28) )\n                  return 0LL;\n                v33 = 0LL;\n                if ( *(_DWORD *)(v31 - 4) == 47 )\n                  v33 = (v47 & 5) == 5;\n                if ( !(unsigned int)sub_405DF0(v43, v31, v30, v33, v28) )\n                  return 0LL;\n              }\n              v26 = v51;\n            }\n            v31 += 4LL;\n          }\n          while ( v30 >= v31 );\n        }\n        v26 = *(_QWORD *)v26;\n        v51 = v26;\n      }\n      while ( v26 );\n      return 1LL;\n    case '?':\n      v6 = (unsigned __int8)v6;\n      if ( (unsigned int)sub_405DF0(v8, v45, v48, (unsigned __int8)v6, v47) )\n        goto LABEL_72;\n      return 0LL;\n    case '@':\n      v6 = (unsigned __int8)v6;\nLABEL_72:\n      v39 = v45;\n      v40 = v47 & 0xFFFFFFFB;\n      if ( (v47 & 1) != 0 )\n        v40 = v47;\n      break;\n    default:\n      __assert_fail(\"! \\\"Invalid extended matching operator\\\"\", \"lib/fnmatch_loop.c\", 0x4ADu, \"ext_wmatch\");\n  }\n  while ( 1 )\n  {\n    v41 = wcscat((wchar_t *)(v26 + 8), (const wchar_t *)v8);\n    if ( !(unsigned int)sub_405DF0(v41, v39, v48, v6, v40) )\n      break;\n    v26 = *(_QWORD *)v26;\n    v51 = v26;\n    if ( !v26 )\n      return 1LL;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_405DF0",
            "funcStartAddr": "0x405df0",
            "funcEndAddr": "0x4068cc",
            "decompiledFuncCode": "__int64 __fastcall sub_405DF0(wint_t *a1, const wchar_t *a2, unsigned __int64 a3, unsigned __int8 a4, unsigned int a5)\n{\n  const wchar_t *v5; // r14\n  wint_t v7; // r15d\n  int v9; // r12d\n  int v10; // r13d\n  wint_t *v11; // rbp\n  wint_t v12; // eax\n  wint_t v13; // eax\n  wint_t v14; // r8d\n  wint_t v15; // eax\n  wint_t *v16; // r14\n  wint_t *v17; // r15\n  wint_t v18; // eax\n  wint_t v19; // ebx\n  int v20; // r14d\n  wint_t *i; // rsi\n  wint_t v22; // edx\n  _DWORD *v23; // rsi\n  bool v24; // di\n  wint_t v25; // eax\n  __int64 result; // rax\n  wint_t *v27; // rax\n  int v28; // ebp\n  const wchar_t *v29; // r14\n  wint_t *v30; // r13\n  wint_t v31; // r11d\n  wint_t *v32; // r15\n  bool v33; // dl\n  wint_t *v34; // rax\n  wchar_t *v35; // rax\n  wint_t v36; // r11d\n  wchar_t *v37; // r9\n  unsigned __int8 v38; // r10\n  wint_t v39; // eax\n  wint_t *v40; // r15\n  wint_t v41; // r12d\n  unsigned int v42; // r14d\n  wint_t *v43; // r13\n  unsigned __int64 v44; // rbx\n  wint_t v45; // eax\n  wint_t *v46; // r14\n  __int64 v47; // rdx\n  wint_t v48; // eax\n  char *v49; // rax\n  unsigned __int64 v50; // rax\n  __int64 v51; // rdx\n  unsigned int v52; // eax\n  wint_t *v53; // r15\n  unsigned int v54; // ebp\n  unsigned __int64 v55; // r12\n  unsigned __int64 v56; // rcx\n  int *v57; // r8\n  int v58; // edx\n  _DWORD *v59; // rbp\n  int v60; // eax\n  wint_t *v61; // rax\n  wint_t *v62; // rbp\n  char *v63; // rsi\n  int *v64; // rdx\n  int v65; // eax\n  wctype_t v66; // rax\n  wint_t *v67; // r9\n  __int64 v68; // [rsp+8h] [rbp-580h]\n  wchar_t *v69; // [rsp+8h] [rbp-580h]\n  const wchar_t *v70; // [rsp+8h] [rbp-580h]\n  bool v71; // [rsp+8h] [rbp-580h]\n  wint_t wca; // [rsp+10h] [rbp-578h]\n  unsigned __int8 wcc; // [rsp+10h] [rbp-578h]\n  unsigned __int8 wcb; // [rsp+10h] [rbp-578h]\n  unsigned int v76; // [rsp+18h] [rbp-570h]\n  unsigned __int8 v77; // [rsp+1Ch] [rbp-56Ch]\n  int v78; // [rsp+1Ch] [rbp-56Ch]\n  unsigned __int8 v79; // [rsp+1Ch] [rbp-56Ch]\n  wint_t v80; // [rsp+1Ch] [rbp-56Ch]\n  unsigned __int8 v81; // [rsp+1Ch] [rbp-56Ch]\n  unsigned __int8 v82; // [rsp+1Ch] [rbp-56Ch]\n  int v83; // [rsp+20h] [rbp-568h]\n  wint_t v84; // [rsp+24h] [rbp-564h]\n  char property[272]; // [rsp+30h] [rbp-558h] BYREF\n  int v86[256]; // [rsp+140h] [rbp-448h] BYREF\n  __int64 v87; // [rsp+540h] [rbp-48h] BYREF\n\n  v5 = (const wchar_t *)a3;\n  v7 = *a1;\n  v76 = a5;\n  v68 = (__int64)(a1 + 1);\n  if ( !*a1 )\n    goto LABEL_56;\n  v83 = a5 & 5;\n  v9 = a5 & 2;\n  v10 = a5 & 0x10;\n  v11 = a1;\n  while ( 2 )\n  {\n    if ( v10 )\n    {\n      v77 = a4;\n      v12 = towlower(v7);\n      a4 = v77;\n      v7 = v12;\n    }\n    switch ( v7 )\n    {\n      case '!':\n      case '+':\n      case '@':\n        if ( (v76 & 0x20) == 0 )\n          goto LABEL_49;\n        if ( v11[1] != 40 )\n          goto LABEL_49;\n        result = sub_405860(v7, v68, (unsigned __int64)a2, a3, a4, v76);\n        if ( (_DWORD)result == -1 )\n          goto LABEL_49;\n        return result;\n      case '*':\n        v27 = v11;\n        v28 = v10;\n        v29 = (const wchar_t *)a3;\n        v30 = v27;\n        if ( (v76 & 0x20) == 0 || v27[1] != 40 )\n          goto LABEL_65;\n        v56 = a3;\n        wcb = a4;\n        result = sub_405860(42, v68, (unsigned __int64)a2, v56, a4, v76);\n        if ( (_DWORD)result != -1 )\n          return result;\n        a4 = wcb;\nLABEL_65:\n        if ( v29 != a2 && *a2 == 46 && a4 )\n          return 1LL;\n        v31 = v30[1];\n        v32 = v30 + 2;\n        if ( v31 != 42 && v31 != 63 )\n          goto LABEL_77;\n        v33 = (v76 & 0x20) != 0;\n        do\n        {\n          if ( *v32 == 40 && v33 )\n          {\n            wcc = a4;\n            v71 = v33;\n            v80 = v31;\n            v34 = sub_405660(v32);\n            v33 = v71;\n            a4 = wcc;\n            if ( v34 != v32 )\n              goto LABEL_75;\n            v31 = v80;\n          }\n          if ( v31 == 63 )\n          {\n            if ( a2 == v29 || *a2 == 47 && (v76 & 1) != 0 )\n              return 1LL;\n            ++a2;\n          }\n          v34 = v32;\nLABEL_75:\n          v31 = *v34;\n          v32 = v34 + 1;\n        }\n        while ( *v34 == 63 || v31 == 42 );\nLABEL_77:\n        if ( v31 )\n        {\n          v79 = a4;\n          wca = v31;\n          v35 = wmemchr(a2, -(v76 & 1) & 0x2F, v29 - a2);\n          v36 = wca;\n          v37 = v35;\n          v38 = v79;\n          if ( !v35 )\n            v37 = (wchar_t *)v29;\n          if ( wca == 91\n            || (v76 & 0x20) != 0\n            && (v50 = wca - 33, (unsigned int)v50 <= 0x1F)\n            && (v51 = 2147484673LL, _bittest64(&v51, v50))\n            && *v32 == 40 )\n          {\n            v52 = v76 & 0xFFFFFFFB;\n            if ( (v76 & 1) != 0 )\n              v52 = v76;\n            v53 = v32 - 1;\n            v54 = v52;\n            if ( v37 > a2 )\n            {\n              v55 = (unsigned __int64)v37;\n              do\n              {\n                if ( !(unsigned int)sub_405DF0(v53, a2, v29, v38, v54) )\n                  return 0LL;\n                ++a2;\n                v38 = 0;\n              }\n              while ( v55 > (unsigned __int64)a2 );\n            }\n            return 1LL;\n          }\n          if ( wca != 47 )\n          {\n            if ( (v76 & 1) != 0 )\n              goto LABEL_84;\n            goto LABEL_192;\n          }\n          if ( (v76 & 1) == 0 )\n          {\nLABEL_192:\n            v76 &= ~4u;\nLABEL_84:\n            if ( wca == 92 && !v9 )\n              v36 = *v32;\n            if ( v28 )\n            {\n              v69 = v37;\n              v39 = towlower(v36);\n              v37 = v69;\n              v36 = v39;\n            }\n            v40 = v32 - 1;\n            if ( v37 <= a2 )\n              return 1LL;\n            v70 = v29;\n            v41 = v36;\n            v42 = v79;\n            v43 = (wint_t *)a2;\n            v44 = (unsigned __int64)v37;\n            while ( 1 )\n            {\n              v45 = *v43;\n              if ( v28 )\n                v45 = towlower(v45);\n              if ( v41 == v45 && !(unsigned int)sub_405DF0(v40, v43, v70, v42, v76) )\n                break;\n              ++v43;\n              v42 = 0;\n              if ( v44 <= (unsigned __int64)v43 )\n                return 1LL;\n            }\n            return 0LL;\n          }\n          if ( v29 <= a2 )\n            return 1LL;\n          while ( *a2 != 47 )\n          {\n            if ( v29 <= ++a2 )\n              return 1LL;\n          }\n          return (unsigned int)sub_405DF0(v32, a2 + 1, v29, (v76 >> 2) & 1, v76) != 0;\n        }\n        else\n        {\n          if ( (v76 & 1) == 0 || (v76 & 8) != 0 )\n            return 0LL;\n          return wmemchr(a2, 47, v29 - a2) != 0LL;\n        }\n      case '/':\n        if ( v83 != 5 )\n          goto LABEL_49;\n        if ( (const wchar_t *)a3 == a2 || *a2 != 47 )\n          return 1LL;\n        v11 = (wint_t *)v68;\n        a4 = 1;\n        goto LABEL_54;\n      case '?':\n        if ( (v76 & 0x20) != 0 && v11[1] == 40 )\n        {\n          v82 = a4;\n          result = sub_405860(63, v68, (unsigned __int64)a2, a3, a4, v76);\n          a4 = v82;\n          if ( (_DWORD)result != -1 )\n            return result;\n        }\n        if ( (const wchar_t *)a3 == a2 )\n          return 1LL;\n        if ( *a2 != 47 )\n        {\n          a4 &= *a2 == 46;\n          if ( !a4 )\n          {\n            v11 = (wint_t *)v68;\n            goto LABEL_54;\n          }\n          return 1LL;\n        }\n        if ( (v76 & 1) != 0 )\n          return 1LL;\n        goto LABEL_53;\n      case '[':\n        if ( !dword_60F4D8 )\n        {\n          v81 = a4;\n          v49 = getenv(\"POSIXLY_CORRECT\");\n          a4 = v81;\n          dword_60F4D8 = v49 == 0LL ? -1 : 1;\n        }\n        if ( (const wchar_t *)a3 == a2 )\n          return 1LL;\n        v14 = *a2;\n        if ( *a2 == 46 )\n        {\n          if ( a4 )\n            return 1LL;\n        }\n        else if ( v14 == 47 && (v76 & 1) != 0 )\n        {\n          return 1LL;\n        }\n        v15 = v11[1];\n        if ( v15 == 33 || dword_60F4D8 < 0 && v15 == 94 )\n        {\n          v16 = v11 + 2;\n          v78 = 1;\n        }\n        else\n        {\n          v78 = 0;\n          v16 = (wint_t *)v68;\n        }\n        if ( v10 )\n          v14 = towlower(v14);\n        v84 = v7;\n        v11 = v16 + 1;\n        v17 = (wint_t *)a2;\n        v18 = *v16;\n        v19 = v14;\n        while ( 2 )\n        {\n          while ( 2 )\n          {\n            if ( !v9 && v18 == 92 )\n            {\n              v18 = *v11;\n              if ( !*v11 )\n                return 1LL;\n              if ( v10 )\n                v18 = towlower(v18);\n              v20 = v11[1];\n              ++v11;\n              goto LABEL_34;\n            }\n            if ( v18 != 91 )\n            {\n              if ( v18 )\n              {\n                v20 = *v11;\n                goto LABEL_32;\n              }\n              a2 = (const wchar_t *)v17;\n              v7 = v84;\nLABEL_50:\n              v25 = *a2;\n              if ( v10 )\n                v25 = towlower(v25);\n              if ( v25 != v7 )\n                return 1LL;\nLABEL_53:\n              v11 = (wint_t *)v68;\n              a4 = 0;\n              goto LABEL_54;\n            }\n            v20 = *v11;\n            if ( *v11 != 58 )\n            {\n              while ( 1 )\n              {\nLABEL_32:\n                if ( v10 )\n                  v18 = towlower(v18);\nLABEL_34:\n                i = v11 + 1;\n                if ( v20 != 45 )\n                  break;\n                v22 = v11[1];\n                if ( v22 != 93 && v22 )\n                  goto LABEL_37;\n                if ( v18 == v19 )\n                {\n                  a2 = (const wchar_t *)v17;\n                  goto LABEL_152;\n                }\n                if ( v22 != 93 )\n                {\nLABEL_37:\n                  v23 = v11 + 2;\n                  if ( v22 == 92 && !v9 )\n                  {\n                    v23 = v11 + 3;\n                    v22 = v11[2];\n                  }\n                  if ( !v22 )\n                    return 1LL;\n                  v20 = *v23;\n                  v11 = v23 + 1;\n                  v24 = v18 <= v19;\n                  v18 = *v23;\n                  if ( v22 >= v19 && v24 )\n                  {\n                    v11 = v23;\n                    a2 = (const wchar_t *)v17;\n                    i = v23 + 1;\n                    goto LABEL_152;\n                  }\n                  goto LABEL_26;\n                }\n                v20 = 93;\n                ++v11;\n                v18 = 45;\n              }\n              if ( v18 == v19 )\n                goto LABEL_148;\n              v18 = v20;\n              ++v11;\nLABEL_26:\n              if ( v18 == 93 )\n              {\n                a2 = (const wchar_t *)v17;\n                if ( !v78 )\n                  return 1LL;\n                goto LABEL_99;\n              }\n              continue;\n            }\n            break;\n          }\n          v46 = v11;\n          v47 = 0LL;\n          while ( 1 )\n          {\n            v48 = v46[1];\n            if ( v48 == 58 )\n              break;\n            if ( v48 - 97 > 0x18 )\n              goto LABEL_109;\n            ++v47;\n            ++v46;\n            *(_DWORD *)&property[4 * v47 + 268] = v48;\n            if ( v47 == 256 )\n              return 1LL;\n          }\n          if ( v46[2] != 93 )\n          {\nLABEL_109:\n            i = v11 + 1;\n            if ( v19 != 91 )\n            {\n              ++v11;\n              v18 = 58;\n              continue;\n            }\nLABEL_148:\n            a2 = (const wchar_t *)v17;\n            v20 = *v11;\n            goto LABEL_152;\n          }\n          break;\n        }\n        v86[v47] = 0;\n        v63 = property;\n        v64 = v86;\n        v65 = v86[0];\n        do\n        {\n          if ( v65 <= 63 )\n          {\n            if ( v65 < 37 && (unsigned int)(v65 - 32) > 3 )\n              return 1LL;\n          }\n          else if ( v65 < 65 || v65 > 95 && (unsigned int)(v65 - 97) > 0x1D )\n          {\n            return 1LL;\n          }\n          if ( v64 == (int *)&v87 )\n            return 1LL;\n          ++v64;\n          *v63++ = v65;\n          v65 = *v64;\n        }\n        while ( *v64 );\n        *v63 = 0;\n        v66 = wctype(property);\n        if ( !v66 )\n          return 1LL;\n        if ( !iswctype(*v17, v66) )\n        {\n          v11 = v46 + 4;\n          v18 = v46[3];\n          goto LABEL_26;\n        }\n        v67 = v46;\n        v11 = v46 + 3;\n        a2 = (const wchar_t *)v17;\n        v20 = v46[3];\n        for ( i = v67 + 4; ; i = v11 + 1 )\n        {\nLABEL_152:\n          v57 = (int *)i;\n          v58 = v20;\n          if ( !v20 )\n            return 1LL;\n          a4 = v9 == 0 && v20 == 92;\n          if ( a4 )\n          {\n            if ( v11[1] )\n            {\n              v20 = v11[2];\n              v11 += 2;\n              continue;\n            }\n            return 1LL;\n          }\n          if ( v20 != 91 )\n            goto LABEL_149;\n          v20 = v11[1];\n          if ( v20 != 58 )\n            break;\n          v61 = v11 + 2;\n          v20 = v11[2];\n          v62 = v11 + 257;\n          while ( 1 )\n          {\n            if ( v20 == 58 )\n            {\n              if ( v61[1] != 93 )\n                goto LABEL_158;\n              v57 = (int *)(v61 + 3);\n              v58 = v61[2];\n              goto LABEL_149;\n            }\n            if ( (unsigned int)(v20 - 97) > 0x18 )\n              break;\n            v20 = *++v61;\n            if ( v62 == v61 )\n              return 1LL;\n          }\n          v20 = 58;\n          v11 = i;\nLABEL_151:\n          ;\n        }\n        if ( v20 == 61 )\n        {\n          if ( v11[2] && v11[3] == 61 && v11[4] == 93 )\n          {\n            v57 = (int *)(v11 + 6);\n            v58 = v11[5];\n            goto LABEL_149;\n          }\n          return 1LL;\n        }\n        v59 = v11 + 2;\n        if ( v20 != 46 )\n        {\nLABEL_158:\n          v11 = i;\n          goto LABEL_151;\n        }\n        while ( 1 )\n        {\n          v60 = v59[1];\n          if ( !v60 )\n            return 1LL;\n          if ( v60 == 46 && v59[2] == 93 )\n            break;\n          ++v59;\n        }\n        v57 = v59 + 4;\n        v58 = v59[3];\nLABEL_149:\n        if ( v58 != 93 )\n        {\n          v20 = *v57;\n          v11 = (wint_t *)v57;\n          goto LABEL_151;\n        }\n        if ( v78 )\n          return 1LL;\n        v11 = (wint_t *)v57;\nLABEL_54:\n        v7 = *v11;\n        ++a2;\n        v68 = (__int64)(v11 + 1);\n        if ( !*v11 )\n        {\n          v5 = (const wchar_t *)a3;\nLABEL_56:\n          if ( a2 == v5 )\n            return 0LL;\n          if ( (v76 & 8) != 0 )\n            return *a2 != 47;\n          return 1LL;\n        }\n        continue;\n      case '\\\\':\n        if ( v9 )\n        {\n          if ( (const wchar_t *)a3 == a2 )\n            return 1LL;\n          if ( v10 )\n          {\nLABEL_10:\n            v13 = towlower(*a2);\n            v11 = (wint_t *)v68;\n            goto LABEL_98;\n          }\n        }\n        else\n        {\n          v7 = v11[1];\n          v68 = (__int64)(v11 + 2);\n          if ( !v7 )\n            return 1LL;\n          if ( v10 )\n          {\n            v7 = towlower(v7);\n            if ( (const wchar_t *)a3 == a2 )\n              return 1LL;\n            goto LABEL_10;\n          }\n          if ( (const wchar_t *)a3 == a2 )\n            return 1LL;\n        }\n        v13 = *a2;\n        v11 = (wint_t *)v68;\nLABEL_98:\n        if ( v13 != v7 )\n          return 1LL;\nLABEL_99:\n        a4 = 0;\n        goto LABEL_54;\n      default:\nLABEL_49:\n        if ( (const wchar_t *)a3 != a2 )\n          goto LABEL_50;\n        return 1LL;\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_4068D0",
            "funcStartAddr": "0x4068d0",
            "funcEndAddr": "0x406e13",
            "decompiledFuncCode": "__int64 __fastcall sub_4068D0(\n        int a1,\n        __int64 a2,\n        unsigned __int64 a3,\n        unsigned __int64 a4,\n        unsigned __int8 a5,\n        unsigned int a6)\n{\n  unsigned int v6; // r12d\n  int v7; // eax\n  __int64 i; // r14\n  void *v9; // rsi\n  void **p_src; // rbx\n  __int64 v11; // r13\n  __int64 v12; // r15\n  char v14; // al\n  __int64 v15; // rcx\n  __int64 v16; // rax\n  unsigned __int64 v17; // rax\n  void *v18; // rsp\n  _BYTE *v19; // rax\n  char *v20; // rax\n  _QWORD *v21; // r15\n  __int64 v22; // rbx\n  __int64 v23; // rax\n  unsigned __int64 v24; // rax\n  void *v25; // rsp\n  _BYTE *v26; // rax\n  unsigned __int64 v27; // r15\n  _QWORD *v28; // r14\n  unsigned int v29; // r12d\n  __int64 v30; // rax\n  unsigned __int64 v31; // rbx\n  unsigned __int64 v32; // r13\n  _BOOL8 v33; // rcx\n  _BOOL8 v34; // rcx\n  unsigned __int64 v35; // r15\n  unsigned __int64 v36; // r13\n  unsigned int v37; // ebx\n  _QWORD *v38; // r14\n  __int64 v39; // rcx\n  __int64 v40; // r13\n  unsigned __int64 v41; // r15\n  unsigned int v42; // ebx\n  char *v43; // rax\n  void *src; // [rsp+0h] [rbp-80h] BYREF\n  __int64 v45; // [rsp+8h] [rbp-78h] BYREF\n  unsigned __int8 v46; // [rsp+13h] [rbp-6Dh]\n  unsigned int v47; // [rsp+14h] [rbp-6Ch]\n  unsigned __int64 v48; // [rsp+18h] [rbp-68h]\n  unsigned __int64 v49; // [rsp+20h] [rbp-60h]\n  __int64 v50; // [rsp+28h] [rbp-58h]\n  size_t v51; // [rsp+30h] [rbp-50h]\n  __int64 v52; // [rsp+38h] [rbp-48h]\n  size_t v53; // [rsp+48h] [rbp-38h] BYREF\n\n  LOBYTE(v6) = a5;\n  LODWORD(v52) = a1;\n  v49 = a3;\n  v48 = a4;\n  v47 = a6;\n  v46 = a5;\n  v53 = 0LL;\n  v51 = strlen((const char *)a2);\n  v7 = *(unsigned __int8 *)(a2 + 1);\n  if ( !(_BYTE)v7 )\n    return 0xFFFFFFFFLL;\n  i = a2 + 1;\n  v45 = a2;\n  v9 = (void *)(a2 + 1);\n  p_src = (void **)&v53;\n  v11 = 3221227009LL;\n  v12 = 0LL;\n  LODWORD(v50) = v52 - 63;\n  while ( 2 )\n  {\n    while ( (_BYTE)v7 == 91 )\n    {\n      if ( !dword_60F4D8 )\n      {\n        src = v9;\n        v20 = getenv(\"POSIXLY_CORRECT\");\n        v9 = src;\n        dword_60F4D8 = v20 == 0LL ? -1 : 1;\n      }\n      v14 = *(_BYTE *)(i + 1);\n      if ( v14 == 33 || dword_60F4D8 < 0 && v14 == 94 )\n      {\n        v15 = i + 2;\n        v14 = *(_BYTE *)(i + 2);\n      }\n      else\n      {\n        v15 = i + 1;\n      }\n      if ( v14 != 93 )\n        goto LABEL_26;\n      v14 = *(_BYTE *)++v15;\n      for ( i = v15 + 1; v14 != 93; i = v15 + 1 )\n      {\n        if ( !v14 )\n          return 0xFFFFFFFFLL;\n        v14 = *(_BYTE *)i;\n        v15 = i;\nLABEL_26:\n        ;\n      }\n      v7 = *(unsigned __int8 *)(v15 + 1);\nLABEL_6:\n      if ( !(_BYTE)v7 )\n        return 0xFFFFFFFFLL;\n    }\n    while ( 1 )\n    {\n      if ( (unsigned __int8)(v7 - 33) > 0x1Fu )\n      {\n        if ( (_BYTE)v7 == 124 && !v12 )\n        {\n          v16 = i - (_QWORD)v9 + 1;\n          if ( (unsigned int)v50 <= 1 )\n            v16 = v51;\n          v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;\n          if ( v17 - 8 > 0x1F37 )\n            return 0xFFFFFFFFLL;\n          v18 = alloca(v17 + 8);\n          v19 = mempcpy(&v45, v9, i - (_QWORD)v9);\n          v9 = (void *)(i + 1);\n          *v19 = 0;\n          v7 = *(unsigned __int8 *)++i;\n          src = 0LL;\n          *p_src = &src;\n          p_src = &src;\n          v12 = 0LL;\n        }\n        else\n        {\nLABEL_5:\n          v7 = *(unsigned __int8 *)++i;\n        }\n        goto LABEL_6;\n      }\n      if ( !_bittest64(&v11, (unsigned int)(v7 - 33)) || *(_BYTE *)(i + 1) != 40 )\n        break;\n      ++v12;\n      ++i;\n      v7 = 40;\n    }\n    if ( (_BYTE)v7 != 41 )\n      goto LABEL_5;\n    if ( v12 )\n    {\n      v7 = *(unsigned __int8 *)(i + 1);\n      --v12;\n      ++i;\n      if ( !(_BYTE)v7 )\n        return 0xFFFFFFFFLL;\n      continue;\n    }\n    break;\n  }\n  v21 = p_src;\n  v22 = v45;\n  v23 = i - (_QWORD)v9 + 1;\n  if ( (unsigned int)(v52 - 63) <= 1 )\n    v23 = v51;\n  v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8LL;\n  if ( v24 - 8 > 0x1F37 )\n    return 0xFFFFFFFFLL;\n  v25 = alloca(v24 + 8);\n  v26 = mempcpy(&v45, v9, i - (_QWORD)v9);\n  *v21 = &src;\n  *v26 = 0;\n  src = 0LL;\n  v51 = v53;\n  if ( !v53 )\n    __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 0x454u, \"ext_match\");\n  if ( *(_BYTE *)(i - 1) != 41 )\n    __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 0x455u, \"ext_match\");\n  switch ( (int)v52 )\n  {\n    case '!':\n      if ( v49 > v48 )\n        return 1LL;\n      v35 = v49;\n      v52 = i;\n      v36 = v49;\n      v37 = v47 & 0xFFFFFFFB;\n      if ( (v47 & 1) != 0 )\n        v37 = v47;\n      while ( 2 )\n      {\n        v38 = (_QWORD *)v51;\n        while ( (unsigned int)sub_406E20(v38 + 1, v35, v36, (unsigned __int8)v6, v37) )\n        {\n          v38 = (_QWORD *)*v38;\n          if ( !v38 )\n          {\n            if ( v35 == v36 )\n            {\n              v39 = (unsigned __int8)v6;\n            }\n            else\n            {\n              v39 = 0LL;\n              if ( *(_BYTE *)(v36 - 1) == 47 )\n                v39 = (v47 & 5) == 5;\n            }\n            if ( !(unsigned int)sub_406E20(v52, v36, v48, v39, v37) )\n              return 0LL;\n            break;\n          }\n        }\n        if ( v48 >= ++v36 )\n          continue;\n        break;\n      }\n      return 1LL;\n    case '*':\n      if ( (unsigned int)sub_406E20(i, v49, v48, (unsigned __int8)v6, v47) )\n        goto LABEL_40;\n      return 0LL;\n    case '+':\nLABEL_40:\n      v27 = v49;\n      v50 = i;\n      v28 = (_QWORD *)v51;\n      v29 = v47 & 0xFFFFFFFB;\n      if ( (v47 & 1) != 0 )\n        v29 = v47;\n      v30 = v22 - 1;\n      LODWORD(v51) = v47 & 1;\n      v31 = v48;\n      v45 = v30;\n      do\n      {\n        if ( v27 <= v31 )\n        {\n          v32 = v27;\n          LODWORD(v52) = v46;\n          do\n          {\n            if ( !(unsigned int)sub_406E20(v28 + 1, v27, v32, (unsigned int)v52, v29) )\n            {\n              if ( v27 == v32 )\n              {\n                if ( !(unsigned int)sub_406E20(v50, v27, v31, (unsigned int)v52, v29) )\n                  return 0LL;\n              }\n              else\n              {\n                v33 = 0LL;\n                if ( *(_BYTE *)(v32 - 1) == 47 )\n                  v33 = (v47 & 5) == 5;\n                if ( !(unsigned int)sub_406E20(v50, v32, v31, v33, v29) )\n                  return 0LL;\n                v34 = 0LL;\n                if ( *(_BYTE *)(v32 - 1) == 47 )\n                  v34 = (v47 & 5) == 5;\n                if ( !(unsigned int)sub_406E20(v45, v32, v31, v34, v29) )\n                  return 0LL;\n              }\n              v28 = (_QWORD *)v53;\n            }\n            ++v32;\n          }\n          while ( v31 >= v32 );\n        }\n        v28 = (_QWORD *)*v28;\n        v53 = (size_t)v28;\n      }\n      while ( v28 );\n      return 1LL;\n    case '?':\n      v6 = (unsigned __int8)v6;\n      if ( (unsigned int)sub_406E20(i, v49, v48, (unsigned __int8)v6, v47) )\n        goto LABEL_70;\n      return 0LL;\n    case '@':\n      v6 = (unsigned __int8)v6;\nLABEL_70:\n      v40 = v51;\n      v41 = v48;\n      v42 = v47 & 0xFFFFFFFB;\n      if ( (v47 & 1) != 0 )\n        v42 = v47;\n      break;\n    default:\n      __assert_fail(\"! \\\"Invalid extended matching operator\\\"\", \"lib/fnmatch_loop.c\", 0x4ADu, \"ext_match\");\n  }\n  while ( 1 )\n  {\n    v43 = strcat((char *)(v40 + 8), (const char *)i);\n    if ( !(unsigned int)sub_406E20(v43, v49, v41, v6, v42) )\n      break;\n    v40 = *(_QWORD *)v40;\n    v53 = v40;\n    if ( !v40 )\n      return 1LL;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_406E20",
            "funcStartAddr": "0x406e20",
            "funcEndAddr": "0x407903",
            "decompiledFuncCode": "__int64 __fastcall sub_406E20(\n        unsigned __int8 *a1,\n        unsigned __int8 *a2,\n        unsigned __int64 a3,\n        unsigned __int8 a4,\n        unsigned int a5)\n{\n  __int64 v6; // r12\n  unsigned __int8 *v7; // r13\n  int v9; // ebp\n  int v10; // ebx\n  unsigned __int8 v11; // r12\n  int v12; // eax\n  __int32_t v13; // edx\n  __int64 v14; // r12\n  unsigned __int8 v15; // al\n  unsigned __int8 *v16; // r15\n  __int64 v17; // r15\n  unsigned __int8 v18; // si\n  unsigned __int8 *j; // rax\n  unsigned __int8 v20; // dl\n  int v21; // ecx\n  unsigned __int8 *v22; // r8\n  unsigned __int8 v23; // cl\n  __int32_t v24; // eax\n  __int64 v25; // r13\n  __int64 result; // rax\n  __int64 v27; // r8\n  unsigned __int8 *v28; // r9\n  unsigned __int8 *v29; // rax\n  __int64 v30; // rcx\n  __int64 v31; // rax\n  unsigned __int8 v32; // r8\n  unsigned __int8 *v33; // r12\n  unsigned __int8 *v34; // r9\n  const __int32_t **v35; // rax\n  int v36; // ebp\n  unsigned int i; // r13d\n  __int32_t v38; // eax\n  unsigned __int8 v39; // r15\n  const __int32_t *v40; // rdx\n  unsigned __int8 *v41; // r15\n  __int64 v42; // rdx\n  char v43; // al\n  _BYTE *v44; // r13\n  char v45; // al\n  const __int32_t **v46; // rax\n  __int64 v47; // rdx\n  unsigned int v48; // eax\n  unsigned int v49; // r13d\n  unsigned __int8 *v50; // rdx\n  unsigned __int8 *v51; // r13\n  wctype_t v52; // r13\n  wint_t v53; // eax\n  __int64 v55; // [rsp+10h] [rbp-168h]\n  unsigned __int8 *v56; // [rsp+10h] [rbp-168h]\n  unsigned __int8 *v57; // [rsp+10h] [rbp-168h]\n  unsigned __int8 *v58; // [rsp+10h] [rbp-168h]\n  unsigned __int8 *v59; // [rsp+18h] [rbp-160h]\n  unsigned __int8 v60; // [rsp+18h] [rbp-160h]\n  char v61; // [rsp+18h] [rbp-160h]\n  unsigned int v62; // [rsp+20h] [rbp-158h]\n  int v63; // [rsp+28h] [rbp-150h]\n  unsigned __int8 v64; // [rsp+28h] [rbp-150h]\n  int v65; // [rsp+2Ch] [rbp-14Ch]\n  char property[328]; // [rsp+30h] [rbp-148h] BYREF\n\n  v6 = *a1;\n  v62 = a5;\n  v55 = (__int64)(a1 + 1);\n  if ( !(_BYTE)v6 )\n    goto LABEL_66;\n  v7 = a1;\n  v63 = a5 & 5;\n  v9 = a5 & 2;\n  v10 = a5 & 0x10;\n  while ( 2 )\n  {\n    if ( v10 )\n      LODWORD(v6) = LOBYTE((*__ctype_tolower_loc())[v6]);\n    switch ( (char)v6 )\n    {\n      case '!':\n      case '+':\n      case '@':\n        if ( (v62 & 0x20) == 0 )\n          goto LABEL_60;\n        if ( v7[1] != 40 )\n          goto LABEL_60;\n        result = sub_4068D0((unsigned __int8)v6, v55, (unsigned __int64)a2, a3, a4, v62);\n        if ( (_DWORD)result == -1 )\n          goto LABEL_60;\n        return result;\n      case '*':\n        if ( (v62 & 0x20) != 0 && v7[1] == 40 )\n        {\n          result = sub_4068D0(42, v55, (unsigned __int64)a2, a3, a4, v62);\n          if ( (_DWORD)result != -1 )\n            return result;\n        }\n        if ( a2 != (unsigned __int8 *)a3 && *a2 == 46 && a4 )\n          return 1LL;\n        v27 = v7[1];\n        v28 = v7 + 2;\n        if ( (_BYTE)v27 != 42 && (_BYTE)v27 != 63 )\n          goto LABEL_86;\n        do\n        {\n          if ( *v28 == 40 && (v62 & 0x20) != 0 )\n          {\n            v58 = v28;\n            v61 = v27;\n            v29 = sub_405760(v28);\n            v28 = v58;\n            if ( v29 != v58 )\n              goto LABEL_84;\n            LOBYTE(v27) = v61;\n          }\n          if ( (_BYTE)v27 == 63 )\n          {\n            if ( a2 == (unsigned __int8 *)a3 || *a2 == 47 && (v62 & 1) != 0 )\n              return 1LL;\n            ++a2;\n          }\n          v29 = v28;\nLABEL_84:\n          v27 = *v29;\n          v28 = v29 + 1;\n        }\n        while ( (_BYTE)v27 == 63 || (_BYTE)v27 == 42 );\nLABEL_86:\n        v30 = v62 & 1;\n        if ( (_BYTE)v27 )\n        {\n          v64 = v27;\n          v59 = v28;\n          v31 = sub_408AA0(a2, -(int)v30 & 0x2F, a3 - (_QWORD)a2, v30, v27, v28);\n          v32 = v64;\n          v33 = (unsigned __int8 *)v31;\n          v34 = v59;\n          if ( !v31 )\n            v33 = (unsigned __int8 *)a3;\n          if ( v64 == 91\n            || (v62 & 0x20) != 0\n            && (unsigned __int8)(v64 - 33) <= 0x1Fu\n            && (v47 = 2147484673LL, _bittest64(&v47, (unsigned int)v64 - 33))\n            && *v59 == 40 )\n          {\n            v48 = v62 & 0xFFFFFFFB;\n            if ( (v62 & 1) != 0 )\n              v48 = v62;\n            v49 = v48;\n            if ( v33 > a2 )\n            {\n              do\n              {\n                if ( !(unsigned int)sub_406E20(v59 - 1, a2, a3, a4, v49) )\n                  return 0LL;\n                ++a2;\n                a4 = 0;\n              }\n              while ( v33 != a2 );\n            }\n            return 1LL;\n          }\n          if ( v64 != 47 )\n          {\n            if ( (v62 & 1) != 0 )\n              goto LABEL_93;\n            goto LABEL_187;\n          }\n          if ( (v62 & 1) == 0 )\n          {\nLABEL_187:\n            v62 &= ~4u;\nLABEL_93:\n            if ( v64 == 92 && !v9 )\n              v32 = *v59;\n            if ( v10 )\n            {\n              v60 = v32;\n              v56 = v34;\n              v35 = __ctype_tolower_loc();\n              v34 = v56;\n              v32 = (*v35)[v60];\n            }\n            v57 = v34 - 1;\n            if ( v33 <= a2 )\n              return 1LL;\n            v36 = v32;\n            for ( i = a4; ; i = 0 )\n            {\n              v38 = *a2;\n              if ( v10 )\n              {\n                v39 = *a2;\n                v38 = (*__ctype_tolower_loc())[v39];\n              }\n              if ( v38 == v36 && !(unsigned int)sub_406E20(v57, a2, a3, i, v62) )\n                break;\n              if ( v33 == ++a2 )\n                return 1LL;\n            }\n            return 0LL;\n          }\n          if ( a3 <= (unsigned __int64)a2 )\n            return 1LL;\n          while ( *a2 != 47 )\n          {\n            if ( (unsigned __int8 *)a3 == ++a2 )\n              return 1LL;\n          }\n          return (unsigned int)sub_406E20(v59, a2 + 1, a3, (v62 >> 2) & 1, v62) != 0;\n        }\n        else\n        {\n          if ( (v62 & 1) == 0 || (v62 & 8) != 0 )\n            return 0LL;\n          return sub_408AA0(a2, 47LL, a3 - (_QWORD)a2, v30, v27, v28) != 0;\n        }\n      case '/':\n        if ( v63 != 5 )\n          goto LABEL_60;\n        if ( a2 == (unsigned __int8 *)a3 || *a2 != 47 )\n          return 1LL;\n        v7 = (unsigned __int8 *)v55;\n        a4 = 1;\n        goto LABEL_65;\n      case '?':\n        if ( (v62 & 0x20) != 0 && v7[1] == 40 )\n        {\n          result = sub_4068D0(63, v55, (unsigned __int64)a2, a3, a4, v62);\n          if ( (_DWORD)result != -1 )\n            return result;\n        }\n        if ( a2 == (unsigned __int8 *)a3 )\n          return 1LL;\n        if ( *a2 != 47 )\n        {\n          a4 &= *a2 == 46;\n          if ( !a4 )\n          {\n            v7 = (unsigned __int8 *)v55;\n            goto LABEL_65;\n          }\n          return 1LL;\n        }\n        if ( (v62 & 1) != 0 )\n          return 1LL;\n        goto LABEL_64;\n      case '[':\n        if ( !dword_60F4D8 )\n          dword_60F4D8 = getenv(\"POSIXLY_CORRECT\") == 0LL ? -1 : 1;\n        if ( a2 == (unsigned __int8 *)a3 )\n          return 1LL;\n        v14 = *a2;\n        if ( (_BYTE)v14 == 46 )\n        {\n          if ( a4 )\n            return 1LL;\n        }\n        else if ( (_BYTE)v14 == 47 && (v62 & 1) != 0 )\n        {\n          return 1LL;\n        }\n        v15 = v7[1];\n        if ( v15 == 33 || dword_60F4D8 < 0 && v15 == 94 )\n        {\n          v16 = v7 + 2;\n          v65 = 1;\n        }\n        else\n        {\n          v65 = 0;\n          v16 = (unsigned __int8 *)v55;\n        }\n        if ( v10 )\n          LOBYTE(v14) = (*__ctype_tolower_loc())[v14];\n        v7 = v16 + 1;\n        v17 = *v16;\nLABEL_30:\n        while ( 2 )\n        {\n          if ( !v9 && (_BYTE)v17 == 92 )\n          {\n            v17 = *v7;\n            if ( !(_BYTE)v17 )\n              return 1LL;\n            if ( v10 )\n              LOBYTE(v17) = (*__ctype_tolower_loc())[v17];\n            v18 = *++v7;\n            goto LABEL_37;\n          }\n          if ( (_BYTE)v17 != 91 )\n          {\n            if ( (_BYTE)v17 )\n            {\n              v18 = *v7;\n              goto LABEL_35;\n            }\n            LODWORD(v6) = 91;\nLABEL_61:\n            v24 = *a2;\n            if ( v10 )\n            {\n              v25 = *a2;\n              v24 = (*__ctype_tolower_loc())[v25];\n            }\n            if ( v24 != (_DWORD)v6 )\n              return 1LL;\nLABEL_64:\n            v7 = (unsigned __int8 *)v55;\n            a4 = 0;\n            goto LABEL_65;\n          }\n          v18 = *v7;\n          if ( *v7 != 58 )\n          {\n            while ( 1 )\n            {\nLABEL_35:\n              if ( v10 )\n                LOBYTE(v17) = (*__ctype_tolower_loc())[v17];\nLABEL_37:\n              j = v7 + 1;\n              if ( v18 != 45 )\n                break;\n              v20 = v7[1];\n              if ( v20 != 93 && v20 )\n              {\n                v21 = (char)v17;\nLABEL_41:\n                j = v7 + 2;\n                if ( !v9 && v20 == 92 )\n                {\n                  j = v7 + 3;\n                  v20 = v7[2];\n                }\n                if ( !v20 )\n                  return 1LL;\n                v18 = *j;\n                v7 = j + 1;\n                v17 = *j;\n                if ( v21 <= (unsigned __int8)v14 && (unsigned __int8)v14 <= v20 )\n                  goto LABEL_47;\nLABEL_29:\n                if ( (_BYTE)v17 == 93 )\n                {\n                  if ( !v65 )\n                    return 1LL;\n                  goto LABEL_13;\n                }\n                goto LABEL_30;\n              }\n              if ( (_BYTE)v14 == (_BYTE)v17 )\n                goto LABEL_49;\n              v21 = (char)v17;\n              if ( v20 != 93 )\n                goto LABEL_41;\n              v18 = 93;\n              ++v7;\n              v17 = 45LL;\n            }\n            if ( (_BYTE)v14 == (_BYTE)v17 )\n              goto LABEL_177;\n            v17 = v18;\n            ++v7;\n            goto LABEL_29;\n          }\n          v41 = v7;\n          v42 = 0LL;\n          while ( 1 )\n          {\n            v43 = v41[1];\n            if ( v43 == 58 )\n              break;\n            if ( (unsigned __int8)(v43 - 97) > 0x18u )\n              goto LABEL_117;\n            ++v42;\n            ++v41;\n            property[v42 - 1] = v43;\n            if ( v42 == 256 )\n              return 1LL;\n          }\n          if ( v41[2] != 93 )\n          {\nLABEL_117:\n            j = v7 + 1;\n            if ( (_BYTE)v14 == 91 )\n            {\nLABEL_177:\n              v18 = *v7;\n              goto LABEL_49;\n            }\n            ++v7;\n            v17 = 58LL;\n            continue;\n          }\n          break;\n        }\n        property[v42] = 0;\n        v52 = wctype(property);\n        if ( !v52 )\n          return 1LL;\n        v53 = btowc(*a2);\n        if ( !iswctype(v53, v52) )\n        {\n          v7 = v41 + 4;\n          v17 = v41[3];\n          goto LABEL_29;\n        }\n        v7 = v41 + 3;\n        v18 = v41[3];\n        for ( j = v41 + 4; ; j = v7 + 1 )\n        {\nLABEL_49:\n          v22 = j;\n          v23 = v18;\n          if ( !v18 )\n            return 1LL;\n          a4 = v9 == 0 && v18 == 92;\n          if ( a4 )\n          {\n            if ( v7[1] )\n            {\n              v18 = v7[2];\n              v7 += 2;\n              continue;\n            }\n            return 1LL;\n          }\n          if ( v18 != 91 )\n            goto LABEL_52;\n          v18 = v7[1];\n          if ( v18 != 58 )\n            break;\n          v50 = v7 + 2;\n          v18 = v7[2];\n          v51 = v7 + 257;\n          while ( 1 )\n          {\n            if ( v18 == 58 )\n            {\n              if ( v50[1] == 93 )\n              {\n                v22 = v50 + 3;\n                v23 = v50[2];\n                goto LABEL_52;\n              }\nLABEL_47:\n              v7 = j;\n              goto LABEL_48;\n            }\n            if ( (unsigned __int8)(v18 - 97) > 0x18u )\n              break;\n            v18 = *++v50;\n            if ( v51 == v50 )\n              return 1LL;\n          }\n          v18 = 58;\n          v7 = j;\nLABEL_48:\n          ;\n        }\n        if ( v18 == 61 )\n        {\n          if ( v7[2] && v7[3] == 61 && v7[4] == 93 )\n          {\n            v22 = v7 + 6;\n            v23 = v7[5];\n            goto LABEL_52;\n          }\n          return 1LL;\n        }\n        v44 = v7 + 2;\n        if ( v18 != 46 )\n          goto LABEL_47;\n        while ( 1 )\n        {\n          v45 = v44[1];\n          if ( !v45 )\n            return 1LL;\n          if ( v45 == 46 && v44[2] == 93 )\n            break;\n          ++v44;\n        }\n        v22 = v44 + 4;\n        v23 = v44[3];\nLABEL_52:\n        if ( v23 != 93 )\n        {\n          v7 = v22;\n          v18 = *v22;\n          j = v22 + 1;\n          goto LABEL_49;\n        }\n        if ( v65 )\n          return 1LL;\n        v7 = v22;\nLABEL_65:\n        v6 = *v7;\n        ++a2;\n        v55 = (__int64)(v7 + 1);\n        if ( !(_BYTE)v6 )\n        {\nLABEL_66:\n          if ( (unsigned __int8 *)a3 == a2 )\n            return 0LL;\n          if ( (v62 & 8) != 0 )\n            return *a2 != 47;\n          return 1LL;\n        }\n        continue;\n      case '\\\\':\n        if ( v9 )\n        {\n          if ( a2 == (unsigned __int8 *)a3 )\n            return 1LL;\n          if ( !v10 )\n          {\n            v12 = 92;\nLABEL_11:\n            v13 = *a2;\n            v7 = (unsigned __int8 *)v55;\n            goto LABEL_12;\n          }\n          v7 = (unsigned __int8 *)v55;\n          v40 = *__ctype_tolower_loc();\n          v12 = 92;\n        }\n        else\n        {\n          v11 = v7[1];\n          v55 = (__int64)(v7 + 2);\n          if ( !v11 )\n            return 1LL;\n          if ( !v10 )\n          {\n            if ( a2 == (unsigned __int8 *)a3 )\n              return 1LL;\n            v12 = v11;\n            goto LABEL_11;\n          }\n          v46 = __ctype_tolower_loc();\n          v40 = *v46;\n          v12 = (*v46)[v11];\n          if ( a2 == (unsigned __int8 *)a3 )\n            return 1LL;\n          v12 = (unsigned __int8)v12;\n          v7 += 2;\n        }\n        v13 = v40[*a2];\nLABEL_12:\n        if ( v13 != v12 )\n          return 1LL;\nLABEL_13:\n        a4 = 0;\n        goto LABEL_65;\n      default:\nLABEL_60:\n        if ( a2 != (unsigned __int8 *)a3 )\n          goto LABEL_61;\n        return 1LL;\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_407910",
            "funcStartAddr": "0x407910",
            "funcEndAddr": "0x407b48",
            "decompiledFuncCode": "__int64 __fastcall sub_407910(char *a1, char *a2, unsigned int a3)\n{\n  unsigned __int8 *v4; // rbx\n  size_t v5; // rax\n  size_t v7; // rax\n  size_t v8; // rbx\n  size_t v9; // rax\n  size_t v10; // r13\n  unsigned __int64 v11; // rax\n  size_t v12; // rdi\n  void *v13; // rsp\n  wchar_t *v14; // rax\n  wint_t *v15; // r14\n  wchar_t *v16; // r15\n  wchar_t v17[3]; // [rsp+0h] [rbp-60h] BYREF\n  unsigned int v18; // [rsp+Ch] [rbp-54h]\n  char *s; // [rsp+10h] [rbp-50h] BYREF\n  char *src[2]; // [rsp+18h] [rbp-48h] BYREF\n  mbstate_t ps; // [rsp+28h] [rbp-38h] BYREF\n\n  src[0] = a1;\n  s = a2;\n  if ( __ctype_get_mb_cur_max() == 1 )\n    goto LABEL_2;\n  ps = 0LL;\n  v7 = mbsrtowcs(0LL, (const char **)src, 0LL, &ps);\n  v8 = v7 + 1;\n  if ( v7 == -1LL )\n    goto LABEL_2;\n  if ( !mbsinit(&ps) )\n    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 0x129u, \"gnu_fnmatch\");\n  v9 = mbsrtowcs(0LL, (const char **)&s, 0LL, &ps);\n  v10 = v9 + 1;\n  if ( v9 == -1LL )\n  {\nLABEL_2:\n    v4 = (unsigned __int8 *)s;\n    v5 = strlen(s);\n    return sub_406E20((unsigned __int8 *)src[0], v4, (unsigned __int64)&v4[v5], (a3 & 4) != 0, a3);\n  }\n  if ( !mbsinit(&ps) )\n    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 0x12Du, \"gnu_fnmatch\");\n  v11 = v10 + v8;\n  if ( __CFADD__(v10, v8) || v11 > 0x3FFFFFFFFFFFFFFFLL )\n    goto LABEL_12;\n  v12 = 4 * v11;\n  if ( v11 <= 0x7CF )\n  {\n    v13 = alloca(v12 + 8);\n    mbsrtowcs(v17, (const char **)src, v8, &ps);\n    if ( mbsinit(&ps) )\n    {\n      mbsrtowcs(&v17[v8], (const char **)&s, v10, &ps);\n      return sub_405DF0((wint_t *)v17, &v17[v8], (unsigned __int64)&v17[v8 - 1 + v10], (a3 & 4) != 0, a3);\n    }\nLABEL_16:\n    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 0x147u, \"gnu_fnmatch\");\n  }\n  v14 = (wchar_t *)malloc(v12);\n  v15 = (wint_t *)v14;\n  if ( !v14 )\n  {\nLABEL_12:\n    *__errno_location() = 12;\n    return 0xFFFFFFFFLL;\n  }\n  else\n  {\n    v16 = &v14[v8];\n    mbsrtowcs(v14, (const char **)src, v8, &ps);\n    if ( !mbsinit(&ps) )\n      goto LABEL_16;\n    mbsrtowcs(v16, (const char **)&s, v10, &ps);\n    v18 = sub_405DF0(v15, v16, (unsigned __int64)&v16[v10 - 1], (a3 & 4) != 0, a3);\n    free(v15);\n    return v18;\n  }\n}\n"
        },
        {
            "funcName": "sub_407B50",
            "funcStartAddr": "0x407b50",
            "funcEndAddr": "0x407bee",
            "decompiledFuncCode": "FILE *__fastcall sub_407B50(char *filename, char *modes, FILE *a3)\n{\n  FILE *v3; // rax\n  FILE *v4; // rbx\n  int v5; // r13d\n  int v7; // eax\n  int v8; // r14d\n\n  v3 = freopen(filename, modes, a3);\n  v4 = v3;\n  if ( !v3 )\n    return v4;\n  if ( !filename )\n    return v4;\n  v5 = fileno(v3);\n  if ( dup2(v5, v5) >= 0 || *__errno_location() != 9 )\n    return v4;\n  v7 = open(\"/dev/null\", 0x80000);\n  v8 = v7;\n  if ( v5 != v7 )\n  {\n    if ( dup2(v7, v5) >= 0 )\n    {\n      close(v8);\n      return freopen(filename, modes, v4);\n    }\n    close(v8);\n    return v4;\n  }\n  return freopen(filename, modes, v4);\n}\n"
        },
        {
            "funcName": "sub_407BF0",
            "funcStartAddr": "0x407bf0",
            "funcEndAddr": "0x407c47",
            "decompiledFuncCode": "int __fastcall sub_407BF0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_407C50",
            "funcStartAddr": "0x407c50",
            "funcEndAddr": "0x407d2f",
            "decompiledFuncCode": "__int64 __fastcall sub_407C50(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407D30",
            "funcStartAddr": "0x407d30",
            "funcEndAddr": "0x40834c",
            "decompiledFuncCode": "__int64 __fastcall sub_407D30(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        const char *a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rdi\n  const char **v35; // rbx\n  _BYTE *v36; // rbp\n  __int64 v37; // r12\n  const char *v38; // r12\n  __int64 v39; // rbp\n  char *v40; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v48; // [rsp+38h] [rbp-50h]\n  char v49; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+44h] [rbp-44h]\n  int v52; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v49 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v49), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v51 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v48 = 0;\n  v52 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v48 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v52 = 1;\n            ptr[v51] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v48 = 1;\n        }\n        else\n        {\n          v48 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v51 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v48 )\n  {\n    if ( a8 )\n    {\n      if ( v48 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v34 = stderr;\n        v35 = (const char **)a4;\n        v36 = ptr;\n        v37 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9, *v35);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v52 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v51;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v38 = *v12;\n          v39 = *a2;\n          v40 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v40, v39, a9, v38);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408350",
            "funcStartAddr": "0x408350",
            "funcEndAddr": "0x408916",
            "decompiledFuncCode": "__int64 __fastcall sub_408350(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_407C50((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_407C50((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_407D30(a1, a2, v12, a4, a5, a6, a7, v8, \"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_407D30(a1, a2, v12, a4, a5, a6, a7, v8, \"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_407D30(a1, a2, v12, a4, a5, 0, a7, v8, \"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43, v21);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41, v21);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_408920",
            "funcStartAddr": "0x408920",
            "funcEndAddr": "0x408976",
            "decompiledFuncCode": "__int64 __fastcall sub_408920(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_60F4E0 = dword_60F2BC;\n  dword_60F4E4 = dword_60F2B8;\n  result = sub_408350(a1, a2, a3, a4, a5, a6, &dword_60F4E0, a7);\n  dword_60F2BC = dword_60F4E0;\n  qword_60F520 = qword_60F4F0;\n  dword_60F2B4 = dword_60F4E8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408980",
            "funcStartAddr": "0x408980",
            "funcEndAddr": "0x408998",
            "decompiledFuncCode": "__int64 __fastcall sub_408980(int a1, __int64 *a2, const char *a3)\n{\n  return sub_408920(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_4089A0",
            "funcStartAddr": "0x4089a0",
            "funcEndAddr": "0x4089b3",
            "decompiledFuncCode": "__int64 __fastcall sub_4089A0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_408920(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_4089C0",
            "funcStartAddr": "0x4089c0",
            "funcEndAddr": "0x4089d5",
            "decompiledFuncCode": "__int64 __fastcall sub_4089C0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408350(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_4089E0",
            "funcStartAddr": "0x4089e0",
            "funcEndAddr": "0x4089f6",
            "decompiledFuncCode": "__int64 __fastcall sub_4089E0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_408920(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_408A00",
            "funcStartAddr": "0x408a00",
            "funcEndAddr": "0x408a18",
            "decompiledFuncCode": "__int64 __fastcall sub_408A00(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408350(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_408A20",
            "funcStartAddr": "0x408a20",
            "funcEndAddr": "0x408a9a",
            "decompiledFuncCode": "size_t __fastcall sub_408A20(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_408F40(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_408AA0",
            "funcStartAddr": "0x408aa0",
            "funcEndAddr": "0x408ba4",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408AA0(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax\n  __int64 v4; // r9\n  _BYTE *v5; // rcx\n  _BYTE *v6; // rdi\n\n  if ( !a3 )\n    return 0LL;\n  if ( ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && (((v4 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) == 0 )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( (((v4 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = a1 + 1;\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = v5;\n      if ( v5 == v6 )\n        break;\n      if ( *v5++ == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_408BB0",
            "funcStartAddr": "0x408bb0",
            "funcEndAddr": "0x408beb",
            "decompiledFuncCode": "void __noreturn sub_408BB0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  __fprintf_chk(stderr, 1LL, \"%s\\n\", v0);\n  exit(status);\n}\n"
        },
        {
            "funcName": "sub_408BF0",
            "funcStartAddr": "0x408bf0",
            "funcEndAddr": "0x408c05",
            "decompiledFuncCode": "__int64 __fastcall sub_408BF0(__int64 a1, __int64 a2)\n{\n  __int64 (__fastcall *v2)(__int64); // rax\n\n  v2 = *(__int64 (__fastcall **)(__int64))(a1 + 56);\n  if ( (*(_BYTE *)(a1 + 80) & 1) != 0 )\n    return v2(*(_QWORD *)(a1 + 72));\n  else\n    return v2(a2);\n}\n"
        },
        {
            "funcName": "sub_408C10",
            "funcStartAddr": "0x408c10",
            "funcEndAddr": "0x408c25",
            "decompiledFuncCode": "__int64 __fastcall sub_408C10(__int64 a1, __int64 a2)\n{\n  __int64 (__fastcall *v2)(__int64); // rax\n\n  v2 = *(__int64 (__fastcall **)(__int64))(a1 + 64);\n  if ( (*(_BYTE *)(a1 + 80) & 1) != 0 )\n    return v2(*(_QWORD *)(a1 + 72));\n  else\n    return v2(a2);\n}\n"
        },
        {
            "funcName": "sub_408C30",
            "funcStartAddr": "0x408c30",
            "funcEndAddr": "0x408cb3",
            "decompiledFuncCode": "__int64 __fastcall sub_408C30(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  __int64 v4; // r12\n  _QWORD *v5; // rax\n  __int64 v6; // rbp\n  __int64 v7; // rdx\n  char *v8; // rdx\n  __int64 result; // rax\n\n  if ( a3 )\n  {\n    v3 = a3;\n    v4 = a3 - 1;\n  }\n  else\n  {\n    v4 = 15LL;\n    v3 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v4;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v5 = (_QWORD *)sub_408BF0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v5;\n  if ( !v5 )\n    obstack_alloc_failed_handler();\n  v6 = ((unsigned __int64)v5 + v4 + 16) & -v3;\n  v7 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v6;\n  v8 = (char *)v5 + v7;\n  *(_QWORD *)(a1 + 24) = v6;\n  *v5 = v8;\n  *(_QWORD *)(a1 + 32) = v8;\n  v5[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n"
        },
        {
            "funcName": "obstack_begin",
            "funcStartAddr": "0x408cc0",
            "funcEndAddr": "0x408cd1",
            "decompiledFuncCode": "__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  *(_BYTE *)(a1 + 80) &= ~1u;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  return sub_408C30(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "obstack_begin_1",
            "funcStartAddr": "0x408ce0",
            "funcEndAddr": "0x408cf5",
            "decompiledFuncCode": "__int64 __fastcall obstack_begin_1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  *(_BYTE *)(a1 + 80) |= 1u;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  *(_QWORD *)(a1 + 72) = a6;\n  return sub_408C30(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "obstack_newchunk",
            "funcStartAddr": "0x408d00",
            "funcEndAddr": "0x408dfb",
            "decompiledFuncCode": "__int64 __fastcall obstack_newchunk(__int64 a1, __int64 a2, __int64 a3, _BOOL8 a4)\n{\n  size_t v4; // r13\n  __int64 v5; // rbp\n  size_t v6; // rsi\n  _BOOL8 v7; // rax\n  bool v8; // cf\n  unsigned __int64 v9; // rsi\n  size_t v10; // rdx\n  unsigned __int64 v11; // rbx\n  _QWORD *v12; // rax\n  _QWORD *v13; // r14\n  char *v14; // rbx\n  __int64 result; // rax\n\n  v4 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);\n  v5 = *(_QWORD *)(a1 + 8);\n  v8 = __CFADD__(v4, a2);\n  v6 = v4 + a2;\n  v7 = v8;\n  v8 = __CFADD__(*(_QWORD *)(a1 + 48), v6);\n  v9 = *(_QWORD *)(a1 + 48) + v6;\n  LOBYTE(a4) = v8;\n  v10 = v4 >> 3;\n  v11 = v9 + (v4 >> 3) + 100;\n  if ( *(_QWORD *)a1 >= v9 )\n    v9 = *(_QWORD *)a1;\n  if ( v9 >= v11 )\n    v11 = v9;\n  if ( v7 || (a4 = v8) || (v9 = v11, v12 = (_QWORD *)sub_408BF0(a1, v11), (v13 = v12) == 0LL) )\n    obstack_alloc_failed_handler(a1, v9, v10, a4);\n  *(_QWORD *)(a1 + 8) = v12;\n  v12[1] = v5;\n  *(_QWORD *)(a1 + 32) = (char *)v12 + v11;\n  *v12 = (char *)v12 + v11;\n  v14 = (char *)(~*(_QWORD *)(a1 + 48) & ((unsigned __int64)v12 + *(_QWORD *)(a1 + 48) + 16));\n  result = (__int64)memcpy(v14, *(const void **)(a1 + 16), v4);\n  if ( (*(_BYTE *)(a1 + 80) & 2) == 0 )\n  {\n    result = (v5 + *(_QWORD *)(a1 + 48) + 16) & ~*(_QWORD *)(a1 + 48);\n    if ( *(_QWORD *)(a1 + 16) == result )\n    {\n      v13[1] = *(_QWORD *)(v5 + 8);\n      result = sub_408C10(a1, v5);\n    }\n  }\n  *(_QWORD *)(a1 + 16) = v14;\n  *(_QWORD *)(a1 + 24) = &v14[v4];\n  *(_BYTE *)(a1 + 80) &= ~2u;\n  return result;\n}\n"
        },
        {
            "funcName": "obstack_allocated_p",
            "funcStartAddr": "0x408e00",
            "funcEndAddr": "0x408e37",
            "decompiledFuncCode": "unsigned __int64 __fastcall obstack_allocated_p(__int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n\n  result = *(_QWORD *)(a1 + 8);\n  if ( result )\n  {\n    while ( a2 <= result || *(_QWORD *)result < a2 )\n    {\n      result = *(_QWORD *)(result + 8);\n      if ( !result )\n        return 0LL;\n    }\n    return 1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "obstack_free",
            "funcStartAddr": "0x401d5e",
            "funcEndAddr": "0x401d63",
            "decompiledFuncCode": "void obstack_free(struct obstack *obstack, void *block)\n{\n  struct _obstack_chunk *chunk; // rsi\n  char *limit; // rax\n  struct _obstack_chunk *prev; // r12\n\n  chunk = obstack->chunk;\n  if ( chunk )\n  {\n    while ( 1 )\n    {\n      if ( chunk < block )\n      {\n        limit = chunk->limit;\n        if ( chunk->limit >= block )\n          break;\n      }\n      prev = chunk->prev;\n      sub_408C10((__int64)obstack, (__int64)chunk);\n      *((_BYTE *)obstack + 80) |= 2u;\n      chunk = prev;\n      if ( !prev )\n        goto LABEL_5;\n    }\n    obstack->next_free = (char *)block;\n    obstack->object_base = (char *)block;\n    obstack->chunk_limit = limit;\n    obstack->chunk = chunk;\n  }\n  else\n  {\nLABEL_5:\n    if ( block )\n      abort();\n  }\n}\n\nvoid obstack_free(struct obstack *obstack, void *block)\n{\n  struct _obstack_chunk *chunk; // rsi\n  char *limit; // rax\n  struct _obstack_chunk *prev; // r12\n\n  chunk = obstack->chunk;\n  if ( chunk )\n  {\n    while ( 1 )\n    {\n      if ( chunk < block )\n      {\n        limit = chunk->limit;\n        if ( chunk->limit >= block )\n          break;\n      }\n      prev = chunk->prev;\n      sub_408C10((__int64)obstack, (__int64)chunk);\n      *((_BYTE *)obstack + 80) |= 2u;\n      chunk = prev;\n      if ( !prev )\n        goto LABEL_5;\n    }\n    obstack->next_free = (char *)block;\n    obstack->object_base = (char *)block;\n    obstack->chunk_limit = limit;\n    obstack->chunk = chunk;\n  }\n  else\n  {\nLABEL_5:\n    if ( block )\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "obstack_free",
            "funcStartAddr": "0x401d5e",
            "funcEndAddr": "0x401d63",
            "decompiledFuncCode": "void obstack_free(struct obstack *obstack, void *block)\n{\n  struct _obstack_chunk *chunk; // rsi\n  char *limit; // rax\n  struct _obstack_chunk *prev; // r12\n\n  chunk = obstack->chunk;\n  if ( chunk )\n  {\n    while ( 1 )\n    {\n      if ( chunk < block )\n      {\n        limit = chunk->limit;\n        if ( chunk->limit >= block )\n          break;\n      }\n      prev = chunk->prev;\n      sub_408C10((__int64)obstack, (__int64)chunk);\n      *((_BYTE *)obstack + 80) |= 2u;\n      chunk = prev;\n      if ( !prev )\n        goto LABEL_5;\n    }\n    obstack->next_free = (char *)block;\n    obstack->object_base = (char *)block;\n    obstack->chunk_limit = limit;\n    obstack->chunk = chunk;\n  }\n  else\n  {\nLABEL_5:\n    if ( block )\n      abort();\n  }\n}\n\nvoid obstack_free(struct obstack *obstack, void *block)\n{\n  struct _obstack_chunk *chunk; // rsi\n  char *limit; // rax\n  struct _obstack_chunk *prev; // r12\n\n  chunk = obstack->chunk;\n  if ( chunk )\n  {\n    while ( 1 )\n    {\n      if ( chunk < block )\n      {\n        limit = chunk->limit;\n        if ( chunk->limit >= block )\n          break;\n      }\n      prev = chunk->prev;\n      sub_408C10((__int64)obstack, (__int64)chunk);\n      *((_BYTE *)obstack + 80) |= 2u;\n      chunk = prev;\n      if ( !prev )\n        goto LABEL_5;\n    }\n    obstack->next_free = (char *)block;\n    obstack->object_base = (char *)block;\n    obstack->chunk_limit = limit;\n    obstack->chunk = chunk;\n  }\n  else\n  {\nLABEL_5:\n    if ( block )\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "obstack_memory_used",
            "funcStartAddr": "0x408eb0",
            "funcEndAddr": "0x408ed9",
            "decompiledFuncCode": "__int64 __fastcall obstack_memory_used(__int64 a1)\n{\n  _QWORD *v1; // rdx\n  __int64 result; // rax\n  __int64 v3; // rcx\n\n  v1 = *(_QWORD **)(a1 + 8);\n  for ( result = 0LL; v1; result += v3 )\n  {\n    v3 = *v1 - (_QWORD)v1;\n    v1 = (_QWORD *)v1[1];\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408EE0",
            "funcStartAddr": "0x408ee0",
            "funcEndAddr": "0x408f3d",
            "decompiledFuncCode": "int __fastcall sub_408EE0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_4055A0(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n    return -1;\n  }\n  if ( !result )\n    return result;\n  if ( v1 )\n    return -1;\n  return -(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_408F40",
            "funcStartAddr": "0x408f40",
            "funcEndAddr": "0x408f9e",
            "decompiledFuncCode": "bool __fastcall sub_408F40(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408FA0",
            "funcStartAddr": "0x408fa0",
            "funcEndAddr": "0x409502",
            "decompiledFuncCode": "const char *sub_408FA0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = qword_60F518;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_60F518 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          qword_60F518 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_4055A0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_4055A0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_409580",
            "funcStartAddr": "0x409580",
            "funcEndAddr": "0x409598",
            "decompiledFuncCode": "int __fastcall sub_409580(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_60F248 )\n    v1 = (void *)qword_60F248;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_409598",
            "funcStartAddr": "0x409598",
            "funcEndAddr": "0x4095b8",
            "decompiledFuncCode": "__int64 __fastcall sub_409598(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_60EE30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 89
}