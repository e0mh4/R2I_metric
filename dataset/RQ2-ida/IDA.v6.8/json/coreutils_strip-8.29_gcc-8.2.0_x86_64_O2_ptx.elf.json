{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  unsigned __int64 v3; // rbp@1\n  char **v4; // rbx@1\n  signed __int64 v5; // rsi@2\n  char *v6; // rdi@2\n  int v7; // eax@2\n  __int64 v8; // rax@26\n  _BYTE *v9; // rax@48\n  __int64 v10; // rax@50\n  char *v11; // rax@52\n  int v12; // ebp@56\n  unsigned __int64 v13; // rcx@56\n  size_t v14; // rdx@56\n  __int64 v15; // rax@58\n  __int64 v16; // rax@60\n  __int64 v17; // rax@62\n  unsigned __int64 v18; // r14@63\n  __int64 v19; // r13@63\n  char *v20; // r12@66\n  const __int32_t **v21; // rax@71\n  __int64 v22; // rdx@71\n  __int32_t v23; // ecx@72\n  __int64 v24; // rdi@77\n  __int64 v25; // rax@85\n  char *v26; // rbx@85\n  char *v27; // r12@86\n  char *v28; // r15@87\n  const unsigned __int16 *v29; // rax@87\n  char *v30; // rdx@94\n  char *v31; // r14@94\n  __int64 v32; // rax@96\n  const unsigned __int16 *v33; // rax@101\n  __int64 v34; // rax@104\n  char *v35; // r12@104\n  __int64 v36; // rax@105\n  char *v37; // r13@107\n  unsigned __int64 v38; // rcx@116\n  signed __int64 v39; // rdi@117\n  __m128i v40; // xmm0@123\n  __int128 v41; // tt@141\n  __int64 v42; // rdx@141\n  __int64 v43; // rsi@141\n  __int64 v44; // rax@144\n  __int64 v45; // rdx@145\n  const unsigned __int16 **v46; // rax@148\n  __int64 v47; // rdx@148\n  const unsigned __int16 *v48; // rcx@148\n  unsigned __int16 v49; // ax@149\n  const char *v50; // rdx@152\n  signed __int64 v51; // rax@152\n  signed __int64 v52; // rax@154\n  __int64 v53; // rdx@157\n  unsigned __int64 v54; // rcx@157\n  __int64 v55; // r9@157\n  __int64 v56; // rbx@157\n  __int64 v57; // rax@157\n  _BYTE *v58; // r15@157\n  unsigned __int64 v59; // rbx@157\n  __int64 v60; // rax@157\n  unsigned __int64 v61; // r13@157\n  unsigned __int64 v62; // r12@157\n  unsigned __int64 v63; // rax@160\n  __int64 v64; // rax@169\n  __int64 v65; // rax@169\n  __int64 v66; // rax@169\n  char *v67; // r13@169\n  int v68; // er12@169\n  signed __int64 v69; // r14@169\n  __int64 v70; // rax@172\n  int v71; // eax@173\n  __int64 v72; // rax@174\n  __int64 v73; // rbx@174\n  char *v74; // rax@174\n  size_t v75; // ST08_8@183\n  const unsigned __int16 **v76; // rax@183\n  const unsigned __int16 *v77; // rax@183\n  __int64 v78; // r9@192\n  char *v79; // r10@193\n  unsigned __int64 v80; // rsi@193\n  char v81; // al@193\n  char v82; // bp@193\n  unsigned __int64 v83; // rcx@193\n  char *v84; // r8@193\n  __int64 v85; // r12@193\n  char *v86; // r13@193\n  unsigned __int64 v87; // r14@194\n  char *v88; // rbx@198\n  __int64 v89; // ST50_8@199\n  char *v90; // ST48_8@199\n  size_t v91; // ST38_8@199\n  char *v92; // ST30_8@199\n  const unsigned __int16 **v93; // rax@199\n  const unsigned __int16 *v94; // rax@199\n  unsigned __int64 v95; // rcx@203\n  char *v96; // rax@210\n  char *v97; // rdi@212\n  char v98; // cl@212\n  unsigned __int64 v99; // r12@212\n  char *v100; // rbp@212\n  __int64 v101; // rbx@212\n  char v102; // al@214\n  char *v103; // r14@215\n  const unsigned __int16 *v104; // rdx@216\n  char *v105; // rax@216\n  __int64 v106; // rdx@221\n  void *v107; // rdi@238\n  _BYTE *v108; // rcx@238\n  _BYTE *v109; // rax@238\n  __int64 v110; // rdx@239\n  __int64 v111; // rax@248\n  __int64 v112; // rax@248\n  __int64 v113; // rax@248\n  unsigned __int64 i; // rbx@249\n  signed __int64 v115; // r12@250\n  signed __int64 v116; // r8@250\n  int v117; // edx@252\n  const char *v118; // rdi@252\n  signed __int64 v119; // rax@252\n  __int64 v120; // rdi@258\n  char *v121; // rax@258\n  const unsigned __int16 **v122; // rax@261\n  __int64 v123; // rcx@261\n  unsigned __int16 v124; // dx@262\n  bool v125; // al@274\n  __int64 v126; // rdx@274\n  char v127; // al@277\n  __int64 v128; // rdx@282\n  _BYTE *v129; // r14@283\n  signed __int64 v130; // rax@284\n  char v131; // si@289\n  __int64 v132; // r11@294\n  unsigned __int64 v133; // rdx@294\n  _BYTE *v134; // rsi@294\n  unsigned __int64 v135; // rax@294\n  unsigned __int64 v136; // rax@297\n  __int64 v137; // rax@300\n  _BYTE *v138; // rax@303\n  char v139; // cl@308\n  __int64 v140; // r11@313\n  __int64 v141; // rsi@314\n  _BYTE *v142; // r15@314\n  char v143; // cl@315\n  unsigned __int64 v144; // rdx@320\n  unsigned __int64 v145; // rax@323\n  _BYTE *v146; // rax@336\n  __int64 v147; // rcx@337\n  unsigned __int64 v148; // rax@348\n  char v149; // r8@349\n  __int64 v150; // r12@354\n  __int64 v151; // rax@355\n  char v152; // si@356\n  unsigned __int64 v153; // rax@361\n  unsigned __int64 v154; // rax@365\n  char v155; // si@372\n  char v156; // cl@377\n  __int64 v157; // rdx@378\n  const char *v158; // rsi@378\n  signed __int64 v159; // rbx@380\n  char *v160; // rax@382\n  char *v161; // rax@386\n  _BYTE *v162; // rbx@388\n  __int64 v163; // r12@388\n  __int64 v164; // r13@388\n  signed __int64 v165; // rax@389\n  char *v166; // rax@393\n  char *v167; // rax@397\n  char *v168; // rax@399\n  char *v169; // rax@401\n  _BYTE *v171; // rax@406\n  __int64 v172; // rcx@407\n  char *v173; // rax@414\n  _IO_FILE *v174; // rdi@432\n  char *v175; // rax@432\n  __int64 v176; // rdi@436\n  __int64 v177; // rax@436\n  __int64 v178; // rcx@441\n  __int64 v179; // rdx@441\n  char *v180; // rax@450\n  char *v181; // rax@454\n  char *v182; // rax@458\n  char *v183; // rax@462\n  char *v184; // rax@466\n  __int64 v185; // rdi@484\n  __int64 v186; // rax@487\n  __int64 v187; // rsi@488\n  __int64 v188; // rdi@489\n  __int64 v189; // rax@489\n  __int64 v190; // rdi@489\n  __int64 v191; // rax@499\n  __int64 v192; // rax@505\n  __int64 v193; // rax@523\n  __int64 v194; // rbx@523\n  char *v195; // rax@523\n  __int64 v196; // rax@525\n  __int64 v197; // rbx@525\n  int *v198; // rax@525\n  __int64 v199; // rax@527\n  __int64 v200; // rbx@527\n  char *v201; // rax@527\n  __int64 v202; // rax@528\n  __int64 v203; // rbx@528\n  char *v204; // rax@528\n  char v205; // [sp+8h] [bp-C0h]@111\n  __int64 v206; // [sp+8h] [bp-C0h]@323\n  char *v207; // [sp+10h] [bp-B8h]@0\n  void *v208; // [sp+18h] [bp-B0h]@0\n  signed __int64 v209; // [sp+20h] [bp-A8h]@0\n  unsigned __int64 v210; // [sp+28h] [bp-A0h]@157\n  __int64 v211; // [sp+60h] [bp-68h]@84\n  signed __int64 v212; // [sp+68h] [bp-60h]@85\n  const __m128i ptr; // [sp+70h] [bp-58h]@30\n\n  v3 = a1;\n  v4 = a2;\n  sub_405B60(*a2, a2, a3);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_41B410(\n    sub_4058C0,\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  while ( 1 )\n  {\n    v5 = (signed __int64)v4;\n    v6 = (char *)(unsigned int)v3;\n    v7 = sub_40AAD0((unsigned int)v3, v4, \"AF:GM:ORS:TW:b:i:fg:o:trw:\", &off_41BFC0, 0LL);\n    if ( v7 == -1 )\n      break;\n    if ( v7 == 83 )\n    {\n      LODWORD(v10) = sub_404780(nptr);\n      qword_6239A0 = v10;\n    }\n    else if ( v7 <= 83 )\n    {\n      if ( v7 == 70 )\n      {\n        LODWORD(v11) = sub_404780(nptr);\n        s = v11;\n      }\n      else if ( v7 <= 70 )\n      {\n        if ( v7 == -130 )\n          sub_405120(0);\n        if ( v7 <= -130 )\n        {\n          if ( v7 == -131 )\n          {\n            sub_406550(\"F. Pinard\", \"FranÃ§ois Pinard\");\n            sub_409020((char)stdout);\n            exit(0);\n          }\nLABEL_175:\n          sub_405120(1);\n        }\n        if ( v7 == 10 )\n        {\n          LODWORD(v8) = sub_4057E0(\"--format\", nptr, off_41BFA0, dword_41BF90, 4LL, off_6232E0);\n          dword_623B04 = dword_41BF90[v8];\n        }\n        else\n        {\n          if ( v7 != 65 )\n            goto LABEL_175;\n          byte_623B0A = 1;\n        }\n      }\n      else if ( v7 == 77 )\n      {\n        off_6232B0 = nptr;\n      }\n      else if ( v7 <= 77 )\n      {\n        if ( v7 != 71 )\n          goto LABEL_175;\n        byte_6232D0 = 0;\n      }\n      else if ( v7 == 79 )\n      {\n        dword_623B04 = 2;\n      }\n      else\n      {\n        if ( v7 != 82 )\n          goto LABEL_175;\n        byte_623B08 = 1;\n      }\n    }\n    else if ( v7 == 103 )\n    {\n      if ( (unsigned int)sub_409470(nptr) || ptr.m128i_i64[0] <= 0 )\n      {\n        LODWORD(v199) = sub_408350(nptr);\n        v200 = v199;\n        v201 = dcgettext(0LL, \"invalid gap width: %s\", 5);\n        error(1, 0, v201, v200);\nLABEL_528:\n        LODWORD(v202) = sub_408350(nptr);\n        v203 = v202;\n        v204 = dcgettext(0LL, \"invalid line width: %s\", 5);\n        error(1, 0, v204, v203);\n        start();\n      }\n      qword_6232C0 = ptr.m128i_i64[0];\n    }\n    else if ( v7 <= 103 )\n    {\n      if ( v7 == 87 )\n      {\n        LODWORD(v9) = sub_404780(nptr);\n        qword_623840 = (__int64)v9;\n        if ( !*v9 )\n          qword_623840 = 0LL;\n      }\n      else if ( v7 <= 87 )\n      {\n        if ( v7 != 84 )\n          goto LABEL_175;\n        dword_623B04 = 3;\n      }\n      else if ( v7 == 98 )\n      {\n        qword_623AF8 = (__int64)nptr;\n      }\n      else\n      {\n        if ( v7 != 102 )\n          goto LABEL_175;\n        byte_623B00 = 1;\n      }\n    }\n    else if ( v7 == 114 )\n    {\n      byte_623B09 = 1;\n    }\n    else if ( v7 > 114 )\n    {\n      if ( v7 != 116 )\n      {\n        if ( v7 != 119 )\n          goto LABEL_175;\n        if ( (unsigned int)sub_409470(nptr) || ptr.m128i_i64[0] <= 0 )\n          goto LABEL_528;\n        qword_6232C8 = ptr.m128i_i64[0];\n      }\n    }\n    else if ( v7 == 105 )\n    {\n      qword_623AE8 = (__int64)nptr;\n    }\n    else\n    {\n      if ( v7 != 111 )\n        goto LABEL_175;\n      qword_623AF0 = (__int64)nptr;\n    }\n  }\n  if ( dword_62335C == (_DWORD)v3 )\n  {\n    LODWORD(v111) = sub_409160(8LL);\n    qword_623588 = v111;\n    LODWORD(v112) = sub_409160(8LL);\n    qword_623580 = v112;\n    LODWORD(v113) = sub_409160(16LL);\n    dword_623598 = 1;\n    qword_623578 = v113;\n    *(_QWORD *)qword_623588 = 0LL;\n    goto LABEL_68;\n  }\n  if ( byte_6232D0 )\n  {\n    v12 = v3 - dword_62335C;\n    v13 = v12;\n    dword_623598 = v12;\n    v3 = 8LL;\n    v14 = (unsigned __int128)v13 >> 61 != 0;\n    if ( v13 & 0x1000000000000000LL\n      || (unsigned __int128)v13 >> 61 != 0\n      || (v6 = (char *)(8 * v13),\n          LODWORD(v15) = sub_409160(8 * v13),\n          qword_623588 = v15,\n          v14 = (unsigned __int128)(unsigned __int64)dword_623598 >> 61 != 0,\n          dword_623598 & 0x1000000000000000LL)\n      || (unsigned __int128)(unsigned __int64)dword_623598 >> 61 != 0\n      || (LODWORD(v16) = sub_409160(8LL * dword_623598),\n          v6 = (char *)dword_623598,\n          qword_623580 = v16,\n          v14 = (unsigned __int128)(unsigned __int64)dword_623598 >> 60 != 0,\n          dword_623598 & 0x800000000000000LL)\n      || (unsigned __int128)(unsigned __int64)dword_623598 >> 60 != 0 )\n    {\nLABEL_228:\n      sub_4093B0(v6, v5, v14);\n    }\n    LODWORD(v17) = sub_409160(16LL * dword_623598);\n    qword_623578 = v17;\n    if ( dword_623598 > 0 )\n    {\n      v18 = dword_62335C + (unsigned __int64)(unsigned int)(dword_623598 - 1) + 2;\n      v3 = dword_62335C + 1;\n      v19 = qword_623588 + -8LL * dword_62335C;\n      do\n      {\n        while ( 1 )\n        {\n          v20 = v4[v3 - 1];\n          if ( !*v20 || !strcmp(v4[v3 - 1], \"-\") )\n            break;\n          *(_QWORD *)(v19 + 8 * v3 - 8) = v20;\n          dword_62335C = v3++;\n          if ( v18 == v3 )\n            goto LABEL_68;\n        }\n        *(_QWORD *)(v19 + 8 * v3 - 8) = 0LL;\n        dword_62335C = v3++;\n      }\n      while ( v18 != v3 );\n    }\n    goto LABEL_68;\n  }\n  dword_623598 = 1;\n  LODWORD(v64) = sub_409160(8LL);\n  qword_623588 = v64;\n  LODWORD(v65) = sub_409160(8LL);\n  qword_623580 = v65;\n  LODWORD(v66) = sub_409160(16LL);\n  qword_623578 = v66;\n  v67 = v4[dword_62335C];\n  v68 = dword_62335C;\n  v69 = dword_62335C;\n  if ( !*v67 || !strcmp(v4[dword_62335C], \"-\") )\n    *(_QWORD *)qword_623588 = 0LL;\n  else\n    *(_QWORD *)qword_623588 = v67;\n  dword_62335C = v68 + 1;\n  if ( v68 + 1 >= (signed int)v3 )\n    goto LABEL_68;\n  LODWORD(v70) = sub_4059B0(v4[v69 + 1], \"w\", stdout);\n  if ( v70 )\n  {\n    v71 = dword_62335C + 1;\n    dword_62335C = v71;\n    if ( v71 < (signed int)v3 )\n    {\n      LODWORD(v72) = sub_408350(v4[v71]);\n      v73 = v72;\n      v74 = dcgettext(0LL, \"extra operand %s\", 5);\n      error(0, 0, v74, v73);\n      goto LABEL_175;\n    }\nLABEL_68:\n    if ( !dword_623B04 )\n      dword_623B04 = 2 - ((unsigned __int8)byte_6232D0 >= 1u);\n    if ( byte_623B00 )\n    {\n      v21 = __ctype_toupper_loc();\n      v22 = 0LL;\n      do\n      {\n        v23 = (*v21)[v22++];\n        byte_62373F[v22] = v23;\n      }\n      while ( v22 != 256 );\n    }\n    if ( qword_6239A0 )\n    {\n      if ( !*(_BYTE *)qword_6239A0 )\n      {\n        qword_6239A0 = 0LL;\n        goto LABEL_76;\n      }\n    }\n    else if ( !byte_6232D0 || byte_623B09 )\n    {\n      qword_6239A0 = (__int64)\"\\n\";\n    }\n    else\n    {\n      qword_6239A0 = (__int64)\"[.?!][]\\\"')}]*\\\\($\\\\|\\t\\\\|  \\\\)[ \\t\\n]*\";\n    }\n    sub_4049D0(&qword_6239A0);\nLABEL_76:\n    if ( qword_623840 )\n    {\n      sub_4049D0(&qword_623840);\n      v24 = qword_623AF8;\n      if ( !qword_623AF8 )\n        goto LABEL_78;\n      goto LABEL_238;\n    }\n    goto LABEL_237;\n  }\n  LODWORD(v196) = sub_4081D0(0LL, 3LL, v4[dword_62335C]);\n  v197 = v196;\n  v198 = __errno_location();\n  error(1, *v198, \"%s\", v197);\nLABEL_526:\n  v187 = 0LL;\nLABEL_489:\n  v188 = v186 - v187;\n  v189 = 0LL;\n  v190 = v188 - (v179 - v178);\n  if ( byte_6233B0 )\n    v189 = qword_623430;\n  sub_404A70(v190 - v189);\n  if ( byte_6233B0 )\n    fputs_unlocked(s, stdout);\n  sub_404AC0(qword_6233C0, qword_6233C8);\nLABEL_494:\n  if ( byte_623B0A )\n  {\nLABEL_446:\n    if ( byte_623B08 )\n    {\n      sub_404A70(qword_6232C0);\n      sub_404AC0(dest, qword_6233A8);\n    }\n    goto LABEL_401;\n  }\nLABEL_445:\n  if ( byte_623B09 )\n    goto LABEL_446;\nLABEL_401:\n  while ( 1 )\n  {\n    v169 = stdout->_IO_write_ptr;\n    if ( v169 >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, 10);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v169 + 1;\n      *v169 = 10;\n    }\nLABEL_403:\n    ++v209;\n    v208 = (char *)v208 + 48;\n    if ( v209 >= (signed __int64)nmemb )\n      return 0LL;\n    while ( 1 )\n    {\n      v53 = qword_623438;\n      v54 = *(_QWORD *)v208;\n      v55 = *((_QWORD *)v208 + 2);\n      v56 = *((_QWORD *)v208 + 3);\n      v57 = *((_DWORD *)v208 + 10);\n      v58 = (_BYTE *)(*(_QWORD *)v208 + *((_QWORD *)v208 + 1));\n      qword_6233E0 = v54;\n      v59 = v54 + v56;\n      qword_6233E8 = (__int64)v58;\n      v60 = qword_623578 + 16 * v57;\n      v210 = v54 + v55;\n      v61 = *(_QWORD *)v60;\n      v62 = *(_QWORD *)(v60 + 8);\n      if ( (unsigned __int64)v58 >= v59 )\n      {\nLABEL_272:\n        v54 = qword_6233E0;\n        if ( (unsigned __int64)v58 <= qword_6233E0 + v53 )\n          qword_6233E8 = (__int64)v58;\n      }\n      else if ( (unsigned __int64)v58 <= v54 + qword_623438 )\n      {\n        do\n        {\n          qword_6233E8 = (__int64)v58;\n          if ( qword_623840 )\n          {\n            LODWORD(v63) = sub_418960(&unk_623848, v58, v59 - (_QWORD)v58, 0LL, 0LL);\n            if ( v63 == -2LL )\n              goto LABEL_236;\n            v53 = qword_623438;\n            if ( v63 == -1LL )\n              v63 = v3;\n            v58 += v63;\n          }\n          else\n          {\n            if ( byte_623600[(unsigned __int64)*v58] )\n            {\n              if ( v59 > (unsigned __int64)v58 )\n              {\n                while ( (_BYTE *)v59 != ++v58 )\n                {\n                  if ( !byte_623600[(unsigned __int64)*v58] )\n                    goto LABEL_165;\n                }\n                v58 = (_BYTE *)v59;\n              }\nLABEL_271:\n              v55 = *((_QWORD *)v208 + 2);\n              goto LABEL_272;\n            }\n            ++v58;\n          }\n          if ( v59 <= (unsigned __int64)v58 )\n            goto LABEL_271;\nLABEL_165:\n          v54 = qword_6233E0;\n        }\n        while ( (unsigned __int64)v58 <= qword_6233E0 + v53 );\n        v55 = *((_QWORD *)v208 + 2);\n      }\n      v125 = 0;\n      v126 = qword_6233E8;\n      if ( s )\n        v125 = v59 > qword_6233E8;\n      byte_6233D0 = v125;\n      if ( v54 < qword_6233E8 )\n      {\n        v127 = 0;\n        while ( *(_BYTE *)(*(_QWORD *)v207 + 2LL * *(_BYTE *)(v126 - 1) + 1) & 0x20 )\n        {\n          --v126;\n          v127 = 1;\n          if ( v126 == v54 )\n          {\n            qword_6233E8 = v54;\n            goto LABEL_282;\n          }\n        }\n        if ( v127 )\n          qword_6233E8 = v126;\n      }\nLABEL_282:\n      v128 = qword_623448 + qword_6235E0;\n      if ( -v55 <= qword_623448 + qword_6235E0 )\n      {\n        v129 = (_BYTE *)(v54 + v55);\n      }\n      else\n      {\n        v129 = (_BYTE *)(v54 - v128);\n        if ( qword_623840 )\n        {\n          LODWORD(v130) = sub_418960(&unk_623848, v129, v128, 0LL, 0LL);\n          if ( v130 == -2 )\n            goto LABEL_236;\n          if ( v130 == -1 )\n            v130 = 1LL;\n          v54 = qword_6233E0;\n          v129 += v130;\n        }\n        else if ( byte_623600[(unsigned __int64)*v129] )\n        {\n          if ( (unsigned __int64)v129 < v54 )\n          {\n            do\n              ++v129;\n            while ( v129 != (_BYTE *)v54 && byte_623600[(unsigned __int64)*v129] );\n          }\n        }\n        else\n        {\n          ++v129;\n        }\n      }\n      qword_623400 = (__int64)v129;\n      qword_623408 = v54;\n      if ( (unsigned __int64)v129 < v54 )\n      {\n        v131 = 0;\n        while ( *(_BYTE *)(*(_QWORD *)v207 + 2LL * *(_BYTE *)(v54 - 1) + 1) & 0x20 )\n        {\n          --v54;\n          v131 = 1;\n          if ( v129 == (_BYTE *)v54 )\n          {\n            qword_623408 = (__int64)v129;\n            goto LABEL_294;\n          }\n        }\n        if ( v131 )\n          qword_623408 = v54;\n      }\nLABEL_294:\n      v132 = qword_623440;\n      v133 = qword_623408;\n      v134 = v129;\n      v135 = (unsigned __int64)&v129[qword_623440];\n      while ( v133 > v135 )\n      {\n        while ( qword_623840 )\n        {\n          LODWORD(v136) = sub_418960(&unk_623848, v134, v133 - (_QWORD)v134, 0LL, 0LL);\n          if ( v136 == -2LL )\n            goto LABEL_236;\n          v132 = qword_623440;\n          v133 = qword_623408;\n          if ( v136 == -1LL )\n            v136 = v3;\n          v137 = qword_623400 + v136;\n          v134 = (_BYTE *)v137;\n          qword_623400 = v137;\n          v135 = v137 + qword_623440;\n          if ( qword_623408 <= v135 )\n            goto LABEL_301;\n        }\n        if ( byte_623600[(unsigned __int64)*v134] )\n        {\n          if ( (unsigned __int64)v134 < v133 )\n          {\n            v146 = v134 + 1;\n            while ( 1 )\n            {\n              v134 = v146;\n              if ( (_BYTE *)v133 == v146 )\n                break;\n              v147 = *v146++;\n              if ( !byte_623600[v147] )\n                goto LABEL_334;\n            }\n            qword_623400 = v133;\n            v135 = v133 + v132;\n          }\n        }\n        else\n        {\n          ++v134;\nLABEL_334:\n          qword_623400 = (__int64)v134;\n          v135 = (unsigned __int64)&v134[v132];\n        }\n      }\nLABEL_301:\n      if ( s )\n      {\n        if ( v61 >= (unsigned __int64)v134 )\n        {\n          v138 = v134;\n        }\n        else\n        {\n          v138 = v134;\n          while ( *(_BYTE *)(*(_QWORD *)v207 + 2LL * *(v138 - 1) + 1) & 0x20 )\n          {\n            if ( (_BYTE *)v61 == --v138 )\n            {\n              v138 = (_BYTE *)v61;\n              break;\n            }\n          }\n        }\n        byte_6233F0 = v210 < (unsigned __int64)v138;\n      }\n      else\n      {\n        byte_6233F0 = 0;\n      }\n      if ( v62 > (unsigned __int64)v134 )\n      {\n        v139 = 0;\n        while ( *(_BYTE *)(*(_QWORD *)v207 + 2LL * *v134 + 1) & 0x20 )\n        {\n          ++v134;\n          v139 = 1;\n          if ( (_BYTE *)v62 == v134 )\n          {\n            qword_623400 = v62;\n            v134 = (_BYTE *)v62;\n            goto LABEL_313;\n          }\n        }\n        if ( v139 )\n          qword_623400 = (__int64)v134;\n      }\nLABEL_313:\n      v140 = v132 - (v133 - (_QWORD)v134) - qword_6232C0;\n      if ( v140 <= 0 )\n      {\n        byte_623410 = 0;\n        v141 = qword_6233E8;\n        qword_623420 = 0LL;\n        qword_623428 = 0LL;\n      }\n      else\n      {\n        v141 = qword_6233E8;\n        v142 = (_BYTE *)qword_6233E8;\n        qword_623420 = qword_6233E8;\n        if ( v62 > qword_6233E8 )\n        {\n          v143 = 0;\n          while ( *(_BYTE *)(*(_QWORD *)v207 + 2LL * *v142 + 1) & 0x20 )\n          {\n            ++v142;\n            v143 = 1;\n            if ( (_BYTE *)v62 == v142 )\n              goto LABEL_319;\n          }\n          if ( !v143 )\n            goto LABEL_320;\nLABEL_319:\n          qword_623420 = (__int64)v142;\n        }\nLABEL_320:\n        v144 = qword_623420;\n        qword_623428 = (__int64)v142;\n        if ( v59 <= (unsigned __int64)v142 )\n        {\nLABEL_346:\n          if ( (unsigned __int64)v142 < v144 + v140 )\n            qword_623428 = (__int64)v142;\n        }\n        else if ( (unsigned __int64)v142 < qword_623420 + v140 )\n        {\n          do\n          {\n            qword_623428 = (__int64)v142;\n            if ( qword_623840 )\n            {\n              v206 = v140;\n              LODWORD(v145) = sub_418960(&unk_623848, v142, v59 - (_QWORD)v142, 0LL, 0LL);\n              if ( v145 == -2LL )\n                goto LABEL_236;\n              v144 = qword_623420;\n              v140 = v206;\n              if ( v145 == -1LL )\n                v145 = v3;\n              v142 += v145;\n            }\n            else\n            {\n              if ( byte_623600[(unsigned __int64)*v142] )\n              {\n                if ( v59 > (unsigned __int64)v142 )\n                {\n                  while ( (_BYTE *)v59 != ++v142 )\n                  {\n                    if ( !byte_623600[(unsigned __int64)*v142] )\n                      goto LABEL_328;\n                  }\n                  v142 = (_BYTE *)v59;\n                }\nLABEL_345:\n                v141 = qword_6233E8;\n                goto LABEL_346;\n              }\n              ++v142;\n            }\n            if ( v59 <= (unsigned __int64)v142 )\n              goto LABEL_345;\nLABEL_328:\n            ;\n          }\n          while ( (unsigned __int64)v142 < v144 + v140 );\n          v141 = qword_6233E8;\n        }\n        v148 = qword_623428;\n        if ( qword_623428 <= v144 )\n        {\n          byte_623410 = 0;\n        }\n        else\n        {\n          byte_6233D0 = 0;\n          v149 = 0;\n          byte_623410 = v59 > qword_623428 && s != 0LL;\n          while ( *(_BYTE *)(*(_QWORD *)v207 + 2LL * *(_BYTE *)(v148 - 1) + 1) & 0x20 )\n          {\n            --v148;\n            v149 = 1;\n            if ( v148 <= v144 )\n              goto LABEL_353;\n          }\n          if ( !v149 )\n            goto LABEL_354;\nLABEL_353:\n          qword_623428 = v148;\n        }\n      }\nLABEL_354:\n      v150 = qword_623438 - (v141 - qword_6233E0) - qword_6232C0;\n      if ( v150 <= 0 )\n      {\n        qword_6233C0 = 0LL;\n        qword_6233C8 = 0LL;\nLABEL_411:\n        byte_6233B0 = 0;\n        goto LABEL_377;\n      }\n      v151 = qword_623400;\n      qword_6233C8 = qword_623400;\n      if ( v61 >= qword_623400 )\n        goto LABEL_365;\n      v152 = 0;\n      while ( *(_BYTE *)(*(_QWORD *)v207 + 2LL * *(_BYTE *)(v151 - 1) + 1) & 0x20 )\n      {\n        --v151;\n        v152 = 1;\n        if ( v61 == v151 )\n        {\n          qword_6233C8 = v61;\n          goto LABEL_365;\n        }\n      }\n      if ( v152 )\n        qword_6233C8 = v151;\nLABEL_365:\n      while ( 2 )\n      {\n        qword_6233C0 = (__int64)v129;\n        v154 = (unsigned __int64)&v129[v150];\nLABEL_366:\n        if ( qword_6233C8 > v154 )\n        {\n          while ( !qword_623840 )\n          {\n            if ( byte_623600[(unsigned __int64)*v129] )\n            {\n              if ( qword_6233C8 > (unsigned __int64)v129 )\n              {\n                v171 = v129 + 1;\n                while ( 1 )\n                {\n                  v129 = v171;\n                  if ( (_BYTE *)qword_6233C8 == v171 )\n                    break;\n                  v172 = *v171++;\n                  if ( !byte_623600[v172] )\n                    goto LABEL_370;\n                }\n                qword_6233C0 = qword_6233C8;\n                v154 = qword_6233C8 + v150;\n              }\n              goto LABEL_366;\n            }\n            ++v129;\nLABEL_370:\n            v154 = (unsigned __int64)&v129[v150];\n            qword_6233C0 = (__int64)v129;\n            if ( qword_6233C8 <= (unsigned __int64)&v129[v150] )\n              goto LABEL_371;\n          }\n          LODWORD(v153) = sub_418960(&unk_623848, v129, qword_6233C8 - (_QWORD)v129, 0LL, 0LL);\n          if ( v153 != -2LL )\n          {\n            if ( v153 == -1LL )\n              v153 = v3;\n            v129 = (_BYTE *)(qword_6233C0 + v153);\n            continue;\n          }\n          goto LABEL_236;\n        }\n        break;\n      }\nLABEL_371:\n      if ( qword_6233C8 <= (unsigned __int64)v129 )\n        goto LABEL_411;\n      byte_6233F0 = 0;\n      v155 = 0;\n      byte_6233B0 = v210 < (unsigned __int64)v129 && s != 0LL;\n      while ( *(_BYTE *)(*(_QWORD *)v207 + 2LL * *v129 + 1) & 0x20 )\n      {\n        ++v129;\n        v155 = 1;\n        if ( v129 == (_BYTE *)qword_6233C8 )\n          goto LABEL_376;\n      }\n      if ( !v155 )\n        goto LABEL_377;\nLABEL_376:\n      qword_6233C0 = (__int64)v129;\nLABEL_377:\n      v156 = byte_623B0A;\n      if ( byte_623B0A )\n      {\n        v157 = *((_DWORD *)v208 + 10);\n        v158 = *(const char **)(qword_623588 + 8 * v157);\n        if ( !v158 )\n          v158 = \"\";\n        v159 = *((_QWORD *)v208 + 4) + 1LL;\n        if ( *((_DWORD *)v208 + 10) > 0 )\n          v159 -= *(_QWORD *)(qword_623580 + 8 * v157 - 8);\n        v160 = stpcpy(dest, v158);\n        qword_6233A8 = (__int64)&v160[__sprintf_chk(v160, 1LL, -1LL, \":%ld\", v159)];\n      }\n      else if ( byte_623B09 )\n      {\n        v173 = (char *)(qword_6233E0 + *((_QWORD *)v208 + 4));\n        dest = v173;\n        qword_6233A8 = (__int64)v173;\n        if ( v59 > (unsigned __int64)v173 )\n        {\n          while ( !(*(_BYTE *)(*(_QWORD *)v207 + 2LL * (unsigned __int8)*v173 + 1) & 0x20) )\n          {\n            ++v173;\n            v156 = byte_623B09;\n            if ( (char *)v59 == v173 )\n            {\n              qword_6233A8 = v59;\n              goto LABEL_383;\n            }\n          }\n          if ( v156 )\n            qword_6233A8 = (__int64)v173;\n        }\n      }\nLABEL_383:\n      if ( dword_623B04 == 2 )\n      {\n        __printf_chk(1LL, \".%s \\\"\", off_6232B0);\n        sub_404AC0(qword_623420, qword_623428);\n        if ( byte_623410 )\n          fputs_unlocked(s, stdout);\n        v180 = stdout->_IO_write_ptr;\n        if ( v180 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 34);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v180 + 1;\n          *v180 = 34;\n        }\n        fwrite_unlocked(\" \\\"\", 1uLL, 2uLL, stdout);\n        if ( byte_6233F0 )\n          fputs_unlocked(s, stdout);\n        sub_404AC0(qword_623400, qword_623408);\n        v181 = stdout->_IO_write_ptr;\n        if ( v181 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 34);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v181 + 1;\n          *v181 = 34;\n        }\n        fwrite_unlocked(\" \\\"\", 1uLL, 2uLL, stdout);\n        sub_404AC0(qword_6233E0, qword_6233E8);\n        if ( byte_6233D0 )\n          fputs_unlocked(s, stdout);\n        v182 = stdout->_IO_write_ptr;\n        if ( v182 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 34);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v182 + 1;\n          *v182 = 34;\n        }\n        fwrite_unlocked(\" \\\"\", 1uLL, 2uLL, stdout);\n        if ( byte_6233B0 )\n          fputs_unlocked(s, stdout);\n        sub_404AC0(qword_6233C0, qword_6233C8);\n        v183 = stdout->_IO_write_ptr;\n        if ( v183 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 34);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v183 + 1;\n          *v183 = 34;\n        }\n        if ( byte_623B0A || byte_623B09 )\n        {\n          fwrite_unlocked(\" \\\"\", 1uLL, 2uLL, stdout);\n          sub_404AC0(dest, qword_6233A8);\n          v184 = stdout->_IO_write_ptr;\n          if ( v184 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 34);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v184 + 1;\n            *v184 = 34;\n          }\n        }\n        goto LABEL_401;\n      }\n      if ( (unsigned int)dword_623B04 < 2 )\n        break;\n      if ( dword_623B04 != 3 )\n        goto LABEL_403;\n      __printf_chk(1LL, \"\\\\%s \", off_6232B0);\n      v161 = stdout->_IO_write_ptr;\n      if ( v161 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 123);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v161 + 1;\n        *v161 = 123;\n      }\n      sub_404AC0(qword_623420, qword_623428);\n      fwrite_unlocked(\"}{\", 1uLL, 2uLL, stdout);\n      sub_404AC0(qword_623400, qword_623408);\n      fwrite_unlocked(\"}{\", 1uLL, 2uLL, stdout);\n      v162 = (_BYTE *)qword_6233E0;\n      v163 = qword_6233E8;\n      v164 = qword_6233E0;\n      if ( !qword_623840 )\n      {\n        if ( byte_623600[(unsigned __int64)*(_BYTE *)qword_6233E0] )\n        {\n          while ( qword_6233E8 > (unsigned __int64)v162 && byte_623600[(unsigned __int64)*v162] )\n            ++v162;\n        }\n        else\n        {\n          v162 = (_BYTE *)(qword_6233E0 + 1);\n        }\n        goto LABEL_393;\n      }\n      LODWORD(v165) = sub_418960(&unk_623848, qword_6233E0, qword_6233E8 - qword_6233E0, 0LL, 0LL);\n      if ( v165 != -2 )\n      {\n        if ( v165 == -1 )\n          v165 = 1LL;\n        v162 += v165;\nLABEL_393:\n        sub_404AC0(v164, v162);\n        fwrite_unlocked(\"}{\", 1uLL, 2uLL, stdout);\n        sub_404AC0(v162, v163);\n        fwrite_unlocked(\"}{\", 1uLL, 2uLL, stdout);\n        sub_404AC0(qword_6233C0, qword_6233C8);\n        v166 = stdout->_IO_write_ptr;\n        if ( v166 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 125);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v166 + 1;\n          *v166 = 125;\n        }\n        if ( byte_623B0A || byte_623B09 )\n        {\n          v167 = stdout->_IO_write_ptr;\n          if ( v167 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 123);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v167 + 1;\n            *v167 = 123;\n          }\n          sub_404AC0(dest, qword_6233A8);\n          v168 = stdout->_IO_write_ptr;\n          if ( v168 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 125);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v168 + 1;\n            *v168 = 125;\n          }\n        }\n        goto LABEL_401;\n      }\nLABEL_236:\n      while ( 2 )\n      {\n        sub_404750();\nLABEL_237:\n        v24 = qword_623AF8;\n        if ( qword_623AF8 )\n        {\nLABEL_238:\n          sub_404F70(v24, &ptr, &ptr.m128i_u64[1]);\n          memset(byte_623600, 1u, 0x100uLL);\n          v107 = (void *)ptr.m128i_i64[0];\n          v108 = (_BYTE *)ptr.m128i_i64[1];\n          v109 = (_BYTE *)ptr.m128i_i64[0];\n          if ( (unsigned __int64)ptr.m128i_i64[0] < ptr.m128i_i64[1] )\n          {\n            do\n            {\n              v110 = *v109++;\n              byte_623600[v110] = 0;\n            }\n            while ( v109 != v108 );\n          }\n          if ( !byte_6232D0 )\n          {\n            byte_623620 = 0;\n            word_623609 = 0;\n          }\n          free(v107);\n        }\n        else if ( byte_6232D0 )\n        {\n          v122 = __ctype_b_loc();\n          v123 = 0LL;\n          do\n          {\n            v124 = (*v122)[v123++];\n            byte_6235FF[v123] = (v124 >> 10) & 1;\n          }\n          while ( v123 != 256 );\n        }\n        else\n        {\n          memset(byte_623600, 1u, 0x100uLL);\n          byte_623620 = 0;\n          word_623609 = 0;\n        }\nLABEL_78:\n        if ( qword_623AE8 )\n        {\n          sub_405030(qword_623AE8, &qword_6235C0);\n          if ( !qword_6235D0 )\n            qword_623AE8 = 0LL;\n        }\n        if ( qword_623AF0 )\n        {\n          sub_405030(qword_623AF0, &qword_6235A0);\n          if ( !qword_6235B0 )\n            qword_623AF0 = 0LL;\n        }\n        nmemb = 0LL;\n        qword_623590 = 0LL;\n        qword_6235E0 = 0LL;\n        qword_6235D8 = 0LL;\n        v211 = 0LL;\n        if ( dword_623598 > 0 )\n        {\nLABEL_85:\n          v212 = 8 * v211;\n          v5 = 16 * v211 + qword_623578;\n          sub_404F70(*(_QWORD *)(qword_623588 + 8 * v211), v5, v5 + 8);\n          v25 = qword_623578 + 16 * v211;\n          v208 = (void *)(qword_623578 + 16 * v211);\n          v26 = *(char **)v25;\n          if ( byte_623B09 )\n          {\n            v27 = *(char **)(v25 + 8);\n            v3 = (unsigned __int64)v27;\n            if ( v26 >= v27 )\n            {\n              v3 = *(_QWORD *)v25;\nLABEL_511:\n              v28 = (char *)v3;\n              v209 = v3 - (_QWORD)v26;\n            }\n            else\n            {\n              v28 = *(char **)v25;\n              v29 = *__ctype_b_loc();\n              while ( !(HIBYTE(v29[(unsigned __int8)*v28]) & 0x20) )\n              {\n                if ( ++v28 == v27 )\n                  goto LABEL_511;\n              }\n              v5 = v28 - v26;\n              v209 = v28 - v26;\n              if ( v27 > v28 )\n              {\n                do\n                {\n                  if ( !(HIBYTE(v29[(unsigned __int8)*v28]) & 0x20) )\n                    break;\n                  ++v28;\n                }\n                while ( v28 != v27 );\n              }\n            }\n          }\n          else\n          {\n            v28 = *(char **)v25;\n            v209 = 0LL;\n            v27 = (char *)*((_QWORD *)v208 + 1);\n          }\n          v30 = v27;\n          v31 = v26;\n          v207 = v27;\n          if ( v27 <= v26 )\n            goto LABEL_132;\n          while ( 1 )\n          {\n            if ( !qword_6239A0 )\n              goto LABEL_532;\n            v5 = (signed __int64)v26;\n            LODWORD(v32) = sub_418980(&unk_6239A8, v26, v30 - v26, 0LL, v30 - v26, &unk_623720);\n            if ( v32 != -1 )\n            {\n              if ( !v32 )\n              {\n                LODWORD(v193) = sub_408350(qword_6239A0);\n                v194 = v193;\n                v195 = dcgettext(0LL, \"error: regular expression has a match of length zero: %s\", 5);\n                v174 = (_IO_FILE *)1;\n                error(1, 0, v195, v194);\nLABEL_524:\n                __overflow(v174, 58);\n                goto LABEL_434;\n              }\n              if ( v32 == -2 )\n                goto LABEL_236;\n              v207 = &v26[*(_QWORD *)qword_623730];\n            }\n            v3 = (unsigned __int64)v207;\n            if ( v26 < v207 )\n            {\nLABEL_532:\n              v3 = (unsigned __int64)v207;\n              v33 = *__ctype_b_loc();\n              do\n              {\n                if ( !(HIBYTE(v33[*(_BYTE *)(v3 - 1)]) & 0x20) )\n                  break;\n                --v3;\n              }\n              while ( (unsigned __int64)v26 < v3 );\n            }\n            v34 = qword_623840;\n            v35 = v26;\nLABEL_125:\n            if ( v34 )\n              break;\n            if ( (unsigned __int64)v26 < v3 )\n            {\n              if ( !byte_623600[(unsigned __int64)(unsigned __int8)*v26] )\n              {\n                do\n                {\n                  if ( ++v26 == (char *)v3 )\n                    goto LABEL_131;\n                }\n                while ( !byte_623600[(unsigned __int64)(unsigned __int8)*v26] );\n                if ( (unsigned __int64)v26 >= v3 )\n                  goto LABEL_191;\n              }\n              if ( !byte_623600[(unsigned __int64)(unsigned __int8)*v26] )\n                goto LABEL_191;\n              v37 = v26;\n              while ( ++v37 != (char *)v3 )\n              {\n                if ( !byte_623600[(unsigned __int64)(unsigned __int8)*v37] )\n                  goto LABEL_108;\n              }\n              goto LABEL_109;\n            }\n            if ( v26 != (char *)v3 )\n            {\n              v37 = v26 + 1;\n              goto LABEL_124;\n            }\nLABEL_131:\n            v26 = v207;\n            v30 = (char *)*((_QWORD *)v208 + 1);\n            v207 = v30;\n            if ( v30 <= v26 )\n            {\nLABEL_132:\n              ++v211;\n              *(_QWORD *)(qword_623580 + v212) = ++qword_623590;\n              if ( dword_623598 <= (signed int)v211 )\n              {\n                if ( nmemb )\n                  qsort(base, nmemb, 0x30uLL, compar);\n                goto LABEL_135;\n              }\n              goto LABEL_85;\n            }\n          }\n          v5 = (signed __int64)v26;\n          LODWORD(v36) = sub_418980(&unk_623848, v26, v3 - (_QWORD)v26, 0LL, v3 - (_QWORD)v26, &unk_623700);\n          if ( v36 == -2 )\n            continue;\n          if ( v36 == -1 )\n            goto LABEL_131;\n          v37 = &v26[*(_QWORD *)qword_623710];\n          v26 += *(_QWORD *)qword_623708;\nLABEL_108:\n          if ( v26 == v37 )\n          {\n            v34 = qword_623840;\nLABEL_191:\n            v37 = v26 + 1;\n            goto LABEL_124;\n          }\nLABEL_109:\n          ptr.m128i_i64[0] = (__int64)v26;\n          ptr.m128i_i64[1] = v37 - v26;\n          if ( v37 - v26 > qword_6235E0 )\n            qword_6235E0 = v37 - v26;\n          v205 = byte_623B09;\n          if ( byte_623B09 )\n          {\n            if ( v28 < v26 )\n            {\n              v97 = v35;\n              v98 = 0;\n              v99 = v3;\n              v5 = v209;\n              v100 = v26;\n              v101 = qword_623590;\n              do\n              {\n                while ( 1 )\n                {\n                  v102 = *v28++;\n                  if ( v102 == 10 )\n                    break;\n                  if ( v28 >= v100 )\n                    goto LABEL_221;\n                }\n                ++v101;\n                v103 = (char *)*((_QWORD *)v208 + 1);\n                if ( v103 <= v28 )\n                {\n                  v105 = v28;\n                  v5 = 0LL;\n                }\n                else\n                {\n                  v104 = *__ctype_b_loc();\n                  v105 = v28;\n                  do\n                  {\n                    if ( HIBYTE(v104[(unsigned __int8)*v105]) & 0x20 )\n                      break;\n                    ++v105;\n                  }\n                  while ( v105 != v103 );\n                  v5 = v105 - v28;\n                }\n                v31 = v28;\n                v28 = v105;\n                v98 = v205;\n              }\n              while ( v105 < v100 );\nLABEL_221:\n              v106 = v101;\n              v209 = v5;\n              v26 = v100;\n              v3 = v99;\n              v35 = v97;\n              if ( v98 )\n                qword_623590 = v106;\n            }\n            if ( v28 > v26 )\n              goto LABEL_533;\n          }\n          if ( qword_623AE8 && (v5 = qword_6235C0, (unsigned __int8)sub_404F00(ptr.m128i_i8))\n            || qword_623AF0 && (v5 = qword_6235A0, !(unsigned __int8)sub_404F00(ptr.m128i_i8)) )\n          {\nLABEL_533:\n            v34 = qword_623840;\n            goto LABEL_124;\n          }\n          v14 = nmemb;\n          v38 = qword_623568;\n          v6 = (char *)base;\n          if ( nmemb != qword_623568 )\n            goto LABEL_117;\n          if ( base )\n          {\n            if ( (unsigned __int64)qword_623568 > 0x1C71C71C71C71C6LL )\n              goto LABEL_228;\n            v38 = qword_623568 + ((unsigned __int64)qword_623568 >> 1) + 1;\n          }\n          else\n          {\n            if ( !qword_623568 )\n            {\n              v5 = 96LL;\n              v38 = 2LL;\n              goto LABEL_210;\n            }\n            v14 = 48 * (unsigned __int128)(unsigned __int64)qword_623568 >> 64 != 0;\n            if ( 48 * qword_623568 < 0 || 48 * (unsigned __int128)(unsigned __int64)qword_623568 >> 64 != 0 )\n              goto LABEL_228;\n          }\n          v5 = 48 * v38;\nLABEL_210:\n          qword_623568 = v38;\n          LODWORD(v96) = sub_4091C0(base, v5);\n          v14 = nmemb;\n          v6 = v96;\n          base = v96;\n          v205 = byte_623B09;\nLABEL_117:\n          v39 = (signed __int64)&v6[48 * v14];\n          if ( !byte_623B0A )\n          {\n            if ( v205 )\n            {\n              *(_QWORD *)(v39 + 32) = v31 - v26;\n              if ( qword_6235D8 < v209 )\n                qword_6235D8 = v209;\n              goto LABEL_121;\n            }\n            goto LABEL_123;\n          }\n          v78 = qword_623590;\n          if ( v28 >= v26 )\n          {\n            v95 = (unsigned __int64)v31;\n            goto LABEL_205;\n          }\n          v79 = v35;\n          v80 = v3;\n          v81 = 0;\n          v82 = byte_623B0A;\n          v83 = (unsigned __int64)v31;\n          v84 = v37;\n          v85 = qword_623590;\n          v86 = v26;\n          while ( 1 )\n          {\n            v87 = (unsigned __int64)(v28 + 1);\n            if ( *v28 != 10 )\n              break;\n            ++v85;\n            v88 = (char *)*((_QWORD *)v208 + 1);\n            if ( (unsigned __int64)v88 <= v87 )\n            {\n              v81 = v82;\n              ++v28;\nLABEL_195:\n              if ( v28 >= v86 )\n                goto LABEL_203;\n              goto LABEL_196;\n            }\n            v89 = v78;\n            ++v28;\n            v90 = v79;\n            v91 = v14;\n            v92 = v84;\n            v93 = __ctype_b_loc();\n            v84 = v92;\n            v94 = *v93;\n            v14 = v91;\n            v79 = v90;\n            v78 = v89;\n            do\n            {\n              if ( HIBYTE(v94[(unsigned __int8)*v28]) & 0x20 )\n                break;\n              ++v28;\n            }\n            while ( v28 != v88 );\n            v81 = v82;\n            if ( v28 >= v86 )\n            {\nLABEL_203:\n              v3 = v80;\n              v26 = v86;\n              v5 = v85;\n              v95 = v87;\n              v37 = v84;\n              v35 = v79;\n              if ( v81 )\n              {\n                qword_623590 = v5;\n                v78 = v5;\n              }\nLABEL_205:\n              *(_QWORD *)(v39 + 32) = v78;\n              v31 = (char *)v95;\nLABEL_121:\n              if ( v31 == v35 && v205 && (unsigned __int64)v35 < v3 )\n              {\n                v75 = v14;\n                v76 = __ctype_b_loc();\n                v14 = v75;\n                v77 = *v76;\n                while ( !(HIBYTE(v77[(unsigned __int8)*v35]) & 0x20) )\n                {\n                  if ( ++v35 == (char *)v3 )\n                    goto LABEL_123;\n                }\n                if ( (unsigned __int64)v35 < v3 )\n                {\n                  do\n                    ++v35;\n                  while ( v35 != (char *)v3 && HIBYTE(v77[(unsigned __int8)*v35]) & 0x20 );\n                }\n              }\nLABEL_123:\n              v40 = _mm_load_si128(&ptr);\n              nmemb = v14 + 1;\n              *(_QWORD *)(v39 + 16) = v35 - v26;\n              *(__m128i *)v39 = v40;\n              *(_QWORD *)(v39 + 24) = v3 - (_QWORD)v26;\n              *(_DWORD *)(v39 + 40) = v211;\n              v34 = qword_623840;\nLABEL_124:\n              v26 = v37;\n              goto LABEL_125;\n            }\nLABEL_196:\n            v83 = v87;\n          }\n          ++v28;\n          v87 = v83;\n          goto LABEL_195;\n        }\n        break;\n      }\nLABEL_135:\n      if ( byte_623B0A )\n      {\n        qword_6235D8 = 0LL;\n        for ( i = 0LL; i < dword_623598; ++i )\n        {\n          v115 = 8 * i;\n          v116 = *(_QWORD *)(qword_623580 + 8 * i) + 1LL;\n          if ( i )\n            v116 -= *(_QWORD *)(qword_623580 + v115 - 8);\n          v117 = __sprintf_chk(&ptr, 1LL, 21LL, \"%ld\", v116);\n          v118 = *(const char **)(qword_623588 + v115);\n          v119 = v117;\n          if ( v118 )\n            v119 = strlen(v118) + 1 + v117 - 1;\n          if ( qword_6235D8 < v119 )\n            qword_6235D8 = v119;\n        }\n        v120 = qword_6235D8++ + 2;\n        LODWORD(v121) = sub_409160(v120);\n        dest = v121;\n        if ( byte_623B0A )\n          goto LABEL_534;\n      }\n      if ( byte_623B09 )\n      {\nLABEL_534:\n        if ( !byte_623B08 )\n          qword_6232C8 -= qword_6235D8 + qword_6232C0;\n      }\n      if ( qword_6232C8 < 0 )\n        qword_6232C8 = 0LL;\n      *(_QWORD *)&v41 = qword_6232C8;\n      *((_QWORD *)&v41 + 1) = (unsigned __int128)qword_6232C8 >> 64;\n      v42 = (unsigned __int128)(v41 / 2) - qword_6232C0;\n      v43 = v41 / 2;\n      qword_623448 = v41 / 2;\n      qword_623440 = v43 - qword_6232C0;\n      qword_623438 = v41 / 2;\n      if ( s && *s )\n        qword_623430 = strlen(s);\n      else\n        s = 0LL;\n      v44 = 2 * qword_623430;\n      if ( byte_6232D0 )\n      {\n        v45 = v42 - v44;\n        if ( v45 < 0 )\n          v45 = 0LL;\n        qword_623438 = v43 - v44;\n        qword_623440 = v45;\n      }\n      else\n      {\n        qword_623438 = v43 - (v44 + 1);\n      }\n      v46 = __ctype_b_loc();\n      v47 = 0LL;\n      v207 = (char *)v46;\n      v48 = *v46;\n      do\n      {\n        v49 = v48[v47++];\n        byte_62345F[v47] = (v49 >> 13) & 1;\n      }\n      while ( v47 != 256 );\n      byte_62346C = 1;\n      if ( dword_623B04 == 2 )\n      {\n        byte_623482 = 1;\n      }\n      else if ( dword_623B04 == 3 )\n      {\n        v50 = \"$%&#_{}\\\\\";\n        v51 = 36LL;\n        do\n        {\n          ++v50;\n          byte_623460[v51] = 1;\n          v51 = *v50;\n        }\n        while ( (_BYTE)v51 );\n        v52 = 128LL;\n        do\n        {\n          byte_623460[v52] = byte_41C2A0[v52] != 0;\n          ++v52;\n        }\n        while ( v52 != 256 );\n      }\n      v3 = 1LL;\n      qword_623420 = 0LL;\n      qword_623428 = 0LL;\n      byte_623410 = 0;\n      qword_6233C0 = 0LL;\n      qword_6233C8 = 0LL;\n      byte_6233B0 = 0;\n      v208 = base;\n      v209 = 0LL;\n      if ( (signed __int64)nmemb <= 0 )\n        return 0LL;\n    }\n    if ( !byte_623B08 )\n    {\n      if ( byte_623B0A )\n      {\n        sub_404AC0(dest, qword_6233A8);\n        v174 = stdout;\n        v175 = stdout->_IO_write_ptr;\n        if ( v175 >= stdout->_IO_write_end )\n          goto LABEL_524;\n        stdout->_IO_write_ptr = v175 + 1;\n        *v175 = 58;\nLABEL_434:\n        sub_404A70(qword_6235D8 + qword_6232C0 - (qword_6233A8 - (_QWORD)dest) - 1);\n      }\n      else\n      {\n        sub_404AC0(dest, qword_6233A8);\n        sub_404A70(qword_6235D8 + qword_6232C0 - (qword_6233A8 - (_QWORD)dest));\n      }\n    }\n    if ( qword_623420 >= (unsigned __int64)qword_623428 )\n    {\n      v176 = qword_623448 - qword_6232C0 - (qword_623408 - qword_623400);\n      v177 = 0LL;\n      if ( byte_6233F0 )\n        goto LABEL_437;\n      goto LABEL_438;\n    }\n    sub_404AC0(qword_623420, qword_623428);\n    if ( byte_623410 )\n    {\n      fputs_unlocked(s, stdout);\n      v185 = qword_623448 - qword_6232C0 - (qword_623408 - qword_623400);\n      v192 = 0LL;\n      if ( byte_6233F0 )\n        goto LABEL_506;\n    }\n    else\n    {\n      v185 = qword_623448 - qword_6232C0 - (qword_623408 - qword_623400);\n      if ( !byte_6233F0 )\n      {\n        v176 = v185 - (qword_623428 - qword_623420);\n        v177 = 0LL;\n        goto LABEL_438;\n      }\nLABEL_506:\n      v192 = qword_623430;\n    }\n    v176 = v185 - v192 - (qword_623428 - qword_623420);\n    if ( byte_623410 )\nLABEL_437:\n      v177 = qword_623430;\n    else\n      v177 = 0LL;\nLABEL_438:\n    sub_404A70(v176 - v177);\n    if ( byte_6233F0 )\n      fputs_unlocked(s, stdout);\n    sub_404AC0(qword_623400, qword_623408);\n    sub_404A70(qword_6232C0);\n    sub_404AC0(qword_6233E0, qword_6233E8);\n    if ( !byte_6233D0 )\n    {\n      v178 = qword_6233C0;\n      v179 = qword_6233C8;\n      if ( qword_6233C8 <= (unsigned __int64)qword_6233C0 )\n        goto LABEL_442;\n      v186 = qword_623448 - (qword_6233E8 - qword_6233E0);\n      v187 = 0LL;\n      goto LABEL_489;\n    }\n    fputs_unlocked(s, stdout);\n    v178 = qword_6233C0;\n    v179 = qword_6233C8;\n    if ( qword_6233C0 < (unsigned __int64)qword_6233C8 )\n    {\n      v186 = qword_623448 - (qword_6233E8 - qword_6233E0);\n      if ( byte_6233D0 )\n      {\n        v187 = qword_623430;\n        goto LABEL_489;\n      }\n      goto LABEL_526;\n    }\nLABEL_442:\n    if ( !byte_623B0A )\n    {\n      if ( !byte_623B09 )\n        continue;\n      if ( byte_623B08 )\n      {\nLABEL_499:\n        v191 = 0LL;\n        if ( byte_6233D0 )\n          v191 = qword_623430;\n        sub_404A70(qword_623448 - (qword_6233E8 - qword_6233E0) - v191);\n        goto LABEL_494;\n      }\n      goto LABEL_445;\n    }\n    if ( byte_623B08 )\n      goto LABEL_499;\n  }\n}\n", 
            "funcStartAddr": "0x402010L", 
            "funcEndAddr": "0x4045b0L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "int sub_4045DB()\n{\n  __int64 *v0; // rax@1\n\n  v0 = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    LODWORD(v0) = 0;\n  return (unsigned __int64)v0;\n}\n", 
            "funcStartAddr": "0x4045dbL", 
            "funcEndAddr": "0x4045faL", 
            "funcName": "sub_4045DB"
        }, 
        {
            "decompiledFuncCode": "int sub_4045FA()\n{\n  return 0;\n}\n", 
            "funcStartAddr": "0x4045faL", 
            "funcEndAddr": "0x404631L", 
            "funcName": "sub_4045FA"
        }, 
        {
            "decompiledFuncCode": "int sub_404631()\n{\n  int result; // eax@4\n\n  if ( !byte_623388 )\n  {\n    while ( qword_623390 < (unsigned __int64)(((&unk_622E48 - (_UNKNOWN *)&qword_622E40) >> 3) - 1) )\n      (*(&qword_622E40 + ++qword_623390))();\n    result = sub_4045DB();\n    byte_623388 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404631L", 
            "funcEndAddr": "0x404688L", 
            "funcName": "sub_404631"
        }, 
        {
            "decompiledFuncCode": "int sub_404688()\n{\n  return sub_4045FA();\n}\n", 
            "funcStartAddr": "0x404688L", 
            "funcEndAddr": "0x40468dL", 
            "funcName": "sub_404688"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_404690(const void *a1, const void *a2)\n{\n  __int64 v2; // r10@1\n  __int64 v3; // r9@1\n  __int64 v4; // r8@1\n  _BYTE *v5; // rdi@5\n  _BYTE *v6; // rsi@5\n  signed __int64 result; // rax@5\n  __int64 v8; // rdx@6\n  _BYTE *v9; // rdi@12\n  _BYTE *v10; // rsi@12\n  __int64 v11; // rdx@13\n\n  v2 = *((_QWORD *)a2 + 1);\n  v3 = *((_QWORD *)a1 + 1);\n  v4 = *((_QWORD *)a1 + 1);\n  if ( v2 <= v3 )\n    v4 = *((_QWORD *)a2 + 1);\n  if ( byte_623B00 )\n  {\n    if ( v4 > 0 )\n    {\n      v9 = *(_BYTE **)a1;\n      v10 = *(_BYTE **)a2;\n      result = (unsigned __int8)byte_623740[(unsigned __int64)*v9]\n             - (unsigned int)(unsigned __int8)byte_623740[(unsigned __int64)*v10];\n      if ( (unsigned __int8)byte_623740[(unsigned __int64)*v9] != (unsigned __int8)byte_623740[(unsigned __int64)*v10] )\n        return result;\n      v11 = 0LL;\n      while ( v4 != ++v11 )\n      {\n        result = (unsigned __int8)byte_623740[(unsigned __int64)v9[v11]]\n               - (unsigned int)(unsigned __int8)byte_623740[(unsigned __int64)v10[v11]];\n        if ( (unsigned __int8)byte_623740[(unsigned __int64)v9[v11]] != (unsigned __int8)byte_623740[(unsigned __int64)v10[v11]] )\n          return result;\n      }\n    }\n  }\n  else if ( v4 > 0 )\n  {\n    v5 = *(_BYTE **)a1;\n    v6 = *(_BYTE **)a2;\n    result = *v5 - (unsigned int)*v6;\n    if ( *v5 != *v6 )\n      return result;\n    v8 = 0LL;\n    while ( v4 != ++v8 )\n    {\n      result = v5[v8] - (unsigned int)v6[v8];\n      if ( v5[v8] != v6[v8] )\n        return result;\n    }\n  }\n  if ( v2 > v3 )\n    result = 0xFFFFFFFFLL;\n  else\n    result = v2 < v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x404690L", 
            "funcEndAddr": "0x40474bL", 
            "funcName": "sub_404690"
        }, 
        {
            "decompiledFuncCode": "int sub_404750()\n{\n  char *v0; // rbx@1\n  int *v1; // rax@1\n\n  v0 = dcgettext(0LL, \"error in regular expression matcher\", 5);\n  v1 = __errno_location();\n  error(1, *v1, v0);\n  return sub_404780(1LL);\n}\n", 
            "funcStartAddr": "0x404750L", 
            "funcEndAddr": "0x404780L", 
            "funcName": "sub_404750"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404780(const char *a1)\n{\n  signed __int64 v1; // rbx@1\n  size_t v2; // rax@1\n  _BYTE *v3; // rax@1\n  int v4; // edx@1\n  _BYTE *v5; // r12@1\n  _BYTE *v6; // rbp@1\n  char v7; // al@3\n  _BYTE *v8; // rcx@3\n  signed __int64 v10; // rax@12\n  int v11; // ecx@12\n  const unsigned __int16 **v12; // rax@27\n  int v13; // edi@27\n  int v14; // ecx@27\n  const unsigned __int16 *v15; // r8@27\n  int v16; // eax@28\n  unsigned __int8 v17; // r9@30\n  int v18; // edx@30\n\n  v1 = (signed __int64)a1;\n  v2 = strlen(a1);\n  LODWORD(v3) = sub_409160(v2 + 1);\n  LOBYTE(v4) = *a1;\n  v5 = v3;\n  v6 = v3;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\nLABEL_2:\n            if ( !(_BYTE)v4 )\n            {\nLABEL_5:\n              *v6 = 0;\n              return v5;\n            }\n            while ( 1 )\n            {\n              v7 = *(_BYTE *)(v1 + 1);\n              v8 = (_BYTE *)(v1 + 1);\n              if ( (_BYTE)v4 == 92 )\n                break;\n              *v6 = v4;\n              LOBYTE(v4) = v7;\n              ++v6;\n              ++v1;\n              if ( !v7 )\n                goto LABEL_5;\n            }\n            if ( v7 != 102 )\n              break;\n            *v6 = 12;\n            LOBYTE(v4) = *(_BYTE *)(v1 + 2);\n            ++v6;\n            v1 += 2LL;\n          }\n          if ( v7 <= 102 )\n            break;\n          if ( v7 == 116 )\n          {\n            *v6 = 9;\n            LOBYTE(v4) = *(_BYTE *)(v1 + 2);\n            ++v6;\n            v1 += 2LL;\n          }\n          else if ( v7 > 116 )\n          {\n            if ( v7 == 118 )\n            {\n              *v6 = 11;\n              LOBYTE(v4) = *(_BYTE *)(v1 + 2);\n              ++v6;\n              v1 += 2LL;\n            }\n            else\n            {\n              if ( v7 != 120 )\n                goto LABEL_39;\n              v12 = __ctype_b_loc();\n              v1 += 2LL;\n              v13 = 0;\n              v14 = 0;\n              v15 = *v12;\n              while ( 1 )\n              {\n                v16 = *(_BYTE *)v1;\n                LOBYTE(v4) = *(_BYTE *)v1;\n                if ( !(HIBYTE(v15[*(_BYTE *)v1]) & 0x10) )\n                  break;\n                if ( (unsigned __int8)(v4 - 97) <= 5u )\n                {\n                  v18 = v16 - 87;\n                }\n                else\n                {\n                  v17 = v4 - 65;\n                  v18 = v16 - 55;\n                  if ( v17 > 5u )\n                    v18 = v16 - 48;\n                }\n                ++v13;\n                v14 = 16 * v14 + v18;\n                ++v1;\n                if ( v13 == 3 )\n                  goto LABEL_33;\n              }\n              if ( v13 )\n              {\nLABEL_33:\n                *v6 = v14;\n                LOBYTE(v4) = *(_BYTE *)v1;\n                ++v6;\n                goto LABEL_2;\n              }\n              v6 += 2;\n              *((_WORD *)v6 - 1) = 30812;\n            }\n          }\n          else if ( v7 == 110 )\n          {\n            *v6 = 10;\n            LOBYTE(v4) = *(_BYTE *)(v1 + 2);\n            ++v6;\n            v1 += 2LL;\n          }\n          else\n          {\n            if ( v7 != 114 )\n              goto LABEL_39;\n            *v6 = 13;\n            LOBYTE(v4) = *(_BYTE *)(v1 + 2);\n            ++v6;\n            v1 += 2LL;\n          }\n        }\n        if ( v7 != 97 )\n          break;\n        *v6 = 7;\n        LOBYTE(v4) = *(_BYTE *)(v1 + 2);\n        ++v6;\n        v1 += 2LL;\n      }\n      if ( v7 > 97 )\n        break;\n      if ( !v7 )\n        goto LABEL_5;\n      if ( v7 == 48 )\n      {\n        v10 = v1 + 2;\n        v11 = 0;\n        v1 += 5LL;\n        while ( 1 )\n        {\n          v4 = *(_BYTE *)v10;\n          if ( (unsigned __int8)(*(_BYTE *)v10 - 48) > 7u )\n            break;\n          v11 = v4 + 8 * v11 - 48;\n          if ( v1 == v10 + 1 )\n          {\n            LOBYTE(v4) = *(_BYTE *)(v10 + 1);\n            goto LABEL_43;\n          }\n          ++v10;\n        }\n        v1 = v10;\nLABEL_43:\n        *v6++ = v11;\n      }\n      else\n      {\nLABEL_39:\n        *v6 = 92;\n        LOBYTE(v4) = *(_BYTE *)(v1 + 2);\n        v6 += 2;\n        v1 += 2LL;\n        *(v6 - 1) = v7;\n      }\n    }\n    if ( v7 != 98 )\n      break;\n    *v6 = 8;\n    LOBYTE(v4) = *(_BYTE *)(v1 + 2);\n    ++v6;\n    v1 += 2LL;\n  }\n  if ( v7 != 99 )\n    goto LABEL_39;\n  do\n    ++v8;\n  while ( *v8 );\n  *v6 = 0;\n  return v5;\n}\n", 
            "funcStartAddr": "0x404780L", 
            "funcEndAddr": "0x4049cfL", 
            "funcName": "sub_404780"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4049D0(__int64 a1)\n{\n  bool v1; // zf@1\n  signed __int64 v2; // rbp@1\n  const char *v3; // rbx@1\n  char *v4; // rax@1\n  size_t v5; // rax@3\n  __int64 v6; // rax@3\n  int result; // eax@4\n  __int64 v8; // r12@5\n  __int64 v9; // rax@5\n  __int64 v10; // rbx@5\n  char *v11; // rax@5\n\n  v1 = byte_623B00 == 0;\n  v2 = a1 + 8;\n  v3 = *(const char **)a1;\n  *(_QWORD *)(a1 + 40) = a1 + 72;\n  v4 = byte_623740;\n  if ( v1 )\n    v4 = 0LL;\n  *(_QWORD *)(a1 + 8) = 0LL;\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_QWORD *)(a1 + 48) = v4;\n  v5 = strlen(v3);\n  LODWORD(v6) = sub_418000(v3, v5, v2);\n  if ( v6 )\n  {\n    v8 = v6;\n    LODWORD(v9) = sub_408350(v3);\n    v10 = v9;\n    v11 = dcgettext(0LL, \"%s (for regexp %s)\", 5);\n    error(1, 0, v11, v8, v10);\n    result = sub_404A70(1LL);\n  }\n  else\n  {\n    result = sub_418080(v2);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4049d0L", 
            "funcEndAddr": "0x404a70L", 
            "funcName": "sub_4049D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_404A70(__int64 a1)\n{\n  __int64 v1; // rbx@2\n  char *v2; // rax@3\n\n  if ( a1 > 0 )\n  {\n    v1 = a1;\n    do\n    {\n      v2 = stdout->_IO_write_ptr;\n      if ( v2 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 32);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v2 + 1;\n        *v2 = 32;\n      }\n      --v1;\n    }\n    while ( v1 );\n  }\n}\n", 
            "funcStartAddr": "0x404a70L", 
            "funcEndAddr": "0x404ab9L", 
            "funcName": "sub_404A70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_404AC0(char *a1, char *a2)\n{\n  char *v2; // r13@2\n  char *v3; // rbp@2\n  char v4; // si@3\n  char *v5; // rax@8\n  char *v6; // rax@10\n  __int64 v7; // rdx@13\n  __int64 v8; // rax@13\n  char v9; // bl@13\n  char *v10; // rax@14\n  char *v11; // rax@19\n  char *v12; // rax@24\n  unsigned int v13; // ecx@26\n  char v14; // al@26\n  char *v15; // rdx@30\n  char *v16; // rdx@33\n  char *v17; // rdx@36\n  char *v18; // rdx@39\n  FILE *v19; // rcx@43\n  char *v20; // rax@45\n  int v21; // ST0C_4@61\n\n  if ( a2 > a1 )\n  {\n    v2 = a2;\n    v3 = a1;\n    while ( 1 )\n    {\n      v7 = (unsigned __int8)*v3;\n      v8 = (unsigned __int8)*v3;\n      v9 = *v3;\n      if ( !byte_623460[v8] )\n        goto LABEL_14;\n      v4 = byte_41C2A0[v8];\n      if ( v4 && dword_623B04 == 3 )\n      {\n        v13 = byte_41C3A0[v8];\n        v14 = byte_41C3A0[v8];\n        switch ( v4 )\n        {\n          default:\n            goto LABEL_12;\n          case 2:\n          case 3:\n            v15 = \"\";\n            if ( v13 == 105 )\n              v15 = \"$%&#_{}\\\\\" + 7;\n            __printf_chk(1LL, \"\\\\'%s%c\", v15);\n            break;\n          case 4:\n            v16 = \"\";\n            if ( v13 == 105 )\n              v16 = \"$%&#_{}\\\\\" + 7;\n            __printf_chk(1LL, \"\\\\^%s%c\", v16);\n            break;\n          case 5:\n            v17 = \"\";\n            if ( v13 == 105 )\n              v17 = \"$%&#_{}\\\\\" + 7;\n            __printf_chk(1LL, \"\\\\\\\"%s%c\", v17);\n            break;\n          case 6:\n            v18 = \"\";\n            if ( v13 == 105 )\n              v18 = \"$%&#_{}\\\\\" + 7;\n            __printf_chk(1LL, \"\\\\~%s%c\", v18);\n            break;\n          case 7:\n            __printf_chk(1LL, \"\\\\c{%c}\", v13);\n            break;\n          case 8:\n            v19 = stdout;\n            if ( v14 == 65 )\n            {\n              fwrite_unlocked(\"\\\\AA{}\", 1uLL, 5uLL, stdout);\n            }\n            else\n            {\n              if ( v14 != 97 )\n                goto LABEL_45;\n              fwrite_unlocked(\"\\\\aa{}\", 1uLL, 5uLL, stdout);\n            }\n            break;\n          case 1:\n            v19 = stdout;\n            if ( v14 == 79 )\n            {\n              fwrite_unlocked(\"\\\\OE{}\", 1uLL, 5uLL, stdout);\n            }\n            else if ( v14 <= 79 )\n            {\n              if ( v14 != 65 )\n                goto LABEL_45;\n              fwrite_unlocked(\"\\\\AE{}\", 1uLL, 5uLL, stdout);\n            }\n            else if ( v14 == 97 )\n            {\n              fwrite_unlocked(\"\\\\ae{}\", 1uLL, 5uLL, stdout);\n            }\n            else\n            {\n              if ( v14 != 111 )\n                goto LABEL_45;\n              fwrite_unlocked(\"\\\\oe{}\", 1uLL, 5uLL, stdout);\n            }\n            break;\n          case 9:\n            v19 = stdout;\n            if ( v14 == 79 )\n            {\n              fwrite_unlocked(\"\\\\O{}\", 1uLL, 4uLL, stdout);\n            }\n            else if ( v14 == 111 )\n            {\n              fwrite_unlocked(\"\\\\o{}\", 1uLL, 4uLL, stdout);\n            }\n            else\n            {\nLABEL_45:\n              v20 = v19->_IO_write_ptr;\n              if ( v20 >= v19->_IO_write_end )\n              {\n                __overflow(v19, 32);\n              }\n              else\n              {\n                v19->_IO_write_ptr = v20 + 1;\n                *v20 = 32;\n              }\n            }\n            break;\n        }\n        goto LABEL_12;\n      }\n      if ( v9 == 92 )\n        break;\n      if ( v9 <= 92 )\n      {\n        if ( v9 == 34 )\n        {\n          v5 = stdout->_IO_write_ptr;\n          if ( v5 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 34);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v5 + 1;\n            *v5 = 34;\n          }\n          v6 = stdout->_IO_write_ptr;\n          if ( v6 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 34);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v6 + 1;\n            *v6 = 34;\n          }\n          goto LABEL_12;\n        }\n        if ( v9 < 34 || v9 > 38 )\n        {\nLABEL_24:\n          v12 = stdout->_IO_write_ptr;\n          if ( v12 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 32);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v12 + 1;\n            *v12 = 32;\n          }\n          goto LABEL_12;\n        }\n        goto LABEL_19;\n      }\n      if ( v9 == 123 || v9 == 125 )\n      {\n        __printf_chk(1LL, \"$\\\\%c$\", v7);\nLABEL_12:\n        if ( v2 == ++v3 )\n          return;\n      }\n      else\n      {\n        if ( v9 != 95 )\n          goto LABEL_24;\nLABEL_19:\n        v11 = stdout->_IO_write_ptr;\n        if ( v11 >= stdout->_IO_write_end )\n        {\n          v21 = (unsigned __int8)*v3;\n          __overflow(stdout, 92);\n          LODWORD(v7) = v21;\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v11 + 1;\n          *v11 = 92;\n        }\nLABEL_14:\n        v10 = stdout->_IO_write_ptr;\n        if ( v10 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v7);\n          goto LABEL_12;\n        }\n        ++v3;\n        stdout->_IO_write_ptr = v10 + 1;\n        *v10 = v9;\n        if ( v2 == v3 )\n          return;\n      }\n    }\n    fwrite_unlocked(\"\\\\backslash{}\", 1uLL, 0xCuLL, stdout);\n    goto LABEL_12;\n  }\n}\n", 
            "funcStartAddr": "0x404ac0L", 
            "funcEndAddr": "0x404ec4L", 
            "funcName": "sub_404AC0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall compar(const void *a1, const void *a2)\n{\n  signed __int64 result; // rax@1\n  _QWORD *v3; // r11@1\n\n  result = sub_404690(a1, a2);\n  if ( !(_DWORD)result )\n  {\n    if ( *(_QWORD *)a1 < *v3 )\n      result = 0xFFFFFFFFLL;\n    else\n      result = *(_QWORD *)a1 > *v3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404ed0L", 
            "funcEndAddr": "0x404ef7L", 
            "funcName": "compar"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404F00(void *a1, __int64 a2, __int64 a3)\n{\n  signed __int64 v3; // rdx@1\n  signed __int64 v4; // r13@2\n  signed __int64 v5; // rbx@2\n  int v6; // eax@5\n  __int64 v7; // r11@5\n  __int64 result; // rax@7\n\n  v3 = a3 - 1;\n  if ( v3 < 0 )\n  {\n    result = 0LL;\n  }\n  else\n  {\n    v4 = 0LL;\n    v5 = v3;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v6 = sub_404690(a1, (const void *)(a2 + 16 * ((v4 + v5) >> 1)));\n        if ( v6 >= 0 )\n          break;\n        v5 = v7 - 1;\n        if ( v4 > v7 - 1 )\n          return 0LL;\n      }\n      if ( !v6 )\n        break;\n      v4 = v7 + 1;\n      if ( v7 + 1 > v5 )\n        return 0LL;\n    }\n    result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404f00L", 
            "funcEndAddr": "0x404f6fL", 
            "funcName": "sub_404F00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404F70(char *a1, __int64 *a2, __int64 *a3)\n{\n  __int64 *v3; // r12@1\n  __int64 *v4; // rbp@1\n  bool v5; // cf@2\n  bool v6; // zf@2\n  char *v7; // rbx@2\n  __int64 v8; // rax@3\n  __int64 result; // rax@4\n  char *v10; // rdi@5\n  signed __int64 v11; // rcx@5\n  char *v12; // rsi@5\n  __int64 v13; // rax@10\n  __int64 v14; // rbx@10\n  int *v15; // rax@10\n  __int64 v16; // [sp+8h] [bp-20h]@4\n\n  v3 = a3;\n  v4 = a2;\n  if ( !a1 )\n    goto LABEL_14;\n  v5 = 0;\n  v6 = *a1 == 0;\n  v7 = a1;\n  if ( !*a1 )\n    goto LABEL_14;\n  v10 = \"-\";\n  v11 = 2LL;\n  v12 = v7;\n  do\n  {\n    if ( !v11 )\n      break;\n    v5 = (unsigned __int8)*v12 < (unsigned __int8)*v10;\n    v6 = *v12++ == *v10++;\n    --v11;\n  }\n  while ( v6 );\n  if ( (!v5 && !v6) != v5 )\n  {\n    LODWORD(v8) = sub_4085A0(v7, &v16);\n    *v4 = v8;\n    if ( !v8 )\n    {\n      while ( 1 )\n      {\n        LODWORD(v13) = sub_4081D0(0LL, 3LL, v7);\n        v14 = v13;\n        v15 = __errno_location();\n        error(1, *v15, \"%s\", v14);\nLABEL_11:\n        v7 = \"-\";\n      }\n    }\n  }\n  else\n  {\nLABEL_14:\n    v8 = sub_408370(stdin);\n    *v4 = v8;\n    if ( !v8 )\n      goto LABEL_11;\n  }\n  result = v16 + v8;\n  *v3 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x404f70L", 
            "funcEndAddr": "0x405022L", 
            "funcName": "sub_404F70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405030(char *a1, __int64 a2)\n{\n  __int64 v2; // r12@1\n  signed __int64 v3; // r13@1\n  unsigned __int64 v4; // rbp@1\n  unsigned __int64 v5; // rdx@1\n  size_t v6; // rsi@1\n  char *v7; // rdi@1\n  _BYTE *v8; // rbx@2\n  size_t v9; // rcx@6\n  signed __int64 v10; // rcx@6\n  char *v11; // rax@11\n  unsigned __int64 v12; // [sp+0h] [bp-38h]@1\n  unsigned __int64 v13; // [sp+8h] [bp-30h]@1\n\n  v2 = a2;\n  v3 = a2 + 8;\n  sub_404F70(a1, (__int64 *)&v12, (__int64 *)&v13);\n  v4 = v12;\n  v5 = v13;\n  v6 = 0LL;\n  *(_QWORD *)v2 = 0LL;\n  v7 = 0LL;\n  *(_QWORD *)(v2 + 8) = 0LL;\n  for ( *(_QWORD *)(v2 + 16) = 0LL; v4 < v5; v4 = (unsigned __int64)&v8[(unsigned __int64)v8 < v5] )\n  {\n    v8 = (_BYTE *)v4;\n    while ( *v8 != 10 )\n    {\n      if ( ++v8 == (_BYTE *)v5 )\n      {\n        if ( *(_QWORD *)(v2 + 8) != v6 )\n        {\nLABEL_6:\n          v9 = v6++;\n          v10 = (signed __int64)&v7[16 * v9];\n          *(_QWORD *)v10 = v4;\n          *(_QWORD *)(v10 + 8) = &v8[-v4];\n          *(_QWORD *)(v2 + 16) = v6;\n          goto LABEL_7;\n        }\nLABEL_11:\n        LODWORD(v11) = sub_409230(v7, v3, 16LL);\n        v6 = *(_QWORD *)(v2 + 16);\n        v5 = v13;\n        v7 = v11;\n        *(_QWORD *)v2 = v11;\n        goto LABEL_6;\n      }\n    }\n    if ( v4 < (unsigned __int64)v8 )\n    {\n      if ( *(_QWORD *)(v2 + 8) != v6 )\n        goto LABEL_6;\n      goto LABEL_11;\n    }\nLABEL_7:\n    ;\n  }\n  qsort(v7, v6, 0x10uLL, (__compar_fn_t)sub_404690);\n}\n", 
            "funcStartAddr": "0x405030L", 
            "funcEndAddr": "0x40511cL", 
            "funcName": "sub_405030"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_405120(int status)\n{\n  int v1; // ebx@1\n  __int64 v2; // rbp@1\n  char *v3; // rax@2\n  char *v4; // rax@4\n  FILE *v5; // rbp@4\n  char *v6; // rax@4\n  FILE *v7; // rbp@4\n  char *v8; // rax@4\n  FILE *v9; // rbp@4\n  char *v10; // rax@4\n  FILE *v11; // rbp@4\n  char *v12; // rax@4\n  FILE *v13; // rbp@4\n  char *v14; // rax@4\n  FILE *v15; // rbp@4\n  char *v16; // rax@4\n  FILE *v17; // rbp@4\n  char *v18; // rax@4\n  FILE *v19; // rbp@4\n  char *v20; // rax@4\n  FILE *v21; // rbp@4\n  char *v22; // rax@4\n  FILE *v23; // rbp@4\n  char *v24; // rax@4\n  __int64 *v25; // rax@4\n  _BYTE *v26; // rdi@5\n  bool v27; // cf@5\n  bool v28; // zf@5\n  const char *v29; // rsi@6\n  signed __int64 v30; // rcx@6\n  const char *v31; // rbp@10\n  char *v32; // rax@11\n  char *v33; // rax@11\n  char *v34; // rax@13\n  char *v35; // rax@14\n  char *v36; // rax@15\n  char *v37; // rax@15\n  char *v38; // rax@17\n  char *v39; // rax@19\n  const char *v40; // [sp+0h] [bp-88h]@4\n  const char *v41; // [sp+8h] [bp-80h]@4\n  const char *v42; // [sp+10h] [bp-78h]@4\n  const char *v43; // [sp+18h] [bp-70h]@4\n  const char *v44; // [sp+20h] [bp-68h]@4\n  const char *v45; // [sp+28h] [bp-60h]@4\n  const char *v46; // [sp+30h] [bp-58h]@4\n  const char *v47; // [sp+38h] [bp-50h]@4\n  const char *v48; // [sp+40h] [bp-48h]@4\n  const char *v49; // [sp+48h] [bp-40h]@4\n  const char *v50; // [sp+50h] [bp-38h]@4\n  const char *v51; // [sp+58h] [bp-30h]@4\n  __int64 v52; // [sp+60h] [bp-28h]@4\n  __int64 v53; // [sp+68h] [bp-20h]@4\n\n  v1 = status;\n  v2 = qword_623B20;\n  if ( status )\n  {\n    v3 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v3, v2);\n    goto LABEL_3;\n  }\n  v4 = dcgettext(0LL, \"Usage: %s [OPTION]... [INPUT]...   (without -G)\\n  or:  %s -G [OPTION]... [INPUT [OUTPUT]]\\n\", 5);\n  __printf_chk(1LL, v4, v2);\n  v5 = stdout;\n  v6 = dcgettext(0LL, \"Output a permuted index, including context, of the words in the input files.\\n\", 5);\n  fputs_unlocked(v6, v5);\n  v7 = stdout;\n  v8 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v8, v7);\n  v9 = stdout;\n  v10 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v10, v9);\n  v11 = stdout;\n  v12 = dcgettext(\n          0LL,\n          \"  -A, --auto-reference           output automatically generated references\\n\"\n          \"  -G, --traditional              behave more like System V 'ptx'\\n\",\n          5);\n  fputs_unlocked(v12, v11);\n  v13 = stdout;\n  v14 = dcgettext(\n          0LL,\n          \"  -F, --flag-truncation=STRING   use STRING for flagging line truncations.\\n\"\n          \"                                 The default is '/'\\n\",\n          5);\n  fputs_unlocked(v14, v13);\n  v15 = stdout;\n  v16 = dcgettext(\n          0LL,\n          \"  -M, --macro-name=STRING        macro name to use instead of 'xx'\\n\"\n          \"  -O, --format=roff              generate output as roff directives\\n\"\n          \"  -R, --right-side-refs          put references at right, not counted in -w\\n\"\n          \"  -S, --sentence-regexp=REGEXP   for end of lines or end of sentences\\n\"\n          \"  -T, --format=tex               generate output as TeX directives\\n\",\n          5);\n  fputs_unlocked(v16, v15);\n  v17 = stdout;\n  v18 = dcgettext(\n          0LL,\n          \"  -W, --word-regexp=REGEXP       use REGEXP to match each keyword\\n\"\n          \"  -b, --break-file=FILE          word break characters in this FILE\\n\"\n          \"  -f, --ignore-case              fold lower case to upper case for sorting\\n\"\n          \"  -g, --gap-size=NUMBER          gap size in columns between output fields\\n\"\n          \"  -i, --ignore-file=FILE         read ignore word list from FILE\\n\"\n          \"  -o, --only-file=FILE           read only word list from this FILE\\n\",\n          5);\n  fputs_unlocked(v18, v17);\n  v19 = stdout;\n  v20 = dcgettext(\n          0LL,\n          \"  -r, --references               first field of each line is a reference\\n\"\n          \"  -t, --typeset-mode               - not implemented -\\n\"\n          \"  -w, --width=NUMBER             output width in columns, reference excluded\\n\",\n          5);\n  fputs_unlocked(v20, v19);\n  v21 = stdout;\n  v22 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v22, v21);\n  v23 = stdout;\n  v24 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v24, v23);\n  v40 = \"[\";\n  v25 = (__int64 *)&v40;\n  v41 = \"test invocation\";\n  v42 = \"coreutils\";\n  v43 = \"Multi-call invocation\";\n  v44 = \"sha224sum\";\n  v45 = \"sha2 utilities\";\n  v46 = \"sha256sum\";\n  v47 = \"sha2 utilities\";\n  v48 = \"sha384sum\";\n  v49 = \"sha2 utilities\";\n  v50 = \"sha512sum\";\n  v51 = \"sha2 utilities\";\n  v52 = 0LL;\n  v53 = 0LL;\n  do\n  {\n    v25 += 2;\n    v26 = (_BYTE *)*v25;\n    v27 = 0;\n    v28 = *v25 == 0;\n    if ( !*v25 )\n      break;\n    v29 = \"ptx\";\n    v30 = 4LL;\n    do\n    {\n      if ( !v30 )\n        break;\n      v27 = (const unsigned __int8)*v29 < *v26;\n      v28 = *v29++ == *v26++;\n      --v30;\n    }\n    while ( v28 );\n  }\n  while ( (!v27 && !v28) != v27 );\n  v31 = (const char *)v25[1];\n  if ( v31 )\n  {\n    v32 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v32, &unk_41BDC2);\n    v33 = setlocale(5, 0LL);\n    if ( !v33 || !strncmp(v33, \"en_\", 3uLL) )\n      goto LABEL_13;\n  }\n  else\n  {\n    v36 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v36, &unk_41BDC2);\n    v37 = setlocale(5, 0LL);\n    if ( !v37 || !strncmp(v37, \"en_\", 3uLL) )\n    {\n      v31 = \"ptx\";\n      v38 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v38, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_14;\n    }\n    v31 = \"ptx\";\n  }\n  v39 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v39, \"ptx\");\nLABEL_13:\n  v34 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v34, \"https://www.gnu.org/software/coreutils/\");\nLABEL_14:\n  v35 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v35, v31);\nLABEL_3:\n  exit(v1);\n}\n", 
            "funcStartAddr": "0x405120L", 
            "funcEndAddr": "0x405505L", 
            "funcName": "sub_405120"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_405510()\n{\n  sub_405120(1);\n}\n", 
            "funcStartAddr": "0x405510L", 
            "funcEndAddr": "0x40551aL", 
            "funcName": "sub_405510"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_405520(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  size_t v4; // r13@1\n  char *v5; // rbp@1\n  size_t v6; // rax@1\n  const char *v7; // r14@1\n  size_t v8; // r12@2\n  signed __int64 v9; // rbx@2\n  bool v10; // zf@4\n  char v11; // al@4\n  signed __int64 v12; // rax@12\n  signed __int64 v14; // [sp+0h] [bp-58h]@1\n  char v15; // [sp+17h] [bp-41h]@2\n  char *v16; // [sp+18h] [bp-40h]@1\n\n  v4 = a4;\n  v5 = a3;\n  v16 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += v4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( v16 )\n      {\n        v10 = memcmp(&v16[v4 * v14], v5, v4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += v4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    v12 = v14;\n  return v12;\n}\n", 
            "funcStartAddr": "0x405520L", 
            "funcEndAddr": "0x405636L", 
            "funcName": "sub_405520"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405640(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx@2\n  __int64 v4; // rax@3\n  __int64 v5; // rbp@3\n  __int64 v6; // rax@3\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  LODWORD(v4) = sub_408330(1LL, a1);\n  v5 = v4;\n  LODWORD(v6) = sub_408020(0LL, 8LL, a2);\n  error(0, 0, v3, v6, v5);\n}\n", 
            "funcStartAddr": "0x405640L", 
            "funcEndAddr": "0x4056b1L", 
            "funcName": "sub_405640"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4056C0(__int64 *a1, char *a2, size_t a3)\n{\n  char *v3; // r14@1\n  size_t v4; // r13@1\n  char *v5; // rbp@1\n  FILE *v6; // rbx@1\n  char *v7; // rax@1\n  FILE *v8; // rsi@1\n  __int64 v9; // rbx@1\n  __int64 i; // r12@1\n  __int64 v11; // rax@3\n  __int64 v12; // rax@6\n  char *v13; // rax@7\n\n  v3 = 0LL;\n  v4 = a3;\n  v5 = a2;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, v5, v4) )\n    {\n      ++v9;\n      v3 = v5;\n      v5 += v4;\n      LODWORD(v11) = sub_408350(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    v5 += v4;\n    LODWORD(v12) = sub_408350(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  v13 = stderr->_IO_write_ptr;\n  if ( v13 >= stderr->_IO_write_end )\n  {\n    LODWORD(v13) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = v13 + 1;\n    *v13 = 10;\n  }\n  return (unsigned __int64)v13;\n}\n", 
            "funcStartAddr": "0x4056c0L", 
            "funcEndAddr": "0x4057d8L", 
            "funcName": "sub_4056C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4057E0(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (__fastcall *a6)(__int64 *, char *))\n{\n  size_t v6; // r15@1\n  void (__fastcall *v7)(__int64 *, char *); // r13@1\n  char *v8; // rbp@1\n  __int64 *v9; // rbx@1\n  __int64 result; // rax@1\n\n  v6 = a5;\n  v7 = a6;\n  v8 = a4;\n  v9 = (__int64 *)a3;\n  result = sub_405520(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_405640(a1, (__int64)a2, result);\n    sub_4056C0(v9, v8, v6);\n    v7(v9, v8);\n    result = -1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4057e0L", 
            "funcEndAddr": "0x405850L", 
            "funcName": "sub_4057E0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4058C0()\n{\n  int *v0; // rax@2\n  int *v1; // rbx@2\n  __int64 result; // rax@4\n  char *v3; // rax@6\n  char *v4; // rbp@6\n  __int64 v5; // rax@7\n\n  if ( (unsigned int)sub_418A80(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_623B10 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_623B18 )\n      {\n        LODWORD(v5) = sub_4081A0(qword_623B18, \"write error\");\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_418A80(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x4058c0L", 
            "funcEndAddr": "0x40595eL", 
            "funcName": "sub_4058C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405960(int a1)\n{\n  signed int v1; // ebx@1\n  int v2; // eax@1\n  __int64 result; // rax@3\n\n  v1 = 1;\n  v2 = open(\"/dev/null\", 0);\n  if ( a1 != v2 && (v1 = 0, v2 >= 0) )\n  {\n    close(v2);\n    *__errno_location() = 9;\n    result = 0LL;\n  }\n  else\n  {\n    result = (unsigned int)v1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405960L", 
            "funcEndAddr": "0x4059abL", 
            "funcName": "sub_405960"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2, FILE *a3)\n{\n  FILE *v3; // r12@1\n  int v4; // ebx@1\n  int *v5; // r14@1\n  char v6; // bl@4\n  char v7; // bp@5\n  char v8; // r13@7\n  __int64 v9; // rax@11\n  __int64 v10; // r12@11\n  int v11; // er15@12\n\n  v3 = a3;\n  v4 = fileno(a3);\n  v5 = __errno_location();\n  if ( v4 == 1 )\n  {\n    v6 = 0;\n    v7 = 0;\n  }\n  else\n  {\n    if ( v4 == 2 )\n    {\n      v6 = 0;\n    }\n    else\n    {\n      if ( !v4 )\n      {\n        v6 = 0;\n        v7 = 0;\n        v8 = 0;\nLABEL_11:\n        LODWORD(v9) = sub_409C80(a1, a2, v3);\n        v10 = v9;\n        goto LABEL_12;\n      }\n      v6 = dup2(2, 2) != 2;\n    }\n    v7 = dup2(1, 1) != 1;\n  }\n  if ( !dup2(0, 0) )\n  {\n    v8 = 0;\n    if ( !v7 )\n      goto LABEL_9;\n    goto LABEL_18;\n  }\n  v8 = sub_405960(0);\n  if ( !v8 )\n  {\n    v8 = 1;\n    v10 = 0LL;\nLABEL_12:\n    v11 = *v5;\n    if ( !v6 )\n      goto LABEL_13;\n    goto LABEL_27;\n  }\n  if ( v7 )\n  {\nLABEL_18:\n    v7 = sub_405960(1);\n    if ( !v7 )\n    {\n      v11 = *v5;\n      v10 = 0LL;\n      if ( v6 )\n        close(2);\n      goto LABEL_21;\n    }\n  }\nLABEL_9:\n  if ( !v6 )\n    goto LABEL_11;\n  v6 = sub_405960(2);\n  if ( v6 )\n    goto LABEL_11;\n  v11 = *v5;\n  v10 = 0LL;\nLABEL_27:\n  close(2);\nLABEL_13:\n  if ( !v7 )\n  {\n    if ( !v8 )\n      goto LABEL_15;\nLABEL_22:\n    close(0);\n    if ( v10 )\n      return v10;\nLABEL_23:\n    *v5 = v11;\n    return v10;\n  }\nLABEL_21:\n  close(1);\n  if ( v8 )\n    goto LABEL_22;\nLABEL_15:\n  if ( !v10 )\n    goto LABEL_23;\n  return v10;\n}\n", 
            "funcStartAddr": "0x4059b0L", 
            "funcEndAddr": "0x405b5fL", 
            "funcName": "sub_4059B0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_405B60(const char *a1)\n{\n  signed __int64 v1; // rbx@2\n  char *result; // rax@2\n  signed __int64 v3; // rdx@3\n  bool v4; // cf@3\n  bool v5; // zf@3\n  char *v6; // rsi@4\n  const char *v7; // rdi@4\n  signed __int64 v8; // rcx@4\n  char v9; // dl@7\n  bool v10; // cf@7\n  bool v11; // zf@7\n  const char *v12; // rdi@8\n  signed __int64 v13; // rcx@8\n  _BYTE *v14; // rsi@8\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (signed __int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    v3 = result + 1 - a1;\n    v4 = (unsigned __int64)v3 < 6;\n    v5 = v3 == 6;\n    if ( v3 > 6 )\n    {\n      v6 = result - 6;\n      v7 = \"/.libs/\";\n      v8 = 7LL;\n      do\n      {\n        if ( !v8 )\n          break;\n        v4 = (unsigned __int8)*v6 < *v7;\n        v5 = *v6++ == *v7++;\n        --v8;\n      }\n      while ( v5 );\n      v9 = (!v4 && !v5) - v4;\n      v10 = 0;\n      v11 = v9 == 0;\n      if ( !v9 )\n      {\n        v12 = \"lt-\";\n        v13 = 3LL;\n        v14 = result + 1;\n        v1 = (signed __int64)(result + 1);\n        do\n        {\n          if ( !v13 )\n            break;\n          v10 = *v14 < (const unsigned __int8)*v12;\n          v11 = *v14++ == *v12++;\n          --v13;\n        }\n        while ( v11 );\n        if ( (!v10 && !v11) == v10 )\n        {\n          v1 = (signed __int64)(result + 4);\n          program_invocation_short_name = (__int64)(result + 4);\n        }\n      }\n    }\n  }\n  qword_623B20 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x405b60L", 
            "funcEndAddr": "0x405bf9L", 
            "funcName": "sub_405B60"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_405C00()\n{\n  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n}\n", 
            "funcStartAddr": "0x405c00L", 
            "funcEndAddr": "0x405c1dL", 
            "funcName": "sub_405C00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405C20(char *a1, __int64 a2)\n{\n  char *v2; // rbx@1\n  char *v3; // rax@1\n  unsigned __int64 v4; // rax@3\n  unsigned __int64 v5; // rbp@3\n  _BYTE *v6; // r13@5\n  __int64 v7; // rbx@7\n  mbstate_t *v8; // r13@11\n  wchar_t v10; // er15@16\n  char *v11; // rbx@18\n  size_t v12; // rax@21\n  char *v13; // rbx@21\n  __int64 v14; // rax@21\n  size_t v15; // rax@32\n  wchar_t v16; // eax@38\n  wchar_t v17; // eax@42\n  size_t v18; // rax@46\n  char *v19; // r15@46\n  __int64 v20; // rax@46\n  wint_t v21; // ebx@57\n  wchar_t v22; // eax@63\n  size_t v23; // rax@68\n  char *v24; // r15@68\n  __int64 v25; // rax@68\n  size_t v26; // rax@82\n  size_t v27; // rax@83\n  size_t v28; // rax@86\n  char *v29; // rbx@86\n  __int64 v30; // rax@86\n  size_t v31; // rax@94\n  char *v32; // r13@94\n  __int64 v33; // rax@94\n  size_t v34; // rax@106\n  char *s; // [sp+8h] [bp-C0h]@1\n  char v36; // [sp+10h] [bp-B8h]@13\n  char v37; // [sp+10h] [bp-B8h]@36\n  mbstate_t ps; // [sp+14h] [bp-B4h]@13\n  char v39; // [sp+1Ch] [bp-ACh]@13\n  char *v40; // [sp+20h] [bp-A8h]@13\n  size_t v41; // [sp+28h] [bp-A0h]@16\n  char v42; // [sp+30h] [bp-98h]@16\n  wchar_t pwc; // [sp+34h] [bp-94h]@16\n  char v44; // [sp+50h] [bp-78h]@36\n  mbstate_t v45; // [sp+54h] [bp-74h]@36\n  char v46; // [sp+5Ch] [bp-6Ch]@36\n  char *v47; // [sp+60h] [bp-68h]@36\n  __int64 v48; // [sp+68h] [bp-60h]@38\n  char v49; // [sp+70h] [bp-58h]@38\n  wchar_t v50; // [sp+74h] [bp-54h]@38\n\n  v2 = a1;\n  LODWORD(v3) = sub_408620(a2, 2LL);\n  s = v3;\n  while ( 2 )\n  {\n    if ( !*v2 )\n    {\nLABEL_11:\n      LODWORD(v8) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      LODWORD(v4) = sub_419CF0(v2, s);\n      v5 = v4;\n      if ( !v4 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v6 = (_BYTE *)(v5 + strlen(s));\n      if ( (unsigned __int64)v2 >= v5 || !((*__ctype_b_loc())[*(_BYTE *)(v5 - 1)] & 8) )\n      {\n        v7 = *v6;\n        if ( !(_BYTE)v7 || !((*__ctype_b_loc())[v7] & 8) )\n        {\n          LODWORD(v8) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *(_BYTE *)v5 )\n      {\n        v2 = (char *)(v5 + 1);\n        if ( *(_BYTE *)(v5 + 1) )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v40 = v2;\n    v8 = &ps;\n    v36 = 0;\n    ps = 0LL;\n    v39 = 0;\n    if ( (unsigned __int64)v2 >= v5 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v36 )\n      {\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n        {\n          v41 = 1LL;\n          v10 = *v40;\n          v42 = 1;\n          pwc = v10;\n          v39 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v36 = 1;\n      }\n      v12 = __ctype_get_mb_cur_max();\n      v13 = v40;\n      sub_4085C0(v40, v12);\n      v14 = sub_40AB50(&pwc, v13);\n      v41 = v14;\n      if ( v14 == -1 )\n      {\n        v10 = pwc;\n        v11 = v40;\n        v42 = 0;\n        v41 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v14 == -2 )\n      {\n        v11 = v40;\n        v15 = strlen(v40);\n        v42 = 0;\n        v10 = pwc;\n        v41 = v15;\n        goto LABEL_19;\n      }\n      if ( v14 )\n      {\n        v10 = pwc;\n      }\n      else\n      {\n        v41 = 1LL;\n        if ( *v40 )\n          goto LABEL_109;\n        v10 = pwc;\n        if ( pwc )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v42 = 1;\n      if ( mbsinit(&ps) )\n        v36 = 0;\n      v39 = 1;\nLABEL_17:\n      if ( !v10 )\nLABEL_111:\n        abort();\n      v11 = v40;\nLABEL_19:\n      v39 = 0;\n      v40 = &v11[v41];\n    }\n    while ( (unsigned __int64)&v11[v41] < v5 );\n    if ( v42 )\n    {\n      LOBYTE(v8) = iswalnum(v10) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(v8) = 1;\nLABEL_36:\n    v40 = (char *)v5;\n    v37 = 0;\n    ps = 0LL;\n    v39 = 0;\n    v47 = s;\n    v44 = 0;\n    v45 = 0LL;\n    v46 = 0;\n    while ( 2 )\n    {\n      if ( !v44 )\n      {\n        if ( !(((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v47 >> 5) & 7)] >> *v47) & 1) )\n        {\n          if ( !mbsinit(&v45) )\n            goto LABEL_108;\n          v44 = 1;\n          goto LABEL_46;\n        }\n        v48 = 1LL;\n        v16 = *v47;\n        v49 = 1;\n        v50 = v16;\n        v46 = 1;\n        if ( !v16 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v18 = __ctype_get_mb_cur_max();\n      v19 = v47;\n      sub_4085C0(v47, v18);\n      v20 = sub_40AB50(&v50, v19);\n      v48 = v20;\n      if ( v20 == -1 )\n      {\n        v48 = 1LL;\n        v49 = 0;\n        v46 = 1;\n        goto LABEL_39;\n      }\n      if ( v20 == -2 )\n      {\n        v26 = strlen(v47);\n        v49 = 0;\n        v48 = v26;\n        v46 = 1;\n        goto LABEL_39;\n      }\n      if ( !v20 )\n      {\n        v48 = 1LL;\n        if ( *v47 )\n          goto LABEL_109;\n        if ( v50 )\n          goto LABEL_110;\n      }\n      v49 = 1;\n      if ( mbsinit(&v45) )\n        v44 = 0;\n      v46 = 1;\n      if ( v50 )\n      {\nLABEL_39:\n        if ( v39 )\n        {\n          if ( v42 )\n          {\nLABEL_43:\n            if ( !pwc )\n              goto LABEL_111;\n            goto LABEL_44;\n          }\n        }\n        else\n        {\n          if ( !v37 )\n          {\n            if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n            {\n              v41 = 1LL;\n              v17 = *v40;\n              v42 = 1;\n              pwc = v17;\n              v39 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v37 = 1;\n          }\n          v23 = __ctype_get_mb_cur_max();\n          v24 = v40;\n          sub_4085C0(v40, v23);\n          v25 = sub_40AB50(&pwc, v24);\n          v41 = v25;\n          if ( v25 == -1 )\n          {\n            v41 = 1LL;\n            v42 = 0;\n          }\n          else\n          {\n            if ( v25 != -2 )\n            {\n              if ( !v25 )\n              {\n                v41 = 1LL;\n                if ( *v40 )\n                  goto LABEL_109;\n                if ( pwc )\n                  goto LABEL_110;\n              }\n              v42 = 1;\n              if ( mbsinit(&ps) )\n                v37 = 0;\n              v39 = 1;\n              goto LABEL_43;\n            }\n            v27 = strlen(v40);\n            v42 = 0;\n            v41 = v27;\n          }\n        }\nLABEL_44:\n        v40 += v41;\n        v47 += v48;\n        v39 = 0;\n        v46 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v39 )\n    {\n      v21 = pwc;\n      if ( v42 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v37 )\n    {\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n      {\n        v41 = 1LL;\n        v21 = *v40;\n        v42 = 1;\n        pwc = v21;\n        v39 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v28 = __ctype_get_mb_cur_max();\n    v29 = v40;\n    sub_4085C0(v40, v28);\n    v30 = sub_40AB50(&pwc, v29);\n    v41 = v30;\n    if ( v30 == -1 )\n    {\n      v41 = 1LL;\n      v21 = pwc;\n      v42 = 0;\n      v39 = 1;\n      goto LABEL_59;\n    }\n    if ( v30 == -2 )\n    {\n      v34 = strlen(v40);\n      v42 = 0;\n      v21 = pwc;\n      v41 = v34;\n      v39 = 1;\n      goto LABEL_59;\n    }\n    if ( v30 )\n    {\n      v21 = pwc;\n      goto LABEL_90;\n    }\n    v41 = 1LL;\n    if ( *v40 )\n      goto LABEL_109;\n    v21 = pwc;\n    if ( pwc )\nLABEL_104:\n      sub_405C00();\nLABEL_90:\n    v42 = 1;\n    mbsinit(&ps);\n    v39 = 1;\nLABEL_58:\n    if ( v21 )\n    {\nLABEL_59:\n      if ( !v42 || !iswalnum(v21) )\n        break;\nLABEL_62:\n      v40 = (char *)v5;\n      ps = 0LL;\n      v39 = 0;\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)v5 >> 5) & 7)] >> *(_BYTE *)v5) & 1 )\n      {\n        v41 = 1LL;\n        v22 = *(_BYTE *)v5;\n        v42 = 1;\n        pwc = v22;\n        v39 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v31 = __ctype_get_mb_cur_max();\n        v32 = v40;\n        sub_4085C0(v40, v31);\n        v33 = sub_40AB50(&pwc, v32);\n        v41 = v33;\n        if ( v33 == -1 )\n        {\n          v41 = 1LL;\n          goto LABEL_65;\n        }\n        if ( v33 == -2 )\n        {\n          v41 = strlen(v40);\n          goto LABEL_65;\n        }\n        if ( !v33 )\n        {\n          v41 = 1LL;\n          if ( !*v40 )\n          {\n            if ( pwc )\n              goto LABEL_104;\n            goto LABEL_99;\n          }\nLABEL_109:\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n        }\nLABEL_99:\n        v42 = 1;\n        mbsinit(&ps);\n        v39 = 1;\nLABEL_64:\n        if ( pwc )\n        {\nLABEL_65:\n          v2 = (char *)(v5 + v41);\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)v8 )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)v8;\n}\n\n__int64 __fastcall sub_405C20(char *a1, __int64 a2)\n{\n  char *v2; // rbx@1\n  char *v3; // rax@1\n  unsigned __int64 v4; // rax@3\n  unsigned __int64 v5; // rbp@3\n  _BYTE *v6; // r13@5\n  __int64 v7; // rbx@7\n  mbstate_t *v8; // r13@11\n  wchar_t v10; // er15@16\n  char *v11; // rbx@18\n  size_t v12; // rax@21\n  char *v13; // rbx@21\n  __int64 v14; // rax@21\n  size_t v15; // rax@32\n  wchar_t v16; // eax@38\n  wchar_t v17; // eax@42\n  size_t v18; // rax@46\n  char *v19; // r15@46\n  __int64 v20; // rax@46\n  wint_t v21; // ebx@57\n  wchar_t v22; // eax@63\n  size_t v23; // rax@68\n  char *v24; // r15@68\n  __int64 v25; // rax@68\n  size_t v26; // rax@82\n  size_t v27; // rax@83\n  size_t v28; // rax@86\n  char *v29; // rbx@86\n  __int64 v30; // rax@86\n  size_t v31; // rax@94\n  char *v32; // r13@94\n  __int64 v33; // rax@94\n  size_t v34; // rax@106\n  char *s; // [sp+8h] [bp-C0h]@1\n  char v36; // [sp+10h] [bp-B8h]@13\n  char v37; // [sp+10h] [bp-B8h]@36\n  mbstate_t ps; // [sp+14h] [bp-B4h]@13\n  char v39; // [sp+1Ch] [bp-ACh]@13\n  char *v40; // [sp+20h] [bp-A8h]@13\n  size_t v41; // [sp+28h] [bp-A0h]@16\n  char v42; // [sp+30h] [bp-98h]@16\n  wchar_t pwc; // [sp+34h] [bp-94h]@16\n  char v44; // [sp+50h] [bp-78h]@36\n  mbstate_t v45; // [sp+54h] [bp-74h]@36\n  char v46; // [sp+5Ch] [bp-6Ch]@36\n  char *v47; // [sp+60h] [bp-68h]@36\n  __int64 v48; // [sp+68h] [bp-60h]@38\n  char v49; // [sp+70h] [bp-58h]@38\n  wchar_t v50; // [sp+74h] [bp-54h]@38\n\n  v2 = a1;\n  LODWORD(v3) = sub_408620(a2, 2LL);\n  s = v3;\n  while ( 2 )\n  {\n    if ( !*v2 )\n    {\nLABEL_11:\n      LODWORD(v8) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      LODWORD(v4) = sub_419CF0(v2, s);\n      v5 = v4;\n      if ( !v4 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v6 = (_BYTE *)(v5 + strlen(s));\n      if ( (unsigned __int64)v2 >= v5 || !((*__ctype_b_loc())[*(_BYTE *)(v5 - 1)] & 8) )\n      {\n        v7 = *v6;\n        if ( !(_BYTE)v7 || !((*__ctype_b_loc())[v7] & 8) )\n        {\n          LODWORD(v8) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *(_BYTE *)v5 )\n      {\n        v2 = (char *)(v5 + 1);\n        if ( *(_BYTE *)(v5 + 1) )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v40 = v2;\n    v8 = &ps;\n    v36 = 0;\n    ps = 0LL;\n    v39 = 0;\n    if ( (unsigned __int64)v2 >= v5 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v36 )\n      {\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n        {\n          v41 = 1LL;\n          v10 = *v40;\n          v42 = 1;\n          pwc = v10;\n          v39 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v36 = 1;\n      }\n      v12 = __ctype_get_mb_cur_max();\n      v13 = v40;\n      sub_4085C0(v40, v12);\n      v14 = sub_40AB50(&pwc, v13);\n      v41 = v14;\n      if ( v14 == -1 )\n      {\n        v10 = pwc;\n        v11 = v40;\n        v42 = 0;\n        v41 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v14 == -2 )\n      {\n        v11 = v40;\n        v15 = strlen(v40);\n        v42 = 0;\n        v10 = pwc;\n        v41 = v15;\n        goto LABEL_19;\n      }\n      if ( v14 )\n      {\n        v10 = pwc;\n      }\n      else\n      {\n        v41 = 1LL;\n        if ( *v40 )\n          goto LABEL_109;\n        v10 = pwc;\n        if ( pwc )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v42 = 1;\n      if ( mbsinit(&ps) )\n        v36 = 0;\n      v39 = 1;\nLABEL_17:\n      if ( !v10 )\nLABEL_111:\n        abort();\n      v11 = v40;\nLABEL_19:\n      v39 = 0;\n      v40 = &v11[v41];\n    }\n    while ( (unsigned __int64)&v11[v41] < v5 );\n    if ( v42 )\n    {\n      LOBYTE(v8) = iswalnum(v10) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(v8) = 1;\nLABEL_36:\n    v40 = (char *)v5;\n    v37 = 0;\n    ps = 0LL;\n    v39 = 0;\n    v47 = s;\n    v44 = 0;\n    v45 = 0LL;\n    v46 = 0;\n    while ( 2 )\n    {\n      if ( !v44 )\n      {\n        if ( !(((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v47 >> 5) & 7)] >> *v47) & 1) )\n        {\n          if ( !mbsinit(&v45) )\n            goto LABEL_108;\n          v44 = 1;\n          goto LABEL_46;\n        }\n        v48 = 1LL;\n        v16 = *v47;\n        v49 = 1;\n        v50 = v16;\n        v46 = 1;\n        if ( !v16 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v18 = __ctype_get_mb_cur_max();\n      v19 = v47;\n      sub_4085C0(v47, v18);\n      v20 = sub_40AB50(&v50, v19);\n      v48 = v20;\n      if ( v20 == -1 )\n      {\n        v48 = 1LL;\n        v49 = 0;\n        v46 = 1;\n        goto LABEL_39;\n      }\n      if ( v20 == -2 )\n      {\n        v26 = strlen(v47);\n        v49 = 0;\n        v48 = v26;\n        v46 = 1;\n        goto LABEL_39;\n      }\n      if ( !v20 )\n      {\n        v48 = 1LL;\n        if ( *v47 )\n          goto LABEL_109;\n        if ( v50 )\n          goto LABEL_110;\n      }\n      v49 = 1;\n      if ( mbsinit(&v45) )\n        v44 = 0;\n      v46 = 1;\n      if ( v50 )\n      {\nLABEL_39:\n        if ( v39 )\n        {\n          if ( v42 )\n          {\nLABEL_43:\n            if ( !pwc )\n              goto LABEL_111;\n            goto LABEL_44;\n          }\n        }\n        else\n        {\n          if ( !v37 )\n          {\n            if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n            {\n              v41 = 1LL;\n              v17 = *v40;\n              v42 = 1;\n              pwc = v17;\n              v39 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v37 = 1;\n          }\n          v23 = __ctype_get_mb_cur_max();\n          v24 = v40;\n          sub_4085C0(v40, v23);\n          v25 = sub_40AB50(&pwc, v24);\n          v41 = v25;\n          if ( v25 == -1 )\n          {\n            v41 = 1LL;\n            v42 = 0;\n          }\n          else\n          {\n            if ( v25 != -2 )\n            {\n              if ( !v25 )\n              {\n                v41 = 1LL;\n                if ( *v40 )\n                  goto LABEL_109;\n                if ( pwc )\n                  goto LABEL_110;\n              }\n              v42 = 1;\n              if ( mbsinit(&ps) )\n                v37 = 0;\n              v39 = 1;\n              goto LABEL_43;\n            }\n            v27 = strlen(v40);\n            v42 = 0;\n            v41 = v27;\n          }\n        }\nLABEL_44:\n        v40 += v41;\n        v47 += v48;\n        v39 = 0;\n        v46 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v39 )\n    {\n      v21 = pwc;\n      if ( v42 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v37 )\n    {\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n      {\n        v41 = 1LL;\n        v21 = *v40;\n        v42 = 1;\n        pwc = v21;\n        v39 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v28 = __ctype_get_mb_cur_max();\n    v29 = v40;\n    sub_4085C0(v40, v28);\n    v30 = sub_40AB50(&pwc, v29);\n    v41 = v30;\n    if ( v30 == -1 )\n    {\n      v41 = 1LL;\n      v21 = pwc;\n      v42 = 0;\n      v39 = 1;\n      goto LABEL_59;\n    }\n    if ( v30 == -2 )\n    {\n      v34 = strlen(v40);\n      v42 = 0;\n      v21 = pwc;\n      v41 = v34;\n      v39 = 1;\n      goto LABEL_59;\n    }\n    if ( v30 )\n    {\n      v21 = pwc;\n      goto LABEL_90;\n    }\n    v41 = 1LL;\n    if ( *v40 )\n      goto LABEL_109;\n    v21 = pwc;\n    if ( pwc )\nLABEL_104:\n      sub_405C00();\nLABEL_90:\n    v42 = 1;\n    mbsinit(&ps);\n    v39 = 1;\nLABEL_58:\n    if ( v21 )\n    {\nLABEL_59:\n      if ( !v42 || !iswalnum(v21) )\n        break;\nLABEL_62:\n      v40 = (char *)v5;\n      ps = 0LL;\n      v39 = 0;\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)v5 >> 5) & 7)] >> *(_BYTE *)v5) & 1 )\n      {\n        v41 = 1LL;\n        v22 = *(_BYTE *)v5;\n        v42 = 1;\n        pwc = v22;\n        v39 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v31 = __ctype_get_mb_cur_max();\n        v32 = v40;\n        sub_4085C0(v40, v31);\n        v33 = sub_40AB50(&pwc, v32);\n        v41 = v33;\n        if ( v33 == -1 )\n        {\n          v41 = 1LL;\n          goto LABEL_65;\n        }\n        if ( v33 == -2 )\n        {\n          v41 = strlen(v40);\n          goto LABEL_65;\n        }\n        if ( !v33 )\n        {\n          v41 = 1LL;\n          if ( !*v40 )\n          {\n            if ( pwc )\n              goto LABEL_104;\n            goto LABEL_99;\n          }\nLABEL_109:\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n        }\nLABEL_99:\n        v42 = 1;\n        mbsinit(&ps);\n        v39 = 1;\nLABEL_64:\n        if ( pwc )\n        {\nLABEL_65:\n          v2 = (char *)(v5 + v41);\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)v8 )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)v8;\n}\n", 
            "funcStartAddr": "0x401fd0L", 
            "funcEndAddr": "0x401fd5L", 
            "funcName": "sub_405C20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405C20(char *a1, __int64 a2)\n{\n  char *v2; // rbx@1\n  char *v3; // rax@1\n  unsigned __int64 v4; // rax@3\n  unsigned __int64 v5; // rbp@3\n  _BYTE *v6; // r13@5\n  __int64 v7; // rbx@7\n  mbstate_t *v8; // r13@11\n  wchar_t v10; // er15@16\n  char *v11; // rbx@18\n  size_t v12; // rax@21\n  char *v13; // rbx@21\n  __int64 v14; // rax@21\n  size_t v15; // rax@32\n  wchar_t v16; // eax@38\n  wchar_t v17; // eax@42\n  size_t v18; // rax@46\n  char *v19; // r15@46\n  __int64 v20; // rax@46\n  wint_t v21; // ebx@57\n  wchar_t v22; // eax@63\n  size_t v23; // rax@68\n  char *v24; // r15@68\n  __int64 v25; // rax@68\n  size_t v26; // rax@82\n  size_t v27; // rax@83\n  size_t v28; // rax@86\n  char *v29; // rbx@86\n  __int64 v30; // rax@86\n  size_t v31; // rax@94\n  char *v32; // r13@94\n  __int64 v33; // rax@94\n  size_t v34; // rax@106\n  char *s; // [sp+8h] [bp-C0h]@1\n  char v36; // [sp+10h] [bp-B8h]@13\n  char v37; // [sp+10h] [bp-B8h]@36\n  mbstate_t ps; // [sp+14h] [bp-B4h]@13\n  char v39; // [sp+1Ch] [bp-ACh]@13\n  char *v40; // [sp+20h] [bp-A8h]@13\n  size_t v41; // [sp+28h] [bp-A0h]@16\n  char v42; // [sp+30h] [bp-98h]@16\n  wchar_t pwc; // [sp+34h] [bp-94h]@16\n  char v44; // [sp+50h] [bp-78h]@36\n  mbstate_t v45; // [sp+54h] [bp-74h]@36\n  char v46; // [sp+5Ch] [bp-6Ch]@36\n  char *v47; // [sp+60h] [bp-68h]@36\n  __int64 v48; // [sp+68h] [bp-60h]@38\n  char v49; // [sp+70h] [bp-58h]@38\n  wchar_t v50; // [sp+74h] [bp-54h]@38\n\n  v2 = a1;\n  LODWORD(v3) = sub_408620(a2, 2LL);\n  s = v3;\n  while ( 2 )\n  {\n    if ( !*v2 )\n    {\nLABEL_11:\n      LODWORD(v8) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      LODWORD(v4) = sub_419CF0(v2, s);\n      v5 = v4;\n      if ( !v4 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v6 = (_BYTE *)(v5 + strlen(s));\n      if ( (unsigned __int64)v2 >= v5 || !((*__ctype_b_loc())[*(_BYTE *)(v5 - 1)] & 8) )\n      {\n        v7 = *v6;\n        if ( !(_BYTE)v7 || !((*__ctype_b_loc())[v7] & 8) )\n        {\n          LODWORD(v8) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *(_BYTE *)v5 )\n      {\n        v2 = (char *)(v5 + 1);\n        if ( *(_BYTE *)(v5 + 1) )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v40 = v2;\n    v8 = &ps;\n    v36 = 0;\n    ps = 0LL;\n    v39 = 0;\n    if ( (unsigned __int64)v2 >= v5 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v36 )\n      {\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n        {\n          v41 = 1LL;\n          v10 = *v40;\n          v42 = 1;\n          pwc = v10;\n          v39 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v36 = 1;\n      }\n      v12 = __ctype_get_mb_cur_max();\n      v13 = v40;\n      sub_4085C0(v40, v12);\n      v14 = sub_40AB50(&pwc, v13);\n      v41 = v14;\n      if ( v14 == -1 )\n      {\n        v10 = pwc;\n        v11 = v40;\n        v42 = 0;\n        v41 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v14 == -2 )\n      {\n        v11 = v40;\n        v15 = strlen(v40);\n        v42 = 0;\n        v10 = pwc;\n        v41 = v15;\n        goto LABEL_19;\n      }\n      if ( v14 )\n      {\n        v10 = pwc;\n      }\n      else\n      {\n        v41 = 1LL;\n        if ( *v40 )\n          goto LABEL_109;\n        v10 = pwc;\n        if ( pwc )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v42 = 1;\n      if ( mbsinit(&ps) )\n        v36 = 0;\n      v39 = 1;\nLABEL_17:\n      if ( !v10 )\nLABEL_111:\n        abort();\n      v11 = v40;\nLABEL_19:\n      v39 = 0;\n      v40 = &v11[v41];\n    }\n    while ( (unsigned __int64)&v11[v41] < v5 );\n    if ( v42 )\n    {\n      LOBYTE(v8) = iswalnum(v10) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(v8) = 1;\nLABEL_36:\n    v40 = (char *)v5;\n    v37 = 0;\n    ps = 0LL;\n    v39 = 0;\n    v47 = s;\n    v44 = 0;\n    v45 = 0LL;\n    v46 = 0;\n    while ( 2 )\n    {\n      if ( !v44 )\n      {\n        if ( !(((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v47 >> 5) & 7)] >> *v47) & 1) )\n        {\n          if ( !mbsinit(&v45) )\n            goto LABEL_108;\n          v44 = 1;\n          goto LABEL_46;\n        }\n        v48 = 1LL;\n        v16 = *v47;\n        v49 = 1;\n        v50 = v16;\n        v46 = 1;\n        if ( !v16 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v18 = __ctype_get_mb_cur_max();\n      v19 = v47;\n      sub_4085C0(v47, v18);\n      v20 = sub_40AB50(&v50, v19);\n      v48 = v20;\n      if ( v20 == -1 )\n      {\n        v48 = 1LL;\n        v49 = 0;\n        v46 = 1;\n        goto LABEL_39;\n      }\n      if ( v20 == -2 )\n      {\n        v26 = strlen(v47);\n        v49 = 0;\n        v48 = v26;\n        v46 = 1;\n        goto LABEL_39;\n      }\n      if ( !v20 )\n      {\n        v48 = 1LL;\n        if ( *v47 )\n          goto LABEL_109;\n        if ( v50 )\n          goto LABEL_110;\n      }\n      v49 = 1;\n      if ( mbsinit(&v45) )\n        v44 = 0;\n      v46 = 1;\n      if ( v50 )\n      {\nLABEL_39:\n        if ( v39 )\n        {\n          if ( v42 )\n          {\nLABEL_43:\n            if ( !pwc )\n              goto LABEL_111;\n            goto LABEL_44;\n          }\n        }\n        else\n        {\n          if ( !v37 )\n          {\n            if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n            {\n              v41 = 1LL;\n              v17 = *v40;\n              v42 = 1;\n              pwc = v17;\n              v39 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v37 = 1;\n          }\n          v23 = __ctype_get_mb_cur_max();\n          v24 = v40;\n          sub_4085C0(v40, v23);\n          v25 = sub_40AB50(&pwc, v24);\n          v41 = v25;\n          if ( v25 == -1 )\n          {\n            v41 = 1LL;\n            v42 = 0;\n          }\n          else\n          {\n            if ( v25 != -2 )\n            {\n              if ( !v25 )\n              {\n                v41 = 1LL;\n                if ( *v40 )\n                  goto LABEL_109;\n                if ( pwc )\n                  goto LABEL_110;\n              }\n              v42 = 1;\n              if ( mbsinit(&ps) )\n                v37 = 0;\n              v39 = 1;\n              goto LABEL_43;\n            }\n            v27 = strlen(v40);\n            v42 = 0;\n            v41 = v27;\n          }\n        }\nLABEL_44:\n        v40 += v41;\n        v47 += v48;\n        v39 = 0;\n        v46 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v39 )\n    {\n      v21 = pwc;\n      if ( v42 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v37 )\n    {\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n      {\n        v41 = 1LL;\n        v21 = *v40;\n        v42 = 1;\n        pwc = v21;\n        v39 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v28 = __ctype_get_mb_cur_max();\n    v29 = v40;\n    sub_4085C0(v40, v28);\n    v30 = sub_40AB50(&pwc, v29);\n    v41 = v30;\n    if ( v30 == -1 )\n    {\n      v41 = 1LL;\n      v21 = pwc;\n      v42 = 0;\n      v39 = 1;\n      goto LABEL_59;\n    }\n    if ( v30 == -2 )\n    {\n      v34 = strlen(v40);\n      v42 = 0;\n      v21 = pwc;\n      v41 = v34;\n      v39 = 1;\n      goto LABEL_59;\n    }\n    if ( v30 )\n    {\n      v21 = pwc;\n      goto LABEL_90;\n    }\n    v41 = 1LL;\n    if ( *v40 )\n      goto LABEL_109;\n    v21 = pwc;\n    if ( pwc )\nLABEL_104:\n      sub_405C00();\nLABEL_90:\n    v42 = 1;\n    mbsinit(&ps);\n    v39 = 1;\nLABEL_58:\n    if ( v21 )\n    {\nLABEL_59:\n      if ( !v42 || !iswalnum(v21) )\n        break;\nLABEL_62:\n      v40 = (char *)v5;\n      ps = 0LL;\n      v39 = 0;\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)v5 >> 5) & 7)] >> *(_BYTE *)v5) & 1 )\n      {\n        v41 = 1LL;\n        v22 = *(_BYTE *)v5;\n        v42 = 1;\n        pwc = v22;\n        v39 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v31 = __ctype_get_mb_cur_max();\n        v32 = v40;\n        sub_4085C0(v40, v31);\n        v33 = sub_40AB50(&pwc, v32);\n        v41 = v33;\n        if ( v33 == -1 )\n        {\n          v41 = 1LL;\n          goto LABEL_65;\n        }\n        if ( v33 == -2 )\n        {\n          v41 = strlen(v40);\n          goto LABEL_65;\n        }\n        if ( !v33 )\n        {\n          v41 = 1LL;\n          if ( !*v40 )\n          {\n            if ( pwc )\n              goto LABEL_104;\n            goto LABEL_99;\n          }\nLABEL_109:\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n        }\nLABEL_99:\n        v42 = 1;\n        mbsinit(&ps);\n        v39 = 1;\nLABEL_64:\n        if ( pwc )\n        {\nLABEL_65:\n          v2 = (char *)(v5 + v41);\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)v8 )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)v8;\n}\n\n__int64 __fastcall sub_405C20(char *a1, __int64 a2)\n{\n  char *v2; // rbx@1\n  char *v3; // rax@1\n  unsigned __int64 v4; // rax@3\n  unsigned __int64 v5; // rbp@3\n  _BYTE *v6; // r13@5\n  __int64 v7; // rbx@7\n  mbstate_t *v8; // r13@11\n  wchar_t v10; // er15@16\n  char *v11; // rbx@18\n  size_t v12; // rax@21\n  char *v13; // rbx@21\n  __int64 v14; // rax@21\n  size_t v15; // rax@32\n  wchar_t v16; // eax@38\n  wchar_t v17; // eax@42\n  size_t v18; // rax@46\n  char *v19; // r15@46\n  __int64 v20; // rax@46\n  wint_t v21; // ebx@57\n  wchar_t v22; // eax@63\n  size_t v23; // rax@68\n  char *v24; // r15@68\n  __int64 v25; // rax@68\n  size_t v26; // rax@82\n  size_t v27; // rax@83\n  size_t v28; // rax@86\n  char *v29; // rbx@86\n  __int64 v30; // rax@86\n  size_t v31; // rax@94\n  char *v32; // r13@94\n  __int64 v33; // rax@94\n  size_t v34; // rax@106\n  char *s; // [sp+8h] [bp-C0h]@1\n  char v36; // [sp+10h] [bp-B8h]@13\n  char v37; // [sp+10h] [bp-B8h]@36\n  mbstate_t ps; // [sp+14h] [bp-B4h]@13\n  char v39; // [sp+1Ch] [bp-ACh]@13\n  char *v40; // [sp+20h] [bp-A8h]@13\n  size_t v41; // [sp+28h] [bp-A0h]@16\n  char v42; // [sp+30h] [bp-98h]@16\n  wchar_t pwc; // [sp+34h] [bp-94h]@16\n  char v44; // [sp+50h] [bp-78h]@36\n  mbstate_t v45; // [sp+54h] [bp-74h]@36\n  char v46; // [sp+5Ch] [bp-6Ch]@36\n  char *v47; // [sp+60h] [bp-68h]@36\n  __int64 v48; // [sp+68h] [bp-60h]@38\n  char v49; // [sp+70h] [bp-58h]@38\n  wchar_t v50; // [sp+74h] [bp-54h]@38\n\n  v2 = a1;\n  LODWORD(v3) = sub_408620(a2, 2LL);\n  s = v3;\n  while ( 2 )\n  {\n    if ( !*v2 )\n    {\nLABEL_11:\n      LODWORD(v8) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      LODWORD(v4) = sub_419CF0(v2, s);\n      v5 = v4;\n      if ( !v4 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v6 = (_BYTE *)(v5 + strlen(s));\n      if ( (unsigned __int64)v2 >= v5 || !((*__ctype_b_loc())[*(_BYTE *)(v5 - 1)] & 8) )\n      {\n        v7 = *v6;\n        if ( !(_BYTE)v7 || !((*__ctype_b_loc())[v7] & 8) )\n        {\n          LODWORD(v8) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *(_BYTE *)v5 )\n      {\n        v2 = (char *)(v5 + 1);\n        if ( *(_BYTE *)(v5 + 1) )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v40 = v2;\n    v8 = &ps;\n    v36 = 0;\n    ps = 0LL;\n    v39 = 0;\n    if ( (unsigned __int64)v2 >= v5 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v36 )\n      {\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n        {\n          v41 = 1LL;\n          v10 = *v40;\n          v42 = 1;\n          pwc = v10;\n          v39 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v36 = 1;\n      }\n      v12 = __ctype_get_mb_cur_max();\n      v13 = v40;\n      sub_4085C0(v40, v12);\n      v14 = sub_40AB50(&pwc, v13);\n      v41 = v14;\n      if ( v14 == -1 )\n      {\n        v10 = pwc;\n        v11 = v40;\n        v42 = 0;\n        v41 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v14 == -2 )\n      {\n        v11 = v40;\n        v15 = strlen(v40);\n        v42 = 0;\n        v10 = pwc;\n        v41 = v15;\n        goto LABEL_19;\n      }\n      if ( v14 )\n      {\n        v10 = pwc;\n      }\n      else\n      {\n        v41 = 1LL;\n        if ( *v40 )\n          goto LABEL_109;\n        v10 = pwc;\n        if ( pwc )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v42 = 1;\n      if ( mbsinit(&ps) )\n        v36 = 0;\n      v39 = 1;\nLABEL_17:\n      if ( !v10 )\nLABEL_111:\n        abort();\n      v11 = v40;\nLABEL_19:\n      v39 = 0;\n      v40 = &v11[v41];\n    }\n    while ( (unsigned __int64)&v11[v41] < v5 );\n    if ( v42 )\n    {\n      LOBYTE(v8) = iswalnum(v10) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(v8) = 1;\nLABEL_36:\n    v40 = (char *)v5;\n    v37 = 0;\n    ps = 0LL;\n    v39 = 0;\n    v47 = s;\n    v44 = 0;\n    v45 = 0LL;\n    v46 = 0;\n    while ( 2 )\n    {\n      if ( !v44 )\n      {\n        if ( !(((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v47 >> 5) & 7)] >> *v47) & 1) )\n        {\n          if ( !mbsinit(&v45) )\n            goto LABEL_108;\n          v44 = 1;\n          goto LABEL_46;\n        }\n        v48 = 1LL;\n        v16 = *v47;\n        v49 = 1;\n        v50 = v16;\n        v46 = 1;\n        if ( !v16 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v18 = __ctype_get_mb_cur_max();\n      v19 = v47;\n      sub_4085C0(v47, v18);\n      v20 = sub_40AB50(&v50, v19);\n      v48 = v20;\n      if ( v20 == -1 )\n      {\n        v48 = 1LL;\n        v49 = 0;\n        v46 = 1;\n        goto LABEL_39;\n      }\n      if ( v20 == -2 )\n      {\n        v26 = strlen(v47);\n        v49 = 0;\n        v48 = v26;\n        v46 = 1;\n        goto LABEL_39;\n      }\n      if ( !v20 )\n      {\n        v48 = 1LL;\n        if ( *v47 )\n          goto LABEL_109;\n        if ( v50 )\n          goto LABEL_110;\n      }\n      v49 = 1;\n      if ( mbsinit(&v45) )\n        v44 = 0;\n      v46 = 1;\n      if ( v50 )\n      {\nLABEL_39:\n        if ( v39 )\n        {\n          if ( v42 )\n          {\nLABEL_43:\n            if ( !pwc )\n              goto LABEL_111;\n            goto LABEL_44;\n          }\n        }\n        else\n        {\n          if ( !v37 )\n          {\n            if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n            {\n              v41 = 1LL;\n              v17 = *v40;\n              v42 = 1;\n              pwc = v17;\n              v39 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v37 = 1;\n          }\n          v23 = __ctype_get_mb_cur_max();\n          v24 = v40;\n          sub_4085C0(v40, v23);\n          v25 = sub_40AB50(&pwc, v24);\n          v41 = v25;\n          if ( v25 == -1 )\n          {\n            v41 = 1LL;\n            v42 = 0;\n          }\n          else\n          {\n            if ( v25 != -2 )\n            {\n              if ( !v25 )\n              {\n                v41 = 1LL;\n                if ( *v40 )\n                  goto LABEL_109;\n                if ( pwc )\n                  goto LABEL_110;\n              }\n              v42 = 1;\n              if ( mbsinit(&ps) )\n                v37 = 0;\n              v39 = 1;\n              goto LABEL_43;\n            }\n            v27 = strlen(v40);\n            v42 = 0;\n            v41 = v27;\n          }\n        }\nLABEL_44:\n        v40 += v41;\n        v47 += v48;\n        v39 = 0;\n        v46 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v39 )\n    {\n      v21 = pwc;\n      if ( v42 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v37 )\n    {\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v40 >> 5) & 7)] >> *v40) & 1 )\n      {\n        v41 = 1LL;\n        v21 = *v40;\n        v42 = 1;\n        pwc = v21;\n        v39 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v28 = __ctype_get_mb_cur_max();\n    v29 = v40;\n    sub_4085C0(v40, v28);\n    v30 = sub_40AB50(&pwc, v29);\n    v41 = v30;\n    if ( v30 == -1 )\n    {\n      v41 = 1LL;\n      v21 = pwc;\n      v42 = 0;\n      v39 = 1;\n      goto LABEL_59;\n    }\n    if ( v30 == -2 )\n    {\n      v34 = strlen(v40);\n      v42 = 0;\n      v21 = pwc;\n      v41 = v34;\n      v39 = 1;\n      goto LABEL_59;\n    }\n    if ( v30 )\n    {\n      v21 = pwc;\n      goto LABEL_90;\n    }\n    v41 = 1LL;\n    if ( *v40 )\n      goto LABEL_109;\n    v21 = pwc;\n    if ( pwc )\nLABEL_104:\n      sub_405C00();\nLABEL_90:\n    v42 = 1;\n    mbsinit(&ps);\n    v39 = 1;\nLABEL_58:\n    if ( v21 )\n    {\nLABEL_59:\n      if ( !v42 || !iswalnum(v21) )\n        break;\nLABEL_62:\n      v40 = (char *)v5;\n      ps = 0LL;\n      v39 = 0;\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)v5 >> 5) & 7)] >> *(_BYTE *)v5) & 1 )\n      {\n        v41 = 1LL;\n        v22 = *(_BYTE *)v5;\n        v42 = 1;\n        pwc = v22;\n        v39 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v31 = __ctype_get_mb_cur_max();\n        v32 = v40;\n        sub_4085C0(v40, v31);\n        v33 = sub_40AB50(&pwc, v32);\n        v41 = v33;\n        if ( v33 == -1 )\n        {\n          v41 = 1LL;\n          goto LABEL_65;\n        }\n        if ( v33 == -2 )\n        {\n          v41 = strlen(v40);\n          goto LABEL_65;\n        }\n        if ( !v33 )\n        {\n          v41 = 1LL;\n          if ( !*v40 )\n          {\n            if ( pwc )\n              goto LABEL_104;\n            goto LABEL_99;\n          }\nLABEL_109:\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n        }\nLABEL_99:\n        v42 = 1;\n        mbsinit(&ps);\n        v39 = 1;\nLABEL_64:\n        if ( pwc )\n        {\nLABEL_65:\n          v2 = (char *)(v5 + v41);\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)v8 )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)v8;\n}\n", 
            "funcStartAddr": "0x401fd0L", 
            "funcEndAddr": "0x401fd5L", 
            "funcName": "sub_405C20"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_406550(char *s2, char *s)\n{\n  char *v2; // rbx@1\n  char *v3; // r13@1\n  const char *v4; // rax@1\n  const char *v5; // r14@1\n  char *v6; // r15@3\n  char *v7; // r12@3\n  char *v8; // r14@3\n  char *v9; // rbp@5\n  size_t v11; // rbx@16\n  size_t v12; // rax@16\n  char *v13; // rax@16\n  char *v14; // rbx@16\n  char *v15; // rax@20\n  size_t v16; // rax@20\n  size_t v17; // r15@20\n  void *v18; // rax@20\n  char *v19; // rax@20\n  char *v20; // r15@20\n  char *ptr; // ST08_8@20\n  char *v22; // rax@20\n\n  v2 = s;\n  v3 = dcgettext(0LL, s2, 5);\n  LODWORD(v4) = sub_418B40(0LL);\n  v5 = v4;\n  if ( !sub_418A20(v4, \"UTF-8\") )\n  {\n    if ( s )\n    {\n      v6 = s;\n      v7 = s;\n      v8 = 0LL;\n    }\n    else\n    {\n      v6 = 0LL;\n      v7 = s2;\n      v8 = 0LL;\n    }\nLABEL_4:\n    if ( !strcmp(v3, s2) )\n      return v7;\n    v9 = 0LL;\n    if ( (unsigned __int8)sub_405C20(v3, (__int64)s2) )\n      goto LABEL_10;\n    goto LABEL_6;\n  }\n  LODWORD(v15) = sub_409440(s, \"UTF-8\", v5);\n  v7 = v15;\n  v16 = strlen(v5);\n  v17 = v16;\n  LODWORD(v18) = sub_409160(v16 + 11);\n  v19 = (char *)memcpy(v18, v5, v17);\n  v20 = &v19[v17];\n  *(_QWORD *)v20 = 5499825612410597167LL;\n  *((_WORD *)v20 + 4) = 21577;\n  v20[10] = 0;\n  ptr = v19;\n  LODWORD(v22) = sub_409440(s, \"UTF-8\", v19);\n  v8 = v22;\n  free(ptr);\n  if ( !v8 )\n  {\n    if ( v7 )\n      goto LABEL_23;\n    goto LABEL_32;\n  }\n  if ( strchr(v8, 63) )\n  {\n    free(v8);\n    if ( v7 )\n    {\nLABEL_23:\n      if ( !strcmp(v3, s2) )\n        return v7;\n      v6 = 0LL;\n      v8 = 0LL;\n      goto LABEL_25;\n    }\nLABEL_32:\n    v7 = s2;\n    v6 = 0LL;\n    v2 = 0LL;\n    v8 = 0LL;\n    goto LABEL_4;\n  }\n  if ( !v7 )\n  {\n    v6 = v8;\n    v2 = 0LL;\n    v7 = v8;\n    goto LABEL_4;\n  }\n  v6 = v8;\n  if ( strcmp(v3, s2) )\n  {\nLABEL_25:\n    if ( (unsigned __int8)sub_405C20(v3, (__int64)s2) )\n    {\n      v9 = v7;\n      goto LABEL_9;\n    }\n    v2 = v7;\n    v9 = v7;\nLABEL_6:\n    if ( (!v2 || !(unsigned __int8)sub_405C20(v3, (__int64)v2))\n      && (!v6 || !(unsigned __int8)sub_405C20(v3, (__int64)v6)) )\n    {\n      v11 = strlen(v3);\n      v12 = strlen(v7);\n      LODWORD(v13) = sub_409160(v11 + v12 + 4);\n      v14 = v13;\n      __sprintf_chk(v13, 1LL, -1LL, \"%s (%s)\", v3);\n      if ( v9 )\n        free(v9);\n      v7 = v14;\n      if ( !v8 )\n        return v7;\nLABEL_11:\n      free(v8);\n      return v7;\n    }\n    if ( !v9 )\n    {\nLABEL_10:\n      v7 = v3;\n      if ( !v8 )\n        return v7;\n      goto LABEL_11;\n    }\nLABEL_9:\n    free(v9);\n    goto LABEL_10;\n  }\n  if ( v7 != v8 )\n    free(v8);\n  return v7;\n}\n", 
            "funcStartAddr": "0x406550L", 
            "funcEndAddr": "0x4067d0L", 
            "funcName": "sub_406550"
        }, 
        {
            "decompiledFuncCode": "const char *__fastcall sub_4067D0(char *msgid, int a2)\n{\n  const char *v2; // rbx@1\n  __int64 v4; // rax@3\n  bool v5; // zf@9\n  signed __int64 v6; // rbx@23\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  LODWORD(v4) = sub_418B40(0LL);\n  if ( (*(_BYTE *)v4 & 0xDF) == 85 )\n  {\n    if ( (*(_BYTE *)(v4 + 1) & 0xDF) == 84\n      && (*(_BYTE *)(v4 + 2) & 0xDF) == 70\n      && *(_BYTE *)(v4 + 3) == 45\n      && *(_BYTE *)(v4 + 4) == 56\n      && !*(_BYTE *)(v4 + 5) )\n    {\n      v5 = *v2 == 96;\n      v2 = \"â\";\n      if ( !v5 )\n        v2 = \"â\";\n      return v2;\n    }\n  }\n  else if ( (*(_BYTE *)v4 & 0xDF) == 71\n         && (*(_BYTE *)(v4 + 1) & 0xDF) == 66\n         && *(_BYTE *)(v4 + 2) == 49\n         && *(_BYTE *)(v4 + 3) == 56\n         && *(_BYTE *)(v4 + 4) == 48\n         && *(_BYTE *)(v4 + 5) == 51\n         && *(_BYTE *)(v4 + 6) == 48\n         && !*(_BYTE *)(v4 + 7) )\n  {\n    v5 = *v2 == 96;\n    v2 = \"¡\\ae\";\n    if ( !v5 )\n      v2 = \"¡¯\";\n    return v2;\n  }\n  v6 = 4308581LL;\n  if ( a2 != 9 )\n    v6 = 4310336LL;\n  return (const char *)v6;\n}\n", 
            "funcStartAddr": "0x4067d0L", 
            "funcEndAddr": "0x4068c2L", 
            "funcName": "sub_4067D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4068D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15@1\n  unsigned __int64 v10; // r14@1\n  int v11; // er13@1\n  int v12; // ebp@1\n  unsigned __int64 v13; // rdx@1\n  unsigned __int64 v14; // r11@1\n  int v15; // er10@2\n  unsigned __int64 v16; // rbx@2\n  unsigned __int64 v17; // r9@3\n  __int64 v18; // r12@3\n  int v19; // er11@3\n  char *v20; // r8@7\n  int v21; // ST60_4@11\n  unsigned __int8 v22; // ST58_1@11\n  size_t v23; // rax@11\n  int v24; // ST68_4@13\n  unsigned __int64 v25; // ST60_8@13\n  unsigned __int8 v26; // ST58_1@13\n  int v27; // eax@13\n  unsigned __int64 v28; // rbp@15\n  bool v29; // al@17\n  int v30; // eax@23\n  int v31; // eax@29\n  char v32; // di@42\n  const unsigned __int16 **v33; // rax@50\n  char v34; // cl@65\n  unsigned __int64 result; // rax@71\n  signed __int64 v36; // rcx@90\n  int v37; // ST60_4@99\n  unsigned __int64 v38; // ST58_8@99\n  unsigned __int8 v39; // ST50_1@99\n  unsigned __int64 v40; // rdi@99\n  unsigned __int8 v41; // al@122\n  unsigned __int8 v42; // al@124\n  int v43; // er13@131\n  bool v44; // dl@131\n  bool v45; // dl@133\n  bool v46; // al@136\n  int v47; // ST60_4@146\n  char v48; // ST58_1@146\n  char *v49; // ST50_8@146\n  size_t v50; // rax@146\n  const unsigned __int16 **v51; // rbx@147\n  char *v52; // r15@151\n  const unsigned __int16 **v53; // r14@151\n  char *v54; // rax@157\n  int v55; // esi@173\n  unsigned __int64 v56; // rcx@173\n  unsigned __int8 v57; // di@173\n  const char *v58; // rax@218\n  unsigned __int64 v59; // ST30_8@220\n  size_t v60; // rax@220\n  signed __int64 v61; // rsi@246\n  char *v62; // rsi@258\n  char *v63; // rcx@258\n  char i; // al@265\n  char v65; // dl@276\n  char *v66; // rax@277\n  unsigned __int64 v67; // [sp+8h] [bp-C0h]@1\n  char v68; // [sp+8h] [bp-C0h]@2\n  unsigned __int8 v69; // [sp+10h] [bp-B8h]@7\n  char v70; // [sp+1Fh] [bp-A9h]@2\n  char *s; // [sp+20h] [bp-A8h]@1\n  unsigned __int64 n; // [sp+28h] [bp-A0h]@2\n  char *v73; // [sp+30h] [bp-98h]@13\n  unsigned __int64 v74; // [sp+30h] [bp-98h]@147\n  int v75; // [sp+38h] [bp-90h]@147\n  _BYTE *v76; // [sp+40h] [bp-88h]@147\n  unsigned __int64 v77; // [sp+48h] [bp-80h]@147\n  char *s2; // [sp+50h] [bp-78h]@2\n  __int64 v79; // [sp+58h] [bp-70h]@2\n  size_t v80; // [sp+60h] [bp-68h]@1\n  char v81; // [sp+68h] [bp-60h]@1\n  bool v82; // [sp+6Ch] [bp-5Ch]@1\n  char v83; // [sp+6Dh] [bp-5Bh]@2\n  unsigned __int8 v84; // [sp+6Eh] [bp-5Ah]@147\n  unsigned __int64 v85; // [sp+70h] [bp-58h]@147\n  char *v86; // [sp+78h] [bp-50h]@147\n  wint_t wc; // [sp+84h] [bp-44h]@148\n  mbstate_t ps; // [sp+88h] [bp-40h]@145\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v67 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v67;\n  switch ( v11 )\n  {\n    case 1:\n      goto LABEL_2;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v68 = 1;\n      goto LABEL_211;\n    case 5:\n      if ( v12 )\n      {\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v70 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v70 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v68 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4067D0(\"`\", v11);\n        v58 = sub_4067D0(\"'\", v11);\n        v14 = v67;\n        a9 = (char *)v58;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v59 = v14;\n      v60 = strlen(a9);\n      v70 = 1;\n      v15 = 0;\n      v14 = v59;\n      n = v60;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v68 = 1;\n      goto LABEL_3;\n    case 0:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v68 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 6:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v68 = 1;\n      n = 1LL;\n      s2 = \".%s \\\"\" + 4;\n      goto LABEL_3;\n    case 7:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v68 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 3:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v68 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 2:\n      if ( v12 )\n      {\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      else\n      {\n        v68 = 0;\nLABEL_211:\n        if ( a2 )\n        {\n          v15 = 0;\n          v46 = 0;\n          v70 = 1;\n          v79 = 0LL;\n          goto LABEL_138;\n        }\n        v70 = 1;\n        v15 = 0;\n        v16 = 1LL;\n        v11 = 2;\n        v79 = 0LL;\n        v83 = 0;\n        v82 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v43 = v19;\n          v14 = v17;\n          v44 = v43 == 2;\n          if ( !v16 && v44 && v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v45 = !v82 && v44;\n          if ( v45 )\n          {\n            if ( v83 )\n            {\n              if ( v70 )\n                return sub_4068D0((__int64)v9, v79, s);\n              v46 = v79 != 0 && v10 == 0;\n              if ( v46 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v82 = 0;\n                v83 = v46;\n                goto LABEL_3;\n              }\n              v45 = v83;\n            }\n          }\n          else\n          {\n            v45 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v45 )\n            {\n              v65 = *s2;\n              if ( *s2 )\n              {\n                v66 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v65;\n                  v65 = v66[++v16];\n                }\n                while ( v65 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v69 = v68 & (v19 != 2);\n        if ( !((unsigned __int8)v68 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v21 = v19;\n            v22 = v15;\n            v23 = strlen(s);\n            v19 = v21;\n            v15 = v22;\n            v20 = &s[v18];\n            v17 = v23;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v24 = v19;\n            v25 = v17;\n            v26 = v15;\n            v73 = v20;\n            v27 = memcmp(v20, s2, n);\n            v20 = v73;\n            v15 = v26;\n            v17 = v25;\n            v19 = v24;\n            if ( !v27 )\n            {\n              if ( v82 )\n                return sub_4068D0((__int64)v9, v10, s);\n              LOBYTE(v28) = *v73;\n              switch ( *v73 )\n              {\n                case 123:\n                case 125:\n                  goto LABEL_17;\n                case 63:\n                  goto LABEL_58;\n                case 39:\n                  goto LABEL_62;\n                case 92:\n                  goto LABEL_65;\n                case 10:\n                  goto LABEL_68;\n                case 9:\n                  goto LABEL_72;\n                case 33:\n                case 34:\n                case 36:\n                case 38:\n                case 40:\n                case 41:\n                case 42:\n                case 59:\n                case 60:\n                case 61:\n                case 62:\n                case 91:\n                case 94:\n                case 96:\n                case 124:\n                  goto LABEL_74;\n                case 13:\n                  goto LABEL_76;\n                case 12:\n                  goto LABEL_77;\n                case 11:\n                  goto LABEL_80;\n                case 0:\n                  goto LABEL_83;\n                default:\n                  goto LABEL_98;\n                case 37:\n                case 43:\n                case 44:\n                case 45:\n                case 46:\n                case 47:\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                case 58:\n                case 65:\n                case 66:\n                case 67:\n                case 68:\n                case 69:\n                case 70:\n                case 71:\n                case 72:\n                case 73:\n                case 74:\n                case 75:\n                case 76:\n                case 77:\n                case 78:\n                case 79:\n                case 80:\n                case 81:\n                case 82:\n                case 83:\n                case 84:\n                case 85:\n                case 86:\n                case 87:\n                case 88:\n                case 89:\n                case 90:\n                case 93:\n                case 95:\n                case 97:\n                case 98:\n                case 99:\n                case 100:\n                case 101:\n                case 102:\n                case 103:\n                case 104:\n                case 105:\n                case 106:\n                case 107:\n                case 108:\n                case 109:\n                case 110:\n                case 111:\n                case 112:\n                case 113:\n                case 114:\n                case 115:\n                case 116:\n                case 117:\n                case 118:\n                case 119:\n                case 120:\n                case 121:\n                case 122:\n                  v41 = v69;\n                  goto LABEL_123;\n                case 35:\n                case 126:\n                  v42 = v69;\n                  goto LABEL_125;\n                case 32:\n                  v41 = v69;\n                  goto LABEL_128;\n                case 8:\n                  LODWORD(v13) = 0;\n                  v11 = 0;\n                  LOBYTE(v28) = 98;\n                  goto LABEL_29;\n                case 7:\n                  LOBYTE(v28) = 97;\n                  break;\n              }\nLABEL_79:\n              v11 = 0;\n              goto LABEL_37;\n            }\n          }\n        }\n        LOBYTE(v28) = *v20;\n        switch ( *v20 )\n        {\n          case 123:\n          case 125:\n            v69 = 0;\n            goto LABEL_17;\n          case 63:\n            v69 = 0;\n            goto LABEL_58;\n          case 39:\n            v69 = 0;\n            goto LABEL_62;\n          case 92:\n            v69 = 0;\n            goto LABEL_65;\n          case 10:\nLABEL_68:\n            LOBYTE(v28) = 110;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v28) = 116;\n            goto LABEL_69;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v69 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 13:\n            v69 = 0;\nLABEL_76:\n            LOBYTE(v28) = 13;\n            v34 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 12:\nLABEL_77:\n            LOBYTE(v28) = 102;\n            goto LABEL_78;\n          case 11:\nLABEL_80:\n            LOBYTE(v28) = 118;\n            goto LABEL_78;\n          case 0:\n            goto LABEL_81;\n          default:\n            v69 = 0;\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v41 = 0;\n            goto LABEL_123;\n          case 35:\n          case 126:\n            v42 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v69;\n              LODWORD(v13) = 0;\n              v69 = v42;\n              goto LABEL_23;\n            }\n            v69 = v42;\n            v11 = 0;\n            break;\n          case 32:\n            v41 = 0;\nLABEL_128:\n            LOBYTE(v28) = 32;\nLABEL_123:\n            v11 = v69;\n            v69 = v41;\n            v30 = 0;\n            goto LABEL_25;\n          case 8:\n            LOBYTE(v28) = 98;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 7:\n            LOBYTE(v28) = 97;\nLABEL_78:\n            if ( !v82 )\n              goto LABEL_79;\n            return sub_4068D0((__int64)v9, v10, s);\n        }\nLABEL_24:\n        v30 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v28 >> 5)) >> v28) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_29:\n            v31 = v15 ^ 1;\n            LOBYTE(v31) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & (unsigned __int8)(v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v31;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v69 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v33) = v15 & (v30 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v33 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v28;\n        v32 = v70;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v32 = 0;\n        v70 = v32;\n      }\n      LOBYTE(v28) = *v20;\n      switch ( *v20 )\n      {\n        case 123:\n        case 125:\nLABEL_17:\n          v29 = v17 != 1;\n          if ( v17 == -1LL )\n            v29 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( !v29 )\n            goto LABEL_20;\n          goto LABEL_67;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            v11 = 0;\n            v30 = 0;\n            LOBYTE(v28) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v28) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v28 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v28 > 0x3Eu)\n            || (v61 = 8070630310989004800LL, !_bittest64(&v61, v28)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v28) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v28) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            if ( v10 <= v16 + 2 )\n            {\n              v13 = v10;\n              v10 = v79;\n            }\n            else\n            {\n              v13 = v10;\n              v9[v16 + 2] = 39;\n              v10 = v79;\n            }\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v30 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v28) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v37 = v19;\n            v38 = v17;\n            v39 = v15;\n            v33 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v28;\n            v15 = v39;\n            v17 = v38;\n            v19 = v37;\n            v40 = 1LL;\n            LODWORD(v33) = (*v33)[(unsigned __int8)v28];\n            LOWORD(v33) = (unsigned __int16)v33 & 0x4000;\n            LOBYTE(v11) = (_WORD)v33 != 0;\n            LOBYTE(v13) = v68 & ((_WORD)v33 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v47 = v19;\n            v48 = v15;\n            v49 = v20;\n            v50 = strlen(s);\n            v19 = v47;\n            LOBYTE(v15) = v48;\n            v20 = v49;\n            v17 = v50;\n          }\n          v85 = v16;\n          v86 = v20;\n          v51 = 0LL;\n          v84 = v15;\n          v76 = v9;\n          v77 = v10;\n          v74 = v17;\n          v75 = v19;\n          break;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 10:\n          LOBYTE(v28) = 10;\n          v34 = 110;\n          goto LABEL_104;\n        case 9:\n          LOBYTE(v28) = 9;\n          v34 = 116;\n          goto LABEL_104;\n        case 8:\n          LOBYTE(v28) = 8;\n          v34 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 7:\n          LOBYTE(v28) = 7;\n          v34 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 0:\n          if ( !v68 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v69 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v28) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v69 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v30 = v15 ^ 1;\n          LOBYTE(v30) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v30 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v36 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v30;\n              v11 = 0;\n              LOBYTE(v28) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v36 = v16;\n          if ( v10 > v16 )\n          {\n            v30 = v15;\nLABEL_91:\n            v9[v36] = 92;\n            v15 = v30;\n          }\n          v16 = v36 + 1;\n          if ( v19 == 2 )\n          {\n            v30 = v11;\n            LOBYTE(v28) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v28) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v36 + 2 )\n              v9[v36 + 2] = 48;\n            v16 = v36 + 3;\n            LOBYTE(v28) = 48;\n          }\nLABEL_95:\n          v30 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | (unsigned __int8)(v68 ^ 1) )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v33) = v15;\n            v11 = 0;\n            LOBYTE(v28) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = (unsigned __int8)v68;\n          LOBYTE(v28) = 92;\n          v34 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v68;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v33) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v68 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v28) = v34;\n          v11 = 0;\n          goto LABEL_28;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\nLABEL_20:\n          if ( !v18 )\n            goto LABEL_21;\n          goto LABEL_67;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 32:\n          LOBYTE(v28) = 32;\n          LOBYTE(v13) = v19 == 2;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4068D0((__int64)v9, v10, s);\n        case 13:\n          LOBYTE(v28) = 13;\n          v34 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v69 = v19 == 2 && v82;\n          if ( v69 )\n            return sub_4068D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v28) = 12;\n          v34 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 11:\n          LOBYTE(v28) = 11;\n          v34 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n      }\n      while ( 2 )\n      {\n        v52 = (char *)v51 + v18;\n        v33 = (const unsigned __int16 **)sub_40AB50((wchar_t *)&wc, (char *)v51 + v18 + (_QWORD)s);\n        v53 = v33;\n        if ( !v33 )\n        {\nLABEL_240:\n          v40 = (unsigned __int64)v51;\n          v16 = v85;\n          v15 = v84;\n          v9 = v76;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v74;\n          v19 = v75;\n          LOBYTE(v13) = v68 & (v11 ^ 1);\n          goto LABEL_241;\n        }\n        if ( v33 == (const unsigned __int16 **)-1 )\n        {\n          v40 = (unsigned __int64)v51;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v76;\n          v10 = v77;\n          v17 = v74;\n          v19 = v75;\n          LODWORD(v13) = (unsigned __int8)v68;\n          goto LABEL_241;\n        }\n        if ( v33 == (const unsigned __int16 **)-2 )\n        {\n          v17 = v74;\n          v62 = (char *)v51 + v18;\n          v63 = (char *)v51 + v18 + (_QWORD)s;\n          v33 = v51;\n          v40 = (unsigned __int64)v51;\n          v15 = v84;\n          v16 = v85;\n          v9 = v76;\n          v10 = v77;\n          v19 = v75;\n          if ( (unsigned __int64)v62 < v74 && *v63 )\n          {\n            do\n              v33 = (const unsigned __int16 **)((char *)v33 + 1);\n            while ( (unsigned __int64)v33 + v18 < v74 && *((_BYTE *)v33 + (_QWORD)v86) );\n            v40 = (unsigned __int64)v33;\n          }\n          LODWORD(v13) = (unsigned __int8)v68;\n          v11 = 0;\nLABEL_241:\n          if ( v40 > 1 )\n            goto LABEL_173;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = (unsigned __int8)v68;\n            LOBYTE(v11) = 0;\nLABEL_173:\n            v55 = 0;\n            v56 = v18 + v40;\n            v57 = v69;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4068D0((__int64)v9, v10, s);\n                LOBYTE(v33) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v33 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (signed int)v33;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v28 >> 6) + 48;\n                LODWORD(v33) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v33) = (((unsigned __int8)v28 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v33;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v28) = (v28 & 7) + 48;\n                if ( v18 >= v56 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v55 = v13;\n              }\n              else\n              {\n                LODWORD(v33) = v15 & (v55 ^ 1);\n                if ( v57 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v56 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v33 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v33) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v57 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v57 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v28;\n              LOBYTE(v28) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v30 = (v13 | (unsigned __int8)v68 ^ 1) ^ 1;\n          LOBYTE(v30) = v82 | (v13 | v68 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)((v13 | v68 ^ 1) ^ 1)) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v75 != 2 || !v82 || v33 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v51 = (const unsigned __int16 **)((char *)v51 + (_QWORD)v53);\n          LODWORD(v33) = mbsinit(&ps);\n          if ( (_DWORD)v33 )\n            goto LABEL_240;\n          continue;\n        }\n        break;\n      }\n      v54 = &v52[(_QWORD)s + 1];\n      while ( (unsigned __int8)(*v54 - 91) > 0x21u || !((1LL << (*v54 - 91)) & 0x20000002BLL) )\n      {\n        if ( &v52[(unsigned int)&s[(_QWORD)v53]] == ++v54 )\n          goto LABEL_148;\n      }\n      v9 = v76;\n      v10 = v77;\n      return sub_4068D0((__int64)v9, v10, s);\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_4068D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15@1\n  unsigned __int64 v10; // r14@1\n  int v11; // er13@1\n  int v12; // ebp@1\n  unsigned __int64 v13; // rdx@1\n  unsigned __int64 v14; // r11@1\n  int v15; // er10@2\n  unsigned __int64 v16; // rbx@2\n  unsigned __int64 v17; // r9@3\n  __int64 v18; // r12@3\n  int v19; // er11@3\n  char *v20; // r8@7\n  int v21; // ST60_4@11\n  unsigned __int8 v22; // ST58_1@11\n  size_t v23; // rax@11\n  int v24; // ST68_4@13\n  unsigned __int64 v25; // ST60_8@13\n  unsigned __int8 v26; // ST58_1@13\n  int v27; // eax@13\n  unsigned __int64 v28; // rbp@15\n  bool v29; // al@17\n  int v30; // eax@23\n  int v31; // eax@29\n  char v32; // di@42\n  const unsigned __int16 **v33; // rax@50\n  char v34; // cl@65\n  unsigned __int64 result; // rax@71\n  signed __int64 v36; // rcx@90\n  int v37; // ST60_4@99\n  unsigned __int64 v38; // ST58_8@99\n  unsigned __int8 v39; // ST50_1@99\n  unsigned __int64 v40; // rdi@99\n  unsigned __int8 v41; // al@122\n  unsigned __int8 v42; // al@124\n  int v43; // er13@131\n  bool v44; // dl@131\n  bool v45; // dl@133\n  bool v46; // al@136\n  int v47; // ST60_4@146\n  char v48; // ST58_1@146\n  char *v49; // ST50_8@146\n  size_t v50; // rax@146\n  const unsigned __int16 **v51; // rbx@147\n  char *v52; // r15@151\n  const unsigned __int16 **v53; // r14@151\n  char *v54; // rax@157\n  int v55; // esi@173\n  unsigned __int64 v56; // rcx@173\n  unsigned __int8 v57; // di@173\n  const char *v58; // rax@218\n  unsigned __int64 v59; // ST30_8@220\n  size_t v60; // rax@220\n  signed __int64 v61; // rsi@246\n  char *v62; // rsi@258\n  char *v63; // rcx@258\n  char i; // al@265\n  char v65; // dl@276\n  char *v66; // rax@277\n  unsigned __int64 v67; // [sp+8h] [bp-C0h]@1\n  char v68; // [sp+8h] [bp-C0h]@2\n  unsigned __int8 v69; // [sp+10h] [bp-B8h]@7\n  char v70; // [sp+1Fh] [bp-A9h]@2\n  char *s; // [sp+20h] [bp-A8h]@1\n  unsigned __int64 n; // [sp+28h] [bp-A0h]@2\n  char *v73; // [sp+30h] [bp-98h]@13\n  unsigned __int64 v74; // [sp+30h] [bp-98h]@147\n  int v75; // [sp+38h] [bp-90h]@147\n  _BYTE *v76; // [sp+40h] [bp-88h]@147\n  unsigned __int64 v77; // [sp+48h] [bp-80h]@147\n  char *s2; // [sp+50h] [bp-78h]@2\n  __int64 v79; // [sp+58h] [bp-70h]@2\n  size_t v80; // [sp+60h] [bp-68h]@1\n  char v81; // [sp+68h] [bp-60h]@1\n  bool v82; // [sp+6Ch] [bp-5Ch]@1\n  char v83; // [sp+6Dh] [bp-5Bh]@2\n  unsigned __int8 v84; // [sp+6Eh] [bp-5Ah]@147\n  unsigned __int64 v85; // [sp+70h] [bp-58h]@147\n  char *v86; // [sp+78h] [bp-50h]@147\n  wint_t wc; // [sp+84h] [bp-44h]@148\n  mbstate_t ps; // [sp+88h] [bp-40h]@145\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v67 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v67;\n  switch ( v11 )\n  {\n    case 1:\n      goto LABEL_2;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v68 = 1;\n      goto LABEL_211;\n    case 5:\n      if ( v12 )\n      {\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v70 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v70 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v68 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4067D0(\"`\", v11);\n        v58 = sub_4067D0(\"'\", v11);\n        v14 = v67;\n        a9 = (char *)v58;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v59 = v14;\n      v60 = strlen(a9);\n      v70 = 1;\n      v15 = 0;\n      v14 = v59;\n      n = v60;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v68 = 1;\n      goto LABEL_3;\n    case 0:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v68 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 6:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v68 = 1;\n      n = 1LL;\n      s2 = \".%s \\\"\" + 4;\n      goto LABEL_3;\n    case 7:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v68 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 3:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v68 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 2:\n      if ( v12 )\n      {\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      else\n      {\n        v68 = 0;\nLABEL_211:\n        if ( a2 )\n        {\n          v15 = 0;\n          v46 = 0;\n          v70 = 1;\n          v79 = 0LL;\n          goto LABEL_138;\n        }\n        v70 = 1;\n        v15 = 0;\n        v16 = 1LL;\n        v11 = 2;\n        v79 = 0LL;\n        v83 = 0;\n        v82 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v43 = v19;\n          v14 = v17;\n          v44 = v43 == 2;\n          if ( !v16 && v44 && v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v45 = !v82 && v44;\n          if ( v45 )\n          {\n            if ( v83 )\n            {\n              if ( v70 )\n                return sub_4068D0((__int64)v9, v79, s);\n              v46 = v79 != 0 && v10 == 0;\n              if ( v46 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v82 = 0;\n                v83 = v46;\n                goto LABEL_3;\n              }\n              v45 = v83;\n            }\n          }\n          else\n          {\n            v45 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v45 )\n            {\n              v65 = *s2;\n              if ( *s2 )\n              {\n                v66 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v65;\n                  v65 = v66[++v16];\n                }\n                while ( v65 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v69 = v68 & (v19 != 2);\n        if ( !((unsigned __int8)v68 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v21 = v19;\n            v22 = v15;\n            v23 = strlen(s);\n            v19 = v21;\n            v15 = v22;\n            v20 = &s[v18];\n            v17 = v23;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v24 = v19;\n            v25 = v17;\n            v26 = v15;\n            v73 = v20;\n            v27 = memcmp(v20, s2, n);\n            v20 = v73;\n            v15 = v26;\n            v17 = v25;\n            v19 = v24;\n            if ( !v27 )\n            {\n              if ( v82 )\n                return sub_4068D0((__int64)v9, v10, s);\n              LOBYTE(v28) = *v73;\n              switch ( *v73 )\n              {\n                case 123:\n                case 125:\n                  goto LABEL_17;\n                case 63:\n                  goto LABEL_58;\n                case 39:\n                  goto LABEL_62;\n                case 92:\n                  goto LABEL_65;\n                case 10:\n                  goto LABEL_68;\n                case 9:\n                  goto LABEL_72;\n                case 33:\n                case 34:\n                case 36:\n                case 38:\n                case 40:\n                case 41:\n                case 42:\n                case 59:\n                case 60:\n                case 61:\n                case 62:\n                case 91:\n                case 94:\n                case 96:\n                case 124:\n                  goto LABEL_74;\n                case 13:\n                  goto LABEL_76;\n                case 12:\n                  goto LABEL_77;\n                case 11:\n                  goto LABEL_80;\n                case 0:\n                  goto LABEL_83;\n                default:\n                  goto LABEL_98;\n                case 37:\n                case 43:\n                case 44:\n                case 45:\n                case 46:\n                case 47:\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                case 58:\n                case 65:\n                case 66:\n                case 67:\n                case 68:\n                case 69:\n                case 70:\n                case 71:\n                case 72:\n                case 73:\n                case 74:\n                case 75:\n                case 76:\n                case 77:\n                case 78:\n                case 79:\n                case 80:\n                case 81:\n                case 82:\n                case 83:\n                case 84:\n                case 85:\n                case 86:\n                case 87:\n                case 88:\n                case 89:\n                case 90:\n                case 93:\n                case 95:\n                case 97:\n                case 98:\n                case 99:\n                case 100:\n                case 101:\n                case 102:\n                case 103:\n                case 104:\n                case 105:\n                case 106:\n                case 107:\n                case 108:\n                case 109:\n                case 110:\n                case 111:\n                case 112:\n                case 113:\n                case 114:\n                case 115:\n                case 116:\n                case 117:\n                case 118:\n                case 119:\n                case 120:\n                case 121:\n                case 122:\n                  v41 = v69;\n                  goto LABEL_123;\n                case 35:\n                case 126:\n                  v42 = v69;\n                  goto LABEL_125;\n                case 32:\n                  v41 = v69;\n                  goto LABEL_128;\n                case 8:\n                  LODWORD(v13) = 0;\n                  v11 = 0;\n                  LOBYTE(v28) = 98;\n                  goto LABEL_29;\n                case 7:\n                  LOBYTE(v28) = 97;\n                  break;\n              }\nLABEL_79:\n              v11 = 0;\n              goto LABEL_37;\n            }\n          }\n        }\n        LOBYTE(v28) = *v20;\n        switch ( *v20 )\n        {\n          case 123:\n          case 125:\n            v69 = 0;\n            goto LABEL_17;\n          case 63:\n            v69 = 0;\n            goto LABEL_58;\n          case 39:\n            v69 = 0;\n            goto LABEL_62;\n          case 92:\n            v69 = 0;\n            goto LABEL_65;\n          case 10:\nLABEL_68:\n            LOBYTE(v28) = 110;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v28) = 116;\n            goto LABEL_69;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v69 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 13:\n            v69 = 0;\nLABEL_76:\n            LOBYTE(v28) = 13;\n            v34 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 12:\nLABEL_77:\n            LOBYTE(v28) = 102;\n            goto LABEL_78;\n          case 11:\nLABEL_80:\n            LOBYTE(v28) = 118;\n            goto LABEL_78;\n          case 0:\n            goto LABEL_81;\n          default:\n            v69 = 0;\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v41 = 0;\n            goto LABEL_123;\n          case 35:\n          case 126:\n            v42 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v69;\n              LODWORD(v13) = 0;\n              v69 = v42;\n              goto LABEL_23;\n            }\n            v69 = v42;\n            v11 = 0;\n            break;\n          case 32:\n            v41 = 0;\nLABEL_128:\n            LOBYTE(v28) = 32;\nLABEL_123:\n            v11 = v69;\n            v69 = v41;\n            v30 = 0;\n            goto LABEL_25;\n          case 8:\n            LOBYTE(v28) = 98;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 7:\n            LOBYTE(v28) = 97;\nLABEL_78:\n            if ( !v82 )\n              goto LABEL_79;\n            return sub_4068D0((__int64)v9, v10, s);\n        }\nLABEL_24:\n        v30 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v28 >> 5)) >> v28) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_29:\n            v31 = v15 ^ 1;\n            LOBYTE(v31) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & (unsigned __int8)(v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v31;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v69 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v33) = v15 & (v30 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v33 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v28;\n        v32 = v70;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v32 = 0;\n        v70 = v32;\n      }\n      LOBYTE(v28) = *v20;\n      switch ( *v20 )\n      {\n        case 123:\n        case 125:\nLABEL_17:\n          v29 = v17 != 1;\n          if ( v17 == -1LL )\n            v29 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( !v29 )\n            goto LABEL_20;\n          goto LABEL_67;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            v11 = 0;\n            v30 = 0;\n            LOBYTE(v28) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v28) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v28 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v28 > 0x3Eu)\n            || (v61 = 8070630310989004800LL, !_bittest64(&v61, v28)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v28) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v28) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            if ( v10 <= v16 + 2 )\n            {\n              v13 = v10;\n              v10 = v79;\n            }\n            else\n            {\n              v13 = v10;\n              v9[v16 + 2] = 39;\n              v10 = v79;\n            }\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v30 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v28) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v37 = v19;\n            v38 = v17;\n            v39 = v15;\n            v33 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v28;\n            v15 = v39;\n            v17 = v38;\n            v19 = v37;\n            v40 = 1LL;\n            LODWORD(v33) = (*v33)[(unsigned __int8)v28];\n            LOWORD(v33) = (unsigned __int16)v33 & 0x4000;\n            LOBYTE(v11) = (_WORD)v33 != 0;\n            LOBYTE(v13) = v68 & ((_WORD)v33 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v47 = v19;\n            v48 = v15;\n            v49 = v20;\n            v50 = strlen(s);\n            v19 = v47;\n            LOBYTE(v15) = v48;\n            v20 = v49;\n            v17 = v50;\n          }\n          v85 = v16;\n          v86 = v20;\n          v51 = 0LL;\n          v84 = v15;\n          v76 = v9;\n          v77 = v10;\n          v74 = v17;\n          v75 = v19;\n          break;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 10:\n          LOBYTE(v28) = 10;\n          v34 = 110;\n          goto LABEL_104;\n        case 9:\n          LOBYTE(v28) = 9;\n          v34 = 116;\n          goto LABEL_104;\n        case 8:\n          LOBYTE(v28) = 8;\n          v34 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 7:\n          LOBYTE(v28) = 7;\n          v34 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 0:\n          if ( !v68 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v69 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v28) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v69 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v30 = v15 ^ 1;\n          LOBYTE(v30) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v30 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v36 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v30;\n              v11 = 0;\n              LOBYTE(v28) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v36 = v16;\n          if ( v10 > v16 )\n          {\n            v30 = v15;\nLABEL_91:\n            v9[v36] = 92;\n            v15 = v30;\n          }\n          v16 = v36 + 1;\n          if ( v19 == 2 )\n          {\n            v30 = v11;\n            LOBYTE(v28) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v28) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v36 + 2 )\n              v9[v36 + 2] = 48;\n            v16 = v36 + 3;\n            LOBYTE(v28) = 48;\n          }\nLABEL_95:\n          v30 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | (unsigned __int8)(v68 ^ 1) )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v33) = v15;\n            v11 = 0;\n            LOBYTE(v28) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = (unsigned __int8)v68;\n          LOBYTE(v28) = 92;\n          v34 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v68;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v33) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v68 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v28) = v34;\n          v11 = 0;\n          goto LABEL_28;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\nLABEL_20:\n          if ( !v18 )\n            goto LABEL_21;\n          goto LABEL_67;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 32:\n          LOBYTE(v28) = 32;\n          LOBYTE(v13) = v19 == 2;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4068D0((__int64)v9, v10, s);\n        case 13:\n          LOBYTE(v28) = 13;\n          v34 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v69 = v19 == 2 && v82;\n          if ( v69 )\n            return sub_4068D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v28) = 12;\n          v34 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 11:\n          LOBYTE(v28) = 11;\n          v34 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n      }\n      while ( 2 )\n      {\n        v52 = (char *)v51 + v18;\n        v33 = (const unsigned __int16 **)sub_40AB50((wchar_t *)&wc, (char *)v51 + v18 + (_QWORD)s);\n        v53 = v33;\n        if ( !v33 )\n        {\nLABEL_240:\n          v40 = (unsigned __int64)v51;\n          v16 = v85;\n          v15 = v84;\n          v9 = v76;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v74;\n          v19 = v75;\n          LOBYTE(v13) = v68 & (v11 ^ 1);\n          goto LABEL_241;\n        }\n        if ( v33 == (const unsigned __int16 **)-1 )\n        {\n          v40 = (unsigned __int64)v51;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v76;\n          v10 = v77;\n          v17 = v74;\n          v19 = v75;\n          LODWORD(v13) = (unsigned __int8)v68;\n          goto LABEL_241;\n        }\n        if ( v33 == (const unsigned __int16 **)-2 )\n        {\n          v17 = v74;\n          v62 = (char *)v51 + v18;\n          v63 = (char *)v51 + v18 + (_QWORD)s;\n          v33 = v51;\n          v40 = (unsigned __int64)v51;\n          v15 = v84;\n          v16 = v85;\n          v9 = v76;\n          v10 = v77;\n          v19 = v75;\n          if ( (unsigned __int64)v62 < v74 && *v63 )\n          {\n            do\n              v33 = (const unsigned __int16 **)((char *)v33 + 1);\n            while ( (unsigned __int64)v33 + v18 < v74 && *((_BYTE *)v33 + (_QWORD)v86) );\n            v40 = (unsigned __int64)v33;\n          }\n          LODWORD(v13) = (unsigned __int8)v68;\n          v11 = 0;\nLABEL_241:\n          if ( v40 > 1 )\n            goto LABEL_173;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = (unsigned __int8)v68;\n            LOBYTE(v11) = 0;\nLABEL_173:\n            v55 = 0;\n            v56 = v18 + v40;\n            v57 = v69;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4068D0((__int64)v9, v10, s);\n                LOBYTE(v33) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v33 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (signed int)v33;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v28 >> 6) + 48;\n                LODWORD(v33) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v33) = (((unsigned __int8)v28 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v33;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v28) = (v28 & 7) + 48;\n                if ( v18 >= v56 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v55 = v13;\n              }\n              else\n              {\n                LODWORD(v33) = v15 & (v55 ^ 1);\n                if ( v57 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v56 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v33 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v33) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v57 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v57 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v28;\n              LOBYTE(v28) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v30 = (v13 | (unsigned __int8)v68 ^ 1) ^ 1;\n          LOBYTE(v30) = v82 | (v13 | v68 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)((v13 | v68 ^ 1) ^ 1)) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v75 != 2 || !v82 || v33 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v51 = (const unsigned __int16 **)((char *)v51 + (_QWORD)v53);\n          LODWORD(v33) = mbsinit(&ps);\n          if ( (_DWORD)v33 )\n            goto LABEL_240;\n          continue;\n        }\n        break;\n      }\n      v54 = &v52[(_QWORD)s + 1];\n      while ( (unsigned __int8)(*v54 - 91) > 0x21u || !((1LL << (*v54 - 91)) & 0x20000002BLL) )\n      {\n        if ( &v52[(unsigned int)&s[(_QWORD)v53]] == ++v54 )\n          goto LABEL_148;\n      }\n      v9 = v76;\n      v10 = v77;\n      return sub_4068D0((__int64)v9, v10, s);\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401fd5L", 
            "funcEndAddr": "0x401fdaL", 
            "funcName": "sub_4068D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4068D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15@1\n  unsigned __int64 v10; // r14@1\n  int v11; // er13@1\n  int v12; // ebp@1\n  unsigned __int64 v13; // rdx@1\n  unsigned __int64 v14; // r11@1\n  int v15; // er10@2\n  unsigned __int64 v16; // rbx@2\n  unsigned __int64 v17; // r9@3\n  __int64 v18; // r12@3\n  int v19; // er11@3\n  char *v20; // r8@7\n  int v21; // ST60_4@11\n  unsigned __int8 v22; // ST58_1@11\n  size_t v23; // rax@11\n  int v24; // ST68_4@13\n  unsigned __int64 v25; // ST60_8@13\n  unsigned __int8 v26; // ST58_1@13\n  int v27; // eax@13\n  unsigned __int64 v28; // rbp@15\n  bool v29; // al@17\n  int v30; // eax@23\n  int v31; // eax@29\n  char v32; // di@42\n  const unsigned __int16 **v33; // rax@50\n  char v34; // cl@65\n  unsigned __int64 result; // rax@71\n  signed __int64 v36; // rcx@90\n  int v37; // ST60_4@99\n  unsigned __int64 v38; // ST58_8@99\n  unsigned __int8 v39; // ST50_1@99\n  unsigned __int64 v40; // rdi@99\n  unsigned __int8 v41; // al@122\n  unsigned __int8 v42; // al@124\n  int v43; // er13@131\n  bool v44; // dl@131\n  bool v45; // dl@133\n  bool v46; // al@136\n  int v47; // ST60_4@146\n  char v48; // ST58_1@146\n  char *v49; // ST50_8@146\n  size_t v50; // rax@146\n  const unsigned __int16 **v51; // rbx@147\n  char *v52; // r15@151\n  const unsigned __int16 **v53; // r14@151\n  char *v54; // rax@157\n  int v55; // esi@173\n  unsigned __int64 v56; // rcx@173\n  unsigned __int8 v57; // di@173\n  const char *v58; // rax@218\n  unsigned __int64 v59; // ST30_8@220\n  size_t v60; // rax@220\n  signed __int64 v61; // rsi@246\n  char *v62; // rsi@258\n  char *v63; // rcx@258\n  char i; // al@265\n  char v65; // dl@276\n  char *v66; // rax@277\n  unsigned __int64 v67; // [sp+8h] [bp-C0h]@1\n  char v68; // [sp+8h] [bp-C0h]@2\n  unsigned __int8 v69; // [sp+10h] [bp-B8h]@7\n  char v70; // [sp+1Fh] [bp-A9h]@2\n  char *s; // [sp+20h] [bp-A8h]@1\n  unsigned __int64 n; // [sp+28h] [bp-A0h]@2\n  char *v73; // [sp+30h] [bp-98h]@13\n  unsigned __int64 v74; // [sp+30h] [bp-98h]@147\n  int v75; // [sp+38h] [bp-90h]@147\n  _BYTE *v76; // [sp+40h] [bp-88h]@147\n  unsigned __int64 v77; // [sp+48h] [bp-80h]@147\n  char *s2; // [sp+50h] [bp-78h]@2\n  __int64 v79; // [sp+58h] [bp-70h]@2\n  size_t v80; // [sp+60h] [bp-68h]@1\n  char v81; // [sp+68h] [bp-60h]@1\n  bool v82; // [sp+6Ch] [bp-5Ch]@1\n  char v83; // [sp+6Dh] [bp-5Bh]@2\n  unsigned __int8 v84; // [sp+6Eh] [bp-5Ah]@147\n  unsigned __int64 v85; // [sp+70h] [bp-58h]@147\n  char *v86; // [sp+78h] [bp-50h]@147\n  wint_t wc; // [sp+84h] [bp-44h]@148\n  mbstate_t ps; // [sp+88h] [bp-40h]@145\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v67 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v67;\n  switch ( v11 )\n  {\n    case 1:\n      goto LABEL_2;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v68 = 1;\n      goto LABEL_211;\n    case 5:\n      if ( v12 )\n      {\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v70 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v70 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v68 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4067D0(\"`\", v11);\n        v58 = sub_4067D0(\"'\", v11);\n        v14 = v67;\n        a9 = (char *)v58;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v59 = v14;\n      v60 = strlen(a9);\n      v70 = 1;\n      v15 = 0;\n      v14 = v59;\n      n = v60;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v68 = 1;\n      goto LABEL_3;\n    case 0:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v68 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 6:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v68 = 1;\n      n = 1LL;\n      s2 = \".%s \\\"\" + 4;\n      goto LABEL_3;\n    case 7:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v68 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 3:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v68 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 2:\n      if ( v12 )\n      {\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      else\n      {\n        v68 = 0;\nLABEL_211:\n        if ( a2 )\n        {\n          v15 = 0;\n          v46 = 0;\n          v70 = 1;\n          v79 = 0LL;\n          goto LABEL_138;\n        }\n        v70 = 1;\n        v15 = 0;\n        v16 = 1LL;\n        v11 = 2;\n        v79 = 0LL;\n        v83 = 0;\n        v82 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v43 = v19;\n          v14 = v17;\n          v44 = v43 == 2;\n          if ( !v16 && v44 && v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v45 = !v82 && v44;\n          if ( v45 )\n          {\n            if ( v83 )\n            {\n              if ( v70 )\n                return sub_4068D0((__int64)v9, v79, s);\n              v46 = v79 != 0 && v10 == 0;\n              if ( v46 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v82 = 0;\n                v83 = v46;\n                goto LABEL_3;\n              }\n              v45 = v83;\n            }\n          }\n          else\n          {\n            v45 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v45 )\n            {\n              v65 = *s2;\n              if ( *s2 )\n              {\n                v66 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v65;\n                  v65 = v66[++v16];\n                }\n                while ( v65 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v69 = v68 & (v19 != 2);\n        if ( !((unsigned __int8)v68 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v21 = v19;\n            v22 = v15;\n            v23 = strlen(s);\n            v19 = v21;\n            v15 = v22;\n            v20 = &s[v18];\n            v17 = v23;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v24 = v19;\n            v25 = v17;\n            v26 = v15;\n            v73 = v20;\n            v27 = memcmp(v20, s2, n);\n            v20 = v73;\n            v15 = v26;\n            v17 = v25;\n            v19 = v24;\n            if ( !v27 )\n            {\n              if ( v82 )\n                return sub_4068D0((__int64)v9, v10, s);\n              LOBYTE(v28) = *v73;\n              switch ( *v73 )\n              {\n                case 123:\n                case 125:\n                  goto LABEL_17;\n                case 63:\n                  goto LABEL_58;\n                case 39:\n                  goto LABEL_62;\n                case 92:\n                  goto LABEL_65;\n                case 10:\n                  goto LABEL_68;\n                case 9:\n                  goto LABEL_72;\n                case 33:\n                case 34:\n                case 36:\n                case 38:\n                case 40:\n                case 41:\n                case 42:\n                case 59:\n                case 60:\n                case 61:\n                case 62:\n                case 91:\n                case 94:\n                case 96:\n                case 124:\n                  goto LABEL_74;\n                case 13:\n                  goto LABEL_76;\n                case 12:\n                  goto LABEL_77;\n                case 11:\n                  goto LABEL_80;\n                case 0:\n                  goto LABEL_83;\n                default:\n                  goto LABEL_98;\n                case 37:\n                case 43:\n                case 44:\n                case 45:\n                case 46:\n                case 47:\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                case 58:\n                case 65:\n                case 66:\n                case 67:\n                case 68:\n                case 69:\n                case 70:\n                case 71:\n                case 72:\n                case 73:\n                case 74:\n                case 75:\n                case 76:\n                case 77:\n                case 78:\n                case 79:\n                case 80:\n                case 81:\n                case 82:\n                case 83:\n                case 84:\n                case 85:\n                case 86:\n                case 87:\n                case 88:\n                case 89:\n                case 90:\n                case 93:\n                case 95:\n                case 97:\n                case 98:\n                case 99:\n                case 100:\n                case 101:\n                case 102:\n                case 103:\n                case 104:\n                case 105:\n                case 106:\n                case 107:\n                case 108:\n                case 109:\n                case 110:\n                case 111:\n                case 112:\n                case 113:\n                case 114:\n                case 115:\n                case 116:\n                case 117:\n                case 118:\n                case 119:\n                case 120:\n                case 121:\n                case 122:\n                  v41 = v69;\n                  goto LABEL_123;\n                case 35:\n                case 126:\n                  v42 = v69;\n                  goto LABEL_125;\n                case 32:\n                  v41 = v69;\n                  goto LABEL_128;\n                case 8:\n                  LODWORD(v13) = 0;\n                  v11 = 0;\n                  LOBYTE(v28) = 98;\n                  goto LABEL_29;\n                case 7:\n                  LOBYTE(v28) = 97;\n                  break;\n              }\nLABEL_79:\n              v11 = 0;\n              goto LABEL_37;\n            }\n          }\n        }\n        LOBYTE(v28) = *v20;\n        switch ( *v20 )\n        {\n          case 123:\n          case 125:\n            v69 = 0;\n            goto LABEL_17;\n          case 63:\n            v69 = 0;\n            goto LABEL_58;\n          case 39:\n            v69 = 0;\n            goto LABEL_62;\n          case 92:\n            v69 = 0;\n            goto LABEL_65;\n          case 10:\nLABEL_68:\n            LOBYTE(v28) = 110;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v28) = 116;\n            goto LABEL_69;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v69 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 13:\n            v69 = 0;\nLABEL_76:\n            LOBYTE(v28) = 13;\n            v34 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 12:\nLABEL_77:\n            LOBYTE(v28) = 102;\n            goto LABEL_78;\n          case 11:\nLABEL_80:\n            LOBYTE(v28) = 118;\n            goto LABEL_78;\n          case 0:\n            goto LABEL_81;\n          default:\n            v69 = 0;\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v41 = 0;\n            goto LABEL_123;\n          case 35:\n          case 126:\n            v42 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v69;\n              LODWORD(v13) = 0;\n              v69 = v42;\n              goto LABEL_23;\n            }\n            v69 = v42;\n            v11 = 0;\n            break;\n          case 32:\n            v41 = 0;\nLABEL_128:\n            LOBYTE(v28) = 32;\nLABEL_123:\n            v11 = v69;\n            v69 = v41;\n            v30 = 0;\n            goto LABEL_25;\n          case 8:\n            LOBYTE(v28) = 98;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 7:\n            LOBYTE(v28) = 97;\nLABEL_78:\n            if ( !v82 )\n              goto LABEL_79;\n            return sub_4068D0((__int64)v9, v10, s);\n        }\nLABEL_24:\n        v30 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v28 >> 5)) >> v28) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_29:\n            v31 = v15 ^ 1;\n            LOBYTE(v31) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & (unsigned __int8)(v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v31;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v69 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v33) = v15 & (v30 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v33 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v28;\n        v32 = v70;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v32 = 0;\n        v70 = v32;\n      }\n      LOBYTE(v28) = *v20;\n      switch ( *v20 )\n      {\n        case 123:\n        case 125:\nLABEL_17:\n          v29 = v17 != 1;\n          if ( v17 == -1LL )\n            v29 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( !v29 )\n            goto LABEL_20;\n          goto LABEL_67;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            v11 = 0;\n            v30 = 0;\n            LOBYTE(v28) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v28) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v28 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v28 > 0x3Eu)\n            || (v61 = 8070630310989004800LL, !_bittest64(&v61, v28)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v28) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v28) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            if ( v10 <= v16 + 2 )\n            {\n              v13 = v10;\n              v10 = v79;\n            }\n            else\n            {\n              v13 = v10;\n              v9[v16 + 2] = 39;\n              v10 = v79;\n            }\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v30 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v28) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v37 = v19;\n            v38 = v17;\n            v39 = v15;\n            v33 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v28;\n            v15 = v39;\n            v17 = v38;\n            v19 = v37;\n            v40 = 1LL;\n            LODWORD(v33) = (*v33)[(unsigned __int8)v28];\n            LOWORD(v33) = (unsigned __int16)v33 & 0x4000;\n            LOBYTE(v11) = (_WORD)v33 != 0;\n            LOBYTE(v13) = v68 & ((_WORD)v33 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v47 = v19;\n            v48 = v15;\n            v49 = v20;\n            v50 = strlen(s);\n            v19 = v47;\n            LOBYTE(v15) = v48;\n            v20 = v49;\n            v17 = v50;\n          }\n          v85 = v16;\n          v86 = v20;\n          v51 = 0LL;\n          v84 = v15;\n          v76 = v9;\n          v77 = v10;\n          v74 = v17;\n          v75 = v19;\n          break;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 10:\n          LOBYTE(v28) = 10;\n          v34 = 110;\n          goto LABEL_104;\n        case 9:\n          LOBYTE(v28) = 9;\n          v34 = 116;\n          goto LABEL_104;\n        case 8:\n          LOBYTE(v28) = 8;\n          v34 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 7:\n          LOBYTE(v28) = 7;\n          v34 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 0:\n          if ( !v68 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v69 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v28) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v69 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v30 = v15 ^ 1;\n          LOBYTE(v30) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v30 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v36 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v30;\n              v11 = 0;\n              LOBYTE(v28) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v36 = v16;\n          if ( v10 > v16 )\n          {\n            v30 = v15;\nLABEL_91:\n            v9[v36] = 92;\n            v15 = v30;\n          }\n          v16 = v36 + 1;\n          if ( v19 == 2 )\n          {\n            v30 = v11;\n            LOBYTE(v28) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v28) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v36 + 2 )\n              v9[v36 + 2] = 48;\n            v16 = v36 + 3;\n            LOBYTE(v28) = 48;\n          }\nLABEL_95:\n          v30 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | (unsigned __int8)(v68 ^ 1) )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v33) = v15;\n            v11 = 0;\n            LOBYTE(v28) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = (unsigned __int8)v68;\n          LOBYTE(v28) = 92;\n          v34 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v68;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v33) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v68 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v28) = v34;\n          v11 = 0;\n          goto LABEL_28;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\nLABEL_20:\n          if ( !v18 )\n            goto LABEL_21;\n          goto LABEL_67;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 32:\n          LOBYTE(v28) = 32;\n          LOBYTE(v13) = v19 == 2;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4068D0((__int64)v9, v10, s);\n        case 13:\n          LOBYTE(v28) = 13;\n          v34 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v69 = v19 == 2 && v82;\n          if ( v69 )\n            return sub_4068D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v28) = 12;\n          v34 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 11:\n          LOBYTE(v28) = 11;\n          v34 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n      }\n      while ( 2 )\n      {\n        v52 = (char *)v51 + v18;\n        v33 = (const unsigned __int16 **)sub_40AB50((wchar_t *)&wc, (char *)v51 + v18 + (_QWORD)s);\n        v53 = v33;\n        if ( !v33 )\n        {\nLABEL_240:\n          v40 = (unsigned __int64)v51;\n          v16 = v85;\n          v15 = v84;\n          v9 = v76;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v74;\n          v19 = v75;\n          LOBYTE(v13) = v68 & (v11 ^ 1);\n          goto LABEL_241;\n        }\n        if ( v33 == (const unsigned __int16 **)-1 )\n        {\n          v40 = (unsigned __int64)v51;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v76;\n          v10 = v77;\n          v17 = v74;\n          v19 = v75;\n          LODWORD(v13) = (unsigned __int8)v68;\n          goto LABEL_241;\n        }\n        if ( v33 == (const unsigned __int16 **)-2 )\n        {\n          v17 = v74;\n          v62 = (char *)v51 + v18;\n          v63 = (char *)v51 + v18 + (_QWORD)s;\n          v33 = v51;\n          v40 = (unsigned __int64)v51;\n          v15 = v84;\n          v16 = v85;\n          v9 = v76;\n          v10 = v77;\n          v19 = v75;\n          if ( (unsigned __int64)v62 < v74 && *v63 )\n          {\n            do\n              v33 = (const unsigned __int16 **)((char *)v33 + 1);\n            while ( (unsigned __int64)v33 + v18 < v74 && *((_BYTE *)v33 + (_QWORD)v86) );\n            v40 = (unsigned __int64)v33;\n          }\n          LODWORD(v13) = (unsigned __int8)v68;\n          v11 = 0;\nLABEL_241:\n          if ( v40 > 1 )\n            goto LABEL_173;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = (unsigned __int8)v68;\n            LOBYTE(v11) = 0;\nLABEL_173:\n            v55 = 0;\n            v56 = v18 + v40;\n            v57 = v69;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4068D0((__int64)v9, v10, s);\n                LOBYTE(v33) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v33 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (signed int)v33;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v28 >> 6) + 48;\n                LODWORD(v33) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v33) = (((unsigned __int8)v28 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v33;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v28) = (v28 & 7) + 48;\n                if ( v18 >= v56 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v55 = v13;\n              }\n              else\n              {\n                LODWORD(v33) = v15 & (v55 ^ 1);\n                if ( v57 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v56 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v33 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v33) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v57 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v57 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v28;\n              LOBYTE(v28) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v30 = (v13 | (unsigned __int8)v68 ^ 1) ^ 1;\n          LOBYTE(v30) = v82 | (v13 | v68 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)((v13 | v68 ^ 1) ^ 1)) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v75 != 2 || !v82 || v33 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v51 = (const unsigned __int16 **)((char *)v51 + (_QWORD)v53);\n          LODWORD(v33) = mbsinit(&ps);\n          if ( (_DWORD)v33 )\n            goto LABEL_240;\n          continue;\n        }\n        break;\n      }\n      v54 = &v52[(_QWORD)s + 1];\n      while ( (unsigned __int8)(*v54 - 91) > 0x21u || !((1LL << (*v54 - 91)) & 0x20000002BLL) )\n      {\n        if ( &v52[(unsigned int)&s[(_QWORD)v53]] == ++v54 )\n          goto LABEL_148;\n      }\n      v9 = v76;\n      v10 = v77;\n      return sub_4068D0((__int64)v9, v10, s);\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_4068D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15@1\n  unsigned __int64 v10; // r14@1\n  int v11; // er13@1\n  int v12; // ebp@1\n  unsigned __int64 v13; // rdx@1\n  unsigned __int64 v14; // r11@1\n  int v15; // er10@2\n  unsigned __int64 v16; // rbx@2\n  unsigned __int64 v17; // r9@3\n  __int64 v18; // r12@3\n  int v19; // er11@3\n  char *v20; // r8@7\n  int v21; // ST60_4@11\n  unsigned __int8 v22; // ST58_1@11\n  size_t v23; // rax@11\n  int v24; // ST68_4@13\n  unsigned __int64 v25; // ST60_8@13\n  unsigned __int8 v26; // ST58_1@13\n  int v27; // eax@13\n  unsigned __int64 v28; // rbp@15\n  bool v29; // al@17\n  int v30; // eax@23\n  int v31; // eax@29\n  char v32; // di@42\n  const unsigned __int16 **v33; // rax@50\n  char v34; // cl@65\n  unsigned __int64 result; // rax@71\n  signed __int64 v36; // rcx@90\n  int v37; // ST60_4@99\n  unsigned __int64 v38; // ST58_8@99\n  unsigned __int8 v39; // ST50_1@99\n  unsigned __int64 v40; // rdi@99\n  unsigned __int8 v41; // al@122\n  unsigned __int8 v42; // al@124\n  int v43; // er13@131\n  bool v44; // dl@131\n  bool v45; // dl@133\n  bool v46; // al@136\n  int v47; // ST60_4@146\n  char v48; // ST58_1@146\n  char *v49; // ST50_8@146\n  size_t v50; // rax@146\n  const unsigned __int16 **v51; // rbx@147\n  char *v52; // r15@151\n  const unsigned __int16 **v53; // r14@151\n  char *v54; // rax@157\n  int v55; // esi@173\n  unsigned __int64 v56; // rcx@173\n  unsigned __int8 v57; // di@173\n  const char *v58; // rax@218\n  unsigned __int64 v59; // ST30_8@220\n  size_t v60; // rax@220\n  signed __int64 v61; // rsi@246\n  char *v62; // rsi@258\n  char *v63; // rcx@258\n  char i; // al@265\n  char v65; // dl@276\n  char *v66; // rax@277\n  unsigned __int64 v67; // [sp+8h] [bp-C0h]@1\n  char v68; // [sp+8h] [bp-C0h]@2\n  unsigned __int8 v69; // [sp+10h] [bp-B8h]@7\n  char v70; // [sp+1Fh] [bp-A9h]@2\n  char *s; // [sp+20h] [bp-A8h]@1\n  unsigned __int64 n; // [sp+28h] [bp-A0h]@2\n  char *v73; // [sp+30h] [bp-98h]@13\n  unsigned __int64 v74; // [sp+30h] [bp-98h]@147\n  int v75; // [sp+38h] [bp-90h]@147\n  _BYTE *v76; // [sp+40h] [bp-88h]@147\n  unsigned __int64 v77; // [sp+48h] [bp-80h]@147\n  char *s2; // [sp+50h] [bp-78h]@2\n  __int64 v79; // [sp+58h] [bp-70h]@2\n  size_t v80; // [sp+60h] [bp-68h]@1\n  char v81; // [sp+68h] [bp-60h]@1\n  bool v82; // [sp+6Ch] [bp-5Ch]@1\n  char v83; // [sp+6Dh] [bp-5Bh]@2\n  unsigned __int8 v84; // [sp+6Eh] [bp-5Ah]@147\n  unsigned __int64 v85; // [sp+70h] [bp-58h]@147\n  char *v86; // [sp+78h] [bp-50h]@147\n  wint_t wc; // [sp+84h] [bp-44h]@148\n  mbstate_t ps; // [sp+88h] [bp-40h]@145\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v67 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v67;\n  switch ( v11 )\n  {\n    case 1:\n      goto LABEL_2;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v68 = 1;\n      goto LABEL_211;\n    case 5:\n      if ( v12 )\n      {\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v70 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v70 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v68 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4067D0(\"`\", v11);\n        v58 = sub_4067D0(\"'\", v11);\n        v14 = v67;\n        a9 = (char *)v58;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v59 = v14;\n      v60 = strlen(a9);\n      v70 = 1;\n      v15 = 0;\n      v14 = v59;\n      n = v60;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v68 = 1;\n      goto LABEL_3;\n    case 0:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v68 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 6:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v68 = 1;\n      n = 1LL;\n      s2 = \".%s \\\"\" + 4;\n      goto LABEL_3;\n    case 7:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v68 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 3:\n      v70 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v68 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 2:\n      if ( v12 )\n      {\n        v70 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v68 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      else\n      {\n        v68 = 0;\nLABEL_211:\n        if ( a2 )\n        {\n          v15 = 0;\n          v46 = 0;\n          v70 = 1;\n          v79 = 0LL;\n          goto LABEL_138;\n        }\n        v70 = 1;\n        v15 = 0;\n        v16 = 1LL;\n        v11 = 2;\n        v79 = 0LL;\n        v83 = 0;\n        v82 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v43 = v19;\n          v14 = v17;\n          v44 = v43 == 2;\n          if ( !v16 && v44 && v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v45 = !v82 && v44;\n          if ( v45 )\n          {\n            if ( v83 )\n            {\n              if ( v70 )\n                return sub_4068D0((__int64)v9, v79, s);\n              v46 = v79 != 0 && v10 == 0;\n              if ( v46 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v82 = 0;\n                v83 = v46;\n                goto LABEL_3;\n              }\n              v45 = v83;\n            }\n          }\n          else\n          {\n            v45 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v45 )\n            {\n              v65 = *s2;\n              if ( *s2 )\n              {\n                v66 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v65;\n                  v65 = v66[++v16];\n                }\n                while ( v65 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v69 = v68 & (v19 != 2);\n        if ( !((unsigned __int8)v68 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v21 = v19;\n            v22 = v15;\n            v23 = strlen(s);\n            v19 = v21;\n            v15 = v22;\n            v20 = &s[v18];\n            v17 = v23;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v24 = v19;\n            v25 = v17;\n            v26 = v15;\n            v73 = v20;\n            v27 = memcmp(v20, s2, n);\n            v20 = v73;\n            v15 = v26;\n            v17 = v25;\n            v19 = v24;\n            if ( !v27 )\n            {\n              if ( v82 )\n                return sub_4068D0((__int64)v9, v10, s);\n              LOBYTE(v28) = *v73;\n              switch ( *v73 )\n              {\n                case 123:\n                case 125:\n                  goto LABEL_17;\n                case 63:\n                  goto LABEL_58;\n                case 39:\n                  goto LABEL_62;\n                case 92:\n                  goto LABEL_65;\n                case 10:\n                  goto LABEL_68;\n                case 9:\n                  goto LABEL_72;\n                case 33:\n                case 34:\n                case 36:\n                case 38:\n                case 40:\n                case 41:\n                case 42:\n                case 59:\n                case 60:\n                case 61:\n                case 62:\n                case 91:\n                case 94:\n                case 96:\n                case 124:\n                  goto LABEL_74;\n                case 13:\n                  goto LABEL_76;\n                case 12:\n                  goto LABEL_77;\n                case 11:\n                  goto LABEL_80;\n                case 0:\n                  goto LABEL_83;\n                default:\n                  goto LABEL_98;\n                case 37:\n                case 43:\n                case 44:\n                case 45:\n                case 46:\n                case 47:\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                case 58:\n                case 65:\n                case 66:\n                case 67:\n                case 68:\n                case 69:\n                case 70:\n                case 71:\n                case 72:\n                case 73:\n                case 74:\n                case 75:\n                case 76:\n                case 77:\n                case 78:\n                case 79:\n                case 80:\n                case 81:\n                case 82:\n                case 83:\n                case 84:\n                case 85:\n                case 86:\n                case 87:\n                case 88:\n                case 89:\n                case 90:\n                case 93:\n                case 95:\n                case 97:\n                case 98:\n                case 99:\n                case 100:\n                case 101:\n                case 102:\n                case 103:\n                case 104:\n                case 105:\n                case 106:\n                case 107:\n                case 108:\n                case 109:\n                case 110:\n                case 111:\n                case 112:\n                case 113:\n                case 114:\n                case 115:\n                case 116:\n                case 117:\n                case 118:\n                case 119:\n                case 120:\n                case 121:\n                case 122:\n                  v41 = v69;\n                  goto LABEL_123;\n                case 35:\n                case 126:\n                  v42 = v69;\n                  goto LABEL_125;\n                case 32:\n                  v41 = v69;\n                  goto LABEL_128;\n                case 8:\n                  LODWORD(v13) = 0;\n                  v11 = 0;\n                  LOBYTE(v28) = 98;\n                  goto LABEL_29;\n                case 7:\n                  LOBYTE(v28) = 97;\n                  break;\n              }\nLABEL_79:\n              v11 = 0;\n              goto LABEL_37;\n            }\n          }\n        }\n        LOBYTE(v28) = *v20;\n        switch ( *v20 )\n        {\n          case 123:\n          case 125:\n            v69 = 0;\n            goto LABEL_17;\n          case 63:\n            v69 = 0;\n            goto LABEL_58;\n          case 39:\n            v69 = 0;\n            goto LABEL_62;\n          case 92:\n            v69 = 0;\n            goto LABEL_65;\n          case 10:\nLABEL_68:\n            LOBYTE(v28) = 110;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v28) = 116;\n            goto LABEL_69;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v69 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 13:\n            v69 = 0;\nLABEL_76:\n            LOBYTE(v28) = 13;\n            v34 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 12:\nLABEL_77:\n            LOBYTE(v28) = 102;\n            goto LABEL_78;\n          case 11:\nLABEL_80:\n            LOBYTE(v28) = 118;\n            goto LABEL_78;\n          case 0:\n            goto LABEL_81;\n          default:\n            v69 = 0;\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v41 = 0;\n            goto LABEL_123;\n          case 35:\n          case 126:\n            v42 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v69;\n              LODWORD(v13) = 0;\n              v69 = v42;\n              goto LABEL_23;\n            }\n            v69 = v42;\n            v11 = 0;\n            break;\n          case 32:\n            v41 = 0;\nLABEL_128:\n            LOBYTE(v28) = 32;\nLABEL_123:\n            v11 = v69;\n            v69 = v41;\n            v30 = 0;\n            goto LABEL_25;\n          case 8:\n            LOBYTE(v28) = 98;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 7:\n            LOBYTE(v28) = 97;\nLABEL_78:\n            if ( !v82 )\n              goto LABEL_79;\n            return sub_4068D0((__int64)v9, v10, s);\n        }\nLABEL_24:\n        v30 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v28 >> 5)) >> v28) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_29:\n            v31 = v15 ^ 1;\n            LOBYTE(v31) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & (unsigned __int8)(v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v31;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v69 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v33) = v15 & (v30 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v33 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v28;\n        v32 = v70;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v32 = 0;\n        v70 = v32;\n      }\n      LOBYTE(v28) = *v20;\n      switch ( *v20 )\n      {\n        case 123:\n        case 125:\nLABEL_17:\n          v29 = v17 != 1;\n          if ( v17 == -1LL )\n            v29 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( !v29 )\n            goto LABEL_20;\n          goto LABEL_67;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            v11 = 0;\n            v30 = 0;\n            LOBYTE(v28) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v28) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v28 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v28 > 0x3Eu)\n            || (v61 = 8070630310989004800LL, !_bittest64(&v61, v28)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v28) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v28) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            if ( v10 <= v16 + 2 )\n            {\n              v13 = v10;\n              v10 = v79;\n            }\n            else\n            {\n              v13 = v10;\n              v9[v16 + 2] = 39;\n              v10 = v79;\n            }\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v30 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v28) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v37 = v19;\n            v38 = v17;\n            v39 = v15;\n            v33 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v28;\n            v15 = v39;\n            v17 = v38;\n            v19 = v37;\n            v40 = 1LL;\n            LODWORD(v33) = (*v33)[(unsigned __int8)v28];\n            LOWORD(v33) = (unsigned __int16)v33 & 0x4000;\n            LOBYTE(v11) = (_WORD)v33 != 0;\n            LOBYTE(v13) = v68 & ((_WORD)v33 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v47 = v19;\n            v48 = v15;\n            v49 = v20;\n            v50 = strlen(s);\n            v19 = v47;\n            LOBYTE(v15) = v48;\n            v20 = v49;\n            v17 = v50;\n          }\n          v85 = v16;\n          v86 = v20;\n          v51 = 0LL;\n          v84 = v15;\n          v76 = v9;\n          v77 = v10;\n          v74 = v17;\n          v75 = v19;\n          break;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 10:\n          LOBYTE(v28) = 10;\n          v34 = 110;\n          goto LABEL_104;\n        case 9:\n          LOBYTE(v28) = 9;\n          v34 = 116;\n          goto LABEL_104;\n        case 8:\n          LOBYTE(v28) = 8;\n          v34 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 7:\n          LOBYTE(v28) = 7;\n          v34 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 0:\n          if ( !v68 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v69 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v28) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v69 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v30 = v15 ^ 1;\n          LOBYTE(v30) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v30 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v36 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v30;\n              v11 = 0;\n              LOBYTE(v28) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v36 = v16;\n          if ( v10 > v16 )\n          {\n            v30 = v15;\nLABEL_91:\n            v9[v36] = 92;\n            v15 = v30;\n          }\n          v16 = v36 + 1;\n          if ( v19 == 2 )\n          {\n            v30 = v11;\n            LOBYTE(v28) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v28) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v36 + 2 )\n              v9[v36 + 2] = 48;\n            v16 = v36 + 3;\n            LOBYTE(v28) = 48;\n          }\nLABEL_95:\n          v30 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | (unsigned __int8)(v68 ^ 1) )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v33) = v15;\n            v11 = 0;\n            LOBYTE(v28) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = (unsigned __int8)v68;\n          LOBYTE(v28) = 92;\n          v34 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v68;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v33) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v68 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v28) = v34;\n          v11 = 0;\n          goto LABEL_28;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\nLABEL_20:\n          if ( !v18 )\n            goto LABEL_21;\n          goto LABEL_67;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 32:\n          LOBYTE(v28) = 32;\n          LOBYTE(v13) = v19 == 2;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4068D0((__int64)v9, v10, s);\n        case 13:\n          LOBYTE(v28) = 13;\n          v34 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v69 = v19 == 2 && v82;\n          if ( v69 )\n            return sub_4068D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v28) = 12;\n          v34 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 11:\n          LOBYTE(v28) = 11;\n          v34 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n      }\n      while ( 2 )\n      {\n        v52 = (char *)v51 + v18;\n        v33 = (const unsigned __int16 **)sub_40AB50((wchar_t *)&wc, (char *)v51 + v18 + (_QWORD)s);\n        v53 = v33;\n        if ( !v33 )\n        {\nLABEL_240:\n          v40 = (unsigned __int64)v51;\n          v16 = v85;\n          v15 = v84;\n          v9 = v76;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v74;\n          v19 = v75;\n          LOBYTE(v13) = v68 & (v11 ^ 1);\n          goto LABEL_241;\n        }\n        if ( v33 == (const unsigned __int16 **)-1 )\n        {\n          v40 = (unsigned __int64)v51;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v76;\n          v10 = v77;\n          v17 = v74;\n          v19 = v75;\n          LODWORD(v13) = (unsigned __int8)v68;\n          goto LABEL_241;\n        }\n        if ( v33 == (const unsigned __int16 **)-2 )\n        {\n          v17 = v74;\n          v62 = (char *)v51 + v18;\n          v63 = (char *)v51 + v18 + (_QWORD)s;\n          v33 = v51;\n          v40 = (unsigned __int64)v51;\n          v15 = v84;\n          v16 = v85;\n          v9 = v76;\n          v10 = v77;\n          v19 = v75;\n          if ( (unsigned __int64)v62 < v74 && *v63 )\n          {\n            do\n              v33 = (const unsigned __int16 **)((char *)v33 + 1);\n            while ( (unsigned __int64)v33 + v18 < v74 && *((_BYTE *)v33 + (_QWORD)v86) );\n            v40 = (unsigned __int64)v33;\n          }\n          LODWORD(v13) = (unsigned __int8)v68;\n          v11 = 0;\nLABEL_241:\n          if ( v40 > 1 )\n            goto LABEL_173;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = (unsigned __int8)v68;\n            LOBYTE(v11) = 0;\nLABEL_173:\n            v55 = 0;\n            v56 = v18 + v40;\n            v57 = v69;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4068D0((__int64)v9, v10, s);\n                LOBYTE(v33) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v33 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (signed int)v33;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v28 >> 6) + 48;\n                LODWORD(v33) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v33) = (((unsigned __int8)v28 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v33;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v28) = (v28 & 7) + 48;\n                if ( v18 >= v56 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v55 = v13;\n              }\n              else\n              {\n                LODWORD(v33) = v15 & (v55 ^ 1);\n                if ( v57 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v56 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v33 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v33) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v57 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v57 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v28;\n              LOBYTE(v28) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v30 = (v13 | (unsigned __int8)v68 ^ 1) ^ 1;\n          LOBYTE(v30) = v82 | (v13 | v68 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)((v13 | v68 ^ 1) ^ 1)) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v75 != 2 || !v82 || v33 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v51 = (const unsigned __int16 **)((char *)v51 + (_QWORD)v53);\n          LODWORD(v33) = mbsinit(&ps);\n          if ( (_DWORD)v33 )\n            goto LABEL_240;\n          continue;\n        }\n        break;\n      }\n      v54 = &v52[(_QWORD)s + 1];\n      while ( (unsigned __int8)(*v54 - 91) > 0x21u || !((1LL << (*v54 - 91)) & 0x20000002BLL) )\n      {\n        if ( &v52[(unsigned int)&s[(_QWORD)v53]] == ++v54 )\n          goto LABEL_148;\n      }\n      v9 = v76;\n      v10 = v77;\n      return sub_4068D0((__int64)v9, v10, s);\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401fd5L", 
            "funcEndAddr": "0x401fdaL", 
            "funcName": "sub_4068D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407B00(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14@1\n  __int64 v5; // rbp@1\n  int *v6; // rax@1\n  __int64 v7; // rdx@1\n  __int128 *v8; // rbx@1\n  int *v9; // r13@1\n  signed __int64 v10; // rsi@4\n  __int128 *v11; // rax@5\n  signed __int64 v12; // rbx@7\n  _BYTE *v13; // r12@7\n  unsigned __int64 v14; // ST30_8@7\n  unsigned __int64 v15; // rax@7\n  unsigned __int64 v16; // rsi@8\n  __int64 v17; // ST30_8@9\n  _BYTE *v18; // rax@10\n  int v19; // er8@10\n  __int128 *v21; // rax@12\n  char *v22; // [sp+8h] [bp-50h]@1\n  int v23; // [sp+18h] [bp-40h]@1\n  int v24; // [sp+1Ch] [bp-3Ch]@7\n\n  v4 = a3;\n  v5 = a4;\n  v22 = a2;\n  v6 = __errno_location();\n  v8 = off_623338;\n  v9 = v6;\n  v23 = *v6;\n  if ( (signed int)a1 < 0 )\n    abort();\n  if ( dword_623350 <= (signed int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4093B0(a1, a2, v7);\n    v10 = 16LL * ((signed int)a1 + 1);\n    if ( off_623338 == &xmmword_623340 )\n    {\n      LODWORD(v21) = sub_4091C0(0LL, v10);\n      v8 = v21;\n      off_623338 = v21;\n      *v21 = (__int128)_mm_load_si128((const __m128i *)&xmmword_623340);\n    }\n    else\n    {\n      LODWORD(v11) = sub_4091C0(off_623338, v10);\n      off_623338 = v11;\n      v8 = v11;\n    }\n    memset(&v8[dword_623350], 0, 16LL * ((signed int)a1 + 1 - dword_623350));\n    dword_623350 = a1 + 1;\n  }\n  v12 = (signed __int64)&v8[(signed int)a1];\n  v13 = *(_BYTE **)(v12 + 8);\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v14 = *(_QWORD *)v12;\n  v15 = sub_4068D0(\n          v13,\n          *(_QWORD *)v12,\n          v22,\n          v4,\n          *(_DWORD *)v5,\n          v24,\n          v5 + 8,\n          *(const char **)(v5 + 40),\n          *(char **)(v5 + 48));\n  if ( v14 <= v15 )\n  {\n    v16 = v15 + 1;\n    *(_QWORD *)v12 = v15 + 1;\n    if ( (_UNKNOWN *)v13 != &unk_623B40 )\n    {\n      v17 = v15 + 1;\n      free(v13);\n      v16 = v17;\n    }\n    LODWORD(v18) = sub_409160(v16);\n    v19 = *(_DWORD *)v5;\n    *(_QWORD *)(v12 + 8) = v18;\n    v13 = v18;\n    sub_4068D0(v18, v16, v22, v4, v19, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v23;\n  return v13;\n}\n\n_BYTE *__fastcall sub_407B00(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14@1\n  __int64 v5; // rbp@1\n  int *v6; // rax@1\n  __int64 v7; // rdx@1\n  __int128 *v8; // rbx@1\n  int *v9; // r13@1\n  signed __int64 v10; // rsi@4\n  __int128 *v11; // rax@5\n  signed __int64 v12; // rbx@7\n  _BYTE *v13; // r12@7\n  unsigned __int64 v14; // ST30_8@7\n  unsigned __int64 v15; // rax@7\n  unsigned __int64 v16; // rsi@8\n  __int64 v17; // ST30_8@9\n  _BYTE *v18; // rax@10\n  int v19; // er8@10\n  __int128 *v21; // rax@12\n  char *v22; // [sp+8h] [bp-50h]@1\n  int v23; // [sp+18h] [bp-40h]@1\n  int v24; // [sp+1Ch] [bp-3Ch]@7\n\n  v4 = a3;\n  v5 = a4;\n  v22 = a2;\n  v6 = __errno_location();\n  v8 = off_623338;\n  v9 = v6;\n  v23 = *v6;\n  if ( (signed int)a1 < 0 )\n    abort();\n  if ( dword_623350 <= (signed int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4093B0(a1, a2, v7);\n    v10 = 16LL * ((signed int)a1 + 1);\n    if ( off_623338 == &xmmword_623340 )\n    {\n      LODWORD(v21) = sub_4091C0(0LL, v10);\n      v8 = v21;\n      off_623338 = v21;\n      *v21 = (__int128)_mm_load_si128((const __m128i *)&xmmword_623340);\n    }\n    else\n    {\n      LODWORD(v11) = sub_4091C0(off_623338, v10);\n      off_623338 = v11;\n      v8 = v11;\n    }\n    memset(&v8[dword_623350], 0, 16LL * ((signed int)a1 + 1 - dword_623350));\n    dword_623350 = a1 + 1;\n  }\n  v12 = (signed __int64)&v8[(signed int)a1];\n  v13 = *(_BYTE **)(v12 + 8);\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v14 = *(_QWORD *)v12;\n  v15 = sub_4068D0(\n          v13,\n          *(_QWORD *)v12,\n          v22,\n          v4,\n          *(_DWORD *)v5,\n          v24,\n          v5 + 8,\n          *(const char **)(v5 + 40),\n          *(char **)(v5 + 48));\n  if ( v14 <= v15 )\n  {\n    v16 = v15 + 1;\n    *(_QWORD *)v12 = v15 + 1;\n    if ( (_UNKNOWN *)v13 != &unk_623B40 )\n    {\n      v17 = v15 + 1;\n      free(v13);\n      v16 = v17;\n    }\n    LODWORD(v18) = sub_409160(v16);\n    v19 = *(_DWORD *)v5;\n    *(_QWORD *)(v12 + 8) = v18;\n    v13 = v18;\n    sub_4068D0(v18, v16, v22, v4, v19, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v23;\n  return v13;\n}\n", 
            "funcStartAddr": "0x401fdaL", 
            "funcEndAddr": "0x401fdfL", 
            "funcName": "sub_407B00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407B00(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14@1\n  __int64 v5; // rbp@1\n  int *v6; // rax@1\n  __int64 v7; // rdx@1\n  __int128 *v8; // rbx@1\n  int *v9; // r13@1\n  signed __int64 v10; // rsi@4\n  __int128 *v11; // rax@5\n  signed __int64 v12; // rbx@7\n  _BYTE *v13; // r12@7\n  unsigned __int64 v14; // ST30_8@7\n  unsigned __int64 v15; // rax@7\n  unsigned __int64 v16; // rsi@8\n  __int64 v17; // ST30_8@9\n  _BYTE *v18; // rax@10\n  int v19; // er8@10\n  __int128 *v21; // rax@12\n  char *v22; // [sp+8h] [bp-50h]@1\n  int v23; // [sp+18h] [bp-40h]@1\n  int v24; // [sp+1Ch] [bp-3Ch]@7\n\n  v4 = a3;\n  v5 = a4;\n  v22 = a2;\n  v6 = __errno_location();\n  v8 = off_623338;\n  v9 = v6;\n  v23 = *v6;\n  if ( (signed int)a1 < 0 )\n    abort();\n  if ( dword_623350 <= (signed int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4093B0(a1, a2, v7);\n    v10 = 16LL * ((signed int)a1 + 1);\n    if ( off_623338 == &xmmword_623340 )\n    {\n      LODWORD(v21) = sub_4091C0(0LL, v10);\n      v8 = v21;\n      off_623338 = v21;\n      *v21 = (__int128)_mm_load_si128((const __m128i *)&xmmword_623340);\n    }\n    else\n    {\n      LODWORD(v11) = sub_4091C0(off_623338, v10);\n      off_623338 = v11;\n      v8 = v11;\n    }\n    memset(&v8[dword_623350], 0, 16LL * ((signed int)a1 + 1 - dword_623350));\n    dword_623350 = a1 + 1;\n  }\n  v12 = (signed __int64)&v8[(signed int)a1];\n  v13 = *(_BYTE **)(v12 + 8);\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v14 = *(_QWORD *)v12;\n  v15 = sub_4068D0(\n          v13,\n          *(_QWORD *)v12,\n          v22,\n          v4,\n          *(_DWORD *)v5,\n          v24,\n          v5 + 8,\n          *(const char **)(v5 + 40),\n          *(char **)(v5 + 48));\n  if ( v14 <= v15 )\n  {\n    v16 = v15 + 1;\n    *(_QWORD *)v12 = v15 + 1;\n    if ( (_UNKNOWN *)v13 != &unk_623B40 )\n    {\n      v17 = v15 + 1;\n      free(v13);\n      v16 = v17;\n    }\n    LODWORD(v18) = sub_409160(v16);\n    v19 = *(_DWORD *)v5;\n    *(_QWORD *)(v12 + 8) = v18;\n    v13 = v18;\n    sub_4068D0(v18, v16, v22, v4, v19, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v23;\n  return v13;\n}\n\n_BYTE *__fastcall sub_407B00(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14@1\n  __int64 v5; // rbp@1\n  int *v6; // rax@1\n  __int64 v7; // rdx@1\n  __int128 *v8; // rbx@1\n  int *v9; // r13@1\n  signed __int64 v10; // rsi@4\n  __int128 *v11; // rax@5\n  signed __int64 v12; // rbx@7\n  _BYTE *v13; // r12@7\n  unsigned __int64 v14; // ST30_8@7\n  unsigned __int64 v15; // rax@7\n  unsigned __int64 v16; // rsi@8\n  __int64 v17; // ST30_8@9\n  _BYTE *v18; // rax@10\n  int v19; // er8@10\n  __int128 *v21; // rax@12\n  char *v22; // [sp+8h] [bp-50h]@1\n  int v23; // [sp+18h] [bp-40h]@1\n  int v24; // [sp+1Ch] [bp-3Ch]@7\n\n  v4 = a3;\n  v5 = a4;\n  v22 = a2;\n  v6 = __errno_location();\n  v8 = off_623338;\n  v9 = v6;\n  v23 = *v6;\n  if ( (signed int)a1 < 0 )\n    abort();\n  if ( dword_623350 <= (signed int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4093B0(a1, a2, v7);\n    v10 = 16LL * ((signed int)a1 + 1);\n    if ( off_623338 == &xmmword_623340 )\n    {\n      LODWORD(v21) = sub_4091C0(0LL, v10);\n      v8 = v21;\n      off_623338 = v21;\n      *v21 = (__int128)_mm_load_si128((const __m128i *)&xmmword_623340);\n    }\n    else\n    {\n      LODWORD(v11) = sub_4091C0(off_623338, v10);\n      off_623338 = v11;\n      v8 = v11;\n    }\n    memset(&v8[dword_623350], 0, 16LL * ((signed int)a1 + 1 - dword_623350));\n    dword_623350 = a1 + 1;\n  }\n  v12 = (signed __int64)&v8[(signed int)a1];\n  v13 = *(_BYTE **)(v12 + 8);\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v14 = *(_QWORD *)v12;\n  v15 = sub_4068D0(\n          v13,\n          *(_QWORD *)v12,\n          v22,\n          v4,\n          *(_DWORD *)v5,\n          v24,\n          v5 + 8,\n          *(const char **)(v5 + 40),\n          *(char **)(v5 + 48));\n  if ( v14 <= v15 )\n  {\n    v16 = v15 + 1;\n    *(_QWORD *)v12 = v15 + 1;\n    if ( (_UNKNOWN *)v13 != &unk_623B40 )\n    {\n      v17 = v15 + 1;\n      free(v13);\n      v16 = v17;\n    }\n    LODWORD(v18) = sub_409160(v16);\n    v19 = *(_DWORD *)v5;\n    *(_QWORD *)(v12 + 8) = v18;\n    v13 = v18;\n    sub_4068D0(v18, v16, v22, v4, v19, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v23;\n  return v13;\n}\n", 
            "funcStartAddr": "0x401fdaL", 
            "funcEndAddr": "0x401fdfL", 
            "funcName": "sub_407B00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408020(__int64 a1, int a2, char *a3)\n{\n  int v4; // [sp+0h] [bp-48h]@2\n  int v5; // [sp+4h] [bp-44h]@2\n  __int64 v6; // [sp+8h] [bp-40h]@2\n  __int64 v7; // [sp+10h] [bp-38h]@2\n  __int64 v8; // [sp+18h] [bp-30h]@2\n  __int64 v9; // [sp+20h] [bp-28h]@2\n  __int64 v10; // [sp+28h] [bp-20h]@2\n  __int64 v11; // [sp+30h] [bp-18h]@2\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408020(__int64 a1, int a2, char *a3)\n{\n  int v4; // [sp+0h] [bp-48h]@2\n  int v5; // [sp+4h] [bp-44h]@2\n  __int64 v6; // [sp+8h] [bp-40h]@2\n  __int64 v7; // [sp+10h] [bp-38h]@2\n  __int64 v8; // [sp+18h] [bp-30h]@2\n  __int64 v9; // [sp+20h] [bp-28h]@2\n  __int64 v10; // [sp+28h] [bp-20h]@2\n  __int64 v11; // [sp+30h] [bp-18h]@2\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401fdfL", 
            "funcEndAddr": "0x401fe4L", 
            "funcName": "sub_408020"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408020(__int64 a1, int a2, char *a3)\n{\n  int v4; // [sp+0h] [bp-48h]@2\n  int v5; // [sp+4h] [bp-44h]@2\n  __int64 v6; // [sp+8h] [bp-40h]@2\n  __int64 v7; // [sp+10h] [bp-38h]@2\n  __int64 v8; // [sp+18h] [bp-30h]@2\n  __int64 v9; // [sp+20h] [bp-28h]@2\n  __int64 v10; // [sp+28h] [bp-20h]@2\n  __int64 v11; // [sp+30h] [bp-18h]@2\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408020(__int64 a1, int a2, char *a3)\n{\n  int v4; // [sp+0h] [bp-48h]@2\n  int v5; // [sp+4h] [bp-44h]@2\n  __int64 v6; // [sp+8h] [bp-40h]@2\n  __int64 v7; // [sp+10h] [bp-38h]@2\n  __int64 v8; // [sp+18h] [bp-30h]@2\n  __int64 v9; // [sp+20h] [bp-28h]@2\n  __int64 v10; // [sp+28h] [bp-20h]@2\n  __int64 v11; // [sp+30h] [bp-18h]@2\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401fdfL", 
            "funcEndAddr": "0x401fe4L", 
            "funcName": "sub_408020"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408120(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  __m128i v4; // [sp+0h] [bp-48h]@1\n  __m128i v5; // [sp+10h] [bp-38h]@1\n  __m128i v6; // [sp+20h] [bp-28h]@1\n  __int64 v7; // [sp+30h] [bp-18h]@1\n\n  v7 = qword_623C70;\n  v4 = _mm_load_si128((const __m128i *)&xmmword_623C40);\n  v5 = _mm_load_si128((const __m128i *)&xmmword_623C50);\n  v6 = _mm_load_si128((const __m128i *)&xmmword_623C60);\n  v4.m128i_i32[(a3 >> 5) + 2] ^= (~(unsigned __int8)((unsigned __int32)v4.m128i_i32[(a3 >> 5) + 2] >> (a3 & 0x1F)) & 1) << (a3 & 0x1F);\n  return sub_407B00(0LL, a1, a2, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x408120L", 
            "funcEndAddr": "0x408190L", 
            "funcName": "sub_408120"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4081A0(char *a1)\n{\n  return sub_408120(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x4081a0L", 
            "funcEndAddr": "0x4081b1L", 
            "funcName": "sub_4081A0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4081D0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [sp+0h] [bp-48h]@2\n  int v5; // [sp+4h] [bp-44h]@2\n  __int64 v6; // [sp+8h] [bp-40h]@2\n  __int64 v7; // [sp+10h] [bp-38h]@2\n  __int64 v8; // [sp+18h] [bp-30h]@2\n  __int64 v9; // [sp+20h] [bp-28h]@2\n  __int64 v10; // [sp+28h] [bp-20h]@2\n  __int64 v11; // [sp+30h] [bp-18h]@2\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4081D0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [sp+0h] [bp-48h]@2\n  int v5; // [sp+4h] [bp-44h]@2\n  __int64 v6; // [sp+8h] [bp-40h]@2\n  __int64 v7; // [sp+10h] [bp-38h]@2\n  __int64 v8; // [sp+18h] [bp-30h]@2\n  __int64 v9; // [sp+20h] [bp-28h]@2\n  __int64 v10; // [sp+28h] [bp-20h]@2\n  __int64 v11; // [sp+30h] [bp-18h]@2\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401fe9L", 
            "funcEndAddr": "0x401feeL", 
            "funcName": "sub_4081D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4081D0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [sp+0h] [bp-48h]@2\n  int v5; // [sp+4h] [bp-44h]@2\n  __int64 v6; // [sp+8h] [bp-40h]@2\n  __int64 v7; // [sp+10h] [bp-38h]@2\n  __int64 v8; // [sp+18h] [bp-30h]@2\n  __int64 v9; // [sp+20h] [bp-28h]@2\n  __int64 v10; // [sp+28h] [bp-20h]@2\n  __int64 v11; // [sp+30h] [bp-18h]@2\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4081D0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [sp+0h] [bp-48h]@2\n  int v5; // [sp+4h] [bp-44h]@2\n  __int64 v6; // [sp+8h] [bp-40h]@2\n  __int64 v7; // [sp+10h] [bp-38h]@2\n  __int64 v8; // [sp+18h] [bp-30h]@2\n  __int64 v9; // [sp+20h] [bp-28h]@2\n  __int64 v10; // [sp+28h] [bp-20h]@2\n  __int64 v11; // [sp+30h] [bp-18h]@2\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401fe9L", 
            "funcEndAddr": "0x401feeL", 
            "funcName": "sub_4081D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408330(__int64 a1, char *a2)\n{\n  return sub_407B00(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_623300);\n}\n", 
            "funcStartAddr": "0x408330L", 
            "funcEndAddr": "0x408341L", 
            "funcName": "sub_408330"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408350(char *a1)\n{\n  return sub_407B00(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_623300);\n}\n", 
            "funcStartAddr": "0x408350L", 
            "funcEndAddr": "0x408366L", 
            "funcName": "sub_408350"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_408370(FILE *stream, unsigned __int64 *a2)\n{\n  int v2; // eax@1\n  unsigned __int64 v3; // rbx@3\n  char *v4; // r12@4\n  unsigned __int64 v5; // rbp@5\n  size_t v6; // rax@7\n  char *v7; // rax@9\n  unsigned __int64 v8; // r14@11\n  size_t v9; // rax@11\n  int *v10; // r14@12\n  int v11; // er15@12\n  int *v13; // rax@16\n  char *v14; // rdi@17\n  char *v15; // rdi@18\n  int *v16; // r14@18\n  __off_t v17; // rax@19\n  char *v18; // rax@22\n  struct stat stat_buf; // [sp+10h] [bp-C8h]@1\n\n  v2 = fileno(stream);\n  if ( __fxstat(1, v2, &stat_buf) < 0\n    || (stat_buf.st_mode & 0xF000) != 0x8000\n    || (v17 = ftello(stream), v17 < 0)\n    || stat_buf.st_size <= v17 )\n  {\n    v3 = 0x2000LL;\n  }\n  else\n  {\n    v3 = stat_buf.st_size - v17 + 1;\n  }\n  v4 = (char *)malloc(v3);\n  if ( v4 )\n  {\n    v5 = 0LL;\n    while ( 1 )\n    {\n      v8 = v3 - v5;\n      v9 = fread(&v4[v5], 1uLL, v3 - v5, stream);\n      v5 += v9;\n      if ( v8 != v9 )\n        break;\n      if ( v3 == -1LL )\n      {\n        v15 = v4;\n        v4 = 0LL;\n        v16 = __errno_location();\n        free(v15);\n        *v16 = 12;\n        return v4;\n      }\n      v6 = v3 + (v3 >> 1);\n      if ( ~(v3 >> 1) <= v3 )\n        v6 = -1LL;\n      v3 = v6;\n      v7 = (char *)realloc(v4, v6);\n      if ( !v7 )\n      {\n        v13 = __errno_location();\n        v11 = *v13;\n        v10 = v13;\n        goto LABEL_17;\n      }\n      v4 = v7;\n    }\n    v10 = __errno_location();\n    v11 = *v10;\n    if ( ferror(stream) )\n    {\nLABEL_17:\n      v14 = v4;\n      v4 = 0LL;\n      free(v14);\n      *v10 = v11;\n      return v4;\n    }\n    if ( v3 - 1 > v5 )\n    {\n      v18 = (char *)realloc(v4, v5 + 1);\n      if ( v18 )\n        v4 = v18;\n    }\n    v4[v5] = 0;\n    *a2 = v5;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x408370L", 
            "funcEndAddr": "0x408503L", 
            "funcName": "sub_408370"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4085A0(const char *a1, unsigned __int64 *a2)\n{\n  FILE *v2; // rax@1\n  FILE *v3; // rbx@2\n  char *v4; // rbp@2\n  int *v5; // r12@2\n  int v6; // er13@2\n  char *result; // rax@3\n\n  v2 = fopen(a1, \"r\");\n  if ( v2 )\n  {\n    v3 = v2;\n    v4 = sub_408370(v2, a2);\n    v5 = __errno_location();\n    v6 = *v5;\n    if ( (unsigned int)sub_409BC0(v3) )\n    {\n      if ( v4 )\n      {\n        v6 = *v5;\n        free(v4);\n      }\n      *v5 = v6;\n      result = 0LL;\n    }\n    else\n    {\n      result = v4;\n    }\n  }\n  else\n  {\n    result = 0LL;\n  }\n  return result;\n}\n\nchar *__fastcall sub_4085A0(const char *a1, unsigned __int64 *a2)\n{\n  FILE *v2; // rax@1\n  FILE *v3; // rbx@2\n  char *v4; // rbp@2\n  int *v5; // r12@2\n  int v6; // er13@2\n  char *result; // rax@3\n\n  v2 = fopen(a1, \"r\");\n  if ( v2 )\n  {\n    v3 = v2;\n    v4 = sub_408370(v2, a2);\n    v5 = __errno_location();\n    v6 = *v5;\n    if ( (unsigned int)sub_409BC0(v3) )\n    {\n      if ( v4 )\n      {\n        v6 = *v5;\n        free(v4);\n      }\n      *v5 = v6;\n      result = 0LL;\n    }\n    else\n    {\n      result = v4;\n    }\n  }\n  else\n  {\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408510L", 
            "funcEndAddr": "0x408595L", 
            "funcName": "sub_4085A0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4085A0(const char *a1, unsigned __int64 *a2)\n{\n  FILE *v2; // rax@1\n  FILE *v3; // rbx@2\n  char *v4; // rbp@2\n  int *v5; // r12@2\n  int v6; // er13@2\n  char *result; // rax@3\n\n  v2 = fopen(a1, \"r\");\n  if ( v2 )\n  {\n    v3 = v2;\n    v4 = sub_408370(v2, a2);\n    v5 = __errno_location();\n    v6 = *v5;\n    if ( (unsigned int)sub_409BC0(v3) )\n    {\n      if ( v4 )\n      {\n        v6 = *v5;\n        free(v4);\n      }\n      *v5 = v6;\n      result = 0LL;\n    }\n    else\n    {\n      result = v4;\n    }\n  }\n  else\n  {\n    result = 0LL;\n  }\n  return result;\n}\n\nchar *__fastcall sub_4085A0(const char *a1, unsigned __int64 *a2)\n{\n  FILE *v2; // rax@1\n  FILE *v3; // rbx@2\n  char *v4; // rbp@2\n  int *v5; // r12@2\n  int v6; // er13@2\n  char *result; // rax@3\n\n  v2 = fopen(a1, \"r\");\n  if ( v2 )\n  {\n    v3 = v2;\n    v4 = sub_408370(v2, a2);\n    v5 = __errno_location();\n    v6 = *v5;\n    if ( (unsigned int)sub_409BC0(v3) )\n    {\n      if ( v4 )\n      {\n        v6 = *v5;\n        free(v4);\n      }\n      *v5 = v6;\n      result = 0LL;\n    }\n    else\n    {\n      result = v4;\n    }\n  }\n  else\n  {\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408510L", 
            "funcEndAddr": "0x408595L", 
            "funcName": "sub_4085A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4085C0(__int64 a1, signed __int64 a2)\n{\n  signed __int64 v2; // rbx@1\n  __int64 v3; // rax@1\n  signed __int64 v4; // rsi@1\n  bool v5; // zf@1\n  signed __int64 result; // rax@1\n\n  v2 = a2;\n  LODWORD(v3) = sub_40ABD0(a1, 0LL, a2);\n  v4 = v3 - a1 + 1;\n  v5 = v3 == 0;\n  result = v2;\n  if ( !v5 )\n    result = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x4085c0L", 
            "funcEndAddr": "0x4085f1L", 
            "funcName": "sub_4085C0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_408600()\n{\n  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbiter.h\", 0xAAu, \"mbiter_multi_next\");\n}\n", 
            "funcStartAddr": "0x408600L", 
            "funcEndAddr": "0x40861dL", 
            "funcName": "sub_408600"
        }, 
        {
            "decompiledFuncCode": "char *__usercall sub_408620@<rax>(const char *a1@<rdi>, __int64 a2@<rsi>, char *a3@<r13>)\n{\n  char *v3; // rax@1\n  __int64 v4; // rdx@1\n  char *v5; // r12@2\n  char *v6; // rbp@4\n  int v7; // edx@5\n  unsigned int v8; // eax@5\n  char *v9; // rbx@6\n  signed int v10; // er14@10\n  wint_t v11; // eax@17\n  char *v12; // r15@17\n  unsigned __int64 v13; // rbp@17\n  int v14; // eax@22\n  __int64 v16; // rax@30\n  signed __int64 v17; // rbx@30\n  int v18; // eax@39\n  __int64 v19; // rbx@44\n  const char *v20; // r13@45\n  const unsigned __int16 *v21; // rax@45\n  size_t v22; // rax@48\n  char *v23; // rbx@49\n  const unsigned __int16 *v24; // rdx@50\n  char *v25; // rbx@57\n  int v26; // edx@58\n  unsigned int v27; // eax@58\n  char *v28; // r14@59\n  bool v29; // zf@59\n  wint_t v30; // eax@66\n  __int64 v31; // rax@70\n  size_t v32; // rax@81\n  unsigned __int64 v33; // [sp+0h] [bp-88h]@10\n  unsigned __int64 v34; // [sp+0h] [bp-88h]@63\n  char v35; // [sp+8h] [bp-80h]@6\n  char v36; // [sp+8h] [bp-80h]@59\n  mbstate_t ps; // [sp+Ch] [bp-7Ch]@6\n  char v38; // [sp+14h] [bp-74h]@6\n  char *v39; // [sp+18h] [bp-70h]@4\n  __int64 v40; // [sp+20h] [bp-68h]@17\n  char v41; // [sp+28h] [bp-60h]@12\n  wint_t wc; // [sp+2Ch] [bp-5Ch]@13\n\n  v3 = strdup(a1);\n  if ( !v3 )\n    sub_4093B0(a1, a2, v4);\n  v5 = v3;\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    if ( !(_DWORD)a2 )\n      goto LABEL_91;\n    v19 = (unsigned __int8)*v5;\n    if ( (_BYTE)v19 )\n    {\n      v20 = v5;\n      v21 = *__ctype_b_loc();\n      do\n      {\n        if ( !(HIBYTE(v21[v19]) & 0x20) )\n          break;\n        v19 = *++v20;\n      }\n      while ( (_BYTE)v19 );\n    }\n    else\n    {\n      v20 = v5;\n    }\n    v22 = strlen(v20);\n    memmove(v5, v20, v22 + 1);\n    if ( (_DWORD)a2 != 1 )\n    {\nLABEL_91:\n      v23 = &v5[strlen(v5) - 1];\n      if ( v5 <= v23 )\n      {\n        v24 = *__ctype_b_loc();\n        do\n        {\n          if ( !(HIBYTE(v24[(unsigned __int8)*v23]) & 0x20) )\n            break;\n          *v23-- = 0;\n        }\n        while ( v5 <= v23 );\n      }\n    }\n    return v5;\n  }\n  if ( !(_DWORD)a2 )\n    goto LABEL_4;\n  v39 = v5;\n  v25 = v5;\n  do\n  {\n    v26 = *(_DWORD *)v25;\n    v25 += 4;\n    v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n  }\n  while ( !v27 );\n  v36 = 0;\n  v28 = v5;\n  v29 = (unsigned __int16)(v27 & 0x8080) == 0;\n  v38 = 0;\n  ps = 0LL;\n  if ( !(v27 & 0x8080) )\n    LOBYTE(v27) = v27 >> 16;\n  if ( v29 )\n    v25 += 2;\n  v34 = (unsigned __int64)&v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3];\n  if ( v34 <= (unsigned __int64)v5 )\n    goto LABEL_81;\n  while ( !v36 )\n  {\n    if ( !(((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v28 >> 5) & 7)] >> *v28) & 1) )\n    {\n      if ( !mbsinit(&ps) )\nLABEL_86:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbiter.h\", 0x8Eu, \"mbiter_multi_next\");\n      v36 = 1;\n      break;\n    }\n    v40 = 1LL;\n    v30 = *v28;\n    v41 = 1;\n    v28 = v39;\n    wc = v30;\n    v38 = 1;\nLABEL_67:\n    if ( iswspace(wc) )\n    {\n      v28 += v40;\n      v38 = 0;\n      v39 = v28;\n      if ( (unsigned __int64)v28 < v34 )\n        continue;\n    }\n    goto LABEL_81;\n  }\n  v31 = sub_40AB50((wchar_t *)&wc, v28);\n  v40 = v31;\n  if ( v31 == -1 )\n  {\n    v40 = 1LL;\n    v28 = v39;\n    v41 = 0;\n    v38 = 1;\n    goto LABEL_81;\n  }\n  v28 = v39;\n  if ( v31 != -2 )\n  {\n    if ( !v31 )\n    {\n      v40 = 1LL;\n      if ( *v39 )\nLABEL_87:\n        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbiter.h\", 0xA9u, \"mbiter_multi_next\");\n      if ( wc )\nLABEL_88:\n        sub_408600();\n    }\n    v41 = 1;\n    if ( mbsinit(&ps) )\n      v36 = 0;\n    v38 = 1;\n    goto LABEL_67;\n  }\n  v41 = 0;\n  v38 = 1;\n  v40 = v34 - (_QWORD)v39;\nLABEL_81:\n  v32 = strlen(v28);\n  memmove(v5, v28, v32 + 1);\n  if ( (_DWORD)a2 == 1 )\n    return v5;\nLABEL_4:\n  v39 = v5;\n  v6 = v5;\n  do\n  {\n    v7 = *(_DWORD *)v6;\n    v6 += 4;\n    v8 = ~v7 & (v7 - 16843009) & 0x80808080;\n  }\n  while ( !v8 );\n  v35 = 0;\n  v9 = v5;\n  v38 = 0;\n  ps = 0LL;\n  if ( !((unsigned __int16)~(_WORD)v7 & (unsigned __int16)(v7 - 257) & 0x8080) )\n    LOBYTE(v8) = v8 >> 16;\n  if ( !((unsigned __int16)~(_WORD)v7 & (unsigned __int16)(v7 - 257) & 0x8080) )\n    v6 += 2;\n  v10 = 0;\n  v33 = (unsigned __int64)&v6[-__CFADD__((_BYTE)v8, (_BYTE)v8) - 3];\n  if ( v33 > (unsigned __int64)v5 )\n  {\n    while ( 1 )\n    {\n      if ( !v35 )\n      {\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*v9 >> 5) & 7)] >> *v9) & 1 )\n        {\n          v40 = 1LL;\n          v11 = *v9;\n          v12 = v39;\n          v13 = v33;\n          v41 = 1;\n          wc = v11;\n          v9 = v39 + 1;\n          goto LABEL_18;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_86;\n        v35 = 1;\n      }\n      v16 = sub_40AB50((wchar_t *)&wc, v9);\n      v17 = v16;\n      v40 = v16;\n      if ( v16 == -1 )\n      {\n        v12 = v39;\n        v13 = v33;\n        v41 = 0;\n        v40 = 1LL;\n        v9 = v39 + 1;\n      }\n      else\n      {\n        v12 = v39;\n        if ( v16 == -2 )\n        {\n          v9 = (char *)v33;\n          v41 = 0;\n          v13 = v33;\n          v40 = v33 - (_QWORD)v39;\n        }\n        else\n        {\n          if ( !v16 )\n          {\n            v40 = 1LL;\n            if ( *v39 )\n              goto LABEL_87;\n            if ( wc )\n              goto LABEL_88;\n            v17 = 1LL;\n          }\n          v41 = 1;\n          v9 = &v39[v17];\n          v13 = v33;\n          if ( mbsinit(&ps) )\n            v35 = 0;\n        }\n      }\nLABEL_18:\n      v38 = 1;\n      if ( !v10 )\n      {\n        v10 = 1;\n        if ( v41 )\n          v10 = iswspace(wc) == 0;\n        goto LABEL_14;\n      }\n      if ( v10 == 1 )\n      {\n        if ( v41 )\n        {\n          v18 = iswspace(wc);\n          if ( v18 )\n          {\n            a3 = v12;\n            if ( v18 )\n              v10 = 2;\n          }\n        }\n        goto LABEL_14;\n      }\n      if ( v10 == 2 && v41 )\n      {\n        v14 = iswspace(wc);\n        v39 = v9;\n        v38 = 0;\n        if ( !v14 )\n          v10 = 1;\n        if ( (unsigned __int64)v9 >= v13 )\n        {\nLABEL_25:\n          if ( v10 == 2 )\n            *a3 = 0;\n          return v5;\n        }\n      }\n      else\n      {\n        v10 = 1;\nLABEL_14:\n        v39 = v9;\n        v38 = 0;\n        if ( (unsigned __int64)v9 >= v13 )\n          goto LABEL_25;\n      }\n    }\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x408620L", 
            "funcEndAddr": "0x408bbcL", 
            "funcName": "sub_408620"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408BC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // r12@1\n  __int64 v7; // rbx@1\n  char *v8; // rax@3\n  char *v9; // rax@3\n  __int64 v10; // rax@5\n  __int64 v11; // r8@5\n  __int64 v12; // r13@5\n  __int64 v13; // r12@5\n  __int64 v14; // r15@5\n  __int64 v15; // ST40_8@5\n  __int64 v16; // r14@5\n  __int64 v17; // rbx@5\n  char *v18; // rax@5\n  int result; // eax@6\n  const char *v20; // rsi@7\n  __int64 v21; // r8@7\n  __int64 v22; // r13@7\n  __int64 v23; // r12@7\n  __int64 v24; // ST48_8@7\n  __int64 v25; // r15@7\n  __int64 v26; // r14@7\n  __int64 v27; // ST40_8@7\n  __int64 v28; // ST30_8@7\n  __int64 v29; // rbx@9\n  char *v30; // rax@9\n  __int64 v31; // r12@10\n  __int64 v32; // rbx@10\n  char *v33; // rax@10\n  __int64 v34; // r13@11\n  __int64 v35; // r12@11\n  __int64 v36; // rbx@11\n  char *v37; // rax@11\n  __int64 v38; // r14@12\n  __int64 v39; // r13@12\n  __int64 v40; // r12@12\n  __int64 v41; // rbx@12\n  char *v42; // rax@12\n  __int64 v43; // r15@14\n  __int64 v44; // r13@14\n  __int64 v45; // r12@14\n  __int64 v46; // r12@15\n  __int64 v47; // r15@15\n  __int64 v48; // r14@15\n  __int64 v49; // ST30_8@15\n  __int64 v50; // r13@15\n  __int64 v51; // rbx@15\n  char *v52; // rax@15\n  __int64 v53; // r13@17\n  __int64 v54; // r12@17\n  __int64 v55; // r15@17\n  __int64 v56; // r14@17\n  __int64 v57; // r8@17\n  __int64 v58; // ST38_8@17\n  __int64 v59; // r8@18\n  __int64 v60; // r13@18\n  __int64 v61; // r12@18\n  __int64 v62; // ST48_8@18\n  __int64 v63; // r15@18\n  __int64 v64; // r14@18\n  __int64 v65; // ST40_8@18\n  __int64 v66; // ST30_8@18\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 8LL:\n      v10 = *(_QWORD *)(v7 + 16);\n      v11 = *(_QWORD *)(v7 + 8);\n      v12 = *(_QWORD *)(v7 + 48);\n      v13 = *(_QWORD *)(v7 + 40);\n      v14 = *(_QWORD *)(v7 + 32);\n      v15 = *(_QWORD *)(v7 + 56);\n      v16 = *(_QWORD *)(v7 + 24);\n      v17 = *(_QWORD *)v7;\n      v18 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_6;\n    case 9LL:\n      v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v21 = *(_QWORD *)(v7 + 8);\n      v22 = *(_QWORD *)(v7 + 48);\n      v23 = *(_QWORD *)(v7 + 40);\n      v24 = *(_QWORD *)(v7 + 64);\n      v25 = *(_QWORD *)(v7 + 32);\n      v26 = *(_QWORD *)(v7 + 24);\n      v27 = *(_QWORD *)(v7 + 56);\n      v28 = *(_QWORD *)(v7 + 16);\n      v17 = *(_QWORD *)v7;\n      goto LABEL_8;\n    case 1LL:\n      v29 = *(_QWORD *)v7;\n      v30 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v30, v29);\n    case 2LL:\n      v31 = *(_QWORD *)(v7 + 8);\n      v32 = *(_QWORD *)v7;\n      v33 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v33, v32);\n    case 3LL:\n      v34 = *(_QWORD *)(v7 + 16);\n      v35 = *(_QWORD *)(v7 + 8);\n      v36 = *(_QWORD *)v7;\n      v37 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v37, v36);\n    case 4LL:\n      v38 = *(_QWORD *)(v7 + 24);\n      v39 = *(_QWORD *)(v7 + 16);\n      v40 = *(_QWORD *)(v7 + 8);\n      v41 = *(_QWORD *)v7;\n      v42 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v43 = *(_QWORD *)(v7 + 32);\n      v38 = *(_QWORD *)(v7 + 24);\n      v44 = *(_QWORD *)(v7 + 16);\n      v45 = *(_QWORD *)(v7 + 8);\n      v41 = *(_QWORD *)v7;\n      v42 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v42, v41);\n      return v38;\n    case 6LL:\n      v46 = *(_QWORD *)(v7 + 40);\n      v47 = *(_QWORD *)(v7 + 32);\n      v48 = *(_QWORD *)(v7 + 24);\n      v49 = *(_QWORD *)(v7 + 8);\n      v50 = *(_QWORD *)(v7 + 16);\n      v51 = *(_QWORD *)v7;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      goto LABEL_16;\n    case 7LL:\n      v53 = *(_QWORD *)(v7 + 48);\n      v54 = *(_QWORD *)(v7 + 40);\n      v55 = *(_QWORD *)(v7 + 32);\n      v56 = *(_QWORD *)(v7 + 24);\n      v57 = *(_QWORD *)(v7 + 8);\n      v58 = *(_QWORD *)(v7 + 16);\n      v51 = *(_QWORD *)v7;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\nLABEL_16:\n      result = __fprintf_chk(stream, 1LL, v52, v51);\n      break;\n    default:\n      v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = *(_QWORD *)(v7 + 8);\n      v60 = *(_QWORD *)(v7 + 48);\n      v61 = *(_QWORD *)(v7 + 40);\n      v62 = *(_QWORD *)(v7 + 64);\n      v63 = *(_QWORD *)(v7 + 32);\n      v64 = *(_QWORD *)(v7 + 24);\n      v65 = *(_QWORD *)(v7 + 56);\n      v66 = *(_QWORD *)(v7 + 16);\n      v17 = *(_QWORD *)v7;\nLABEL_8:\n      v18 = dcgettext(0LL, v20, 5);\nLABEL_6:\n      result = __fprintf_chk(stream, 1LL, v18, v17);\n      break;\n  }\n  return result;\n}\n\nint __fastcall sub_408BC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // r12@1\n  __int64 v7; // rbx@1\n  char *v8; // rax@3\n  char *v9; // rax@3\n  __int64 v10; // rax@5\n  __int64 v11; // r8@5\n  __int64 v12; // r13@5\n  __int64 v13; // r12@5\n  __int64 v14; // r15@5\n  __int64 v15; // ST40_8@5\n  __int64 v16; // r14@5\n  __int64 v17; // rbx@5\n  char *v18; // rax@5\n  int result; // eax@6\n  const char *v20; // rsi@7\n  __int64 v21; // r8@7\n  __int64 v22; // r13@7\n  __int64 v23; // r12@7\n  __int64 v24; // ST48_8@7\n  __int64 v25; // r15@7\n  __int64 v26; // r14@7\n  __int64 v27; // ST40_8@7\n  __int64 v28; // ST30_8@7\n  __int64 v29; // rbx@9\n  char *v30; // rax@9\n  __int64 v31; // r12@10\n  __int64 v32; // rbx@10\n  char *v33; // rax@10\n  __int64 v34; // r13@11\n  __int64 v35; // r12@11\n  __int64 v36; // rbx@11\n  char *v37; // rax@11\n  __int64 v38; // r14@12\n  __int64 v39; // r13@12\n  __int64 v40; // r12@12\n  __int64 v41; // rbx@12\n  char *v42; // rax@12\n  __int64 v43; // r15@14\n  __int64 v44; // r13@14\n  __int64 v45; // r12@14\n  __int64 v46; // r12@15\n  __int64 v47; // r15@15\n  __int64 v48; // r14@15\n  __int64 v49; // ST30_8@15\n  __int64 v50; // r13@15\n  __int64 v51; // rbx@15\n  char *v52; // rax@15\n  __int64 v53; // r13@17\n  __int64 v54; // r12@17\n  __int64 v55; // r15@17\n  __int64 v56; // r14@17\n  __int64 v57; // r8@17\n  __int64 v58; // ST38_8@17\n  __int64 v59; // r8@18\n  __int64 v60; // r13@18\n  __int64 v61; // r12@18\n  __int64 v62; // ST48_8@18\n  __int64 v63; // r15@18\n  __int64 v64; // r14@18\n  __int64 v65; // ST40_8@18\n  __int64 v66; // ST30_8@18\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 8LL:\n      v10 = *(_QWORD *)(v7 + 16);\n      v11 = *(_QWORD *)(v7 + 8);\n      v12 = *(_QWORD *)(v7 + 48);\n      v13 = *(_QWORD *)(v7 + 40);\n      v14 = *(_QWORD *)(v7 + 32);\n      v15 = *(_QWORD *)(v7 + 56);\n      v16 = *(_QWORD *)(v7 + 24);\n      v17 = *(_QWORD *)v7;\n      v18 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_6;\n    case 9LL:\n      v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v21 = *(_QWORD *)(v7 + 8);\n      v22 = *(_QWORD *)(v7 + 48);\n      v23 = *(_QWORD *)(v7 + 40);\n      v24 = *(_QWORD *)(v7 + 64);\n      v25 = *(_QWORD *)(v7 + 32);\n      v26 = *(_QWORD *)(v7 + 24);\n      v27 = *(_QWORD *)(v7 + 56);\n      v28 = *(_QWORD *)(v7 + 16);\n      v17 = *(_QWORD *)v7;\n      goto LABEL_8;\n    case 1LL:\n      v29 = *(_QWORD *)v7;\n      v30 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v30, v29);\n    case 2LL:\n      v31 = *(_QWORD *)(v7 + 8);\n      v32 = *(_QWORD *)v7;\n      v33 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v33, v32);\n    case 3LL:\n      v34 = *(_QWORD *)(v7 + 16);\n      v35 = *(_QWORD *)(v7 + 8);\n      v36 = *(_QWORD *)v7;\n      v37 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v37, v36);\n    case 4LL:\n      v38 = *(_QWORD *)(v7 + 24);\n      v39 = *(_QWORD *)(v7 + 16);\n      v40 = *(_QWORD *)(v7 + 8);\n      v41 = *(_QWORD *)v7;\n      v42 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v43 = *(_QWORD *)(v7 + 32);\n      v38 = *(_QWORD *)(v7 + 24);\n      v44 = *(_QWORD *)(v7 + 16);\n      v45 = *(_QWORD *)(v7 + 8);\n      v41 = *(_QWORD *)v7;\n      v42 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v42, v41);\n      return v38;\n    case 6LL:\n      v46 = *(_QWORD *)(v7 + 40);\n      v47 = *(_QWORD *)(v7 + 32);\n      v48 = *(_QWORD *)(v7 + 24);\n      v49 = *(_QWORD *)(v7 + 8);\n      v50 = *(_QWORD *)(v7 + 16);\n      v51 = *(_QWORD *)v7;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      goto LABEL_16;\n    case 7LL:\n      v53 = *(_QWORD *)(v7 + 48);\n      v54 = *(_QWORD *)(v7 + 40);\n      v55 = *(_QWORD *)(v7 + 32);\n      v56 = *(_QWORD *)(v7 + 24);\n      v57 = *(_QWORD *)(v7 + 8);\n      v58 = *(_QWORD *)(v7 + 16);\n      v51 = *(_QWORD *)v7;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\nLABEL_16:\n      result = __fprintf_chk(stream, 1LL, v52, v51);\n      break;\n    default:\n      v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = *(_QWORD *)(v7 + 8);\n      v60 = *(_QWORD *)(v7 + 48);\n      v61 = *(_QWORD *)(v7 + 40);\n      v62 = *(_QWORD *)(v7 + 64);\n      v63 = *(_QWORD *)(v7 + 32);\n      v64 = *(_QWORD *)(v7 + 24);\n      v65 = *(_QWORD *)(v7 + 56);\n      v66 = *(_QWORD *)(v7 + 16);\n      v17 = *(_QWORD *)v7;\nLABEL_8:\n      v18 = dcgettext(0LL, v20, 5);\nLABEL_6:\n      result = __fprintf_chk(stream, 1LL, v18, v17);\n      break;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x401feeL", 
            "funcEndAddr": "0x401ff3L", 
            "funcName": "sub_408BC0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408BC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // r12@1\n  __int64 v7; // rbx@1\n  char *v8; // rax@3\n  char *v9; // rax@3\n  __int64 v10; // rax@5\n  __int64 v11; // r8@5\n  __int64 v12; // r13@5\n  __int64 v13; // r12@5\n  __int64 v14; // r15@5\n  __int64 v15; // ST40_8@5\n  __int64 v16; // r14@5\n  __int64 v17; // rbx@5\n  char *v18; // rax@5\n  int result; // eax@6\n  const char *v20; // rsi@7\n  __int64 v21; // r8@7\n  __int64 v22; // r13@7\n  __int64 v23; // r12@7\n  __int64 v24; // ST48_8@7\n  __int64 v25; // r15@7\n  __int64 v26; // r14@7\n  __int64 v27; // ST40_8@7\n  __int64 v28; // ST30_8@7\n  __int64 v29; // rbx@9\n  char *v30; // rax@9\n  __int64 v31; // r12@10\n  __int64 v32; // rbx@10\n  char *v33; // rax@10\n  __int64 v34; // r13@11\n  __int64 v35; // r12@11\n  __int64 v36; // rbx@11\n  char *v37; // rax@11\n  __int64 v38; // r14@12\n  __int64 v39; // r13@12\n  __int64 v40; // r12@12\n  __int64 v41; // rbx@12\n  char *v42; // rax@12\n  __int64 v43; // r15@14\n  __int64 v44; // r13@14\n  __int64 v45; // r12@14\n  __int64 v46; // r12@15\n  __int64 v47; // r15@15\n  __int64 v48; // r14@15\n  __int64 v49; // ST30_8@15\n  __int64 v50; // r13@15\n  __int64 v51; // rbx@15\n  char *v52; // rax@15\n  __int64 v53; // r13@17\n  __int64 v54; // r12@17\n  __int64 v55; // r15@17\n  __int64 v56; // r14@17\n  __int64 v57; // r8@17\n  __int64 v58; // ST38_8@17\n  __int64 v59; // r8@18\n  __int64 v60; // r13@18\n  __int64 v61; // r12@18\n  __int64 v62; // ST48_8@18\n  __int64 v63; // r15@18\n  __int64 v64; // r14@18\n  __int64 v65; // ST40_8@18\n  __int64 v66; // ST30_8@18\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 8LL:\n      v10 = *(_QWORD *)(v7 + 16);\n      v11 = *(_QWORD *)(v7 + 8);\n      v12 = *(_QWORD *)(v7 + 48);\n      v13 = *(_QWORD *)(v7 + 40);\n      v14 = *(_QWORD *)(v7 + 32);\n      v15 = *(_QWORD *)(v7 + 56);\n      v16 = *(_QWORD *)(v7 + 24);\n      v17 = *(_QWORD *)v7;\n      v18 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_6;\n    case 9LL:\n      v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v21 = *(_QWORD *)(v7 + 8);\n      v22 = *(_QWORD *)(v7 + 48);\n      v23 = *(_QWORD *)(v7 + 40);\n      v24 = *(_QWORD *)(v7 + 64);\n      v25 = *(_QWORD *)(v7 + 32);\n      v26 = *(_QWORD *)(v7 + 24);\n      v27 = *(_QWORD *)(v7 + 56);\n      v28 = *(_QWORD *)(v7 + 16);\n      v17 = *(_QWORD *)v7;\n      goto LABEL_8;\n    case 1LL:\n      v29 = *(_QWORD *)v7;\n      v30 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v30, v29);\n    case 2LL:\n      v31 = *(_QWORD *)(v7 + 8);\n      v32 = *(_QWORD *)v7;\n      v33 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v33, v32);\n    case 3LL:\n      v34 = *(_QWORD *)(v7 + 16);\n      v35 = *(_QWORD *)(v7 + 8);\n      v36 = *(_QWORD *)v7;\n      v37 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v37, v36);\n    case 4LL:\n      v38 = *(_QWORD *)(v7 + 24);\n      v39 = *(_QWORD *)(v7 + 16);\n      v40 = *(_QWORD *)(v7 + 8);\n      v41 = *(_QWORD *)v7;\n      v42 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v43 = *(_QWORD *)(v7 + 32);\n      v38 = *(_QWORD *)(v7 + 24);\n      v44 = *(_QWORD *)(v7 + 16);\n      v45 = *(_QWORD *)(v7 + 8);\n      v41 = *(_QWORD *)v7;\n      v42 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v42, v41);\n      return v38;\n    case 6LL:\n      v46 = *(_QWORD *)(v7 + 40);\n      v47 = *(_QWORD *)(v7 + 32);\n      v48 = *(_QWORD *)(v7 + 24);\n      v49 = *(_QWORD *)(v7 + 8);\n      v50 = *(_QWORD *)(v7 + 16);\n      v51 = *(_QWORD *)v7;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      goto LABEL_16;\n    case 7LL:\n      v53 = *(_QWORD *)(v7 + 48);\n      v54 = *(_QWORD *)(v7 + 40);\n      v55 = *(_QWORD *)(v7 + 32);\n      v56 = *(_QWORD *)(v7 + 24);\n      v57 = *(_QWORD *)(v7 + 8);\n      v58 = *(_QWORD *)(v7 + 16);\n      v51 = *(_QWORD *)v7;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\nLABEL_16:\n      result = __fprintf_chk(stream, 1LL, v52, v51);\n      break;\n    default:\n      v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = *(_QWORD *)(v7 + 8);\n      v60 = *(_QWORD *)(v7 + 48);\n      v61 = *(_QWORD *)(v7 + 40);\n      v62 = *(_QWORD *)(v7 + 64);\n      v63 = *(_QWORD *)(v7 + 32);\n      v64 = *(_QWORD *)(v7 + 24);\n      v65 = *(_QWORD *)(v7 + 56);\n      v66 = *(_QWORD *)(v7 + 16);\n      v17 = *(_QWORD *)v7;\nLABEL_8:\n      v18 = dcgettext(0LL, v20, 5);\nLABEL_6:\n      result = __fprintf_chk(stream, 1LL, v18, v17);\n      break;\n  }\n  return result;\n}\n\nint __fastcall sub_408BC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // r12@1\n  __int64 v7; // rbx@1\n  char *v8; // rax@3\n  char *v9; // rax@3\n  __int64 v10; // rax@5\n  __int64 v11; // r8@5\n  __int64 v12; // r13@5\n  __int64 v13; // r12@5\n  __int64 v14; // r15@5\n  __int64 v15; // ST40_8@5\n  __int64 v16; // r14@5\n  __int64 v17; // rbx@5\n  char *v18; // rax@5\n  int result; // eax@6\n  const char *v20; // rsi@7\n  __int64 v21; // r8@7\n  __int64 v22; // r13@7\n  __int64 v23; // r12@7\n  __int64 v24; // ST48_8@7\n  __int64 v25; // r15@7\n  __int64 v26; // r14@7\n  __int64 v27; // ST40_8@7\n  __int64 v28; // ST30_8@7\n  __int64 v29; // rbx@9\n  char *v30; // rax@9\n  __int64 v31; // r12@10\n  __int64 v32; // rbx@10\n  char *v33; // rax@10\n  __int64 v34; // r13@11\n  __int64 v35; // r12@11\n  __int64 v36; // rbx@11\n  char *v37; // rax@11\n  __int64 v38; // r14@12\n  __int64 v39; // r13@12\n  __int64 v40; // r12@12\n  __int64 v41; // rbx@12\n  char *v42; // rax@12\n  __int64 v43; // r15@14\n  __int64 v44; // r13@14\n  __int64 v45; // r12@14\n  __int64 v46; // r12@15\n  __int64 v47; // r15@15\n  __int64 v48; // r14@15\n  __int64 v49; // ST30_8@15\n  __int64 v50; // r13@15\n  __int64 v51; // rbx@15\n  char *v52; // rax@15\n  __int64 v53; // r13@17\n  __int64 v54; // r12@17\n  __int64 v55; // r15@17\n  __int64 v56; // r14@17\n  __int64 v57; // r8@17\n  __int64 v58; // ST38_8@17\n  __int64 v59; // r8@18\n  __int64 v60; // r13@18\n  __int64 v61; // r12@18\n  __int64 v62; // ST48_8@18\n  __int64 v63; // r15@18\n  __int64 v64; // r14@18\n  __int64 v65; // ST40_8@18\n  __int64 v66; // ST30_8@18\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 8LL:\n      v10 = *(_QWORD *)(v7 + 16);\n      v11 = *(_QWORD *)(v7 + 8);\n      v12 = *(_QWORD *)(v7 + 48);\n      v13 = *(_QWORD *)(v7 + 40);\n      v14 = *(_QWORD *)(v7 + 32);\n      v15 = *(_QWORD *)(v7 + 56);\n      v16 = *(_QWORD *)(v7 + 24);\n      v17 = *(_QWORD *)v7;\n      v18 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_6;\n    case 9LL:\n      v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v21 = *(_QWORD *)(v7 + 8);\n      v22 = *(_QWORD *)(v7 + 48);\n      v23 = *(_QWORD *)(v7 + 40);\n      v24 = *(_QWORD *)(v7 + 64);\n      v25 = *(_QWORD *)(v7 + 32);\n      v26 = *(_QWORD *)(v7 + 24);\n      v27 = *(_QWORD *)(v7 + 56);\n      v28 = *(_QWORD *)(v7 + 16);\n      v17 = *(_QWORD *)v7;\n      goto LABEL_8;\n    case 1LL:\n      v29 = *(_QWORD *)v7;\n      v30 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v30, v29);\n    case 2LL:\n      v31 = *(_QWORD *)(v7 + 8);\n      v32 = *(_QWORD *)v7;\n      v33 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v33, v32);\n    case 3LL:\n      v34 = *(_QWORD *)(v7 + 16);\n      v35 = *(_QWORD *)(v7 + 8);\n      v36 = *(_QWORD *)v7;\n      v37 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v37, v36);\n    case 4LL:\n      v38 = *(_QWORD *)(v7 + 24);\n      v39 = *(_QWORD *)(v7 + 16);\n      v40 = *(_QWORD *)(v7 + 8);\n      v41 = *(_QWORD *)v7;\n      v42 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v43 = *(_QWORD *)(v7 + 32);\n      v38 = *(_QWORD *)(v7 + 24);\n      v44 = *(_QWORD *)(v7 + 16);\n      v45 = *(_QWORD *)(v7 + 8);\n      v41 = *(_QWORD *)v7;\n      v42 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v42, v41);\n      return v38;\n    case 6LL:\n      v46 = *(_QWORD *)(v7 + 40);\n      v47 = *(_QWORD *)(v7 + 32);\n      v48 = *(_QWORD *)(v7 + 24);\n      v49 = *(_QWORD *)(v7 + 8);\n      v50 = *(_QWORD *)(v7 + 16);\n      v51 = *(_QWORD *)v7;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      goto LABEL_16;\n    case 7LL:\n      v53 = *(_QWORD *)(v7 + 48);\n      v54 = *(_QWORD *)(v7 + 40);\n      v55 = *(_QWORD *)(v7 + 32);\n      v56 = *(_QWORD *)(v7 + 24);\n      v57 = *(_QWORD *)(v7 + 8);\n      v58 = *(_QWORD *)(v7 + 16);\n      v51 = *(_QWORD *)v7;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\nLABEL_16:\n      result = __fprintf_chk(stream, 1LL, v52, v51);\n      break;\n    default:\n      v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = *(_QWORD *)(v7 + 8);\n      v60 = *(_QWORD *)(v7 + 48);\n      v61 = *(_QWORD *)(v7 + 40);\n      v62 = *(_QWORD *)(v7 + 64);\n      v63 = *(_QWORD *)(v7 + 32);\n      v64 = *(_QWORD *)(v7 + 24);\n      v65 = *(_QWORD *)(v7 + 56);\n      v66 = *(_QWORD *)(v7 + 16);\n      v17 = *(_QWORD *)v7;\nLABEL_8:\n      v18 = dcgettext(0LL, v20, 5);\nLABEL_6:\n      result = __fprintf_chk(stream, 1LL, v18, v17);\n      break;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x401feeL", 
            "funcEndAddr": "0x401ff3L", 
            "funcName": "sub_408BC0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409020(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10@1\n  signed int v8; // er8@1\n  __int64 v9; // r9@1\n  __int64 v10; // rax@2\n  __int64 v11; // rax@2\n  __int64 *v12; // rax@5\n  __int64 v13; // rax@5\n  __int64 v15[10]; // [sp+20h] [bp-88h]@2\n  char v16[32]; // [sp+70h] [bp-38h]@2\n  __int64 v17; // [sp+90h] [bp-18h]@1\n  __int64 v18; // [sp+98h] [bp-10h]@1\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  v9 = 0LL;\n  do\n  {\n    if ( (unsigned int)v8 <= 0x2F )\n    {\n      v10 = (unsigned int)v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[v9] = v11;\n      if ( !v11 )\n        return sub_408BC0(a1, a2, a3, a4, (__int64)v15, v9);\n      goto LABEL_3;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[v9] = v13;\n    if ( !v13 )\n      break;\nLABEL_3:\n    ++v9;\n  }\n  while ( v9 != 10 );\n  return sub_408BC0(a1, a2, a3, a4, (__int64)v15, v9);\n}\n", 
            "funcStartAddr": "0x409020L", 
            "funcEndAddr": "0x4090dcL", 
            "funcName": "sub_409020"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409160(size_t a1, __int64 a2)\n{\n  void *result; // rax@1\n  __int64 v3; // rdx@1\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_4093B0(a1, a2, v3);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409160L", 
            "funcEndAddr": "0x40917aL", 
            "funcName": "sub_409160"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4091C0(void *a1, size_t a2)\n{\n  void *result; // rax@3\n  __int64 v3; // rdx@3\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_4093B0(a1, a2, v3);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4091c0L", 
            "funcEndAddr": "0x4091f6L", 
            "funcName": "sub_4091C0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409230(void *a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // r9@1\n  unsigned __int64 v4; // rcx@1\n  unsigned __int64 v5; // rdx@2\n\n  v3 = a3;\n  v4 = *a2;\n  if ( a1 )\n  {\n    v5 = 0x5555555555555554LL % a3;\n    if ( 0x5555555555555554LL / v3 > v4 )\n    {\n      v4 += (v4 >> 1) + 1;\n      goto LABEL_4;\n    }\nLABEL_9:\n    sub_4093B0(a1, a2, v5);\n  }\n  if ( !v4 )\n    v4 = (a3 > 0x80) + 0x80 / a3;\n  v5 = a3 * (unsigned __int128)v4 >> 64 != 0;\n  if ( (v3 * v4 & 0x8000000000000000LL) != 0LL || v3 * (unsigned __int128)v4 >> 64 != 0 )\n    goto LABEL_9;\nLABEL_4:\n  *a2 = v4;\n  return sub_4091C0(a1, v3 * v4);\n}\n", 
            "funcStartAddr": "0x409230L", 
            "funcEndAddr": "0x4092b6L", 
            "funcName": "sub_409230"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409360(const void *a1, size_t a2)\n{\n  void *v2; // rax@1\n\n  v2 = sub_409160(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n", 
            "funcStartAddr": "0x409360L", 
            "funcEndAddr": "0x409388L", 
            "funcName": "sub_409360"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4093B0()\n{\n  char *v0; // rax@1\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x4093b0L", 
            "funcEndAddr": "0x4093e1L", 
            "funcName": "sub_4093B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409440(char *a1, char *a2, char *a3)\n{\n  __int64 v3; // rbx@1\n\n  v3 = sub_41AFE0(a1, a2, a3);\n  if ( !v3 && *__errno_location() == 12 )\n    sub_4093B0();\n  return v3;\n}\n", 
            "funcStartAddr": "0x409440L", 
            "funcEndAddr": "0x409467L", 
            "funcName": "sub_409440"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409470(char *nptr, char **a2, unsigned int a3, signed __int64 *a4, const char *a5)\n{\n  char **v5; // rbx@2\n  int v6; // ebp@2\n  const char *v7; // r14@4\n  int *v8; // rax@4\n  int *v9; // r13@4\n  __int64 v10; // rax@4\n  char *v11; // r15@4\n  signed __int64 v12; // rbp@4\n  signed int v13; // er12@6\n  int v14; // er13@8\n  signed __int64 v16; // rsi@17\n  signed int v17; // eax@17\n  signed __int64 v18; // rax@19\n  char v19; // al@21\n  char *v20; // rsi@31\n  signed __int64 v21; // rcx@37\n  signed __int64 v22; // rax@37\n  signed __int64 v23; // rax@39\n  signed __int64 v24; // rdi@42\n  signed __int64 v25; // rcx@52\n  signed __int64 v26; // r9@52\n  signed int v27; // edi@53\n  signed int v28; // er10@53\n  signed __int64 v29; // rcx@59\n  signed __int64 v30; // r9@59\n  signed int v31; // edi@60\n  signed __int64 v32; // rcx@66\n  signed __int64 v33; // r9@66\n  signed int v34; // edi@67\n  signed __int64 v35; // rcx@73\n  signed __int64 v36; // r9@73\n  signed int v37; // edi@74\n  signed __int64 v38; // rcx@80\n  signed __int64 v39; // r9@80\n  signed int v40; // edi@81\n  signed __int64 v41; // rcx@87\n  signed __int64 v42; // r9@87\n  signed int v43; // edi@88\n  signed __int64 *v44; // [sp+0h] [bp-58h]@1\n  char *endptr; // [sp+18h] [bp-40h]@3\n\n  v44 = a4;\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoimax\");\n  v5 = a2;\n  v6 = a3;\n  if ( !a2 )\n    v5 = &endptr;\n  v7 = a5;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = __strtol_internal(nptr, v5, v6, 0);\n  v11 = *v5;\n  v12 = v10;\n  if ( *v5 == nptr )\n  {\n    if ( !v7 )\n      goto LABEL_117;\n    v14 = (unsigned __int8)*v11;\n    v13 = 4;\n    if ( !(_BYTE)v14 )\n      return (unsigned int)v13;\n    v12 = 1LL;\n    v13 = 0;\n    if ( !strchr(v7, (char)v14) )\nLABEL_117:\n      return 4;\nLABEL_16:\n    if ( (unsigned __int8)(v14 - 69) <= 0x2Fu\n      && (v18 = 142129060940101LL, _bittest64(&v18, (unsigned int)(v14 - 69)))\n      && strchr(v7, 48) )\n    {\n      v19 = v11[1];\n      if ( v19 != 68 )\n      {\n        if ( v19 == 105 )\n        {\n          v17 = 1024;\n          LODWORD(v16) = 2 * (v11[2] == 66) + 1;\n          goto LABEL_18;\n        }\n        if ( v19 != 66 )\n        {\n          switch ( (unsigned __int64)(unsigned __int8)(v14 - 69) )\n          {\n            case 0uLL:\n              v16 = 1LL;\n              v32 = 1024LL;\n              v33 = -9007199254740992LL;\n              goto LABEL_67;\n            case 1uLL:\n            case 3uLL:\n            case 4uLL:\n            case 5uLL:\n            case 7uLL:\n            case 9uLL:\n            case 0xAuLL:\n            case 0xCuLL:\n            case 0xDuLL:\n            case 0xEuLL:\n            case 0x10uLL:\n            case 0x11uLL:\n            case 0x12uLL:\n            case 0x13uLL:\n            case 0x16uLL:\n            case 0x17uLL:\n            case 0x18uLL:\n            case 0x19uLL:\n            case 0x1AuLL:\n            case 0x1BuLL:\n            case 0x1CuLL:\n            case 0x1FuLL:\n            case 0x20uLL:\n            case 0x21uLL:\n            case 0x23uLL:\n            case 0x24uLL:\n            case 0x25uLL:\n            case 0x27uLL:\n            case 0x29uLL:\n            case 0x2AuLL:\n            case 0x2BuLL:\n            case 0x2CuLL:\n            case 0x2DuLL:\n            case 0x2EuLL:\n              goto LABEL_27;\n            case 2uLL:\n            case 0x22uLL:\n              v16 = 1LL;\n              v35 = 1024LL;\n              v36 = -9007199254740992LL;\n              goto LABEL_74;\n            case 6uLL:\n            case 0x26uLL:\n              v16 = 1LL;\n              v21 = 1024LL;\n              v22 = -9007199254740992LL;\n              goto LABEL_38;\n            case 8uLL:\n            case 0x28uLL:\n              v16 = 1LL;\n              v21 = 1024LL;\n              v24 = -9007199254740992LL;\n              goto LABEL_43;\n            case 0xBuLL:\n              v16 = 1LL;\n              v25 = 1024LL;\n              v26 = -9007199254740992LL;\n              goto LABEL_53;\n            case 0xFuLL:\n            case 0x2FuLL:\n              v16 = 1LL;\n              v29 = 1024LL;\n              v30 = -9007199254740992LL;\n              goto LABEL_60;\n            case 0x14uLL:\n              v16 = 1LL;\n              v38 = 1024LL;\n              v39 = -9007199254740992LL;\n              goto LABEL_81;\n            case 0x15uLL:\n              v16 = 1LL;\n              v41 = 1024LL;\n              v42 = -9007199254740992LL;\n              goto LABEL_88;\n            case 0x1DuLL:\n              v16 = 1LL;\n              goto LABEL_48;\n            case 0x1EuLL:\n              v16 = 1LL;\n              break;\n          }\nLABEL_31:\n          v20 = &v11[v16];\n          *v5 = v20;\n          if ( *v20 )\n            v13 |= 2u;\n          goto LABEL_9;\n        }\n      }\n      LODWORD(v16) = 2;\n      v17 = 1000;\n    }\n    else\n    {\n      LODWORD(v16) = 1;\n      v17 = 1024;\n    }\nLABEL_18:\n    switch ( (_BYTE)v14 )\n    {\n      default:\n        goto LABEL_27;\n      case 0x42:\n        v16 = (signed int)v16;\n        if ( v12 < -9007199254740992LL )\n          goto LABEL_46;\n        if ( v12 > 0x1FFFFFFFFFFFFFLL )\n          goto LABEL_105;\n        v12 <<= 10;\n        goto LABEL_31;\n      case 0x77:\n        v16 = (signed int)v16;\n        if ( v12 < -4611686018427387904LL )\n          goto LABEL_46;\n        if ( v12 > 0x3FFFFFFFFFFFFFFFLL )\n          goto LABEL_105;\n        v12 *= 2LL;\n        goto LABEL_31;\n      case 0x4B:\n      case 0x6B:\n        v21 = v17;\n        v16 = (signed int)v16;\n        v22 = (signed __int64)0x8000000000000000LL / v17;\nLABEL_38:\n        if ( v12 < v22 )\n          goto LABEL_46;\n        v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n        goto LABEL_40;\n      case 0x4D:\n      case 0x6D:\n        v21 = v17;\n        v16 = (signed int)v16;\n        v24 = (signed __int64)0x8000000000000000LL / v17;\nLABEL_43:\n        if ( v12 < v24 )\n          goto LABEL_46;\n        v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n        if ( v12 > 0x7FFFFFFFFFFFFFFFLL / v21 )\n          goto LABEL_105;\n        v12 *= v21;\n        if ( v12 < v24 )\n          goto LABEL_46;\nLABEL_40:\n        if ( v23 < v12 )\n          goto LABEL_105;\n        v12 *= v21;\n        goto LABEL_31;\n      case 0x62:\n        v16 = (signed int)v16;\nLABEL_48:\n        if ( v12 < -18014398509481984LL )\n        {\nLABEL_46:\n          v12 = 0x8000000000000000LL;\n          v13 = 1;\n        }\n        else if ( v12 > 0x3FFFFFFFFFFFFFLL )\n        {\nLABEL_105:\n          v12 = 0x7FFFFFFFFFFFFFFFLL;\n          v13 = 1;\n        }\n        else\n        {\n          v12 <<= 9;\n        }\n        goto LABEL_31;\n      case 0x63:\n        v16 = (signed int)v16;\n        goto LABEL_31;\n      case 0x50:\n        v25 = v17;\n        v16 = (signed int)v16;\n        v26 = (signed __int64)0x8000000000000000LL / v17;\nLABEL_53:\n        v27 = 5;\n        v28 = 0;\n        do\n        {\n          if ( v26 <= v12 )\n          {\n            if ( 0x7FFFFFFFFFFFFFFFLL / v25 < v12 )\n            {\n              v12 = 0x7FFFFFFFFFFFFFFFLL;\n              v28 = 1;\n            }\n            else\n            {\n              v12 *= v25;\n            }\n          }\n          else\n          {\n            v12 = 0x8000000000000000LL;\n            v28 = 1;\n          }\n          --v27;\n        }\n        while ( v27 );\n        break;\n      case 0x54:\n      case 0x74:\n        v29 = v17;\n        v16 = (signed int)v16;\n        v30 = (signed __int64)0x8000000000000000LL / v17;\nLABEL_60:\n        v31 = 4;\n        v28 = 0;\n        do\n        {\n          if ( v30 <= v12 )\n          {\n            if ( 0x7FFFFFFFFFFFFFFFLL / v29 < v12 )\n            {\n              v12 = 0x7FFFFFFFFFFFFFFFLL;\n              v28 = 1;\n            }\n            else\n            {\n              v12 *= v29;\n            }\n          }\n          else\n          {\n            v12 = 0x8000000000000000LL;\n            v28 = 1;\n          }\n          --v31;\n        }\n        while ( v31 );\n        break;\n      case 0x45:\n        v32 = v17;\n        v16 = (signed int)v16;\n        v33 = (signed __int64)0x8000000000000000LL / v17;\nLABEL_67:\n        v34 = 6;\n        v28 = 0;\n        do\n        {\n          if ( v12 >= v33 )\n          {\n            if ( 0x7FFFFFFFFFFFFFFFLL / v32 < v12 )\n            {\n              v12 = 0x7FFFFFFFFFFFFFFFLL;\n              v28 = 1;\n            }\n            else\n            {\n              v12 *= v32;\n            }\n          }\n          else\n          {\n            v12 = 0x8000000000000000LL;\n            v28 = 1;\n          }\n          --v34;\n        }\n        while ( v34 );\n        break;\n      case 0x47:\n      case 0x67:\n        v35 = v17;\n        v16 = (signed int)v16;\n        v36 = (signed __int64)0x8000000000000000LL / v17;\nLABEL_74:\n        v37 = 3;\n        v28 = 0;\n        do\n        {\n          if ( v12 >= v36 )\n          {\n            if ( 0x7FFFFFFFFFFFFFFFLL / v35 < v12 )\n            {\n              v12 = 0x7FFFFFFFFFFFFFFFLL;\n              v28 = 1;\n            }\n            else\n            {\n              v12 *= v35;\n            }\n          }\n          else\n          {\n            v12 = 0x8000000000000000LL;\n            v28 = 1;\n          }\n          --v37;\n        }\n        while ( v37 );\n        break;\n      case 0x59:\n        v38 = v17;\n        v16 = (signed int)v16;\n        v39 = (signed __int64)0x8000000000000000LL / v17;\nLABEL_81:\n        v40 = 8;\n        v28 = 0;\n        do\n        {\n          if ( v39 <= v12 )\n          {\n            if ( 0x7FFFFFFFFFFFFFFFLL / v38 < v12 )\n            {\n              v12 = 0x7FFFFFFFFFFFFFFFLL;\n              v28 = 1;\n            }\n            else\n            {\n              v12 *= v38;\n            }\n          }\n          else\n          {\n            v12 = 0x8000000000000000LL;\n            v28 = 1;\n          }\n          --v40;\n        }\n        while ( v40 );\n        break;\n      case 0x5A:\n        v41 = v17;\n        v16 = (signed int)v16;\n        v42 = (signed __int64)0x8000000000000000LL / v17;\nLABEL_88:\n        v43 = 7;\n        v28 = 0;\n        do\n        {\n          if ( v42 <= v12 )\n          {\n            if ( 0x7FFFFFFFFFFFFFFFLL / v41 < v12 )\n            {\n              v12 = 0x7FFFFFFFFFFFFFFFLL;\n              v28 = 1;\n            }\n            else\n            {\n              v12 *= v41;\n            }\n          }\n          else\n          {\n            v12 = 0x8000000000000000LL;\n            v28 = 1;\n          }\n          --v43;\n        }\n        while ( v43 );\n        break;\n    }\n    v13 |= v28;\n    goto LABEL_31;\n  }\n  if ( *v9 )\n  {\n    v13 = 4;\n    if ( *v9 != 34 )\n      return (unsigned int)v13;\n    v13 = 1;\n  }\n  else\n  {\n    v13 = 0;\n  }\n  if ( v7 )\n  {\n    v14 = (unsigned __int8)*v11;\n    if ( (_BYTE)v14 )\n    {\n      if ( !strchr(v7, (char)v14) )\n      {\nLABEL_27:\n        v13 |= 2u;\n        *v44 = v12;\n        return (unsigned int)v13;\n      }\n      goto LABEL_16;\n    }\n  }\nLABEL_9:\n  *v44 = v12;\n  return (unsigned int)v13;\n}\n", 
            "funcStartAddr": "0x409470L", 
            "funcEndAddr": "0x409bb2L", 
            "funcName": "sub_409470"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409BC0(FILE *stream)\n{\n  int *v1; // rax@4\n  int v2; // er12@4\n  int *v3; // rbp@4\n  int result; // eax@4\n  int v5; // eax@7\n\n  if ( fileno(stream) < 0 || __freading(stream) && (v5 = fileno(stream), lseek(v5, 0LL, 1) == -1) || !sub_409C40(stream) )\n  {\n    result = fclose(stream);\n  }\n  else\n  {\n    v1 = __errno_location();\n    v2 = *v1;\n    v3 = v1;\n    result = fclose(stream);\n    if ( v2 )\n    {\n      *v3 = v2;\n      result = -1;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409bc0L", 
            "funcEndAddr": "0x409c3bL", 
            "funcName": "sub_409BC0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409C40(FILE *a1)\n{\n  int result; // eax@4\n\n  if ( a1 && __freading(a1) && a1->_flags & 0x100 )\n  {\n    sub_409D20(a1, 0LL, 1LL);\n    result = fflush(a1);\n  }\n  else\n  {\n    result = fflush(a1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409c40L", 
            "funcEndAddr": "0x409c80L", 
            "funcName": "sub_409C40"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_409C80(const char *a1, const char *a2, FILE *a3)\n{\n  FILE *v3; // rax@1\n  FILE *v4; // rbx@1\n  int v5; // er13@3\n  int v7; // eax@6\n  int v8; // er14@6\n\n  v3 = freopen(a1, a2, a3);\n  v4 = v3;\n  if ( !v3 )\n    return v4;\n  if ( !a1 )\n    return v4;\n  v5 = fileno(v3);\n  if ( dup2(v5, v5) >= 0 || *__errno_location() != 9 )\n    return v4;\n  v7 = open(\"/dev/null\", 0x80000);\n  v8 = v7;\n  if ( v5 != v7 )\n  {\n    if ( dup2(v7, v5) >= 0 )\n    {\n      close(v8);\n      return freopen(a1, a2, v4);\n    }\n    close(v8);\n    return v4;\n  }\n  return freopen(a1, a2, v4);\n}\n", 
            "funcStartAddr": "0x409c80L", 
            "funcEndAddr": "0x409d1eL", 
            "funcName": "sub_409C80"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409D20(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax@2\n  int v4; // er12@5\n  int v5; // eax@5\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x409d20L", 
            "funcEndAddr": "0x409d77L", 
            "funcName": "sub_409D20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409D80(__int64 a1, __int64 a2)\n{\n  signed __int64 v2; // r11@1\n  int v3; // er12@1\n  int v4; // ebp@1\n  __int64 v5; // rbx@1\n  int v6; // er9@1\n  int v7; // er10@1\n  int v8; // er8@1\n  int v9; // er14@4\n  int v10; // edx@4\n  __int64 *v11; // rax@5\n  unsigned __int64 v12; // r13@5\n  signed __int64 v13; // rdx@5\n  __int64 v14; // rcx@6\n  __int64 result; // rax@8\n  __int64 *v16; // rax@9\n  __int64 v17; // rdx@9\n  __int64 v18; // rcx@10\n\n  v2 = a1 + 8;\n  v3 = *(_DWORD *)(a2 + 44);\n  v4 = *(_DWORD *)a2;\n  v5 = *(_DWORD *)(a2 + 48);\n  v6 = *(_DWORD *)(a2 + 44);\n  v7 = *(_DWORD *)a2;\n  v8 = *(_DWORD *)(a2 + 48);\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (signed __int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  *(_DWORD *)(a2 + 48) = v4;\n  result = (unsigned int)(v4 - v8);\n  *(_DWORD *)(a2 + 44) = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x409d80L", 
            "funcEndAddr": "0x409e5fL", 
            "funcName": "sub_409D80"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_409E60(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, __int64 a7, int a8, __int64 a9)\n{\n  const char *v9; // r14@1\n  char *v10; // rbp@1\n  size_t v11; // r13@5\n  char **v12; // rbx@6\n  __int64 v13; // r12@6\n  const char *v14; // r15@6\n  const char *v15; // rdi@12\n  __int64 v16; // r15@12\n  char **v17; // rbp@12\n  char *v18; // rdx@26\n  signed __int64 result; // rax@26\n  int v20; // edx@31\n  int v21; // eax@31\n  int v22; // ecx@31\n  char *v23; // rdx@35\n  __int64 v24; // rbx@28\n  char *v25; // rax@28\n  __int64 v26; // rbx@49\n  char *v27; // rax@49\n  const char *v28; // r12@57\n  __int64 v29; // rbp@57\n  char *v30; // rax@57\n  __int64 v31; // rbx@64\n  __int64 v32; // rbp@64\n  char *v33; // rax@64\n  FILE *v34; // rdi@64\n  char **v35; // rbx@64\n  _BYTE *v36; // rbp@64\n  signed __int64 v37; // r12@64\n  char *v38; // r8@67\n  const char *v39; // r12@62\n  __int64 v40; // rbp@62\n  char *v41; // rax@62\n  char **v42; // [sp+0h] [bp-88h]@1\n  int v43; // [sp+Ch] [bp-7Ch]@1\n  char *s1; // [sp+10h] [bp-78h]@6\n  char *s1a; // [sp+10h] [bp-78h]@12\n  _BYTE *ptr; // [sp+18h] [bp-70h]@12\n  _DWORD *v47; // [sp+20h] [bp-68h]@1\n  char *s; // [sp+30h] [bp-58h]@1\n  signed int v49; // [sp+38h] [bp-50h]@12\n  char v50; // [sp+3Fh] [bp-49h]@1\n  int v51; // [sp+40h] [bp-48h]@1\n  signed int v52; // [sp+44h] [bp-44h]@12\n  signed int v53; // [sp+48h] [bp-40h]@12\n\n  v51 = a1;\n  v9 = *(const char **)(a7 + 32);\n  s = a3;\n  v42 = a4;\n  v47 = a5;\n  v10 = *(char **)(a7 + 32);\n  v43 = a6;\n  v50 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v43 || *(_BYTE *)(a2[*(_DWORD *)a7] + 1) == 45 || (v18 = strchr(s, v50), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *(_QWORD *)(a7 + 32) = 0LL;\n      ++*(_DWORD *)a7;\n      *(_DWORD *)(a7 + 8) = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (signed int)v13 + 1;\n  }\n  v12 = 0LL;\n  v52 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v49 = 0;\n  v53 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v42;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v43\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v49 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((signed int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v53 = 1;\n            ptr[v52] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v49 = 1;\n        }\n        else\n        {\n          v49 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v52 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v49 )\n  {\n    if ( a8 )\n    {\n      if ( v49 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = *(const char **)(a7 + 32);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *(_QWORD *)(a7 + 32);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32);\n        v34 = stderr;\n        v35 = v42;\n        v36 = ptr;\n        v37 = (signed __int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            v38 = *v35;\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = *(const char **)(a7 + 32);\n      }\n    }\n    if ( v53 )\n      free(ptr);\n    *(_QWORD *)(a7 + 32) = &v9[strlen(v9)];\n    ++*(_DWORD *)a7;\n    *(_DWORD *)(a7 + 8) = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v52;\nLABEL_31:\n    v20 = *(_DWORD *)a7;\n    *(_QWORD *)(a7 + 32) = 0LL;\n    v21 = v20 + 1;\n    *(_DWORD *)a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *(_QWORD *)(a7 + 16) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29);\n      }\n      *(_DWORD *)(a7 + 8) = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v51 )\n      {\n        if ( a8 )\n        {\n          v39 = *v12;\n          v40 = *a2;\n          v41 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v41, v40);\n        }\n        *(_DWORD *)(a7 + 8) = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *(_DWORD *)a7 = v20 + 2;\n        *(_QWORD *)(a7 + 16) = a2[v21];\nLABEL_33:\n        if ( v47 )\n          *v47 = v13;\n        v23 = v12[2];\n        result = *((_DWORD *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409e60L", 
            "funcEndAddr": "0x40a47cL", 
            "funcName": "sub_409E60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A480(signed int a1, __int64 a2, _BYTE *a3, char **a4, _DWORD *a5, int a6, __int64 a7, int a8)\n{\n  int v8; // er13@1\n  signed int v9; // eax@2\n  int v10; // ebp@2\n  __int64 *v11; // r12@2\n  char *v12; // r15@2\n  _BYTE *v13; // rdx@6\n  char v14; // al@8\n  char v15; // al@9\n  unsigned int v16; // eax@12\n  bool v17; // cf@17\n  bool v18; // zf@17\n  signed __int64 v19; // rcx@18\n  const char *v20; // rdi@18\n  __int64 v21; // r14@18\n  _BYTE *v22; // rsi@18\n  int v23; // edx@22\n  int v24; // ecx@22\n  int v25; // eax@22\n  int v26; // er14@32\n  char *v27; // rax@32\n  signed __int64 v28; // r8@32\n  char v29; // cl@36\n  signed int v31; // edx@47\n  int v32; // ST3C_4@49\n  __int64 v33; // rax@51\n  __int64 v34; // rcx@53\n  int v35; // esi@53\n  char v36; // cl@57\n  int v37; // ST3C_4@62\n  char *v38; // rax@62\n  __int64 v39; // rax@69\n  unsigned int v40; // eax@71\n  int v41; // ST3C_4@73\n  char *v42; // rax@73\n  char v43; // dl@75\n  __int64 v44; // rax@76\n  int v45; // edx@78\n  __int64 v46; // rax@78\n  __int64 v47; // rbp@85\n  char *v48; // rax@85\n  __int64 v49; // rbp@94\n  char *v50; // rax@94\n  __int64 v51; // rbp@98\n  char *v52; // rax@98\n  char **v53; // [sp+8h] [bp-60h]@1\n  _DWORD *v54; // [sp+10h] [bp-58h]@1\n  char v55; // [sp+1Ch] [bp-4Ch]@32\n  _BYTE *v56; // [sp+20h] [bp-48h]@32\n  signed __int64 v57; // [sp+28h] [bp-40h]@32\n\n  v53 = a4;\n  v54 = a5;\n  v8 = *(_DWORD *)(a7 + 4);\n  if ( a1 <= 0 )\n    goto LABEL_46;\n  v9 = *(_DWORD *)a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *(_QWORD *)(a7 + 16) = 0LL;\n  if ( !v9 )\n  {\n    *(_DWORD *)a7 = 1;\n    v9 = 1;\nLABEL_4:\n    *(_DWORD *)(a7 + 48) = v9;\n    *(_DWORD *)(a7 + 44) = v9;\n    *(_QWORD *)(a7 + 32) = 0LL;\n    if ( *a3 == 45 )\n    {\n      *(_DWORD *)(a7 + 40) = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      *(_DWORD *)(a7 + 40) = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v41 = a6;\n        v42 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v41;\n        if ( !v42 )\n        {\n          *(_DWORD *)(a7 + 40) = 1;\n          v13 = *(_BYTE **)(a7 + 32);\n          goto LABEL_27;\n        }\n        v13 = *(_BYTE **)(a7 + 32);\n      }\n      *(_DWORD *)(a7 + 40) = 0;\n    }\nLABEL_27:\n    *(_DWORD *)(a7 + 24) = 1;\n    v14 = *v12;\n    goto LABEL_28;\n  }\n  if ( !*(_DWORD *)(a7 + 24) )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = *(_BYTE **)(a7 + 32);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = (v12++)[1];\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_31;\n  }\nLABEL_28:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_31:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *(_DWORD *)a7;\n    if ( *(_DWORD *)(a7 + 48) > *(_DWORD *)a7 )\n      *(_DWORD *)(a7 + 48) = v16;\n    if ( (signed int)v16 < *(_DWORD *)(a7 + 44) )\n      *(_DWORD *)(a7 + 44) = v16;\n    if ( *(_DWORD *)(a7 + 40) == 1 )\n    {\n      v31 = *(_DWORD *)(a7 + 48);\n      if ( *(_DWORD *)(a7 + 44) == v31 )\n      {\n        if ( v16 != v31 )\n        {\n          *(_DWORD *)(a7 + 44) = v16;\n          v31 = v16;\n        }\n      }\n      else if ( v16 != v31 )\n      {\n        v32 = a6;\n        sub_409D80(a2, a7);\n        v31 = *(_DWORD *)a7;\n        a6 = v32;\n      }\n      if ( a1 <= v31 )\n      {\nLABEL_82:\n        v16 = v31;\n      }\n      else\n      {\n        v33 = v31;\n        while ( 1 )\n        {\n          v34 = v11[v33];\n          v35 = v33;\n          v31 = v33;\n          if ( *(_BYTE *)v34 == 45 )\n          {\n            if ( *(_BYTE *)(v34 + 1) )\n              break;\n          }\n          v31 = v33++ + 1;\n          *(_DWORD *)a7 = v35 + 1;\n          if ( a1 <= (signed int)v33 )\n            goto LABEL_82;\n        }\n        v16 = *(_DWORD *)a7;\n      }\n      *(_DWORD *)(a7 + 48) = v31;\n    }\n    v17 = a1 < v16;\n    v18 = a1 == v16;\n    if ( a1 == v16 )\n    {\n      v10 = *(_DWORD *)(a7 + 48);\n      v23 = *(_DWORD *)(a7 + 44);\nLABEL_44:\n      if ( v23 != v10 )\n        *(_DWORD *)a7 = v23;\n      goto LABEL_46;\n    }\n    v19 = 3LL;\n    v20 = \"--\";\n    v21 = v11[v16];\n    v22 = (_BYTE *)v11[v16];\n    do\n    {\n      if ( !v19 )\n        break;\n      v17 = *v22 < (const unsigned __int8)*v20;\n      v18 = *v22++ == *v20++;\n      --v19;\n    }\n    while ( v18 );\n    if ( (!v17 && !v18) == v17 )\n    {\n      v23 = *(_DWORD *)(a7 + 44);\n      v24 = *(_DWORD *)(a7 + 48);\n      v25 = v16 + 1;\n      *(_DWORD *)a7 = v25;\n      if ( v23 == v24 )\n      {\n        *(_DWORD *)(a7 + 44) = v25;\n        v23 = v25;\n      }\n      else if ( v25 != v24 )\n      {\n        sub_409D80((__int64)v11, a7);\n        v23 = *(_DWORD *)(a7 + 44);\n      }\n      *(_DWORD *)(a7 + 48) = v10;\n      *(_DWORD *)a7 = v10;\n      goto LABEL_44;\n    }\n    if ( *(_BYTE *)v21 == 45 )\n    {\n      v36 = *(_BYTE *)(v21 + 1);\n      if ( v36 )\n      {\n        if ( v53 )\n        {\n          if ( v36 == 45 )\n          {\n            *(_QWORD *)(a7 + 32) = v21 + 2;\n            v40 = sub_409E60(v10, v11, v12, v53, v54, a6, a7, v8, (__int64)\"--\");\n            goto LABEL_72;\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v21 + 2) || (v37 = a6, v38 = strchr(v12, v36), a6 = v37, !v38) )\n            {\n              *(_QWORD *)(a7 + 32) = v21 + 1;\n              v26 = sub_409E60(v10, v11, v12, v53, v54, a6, a7, v8, (__int64)\"-\");\n              if ( v26 != -1 )\n                return (unsigned int)v26;\n              v21 = v11[*(_DWORD *)a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v21 + 1);\n        goto LABEL_32;\n      }\n    }\n    if ( *(_DWORD *)(a7 + 40) )\n    {\n      *(_QWORD *)(a7 + 16) = v21;\n      v26 = 1;\n      *(_DWORD *)a7 = v16 + 1;\n      return (unsigned int)v26;\n    }\nLABEL_46:\n    return (unsigned int)-1;\n  }\nLABEL_32:\n  v56 = v13;\n  *(_QWORD *)(a7 + 32) = v13 + 1;\n  v26 = *v13;\n  v57 = (signed __int64)(v13 + 1);\n  v55 = *v13;\n  v27 = strchr(v12, v26);\n  v28 = v57;\n  if ( !v56[1] )\n    ++*(_DWORD *)a7;\n  if ( (unsigned __int8)(v55 - 58) > 1u && v27 )\n  {\n    v29 = v27[1];\n    if ( *v27 == 87 && v53 && v29 == 59 )\n    {\n      if ( v56[1] )\n      {\nLABEL_71:\n        *(_QWORD *)(a7 + 32) = v28;\n        *(_QWORD *)(a7 + 16) = 0LL;\n        v40 = sub_409E60(v10, v11, v12, v53, v54, 0, a7, v8, (__int64)\"-W \");\nLABEL_72:\n        return v40;\n      }\n      v39 = *(_DWORD *)a7;\n      if ( (_DWORD)v39 != v10 )\n      {\n        v28 = v11[v39];\n        goto LABEL_71;\n      }\n      if ( v8 )\n      {\n        v51 = *v11;\n        v52 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v52, v51);\n      }\n      *(_DWORD *)(a7 + 8) = v26;\n      v26 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v29 == 58 )\n    {\n      v43 = v56[1];\n      if ( v27[2] == 58 )\n      {\n        if ( v43 )\n        {\n          *(_QWORD *)(a7 + 16) = v57;\n          ++*(_DWORD *)a7;\n        }\n        else\n        {\n          *(_QWORD *)(a7 + 16) = 0LL;\n        }\n      }\n      else\n      {\n        v44 = *(_DWORD *)a7;\n        if ( v43 )\n        {\n          *(_QWORD *)(a7 + 16) = v57;\n          *(_DWORD *)a7 = v44 + 1;\n        }\n        else if ( v10 == (_DWORD)v44 )\n        {\n          if ( v8 )\n          {\n            v49 = *v11;\n            v50 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v50, v49);\n          }\n          *(_DWORD *)(a7 + 8) = v26;\n          v26 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v45 = v44 + 1;\n          v46 = v11[v44];\n          *(_DWORD *)a7 = v45;\n          *(_QWORD *)(a7 + 16) = v46;\n        }\n      }\n      *(_QWORD *)(a7 + 32) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v47 = *v11;\n      v48 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v48, v47);\n    }\n    *(_DWORD *)(a7 + 8) = v26;\n    v26 = 63;\n  }\n  return (unsigned int)v26;\n}\n", 
            "funcStartAddr": "0x40a480L", 
            "funcEndAddr": "0x40aa46L", 
            "funcName": "sub_40A480"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AA50(signed int a1, __int64 a2, _BYTE *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax@1\n\n  dword_623C80 = dword_62335C;\n  dword_623C84 = dword_623358;\n  result = sub_40A480(a1, a2, a3, a4, a5, a6, (__int64)&dword_623C80, a7);\n  dword_62335C = dword_623C80;\n  nptr = (char *)qword_623C90;\n  dword_623354 = dword_623C88;\n  return result;\n}\n", 
            "funcStartAddr": "0x40aa50L", 
            "funcEndAddr": "0x40aaa6L", 
            "funcName": "sub_40AA50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AAD0(signed int a1, __int64 a2, _BYTE *a3, char **a4, _DWORD *a5)\n{\n  return sub_40AA50(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x40aad0L", 
            "funcEndAddr": "0x40aae3L", 
            "funcName": "sub_40AAD0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_40AB50(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx@2\n  wchar_t *v5; // r12@3\n  char *v6; // rbp@3\n  char v8; // [sp+Ch] [bp-1Ch]@7\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_418AE0(0LL, v6) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40ab50L", 
            "funcEndAddr": "0x40abcaL", 
            "funcName": "sub_40AB50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40ABD0(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax@8\n  signed __int64 v4; // r9@9\n  signed __int64 v5; // rcx@16\n  _BYTE *v6; // rdi@16\n\n  if ( !a3 )\n    return 0LL;\n  if ( (unsigned __int8)a1 & 7 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( !((unsigned __int8)a1 & 7) )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((signed __int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((signed __int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && !(((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( ((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = (signed __int64)(a1 + 1);\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = (_BYTE *)v5;\n      if ( (_BYTE *)v5 == v6 )\n        break;\n      if ( *(_BYTE *)(++v5 - 1) == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x40abd0L", 
            "funcEndAddr": "0x40acd4L", 
            "funcName": "sub_40ABD0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40ACE0(__int64 a1, __int64 a2)\n{\n  bool result; // al@1\n  __int64 v3; // rdx@2\n\n  result = a2 == 0 || a1 == 0;\n  if ( result )\n  {\n    result = 0;\n  }\n  else\n  {\n    v3 = *(_QWORD *)(a1 + 8);\n    if ( v3 == *(_QWORD *)(a2 + 8) )\n    {\n      while ( --v3 >= 0 )\n      {\n        if ( *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v3) != *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v3) )\n          return result;\n      }\n      result = 1;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ace0L", 
            "funcEndAddr": "0x40ad23L", 
            "funcName": "sub_40ACE0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40AD30(__int64 a1, int (__fastcall *a2)(__int64, __int64), __int64 a3)\n{\n  __int64 v3; // rbp@1\n  __int64 i; // rbx@1\n  __int64 v5; // rax@3\n  int result; // eax@5\n  __int64 v7; // rdx@6\n  bool v8; // zf@7\n\n  v3 = a3;\n  for ( i = a1; ; i = v5 )\n  {\n    v5 = *(_QWORD *)(i + 8);\n    if ( !v5 )\n    {\n      v5 = *(_QWORD *)(i + 16);\n      if ( !v5 )\n        break;\n    }\nLABEL_2:\n    ;\n  }\n  for ( result = a2(v3, i); !result; result = a2(v3, v7) )\n  {\n    v7 = *(_QWORD *)i;\n    if ( !*(_QWORD *)i )\n      break;\n    v5 = *(_QWORD *)(v7 + 16);\n    v8 = v5 == i;\n    i = *(_QWORD *)i;\n    if ( !v8 && v5 != 0 )\n      goto LABEL_2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ad30L", 
            "funcEndAddr": "0x40ad9bL", 
            "funcName": "sub_40AD30"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40ADA0(__int64 a1, __int64 a2, char a3)\n{\n  __int64 v3; // rax@1\n  __int64 v4; // r8@2\n  bool v5; // zf@2\n  bool v6; // sf@2\n  unsigned __int8 v7; // of@2\n  char v8; // cl@2\n  signed __int64 result; // rax@9\n  char v10; // al@17\n  char v11; // al@22\n\n  v3 = *(_QWORD *)(a2 + 72);\n  if ( *(_QWORD *)(a2 + 104) <= v3 )\n  {\n    *(_BYTE *)(a1 + 8) = 2;\n    return 0LL;\n  }\n  v4 = *(_QWORD *)(a2 + 8);\n  v7 = __OFSUB__(*(_DWORD *)(a2 + 144), 1);\n  v5 = *(_DWORD *)(a2 + 144) == 1;\n  v6 = *(_DWORD *)(a2 + 144) - 1 < 0;\n  v8 = *(_BYTE *)(v4 + v3);\n  *(_BYTE *)a1 = v8;\n  if ( !((unsigned __int8)(v6 ^ v7) | v5)\n    && v3 != *(_QWORD *)(a2 + 48)\n    && *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v3) == -1 )\n  {\n    goto LABEL_12;\n  }\n  if ( v8 == 92 )\n  {\n    if ( !(a3 & 1) || v3 + 1 >= *(_QWORD *)(a2 + 88) )\n      goto LABEL_12;\n    *(_QWORD *)(a2 + 72) = v3 + 1;\n    v11 = *(_BYTE *)(v4 + v3 + 1);\n    *(_BYTE *)(a1 + 8) = 1;\n    *(_BYTE *)a1 = v11;\n    result = 1LL;\n  }\n  else\n  {\n    if ( v8 == 91 )\n    {\n      if ( v3 + 1 < *(_QWORD *)(a2 + 88) )\n      {\n        v10 = *(_BYTE *)(v4 + v3 + 1);\n        *(_BYTE *)a1 = v10;\n        if ( v10 == 58 )\n        {\n          if ( a3 & 4 )\n          {\n            *(_BYTE *)(a1 + 8) = 30;\n            return 2LL;\n          }\n        }\n        else\n        {\n          if ( v10 == 61 )\n          {\n            *(_BYTE *)(a1 + 8) = 28;\n            return 2LL;\n          }\n          if ( v10 == 46 )\n          {\n            *(_BYTE *)(a1 + 8) = 26;\n            return 2LL;\n          }\n        }\n      }\n      *(_BYTE *)(a1 + 8) = 1;\n      result = 1LL;\n      *(_BYTE *)a1 = 91;\n      return result;\n    }\n    if ( v8 != 93 )\n    {\n      if ( v8 == 94 )\n      {\n        *(_BYTE *)(a1 + 8) = 25;\n        return 1LL;\n      }\n      if ( v8 == 45 )\n      {\n        *(_BYTE *)(a1 + 8) = 22;\n        return 1LL;\n      }\nLABEL_12:\n      *(_BYTE *)(a1 + 8) = 1;\n      return 1LL;\n    }\n    *(_BYTE *)(a1 + 8) = 21;\n    result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ada0L", 
            "funcEndAddr": "0x40aecfL", 
            "funcName": "sub_40ADA0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40AEF0(__int64 a1, signed int a2, signed __int64 a3, __int64 a4, __int64 a5)\n{\n  signed __int64 v5; // r13@1\n  signed __int64 v6; // r14@2\n  __int64 v7; // rbx@2\n  __int64 v8; // r11@2\n  __int64 v9; // r15@2\n  __int64 v10; // rbp@5\n  signed __int64 v11; // rax@5\n  char v12; // dl@5\n  __int64 v14; // r13@14\n  signed __int64 v15; // r12@14\n  __int64 v16; // rcx@18\n  int v17; // eax@19\n  __int64 v18; // [sp+10h] [bp-68h]@1\n  signed __int64 v19; // [sp+18h] [bp-60h]@2\n  __int16 v20; // [sp+26h] [bp-52h]@2\n  signed __int64 v21; // [sp+28h] [bp-50h]@2\n  signed __int64 v22; // [sp+30h] [bp-48h]@14\n  __int64 v23; // [sp+38h] [bp-40h]@14\n\n  v18 = a4;\n  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 48LL) + 24 * a4;\n  if ( *(_QWORD *)(v5 + 8) > 0LL )\n  {\n    v6 = a3;\n    v7 = 0LL;\n    v8 = a5;\n    v9 = *(_QWORD *)(a1 + 152);\n    v21 = 40 * a5;\n    v19 = 1LL << a3;\n    v20 = ~(unsigned __int16)(1LL << a3);\n    do\n    {\n      while ( 2 )\n      {\n        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7);\n        v11 = *(_QWORD *)v9 + 16LL * *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7);\n        v12 = *(_BYTE *)(v11 + 8);\n        if ( v12 == 8 )\n        {\n          if ( a2 & 1 && *(_QWORD *)v11 == v6 )\n            return 0xFFFFFFFFLL;\n        }\n        else if ( v12 == 9 )\n        {\n          if ( a2 & 2 && *(_QWORD *)v11 == v6 )\n            return 0LL;\n        }\n        else if ( v12 == 4 && v8 != -1 )\n        {\n          v22 = v5;\n          v23 = v7;\n          v14 = v8;\n          v15 = *(_QWORD *)(a1 + 216) + v21;\n          do\n          {\n            if ( *(_QWORD *)v15 == v10 && (v6 > 63 || *(_WORD *)(v15 + 34) & (unsigned __int16)v19) )\n            {\n              v16 = **(_QWORD **)(*(_QWORD *)(v9 + 40) + 24 * v10 + 16);\n              if ( v18 == v16 )\n                return -(a2 & 1);\n              v17 = sub_40AEF0(a1, (unsigned int)a2, v6, v16, v14);\n              if ( v17 == -1 )\n                return 0xFFFFFFFFLL;\n              if ( !v17 && a2 & 2 )\n                return 0LL;\n              if ( v6 <= 63 )\n                *(_WORD *)(v15 + 34) &= v20;\n            }\n            v15 += 40LL;\n          }\n          while ( *(_BYTE *)(v15 - 8) );\n          v8 = v14;\n          v5 = v22;\n          ++v7;\n          if ( *(_QWORD *)(v22 + 8) > v23 + 1 )\n            continue;\n          return (unsigned int)(a2 >> 1);\n        }\n        break;\n      }\n      ++v7;\n    }\n    while ( *(_QWORD *)(v5 + 8) > v7 );\n  }\n  return (unsigned int)(a2 >> 1);\n}\n", 
            "funcStartAddr": "0x40aef0L", 
            "funcEndAddr": "0x40b0ffL", 
            "funcName": "sub_40AEF0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40B100(__int64 a1, __int64 a2, signed __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  signed __int64 v6; // rax@1\n  __int64 v7; // r10@1\n  __int64 v8; // rax@2\n  signed int v9; // esi@3\n  signed __int64 result; // rax@4\n\n  v6 = *(_QWORD *)(a1 + 216) + 40 * a2;\n  v7 = *(_QWORD *)(v6 + 16);\n  if ( v7 > a5 )\n    return 0xFFFFFFFFLL;\n  v8 = *(_QWORD *)(v6 + 24);\n  if ( v8 < a5 )\n    return 1LL;\n  v9 = v7 == a5;\n  if ( v8 == a5 )\n  {\n    v9 |= 2u;\n    goto LABEL_7;\n  }\n  result = 0LL;\n  if ( v7 == a5 )\nLABEL_7:\n    result = sub_40AEF0(a1, v9, a3, a4, a6);\n  return result;\n}\n", 
            "funcStartAddr": "0x40b100L", 
            "funcEndAddr": "0x40b166L", 
            "funcName": "sub_40B100"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40B170(__int64 a1, size_t a2)\n{\n  __int64 v2; // rbx@1\n  void *v3; // rax@3\n  void *v4; // rdi@4\n  void *v5; // rax@5\n  void *v7; // rax@9\n\n  v2 = a1;\n  if ( *(_DWORD *)(a1 + 144) > 1 )\n  {\n    if ( a2 > 0x1FFFFFFFFFFFFFFFLL )\n      return 12LL;\n    v3 = realloc(*(void **)(a1 + 16), 4 * a2);\n    if ( !v3 )\n      return 12LL;\n    v4 = *(void **)(a1 + 24);\n    *(_QWORD *)(v2 + 16) = v3;\n    if ( v4 )\n    {\n      v5 = realloc(v4, 8 * a2);\n      if ( !v5 )\n        return 12LL;\n      *(_QWORD *)(v2 + 24) = v5;\n    }\n  }\n  if ( !*(_BYTE *)(v2 + 139) )\n  {\nLABEL_8:\n    *(_QWORD *)(v2 + 64) = a2;\n    return 0LL;\n  }\n  v7 = realloc(*(void **)(v2 + 8), a2);\n  if ( v7 )\n  {\n    *(_QWORD *)(v2 + 8) = v7;\n    goto LABEL_8;\n  }\n  return 12LL;\n}\n", 
            "funcStartAddr": "0x40b170L", 
            "funcEndAddr": "0x40b20cL", 
            "funcName": "sub_40B170"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40B210(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp@1\n  __int64 v3; // rsi@1\n  void *v4; // rax@1\n  signed __int64 v6; // rsi@4\n\n  v2 = a2;\n  v3 = *(_QWORD *)(a1 + 8);\n  v4 = *(void **)(a1 + 16);\n  if ( *(_QWORD *)a1 != v3 )\n    goto LABEL_2;\n  v6 = v3 + 1;\n  *(_QWORD *)a1 = 2 * v6;\n  v4 = realloc(v4, 16 * v6);\n  if ( v4 )\n  {\n    *(_QWORD *)(a1 + 16) = v4;\n    v3 = *(_QWORD *)(a1 + 8);\nLABEL_2:\n    *(_QWORD *)(a1 + 8) = v3 + 1;\n    *((_QWORD *)v4 + v3) = v2;\n    return 1LL;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b210L", 
            "funcEndAddr": "0x40b274L", 
            "funcName": "sub_40B210"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_40B280(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp@1\n  __int64 v3; // rsi@2\n  char *v4; // rax@2\n  _QWORD *result; // rax@3\n  signed __int64 v6; // rdx@8\n  char *v7; // rdx@10\n  __int64 v8; // rcx@11\n  __int64 i; // rcx@14\n\n  v2 = a2;\n  if ( *(_QWORD *)a1 )\n  {\n    v3 = *(_QWORD *)(a1 + 8);\n    v4 = *(char **)(a1 + 16);\n    if ( !v3 )\n    {\n      *(_QWORD *)v4 = v2;\n      result = (_QWORD *)1;\n      ++*(_QWORD *)(a1 + 8);\n      return result;\n    }\n    if ( *(_QWORD *)a1 == v3 )\n    {\n      *(_QWORD *)a1 = 2 * v3;\n      v4 = (char *)realloc(v4, 16 * v3);\n      if ( !v4 )\n        return 0LL;\n      *(_QWORD *)(a1 + 16) = v4;\n      v3 = *(_QWORD *)(a1 + 8);\n    }\n    v6 = 8 * v3;\n    if ( *(_QWORD *)v4 <= v2 )\n    {\n      for ( i = *(_QWORD *)&v4[v6 - 8]; i > v2; i = *(_QWORD *)&v4[v6 - 8] )\n      {\n        *(_QWORD *)&v4[v6] = i;\n        v6 -= 8LL;\n      }\n    }\n    else if ( v3 > 0 )\n    {\n      v7 = &v4[v6];\n      do\n      {\n        v8 = *((_QWORD *)v7 - 1);\n        v7 -= 8;\n        *((_QWORD *)v7 + 1) = v8;\n      }\n      while ( v7 != v4 );\n      v6 = 0LL;\n    }\n    *(_QWORD *)&v4[v6] = v2;\n    result = (_QWORD *)1;\n    ++*(_QWORD *)(a1 + 8);\n  }\n  else\n  {\n    *(_QWORD *)a1 = 1LL;\n    *(_QWORD *)(a1 + 8) = 1LL;\n    result = malloc(8uLL);\n    *(_QWORD *)(a1 + 16) = result;\n    if ( result )\n    {\n      *result = a2;\n      result = (_QWORD *)1;\n    }\n    else\n    {\n      *(_QWORD *)(a1 + 8) = 0LL;\n      *(_QWORD *)a1 = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b280L", 
            "funcEndAddr": "0x40b3acL", 
            "funcName": "sub_40B280"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40B3B0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r13@1\n  __int64 v4; // rbp@1\n  __int64 v5; // r15@1\n  void *v6; // rax@1\n  __int64 v7; // rbx@2\n  signed __int64 v9; // rbx@8\n  __int64 v10; // rdx@8\n  _QWORD *v11; // rax@8\n  signed __int64 v12; // rsi@8\n\n  v3 = a3;\n  v4 = a2;\n  v5 = *(_QWORD *)(a2 + 16);\n  *(_QWORD *)a2 = a3;\n  *(_QWORD *)(a2 + 40) = 0LL;\n  *(_QWORD *)(a2 + 32) = v5;\n  v6 = malloc(8 * v5);\n  *(_QWORD *)(a2 + 48) = v6;\n  if ( !v6 )\n    return 12LL;\n  v7 = 0LL;\n  if ( v5 > 0 )\n  {\n    while ( *(_BYTE *)(*(_QWORD *)a1 + 16LL * *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v7) + 8) & 8\n         || (unsigned __int8)sub_40B210(a2 + 32, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v7)) )\n    {\n      if ( *(_QWORD *)(a2 + 16) <= ++v7 )\n        goto LABEL_8;\n    }\n    return 12LL;\n  }\nLABEL_8:\n  v9 = *(_QWORD *)(a1 + 64) + 24 * (*(_QWORD *)(a1 + 136) & v3);\n  v10 = *(_QWORD *)v9;\n  v11 = *(_QWORD **)(v9 + 16);\n  v12 = *(_QWORD *)v9 + 1LL;\n  if ( *(_QWORD *)(v9 + 8) <= *(_QWORD *)v9 )\n  {\n    v11 = realloc(*(void **)(v9 + 16), 16 * v12);\n    if ( v11 )\n    {\n      v10 = *(_QWORD *)v9;\n      *(_QWORD *)(v9 + 16) = v11;\n      *(_QWORD *)(v9 + 8) = 2 * v12;\n      v12 = v10 + 1;\n      goto LABEL_9;\n    }\n    return 12LL;\n  }\nLABEL_9:\n  *(_QWORD *)v9 = v12;\n  v11[v10] = v4;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b3b0L", 
            "funcEndAddr": "0x40b4abL", 
            "funcName": "sub_40B3B0"
        }, 
        {
            "decompiledFuncCode": "wint_t __fastcall sub_40B4B0(unsigned __int8 a1, __int64 a2)\n{\n  wint_t result; // eax@1\n\n  result = btowc(a1);\n  if ( result == -1 && !a2 )\n    result = a1;\n  return result;\n}\n", 
            "funcStartAddr": "0x40b4b0L", 
            "funcEndAddr": "0x40b4d6L", 
            "funcName": "sub_40B4B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B4E0(__int64 a1)\n{\n  __int64 v1; // r12@1\n  __int64 v2; // rbx@3\n  const __int32_t **v3; // rax@4\n  __int64 v4; // rcx@5\n  __int64 v5; // rdx@5\n  __int64 v6; // r12@9\n\n  v1 = *(_QWORD *)(a1 + 88);\n  if ( *(_QWORD *)(a1 + 64) <= v1 )\n    v1 = *(_QWORD *)(a1 + 64);\n  v2 = *(_QWORD *)(a1 + 48);\n  if ( v1 <= v2 )\n  {\n    v6 = *(_QWORD *)(a1 + 48);\n    *(_QWORD *)(a1 + 48) = v6;\n    *(_QWORD *)(a1 + 56) = v6;\n  }\n  else\n  {\n    v3 = __ctype_toupper_loc();\n    do\n    {\n      v4 = *(_QWORD *)(a1 + 120);\n      v5 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + v2 + *(_QWORD *)a1);\n      if ( v4 )\n        v5 = *(_BYTE *)(v4 + v5);\n      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v2++) = (*v3)[v5];\n    }\n    while ( v1 != v2 );\n    *(_QWORD *)(a1 + 48) = v1;\n    *(_QWORD *)(a1 + 56) = v1;\n  }\n}\n", 
            "funcStartAddr": "0x40b4e0L", 
            "funcEndAddr": "0x40b560L", 
            "funcName": "sub_40B4E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B560(__int64 a1)\n{\n  __int64 v1; // rbx@1\n  signed __int64 v2; // r12@1\n  signed __int64 v3; // rbp@1\n  mbstate_t *v4; // r13@4\n  __int64 v5; // rdi@5\n  __int64 v6; // r14@5\n  signed __int64 v7; // rdx@5\n  char *v8; // rsi@6\n  size_t v9; // rax@7\n  __int64 v10; // rdx@8\n  __int64 v11; // rcx@9\n  signed __int64 v12; // rsi@9\n  signed __int64 v13; // rdi@9\n  _DWORD *v14; // rdx@10\n  signed __int64 v15; // rcx@10\n  __int64 v16; // rcx@14\n  _BYTE *v17; // rax@14\n  __int64 v18; // rax@20\n  char v19; // cl@24\n  wchar_t pwc; // [sp+Ch] [bp-6Ch]@7\n  char v21[104]; // [sp+10h] [bp-68h]@20\n\n  v1 = a1;\n  v2 = *(_QWORD *)(a1 + 88);\n  v3 = *(_QWORD *)(a1 + 48);\n  if ( *(_QWORD *)(a1 + 64) <= v2 )\n    v2 = *(_QWORD *)(a1 + 64);\n  if ( v2 > v3 )\n  {\n    v4 = (mbstate_t *)(a1 + 32);\n    while ( 1 )\n    {\n      v5 = *(_QWORD *)(v1 + 120);\n      v6 = *(_QWORD *)(v1 + 32);\n      v7 = v2 - v3;\n      if ( v5 )\n      {\n        if ( *(_DWORD *)(v1 + 144) > 0 && (v18 = 0LL, v8 = v21, v7 > 0) )\n        {\n          while ( 1 )\n          {\n            v19 = *(_BYTE *)(v5 + *(_BYTE *)(*(_QWORD *)(v1 + 40) + v18 + v3 + *(_QWORD *)v1));\n            *(_BYTE *)(v3 + *(_QWORD *)(v1 + 8) + v18) = v19;\n            v21[v18] = v19;\n            if ( *(_DWORD *)(v1 + 144) <= (signed int)v18 + 1 )\n              break;\n            if ( v7 == ++v18 )\n              break;\n            v5 = *(_QWORD *)(v1 + 120);\n          }\n        }\n        else\n        {\n          v8 = v21;\n        }\n      }\n      else\n      {\n        v8 = (char *)(*(_QWORD *)v1 + v3 + *(_QWORD *)(v1 + 40));\n      }\n      v9 = sub_40AB50(&pwc, v8, v7, v4);\n      if ( v9 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_14;\n      LODWORD(v10) = pwc;\n      if ( v9 == -2LL )\n        break;\nLABEL_9:\n      v11 = *(_QWORD *)(v1 + 16);\n      v12 = v3 + 1;\n      v13 = 4 * v3;\n      *(_DWORD *)(v11 + 4 * v3) = v10;\n      v3 += v9;\n      if ( v12 >= v3 )\n      {\n        v3 = v12;\n        if ( v12 >= v2 )\n          goto LABEL_13;\n      }\n      else\n      {\n        v14 = (_DWORD *)(v11 + v13 + 4);\n        v15 = v11 + 4 * v3;\n        do\n        {\n          *v14 = -1;\n          ++v14;\n        }\n        while ( (_DWORD *)v15 != v14 );\n        if ( v3 >= v2 )\n          goto LABEL_13;\n      }\n    }\n    if ( *(_QWORD *)(v1 + 64) < *(_QWORD *)(v1 + 88) )\n    {\n      *(_QWORD *)(v1 + 32) = v6;\n      goto LABEL_13;\n    }\nLABEL_14:\n    v16 = *(_QWORD *)(v1 + 120);\n    v17 = (_BYTE *)(*(_QWORD *)(v1 + 40) + v3 + *(_QWORD *)v1);\n    v10 = *v17;\n    pwc = *v17;\n    if ( v16 )\n    {\n      LODWORD(v10) = *(_BYTE *)(v16 + v10);\n      pwc = v10;\n    }\n    *(_QWORD *)(v1 + 32) = v6;\n    v9 = 1LL;\n    goto LABEL_9;\n  }\nLABEL_13:\n  *(_QWORD *)(v1 + 48) = v3;\n  *(_QWORD *)(v1 + 56) = v3;\n}\n", 
            "funcStartAddr": "0x40b560L", 
            "funcEndAddr": "0x40b706L", 
            "funcName": "sub_40B560"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40B710(__int64 a1)\n{\n  __int64 v1; // r14@1\n  char *v2; // rbx@1\n  signed __int64 v3; // r15@3\n  signed __int64 v4; // r12@5\n  __int64 v5; // rdx@8\n  size_t v6; // rax@9\n  size_t v7; // rbp@10\n  wint_t v8; // ST00_4@11\n  wchar_t v9; // eax@11\n  signed __int64 v10; // r8@11\n  wchar_t v11; // er13@11\n  size_t v12; // rax@12\n  char *v13; // rcx@12\n  size_t v14; // r10@12\n  signed __int64 v15; // r8@13\n  size_t v16; // rax@15\n  __int64 v17; // rax@16\n  _DWORD *v18; // rdx@17\n  signed __int64 result; // rax@21\n  signed __int64 v20; // rbp@26\n  char *v21; // r12@26\n  __int64 v22; // r13@26\n  size_t v23; // rax@28\n  size_t v24; // r12@28\n  wint_t v25; // ST08_4@29\n  wchar_t v26; // eax@29\n  wchar_t v27; // er13@29\n  __int64 v28; // rax@32\n  signed __int64 v29; // rdx@32\n  signed __int64 v30; // rbp@32\n  _DWORD *v31; // rcx@33\n  signed __int64 v32; // rax@33\n  int v33; // eax@42\n  int v34; // eax@43\n  int v35; // eax@44\n  __int64 v36; // r10@46\n  char *v37; // rcx@46\n  __int64 v38; // rax@46\n  signed __int64 v39; // rdi@46\n  signed __int64 v40; // ST00_8@51\n  __int64 v41; // rdx@54\n  __int64 v42; // rax@54\n  signed __int64 v43; // rcx@56\n  signed __int64 v44; // rdx@61\n  size_t v45; // rax@65\n  size_t v46; // rsi@65\n  size_t v47; // rax@65\n  __int64 v48; // rdx@69\n  __int64 v49; // rax@69\n  wchar_t *v50; // rsi@72\n  __int64 v51; // rax@72\n  signed __int64 *v52; // rcx@72\n  unsigned __int64 v53; // rax@72\n  signed __int64 v54; // rdx@73\n  void *v55; // ST08_8@82\n  void *v56; // rax@82\n  const mbstate_t *v57; // [sp+0h] [bp-A8h]@7\n  signed __int64 v58; // [sp+0h] [bp-A8h]@65\n  char *src; // [sp+8h] [bp-A0h]@9\n  char *srca; // [sp+8h] [bp-A0h]@72\n  signed __int64 v61; // [sp+10h] [bp-98h]@7\n  wchar_t *pwc; // [sp+18h] [bp-90h]@7\n  wint_t wc; // [sp+24h] [bp-84h]@7\n  mbstate_t ps; // [sp+28h] [bp-80h]@8\n  char s[120]; // [sp+30h] [bp-78h]@12\n\n  v1 = a1;\n  v2 = *(char **)(a1 + 88);\n  if ( *(_QWORD *)(a1 + 64) <= (signed __int64)v2 )\n    v2 = *(char **)(a1 + 64);\n  v3 = *(_QWORD *)(a1 + 48);\n  if ( *(_BYTE *)(a1 + 138) || *(_QWORD *)(a1 + 120) || *(_BYTE *)(a1 + 140) )\n  {\n    v4 = *(_QWORD *)(a1 + 56);\n    goto LABEL_6;\n  }\n  if ( v3 >= (signed __int64)v2 )\n    goto LABEL_37;\n  v57 = (const mbstate_t *)(a1 + 32);\n  while ( 1 )\n  {\n    v20 = v3;\n    v21 = (char *)(*(_QWORD *)a1 + v3 + *(_QWORD *)(a1 + 40));\n    v22 = (unsigned __int8)*v21;\n    if ( !(v22 & 0x80) && mbsinit(v57) )\n    {\n      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v3) = (*__ctype_toupper_loc())[v22];\n      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v3) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + v3);\n      ++v3;\n      goto LABEL_36;\n    }\n    ps = *(mbstate_t *)(a1 + 32);\n    v61 = (signed __int64)&v2[-v3];\n    pwc = (wchar_t *)&wc;\n    v23 = sub_40AB50((wchar_t *)&wc, v21, (size_t)&v2[-v3], (mbstate_t *)v57);\n    v24 = v23;\n    if ( v23 <= 0xFFFFFFFFFFFFFFFDLL )\n      break;\n    if ( v23 == -2LL )\n    {\n      if ( *(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 88) )\n      {\n        *(mbstate_t *)(a1 + 32) = ps;\nLABEL_37:\n        *(_QWORD *)(a1 + 48) = v3;\n        result = 0LL;\n        *(_QWORD *)(a1 + 56) = v3;\n        return result;\n      }\n      v33 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + v3 + *(_QWORD *)a1);\n      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v3++) = v33;\n      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v20) = v33;\n    }\n    else\n    {\n      v34 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + v3 + *(_QWORD *)a1);\n      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v3++) = v34;\n      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v20) = v34;\n      *(mbstate_t *)(a1 + 32) = ps;\n    }\nLABEL_36:\n    if ( (signed __int64)v2 <= v3 )\n      goto LABEL_37;\n  }\n  v25 = wc;\n  v26 = towupper(wc);\n  v27 = v26;\n  if ( v25 == v26 )\n  {\n    memcpy((void *)(v3 + *(_QWORD *)(a1 + 8)), (const void *)(*(_QWORD *)a1 + v3 + *(_QWORD *)(a1 + 40)), v24);\nLABEL_32:\n    v28 = *(_QWORD *)(a1 + 16);\n    v29 = 4 * v3++;\n    *(_DWORD *)(v28 + 4 * v20) = v27;\n    v30 = v24 + v20;\n    if ( v3 < v30 )\n    {\n      v31 = (_DWORD *)(v28 + v29 + 4);\n      v32 = v28 + 4 * v30;\n      do\n      {\n        *v31 = -1;\n        ++v31;\n      }\n      while ( (_DWORD *)v32 != v31 );\n      v3 = v30;\n    }\n    goto LABEL_36;\n  }\n  if ( v24 == wcrtomb(s, v26, &ps) )\n  {\n    memcpy((void *)(v3 + *(_QWORD *)(a1 + 8)), s, v24);\n    goto LABEL_32;\n  }\n  v4 = v3;\n  while ( 2 )\n  {\n    v5 = *(_QWORD *)(v1 + 120);\n    ps = *(mbstate_t *)(v1 + 32);\n    if ( v5 )\n    {\n      v35 = *(_DWORD *)(v1 + 144);\n      if ( v35 <= 0 || v61 <= 0 )\n      {\n        v37 = s;\n      }\n      else\n      {\n        v36 = (unsigned int)(v35 - 1);\n        v37 = s;\n        v38 = 0LL;\n        v39 = *(_QWORD *)v1 + v4 + *(_QWORD *)(v1 + 40);\n        do\n        {\n          s[v38] = *(_BYTE *)(v5 + *(_BYTE *)(v39 + v38));\n          if ( v36 == v38 )\n            break;\n          ++v38;\n        }\n        while ( v61 != v38 );\n      }\n      src = v37;\n      v6 = sub_40AB50(pwc, v37, v61, (mbstate_t *)v57);\n    }\n    else\n    {\n      src = (char *)(*(_QWORD *)v1 + v4 + *(_QWORD *)(v1 + 40));\n      v6 = sub_40AB50(pwc, src, v61, (mbstate_t *)v57);\n    }\n    v7 = v6;\n    if ( v6 > 0xFFFFFFFFFFFFFFFDLL )\n    {\n      if ( v6 == -2LL && *(_QWORD *)(v1 + 64) < *(_QWORD *)(v1 + 88) )\n      {\nLABEL_20:\n        *(mbstate_t *)(v1 + 32) = ps;\nLABEL_21:\n        *(_QWORD *)(v1 + 48) = v3;\n        result = 0LL;\n        *(_QWORD *)(v1 + 56) = v4;\n        return result;\n      }\n      v41 = *(_QWORD *)(v1 + 120);\n      v42 = *(_BYTE *)(*(_QWORD *)(v1 + 40) + v4 + *(_QWORD *)v1);\n      if ( v41 )\n        LODWORD(v42) = *(_BYTE *)(v41 + v42);\n      v43 = v3;\n      *(_BYTE *)(*(_QWORD *)(v1 + 8) + v3) = v42;\n      if ( *(_BYTE *)(v1 + 140) )\n        *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v3) = v4;\n      ++v4;\n      ++v3;\n      *(_DWORD *)(*(_QWORD *)(v1 + 16) + 4 * v43) = v42;\n      if ( v7 == -1LL )\n        *(mbstate_t *)(v1 + 32) = ps;\n      goto LABEL_6;\n    }\n    v8 = wc;\n    v9 = towupper(wc);\n    v10 = v3;\n    v11 = v9;\n    if ( v8 == v9 )\n      goto LABEL_87;\n    v12 = wcrtomb(s, v9, &ps);\n    v13 = s;\n    v10 = v3;\n    v14 = v12;\n    if ( v7 == v12 )\n    {\n      memcpy((void *)(v3 + *(_QWORD *)(v1 + 8)), s, v7);\n      v15 = v3;\n      goto LABEL_14;\n    }\n    if ( v12 == -1LL )\n    {\nLABEL_87:\n      v40 = v10;\n      memcpy((void *)(v3 + *(_QWORD *)(v1 + 8)), src, v7);\n      v15 = v40;\nLABEL_14:\n      if ( *(_BYTE *)(v1 + 140) )\n      {\n        v16 = v4;\n        if ( v7 )\n        {\n          v16 = v7 + v4;\n          v44 = *(_QWORD *)(v1 + 24) + 8 * (v3 - v4);\n          do\n          {\n            *(_QWORD *)(v44 + 8 * v4) = v4;\n            ++v4;\n          }\n          while ( v16 != v4 );\n        }\n      }\n      else\n      {\n        v16 = v4 + v7;\n      }\n      v4 = v16;\n      v17 = *(_QWORD *)(v1 + 16);\n      ++v3;\n      *(_DWORD *)(v17 + 4 * v15) = v11;\n      if ( v3 < (signed __int64)(v15 + v7) )\n      {\n        v18 = (_DWORD *)(v17 + 4 * v15 + 4);\n        do\n        {\n          *v18 = -1;\n          ++v18;\n        }\n        while ( (_DWORD *)(v17 + 4 * (v15 + v7)) != v18 );\n        v3 = v15 + v7;\n      }\nLABEL_6:\n      if ( v3 >= (signed __int64)v2 )\n        goto LABEL_21;\n      v57 = (const mbstate_t *)(v1 + 32);\n      v61 = (signed __int64)&v2[-v3];\n      pwc = (wchar_t *)&wc;\n      continue;\n    }\n    break;\n  }\n  v45 = v3 + v12;\n  v46 = v45;\n  v58 = v45;\n  v47 = *(_QWORD *)(v1 + 64);\n  if ( v46 > v47 )\n    goto LABEL_20;\n  if ( *(_QWORD *)(v1 + 24)\n    || (v55 = (void *)v14, v56 = malloc(8 * v47), v14 = (size_t)v55, v13 = s, (*(_QWORD *)(v1 + 24) = v56) != 0LL) )\n  {\n    if ( !*(_BYTE *)(v1 + 140) )\n    {\n      if ( v3 )\n      {\n        v48 = *(_QWORD *)(v1 + 24);\n        v49 = 0LL;\n        do\n        {\n          *(_QWORD *)(v48 + 8 * v49) = v49;\n          ++v49;\n        }\n        while ( v3 != v49 );\n      }\n      *(_BYTE *)(v1 + 140) = 1;\n    }\n    srca = (char *)v14;\n    memcpy((void *)(v3 + *(_QWORD *)(v1 + 8)), v13, v14);\n    v50 = (wchar_t *)(*(_QWORD *)(v1 + 16) + 4 * v3);\n    v51 = *(_QWORD *)(v1 + 24);\n    *v50 = v11;\n    v52 = (signed __int64 *)(v51 + 8 * v3);\n    v53 = 1LL;\n    *v52 = v4;\n    if ( (unsigned __int64)srca > 1 )\n    {\n      do\n      {\n        v54 = v53;\n        if ( v53 >= v7 )\n          v54 = v7 - 1;\n        v52[v53] = v4 + v54;\n        v50[v53++] = -1;\n      }\n      while ( (char *)v53 != srca );\n    }\n    v2 = &srca[*(_QWORD *)(v1 + 88)] - v7;\n    *(_QWORD *)(v1 + 88) = v2;\n    if ( v4 < *(_QWORD *)(v1 + 96) )\n      *(_QWORD *)(v1 + 104) += &srca[-v7];\n    v3 = v58;\n    if ( *(_QWORD *)(v1 + 64) <= (signed __int64)v2 )\n      v2 = *(char **)(v1 + 64);\n    v4 += v7;\n    goto LABEL_6;\n  }\n  return 12LL;\n}\n", 
            "funcStartAddr": "0x40b710L", 
            "funcEndAddr": "0x40bd0dL", 
            "funcName": "sub_40B710"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40BD10(__int64 a1, signed __int64 a2)\n{\n  unsigned __int64 v2; // rax@1\n  signed __int64 v3; // rax@2\n  __int64 v4; // rbx@2\n  unsigned int v5; // ebp@6\n  void *v6; // rdi@7\n  void *v7; // rax@8\n  signed int v8; // eax@10\n  signed __int64 result; // rax@12\n  __int64 v10; // rcx@15\n  __int64 v11; // rsi@16\n  __int64 v12; // rax@16\n\n  v2 = *(_QWORD *)(a1 + 64);\n  if ( v2 > 0xFFFFFFFFFFFFFFELL )\n    return 12LL;\n  v3 = 2 * v2;\n  a2 = (signed int)a2;\n  v4 = a1;\n  if ( v3 > *(_QWORD *)(a1 + 88) )\n    v3 = *(_QWORD *)(a1 + 88);\n  if ( v3 >= a2 )\n    a2 = v3;\n  v5 = sub_40B170(a1, a2);\n  if ( v5 )\n    return v5;\n  v6 = *(void **)(a1 + 184);\n  if ( !v6 )\n    goto LABEL_10;\n  v7 = realloc(v6, 8LL * *(_QWORD *)(v4 + 64) + 8);\n  if ( !v7 )\n    return 12LL;\n  *(_QWORD *)(v4 + 184) = v7;\nLABEL_10:\n  v8 = *(_DWORD *)(v4 + 144);\n  if ( !*(_BYTE *)(v4 + 136) )\n  {\n    if ( v8 > 1 )\n    {\n      sub_40B560(v4);\n      return 0LL;\n    }\n    v10 = *(_QWORD *)(v4 + 120);\n    if ( v10 )\n    {\n      v11 = *(_QWORD *)(v4 + 88);\n      v12 = *(_QWORD *)(v4 + 48);\n      if ( *(_QWORD *)(v4 + 64) <= v11 )\n        v11 = *(_QWORD *)(v4 + 64);\n      if ( v11 > v12 )\n      {\n        while ( 1 )\n        {\n          *(_BYTE *)(*(_QWORD *)(v4 + 8) + v12) = *(_BYTE *)(v10 + *(_BYTE *)(*(_QWORD *)(v4 + 40) + v12 + *(_QWORD *)v4));\n          if ( v11 == ++v12 )\n            break;\n          v10 = *(_QWORD *)(v4 + 120);\n        }\n        *(_QWORD *)(v4 + 48) = v11;\n        *(_QWORD *)(v4 + 56) = v11;\n      }\n      else\n      {\n        *(_QWORD *)(v4 + 48) = v12;\n        *(_QWORD *)(v4 + 56) = v12;\n      }\n    }\n    return v5;\n  }\n  if ( v8 <= 1 )\n  {\n    sub_40B4E0(v4);\n    result = 0LL;\n  }\n  else\n  {\n    result = sub_40B710(v4);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40bd10L", 
            "funcEndAddr": "0x40be5eL", 
            "funcName": "sub_40BD10"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40BE60(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax@1\n  __int64 v3; // r12@1\n  signed __int64 result; // rax@3\n  __int64 v5; // rax@8\n\n  v2 = *(_QWORD *)(a1 + 64);\n  v3 = *(_QWORD *)(a1 + 192);\n  if ( v2 > a2 || v2 >= *(_QWORD *)(a1 + 88) )\n  {\n    v5 = *(_QWORD *)(a1 + 48);\n    if ( v5 <= a2 && v5 < *(_QWORD *)(a1 + 88) )\n    {\n      result = sub_40BD10(a1, (unsigned int)(a2 + 1));\n      if ( (_DWORD)result )\n        return result;\n    }\n  }\n  else\n  {\n    result = sub_40BD10(a1, (unsigned int)(a2 + 1));\n    if ( (_DWORD)result )\n      return result;\n  }\n  if ( v3 < a2 )\n  {\n    memset((void *)(*(_QWORD *)(a1 + 184) + 8 * v3 + 8), 0, 8 * (a2 - v3));\n    *(_QWORD *)(a1 + 192) = a2;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40be60L", 
            "funcEndAddr": "0x40bee6L", 
            "funcName": "sub_40BE60"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BEF0(__int64 a1)\n{\n  free(*(void **)a1);\n  free(*(void **)(a1 + 24));\n  free((void *)a1);\n}\n", 
            "funcStartAddr": "0x40bef0L", 
            "funcEndAddr": "0x40bf0eL", 
            "funcName": "sub_40BEF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BF10(__int64 a1)\n{\n  int v1; // eax@1\n\n  v1 = *(_DWORD *)(a1 + 8) & 0x400FF;\n  if ( v1 == 6 )\n  {\n    sub_40BEF0(*(_QWORD *)a1);\n  }\n  else if ( v1 == 3 )\n  {\n    free(*(void **)a1);\n  }\n}\n", 
            "funcStartAddr": "0x40bf10L", 
            "funcEndAddr": "0x40bf38L", 
            "funcName": "sub_40BF10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BF40(__int64 a1, __int64 a2)\n{\n  sub_40BF10(a2 + 40);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40bf40L", 
            "funcEndAddr": "0x40bf54L", 
            "funcName": "sub_40BF40"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40BF60(__int64 a1, __int64 a2, void *a3)\n{\n  __int64 v3; // rbx@1\n  unsigned __int64 v4; // rdi@1\n  unsigned __int64 v5; // rbp@1\n  void *v6; // r12@2\n  void *v7; // r13@2\n  signed __int64 v8; // rax@3\n  bool v9; // cl@3\n  signed __int64 v10; // rax@5\n  signed __int64 v11; // rax@5\n  signed __int64 result; // rax@5\n  signed __int64 v13; // r14@7\n  void *v14; // rax@8\n  size_t v15; // r13@9\n  size_t v16; // rbp@9\n  void *v17; // rax@9\n  void *v18; // ST08_8@14\n  void *v19; // [sp+0h] [bp-48h]@9\n  void *ptr; // [sp+8h] [bp-40h]@8\n\n  v3 = a1;\n  v4 = *(_QWORD *)(a1 + 16);\n  v5 = *(_QWORD *)(v3 + 8);\n  if ( v4 >= v5 )\n  {\n    v13 = 2 * v5;\n    if ( 2 * v5 <= 0xAAAAAAAAAAAAAAALL )\n    {\n      ptr = a3;\n      v14 = realloc(*(void **)v3, 32 * v5);\n      if ( v14 )\n      {\n        *(_QWORD *)v3 = v14;\n        v15 = 16 * v5;\n        v16 = 48 * v5;\n        v6 = realloc(*(void **)(v3 + 24), v15);\n        v19 = realloc(*(void **)(v3 + 32), v15);\n        v7 = realloc(*(void **)(v3 + 40), v16);\n        v17 = realloc(*(void **)(v3 + 48), v16);\n        if ( v6 )\n        {\n          if ( v19 )\n          {\n            if ( v7 )\n            {\n              a3 = ptr;\n              if ( v17 )\n              {\n                *(_QWORD *)(v3 + 24) = v6;\n                v4 = *(_QWORD *)(v3 + 16);\n                *(_QWORD *)(v3 + 32) = v19;\n                *(_QWORD *)(v3 + 40) = v7;\n                *(_QWORD *)(v3 + 48) = v17;\n                *(_QWORD *)(v3 + 8) = v13;\n                goto LABEL_3;\n              }\n            }\n          }\n        }\n        v18 = v17;\n        free(v6);\n        free(v19);\n        free(v7);\n        free(v18);\n      }\n    }\n    return -1LL;\n  }\n  v6 = *(void **)(v3 + 24);\n  v7 = *(void **)(v3 + 40);\nLABEL_3:\n  v8 = *(_QWORD *)v3 + 16 * v4;\n  *(_QWORD *)(v8 + 8) = a3;\n  *(_QWORD *)v8 = a2;\n  *(_DWORD *)(v8 + 8) = (unsigned int)a3 & 0xFFFC00FF;\n  v9 = (_BYTE)a3 == 6;\n  if ( (_BYTE)a3 == 5 )\n    v9 = *(_DWORD *)(v3 + 180) > 1;\n  *(_BYTE *)(v8 + 10) = 16 * v9 | *(_BYTE *)(v8 + 10) & 0xEF;\n  *((_QWORD *)v6 + v4) = -1LL;\n  v10 = (signed __int64)v7 + 24 * *(_QWORD *)(v3 + 16);\n  *(_OWORD *)v10 = 0LL;\n  *(_QWORD *)(v10 + 16) = 0LL;\n  v11 = *(_QWORD *)(v3 + 48) + 24LL * *(_QWORD *)(v3 + 16);\n  *(_OWORD *)v11 = 0LL;\n  *(_QWORD *)(v11 + 16) = 0LL;\n  result = *(_QWORD *)(v3 + 16);\n  *(_QWORD *)(v3 + 16) = result + 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x40bf60L", 
            "funcEndAddr": "0x40c12eL", 
            "funcName": "sub_40BF60"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40C130(__int64 a1, __int64 a2, __int16 a3)\n{\n  signed __int64 v3; // r13@1\n  __int16 v4; // r12@1\n  __int64 v5; // rbp@1\n  signed __int64 result; // rax@1\n  __int64 v7; // r8@2\n  signed __int64 v8; // rsi@2\n  unsigned int v9; // ecx@2\n  unsigned int v10; // edx@2\n\n  v3 = 16 * a2;\n  v4 = a3;\n  v5 = a2;\n  result = sub_40BF60(a1, *(_QWORD *)(*(_QWORD *)a1 + 16 * a2), *(void **)(*(_QWORD *)a1 + 16 * a2 + 8));\n  if ( result != -1 )\n  {\n    v7 = *(_QWORD *)a1;\n    v8 = *(_QWORD *)a1 + 16 * result;\n    v9 = ((v4 & 0x3FF) << 8) | *(_DWORD *)(v8 + 8) & 0xFFFC00FF;\n    *(_DWORD *)(v8 + 8) = v9;\n    v10 = v9 & 0xFFFC00FF | (((v4 & 0x3FF | (unsigned __int16)(*(_DWORD *)(v7 + v3 + 8) >> 8)) & 0x3FF) << 8);\n    *(_DWORD *)(v8 + 8) = v10;\n    *(_BYTE *)(v8 + 10) = (v10 >> 16) | 4;\n    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * result) = v5;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c130L", 
            "funcEndAddr": "0x40c1cfL", 
            "funcName": "sub_40C130"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40C1D0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5)\n{\n  __int64 v5; // r9@1\n  __int64 v6; // r13@1\n  unsigned int v7; // er12@1\n  __int64 v8; // rbx@1\n  __int64 v9; // rcx@2\n  __int64 v10; // rdi@2\n  __int64 v11; // r14@2\n  signed __int64 v12; // rax@2\n  signed __int64 v13; // r14@3\n  signed __int64 v14; // r8@3\n  __int64 v15; // rsi@3\n  signed __int64 v16; // rbp@4\n  __int64 v17; // rdi@4\n  __int64 v18; // r15@4\n  __int64 v19; // rdx@5\n  __int64 v20; // rsi@5\n  signed __int64 v21; // rax@5\n  char v22; // al@14\n  int result; // eax@15\n  __int64 v24; // rax@19\n  signed __int64 v25; // r15@22\n  __int64 v26; // r9@22\n  __int64 v27; // rax@24\n  __int64 v28; // r13@24\n  char v29; // dl@29\n  __int64 v30; // [sp+0h] [bp-48h]@13\n  __int64 v31; // [sp+8h] [bp-40h]@1\n\n  v5 = a2;\n  v6 = a3;\n  v7 = a5;\n  v8 = a1;\n  v31 = a4;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v9 = *(_QWORD *)v8;\n      v10 = *(_QWORD *)(v8 + 40);\n      v11 = v6;\n      v12 = *(_QWORD *)v8 + 16 * v5;\n      if ( *(_BYTE *)(v12 + 8) == 4 )\n      {\n        v25 = 8 * v5;\n        v16 = 24 * v6;\n        v26 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v5);\n        *(_QWORD *)(v10 + 24 * v6 + 8) = 0LL;\n        v30 = v26;\n        v6 = sub_40C130(v8, v26, v7);\n        if ( v6 == -1 )\n          goto LABEL_15;\n        *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v11) = *(_QWORD *)(*(_QWORD *)(v8 + 24) + v25);\n        goto LABEL_14;\n      }\n      v13 = 24 * v5;\n      v14 = v10 + 24 * v5;\n      v15 = *(_QWORD *)(v14 + 8);\n      if ( !v15 )\n      {\n        *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v6) = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v5);\n        return 0;\n      }\n      v16 = 24 * v6;\n      v17 = 24 * v6 + v10;\n      v18 = **(_QWORD **)(v14 + 16);\n      *(_QWORD *)(v17 + 8) = 0LL;\n      if ( v15 == 1 )\n        break;\n      v19 = *(_QWORD *)(v8 + 16);\n      v20 = v19 - 1;\n      v21 = v9 + 16 * (v19 - 1);\n      if ( *(_BYTE *)(v21 + 10) & 4 && v20 > 0 )\n      {\n        while ( *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v20) != v18 || v7 != ((*(_DWORD *)(v21 + 8) >> 8) & 0x3FF) )\n        {\n          v21 += -16 * (v19 - 1) + 16 * v19 - 32;\n          --v20;\n          if ( !(*(_BYTE *)(v21 + 10) & 4) || v20 <= 0 )\n            goto LABEL_24;\n        }\n        if ( !(unsigned __int8)sub_40B280(v17, v20) )\n          goto LABEL_15;\n      }\n      else\n      {\nLABEL_24:\n        v27 = sub_40C130(v8, v18, v7);\n        v28 = v27;\n        if ( v27 == -1 || !(unsigned __int8)sub_40B280(v16 + *(_QWORD *)(v8 + 40), v27) )\n          goto LABEL_15;\n        result = sub_40C1D0(v8, v18, v28, v31, v7);\n        if ( result )\n          return result;\n      }\n      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + v13 + 16) + 8LL);\n      v6 = sub_40C130(v8, v30, v7);\n      if ( v6 == -1 )\n        goto LABEL_15;\nLABEL_14:\n      v22 = (unsigned __int64)sub_40B280(v16 + *(_QWORD *)(v8 + 40), v6);\n      v5 = v30;\n      if ( !v22 )\n        goto LABEL_15;\n    }\n    if ( v5 == v31 && v5 != v6 )\n      break;\n    v7 |= (*(_DWORD *)(v12 + 8) >> 8) & 0x3FF;\n    v24 = sub_40C130(v8, v18, v7);\n    v6 = v24;\n    if ( v24 == -1 || !(unsigned __int8)sub_40B280(v16 + *(_QWORD *)(v8 + 40), v24) )\n      goto LABEL_15;\n    v5 = v18;\n  }\n  v29 = (unsigned __int64)sub_40B280(v17, v18);\n  result = 0;\n  if ( !v29 )\nLABEL_15:\n    result = 12;\n  return result;\n}\n", 
            "funcStartAddr": "0x40c1d0L", 
            "funcEndAddr": "0x40c454L", 
            "funcName": "sub_40C1D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C460(__int64 a1)\n{\n  __int64 v1; // rax@1\n\n  free(*(void **)(a1 + 48));\n  free(*(void **)(a1 + 72));\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( v1 != a1 + 8 )\n  {\n    free(*(void **)(v1 + 16));\n    free(*(void **)(a1 + 80));\n  }\n  free(*(void **)(a1 + 24));\n  free(*(void **)(a1 + 96));\n  free(*(void **)(a1 + 88));\n  free((void *)a1);\n}\n", 
            "funcStartAddr": "0x40c460L", 
            "funcEndAddr": "0x40c4b9L", 
            "funcName": "sub_40C460"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C4C0(__int64 a1)\n{\n  free(*(void **)(a1 + 16));\n  free(*(void **)(a1 + 24));\n  if ( *(_BYTE *)(a1 + 139) )\n    free(*(void **)(a1 + 8));\n}\n", 
            "funcStartAddr": "0x40c4c0L", 
            "funcEndAddr": "0x40c4f2L", 
            "funcName": "sub_40C4C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C500(__int64 a1)\n{\n  __int64 v1; // r13@2\n  __int64 v2; // r12@3\n  __int64 v3; // rbx@4\n  __int64 v4; // rbp@5\n  __int64 v5; // rax@6\n\n  if ( *(_QWORD *)(a1 + 232) > 0LL )\n  {\n    v1 = 0LL;\n    do\n    {\n      v2 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v1);\n      if ( *(_QWORD *)(v2 + 32) > 0LL )\n      {\n        v3 = 0LL;\n        do\n        {\n          v4 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8 * v3++);\n          free(*(void **)(v4 + 32));\n          free((void *)v4);\n        }\n        while ( *(_QWORD *)(v2 + 32) > v3 );\n      }\n      free(*(void **)(v2 + 40));\n      v5 = *(_QWORD *)(v2 + 16);\n      if ( v5 )\n      {\n        free(*(void **)(v5 + 16));\n        free(*(void **)(v2 + 16));\n      }\n      ++v1;\n      free((void *)v2);\n    }\n    while ( *(_QWORD *)(a1 + 232) > v1 );\n  }\n  *(_QWORD *)(a1 + 232) = 0LL;\n  *(_QWORD *)(a1 + 200) = 0LL;\n}\n", 
            "funcStartAddr": "0x40c500L", 
            "funcEndAddr": "0x40c5b8L", 
            "funcName": "sub_40C500"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40C840(__int64 a1, __int64 a2)\n{\n  signed __int64 v2; // rcx@1\n  signed __int64 v3; // rax@1\n  __int64 v4; // rdx@2\n  signed __int64 v5; // rcx@3\n  signed __int64 v6; // rsi@3\n  signed __int64 v7; // rdx@3\n  signed __int64 result; // rax@5\n\n  v2 = *(_QWORD *)(a1 + 48);\n  v3 = a2 + 1;\n  if ( a2 + 1 >= v2 || (v4 = *(_QWORD *)(a1 + 16), *(_DWORD *)(v4 + 4 * v3) != -1) )\n  {\n    result = 1LL;\n  }\n  else\n  {\n    v5 = v2 - a2;\n    v6 = v4 + 4 * v3 - 4;\n    v7 = 2LL;\n    do\n    {\n      result = (unsigned int)v7;\n      if ( v7 == v5 )\n        break;\n      ++v7;\n    }\n    while ( *(_DWORD *)(v6 + 4 * v7 - 4) == -1 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c840L", 
            "funcEndAddr": "0x40c88eL", 
            "funcName": "sub_40C840"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40C890(__int64 a1, __int64 *a2, __int64 a3)\n{\n  signed __int64 result; // rax@1\n  __int64 v4; // r8@2\n  unsigned __int64 v5; // rdi@2\n  unsigned __int64 v6; // rsi@2\n  unsigned __int64 v7; // rcx@4\n  unsigned __int64 v8; // rax@5\n\n  result = 0LL;\n  if ( a1 > 0 )\n  {\n    v4 = *a2;\n    v5 = a1 - 1;\n    v6 = 0LL;\n    while ( v6 < v5 )\n    {\n      v7 = (v6 + v5) >> 1;\n      if ( a3 <= *(_QWORD *)(v4 + 8 * v7) )\n      {\n        while ( v6 < v7 )\n        {\n          v8 = (v6 + v7) >> 1;\n          if ( *(_QWORD *)(v4 + 8 * v8) < a3 )\n            goto LABEL_11;\n          v7 = (v6 + v7) >> 1;\n        }\n        break;\n      }\n      v8 = (v6 + v5) >> 1;\n      v7 = v5;\nLABEL_11:\n      v6 = v8 + 1;\n      v5 = v7;\n    }\n    result = 0LL;\n    if ( a3 == *(_QWORD *)(v4 + 8 * v6) )\n      result = v6 + 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c890L", 
            "funcEndAddr": "0x40c8f5L", 
            "funcName": "sub_40C890"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40C900(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5)\n{\n  __int64 v5; // r15@1\n  unsigned int v6; // er13@1\n  __int64 i; // rbx@1\n  signed __int64 v8; // rax@3\n  signed __int64 v9; // rbx@6\n  signed __int64 v10; // rdx@6\n  __int64 v11; // rax@6\n  __int64 v12; // rdx@7\n  int result; // eax@9\n\n  v5 = a4;\n  v6 = a5;\n  for ( i = a3; !sub_40C890(*(_QWORD *)(a2 + 8), (__int64 *)(a2 + 16), i); i = *(_QWORD *)v12 )\n  {\n    v8 = *(_QWORD *)a1 + 16 * i;\n    if ( *(_BYTE *)(v8 + 8) == v6 && *(_QWORD *)v8 == v5 )\n    {\n      if ( v6 == 9 && !(unsigned __int8)sub_40B280(a2, i) )\n        return 12;\n      return 0;\n    }\n    if ( !(unsigned __int8)sub_40B280(a2, i) )\n      return 12;\n    v9 = 24 * i;\n    v10 = v9 + *(_QWORD *)(a1 + 40);\n    v11 = *(_QWORD *)(v10 + 8);\n    if ( !v11 )\n      return 0;\n    v12 = *(_QWORD *)(v10 + 16);\n    if ( v11 == 2 )\n    {\n      result = sub_40C900(a1, a2, *(_QWORD *)(v12 + 8), v5, v6);\n      if ( result )\n        return result;\n      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + v9 + 16);\n    }\n  }\n  return 0;\n}\n", 
            "funcStartAddr": "0x40c900L", 
            "funcEndAddr": "0x40c9f9L", 
            "funcName": "sub_40C900"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40CA00(_QWORD *a1, __int64 *a2, __int64 a3)\n{\n  __int64 v3; // rax@2\n\n  if ( a3 < *a1 )\n  {\n    v3 = *a2;\n    do\n    {\n      *(_QWORD *)(v3 + 8 * a3) = *(_QWORD *)(v3 + 8 * a3 + 8);\n      ++a3;\n    }\n    while ( a3 < *a1 );\n  }\n}\n", 
            "funcStartAddr": "0x40ca00L", 
            "funcEndAddr": "0x40ca23L", 
            "funcName": "sub_40CA00"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40CB20(__int64 a1, _QWORD *a2, _QWORD *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)\n{\n  signed __int64 v7; // rbx@1\n  signed __int64 v8; // r15@1\n  signed __int64 i; // rax@1\n  __int64 v10; // rbp@3\n  signed __int64 v11; // r10@3\n  signed __int64 v12; // rax@11\n  signed __int64 v13; // rbp@11\n  __int64 v14; // r11@13\n  signed __int64 v15; // r10@13\n  __int64 v16; // r14@22\n  _QWORD *v17; // rbp@22\n  __int64 v18; // rsi@23\n  signed __int64 v19; // r12@23\n  int v20; // ebx@23\n  signed __int64 result; // rax@24\n  signed __int64 v22; // r13@4\n  signed __int64 v23; // r14@14\n  _QWORD *v24; // [sp+8h] [bp-70h]@1\n  __int64 v25; // [sp+10h] [bp-68h]@22\n  __int64 v26; // [sp+18h] [bp-60h]@22\n  __int64 v27; // [sp+20h] [bp-58h]@22\n  __int64 v28; // [sp+28h] [bp-50h]@22\n  __int64 v29; // [sp+30h] [bp-48h]@22\n  _QWORD *v30; // [sp+38h] [bp-40h]@22\n\n  v7 = 0LL;\n  v8 = *(_QWORD *)(a1 + 200);\n  v24 = *(_QWORD **)(a1 + 152);\n  for ( i = *(_QWORD *)(a1 + 200); v7 < i; i = v11 )\n  {\n    v10 = *(_QWORD *)(a1 + 216);\n    v11 = (v7 + i) / 2;\n    if ( a5 <= *(_QWORD *)(v10 + 40 * v11 + 8) )\n    {\n      while ( v7 < v11 )\n      {\n        v22 = (v7 + v11) / 2;\n        if ( *(_QWORD *)(v10 + 40 * v22 + 8) < a5 )\n          goto LABEL_26;\n        v11 = (v7 + v11) / 2;\n      }\n      break;\n    }\n    v22 = (v7 + i) / 2;\n    v11 = i;\nLABEL_26:\n    v7 = v22 + 1;\n  }\n  if ( v8 <= v7 )\n  {\n    v7 = -1LL;\n  }\n  else if ( a5 != *(_QWORD *)(*(_QWORD *)(a1 + 216) + 40 * v7 + 8) )\n  {\n    v7 = -1LL;\n  }\n  v12 = *(_QWORD *)(a1 + 200);\n  v13 = 0LL;\n  while ( v13 < v12 )\n  {\n    v14 = *(_QWORD *)(a1 + 216);\n    v15 = (v13 + v12) / 2;\n    if ( a7 <= *(_QWORD *)(v14 + 40 * v15 + 8) )\n    {\n      while ( v13 < v15 )\n      {\n        v23 = (v13 + v15) / 2;\n        if ( *(_QWORD *)(v14 + 40 * v23 + 8) < a7 )\n          goto LABEL_27;\n        v15 = (v13 + v15) / 2;\n      }\n      break;\n    }\n    v23 = (v13 + v12) / 2;\n    v15 = v12;\nLABEL_27:\n    v13 = v23 + 1;\n    v12 = v15;\n  }\n  if ( v8 <= v13 )\n  {\n    v13 = -1LL;\n  }\n  else if ( a7 != *(_QWORD *)(*(_QWORD *)(a1 + 216) + 40 * v13 + 8) )\n  {\n    v13 = -1LL;\n  }\n  if ( *a2 <= 0LL )\n  {\nLABEL_29:\n    result = 0LL;\n  }\n  else\n  {\n    v27 = a6;\n    v16 = 0LL;\n    v26 = a5;\n    v25 = a4;\n    v30 = a2;\n    v28 = v7;\n    v29 = v13;\n    v17 = a3;\n    while ( 1 )\n    {\n      v18 = *(_QWORD *)(*v17 + 8 * v16);\n      v19 = *(_QWORD *)(*v24 + 16LL * *(_QWORD *)(*(_QWORD *)(a1 + 216) + 40 * v18));\n      v20 = sub_40B100(a1, v18, v19, v25, v26, v28);\n      if ( v20 != (unsigned int)sub_40B100(a1, *(_QWORD *)(*v17 + 8 * v16), v19, v27, a7, v29) )\n        break;\n      if ( ++v16 >= *v30 )\n        goto LABEL_29;\n    }\n    result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40cb20L", 
            "funcEndAddr": "0x40cd6eL", 
            "funcName": "sub_40CB20"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40CD70(__int64 a1, int (__fastcall *a2)(__int64, __int64), __int64 a3)\n{\n  __int64 v3; // rbp@1\n  __int64 i; // rbx@1\n  int result; // eax@3\n  __int64 v6; // rdx@4\n  __int64 v7; // rcx@4\n\n  v3 = a3;\n  for ( i = a1; ; i = v6 )\n  {\n    result = a2(v3, i);\n    if ( result )\n      break;\n    v6 = *(_QWORD *)(i + 8);\n    v7 = 0LL;\n    if ( !v6 )\n    {\n      while ( 1 )\n      {\n        v6 = *(_QWORD *)(i + 16);\n        if ( v6 != v7 )\n        {\n          if ( v6 )\n            break;\n        }\n        v7 = i;\n        if ( !*(_QWORD *)i )\n          return result;\n        i = *(_QWORD *)i;\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40cd70L", 
            "funcEndAddr": "0x40cdc1L", 
            "funcName": "sub_40CD70"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40CDD0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax@2\n  __int64 v3; // r12@3\n  __int64 v4; // rdx@3\n  __int64 v5; // rbx@3\n  signed __int64 v6; // rbp@5\n  signed __int64 v7; // rax@5\n  signed __int64 v8; // rdx@5\n  signed __int64 v9; // rdi@5\n  __int64 v10; // rcx@8\n  __int64 v11; // rsi@8\n  signed __int64 v12; // rax@12\n  __int64 v13; // rcx@13\n  signed __int64 v14; // r8@13\n  signed __int64 v15; // rdx@13\n  signed __int64 v16; // rax@14\n  _QWORD *v17; // rdi@14\n  __int64 v18; // rsi@15\n  __int64 v19; // rcx@15\n  char *v20; // r9@15\n  __int64 v22; // rax@24\n  signed __int64 v23; // rbp@24\n  void *v24; // rax@24\n  void *v25; // rdi@26\n  const void *v26; // rsi@26\n\n  if ( !a2 )\n    return 0LL;\n  v2 = *(_QWORD *)(a2 + 8);\n  if ( !v2 )\n    return 0LL;\n  v3 = a2;\n  v4 = *(_QWORD *)(a1 + 8);\n  v5 = a1;\n  if ( *(_QWORD *)a1 >= v4 + 2 * v2 )\n  {\n    if ( v4 )\n      goto LABEL_5;\nLABEL_26:\n    v25 = *(void **)(a1 + 16);\n    v26 = *(const void **)(a2 + 16);\n    *(_QWORD *)(v5 + 8) = v2;\n    memcpy(v25, v26, 8LL * *(_QWORD *)(v3 + 8));\n    return 0LL;\n  }\n  v22 = *(_QWORD *)a1 + v2;\n  v23 = 2 * v22;\n  v24 = realloc(*(void **)(a1 + 16), 16 * v22);\n  if ( !v24 )\n    return 12LL;\n  v4 = *(_QWORD *)(a1 + 8);\n  *(_QWORD *)(a1 + 16) = v24;\n  *(_QWORD *)a1 = v23;\n  v2 = *(_QWORD *)(a2 + 8);\n  if ( !v4 )\n    goto LABEL_26;\nLABEL_5:\n  v6 = v4 + 2 * v2;\n  v7 = v2 - 1;\n  v8 = v4 - 1;\n  v9 = ~v7;\nLABEL_6:\n  if ( v9 < 0 )\n  {\n    while ( v8 >= 0 )\n    {\n      v10 = *(_QWORD *)(v5 + 16);\n      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v7);\n      if ( *(_QWORD *)(v10 + 8 * v8) == v11 )\n      {\n        --v7;\n        --v8;\n        v9 = ~v7;\n        goto LABEL_6;\n      }\n      if ( *(_QWORD *)(v10 + 8 * v8) >= v11 )\n      {\n        --v8;\n        goto LABEL_6;\n      }\n      --v7;\n      *(_QWORD *)(v10 + 8 * --v6) = v11;\n      v9 = ~v7;\n      if ( ~v7 >= 0 )\n        break;\n    }\n  }\n  if ( v7 >= 0 )\n  {\n    v12 = v7 + 1;\n    v6 -= v12;\n    memcpy((void *)(*(_QWORD *)(v5 + 16) + 8 * v6), *(const void **)(v3 + 16), 8 * v12);\n  }\n  v13 = *(_QWORD *)(v5 + 8);\n  v14 = v13 + 2LL * *(_QWORD *)(v3 + 8) - 1;\n  v15 = v14 - v6 + 1;\n  if ( v14 - v6 == -1 )\n    return 0LL;\n  v16 = v13 - 1;\n  v17 = *(_QWORD **)(v5 + 16);\n  *(_QWORD *)(v5 + 8) = v15 + v13;\n  do\n  {\n    while ( 1 )\n    {\n      v18 = v17[v14];\n      v19 = v17[v16];\n      v20 = (char *)&v17[v16 + v15];\n      if ( v18 <= v19 )\n        break;\n      --v14;\n      *(_QWORD *)v20 = v18;\n      if ( !--v15 )\n        return 0LL;\n    }\n    *(_QWORD *)v20 = v19;\n    --v16;\n  }\n  while ( v16 >= 0 );\n  memcpy(v17, &v17[v6], 8 * v15);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40cdd0L", 
            "funcEndAddr": "0x40cf93L", 
            "funcName": "sub_40CDD0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40CFA0(__m128i *a1, __int64 a2, __int64 a3, char a4)\n{\n  __int64 v4; // r15@1\n  __int64 v5; // r12@1\n  signed __int64 v6; // rbp@1\n  signed __int64 v7; // rbx@1\n  __int64 v8; // rax@1\n  __int64 v9; // rdx@2\n  signed __int64 v10; // rax@2\n  unsigned int v11; // er8@2\n  __int64 v12; // rsi@4\n  signed __int64 v13; // rax@4\n  char v14; // r13@5\n  __int64 v15; // r14@5\n  int result; // eax@7\n  signed __int64 v17; // rbx@11\n  signed __int64 v18; // rax@11\n  __int64 v19; // rcx@11\n  __int64 v20; // rax@17\n  __m128i v21; // xmm1@27\n  char v22; // [sp+Ch] [bp-7Ch]@1\n  __int128 v23; // [sp+10h] [bp-78h]@1\n  void *v24; // [sp+20h] [bp-68h]@1\n  __m128i v25; // [sp+30h] [bp-58h]@6\n  void *ptr; // [sp+40h] [bp-48h]@6\n\n  v4 = a2;\n  v5 = a3;\n  v6 = 24 * a3;\n  v7 = 24 * a3 + *(_QWORD *)(a2 + 40);\n  v22 = a4;\n  v8 = *(_QWORD *)(v7 + 8);\n  *((_QWORD *)&v23 + 1) = 0LL;\n  *(_QWORD *)&v23 = v8 + 1;\n  v24 = malloc(8 * (v8 + 1));\n  if ( !v24 )\n    return 12;\n  v9 = *(_QWORD *)a2;\n  *(_QWORD *)(*(_QWORD *)(a2 + 48) + v6 + 8) = -1LL;\n  v10 = v9 + 16 * v5;\n  v11 = *(_DWORD *)(v10 + 8);\n  if ( !(v11 & 0x3FF00) )\n    goto LABEL_3;\n  if ( !*(_QWORD *)(v7 + 8) )\n    goto LABEL_24;\n  if ( *(_BYTE *)(v9 + 16LL * **(_QWORD **)(v7 + 16) + 10) & 4 )\n  {\nLABEL_3:\n    if ( *(_BYTE *)(v10 + 8) & 8 )\n    {\n      v12 = *(_QWORD *)(a2 + 40);\n      v13 = v12 + v6;\n      if ( *(_QWORD *)(v12 + v6 + 8) > 0LL )\n      {\n        v14 = 0;\n        v15 = 0LL;\n        do\n        {\n          while ( 1 )\n          {\n            v17 = 24LL * *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v15);\n            v18 = v17 + *(_QWORD *)(v4 + 48);\n            v19 = *(_QWORD *)(v18 + 8);\n            if ( v19 != -1 )\n              break;\n            v13 = v12 + v6;\n            v14 = 1;\n            if ( *(_QWORD *)(v12 + v6 + 8) <= ++v15 )\n              goto LABEL_16;\n          }\n          if ( v19 )\n          {\n            v25 = _mm_loadu_si128((const __m128i *)v18);\n            ptr = *(void **)(v18 + 16);\n          }\n          else\n          {\n            result = sub_40CFA0(&v25, v4);\n            if ( result )\n              return result;\n          }\n          result = sub_40CDD0((__int64)&v23, (__int64)&v25);\n          if ( result )\n            return result;\n          if ( !*(_QWORD *)(*(_QWORD *)(v4 + 48) + v17 + 8) )\n          {\n            v14 = 1;\n            free(ptr);\n          }\n          v12 = *(_QWORD *)(v4 + 40);\n          ++v15;\n          v13 = v12 + v6;\n        }\n        while ( *(_QWORD *)(v12 + v6 + 8) > v15 );\nLABEL_16:\n        if ( (unsigned __int8)sub_40B280((__int64)&v23, v5) )\n        {\n          v20 = *(_QWORD *)(v4 + 48);\n          if ( v22 != 1 && v14 )\n          {\n            *(_QWORD *)(v20 + v6 + 8) = 0LL;\nLABEL_27:\n            v21 = _mm_load_si128((const __m128i *)&v23);\n            a1[1].m128i_i64[0] = (__int64)v24;\n            result = 0;\n            *a1 = v21;\n            return result;\n          }\nLABEL_26:\n          *(__m128i *)(v20 + v6) = _mm_load_si128((const __m128i *)&v23);\n          *(_QWORD *)(v20 + v6 + 16) = v24;\n          goto LABEL_27;\n        }\n        return 12;\n      }\n    }\nLABEL_24:\n    if ( (unsigned __int8)sub_40B280((__int64)&v23, v5) )\n    {\n      v20 = *(_QWORD *)(v4 + 48);\n      goto LABEL_26;\n    }\n    return 12;\n  }\n  result = sub_40C1D0(a2, v5, v5, v5, (v11 >> 8) & 0x3FF);\n  if ( !result )\n  {\n    v10 = 16 * v5 + *(_QWORD *)a2;\n    goto LABEL_3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40cfa0L", 
            "funcEndAddr": "0x40d1f4L", 
            "funcName": "sub_40CFA0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40D200(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)\n{\n  __int64 v4; // r14@1\n  __int64 v5; // rbp@1\n  unsigned int v6; // ebx@1\n  __int64 v7; // r12@1\n  __int64 v8; // r12@3\n  __int64 v9; // rdx@4\n  __int64 v10; // rsi@4\n  __int64 v11; // r9@4\n  __int64 v12; // r11@5\n  __int64 v13; // rcx@5\n  signed __int64 v14; // rax@7\n  unsigned int v15; // eax@10\n  __m128i v16; // xmm0@12\n  signed __int64 result; // rax@12\n  unsigned int v18; // ST0C_4@14\n  __int128 v19; // [sp+10h] [bp-48h]@1\n  void *ptr; // [sp+20h] [bp-38h]@1\n\n  v4 = a2;\n  v5 = a3;\n  v6 = a4;\n  v7 = *(_QWORD *)(a2 + 8);\n  *((_QWORD *)&v19 + 1) = 0LL;\n  *(_QWORD *)&v19 = v7;\n  ptr = malloc(8 * v7);\n  if ( ptr )\n  {\n    if ( v7 <= 0 )\n    {\nLABEL_12:\n      free(*(void **)(v4 + 16));\n      v16 = _mm_load_si128((const __m128i *)&v19);\n      *(_QWORD *)(v4 + 16) = ptr;\n      result = 0LL;\n      *(__m128i *)v4 = v16;\n      return result;\n    }\n    v8 = 0LL;\n    while ( 1 )\n    {\n      v9 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v8);\n      v10 = *(_QWORD *)(a1 + 48) + 24 * v9;\n      v11 = *(_QWORD *)(v10 + 8);\n      if ( v11 <= 0 )\n        goto LABEL_13;\n      v12 = *(_QWORD *)(v10 + 16);\n      v13 = 0LL;\n      while ( 1 )\n      {\n        v14 = *(_QWORD *)a1 + 16LL * *(_QWORD *)(v12 + 8 * v13);\n        if ( v6 == *(_BYTE *)(v14 + 8) && v5 == *(_QWORD *)v14 )\n          break;\n        if ( v11 == ++v13 )\n          goto LABEL_13;\n      }\n      if ( *(_QWORD *)(v12 + 8 * v13) == -1LL )\n      {\nLABEL_13:\n        v15 = sub_40CDD0((__int64)&v19, v10);\n        if ( v15 )\n        {\nLABEL_14:\n          v18 = v15;\n          free(ptr);\n          return v18;\n        }\n      }\n      else\n      {\n        v15 = sub_40C900(a1, (__int64)&v19, v9, v5, v6);\n        if ( v15 )\n          goto LABEL_14;\n      }\n      if ( *(_QWORD *)(v4 + 8) <= ++v8 )\n        goto LABEL_12;\n    }\n  }\n  return 12LL;\n}\n", 
            "funcStartAddr": "0x40d200L", 
            "funcEndAddr": "0x40d33fL", 
            "funcName": "sub_40D200"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40D340(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r10@1\n  signed __int64 result; // rax@1\n  __int64 v5; // r8@2\n  __int64 v6; // r12@3\n  __int64 v7; // rbp@3\n  __int64 v8; // rbx@3\n  __int64 v9; // rcx@3\n  __int64 v10; // r13@3\n  void *v11; // rdi@3\n  __int64 v12; // r13@4\n  __int64 v13; // r11@4\n  __int64 v14; // rsi@4\n  signed __int64 v15; // rax@4\n  signed __int64 v16; // r10@4\n  __int64 v17; // rsi@4\n  signed __int64 v18; // rcx@4\n  __int64 v19; // r8@4\n  __int64 v20; // rdx@4\n  bool v21; // sf@5\n  unsigned __int8 v22; // of@5\n  __int64 v23; // r9@12\n  __int64 v24; // rcx@21\n  __int64 v25; // rdx@21\n  signed __int64 v26; // rax@21\n  signed __int64 v27; // r9@21\n  __int64 v28; // rdx@21\n  __int64 v29; // r8@23\n  __int64 v30; // rcx@23\n  char *v31; // r10@23\n  size_t v32; // rdx@25\n  __int64 v33; // r13@31\n  void *v34; // rax@31\n\n  v3 = *(_QWORD *)(a2 + 8);\n  result = 0LL;\n  if ( v3 )\n  {\n    v5 = *(_QWORD *)(a3 + 8);\n    if ( v5 )\n    {\n      v6 = a3;\n      v7 = a2;\n      v8 = a1;\n      v9 = *(_QWORD *)(a1 + 8);\n      v10 = *(_QWORD *)a1;\n      v11 = *(void **)(a1 + 16);\n      if ( v3 + v5 + v9 > v10 )\n      {\n        v33 = v3 + v5 + v10;\n        v34 = realloc(v11, 8 * v33);\n        v11 = v34;\n        if ( !v34 )\n          return 12LL;\n        v9 = *(_QWORD *)(v8 + 8);\n        v3 = *(_QWORD *)(a2 + 8);\n        *(_QWORD *)(v8 + 16) = v34;\n        *(_QWORD *)v8 = v33;\n        v5 = *(_QWORD *)(v6 + 8);\n      }\n      v12 = *(_QWORD *)(a2 + 16);\n      v13 = *(_QWORD *)(v6 + 16);\n      v14 = v9 + v3;\n      v15 = v5 - 1;\n      v16 = v3 - 1;\n      v17 = v5 + v14;\n      v18 = v9 - 1;\n      v19 = *(_QWORD *)(v12 + 8 * v16);\n      v20 = *(_QWORD *)(v13 + 8 * v15);\n      while ( 1 )\n      {\n        v22 = __OFSUB__(v19, v20);\n        v21 = v19 - v20 < 0;\n        if ( v19 == v20 )\n          break;\nLABEL_6:\n        if ( v21 ^ v22 )\n        {\n          if ( --v15 >= 0 )\n            goto LABEL_8;\n          goto LABEL_21;\n        }\n        if ( --v16 < 0 )\n          goto LABEL_21;\n        v19 = *(_QWORD *)(v12 + 8 * v16);\n      }\n      while ( 1 )\n      {\n        if ( v18 < 0 )\n          goto LABEL_14;\n        while ( 1 )\n        {\n          v23 = *((_QWORD *)v11 + v18);\n          if ( v23 <= v19 )\n            break;\n          if ( --v18 == -1 )\n            goto LABEL_14;\n        }\n        if ( v23 != v19 )\nLABEL_14:\n          *((_QWORD *)v11 + --v17) = v19;\n        if ( --v16 < 0 )\n          break;\n        if ( --v15 < 0 )\n          break;\n        v19 = *(_QWORD *)(v12 + 8 * v16);\nLABEL_8:\n        v20 = *(_QWORD *)(v13 + 8 * v15);\n        v22 = __OFSUB__(v19, v20);\n        v21 = v19 - v20 < 0;\n        if ( v19 != v20 )\n          goto LABEL_6;\n      }\nLABEL_21:\n      v24 = *(_QWORD *)(v8 + 8);\n      v25 = *(_QWORD *)(v6 + 8) + v24 + *(_QWORD *)(v7 + 8);\n      v26 = v24 - 1;\n      v27 = v25 - 1;\n      v28 = v25 - v17;\n      *(_QWORD *)(v8 + 8) = v28 + v24;\n      if ( v28 <= 0 || v26 < 0 )\n      {\n        v32 = 8 * v28;\n      }\n      else\n      {\n        do\n        {\n          while ( 1 )\n          {\n            v29 = *((_QWORD *)v11 + v27);\n            v30 = *((_QWORD *)v11 + v26);\n            v31 = (char *)v11 + 8 * (v26 + v28);\n            if ( v29 <= v30 )\n              break;\n            --v27;\n            *(_QWORD *)v31 = v29;\n            if ( !--v28 )\n            {\n              v11 = *(void **)(v8 + 16);\n              v32 = 0LL;\n              goto LABEL_29;\n            }\n          }\n          --v26;\n          *(_QWORD *)v31 = v30;\n        }\n        while ( v26 != -1 );\n        v32 = 8 * v28;\n        v11 = *(void **)(v8 + 16);\n      }\nLABEL_29:\n      memcpy(v11, (char *)v11 + 8 * v17, v32);\n      result = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40d340L", 
            "funcEndAddr": "0x40d4f2L", 
            "funcName": "sub_40D340"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40D500(char **a1, signed int *a2, char **a3, char **a4, const __m128i *a5)\n{\n  char **v5; // rbx@1\n  __int64 v6; // rdi@1\n  char *v7; // r10@2\n  signed int v8; // eax@2\n  signed __int64 v9; // r9@2\n  char *result; // rax@3\n  __m128i *v11; // rdi@3\n  char *v12; // rax@9\n  char **v13; // [sp+8h] [bp-20h]@8\n  char **v14; // [sp+10h] [bp-18h]@8\n  const __m128i *v15; // [sp+18h] [bp-10h]@8\n\n  v5 = a1;\n  v6 = *a2;\n  if ( (_DWORD)v6 == 15 )\n  {\n    v15 = a5;\n    v14 = a4;\n    v13 = a3;\n    v7 = (char *)malloc(0x3C8uLL);\n    if ( !v7 )\n      return 0LL;\n    v12 = *v5;\n    v9 = 8LL;\n    *v5 = v7;\n    v6 = 0LL;\n    a5 = v15;\n    a4 = v14;\n    a3 = v13;\n    *(_QWORD *)v7 = v12;\n    v8 = 1;\n  }\n  else\n  {\n    v7 = *v5;\n    v8 = v6 + 1;\n    v9 = (v6 << 6) + 8;\n  }\n  *a2 = v8;\n  result = &v7[v9];\n  v11 = (__m128i *)&v7[64 * v6];\n  v11->m128i_i64[1] = 0LL;\n  v11[1].m128i_i64[0] = (__int64)a3;\n  v11[1].m128i_i64[1] = (__int64)a4;\n  v11[3] = _mm_loadu_si128(a5);\n  v11[3].m128i_i8[10] &= 0xF3u;\n  v11[2].m128i_i64[0] = 0LL;\n  v11[2].m128i_i64[1] = 0LL;\n  v11[4].m128i_i64[0] = -1LL;\n  if ( a3 )\n    *a3 = result;\n  if ( a4 )\n    *a4 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x40d500L", 
            "funcEndAddr": "0x40d5d7L", 
            "funcName": "sub_40D500"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40D5E0(_QWORD *a1, __int64 a2)\n{\n  _QWORD *v2; // rbx@1\n  __int64 v3; // rbp@1\n  __int64 *v4; // r14@1\n  char *result; // rax@3\n  _QWORD *v6; // rdx@5\n  _QWORD *v7; // rax@7\n  __int64 v8; // [sp+8h] [bp-30h]@1\n\n  v2 = a1;\n  v3 = *a1;\n  v4 = &v8;\n  while ( 1 )\n  {\n    result = sub_40D500((char **)(a2 + 112), (signed int *)(a2 + 128), 0LL, 0LL, (const __m128i *)(v2 + 5));\n    *v4 = (__int64)result;\n    if ( !result )\n      break;\n    *(_QWORD *)result = v3;\n    v3 = *v4;\n    *(_BYTE *)(v3 + 50) |= 4u;\n    if ( v2[1] )\n    {\n      v4 = (__int64 *)(v3 + 8);\n      v2 = (_QWORD *)v2[1];\n    }\n    else\n    {\n      v6 = 0LL;\n      while ( 1 )\n      {\n        v7 = (_QWORD *)v2[2];\n        if ( v7 )\n        {\n          if ( v7 != v6 )\n            break;\n        }\n        v3 = *(_QWORD *)v3;\n        v6 = v2;\n        if ( !*v2 )\n          return (char *)v8;\n        v2 = (_QWORD *)*v2;\n      }\n      v4 = (__int64 *)(v3 + 16);\n      v2 = (_QWORD *)v2[2];\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40d5e0L", 
            "funcEndAddr": "0x40d689L", 
            "funcName": "sub_40D5E0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40D690(_DWORD *a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r12@1\n  __int64 v4; // rbx@1\n  char *v5; // rbp@1\n  signed __int64 v6; // rax@3\n  __int64 v7; // rdx@4\n  char **v8; // r13@5\n  const __m128i *v9; // r14@5\n  signed int *v10; // rsi@5\n  char **v11; // rdi@5\n  char *v12; // rbx@5\n  char *v13; // r15@5\n  char *v14; // r11@6\n  __int64 v15; // rax@11\n  char v16; // cl@11\n  signed int *v18; // rsi@13\n  char **v19; // rdi@13\n  signed int *v20; // rsi@14\n  char **v21; // rdi@14\n  signed int *v22; // [sp+8h] [bp-60h]@5\n  char *v23; // [sp+10h] [bp-58h]@7\n  _DWORD *v24; // [sp+18h] [bp-50h]@1\n  char v25; // [sp+20h] [bp-48h]@5\n  char v26; // [sp+28h] [bp-40h]@5\n\n  v3 = a3;\n  v4 = *(_QWORD *)a2;\n  v5 = *(char **)(a3 + 8);\n  v24 = a1;\n  if ( *(_BYTE *)(a2 + 56) & 0x10 )\n  {\n    if ( !v5 )\n    {\n      v8 = (char **)(v4 + 112);\n      v9 = (const __m128i *)&v25;\n      v26 = 8;\n      v22 = (signed int *)(v4 + 128);\n      v18 = (signed int *)(v4 + 128);\n      v19 = (char **)(v4 + 112);\n      v12 = sub_40D500((char **)(v4 + 112), (signed int *)(v4 + 128), 0LL, 0LL, (const __m128i *)&v25);\n      v26 = 9;\n      v14 = sub_40D500(v19, v18, 0LL, 0LL, (const __m128i *)&v25);\n      v13 = v14;\n      goto LABEL_7;\n    }\n    v6 = *(_QWORD *)(a3 + 40);\n    if ( v6 > 63 )\n      return v5;\n    v7 = *(_QWORD *)(v4 + 160);\n    if ( !_bittest64(&v7, v6) )\n      return v5;\n    v8 = (char **)(v4 + 112);\n    v9 = (const __m128i *)&v25;\n    v26 = 8;\n    v22 = (signed int *)(v4 + 128);\n    v10 = (signed int *)(v4 + 128);\n    v11 = (char **)(v4 + 112);\n    v12 = sub_40D500((char **)(v4 + 112), (signed int *)(v4 + 128), 0LL, 0LL, (const __m128i *)&v25);\n    v26 = 9;\n    v13 = sub_40D500(v11, v10, 0LL, 0LL, (const __m128i *)&v25);\n  }\n  else\n  {\n    v8 = (char **)(v4 + 112);\n    v9 = (const __m128i *)&v25;\n    v26 = 8;\n    v22 = (signed int *)(v4 + 128);\n    v20 = (signed int *)(v4 + 128);\n    v21 = (char **)(v4 + 112);\n    v12 = sub_40D500((char **)(v4 + 112), (signed int *)(v4 + 128), 0LL, 0LL, (const __m128i *)&v25);\n    v26 = 9;\n    v13 = sub_40D500(v21, v20, 0LL, 0LL, (const __m128i *)&v25);\n    v14 = v13;\n    if ( !v5 )\n      goto LABEL_7;\n  }\n  v26 = 16;\n  v14 = sub_40D500(v8, v22, (char **)v5, (char **)v13, v9);\nLABEL_7:\n  v26 = 16;\n  v23 = v14;\n  v5 = sub_40D500(v8, v22, (char **)v12, (char **)v14, v9);\n  if ( v5 && v23 && v12 && v13 )\n  {\n    v15 = *(_QWORD *)(v3 + 40);\n    *((_QWORD *)v13 + 5) = v15;\n    *((_QWORD *)v12 + 5) = v15;\n    v16 = *(_BYTE *)(v3 + 50) & 8;\n    v13[50] = v16 | v13[50] & 0xF7;\n    v12[50] = v16 | v12[50] & 0xF7;\n  }\n  else\n  {\n    v5 = 0LL;\n    *v24 = 12;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x40d690L", 
            "funcEndAddr": "0x40d8aaL", 
            "funcName": "sub_40D690"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D8B0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rdx@1\n  __int64 v3; // rdx@3\n  char *v5; // rax@6\n  char *v6; // rax@8\n  unsigned int v7; // [sp+Ch] [bp-1Ch]@1\n\n  v2 = *(_QWORD *)(a2 + 8);\n  v7 = 0;\n  if ( v2 )\n  {\n    if ( *(_BYTE *)(v2 + 48) == 17 )\n    {\n      v5 = sub_40D690(&v7, a1, v2);\n      *(_QWORD *)(a2 + 8) = v5;\n      if ( v5 )\n        *(_QWORD *)v5 = a2;\n    }\n  }\n  v3 = *(_QWORD *)(a2 + 16);\n  if ( v3 )\n  {\n    if ( *(_BYTE *)(v3 + 48) == 17 )\n    {\n      v6 = sub_40D690(&v7, a1, v3);\n      *(_QWORD *)(a2 + 16) = v6;\n      if ( v6 )\n        *(_QWORD *)v6 = a2;\n    }\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x40d8b0L", 
            "funcEndAddr": "0x40d92bL", 
            "funcName": "sub_40D8B0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40D930(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rdx@1\n  size_t v3; // rbx@2\n  void *v4; // rax@2\n  signed __int64 result; // rax@3\n\n  v2 = *(_QWORD *)(a2 + 8);\n  *(_QWORD *)(a1 + 8) = v2;\n  if ( v2 <= 0 )\n  {\n    *(_QWORD *)(a1 + 16) = 0LL;\n    result = 0LL;\n    *(_OWORD *)a1 = 0LL;\n  }\n  else\n  {\n    v3 = 8 * v2;\n    *(_QWORD *)a1 = v2;\n    v4 = malloc(8 * v2);\n    *(_QWORD *)(a1 + 16) = v4;\n    if ( v4 )\n    {\n      memcpy(v4, *(const void **)(a2 + 16), v3);\n      result = 0LL;\n    }\n    else\n    {\n      *(_QWORD *)(a1 + 8) = 0LL;\n      result = 12LL;\n      *(_QWORD *)a1 = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40d930L", 
            "funcEndAddr": "0x40d9afL", 
            "funcName": "sub_40D930"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40D9B0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r12@2\n  __int64 v4; // r15@4\n  __int64 v5; // r13@5\n  __int64 v6; // rbp@5\n  __int64 v7; // rbx@5\n  void *v8; // rax@5\n  void *v9; // rdi@6\n  __int64 v10; // r10@6\n  __int64 v11; // r14@6\n  __int64 v12; // rcx@6\n  __int64 v13; // rdx@6\n  const void *v14; // rsi@9\n  __int64 v15; // r9@10\n  __int64 v16; // rsi@10\n  __int64 v17; // r8@10\n  signed __int64 result; // rax@15\n  __int64 v19; // rdx@19\n  char *v20; // rdi@20\n  __int64 v21; // r12@22\n\n  if ( !a2 )\n  {\nLABEL_13:\n    if ( !a3 || *(_QWORD *)(a3 + 8) <= 0LL )\n    {\n      *(_QWORD *)(a1 + 16) = 0LL;\n      result = 0LL;\n      *(_OWORD *)a1 = 0LL;\n      return result;\n    }\n    a2 = a3;\n    return sub_40D930(a1, a2);\n  }\n  v3 = *(_QWORD *)(a2 + 8);\n  if ( !a3 || v3 <= 0 )\n  {\n    if ( v3 > 0 )\n      return sub_40D930(a1, a2);\n    goto LABEL_13;\n  }\n  v4 = *(_QWORD *)(a3 + 8);\n  if ( v4 <= 0 )\n    return sub_40D930(a1, a2);\n  v5 = a1;\n  v6 = a3;\n  v7 = a2;\n  *(_QWORD *)a1 = v3 + v4;\n  v8 = malloc(8 * (v3 + v4));\n  *(_QWORD *)(a1 + 16) = v8;\n  if ( v8 )\n  {\n    v9 = v8;\n    v10 = *(_QWORD *)(a2 + 16);\n    v11 = 0LL;\n    v12 = 0LL;\n    v13 = 0LL;\n    do\n    {\n      v14 = (const void *)(v10 + 8 * v13);\n      if ( v4 <= v12 )\n      {\n        v21 = v3 - v13;\n        v11 += v21;\n        memcpy(v9, v14, 8 * v21);\n        goto LABEL_21;\n      }\n      v15 = *(_QWORD *)(v6 + 16);\n      v16 = *(_QWORD *)v14;\n      ++v11;\n      v17 = *(_QWORD *)(v15 + 8 * v12);\n      if ( v16 <= v17 )\n      {\n        *(_QWORD *)v9 = v16;\n        ++v13;\n        v12 += v16 == v17;\n      }\n      else\n      {\n        ++v12;\n        *(_QWORD *)v9 = v17;\n      }\n      v3 = *(_QWORD *)(v7 + 8);\n      v9 = (char *)v9 + 8;\n    }\n    while ( v13 < v3 );\n    v19 = *(_QWORD *)(v6 + 8);\n    if ( v12 < v19 )\n    {\n      v20 = (char *)v8 + 8 * v11;\n      v11 += v19 - v12;\n      memcpy(v20, (const void *)(v15 + 8 * v12), 8 * (v19 - v12));\n    }\nLABEL_21:\n    *(_QWORD *)(v5 + 8) = v11;\n    result = 0LL;\n  }\n  else\n  {\n    result = 12LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40d9b0L", 
            "funcEndAddr": "0x40db32L", 
            "funcName": "sub_40D9B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40DB40(_DWORD *a1, __int64 a2, __int64 a3, unsigned int a4)\n{\n  __int64 v4; // r10@1\n  __int64 v5; // r12@2\n  _QWORD *v6; // rax@3\n  signed __int64 v7; // r10@3\n  __int64 v8; // rbp@5\n  char v9; // r15@5\n  _QWORD *v10; // r13@5\n  signed __int64 v11; // rax@5\n  __int64 v12; // r11@5\n  __int64 v13; // rbx@6\n  __int64 v14; // r10@6\n  unsigned int v15; // er9@6\n  __int64 v16; // r14@8\n  char *v18; // rax@12\n  char v19; // cl@14\n  bool v20; // zf@14\n  bool v21; // sf@14\n  __int64 v22; // r10@15\n  __int64 v23; // r12@15\n  __int64 v24; // r14@15\n  __int64 v25; // r15@15\n  char v26; // bp@15\n  signed __int64 v27; // rax@16\n  int v28; // esi@16\n  __int16 v29; // bx@16\n  int v30; // edi@16\n  int v31; // eax@18\n  __int64 v32; // rdx@30\n  __int64 v33; // rax@31\n  void *v34; // rax@43\n  signed __int64 v35; // [sp+0h] [bp-58h]@13\n  __int64 *v36; // [sp+8h] [bp-50h]@15\n  __int64 v37; // [sp+10h] [bp-48h]@15\n  _DWORD *v38; // [sp+18h] [bp-40h]@5\n\n  v4 = *(_QWORD *)(a3 + 8);\n  if ( !v4 )\n  {\n    *a1 = 0;\n    return 0LL;\n  }\n  v5 = a4 + v4;\n  if ( v4 > 0 )\n  {\n    v6 = *(_QWORD **)(a3 + 16);\n    v7 = (signed __int64)&v6[v4];\n    do\n    {\n      v5 += *v6;\n      ++v6;\n    }\n    while ( (_QWORD *)v7 != v6 );\n  }\n  v8 = a3;\n  v9 = a4;\n  v10 = (_QWORD *)a2;\n  v38 = a1;\n  v11 = *(_QWORD *)(a2 + 64) + 24 * (v5 & *(_QWORD *)(a2 + 136));\n  v12 = *(_QWORD *)v11;\n  if ( *(_QWORD *)v11 <= 0LL )\n  {\nLABEL_12:\n    v18 = (char *)calloc(0x70uLL, 1uLL);\n    v16 = (__int64)v18;\n    if ( !v18 )\n      goto LABEL_38;\n    v35 = (signed __int64)(v18 + 8);\n    if ( (unsigned int)sub_40D930((__int64)(v18 + 8), v8) )\n    {\n      free((void *)v16);\nLABEL_38:\n      v16 = 0LL;\n      *v38 = 12;\n      return v16;\n    }\n    v19 = v9;\n    v20 = *(_QWORD *)(v8 + 8) == 0LL;\n    v21 = *(_QWORD *)(v8 + 8) < 0;\n    *(_BYTE *)(v16 + 104) = v9 & 0xF | *(_BYTE *)(v16 + 104) & 0xF0;\n    *(_QWORD *)(v16 + 80) = v35;\n    if ( v21 || v20 )\n    {\nLABEL_36:\n      if ( (unsigned int)sub_40B3B0((__int64)v10, v16, v5) )\n      {\n        sub_40C460(v16);\n        goto LABEL_38;\n      }\n      return v16;\n    }\n    v37 = v5;\n    v22 = 0LL;\n    v36 = (__int64 *)(v16 + 24);\n    v23 = v16;\n    v24 = 0LL;\n    v25 = v8;\n    v26 = v19;\n    while ( 1 )\n    {\n      v27 = *v10 + 16LL * *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * v24);\n      v28 = *(_BYTE *)(v27 + 8);\n      v29 = (*(_DWORD *)(v27 + 8) >> 8) & 0x3FF;\n      v30 = (*(_DWORD *)(v27 + 8) >> 8) & 0x3FF;\n      if ( v28 == 1 && !v30 )\n        goto LABEL_34;\n      v31 = (unsigned __int8)(*(_BYTE *)(v23 + 104) & 0xDF) | 32\n                                                            * (((unsigned __int8)(*(_BYTE *)(v23 + 104) >> 5) | (unsigned __int8)(*(_BYTE *)(v27 + 10) >> 4)) & 1);\n      *(_BYTE *)(v23 + 104) = v31;\n      if ( v28 == 2 )\n      {\n        *(_BYTE *)(v23 + 104) = v31 | 0x10;\n      }\n      else if ( v28 == 4 )\n      {\n        *(_BYTE *)(v23 + 104) = v31 | 0x40;\n      }\n      if ( !v30 )\n        goto LABEL_34;\n      if ( v35 == *(_QWORD *)(v23 + 80) )\n      {\n        v34 = malloc(0x18uLL);\n        *(_QWORD *)(v23 + 80) = v34;\n        if ( !v34 )\n        {\n          sub_40C460(v23);\n          goto LABEL_38;\n        }\n        if ( (unsigned int)sub_40D930((__int64)v34, v25) )\n          goto LABEL_38;\n        *(_BYTE *)(v23 + 104) |= 0x80u;\n        v22 = 0LL;\n      }\n      if ( v29 & 1 )\n      {\n        if ( !(v26 & 1) || v29 & 2 )\n          goto LABEL_30;\n      }\n      else if ( v29 & 2 && v26 & 1 )\n      {\n        goto LABEL_30;\n      }\n      if ( v29 & 0x10 && !(v26 & 2) || v29 & 0x40 && !(v26 & 4) )\n      {\nLABEL_30:\n        v32 = v24 - v22;\n        if ( v24 - v22 >= 0 )\n        {\n          v33 = *(_QWORD *)(v23 + 16);\n          if ( v32 < v33 )\n          {\n            *(_QWORD *)(v23 + 16) = v33 - 1;\n            sub_40CA00((_QWORD *)(v23 + 16), v36, v32);\n          }\n        }\n        ++v22;\n      }\nLABEL_34:\n      if ( ++v24 >= *(_QWORD *)(v25 + 8) )\n      {\n        v16 = v23;\n        v5 = v37;\n        goto LABEL_36;\n      }\n    }\n  }\n  v13 = *(_QWORD *)(v11 + 16);\n  v14 = 0LL;\n  v15 = a4;\n  while ( 1 )\n  {\n    v16 = *(_QWORD *)(v13 + 8 * v14);\n    if ( *(_QWORD *)v16 == v5 && (*(_BYTE *)(v16 + 104) & 0xF) == v15 && sub_40ACE0(*(_QWORD *)(v16 + 80), v8) )\n      return v16;\n    if ( ++v14 == v12 )\n      goto LABEL_12;\n  }\n}\n", 
            "funcStartAddr": "0x40db40L", 
            "funcEndAddr": "0x40de40L", 
            "funcName": "sub_40DB40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40DE40(_DWORD *a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp@1\n  _QWORD *v4; // rax@3\n  signed __int64 v5; // rcx@3\n  __int64 v6; // r14@5\n  __int64 *v7; // r12@5\n  _DWORD *v8; // r13@5\n  signed __int64 v9; // rax@5\n  __int64 v10; // r10@5\n  __int64 v11; // r11@6\n  __int64 v12; // r9@6\n  __int64 v13; // rbx@7\n  char *v14; // rax@10\n  signed __int64 v15; // r15@11\n  __int64 v16; // rax@12\n  _QWORD *v17; // rsi@13\n  __int64 v18; // r8@13\n  signed __int64 v19; // r9@13\n  unsigned __int8 v20; // r10@14\n  int v21; // edx@14\n  signed __int64 v22; // rax@18\n  int v23; // edi@18\n\n  v3 = *(_QWORD *)(a3 + 8);\n  if ( !v3 )\n  {\n    *a1 = 0;\n    return 0LL;\n  }\n  if ( v3 > 0 )\n  {\n    v4 = *(_QWORD **)(a3 + 16);\n    v5 = (signed __int64)&v4[v3];\n    do\n    {\n      v3 += *v4;\n      ++v4;\n    }\n    while ( (_QWORD *)v5 != v4 );\n  }\n  v6 = a3;\n  v7 = (__int64 *)a2;\n  v8 = a1;\n  v9 = *(_QWORD *)(a2 + 64) + 24 * (v3 & *(_QWORD *)(a2 + 136));\n  v10 = *(_QWORD *)v9;\n  if ( *(_QWORD *)v9 <= 0LL )\n  {\nLABEL_10:\n    v14 = (char *)calloc(0x70uLL, 1uLL);\n    v13 = (__int64)v14;\n    if ( v14 )\n    {\n      v15 = (signed __int64)(v14 + 8);\n      if ( (unsigned int)sub_40D930((__int64)(v14 + 8), v6) )\n      {\n        free((void *)v13);\n      }\n      else\n      {\n        v16 = *(_QWORD *)(v6 + 8);\n        *(_QWORD *)(v13 + 80) = v15;\n        if ( v16 > 0 )\n        {\n          v17 = *(_QWORD **)(v6 + 16);\n          v18 = *v7;\n          v19 = (signed __int64)&v17[v16];\n          do\n          {\n            while ( 1 )\n            {\n              v22 = v18 + 16LL * *v17;\n              v23 = *(_BYTE *)(v22 + 8);\n              if ( v23 == 1 )\n                break;\n              v20 = *(_BYTE *)(v13 + 104) >> 5;\n              v21 = (unsigned __int8)(*(_BYTE *)(v13 + 104) & 0xDF) | 32\n                                                                    * ((v20 | (unsigned __int8)(*(_BYTE *)(v22 + 10) >> 4)) & 1);\n              *(_BYTE *)(v13 + 104) = *(_BYTE *)(v13 + 104) & 0xDF | 32 * ((v20 | (*(_BYTE *)(v22 + 10) >> 4)) & 1);\n              if ( v23 == 2 )\n              {\n                *(_BYTE *)(v13 + 104) = v21 | 0x10;\n              }\n              else if ( v23 == 4 )\n              {\n                *(_BYTE *)(v13 + 104) = v21 | 0x40;\n              }\n              else if ( v23 == 12 || *(_DWORD *)(v22 + 8) & 0x3FF00 )\n              {\n                goto LABEL_21;\n              }\nLABEL_17:\n              ++v17;\n              if ( (_QWORD *)v19 == v17 )\n                goto LABEL_22;\n            }\n            if ( !(*(_DWORD *)(v22 + 8) & 0x3FF00) )\n              goto LABEL_17;\n            *(_BYTE *)(v13 + 104) = *(_BYTE *)(v13 + 104) & 0xDF | 32\n                                                                 * (((*(_BYTE *)(v13 + 104) >> 5) | (*(_BYTE *)(v22 + 10) >> 4)) & 1);\nLABEL_21:\n            ++v17;\n            *(_BYTE *)(v13 + 104) |= 0x80u;\n          }\n          while ( (_QWORD *)v19 != v17 );\n        }\nLABEL_22:\n        if ( !(unsigned int)sub_40B3B0((__int64)v7, v13, v3) )\n          return v13;\n        sub_40C460(v13);\n      }\n    }\n    *v8 = 12;\n    return 0LL;\n  }\n  v11 = *(_QWORD *)(v9 + 16);\n  v12 = 0LL;\n  while ( 1 )\n  {\n    v13 = *(_QWORD *)(v11 + 8 * v12);\n    if ( *(_QWORD *)v13 == v3 && sub_40ACE0(v13 + 8, v6) )\n      return v13;\n    if ( v10 == ++v12 )\n      goto LABEL_10;\n  }\n}\n", 
            "funcStartAddr": "0x40de40L", 
            "funcEndAddr": "0x40e028L", 
            "funcName": "sub_40DE40"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40E030(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14@2\n  __int64 v5; // r13@2\n  __int64 v6; // r12@2\n  __int64 v7; // rbp@2\n  __int64 v8; // rbx@2\n  signed __int64 result; // rax@4\n  __int64 v10; // rax@5\n  void *v11; // rdi@5\n  __int64 v12; // rsi@7\n  __int64 v13; // rdx@7\n  unsigned int v14; // [sp+0h] [bp-4Ch]@4\n  char v15; // [sp+4h] [bp-48h]@4\n  void *ptr; // [sp+14h] [bp-38h]@5\n\n  if ( a4 <= 0 )\n  {\n    result = 0LL;\n  }\n  else\n  {\n    v4 = a1;\n    v5 = a3;\n    v6 = a4;\n    v7 = a2;\n    v8 = 0LL;\n    do\n    {\n      while ( 1 )\n      {\n        v12 = *(_QWORD *)(v7 + 8 * v8);\n        v13 = *(_QWORD *)(v5 + 8 * v8);\n        if ( v12 )\n          break;\n        *(_QWORD *)(v7 + 8 * v8++) = v13;\n        if ( v6 == v8 )\n          goto LABEL_9;\n      }\n      if ( v13 )\n      {\n        result = sub_40D9B0((__int64)&v15, v12 + 8, v13 + 8);\n        v14 = result;\n        if ( (_DWORD)result )\n          return result;\n        v10 = sub_40DE40(&v14, v4, (__int64)&v15);\n        v11 = ptr;\n        *(_QWORD *)(v7 + 8 * v8) = v10;\n        free(v11);\n        result = v14;\n        if ( v14 )\n          return result;\n      }\n      ++v8;\n    }\n    while ( v6 != v8 );\nLABEL_9:\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40e030L", 
            "funcEndAddr": "0x40e0d8L", 
            "funcName": "sub_40E030"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40E0E0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5)\n{\n  signed __int64 v5; // r11@1\n  signed __int64 i; // rax@1\n  __int64 v7; // r12@3\n  signed __int64 v8; // r9@3\n  __int64 v9; // rax@9\n  __int64 v10; // rbx@11\n  __int64 v11; // r13@11\n  __int64 v12; // rbp@11\n  signed __int64 v13; // r15@12\n  signed __int64 v14; // r10@13\n  __int64 v15; // r9@14\n  char v16; // al@15\n  signed __int64 v17; // r10@17\n  _QWORD *v18; // ST08_8@18\n  __int64 v19; // rax@18\n  void *v20; // rdi@18\n  __int64 v21; // r9@20\n  __int64 v22; // r10@20\n  __int64 v23; // r14@21\n  __int64 v24; // r14@22\n  void *v25; // rax@23\n  signed int v26; // eax@24\n  unsigned int v27; // er14@25\n  unsigned int v28; // er15@25\n  signed __int64 result; // rax@25\n  void *v30; // rax@27\n  signed __int64 v31; // rbx@4\n  __int64 *v32; // [sp+0h] [bp-98h]@11\n  __int64 v33; // [sp+8h] [bp-90h]@13\n  signed __int64 v34; // [sp+10h] [bp-88h]@27\n  signed __int64 v35; // [sp+18h] [bp-80h]@9\n  __int64 v36; // [sp+20h] [bp-78h]@11\n  unsigned int v37; // [sp+2Ch] [bp-6Ch]@11\n  unsigned int v38; // [sp+3Ch] [bp-5Ch]@15\n  __int64 v39; // [sp+40h] [bp-58h]@15\n  __int64 v40; // [sp+48h] [bp-50h]@23\n  void *ptr; // [sp+50h] [bp-48h]@18\n\n  v5 = 0LL;\n  for ( i = *(_QWORD *)(a1 + 200); v5 < i; i = v8 )\n  {\n    v7 = *(_QWORD *)(a1 + 216);\n    v8 = (v5 + i) / 2;\n    if ( a3 <= *(_QWORD *)(v7 + 40 * v8 + 8) )\n    {\n      while ( v8 > v5 )\n      {\n        v31 = (v8 + v5) / 2;\n        if ( a3 > *(_QWORD *)(v7 + 40 * v31 + 8) )\n          goto LABEL_29;\n        v8 = (v8 + v5) / 2;\n      }\n      break;\n    }\n    v31 = (v5 + i) / 2;\n    v8 = i;\nLABEL_29:\n    v5 = v31 + 1;\n  }\n  if ( *(_QWORD *)(a1 + 200) <= v5 )\n    return 0LL;\n  v9 = *(_QWORD *)(a1 + 216);\n  v35 = 40 * v5;\n  if ( *(_QWORD *)(v9 + 40 * v5 + 8) != a3 || v5 == -1 )\n    return 0LL;\n  v36 = a4;\n  v10 = a3;\n  v37 = a5;\n  v11 = *(_QWORD *)(a1 + 152);\n  v12 = a1;\n  v32 = (__int64 *)(a2 + 16);\n  while ( 2 )\n  {\n    v13 = v9 + v35;\n    while ( 1 )\n    {\n      if ( !sub_40C890(*(_QWORD *)(a2 + 8), v32, *(_QWORD *)v13) )\n        goto LABEL_19;\n      v23 = v10 + *(_QWORD *)(v13 + 24) - *(_QWORD *)(v13 + 16);\n      if ( v10 == v23 )\n        break;\n      v14 = 8 * v23 + *(_QWORD *)(v12 + 184);\n      v33 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * v21);\n      if ( *(_QWORD *)v14 )\n      {\n        if ( sub_40C890(\n               *(_QWORD *)(*(_QWORD *)v14 + 16LL),\n               (__int64 *)(*(_QWORD *)v14 + 24LL),\n               *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * v21)) )\n        {\n          goto LABEL_19;\n        }\n        v38 = sub_40D930((__int64)&v39, v15 + 8);\n        v16 = (unsigned __int64)sub_40B280((__int64)&v39, v33);\n        if ( v38 || v16 != 1 )\n        {\n          free(ptr);\n          result = v38;\n          if ( v38 )\n            return result;\n          return 12LL;\n        }\n        v17 = *(_QWORD *)(v12 + 184) + 8 * v23;\n      }\n      else\n      {\n        v34 = 8 * v23 + *(_QWORD *)(v12 + 184);\n        v39 = 1LL;\n        v40 = 1LL;\n        v30 = malloc(8uLL);\n        ptr = v30;\n        if ( !v30 )\n          return 12LL;\n        v38 = 0;\n        v17 = v34;\n        *(_QWORD *)v30 = v33;\n      }\n      v18 = (_QWORD *)v17;\n      v19 = sub_40DE40(&v38, v11, (__int64)&v39);\n      v20 = ptr;\n      *v18 = v19;\n      free(v20);\n      if ( !*(_QWORD *)(*(_QWORD *)(v12 + 184) + 8 * v23) )\n      {\n        result = v38;\n        if ( v38 )\n          return result;\n      }\nLABEL_19:\n      v13 += 40LL;\n      if ( !*(_BYTE *)(v13 - 8) )\n        return 0LL;\n    }\n    v24 = **(_QWORD **)(*(_QWORD *)(v11 + 40) + 24 * v21 + 16);\n    if ( sub_40C890(v22, v32, v24) )\n      goto LABEL_19;\n    v39 = 1LL;\n    v40 = 1LL;\n    v25 = malloc(8uLL);\n    ptr = v25;\n    if ( v25 )\n    {\n      *(_QWORD *)v25 = v24;\n      v26 = 0;\n    }\n    else\n    {\n      v40 = 0LL;\n      v26 = 12;\n      v39 = 0LL;\n    }\n    v38 = v26;\n    v27 = sub_40D200(v11, (__int64)&v39, v36, v37);\n    v28 = sub_40CDD0(a2, (__int64)&v39);\n    free(ptr);\n    result = v38;\n    if ( !(v38 | v28 | v27) )\n    {\n      v9 = *(_QWORD *)(v12 + 216);\n      continue;\n    }\n    break;\n  }\n  if ( !v38 )\n  {\n    result = v28;\n    if ( v27 )\n      result = v27;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40e0e0L", 
            "funcEndAddr": "0x40e462L", 
            "funcName": "sub_40E0E0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40E470(__int64 a1, _QWORD *a2, _QWORD *a3, __int64 a4)\n{\n  __int64 v4; // r12@1\n  __int64 v5; // r13@2\n  __int64 v6; // rbx@2\n  __int64 v7; // rbp@4\n  signed __int64 v8; // rax@4\n  signed __int64 v9; // rax@5\n  __int64 v10; // rcx@6\n  __int64 v11; // rcx@7\n  _QWORD *v12; // r9@7\n  _QWORD *v13; // ST10_8@8\n  _QWORD *v14; // rax@8\n  _QWORD *v16; // ST08_8@13\n  _QWORD *v17; // rax@13\n  __int64 v18; // [sp+8h] [bp-50h]@8\n  signed __int64 v19; // [sp+10h] [bp-48h]@13\n  _QWORD *v20; // [sp+18h] [bp-40h]@8\n\n  v4 = *(_QWORD *)(a1 + 152);\n  if ( *a2 <= 0LL )\n    return 0LL;\n  v5 = a4;\n  v6 = 0LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v7 = *(_QWORD *)(*a3 + 8 * v6);\n      v8 = *(_QWORD *)v4 + 16LL * *(_QWORD *)(*a3 + 8 * v6);\n      if ( *(_BYTE *)(v8 + 8) == 8 )\n      {\n        v9 = *(_QWORD *)v8;\n        if ( v9 <= 63 )\n        {\n          v10 = *(_QWORD *)(v4 + 160);\n          if ( _bittest64(&v10, v9) )\n            break;\n        }\n      }\n      if ( ++v6 >= *a2 )\n        return 0LL;\n    }\n    v11 = *(_QWORD *)(a1 + 232);\n    v12 = *(_QWORD **)(a1 + 248);\n    if ( v11 == *(_QWORD *)(a1 + 240) )\n      break;\nLABEL_8:\n    v13 = v12;\n    v18 = v11;\n    v20 = a3;\n    v14 = calloc(1uLL, 0x30uLL);\n    v13[v18] = v14;\n    if ( !v14 )\n      return 12LL;\n    *v14 = v5;\n    a3 = v20;\n    ++v6;\n    v14[1] = v7;\n    *(_QWORD *)(a1 + 232) = v18 + 1;\n    if ( v6 >= *a2 )\n      return 0LL;\n  }\n  v16 = a3;\n  v19 = 2 * v11;\n  v17 = realloc(*(void **)(a1 + 248), 16 * v11);\n  a3 = v16;\n  v12 = v17;\n  if ( v17 )\n  {\n    *(_QWORD *)(a1 + 248) = v17;\n    v11 = *(_QWORD *)(a1 + 232);\n    *(_QWORD *)(a1 + 240) = v19;\n    goto LABEL_8;\n  }\n  return 12LL;\n}\n", 
            "funcStartAddr": "0x40e470L", 
            "funcEndAddr": "0x40e5b1L", 
            "funcName": "sub_40E470"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40E5C0(__int64 a1, __int64 a2, char a3)\n{\n  wint_t v3; // ebx@6\n  signed __int64 result; // rax@8\n  signed __int64 v5; // rax@10\n  char v6; // dl@10\n\n  if ( a2 < 0 )\n    return *(_DWORD *)(a1 + 112);\n  if ( *(_QWORD *)(a1 + 88) == a2 )\n    return (a3 & 2u) < 1 ? 10 : 8;\n  if ( *(_DWORD *)(a1 + 144) > 1 )\n  {\n    while ( 1 )\n    {\n      v3 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a2);\n      if ( v3 != -1 )\n        break;\n      if ( --a2 == -1 )\n        return *(_DWORD *)(a1 + 112);\n    }\n    if ( *(_BYTE *)(a1 + 142) && (iswalnum(v3) || v3 == 95) )\n      return 1LL;\n    result = 0LL;\n    if ( v3 != 10 )\n      return result;\n    return 2 * (unsigned int)(*(_BYTE *)(a1 + 141) != 0);\n  }\n  v5 = *(_BYTE *)(*(_QWORD *)(a1 + 8) + a2);\n  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * (v5 >> 6)) >> v5;\n  result = 1LL;\n  if ( !(v6 & 1) )\n  {\n    result = 0LL;\n    if ( *(_BYTE *)(*(_QWORD *)(a1 + 8) + a2) == 10 )\n      return 2 * (unsigned int)(*(_BYTE *)(a1 + 141) != 0);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40e5c0L", 
            "funcEndAddr": "0x40e6aeL", 
            "funcName": "sub_40E5C0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40E6B0(__int64 a1, __int64 a2, __int64 a3)\n{\n  unsigned __int8 v3; // cl@1\n  unsigned __int8 v4; // al@1\n  bool v5; // zf@4\n  signed __int64 result; // rax@4\n  unsigned int v7; // ebx@9\n  unsigned int v8; // ebx@10\n  unsigned int v9; // eax@10\n  unsigned int v10; // edx@10\n  int v11; // edx@15\n\n  v3 = *(_BYTE *)(*(_QWORD *)(a1 + 8) + a3);\n  v4 = *(_BYTE *)(a2 + 8);\n  if ( v4 == 3 )\n  {\n    result = 0LL;\n    if ( !((*(_QWORD *)(*(_QWORD *)a2 + 8 * ((signed __int64)v3 >> 6)) >> v3) & 1) )\n      return result;\n  }\n  else if ( v4 <= 3u )\n  {\n    v5 = v4 == 1;\n    result = 0LL;\n    if ( !v5 || *(_BYTE *)a2 != v3 )\n      return result;\n  }\n  else\n  {\n    if ( v4 != 5 )\n    {\n      v5 = v4 == 7;\n      result = 0LL;\n      if ( !v5 || (v3 & 0x80u) != 0 )\n        return result;\n    }\n    if ( v3 == 10 )\n    {\n      result = 0LL;\n      if ( !(*(_BYTE *)(*(_QWORD *)(a1 + 152) + 216LL) & 0x40) )\n        return result;\n    }\n    else if ( !v3 )\n    {\n      result = 0LL;\n      if ( *(_BYTE *)(*(_QWORD *)(a1 + 152) + 216LL) & 0x80 )\n        return result;\n    }\n  }\n  v7 = *(_DWORD *)(a2 + 8);\n  result = 1LL;\n  if ( !(v7 & 0x3FF00) )\n    return result;\n  v8 = v7 >> 8;\n  v9 = sub_40E5C0(a1, a3, *(_DWORD *)(a1 + 160));\n  v10 = v9;\n  if ( v8 & 4 )\n  {\n    result = 0LL;\n    if ( !(v10 & 1) || v8 & 8 )\n      return result;\n  }\n  else if ( v8 & 8 && v9 & 1 )\n  {\n    return 0LL;\n  }\n  if ( !(v8 & 0x20) || (result = 0LL, v10 & 2) )\n  {\n    result = 1LL;\n    v11 = (v10 >> 3) & 1;\n    if ( v8 & 0x80 )\n      result = (unsigned int)v11;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40e6b0L", 
            "funcEndAddr": "0x40e7dbL", 
            "funcName": "sub_40E6B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E7E0(__int64 a1, __int64 a2, __int64 *a3, __int64 a4)\n{\n  __int64 *v4; // r12@1\n  __int64 v5; // rbx@1\n  char v6; // al@1\n  __int64 v7; // r9@2\n  __int64 v8; // rsi@2\n  int v9; // ebp@2\n  int v10; // er11@2\n  int v11; // er10@2\n  __int64 result; // rax@3\n  signed __int64 v13; // rdx@3\n  int v14; // ecx@3\n\n  v4 = a3;\n  v5 = a2;\n  v6 = sub_40E5C0(a1, a4, *(_DWORD *)(a1 + 160));\n  if ( a2 > 0 )\n  {\n    v7 = *v4;\n    v8 = 0LL;\n    v9 = v6 & 8;\n    v10 = v6 & 2;\n    v11 = v6 & 1;\n    do\n    {\n      result = *(_QWORD *)(v7 + 8 * v8);\n      v13 = **(_QWORD **)(a1 + 152) + 16LL * *(_QWORD *)(v7 + 8 * v8);\n      v14 = *(_DWORD *)(v13 + 8) >> 8;\n      if ( *(_BYTE *)(v13 + 8) == 2 )\n      {\n        if ( !(v14 & 0x3FF) )\n          return result;\n        if ( v14 & 4 )\n        {\n          if ( !v11 || v14 & 8 )\n            goto LABEL_15;\n        }\n        else if ( v14 & 8 && v11 )\n        {\n          goto LABEL_15;\n        }\n        if ( (!(v14 & 0x20) || v10) && (!(v14 & 0x80) || v9) )\n          return result;\n      }\nLABEL_15:\n      ++v8;\n    }\n    while ( v8 != v5 );\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40e7e0L", 
            "funcEndAddr": "0x40e8a8L", 
            "funcName": "sub_40E7E0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_40E8B0(__int64 a1, signed __int64 a2, int a3)\n{\n  int v3; // er10@1\n  signed __int64 v4; // r15@1\n  __int64 v5; // rbx@1\n  signed __int64 v6; // rax@1\n  signed __int64 v7; // rbp@1\n  __int64 v8; // rax@4\n  __int64 v9; // rax@4\n  bool v10; // zf@4\n  signed __int64 v11; // rax@6\n  char v12; // dl@6\n  signed __int64 v13; // r14@6\n  size_t v14; // r14@8\n  int v15; // eax@8\n  bool v16; // sf@8\n  unsigned __int8 v17; // of@8\n  char v18; // dl@10\n  __int64 v19; // rsi@13\n  signed __int64 v20; // rax@13\n  signed __int64 v21; // rcx@13\n  signed __int64 result; // rax@19\n  __int64 v23; // rcx@25\n  __int64 v24; // rax@25\n  int v25; // edx@27\n  __int64 v26; // rax@30\n  __int64 v27; // rcx@30\n  __int64 v28; // r11@36\n  signed __int64 v29; // r13@38\n  int v30; // ST04_4@39\n  size_t v31; // r12@39\n  size_t v32; // rax@39\n  wchar_t v33; // edx@39\n  signed __int64 v34; // r12@41\n  int v35; // eax@43\n  __int64 v36; // r13@49\n  signed __int64 v37; // rcx@49\n  signed __int64 v38; // rdi@49\n  signed __int64 v39; // rax@53\n  signed __int64 v40; // rdx@53\n  __int64 v41; // rsi@53\n  signed __int64 v42; // r12@55\n  __int64 v43; // rax@60\n  signed __int64 v44; // rax@60\n  __int64 v45; // rcx@61\n  __int64 v46; // rax@61\n  __int64 v47; // rax@64\n  __int64 v48; // rcx@64\n  signed __int64 v49; // rdx@72\n  _DWORD *v50; // rax@74\n  signed __int64 v51; // rcx@74\n  unsigned __int64 v52; // rcx@78\n  __int64 v53; // r13@78\n  char *v54; // r12@78\n  __int64 v55; // rcx@84\n  char *v56; // rsi@84\n  signed __int64 v57; // rdx@84\n  int v58; // ST04_4@85\n  size_t v59; // rax@85\n  size_t v60; // rdx@85\n  __int64 v61; // rcx@89\n  signed __int64 v62; // rdx@90\n  signed __int64 v63; // r13@100\n  signed __int64 v64; // rax@102\n  __int64 v65; // rdx@35\n  _DWORD *v66; // rax@110\n  signed __int64 v67; // rdx@110\n  __int64 v68; // rsi@118\n  int v69; // esi@120\n  __int64 v70; // rax@120\n  wchar_t v71; // [sp+4h] [bp-74h]@115\n  __int64 v72; // [sp+18h] [bp-60h]@39\n  wchar_t v73; // [sp+2Ch] [bp-4Ch]@85\n  char v74[6]; // [sp+32h] [bp-46h]@121\n  wint_t wc[2]; // [sp+38h] [bp-40h]@39\n\n  v3 = a3;\n  v4 = a2;\n  v5 = a1;\n  v6 = *(_QWORD *)(a1 + 40);\n  v7 = a2 - v6;\n  if ( v6 <= a2 )\n    goto LABEL_125;\n  if ( *(_DWORD *)(a1 + 144) > 1 )\n    *(_QWORD *)(a1 + 32) = 0LL;\n  v8 = *(_QWORD *)(a1 + 80);\n  *(_QWORD *)(a1 + 48) = 0LL;\n  v7 = a2;\n  *(_QWORD *)(a1 + 40) = 0LL;\n  *(_QWORD *)(a1 + 88) = v8;\n  v9 = *(_QWORD *)(a1 + 96);\n  *(_QWORD *)(a1 + 56) = 0LL;\n  *(_QWORD *)(a1 + 104) = v9;\n  *(_BYTE *)(a1 + 140) = 0;\n  v10 = *(_BYTE *)(a1 + 139) == 0;\n  *(_DWORD *)(a1 + 112) = (a3 & 1u) < 1 ? 6 : 4;\n  if ( v10 )\n  {\n    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;\n    if ( a2 )\n    {\nLABEL_6:\n      v11 = *(_QWORD *)(a1 + 56);\n      v12 = *(_BYTE *)(a1 + 140);\n      v13 = *(_QWORD *)(a1 + 48);\n      if ( v11 > v7 )\n      {\n        if ( !v12 )\n        {\n          v14 = v13 - v7;\n          v15 = sub_40E5C0(a1, v7 - 1, v3);\n          v17 = __OFSUB__(*(_DWORD *)(a1 + 144), 1);\n          v10 = *(_DWORD *)(a1 + 144) == 1;\n          v16 = *(_DWORD *)(a1 + 144) - 1 < 0;\n          *(_DWORD *)(a1 + 112) = v15;\n          if ( !((unsigned __int8)(v16 ^ v17) | v10) )\n          {\n            memmove(*(void **)(a1 + 16), (const void *)(*(_QWORD *)(a1 + 16) + 4 * v7), 4 * v14);\n            v14 = *(_QWORD *)(a1 + 48) - v7;\n          }\n          v18 = *(_BYTE *)(a1 + 139);\n          if ( v18 )\n          {\n            memmove(*(void **)(a1 + 8), (const void *)(*(_QWORD *)(a1 + 8) + v7), v14);\n            v18 = *(_BYTE *)(a1 + 139);\n            v14 = *(_QWORD *)(a1 + 48) - v7;\n          }\n          *(_QWORD *)(a1 + 56) -= v7;\n          *(_QWORD *)(a1 + 48) = v14;\n          goto LABEL_13;\n        }\n        v36 = *(_QWORD *)(a1 + 24);\n        v37 = *(_QWORD *)(a1 + 48);\n        v38 = 0LL;\n        do\n        {\n          v39 = (v38 + v37) / 2;\n          v40 = *(_QWORD *)(v36 + 8 * v39);\n          v41 = (v38 + v37) / 2;\n          if ( v40 <= v7 )\n          {\n            if ( v40 >= v7 )\n            {\n              v42 = (v38 + v37) / 2;\n              --v41;\n              goto LABEL_57;\n            }\n            v38 = v39 + 1;\n          }\n          else\n          {\n            v37 = (v38 + v37) / 2;\n          }\n        }\n        while ( v38 < v37 );\n        v42 = v39 + 1;\n        if ( v40 >= v7 )\n        {\n          v42 = v39;\n          v41 = v39 - 1;\n        }\nLABEL_57:\n        *(_DWORD *)(v5 + 112) = sub_40E5C0(v5, v41, v3);\n        if ( v7 == v42 && v7 < v13 && *(_QWORD *)(v36 + 8 * v42) == v7 )\n        {\n          memmove(*(void **)(v5 + 16), (const void *)(*(_QWORD *)(v5 + 16) + 4 * v7), 4 * (v13 - v7));\n          memmove(*(void **)(v5 + 8), (const void *)(*(_QWORD *)(v5 + 8) + v7), *(_QWORD *)(v5 + 48) - v7);\n          v43 = *(_QWORD *)(v5 + 48);\n          *(_QWORD *)(v5 + 56) -= v7;\n          v44 = v43 - v7;\n          *(_QWORD *)(v5 + 48) = v44;\n          if ( v44 > 0 )\n          {\n            v45 = *(_QWORD *)(v5 + 24);\n            v46 = 0LL;\n            do\n            {\n              *(_QWORD *)(v45 + 8 * v46) = *(_QWORD *)(v45 + 8 * v7 + 8 * v46) - v7;\n              ++v46;\n            }\n            while ( *(_QWORD *)(v5 + 48) > v46 );\n          }\n          LODWORD(v19) = *(_DWORD *)(v5 + 144);\n          v18 = *(_BYTE *)(v5 + 139);\n          v20 = *(_QWORD *)(v5 + 88) - v7;\n          v21 = *(_QWORD *)(v5 + 104) - v7;\nLABEL_14:\n          if ( v18 )\n            goto LABEL_16;\n          goto LABEL_15;\n        }\n        v47 = *(_QWORD *)(v5 + 80);\n        v48 = *(_QWORD *)(v5 + 96);\n        *(_BYTE *)(v5 + 140) = 0;\n        v20 = v47 - v4;\n        v21 = v48 - v4;\n        *(_QWORD *)(v5 + 88) = v20 + v7;\n        *(_QWORD *)(v5 + 104) = v21 + v7;\n        if ( v42 > 0 )\n        {\n          do\n          {\n            if ( *(_QWORD *)(v36 + 8 * v42 - 8) != v7 )\n              break;\n            --v42;\n          }\n          while ( v42 );\n        }\n        if ( v42 >= v13 )\n        {\n          if ( v42 == v13 )\n          {\nLABEL_99:\n            *(_QWORD *)(v5 + 48) = 0LL;\n            v49 = 0LL;\nLABEL_77:\n            *(_QWORD *)(v5 + 56) = v49;\n            LODWORD(v19) = *(_DWORD *)(v5 + 144);\n            v18 = *(_BYTE *)(v5 + 139);\n            goto LABEL_14;\n          }\n        }\n        else\n        {\n          while ( *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v42) == -1 )\n          {\n            if ( ++v42 == v13 )\n              goto LABEL_99;\n          }\n        }\n        v49 = *(_QWORD *)(v36 + 8 * v42) - v7;\n        *(_QWORD *)(v5 + 48) = v49;\n        if ( v49 )\n        {\n          if ( v49 > 0 )\n          {\n            v50 = *(_DWORD **)(v5 + 16);\n            v51 = (signed __int64)&v50[v49];\n            do\n            {\n              *v50 = -1;\n              ++v50;\n            }\n            while ( (_DWORD *)v51 != v50 );\n          }\n          memset(*(void **)(v5 + 8), 255, v49);\n          v49 = *(_QWORD *)(v5 + 48);\n          v20 = *(_QWORD *)(v5 + 88) - v7;\n          v21 = *(_QWORD *)(v5 + 104) - v7;\n        }\n        goto LABEL_77;\n      }\n      if ( v12 )\n      {\n        v65 = *(_QWORD *)(a1 + 80);\n        *(_BYTE *)(a1 + 140) = 0;\n        *(_QWORD *)(a1 + 88) = v7 + v65 - a2;\n        *(_QWORD *)(a1 + 104) = v7 + *(_QWORD *)(a1 + 96) - a2;\n      }\n      v19 = *(_DWORD *)(a1 + 144);\n      v28 = *(_QWORD *)(a1 + 40);\n      *(_QWORD *)(a1 + 48) = 0LL;\n      if ( (signed int)v19 <= 1 )\n      {\n        v23 = *(_BYTE *)(v28 + v7 + *(_QWORD *)a1 - 1);\n        v24 = *(_QWORD *)(a1 + 120);\n        *(_QWORD *)(a1 + 56) = 0LL;\n        if ( v24 )\n          LOBYTE(v23) = *(_BYTE *)(v24 + v23);\n        v25 = 1;\n        if ( !((*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * ((signed __int64)(unsigned __int8)v23 >> 6)) >> v23) & 1) )\n        {\n          v25 = 0;\n          if ( (_BYTE)v23 == 10 )\n            v25 = 2 * (*(_BYTE *)(a1 + 141) != 0);\n        }\n        v26 = *(_QWORD *)(a1 + 88);\n        v27 = *(_QWORD *)(a1 + 104);\n        *(_DWORD *)(a1 + 112) = v25;\n        v20 = v26 - v7;\n        v21 = v27 - v7;\n        if ( *(_BYTE *)(a1 + 139) )\n        {\n          *(_QWORD *)(a1 + 40) = v4;\n          *(_QWORD *)(a1 + 88) = v20;\n          *(_QWORD *)(a1 + 104) = v21;\nLABEL_32:\n          if ( *(_BYTE *)(v5 + 139) )\n          {\n            if ( *(_BYTE *)(v5 + 136) )\n            {\n              sub_40B4E0(v5);\n            }\n            else\n            {\n              v61 = *(_QWORD *)(v5 + 120);\n              if ( v61 )\n              {\n                v62 = *(_QWORD *)(v5 + 48);\n                if ( *(_QWORD *)(v5 + 64) <= v20 )\n                  v20 = *(_QWORD *)(v5 + 64);\n                if ( v20 > v62 )\n                {\n                  while ( 1 )\n                  {\n                    *(_BYTE *)(*(_QWORD *)(v5 + 8) + v62) = *(_BYTE *)(v61 + *(_BYTE *)(v62 + *(_QWORD *)v5 + v4));\n                    if ( v20 == ++v62 )\n                      break;\n                    v4 = *(_QWORD *)(v5 + 40);\n                    v61 = *(_QWORD *)(v5 + 120);\n                  }\n                }\n                else\n                {\n                  v20 = *(_QWORD *)(v5 + 48);\n                }\n                *(_QWORD *)(v5 + 48) = v20;\n                *(_QWORD *)(v5 + 56) = v20;\n              }\n            }\n          }\n          else\n          {\n            *(_QWORD *)(v5 + 48) = v20;\n          }\n          goto LABEL_19;\n        }\nLABEL_15:\n        *(_QWORD *)(v5 + 8) += v7;\n        goto LABEL_16;\n      }\n      if ( *(_BYTE *)(a1 + 137) )\n      {\n        v52 = *(_QWORD *)a1;\n        v53 = *(_QWORD *)a1 + v28;\n        v54 = (char *)(v53 + v7 - 1);\n        if ( *(_QWORD *)a1 < (unsigned __int64)(v53 + v7 - v19) )\n          v52 = v53 + v7 - v19;\n        if ( v52 <= (unsigned __int64)v54 )\n        {\n          while ( (*v54 & 0xC0) == -128 )\n          {\n            if ( v52 > (unsigned __int64)--v54 )\n              goto LABEL_38;\n          }\n          v55 = *(_QWORD *)(a1 + 120);\n          v56 = v54;\n          v57 = v53 + *(_QWORD *)(a1 + 88) - (_QWORD)v54;\n          if ( v55 )\n          {\n            LODWORD(v68) = 6;\n            if ( v57 <= 6 )\n              v68 = v53 + *(_QWORD *)(a1 + 88) - (_QWORD)v54;\n            v69 = v68 - 1;\n            v70 = v69;\n            if ( v69 >= 0 )\n            {\n              do\n              {\n                v74[v70] = *(_BYTE *)(v55 + (unsigned __int8)v54[v70]);\n                --v70;\n              }\n              while ( (signed int)v70 >= 0 );\n            }\n            v56 = v74;\n          }\n          v58 = v3;\n          *(_QWORD *)wc = 0LL;\n          v59 = sub_40AB50(&v73, v56, v57, (mbstate_t *)wc);\n          v3 = v58;\n          v60 = v53 + v7 - (_QWORD)v54;\n          if ( v60 <= v59 && v59 <= 0xFFFFFFFFFFFFFFFDLL )\n          {\n            v64 = v59 - v60;\n            v33 = v73;\n            *(_QWORD *)(a1 + 32) = 0LL;\n            v34 = v64;\n            *(_QWORD *)(a1 + 48) = v64;\n            if ( v33 != -1 )\n              goto LABEL_42;\n          }\n          v28 = *(_QWORD *)(a1 + 40);\n          v11 = *(_QWORD *)(a1 + 56);\n        }\n      }\nLABEL_38:\n      v29 = v28 + v11;\n      if ( v4 <= v28 + v11 )\n      {\n        v63 = v29 - v4;\n        *(_QWORD *)(a1 + 48) = v63;\n        v34 = v63;\n      }\n      else\n      {\n        do\n        {\n          v30 = v3;\n          v31 = *(_QWORD *)(a1 + 80) - v29;\n          v72 = *(_QWORD *)(a1 + 32);\n          v32 = sub_40AB50((wchar_t *)wc, (char *)(v29 + *(_QWORD *)a1), v31, (mbstate_t *)(a1 + 32));\n          v33 = wc[0];\n          v3 = v30;\n          if ( v32 - 1 > 0xFFFFFFFFFFFFFFFCLL )\n          {\n            if ( v32 && v31 )\n              v33 = *(_BYTE *)(*(_QWORD *)a1 + v29);\n            else\n              v33 = 0;\n            *(_QWORD *)(a1 + 32) = v72;\n            v32 = 1LL;\n          }\n          v29 += v32;\n        }\n        while ( v4 > v29 );\n        v34 = v29 - v4;\n        *(_QWORD *)(a1 + 48) = v29 - v4;\n        if ( v33 != -1 )\n        {\nLABEL_42:\n          if ( *(_BYTE *)(a1 + 142) && ((v71 = v33, iswalnum(v33)) || (v33 = v71, v71 == 95)) )\n          {\n            v35 = 1;\n          }\n          else\n          {\n            v35 = 0;\n            if ( v33 == 10 )\n              v35 = 2 * (*(_BYTE *)(a1 + 141) != 0);\n          }\n          *(_DWORD *)(a1 + 112) = v35;\nLABEL_46:\n          if ( v34 )\n          {\n            if ( v34 > 0 )\n            {\n              v66 = *(_DWORD **)(a1 + 16);\n              v67 = (signed __int64)&v66[v34];\n              do\n              {\n                *v66 = -1;\n                ++v66;\n              }\n              while ( (_DWORD *)v67 != v66 );\n            }\n            v18 = *(_BYTE *)(a1 + 139);\n            if ( !v18 )\n              goto LABEL_48;\n            memset(*(void **)(a1 + 8), 255, v34);\n            v34 = *(_QWORD *)(a1 + 48);\n          }\n          v18 = *(_BYTE *)(a1 + 139);\nLABEL_48:\n          *(_QWORD *)(a1 + 56) = v34;\nLABEL_13:\n          LODWORD(v19) = *(_DWORD *)(a1 + 144);\n          v20 = *(_QWORD *)(a1 + 88) - v7;\n          v21 = *(_QWORD *)(a1 + 104) - v7;\n          goto LABEL_14;\n        }\n      }\n      *(_DWORD *)(a1 + 112) = sub_40E5C0(a1, v13 - 1, v3);\n      goto LABEL_46;\n    }\n  }\n  else\n  {\nLABEL_125:\n    if ( v7 )\n      goto LABEL_6;\n  }\n  LODWORD(v19) = *(_DWORD *)(a1 + 144);\n  v20 = *(_QWORD *)(a1 + 88);\n  v21 = *(_QWORD *)(a1 + 104);\nLABEL_16:\n  *(_QWORD *)(v5 + 40) = v4;\n  *(_QWORD *)(v5 + 88) = v20;\n  *(_QWORD *)(v5 + 104) = v21;\n  if ( (signed int)v19 <= 1 )\n    goto LABEL_32;\n  if ( !*(_BYTE *)(v5 + 136) )\n  {\n    sub_40B560(v5);\nLABEL_19:\n    *(_QWORD *)(v5 + 72) = 0LL;\n    return 0LL;\n  }\n  result = sub_40B710(v5);\n  if ( !(_DWORD)result )\n    goto LABEL_19;\n  return result;\n}\n", 
            "funcStartAddr": "0x40e8b0L", 
            "funcEndAddr": "0x40f097L", 
            "funcName": "sub_40E8B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F0A0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r13@1\n  __int64 v5; // rax@1\n  signed __int64 v6; // rbp@1\n  __int64 v7; // r10@1\n  __int64 v8; // rbx@2\n  __int64 v9; // r9@4\n  __int64 *v10; // r11@4\n  unsigned int v11; // eax@5\n  __int64 v12; // rax@8\n  __int64 v13; // r15@10\n  signed __int64 v14; // ST10_8@10\n  signed __int64 v15; // rax@10\n  __int64 v16; // r15@14\n  __int64 v17; // rdx@15\n  signed __int64 v18; // r9@18\n  __int64 v19; // rdx@19\n  __int64 v20; // r9@19\n  __int64 v21; // rax@20\n  __int64 v22; // r11@20\n  void *v23; // rdi@24\n  unsigned int v25; // ST08_4@26\n  __int64 v26; // [sp+0h] [bp-70h]@10\n  __int64 v27; // [sp+10h] [bp-60h]@1\n  __int128 v28; // [sp+18h] [bp-58h]@1\n  void *ptr; // [sp+28h] [bp-48h]@1\n\n  v4 = a3;\n  v5 = *(_QWORD *)(a1 + 56);\n  v28 = 0LL;\n  v6 = v5 + 24 * a2;\n  v27 = a4;\n  ptr = 0LL;\n  v7 = *(_QWORD *)(v6 + 8);\n  if ( v7 > 0 )\n  {\n    v8 = 0LL;\n    while ( 1 )\n    {\n      v12 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v8);\n      if ( a2 != v12 && *(_BYTE *)(*(_QWORD *)a1 + 16 * v12 + 8) & 8 )\n      {\n        v13 = *(_QWORD *)(24 * v12 + *(_QWORD *)(a1 + 40) + 16);\n        v14 = 24 * v12 + *(_QWORD *)(a1 + 40);\n        v26 = *(_QWORD *)v13;\n        v15 = sub_40C890(v7, (__int64 *)(v6 + 16), *(_QWORD *)v13);\n        if ( *(_QWORD *)(v14 + 8) > 1LL )\n        {\n          if ( !v15 && sub_40C890(*(_QWORD *)(v4 + 8), (__int64 *)(v4 + 16), v26)\n            || (v16 = *(_QWORD *)(v13 + 8), v16 > 0)\n            && !sub_40C890(v7, v10, v16)\n            && sub_40C890(*(_QWORD *)(v4 + 8), (__int64 *)(v4 + 16), v17) )\n          {\nLABEL_5:\n            v11 = sub_40D340((__int64)&v28, v27, v9 + *(_QWORD *)(a1 + 56));\n            if ( v11 )\n            {\n              v25 = v11;\n              free(ptr);\n              return v25;\n            }\n            v7 = *(_QWORD *)(v6 + 8);\n            goto LABEL_7;\n          }\n        }\n        else if ( !v15 && sub_40C890(*(_QWORD *)(v4 + 8), (__int64 *)(v4 + 16), v26) )\n        {\n          goto LABEL_5;\n        }\n      }\nLABEL_7:\n      if ( v7 <= ++v8 )\n      {\n        v18 = 0LL;\n        if ( v7 > 0 )\n        {\n          do\n          {\n            if ( !sub_40C890(*((__int64 *)&v28 + 1), (__int64 *)&ptr, *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v18)) )\n            {\n              v21 = sub_40C890(*(_QWORD *)(v4 + 8), (__int64 *)(v4 + 16), v19) - 1;\n              if ( v21 >= 0 && v21 < v22 )\n              {\n                *(_QWORD *)(v4 + 8) = v22 - 1;\n                sub_40CA00((_QWORD *)(v4 + 8), (__int64 *)(v4 + 16), v21);\n              }\n            }\n            v18 = v20 + 1;\n          }\n          while ( *(_QWORD *)(v6 + 8) > v18 );\n        }\n        v23 = ptr;\n        goto LABEL_25;\n      }\n    }\n  }\n  v23 = 0LL;\nLABEL_25:\n  free(v23);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40f0a0L", 
            "funcEndAddr": "0x40f2c5L", 
            "funcName": "sub_40F0A0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40F2D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r9@2\n  __m128i v3; // xmm0@2\n  bool v4; // zf@2\n  bool v5; // sf@2\n  signed __int64 v6; // r12@3\n  __int64 v7; // r8@3\n  signed __int64 v8; // r15@4\n  int v9; // ebp@4\n  __int16 v10; // ax@4\n  __int64 v11; // rbp@9\n  void *v12; // r13@10\n  signed __int64 v13; // rbx@13\n  __int64 v14; // r15@13\n  void *v15; // r13@13\n  __int64 v16; // r12@13\n  signed __int64 v17; // rbp@13\n  __int64 v18; // r14@14\n  __int64 v19; // rax@15\n  __int64 v20; // rax@18\n  __int64 v21; // rax@21\n  __int64 v22; // rbp@24\n  char *v23; // rbx@25\n  __int64 v24; // r11@26\n  unsigned __int64 v25; // rax@27\n  signed __int64 v26; // rcx@27\n  char *i; // rdi@27\n  __int64 v28; // rax@32\n  void **v29; // rbp@35\n  void *v30; // rdi@36\n  __int128 *v32; // rbx@42\n  __int64 v33; // rdi@49\n  __int64 v34; // rsi@49\n  __int64 v35; // rcx@49\n  __int64 v36; // rdx@50\n  __int64 v37; // rsi@55\n  __int64 v38; // rcx@55\n  __int64 v39; // rdx@55\n  __int64 v40; // rax@56\n  signed __int64 v41; // r13@58\n  signed __int64 v42; // rbp@59\n  signed __int64 v43; // r12@59\n  __int128 *v44; // r14@59\n  __int64 v45; // rcx@63\n  __int64 v46; // rax@63\n  __int64 v47; // rdx@64\n  __int64 v48; // rbx@66\n  __int64 v49; // rdi@66\n  __int64 v50; // rdx@66\n  __int64 v51; // rax@67\n  __int64 v52; // rcx@67\n  __int64 v53; // rax@67\n  __int64 v54; // rdx@68\n  signed __int64 v55; // rax@69\n  __int64 v56; // ST30_8@75\n  signed __int64 v57; // rax@75\n  __int64 v58; // ST10_8@75\n  __int64 v59; // rbp@75\n  signed __int64 v60; // r13@75\n  _QWORD *v61; // rax@75\n  void **v62; // rbx@79\n  void *v63; // rdi@80\n  __int64 v64; // rsi@83\n  __int64 v65; // rdx@83\n  __int64 v66; // rdx@85\n  __int8 v67; // dh@89\n  __int64 v68; // rcx@92\n  __int64 v69; // rdx@92\n  __int64 v70; // rax@93\n  __int64 v71; // rsi@96\n  __int64 v72; // rdx@96\n  __int64 v73; // rcx@97\n  __int64 v74; // rsi@104\n  __int64 v75; // rdx@104\n  void **v76; // rbx@112\n  void *v77; // rdi@113\n  __int64 v78; // rax@115\n  char v79; // di@117\n  __int64 v80; // rax@120\n  char *v81; // rsi@126\n  __int64 v82; // r9@126\n  __int64 v83; // r15@127\n  signed __int64 v84; // r9@128\n  void *v85; // rax@133\n  __int64 v86; // rax@135\n  char *v87; // rdx@138\n  char *v88; // rbp@138\n  signed __int64 v89; // r11@138\n  unsigned __int64 v90; // rax@139\n  char *v91; // r8@139\n  signed __int64 j; // rcx@139\n  __int64 *v93; // rdi@145\n  __int64 v94; // rsi@145\n  __int64 v95; // r9@146\n  __int64 v96; // r10@146\n  char *ptr; // [sp+8h] [bp-E0h]@2\n  char *ptra; // [sp+8h] [bp-E0h]@12\n  signed __int64 v99; // [sp+10h] [bp-D8h]@13\n  int v100; // [sp+10h] [bp-D8h]@59\n  __int64 v101; // [sp+18h] [bp-D0h]@3\n  char *v102; // [sp+18h] [bp-D0h]@13\n  void *v103; // [sp+20h] [bp-C8h]@1\n  signed __int64 v104; // [sp+28h] [bp-C0h]@4\n  char *v105; // [sp+28h] [bp-C0h]@13\n  char v106; // [sp+30h] [bp-B8h]@13\n  __int64 v107; // [sp+30h] [bp-B8h]@59\n  signed __int64 v108; // [sp+38h] [bp-B0h]@12\n  __int64 v109; // [sp+40h] [bp-A8h]@59\n  __int64 v110; // [sp+48h] [bp-A0h]@1\n  __m128i v111; // [sp+50h] [bp-98h]@2\n  __m128i v112; // [sp+60h] [bp-88h]@2\n  __int128 v113; // [sp+70h] [bp-78h]@10\n  void *v114[2]; // [sp+80h] [bp-68h]@10\n  __int128 v115; // [sp+90h] [bp-58h]@13\n  __int128 v116; // [sp+A0h] [bp-48h]@13\n  char v117; // [sp+B0h] [bp-38h]@142\n\n  v110 = a2;\n  v103 = malloc(0x3800uLL);\n  if ( !v103 )\n    return 0;\n  v2 = a2;\n  v3 = 0LL;\n  v111 = 0LL;\n  v4 = *(_QWORD *)(a2 + 16) == 0LL;\n  v5 = *(_QWORD *)(a2 + 16) < 0;\n  v112 = 0LL;\n  ptr = (char *)v103 + 6144;\n  *(_QWORD *)(a2 + 88) = 0LL;\n  *(_QWORD *)(a2 + 96) = 0LL;\n  if ( v5 || v4 )\n  {\n    free(v103);\nLABEL_133:\n    v85 = calloc(8uLL, 0x100uLL);\n    *(_QWORD *)(v110 + 88) = v85;\n    return v85 != 0LL;\n  }\n  v6 = 0LL;\n  v101 = 0LL;\n  v7 = a1;\n  do\n  {\n    v104 = 8 * v101;\n    v8 = *(_QWORD *)v7 + 16LL * *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * v101);\n    v9 = *(_BYTE *)(v8 + 8);\n    v10 = (*(_DWORD *)(v8 + 8) >> 8) & 0x3FF;\n    if ( v9 == 1 )\n    {\n      v32 = (__int128 *)&v111;\n      *(_QWORD *)((char *)v32 + (((unsigned __int64)*(_BYTE *)v8 >> 3) & 0x18)) |= 1LL << *(_BYTE *)v8;\n    }\n    else if ( v9 == 3 )\n    {\n      v74 = *(_QWORD *)v8;\n      v75 = 0LL;\n      v32 = (__int128 *)&v111;\n      do\n      {\n        v111.m128i_i64[v75] |= *(_QWORD *)(v74 + v75 * 8);\n        ++v75;\n      }\n      while ( v75 != 4 );\n    }\n    else\n    {\n      if ( v9 == 5 )\n      {\n        if ( *(_DWORD *)(v7 + 180) <= 1 )\n        {\n          v3 = _mm_cmpeq_epi32(v3, v3);\n          v32 = (__int128 *)&v111;\n          v111 = v3;\n          v112 = v3;\n        }\n        else\n        {\n          v64 = *(_QWORD *)(v7 + 120);\n          v65 = 0LL;\n          v32 = (__int128 *)&v111;\n          do\n          {\n            v111.m128i_i64[v65] |= *(_QWORD *)(v64 + v65 * 8);\n            ++v65;\n          }\n          while ( v65 != 4 );\n        }\n      }\n      else\n      {\n        if ( v9 != 7 )\n          goto LABEL_8;\n        v3 = _mm_cmpeq_epi32(v3, v3);\n        v32 = (__int128 *)&v111;\n        v111 = v3;\n      }\n      v66 = *(_QWORD *)(v7 + 216);\n      if ( !(v66 & 0x40) )\n        v111.m128i_i64[0] &= 0xFFFFFFFFFFFFFBFFLL;\n      if ( v66 & 0x80 )\n        v111.m128i_i64[0] &= 0xFFFFFFFFFFFFFFFELL;\n    }\n    if ( v10 )\n    {\n      if ( v10 & 0x20 )\n      {\n        v67 = v111.m128i_i8[1];\n        v3 = 0LL;\n        *v32 = 0LL;\n        v32[1] = 0LL;\n        if ( !(v67 & 4) )\n          goto LABEL_8;\n        v111.m128i_i64[0] = 1024LL;\n      }\n      if ( v10 & 0x80 )\n        goto LABEL_77;\n      if ( !(v10 & 4) )\n      {\nLABEL_52:\n        if ( v10 & 8 )\n        {\n          if ( v9 == 1 && *(_BYTE *)(v8 + 10) & 0x40 )\n            goto LABEL_77;\n          if ( *(_DWORD *)(v7 + 180) <= 1 )\n          {\n            v68 = 0LL;\n            v69 = 0LL;\n            do\n            {\n              v70 = *((_QWORD *)v32 + v69) & ~*(_QWORD *)(v7 + 8 * v69 + 184);\n              *((_QWORD *)v32 + v69++) = v70;\n              v68 |= v70;\n            }\n            while ( v69 != 4 );\n            if ( !v68 )\n              goto LABEL_8;\n          }\n          else\n          {\n            v37 = *(_QWORD *)(v7 + 120);\n            v38 = 0LL;\n            v39 = 0LL;\n            do\n            {\n              v40 = *((_QWORD *)v32 + v39) & ~(*(_QWORD *)(v37 + 8 * v39) & *(_QWORD *)(v7 + 8 * v39 + 184));\n              *((_QWORD *)v32 + v39++) = v40;\n              v38 |= v40;\n            }\n            while ( v39 != 4 );\n            if ( !v38 )\n              goto LABEL_8;\n          }\n        }\n        goto LABEL_58;\n      }\n      if ( v9 == 1 )\n      {\n        if ( !(*(_BYTE *)(v8 + 10) & 0x40) )\n          goto LABEL_77;\n        if ( *(_DWORD *)(v7 + 180) > 1 )\n        {\nLABEL_49:\n          v33 = *(_QWORD *)(v7 + 120);\n          v34 = 0LL;\n          v35 = 0LL;\n          do\n          {\n            v36 = *((_QWORD *)v32 + v35) & (*(_QWORD *)(v7 + 8 * v35 + 184) | ~*(_QWORD *)(v33 + 8 * v35));\n            *((_QWORD *)v32 + v35++) = v36;\n            v34 |= v36;\n          }\n          while ( v35 != 4 );\n          if ( !v34 )\n            goto LABEL_8;\n          goto LABEL_52;\n        }\n      }\n      else if ( *(_DWORD *)(v7 + 180) > 1 )\n      {\n        goto LABEL_49;\n      }\n      v71 = 0LL;\n      v72 = 0LL;\n      do\n      {\n        v73 = *(_QWORD *)(v7 + 8 * v72 + 184) & *((_QWORD *)v32 + v72);\n        *((_QWORD *)v32 + v72++) = v73;\n        v71 |= v73;\n      }\n      while ( v72 != 4 );\n      if ( !v71 )\n        goto LABEL_8;\n      goto LABEL_52;\n    }\nLABEL_58:\n    v41 = 0LL;\n    if ( v6 > 0 )\n    {\n      v100 = v9;\n      v42 = v6;\n      v43 = (signed __int64)v103 + 6144;\n      v44 = v32;\n      v109 = v7;\n      v107 = v2;\n      while ( 1 )\n      {\n        if ( v100 != 1\n          || (*(_QWORD *)(&ptr[32 * v41] + (((unsigned __int64)*(_BYTE *)v8 >> 3) & 0x18)) >> *(_BYTE *)v8) & 1 )\n        {\n          v45 = 0LL;\n          v46 = 0LL;\n          do\n          {\n            v47 = *(_QWORD *)(v43 + 8 * v46) & *((_QWORD *)v44 + v46);\n            *((_QWORD *)&v113 + v46++) = v47;\n            v45 |= v47;\n          }\n          while ( v46 != 4 );\n          if ( v45 )\n          {\n            v48 = 0LL;\n            v49 = 0LL;\n            v50 = 0LL;\n            do\n            {\n              v51 = *(_QWORD *)(v43 + 8 * v50);\n              v52 = v51 & ~*((_QWORD *)v44 + v50);\n              v53 = *((_QWORD *)v44 + v50) & ~v51;\n              *((_QWORD *)&v115 + v50) = v52;\n              v49 |= v52;\n              *((_QWORD *)v44 + v50++) = v53;\n              v48 |= v53;\n            }\n            while ( v50 != 4 );\n            v54 = (__int64)v103 + 24 * v41;\n            if ( v49 )\n            {\n              v55 = (signed __int64)&ptr[32 * v42];\n              *(__m128i *)v55 = _mm_load_si128((const __m128i *)&v115);\n              *(__m128i *)(v55 + 16) = _mm_load_si128((const __m128i *)&v116);\n              *(__m128i *)v43 = _mm_load_si128((const __m128i *)&v113);\n              *(__m128i *)(v43 + 16) = _mm_load_si128((const __m128i *)v114);\n              if ( (unsigned int)sub_40D930((__int64)v103 + 24 * v42, v54) )\n                goto LABEL_78;\n              v54 = (__int64)v103 + 24 * v41;\n              ++v42;\n            }\n            if ( !(unsigned __int8)sub_40B280(v54, *(_QWORD *)(*(_QWORD *)(v107 + 24) + v104)) )\n            {\nLABEL_78:\n              v6 = v42;\n              goto LABEL_79;\n            }\n            if ( !v48 )\n            {\nLABEL_73:\n              v7 = v109;\n              v2 = v107;\n              v6 = v42;\n              v32 = v44;\n              break;\n            }\n          }\n        }\n        ++v41;\n        v43 += 32LL;\n        if ( v41 >= v42 )\n          goto LABEL_73;\n      }\n    }\n    if ( v6 == v41 )\n    {\n      v56 = v7;\n      v57 = (signed __int64)&ptr[32 * v6];\n      v58 = v2;\n      *(__m128i *)v57 = _mm_load_si128(&v111);\n      *(__m128i *)(v57 + 16) = _mm_load_si128(&v112);\n      v59 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + v104);\n      v60 = (signed __int64)v103 + 24 * v6;\n      *(_QWORD *)v60 = 1LL;\n      *(_QWORD *)(v60 + 8) = 1LL;\n      v61 = malloc(8uLL);\n      v2 = v58;\n      v7 = v56;\n      *(_QWORD *)(v60 + 16) = v61;\n      if ( !v61 )\n      {\n        *(_QWORD *)(v60 + 8) = 0LL;\n        *(_QWORD *)v60 = 0LL;\n        if ( v6 )\n        {\nLABEL_79:\n          v62 = (void **)((char *)v103 + 16);\n          do\n          {\n            v63 = *v62;\n            v62 += 3;\n            free(v63);\n          }\n          while ( (void **)((char *)v103 + 24 * v6 + 16) != v62 );\n          free(v103);\n        }\n        else\n        {\n          free(v103);\n        }\n        return 0;\n      }\n      *v61 = v59;\n      ++v6;\nLABEL_77:\n      v3 = 0LL;\n      *v32 = 0LL;\n      v32[1] = 0LL;\n    }\nLABEL_8:\n    ++v101;\n  }\n  while ( v101 < *(_QWORD *)(v2 + 16) );\n  v11 = v7;\n  if ( v6 <= 0 )\n  {\n    free(v103);\n    if ( v6 )\n      return 0;\n    goto LABEL_133;\n  }\n  *((_QWORD *)&v113 + 1) = 0LL;\n  *(_QWORD *)&v113 = v6 + 1;\n  v12 = malloc(8 * (v6 + 1));\n  v114[0] = v12;\n  if ( !v12\n    || (v111.m128i_i32[0] = 0, v6 > 768614336404564053LL)\n    || (v108 = 24 * v6, (ptra = (char *)malloc(24 * v6)) == 0LL) )\n  {\nLABEL_112:\n    free(v12);\n    v76 = (void **)((char *)v103 + 16);\n    do\n    {\n      v77 = *v76;\n      v76 += 3;\n      free(v77);\n    }\n    while ( (char *)v76 != (char *)v103 + 24 * v6 + 16 );\n    free(v103);\n    return 0;\n  }\n  v13 = 8 * (v6 + 1) - 8;\n  v14 = 0LL;\n  v15 = v103;\n  v106 = 0;\n  v99 = v6;\n  v16 = v11;\n  v102 = &ptra[v13];\n  v105 = &ptra[v13] + v13;\n  v17 = (signed __int64)v103 + 8;\n  v115 = 0LL;\n  v116 = 0LL;\n  do\n  {\n    *((_QWORD *)&v113 + 1) = 0LL;\n    v18 = 0LL;\n    if ( *(_QWORD *)v17 > 0LL )\n    {\n      while ( 1 )\n      {\n        v19 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8LL * *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v18));\n        if ( v19 != -1 )\n        {\n          v111.m128i_i32[0] = sub_40CDD0((__int64)&v113, *(_QWORD *)(v16 + 48) + 24 * v19);\n          if ( v111.m128i_i32[0] )\n            break;\n        }\n        if ( *(_QWORD *)v17 <= ++v18 )\n          goto LABEL_18;\n      }\nLABEL_110:\n      v6 = v99;\n      goto LABEL_111;\n    }\nLABEL_18:\n    v20 = sub_40DB40(&v111, v16, (__int64)&v113, 0);\n    *(_QWORD *)&ptra[8 * v14] = v20;\n    if ( !v20 && v111.m128i_i32[0] )\n      goto LABEL_110;\n    if ( *(_BYTE *)(v20 + 104) < 0 )\n    {\n      v78 = sub_40DB40(&v111, v16, (__int64)&v113, 1u);\n      *(_QWORD *)&v102[8 * v14] = v78;\n      if ( !v78 && v111.m128i_i32[0] )\n        goto LABEL_110;\n      if ( v78 != *(_QWORD *)&ptra[8 * v14] )\n      {\n        v79 = v106;\n        if ( *(_DWORD *)(v16 + 180) >= 2 )\n          v79 = 1;\n        v106 = v79;\n      }\n      v80 = sub_40DB40(&v111, v16, (__int64)&v113, 2u);\n      *(_QWORD *)&v105[8 * v14] = v80;\n      if ( !v80 )\n      {\n        if ( v111.m128i_i32[0] )\n          goto LABEL_110;\n      }\n    }\n    else\n    {\n      *(_QWORD *)&v102[8 * v14] = v20;\n      *(_QWORD *)&v105[8 * v14] = v20;\n    }\n    v21 = 0LL;\n    do\n    {\n      *(_QWORD *)((char *)&v115 + v21) |= *(_QWORD *)((char *)v15 + v21 + 6144);\n      v21 += 8LL;\n    }\n    while ( v21 != 32 );\n    ++v14;\n    v17 += 24LL;\n    v15 = (char *)v15 + 32;\n  }\n  while ( v14 != v99 );\n  v22 = v16;\n  v6 = v99;\n  if ( !v106 )\n  {\n    v23 = (char *)calloc(8uLL, 0x100uLL);\n    *(_QWORD *)(v110 + 88) = v23;\n    if ( v23 )\n    {\n      v24 = 0LL;\n      do\n      {\n        v25 = *(_QWORD *)((char *)&v115 + v24);\n        v26 = 1LL;\n        for ( i = &v23[64 * v24]; v25; v25 >>= 1 )\n        {\n          if ( v25 & 1 )\n          {\n            if ( v26 & *(_QWORD *)((char *)v103 + v24 + 6144) )\n            {\n              v84 = 0LL;\n            }\n            else\n            {\n              v81 = (char *)v103 + v24 + 6176;\n              v82 = 0LL;\n              do\n              {\n                v83 = *(_QWORD *)v81;\n                ++v82;\n                v81 += 32;\n              }\n              while ( !(v26 & v83) );\n              v84 = 8 * v82;\n            }\n            if ( v26 & *(_QWORD *)(v22 + v24 + 184) )\n              *(_QWORD *)i = *(_QWORD *)&v102[v84];\n            else\n              *(_QWORD *)i = *(_QWORD *)&ptra[v84];\n          }\n          v26 *= 2LL;\n          i += 8;\n        }\n        v24 += 8LL;\n      }\n      while ( v24 != 32 );\n      goto LABEL_31;\n    }\nLABEL_111:\n    free(ptra);\n    v12 = v114[0];\n    goto LABEL_112;\n  }\n  v23 = (char *)calloc(8uLL, 0x200uLL);\n  *(_QWORD *)(v110 + 96) = v23;\n  if ( !v23 )\n    goto LABEL_111;\n  v87 = (char *)&v115;\n  v88 = v23;\n  v89 = (signed __int64)v103 + 6176;\n  do\n  {\n    v90 = *(_QWORD *)v87;\n    v91 = v88;\n    for ( j = 1LL; v90; v90 >>= 1 )\n    {\n      if ( v90 & 1 )\n      {\n        if ( j & *(_QWORD *)(v89 - 32) )\n        {\n          v96 = 0LL;\n        }\n        else\n        {\n          v93 = (__int64 *)v89;\n          v94 = 0LL;\n          do\n          {\n            v95 = *v93;\n            ++v94;\n            v93 += 4;\n            v96 = v94;\n          }\n          while ( !(j & v95) );\n        }\n        *(_QWORD *)v91 = *(_QWORD *)&ptra[8 * v96];\n        *((_QWORD *)v91 + 256) = *(_QWORD *)&v102[8 * v96];\n      }\n      j *= 2LL;\n      v91 += 8;\n    }\n    v87 += 8;\n    v88 += 512;\n    v89 += 8LL;\n  }\n  while ( &v117 != v87 );\nLABEL_31:\n  if ( BYTE1(v115) & 4 )\n  {\n    v28 = 0LL;\n    while ( !(*((_BYTE *)v103 + 32 * v28 + 6145) & 4) )\n    {\n      if ( ++v28 == v99 )\n        goto LABEL_35;\n    }\n    v86 = *(_QWORD *)&v105[8 * v28];\n    *((_QWORD *)v23 + 10) = v86;\n    if ( v106 )\n      *((_QWORD *)v23 + 266) = v86;\n  }\nLABEL_35:\n  free(ptra);\n  free(v114[0]);\n  v29 = (void **)((char *)v103 + 16);\n  do\n  {\n    v30 = *v29;\n    v29 += 3;\n    free(v30);\n  }\n  while ( (void **)((char *)v103 + v108 + 16) != v29 );\n  free(v103);\n  return 1;\n}\n", 
            "funcStartAddr": "0x40f2d0L", 
            "funcEndAddr": "0x40fdddL", 
            "funcName": "sub_40F2D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40FE70(void **a1)\n{\n  void **v1; // r12@1\n  void *v2; // rdi@1\n  unsigned __int64 v3; // rbx@3\n  unsigned __int64 v4; // rax@5\n  unsigned __int64 v5; // rbx@6\n  void **v6; // rax@7\n  void **v7; // rax@9\n  void **v8; // rax@11\n  unsigned __int64 v9; // r13@14\n  char *v10; // rdi@14\n  __int64 v11; // rbx@15\n  signed __int64 v12; // rbp@15\n  __int64 v13; // rdi@16\n  void *v14; // rdi@20\n\n  v1 = a1;\n  v2 = *a1;\n  if ( v2 && v1[2] )\n  {\n    v3 = 0LL;\n    while ( 1 )\n    {\n      v4 = v3++;\n      sub_40BF10((__int64)v2 + 16 * v4);\n      if ( (unsigned __int64)v1[2] <= v3 )\n        break;\n      v2 = *v1;\n    }\n  }\n  v5 = 0LL;\n  free(v1[3]);\n  if ( v1[2] )\n  {\n    do\n    {\n      v6 = (void **)v1[6];\n      if ( v6 )\n        free(v6[3 * v5 + 2]);\n      v7 = (void **)v1[7];\n      if ( v7 )\n        free(v7[3 * v5 + 2]);\n      v8 = (void **)v1[5];\n      if ( v8 )\n        free(v8[3 * v5 + 2]);\n      ++v5;\n    }\n    while ( (unsigned __int64)v1[2] > v5 );\n  }\n  v9 = 0LL;\n  free(v1[5]);\n  free(v1[6]);\n  free(v1[7]);\n  free(*v1);\n  v10 = (char *)v1[8];\n  if ( v10 )\n  {\n    while ( 1 )\n    {\n      v11 = 0LL;\n      v12 = (signed __int64)&v10[24 * v9];\n      if ( *(_QWORD *)v12 > 0LL )\n      {\n        do\n        {\n          v13 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v11++);\n          sub_40C460(v13);\n        }\n        while ( v11 < *(_QWORD *)v12 );\n      }\n      ++v9;\n      free(*(void **)(v12 + 16));\n      if ( (unsigned __int64)v1[17] < v9 )\n        break;\n      v10 = (char *)v1[8];\n    }\n    v10 = (char *)v1[8];\n  }\n  free(v10);\n  v14 = v1[15];\n  if ( v14 != &unk_41E560 )\n    free(v14);\n  free(v1[28]);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x40fe70L", 
            "funcEndAddr": "0x40ffecL", 
            "funcName": "sub_40FE70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40FFF0(__int64 a1)\n{\n  __int64 v1; // rbx@2\n  signed __int64 v2; // rbp@3\n\n  if ( *(_QWORD *)a1 > 0LL )\n  {\n    v1 = 0LL;\n    do\n    {\n      v2 = 3 * v1++;\n      v2 *= 16LL;\n      free(*(void **)(*(_QWORD *)(a1 + 16) + v2 + 40));\n      free(*(void **)(*(_QWORD *)(a1 + 16) + v2 + 16));\n    }\n    while ( v1 < *(_QWORD *)a1 );\n  }\n  free(*(void **)(a1 + 16));\n}\n", 
            "funcStartAddr": "0x40fff0L", 
            "funcEndAddr": "0x41003eL", 
            "funcName": "sub_40FFF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410040(signed __int64 *a1, _QWORD *a2, _QWORD *a3, __int64 a4, void *a5, __int64 a6)\n{\n  bool v6; // sf@1\n  signed __int64 v7; // rax@1\n  signed __int64 v8; // rbx@2\n  __int64 v9; // rbp@2\n  signed __int64 v10; // rax@2\n  signed __int64 v11; // rbx@2\n\n  v7 = *a1 - 1;\n  v6 = v7 < 0;\n  *a1 = v7;\n  if ( v6 )\n    __assert_fail(\"num >= 0\", \"lib/regexec.c\", 0x54Fu, \"pop_fail_stack\");\n  v8 = 48 * v7;\n  v9 = a6;\n  v10 = 48 * v7 + *a2;\n  *a3 = *(_QWORD *)v10;\n  memcpy(a5, *(const void **)(v10 + 16), 16 * a4);\n  free(*(void **)(v9 + 16));\n  free(*(void **)(*a2 + v8 + 16));\n  v11 = *a2 + v8;\n  *(__m128i *)v9 = _mm_loadu_si128((const __m128i *)(v11 + 24));\n  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v11 + 40);\n  return *(_QWORD *)(v11 + 8);\n}\n", 
            "funcStartAddr": "0x410040L", 
            "funcEndAddr": "0x4100cbL", 
            "funcName": "sub_410040"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4100D0(__int64 a1, const char *a2)\n{\n  signed __int64 result; // rax@2\n\n  if ( strlen(a2) == 1 )\n  {\n    *(_QWORD *)(a1 + (((unsigned __int64)*a2 >> 3) & 0x18)) |= 1LL << *a2;\n    result = 0LL;\n  }\n  else\n  {\n    result = 3LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4100d0L", 
            "funcEndAddr": "0x41011cL", 
            "funcName": "sub_4100D0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_410120(__int64 a1, __int64 a2, void **a3, __int64 *a4, signed __int64 *a5, const char *a6, __int64 a7)\n{\n  __int64 *v7; // r13@1\n  const char *v8; // r12@1\n  __int64 v9; // rbp@1\n  __int64 v10; // rbx@1\n  bool v11; // cf@1\n  bool v12; // zf@1\n  const char *v13; // rdi@2\n  signed __int64 v14; // rcx@2\n  const char *v15; // rsi@2\n  char v16; // al@5\n  bool v17; // cf@5\n  bool v18; // zf@5\n  __int64 v19; // rcx@7\n  void *v20; // rax@7\n  wctype_t *v21; // r13@8\n  bool v22; // cf@8\n  bool v23; // zf@8\n  wctype_t v24; // rax@8\n  const char *v25; // rdi@8\n  signed __int64 v26; // rcx@8\n  const char *v27; // rsi@8\n  char v28; // al@11\n  bool v29; // cf@11\n  bool v30; // zf@11\n  const char *v31; // rdi@12\n  signed __int64 v32; // rcx@12\n  const char *v33; // rsi@12\n  char v34; // al@15\n  bool v35; // cf@15\n  bool v36; // zf@15\n  const unsigned __int16 **v37; // rax@16\n  signed __int64 v38; // rcx@16\n  const unsigned __int16 *v39; // rdx@16\n  const unsigned __int16 **v41; // rax@22\n  signed __int64 v42; // rcx@22\n  const unsigned __int16 *v43; // rdx@22\n  signed __int64 v44; // rcx@27\n  const char *v45; // rdi@27\n  const char *v46; // rsi@27\n  signed __int64 v47; // r14@33\n  const char *v48; // rdi@35\n  signed __int64 v49; // rcx@35\n  const char *v50; // rsi@35\n  char v51; // al@38\n  bool v52; // cf@38\n  bool v53; // zf@38\n  const char *v54; // rdi@39\n  signed __int64 v55; // rcx@39\n  const char *v56; // rsi@39\n  char v57; // al@42\n  bool v58; // cf@42\n  bool v59; // zf@42\n  const unsigned __int16 **v60; // rax@43\n  signed __int64 v61; // rcx@43\n  const unsigned __int16 *v62; // rdx@43\n  const unsigned __int16 **v63; // rax@48\n  signed __int64 v64; // rcx@48\n  const unsigned __int16 *v65; // rdx@48\n  const char *v66; // rdi@53\n  signed __int64 v67; // rcx@53\n  const char *v68; // rsi@53\n  char v69; // al@56\n  bool v70; // cf@56\n  bool v71; // zf@56\n  const char *v72; // rdi@57\n  signed __int64 v73; // rcx@57\n  const char *v74; // rsi@57\n  char v75; // al@60\n  bool v76; // cf@60\n  bool v77; // zf@60\n  const unsigned __int16 **v78; // rax@61\n  signed __int64 v79; // rcx@61\n  const unsigned __int16 *v80; // rdx@61\n  const unsigned __int16 **v81; // rax@66\n  signed __int64 v82; // rcx@66\n  const unsigned __int16 *v83; // rdx@66\n  __int64 v84; // rax@71\n  __int64 v85; // rax@76\n  __int64 v86; // rax@81\n  const char *v87; // rdi@86\n  signed __int64 v88; // rcx@86\n  const char *v89; // rsi@86\n  char v90; // al@89\n  bool v91; // cf@89\n  bool v92; // zf@89\n  const unsigned __int16 **v93; // rax@90\n  signed __int64 v94; // rcx@90\n  const unsigned __int16 *v95; // rdx@90\n  const char *v96; // rdi@95\n  signed __int64 v97; // rcx@95\n  const char *v98; // rsi@95\n  char v99; // al@98\n  bool v100; // cf@98\n  bool v101; // zf@98\n  const unsigned __int16 **v102; // rax@99\n  signed __int64 v103; // rcx@99\n  const unsigned __int16 *v104; // rax@99\n  const char *v105; // rdi@105\n  signed __int64 v106; // rcx@105\n  const char *v107; // rsi@105\n  char v108; // al@108\n  bool v109; // cf@108\n  bool v110; // zf@108\n  const unsigned __int16 **v111; // rax@109\n  signed __int64 v112; // rcx@109\n  const unsigned __int16 *v113; // rdx@109\n  __int64 v114; // rax@114\n  __int64 v115; // rax@119\n  __int64 v116; // rax@124\n  const char *v117; // rdi@129\n  signed __int64 v118; // rcx@129\n  const char *v119; // rsi@129\n  const unsigned __int16 **v120; // rax@133\n  signed __int64 v121; // rcx@133\n  const unsigned __int16 *v122; // rsi@133\n  __int64 v123; // rax@138\n  const unsigned __int16 **v124; // rax@144\n  signed __int64 v125; // rcx@144\n  const unsigned __int16 *v126; // rsi@144\n  __int64 v127; // rax@149\n  const unsigned __int16 **v128; // rax@155\n  signed __int64 v129; // rcx@155\n  const unsigned __int16 *v130; // rsi@155\n  __int64 v131; // rax@160\n  __int64 v132; // rax@166\n  __int64 v133; // rax@171\n  __int64 v134; // rdx@176\n  void **v135; // [sp+0h] [bp-38h]@33\n  signed __int64 *v136; // [sp+8h] [bp-30h]@33\n\n  v7 = a4;\n  v8 = a6;\n  v9 = a1;\n  v10 = a2;\n  v11 = 0;\n  v12 = (a7 & 0x400000) == 0;\n  if ( !(a7 & 0x400000) )\n  {\nLABEL_7:\n    v19 = *v7;\n    v20 = *a3;\n    if ( *a5 != *v7 )\n      goto LABEL_8;\n    goto LABEL_33;\n  }\n  v13 = \"upper\";\n  v14 = 6LL;\n  v15 = a6;\n  do\n  {\n    if ( !v14 )\n      break;\n    v11 = (const unsigned __int8)*v15 < *v13;\n    v12 = *v15++ == *v13++;\n    --v14;\n  }\n  while ( v12 );\n  v16 = (!v11 && !v12) - v11;\n  v17 = 0;\n  v18 = v16 == 0;\n  if ( !v16 )\n  {\n    v8 = \"alpha\";\n    goto LABEL_7;\n  }\n  v44 = 6LL;\n  v45 = \"lower\";\n  v46 = a6;\n  do\n  {\n    if ( !v44 )\n      break;\n    v17 = (const unsigned __int8)*v46 < *v45;\n    v18 = *v46++ == *v45++;\n    --v44;\n  }\n  while ( v18 );\n  v19 = *v7;\n  if ( (!v17 && !v18) == v17 )\n    v8 = \"alpha\";\n  v20 = *a3;\n  if ( *a5 != v19 )\n    goto LABEL_8;\nLABEL_33:\n  v47 = 2 * v19 + 1;\n  v136 = a5;\n  v135 = a3;\n  v20 = realloc(v20, 8 * v47);\n  if ( !v20 )\n    return 12LL;\n  *v135 = v20;\n  *v136 = v47;\n  v19 = *v7;\nLABEL_8:\n  *v7 = v19 + 1;\n  v21 = (wctype_t *)((char *)v20 + 8 * v19);\n  v24 = wctype(v8);\n  v25 = \"alnum\";\n  v26 = 6LL;\n  v27 = v8;\n  *v21 = v24;\n  do\n  {\n    if ( !v26 )\n      break;\n    v22 = (const unsigned __int8)*v27 < *v25;\n    v23 = *v27++ == *v25++;\n    --v26;\n  }\n  while ( v23 );\n  v28 = (!v22 && !v23) - v22;\n  v29 = 0;\n  v30 = v28 == 0;\n  if ( !v28 )\n  {\n    v41 = __ctype_b_loc();\n    v42 = 0LL;\n    v43 = *v41;\n    if ( v9 )\n    {\n      v84 = 0LL;\n      do\n      {\n        if ( v43[v84] & 8 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v84) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v84);\n        ++v84;\n      }\n      while ( v84 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v43[v42] & 8 )\n          *(_QWORD *)(v10 + 8 * (v42 >> 6)) |= 1LL << v42;\n        ++v42;\n      }\n      while ( v42 != 256 );\n    }\n    return 0LL;\n  }\n  v31 = \"cntrl\";\n  v32 = 6LL;\n  v33 = v8;\n  do\n  {\n    if ( !v32 )\n      break;\n    v29 = (const unsigned __int8)*v33 < *v31;\n    v30 = *v33++ == *v31++;\n    --v32;\n  }\n  while ( v30 );\n  v34 = (!v29 && !v30) - v29;\n  v35 = 0;\n  v36 = v34 == 0;\n  if ( !v34 )\n  {\n    v37 = __ctype_b_loc();\n    v38 = 0LL;\n    v39 = *v37;\n    if ( v9 )\n    {\n      v85 = 0LL;\n      do\n      {\n        if ( v39[v85] & 2 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v85) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v85);\n        ++v85;\n      }\n      while ( v85 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v39[v38] & 2 )\n          *(_QWORD *)(v10 + 8 * (v38 >> 6)) |= 1LL << v38;\n        ++v38;\n      }\n      while ( v38 != 256 );\n    }\n    return 0LL;\n  }\n  v48 = \"lower\";\n  v49 = 6LL;\n  v50 = v8;\n  do\n  {\n    if ( !v49 )\n      break;\n    v35 = (const unsigned __int8)*v50 < *v48;\n    v36 = *v50++ == *v48++;\n    --v49;\n  }\n  while ( v36 );\n  v51 = (!v35 && !v36) - v35;\n  v52 = 0;\n  v53 = v51 == 0;\n  if ( !v51 )\n  {\n    v63 = __ctype_b_loc();\n    v64 = 0LL;\n    v65 = *v63;\n    if ( v9 )\n    {\n      v86 = 0LL;\n      do\n      {\n        if ( HIBYTE(v65[v86]) & 2 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v86) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v86);\n        ++v86;\n      }\n      while ( v86 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( HIBYTE(v65[v64]) & 2 )\n          *(_QWORD *)(v10 + 8 * (v64 >> 6)) |= 1LL << v64;\n        ++v64;\n      }\n      while ( v64 != 256 );\n    }\n    return 0LL;\n  }\n  v54 = \"space\";\n  v55 = 6LL;\n  v56 = v8;\n  do\n  {\n    if ( !v55 )\n      break;\n    v52 = (const unsigned __int8)*v56 < *v54;\n    v53 = *v56++ == *v54++;\n    --v55;\n  }\n  while ( v53 );\n  v57 = (!v52 && !v53) - v52;\n  v58 = 0;\n  v59 = v57 == 0;\n  if ( !v57 )\n  {\n    v60 = __ctype_b_loc();\n    v61 = 0LL;\n    v62 = *v60;\n    if ( v9 )\n    {\n      v115 = 0LL;\n      do\n      {\n        if ( HIBYTE(v62[v115]) & 0x20 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v115) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v115);\n        ++v115;\n      }\n      while ( v115 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( HIBYTE(v62[v61]) & 0x20 )\n          *(_QWORD *)(v10 + 8 * (v61 >> 6)) |= 1LL << v61;\n        ++v61;\n      }\n      while ( v61 != 256 );\n    }\n    return 0LL;\n  }\n  v66 = \"alpha\";\n  v67 = 6LL;\n  v68 = v8;\n  do\n  {\n    if ( !v67 )\n      break;\n    v58 = (const unsigned __int8)*v68 < *v66;\n    v59 = *v68++ == *v66++;\n    --v67;\n  }\n  while ( v59 );\n  v69 = (!v58 && !v59) - v58;\n  v70 = 0;\n  v71 = v69 == 0;\n  if ( !v69 )\n  {\n    v81 = __ctype_b_loc();\n    v82 = 0LL;\n    v83 = *v81;\n    if ( v9 )\n    {\n      v114 = 0LL;\n      do\n      {\n        if ( HIBYTE(v83[v114]) & 4 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v114) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v114);\n        ++v114;\n      }\n      while ( v114 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( HIBYTE(v83[v82]) & 4 )\n          *(_QWORD *)(v10 + 8 * (v82 >> 6)) |= 1LL << v82;\n        ++v82;\n      }\n      while ( v82 != 256 );\n    }\n    return 0LL;\n  }\n  v72 = \"digit\";\n  v73 = 6LL;\n  v74 = v8;\n  do\n  {\n    if ( !v73 )\n      break;\n    v70 = (const unsigned __int8)*v74 < *v72;\n    v71 = *v74++ == *v72++;\n    --v73;\n  }\n  while ( v71 );\n  v75 = (!v70 && !v71) - v70;\n  v76 = 0;\n  v77 = v75 == 0;\n  if ( !v75 )\n  {\n    v78 = __ctype_b_loc();\n    v79 = 0LL;\n    v80 = *v78;\n    if ( v9 )\n    {\n      v116 = 0LL;\n      do\n      {\n        if ( HIBYTE(v80[v116]) & 8 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v116) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v116);\n        ++v116;\n      }\n      while ( v116 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( HIBYTE(v80[v79]) & 8 )\n          *(_QWORD *)(v10 + 8 * (v79 >> 6)) |= 1LL << v79;\n        ++v79;\n      }\n      while ( v79 != 256 );\n    }\n    return 0LL;\n  }\n  v87 = \"print\";\n  v88 = 6LL;\n  v89 = v8;\n  do\n  {\n    if ( !v88 )\n      break;\n    v76 = (const unsigned __int8)*v89 < *v87;\n    v77 = *v89++ == *v87++;\n    --v88;\n  }\n  while ( v77 );\n  v90 = (!v76 && !v77) - v76;\n  v91 = 0;\n  v92 = v90 == 0;\n  if ( !v90 )\n  {\n    v93 = __ctype_b_loc();\n    v94 = 0LL;\n    v95 = *v93;\n    if ( v9 )\n    {\n      v132 = 0LL;\n      do\n      {\n        if ( HIBYTE(v95[v132]) & 0x40 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v132) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v132);\n        ++v132;\n      }\n      while ( v132 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( HIBYTE(v95[v94]) & 0x40 )\n          *(_QWORD *)(v10 + 8 * (v94 >> 6)) |= 1LL << v94;\n        ++v94;\n      }\n      while ( v94 != 256 );\n    }\n    return 0LL;\n  }\n  v96 = \"upper\";\n  v97 = 6LL;\n  v98 = v8;\n  do\n  {\n    if ( !v97 )\n      break;\n    v91 = (const unsigned __int8)*v98 < *v96;\n    v92 = *v98++ == *v96++;\n    --v97;\n  }\n  while ( v92 );\n  v99 = (!v91 && !v92) - v91;\n  v100 = 0;\n  v101 = v99 == 0;\n  if ( !v99 )\n  {\n    v102 = __ctype_b_loc();\n    v103 = 0LL;\n    v104 = *v102;\n    if ( v9 )\n    {\n      v134 = 0LL;\n      do\n      {\n        if ( HIBYTE(v104[v134]) & 1 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v134) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v134);\n        ++v134;\n      }\n      while ( v134 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( HIBYTE(v104[v103]) & 1 )\n          *(_QWORD *)(v10 + 8 * (v103 >> 6)) |= 1LL << v103;\n        ++v103;\n      }\n      while ( v103 != 256 );\n    }\n    return 0LL;\n  }\n  v105 = \"blank\";\n  v106 = 6LL;\n  v107 = v8;\n  do\n  {\n    if ( !v106 )\n      break;\n    v100 = (const unsigned __int8)*v107 < *v105;\n    v101 = *v107++ == *v105++;\n    --v106;\n  }\n  while ( v101 );\n  v108 = (!v100 && !v101) - v100;\n  v109 = 0;\n  v110 = v108 == 0;\n  if ( !v108 )\n  {\n    v111 = __ctype_b_loc();\n    v112 = 0LL;\n    v113 = *v111;\n    if ( v9 )\n    {\n      v133 = 0LL;\n      do\n      {\n        if ( v113[v133] & 1 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v133) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v133);\n        ++v133;\n      }\n      while ( v133 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v113[v112] & 1 )\n          *(_QWORD *)(v10 + 8 * (v112 >> 6)) |= 1LL << v112;\n        ++v112;\n      }\n      while ( v112 != 256 );\n    }\n    return 0LL;\n  }\n  v117 = \"graph\";\n  v118 = 6LL;\n  v119 = v8;\n  do\n  {\n    if ( !v118 )\n      break;\n    v109 = (const unsigned __int8)*v119 < *v117;\n    v110 = *v119++ == *v117++;\n    --v118;\n  }\n  while ( v110 );\n  if ( (!v109 && !v110) == v109 )\n  {\n    v120 = __ctype_b_loc();\n    v121 = 0LL;\n    v122 = *v120;\n    if ( v9 )\n    {\n      v123 = 0LL;\n      do\n      {\n        if ( (v122[v123] & 0x8000u) != 0 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v123) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v123);\n        ++v123;\n      }\n      while ( v123 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( (v122[v121] & 0x8000u) != 0 )\n          *(_QWORD *)(v10 + 8 * (v121 >> 6)) |= 1LL << v121;\n        ++v121;\n      }\n      while ( v121 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"punct\") )\n  {\n    v124 = __ctype_b_loc();\n    v125 = 0LL;\n    v126 = *v124;\n    if ( v9 )\n    {\n      v127 = 0LL;\n      do\n      {\n        if ( v126[v127] & 4 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v127) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v127);\n        ++v127;\n      }\n      while ( v127 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v126[v125] & 4 )\n          *(_QWORD *)(v10 + 8 * (v125 >> 6)) |= 1LL << v125;\n        ++v125;\n      }\n      while ( v125 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"xdigit\") )\n  {\n    v128 = __ctype_b_loc();\n    v129 = 0LL;\n    v130 = *v128;\n    if ( v9 )\n    {\n      v131 = 0LL;\n      do\n      {\n        if ( HIBYTE(v130[v131]) & 0x10 )\n          *(_QWORD *)(v10 + (((unsigned __int64)*(_BYTE *)(v9 + v131) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(v9 + v131);\n        ++v131;\n      }\n      while ( v131 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( HIBYTE(v130[v129]) & 0x10 )\n          *(_QWORD *)(v10 + 8 * (v129 >> 6)) |= 1LL << v129;\n        ++v129;\n      }\n      while ( v129 != 256 );\n    }\n    return 0LL;\n  }\n  return 4LL;\n}\n", 
            "funcStartAddr": "0x410120L", 
            "funcEndAddr": "0x4108e6L", 
            "funcName": "sub_410120"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4108F0(__int64 a1, __int64 a2, const char *a3, _BYTE *a4, char a5, _DWORD *a6)\n{\n  const char *v6; // r14@1\n  _BYTE *v7; // r13@1\n  char v8; // r12@1\n  void *v9; // rax@1\n  void *v10; // rbx@2\n  void *v11; // rax@2\n  __int64 v12; // r15@2\n  int v13; // eax@3\n  signed __int64 i; // rcx@4\n  signed __int64 v15; // rax@5\n  signed __int64 v16; // rdx@7\n  char *v17; // rax@9\n  __int64 v18; // rcx@12\n  __int64 v19; // rax@12\n  char *v20; // r14@14\n  char *v21; // rax@16\n  int v23; // ST10_4@23\n  _DWORD *v24; // [sp+8h] [bp-70h]@1\n  __int64 v25; // [sp+18h] [bp-60h]@1\n  __int64 v26; // [sp+20h] [bp-58h]@14\n  char v27; // [sp+28h] [bp-50h]@14\n  char v28; // [sp+30h] [bp-48h]@17\n  char v29; // [sp+38h] [bp-40h]@17\n\n  v6 = a3;\n  v7 = a4;\n  v8 = a5;\n  v24 = a6;\n  v25 = 0LL;\n  v9 = calloc(0x20uLL, 1uLL);\n  if ( !v9 )\n    goto LABEL_20;\n  v10 = v9;\n  v11 = calloc(0x50uLL, 1uLL);\n  v12 = (__int64)v11;\n  if ( !v11 )\n  {\n    v20 = 0LL;\n    free(v10);\n    *v24 = 12;\n    return v20;\n  }\n  *((_BYTE *)v11 + 32) = v8 & 1 | *((_BYTE *)v11 + 32) & 0xFE;\n  v13 = sub_410120(a2, (__int64)v10, (void **)v11 + 3, (__int64 *)v11 + 9, &v25, v6, 0LL);\n  if ( v13 )\n  {\n    v23 = v13;\n    v20 = 0LL;\n    free(v10);\n    sub_40BEF0(v12);\n    *v24 = v23;\n    return v20;\n  }\n  for ( i = *v7; (_BYTE)i; *((_QWORD *)v10 + (v15 >> 6)) |= v16 )\n  {\n    v15 = i + 63;\n    if ( i >= 0 )\n      v15 = i;\n    ++v7;\n    v16 = 1LL << (char)i % 64;\n    i = *v7;\n  }\n  if ( v8 )\n  {\n    v17 = (char *)v10;\n    do\n    {\n      *(_QWORD *)v17 = ~*(_QWORD *)v17;\n      v17 += 8;\n    }\n    while ( (char *)v10 + 32 != v17 );\n  }\n  if ( *(_DWORD *)(a1 + 180) > 1 )\n  {\n    v18 = *(_QWORD *)(a1 + 120);\n    v19 = 0LL;\n    do\n    {\n      *(_QWORD *)((char *)v10 + v19) &= *(_QWORD *)(v18 + v19);\n      v19 += 8LL;\n    }\n    while ( v19 != 32 );\n  }\n  v27 = 3;\n  v26 = (__int64)v10;\n  v20 = sub_40D500((char **)(a1 + 112), (signed int *)(a1 + 128), 0LL, 0LL, (const __m128i *)&v26);\n  if ( !v20 )\n    goto LABEL_26;\n  if ( *(_DWORD *)(a1 + 180) <= 1 )\n  {\n    sub_40BEF0(v12);\n    return v20;\n  }\n  *(_BYTE *)(a1 + 176) |= 2u;\n  v27 = 6;\n  v26 = v12;\n  v21 = sub_40D500((char **)(a1 + 112), (signed int *)(a1 + 128), 0LL, 0LL, (const __m128i *)&v26);\n  if ( !v21 )\n  {\nLABEL_26:\n    free(v10);\n    sub_40BEF0(v12);\nLABEL_20:\n    v20 = 0LL;\n    *v24 = 12;\n    return v20;\n  }\n  v29 = 10;\n  return sub_40D500((char **)(a1 + 112), (signed int *)(a1 + 128), (char **)v20, (char **)v21, (const __m128i *)&v28);\n}\n", 
            "funcStartAddr": "0x4108f0L", 
            "funcEndAddr": "0x410b25L", 
            "funcName": "sub_4108F0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_410B30(_QWORD *a1, _QWORD *a2, _QWORD *a3, __int64 a4)\n{\n  signed __int64 v4; // r12@1\n  _QWORD *result; // rax@1\n  __int64 v6; // rbx@3\n  __int64 v7; // r15@4\n  __int64 v8; // r14@10\n  __int64 v9; // rcx@10\n  signed __int64 v10; // rsi@10\n  __int64 v11; // rdx@11\n  __int64 v12; // rax@15\n  unsigned __int64 v13; // rdx@15\n  signed __int64 v14; // rax@16\n  char *v15; // rsi@17\n  size_t v16; // r13@20\n  wchar_t v17; // eax@22\n  __int64 v18; // r13@25\n  __int64 i; // r14@29\n  __int64 v20; // rdx@33\n  wchar_t v21; // eax@37\n  unsigned __int64 v22; // r14@45\n  __int64 v23; // rbp@45\n  signed __int64 v24; // r13@45\n  _BYTE *v25; // rax@47\n  __m128i v26; // xmm0@54\n  __m128i v27; // xmm0@56\n  _QWORD *v28; // [sp+0h] [bp-178h]@1\n  __int64 v29; // [sp+8h] [bp-170h]@44\n  signed __int64 v30; // [sp+10h] [bp-168h]@10\n  _QWORD *v31; // [sp+20h] [bp-158h]@4\n  _QWORD *v32; // [sp+28h] [bp-150h]@4\n  wint_t wc; // [sp+34h] [bp-144h]@21\n  mbstate_t ps; // [sp+38h] [bp-140h]@21\n  mbstate_t s; // [sp+40h] [bp-138h]@15\n\n  LODWORD(v4) = 0;\n  result = (_QWORD *)*a1;\n  v28 = (_QWORD *)*a1;\n  if ( *(_DWORD *)(*a1 + 180LL) == 1 )\n    v4 = (a1[3] >> 22) & 1LL;\n  v6 = 0LL;\n  if ( *a2 <= 0LL )\n    return result;\n  v7 = a4;\n  v31 = a3;\n  v32 = a2;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v8 = *(_QWORD *)(*v31 + 8 * v6);\n      v9 = *v28;\n      v10 = *v28 + 16LL * *(_QWORD *)(*v31 + 8 * v6);\n      v30 = 16LL * *(_QWORD *)(*v31 + 8 * v6);\n      result = (_QWORD *)*(_BYTE *)(v10 + 8);\n      if ( (_DWORD)result != 1 )\n        break;\n      v11 = *(_BYTE *)v10;\n      *(_BYTE *)(v7 + v11) = 1;\n      if ( (_DWORD)v4 )\n        *(_BYTE *)(v7 + (*__ctype_tolower_loc())[v11]) = 1;\n      if ( !(*((_BYTE *)a1 + 26) & 0x40) || *((_DWORD *)v28 + 45) <= 1 )\n        goto LABEL_9;\n      v12 = *v28;\n      LOBYTE(s.__count) = *(_BYTE *)(*v28 + v30);\n      v13 = v8 + 1;\n      if ( v28[2] <= (unsigned __int64)(v8 + 1) || (v14 = v12 + v30 + 16, (*(_DWORD *)(v14 + 8) & 0x2000FF) != 2097153) )\n      {\n        v16 = 1LL;\n      }\n      else\n      {\n        v15 = (char *)&s + 1;\n        do\n        {\n          ++v15;\n          ++v13;\n          *(v15 - 1) = *(_BYTE *)v14;\n          if ( v28[2] <= v13 )\n            break;\n          v14 = *v28 + 16 * v13;\n        }\n        while ( (*(_DWORD *)(v14 + 8) & 0x2000FF) == 2097153 );\n        v16 = v15 - (char *)&s;\n      }\n      ps = 0LL;\n      if ( sub_40AB50((wchar_t *)&wc, (char *)&s, v16, &ps) != v16 )\n        goto LABEL_9;\n      v17 = towlower(wc);\n      if ( wcrtomb((char *)&s, v17, &ps) == -1LL )\n        goto LABEL_9;\n      ++v6;\n      *(_BYTE *)(v7 + LOBYTE(s.__count)) = 1;\n      result = v32;\n      if ( v6 >= *v32 )\n        return result;\n    }\n    if ( (_DWORD)result == 3 )\n    {\n      v29 = 0LL;\n      while ( 1 )\n      {\n        v22 = 0LL;\n        v23 = *(_QWORD *)(*(_QWORD *)(v9 + v30) + v29);\n        v24 = 8 * v29;\n        do\n        {\n          if ( _bittest64(&v23, v22) )\n          {\n            v25 = (_BYTE *)(v7 + v24);\n            *(_BYTE *)(v7 + v24) = 1;\n            if ( (_DWORD)v4 )\n            {\n              if ( (unsigned int)(v24 + 128) <= 0x17F )\n                v25 = (_BYTE *)(v7 + (*__ctype_tolower_loc())[v24]);\n              *v25 = 1;\n            }\n          }\n          v22 = (unsigned int)(v22 + 1);\n          ++v24;\n        }\n        while ( (_DWORD)v22 != 64 );\n        v29 += 8LL;\n        if ( v29 == 32 )\n          break;\n        v9 = *v28;\n      }\n      goto LABEL_9;\n    }\n    if ( (_DWORD)result == 6 )\n    {\n      v18 = *(_QWORD *)v10;\n      if ( *((_DWORD *)v28 + 45) > 1 && (*(_QWORD *)(v18 + 72) || *(_BYTE *)(v18 + 32) & 1 || *(_QWORD *)(v18 + 64)) )\n      {\n        LOBYTE(ps.__count) = 0;\n        do\n        {\n          s = 0LL;\n          if ( sub_40AB50(0LL, (char *)&ps, 1uLL, &s) == -2LL )\n            *(_BYTE *)(v7 + LOBYTE(ps.__count)) = 1;\n          ++LOBYTE(ps.__count);\n        }\n        while ( LOBYTE(ps.__count) );\n      }\n      else\n      {\n        for ( i = 0LL; i < *(_QWORD *)(v18 + 40); ++i )\n        {\n          ps = 0LL;\n          if ( wcrtomb((char *)&s, *(_DWORD *)(*(_QWORD *)v18 + 4 * i), &ps) != -1LL )\n          {\n            v20 = LOBYTE(s.__count);\n            *(_BYTE *)(v7 + LOBYTE(s.__count)) = 1;\n            if ( (_DWORD)v4 )\n              *(_BYTE *)(v7 + (*__ctype_tolower_loc())[v20]) = 1;\n          }\n          if ( *((_BYTE *)a1 + 26) & 0x40 )\n          {\n            if ( *((_DWORD *)v28 + 45) > 1 )\n            {\n              v21 = towlower(*(_DWORD *)(*(_QWORD *)v18 + 4 * i));\n              if ( wcrtomb((char *)&s, v21, &ps) != -1LL )\n                *(_BYTE *)(v7 + LOBYTE(s.__count)) = 1;\n            }\n          }\n        }\n      }\n      goto LABEL_9;\n    }\n    if ( (*(_BYTE *)(v10 + 8) & 0xFD) == 5 )\n      break;\n    if ( (_DWORD)result == 2 )\n    {\n      v27 = _mm_load_si128((const __m128i *)&xmmword_41E7A0);\n      *(__m128i *)v7 = v27;\n      *(__m128i *)(v7 + 16) = v27;\n      *(__m128i *)(v7 + 32) = v27;\n      *(__m128i *)(v7 + 48) = v27;\n      *(__m128i *)(v7 + 64) = v27;\n      *(__m128i *)(v7 + 80) = v27;\n      *(__m128i *)(v7 + 96) = v27;\n      *(__m128i *)(v7 + 112) = v27;\n      *(__m128i *)(v7 + 128) = v27;\n      *(__m128i *)(v7 + 144) = v27;\n      *(__m128i *)(v7 + 160) = v27;\n      *(__m128i *)(v7 + 176) = v27;\n      *(__m128i *)(v7 + 192) = v27;\n      *(__m128i *)(v7 + 208) = v27;\n      *(__m128i *)(v7 + 224) = v27;\n      *(__m128i *)(v7 + 240) = v27;\n      goto LABEL_57;\n    }\nLABEL_9:\n    result = v32;\n    if ( ++v6 >= *v32 )\n      return result;\n  }\n  v26 = _mm_load_si128((const __m128i *)&xmmword_41E7A0);\n  *(__m128i *)v7 = v26;\n  *(__m128i *)(v7 + 16) = v26;\n  *(__m128i *)(v7 + 32) = v26;\n  *(__m128i *)(v7 + 48) = v26;\n  *(__m128i *)(v7 + 64) = v26;\n  *(__m128i *)(v7 + 80) = v26;\n  *(__m128i *)(v7 + 96) = v26;\n  *(__m128i *)(v7 + 112) = v26;\n  *(__m128i *)(v7 + 128) = v26;\n  *(__m128i *)(v7 + 144) = v26;\n  *(__m128i *)(v7 + 160) = v26;\n  *(__m128i *)(v7 + 176) = v26;\n  *(__m128i *)(v7 + 192) = v26;\n  *(__m128i *)(v7 + 208) = v26;\n  *(__m128i *)(v7 + 224) = v26;\n  *(__m128i *)(v7 + 240) = v26;\n  if ( (_DWORD)result != 2 )\n    return result;\nLABEL_57:\n  result = a1;\n  *((_BYTE *)result + 56) |= 1u;\n  return result;\n}\n", 
            "funcStartAddr": "0x410b30L", 
            "funcEndAddr": "0x411008L", 
            "funcName": "sub_410B30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411010(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  signed int v5; // eax@3\n  __int64 v6; // r8@3\n  __int64 v7; // r9@3\n  __int64 v8; // r10@3\n  char v9; // r11@3\n  signed int v10; // ebp@3\n  __int64 v12; // r13@14\n  __int64 v13; // rsi@14\n  __int64 v14; // rdx@14\n  wint_t v15; // er12@16\n  __int64 v16; // rax@18\n  __int64 v17; // rbx@22\n  __int64 v18; // rax@27\n  unsigned __int8 v19; // dl@27\n  signed __int64 v20; // rcx@28\n  unsigned __int8 v21; // di@29\n  signed __int64 v22; // rdi@33\n  _BYTE *v23; // rdx@35\n  _BYTE *v24; // rax@35\n  __int64 v25; // rax@41\n\n  if ( *(_BYTE *)(a1 + 16 * a3 + 8) == 7 )\n  {\n    v18 = *(_QWORD *)(a4 + 8);\n    v19 = *(_BYTE *)(v18 + a5);\n    if ( v19 <= 0xC1u )\n      goto LABEL_6;\n    v20 = *(_QWORD *)(a4 + 88);\n    if ( a5 + 1 >= v20 )\n      goto LABEL_6;\n    v21 = *(_BYTE *)(v18 + a5 + 1);\n    if ( v19 <= 0xDFu )\n    {\n      v10 = 2;\n      if ( (unsigned __int8)(v21 + -128) <= 0x3Fu )\n        return (unsigned int)v10;\n      goto LABEL_6;\n    }\n    if ( v19 > 0xEFu )\n    {\n      if ( v19 > 0xF7u )\n      {\n        if ( v19 > 0xFBu )\n        {\n          if ( v19 > 0xFDu || v19 == -4 && v21 <= 0x83u )\n            goto LABEL_6;\n          v22 = 6LL;\n          v10 = 6;\n        }\n        else\n        {\n          if ( v19 == -8 && v21 <= 0x87u )\n            goto LABEL_6;\n          v22 = 5LL;\n          v10 = 5;\n        }\n      }\n      else\n      {\n        if ( v19 == -16 && v21 <= 0x8Fu )\n          goto LABEL_6;\n        v22 = 4LL;\n        v10 = 4;\n      }\n    }\n    else\n    {\n      if ( v19 == -32 && v21 <= 0x9Fu )\n        goto LABEL_6;\n      v22 = 3LL;\n      v10 = 3;\n    }\n    if ( v20 >= a5 + v22 )\n    {\n      v23 = (_BYTE *)(v18 + a5 + 1);\n      v24 = (_BYTE *)(v22 + a5 + v18);\n      while ( (unsigned __int8)(*v23 + -128) <= 0x3Fu )\n      {\n        if ( v24 == ++v23 )\n          return (unsigned int)v10;\n      }\n    }\n    goto LABEL_6;\n  }\n  if ( *(_DWORD *)(a4 + 144) == 1 )\nLABEL_6:\n    return 0;\n  v5 = sub_40C840(a4, a5);\n  v10 = v5;\n  if ( v9 != 5 )\n  {\n    if ( v9 != 6 || v5 <= 1 )\n      goto LABEL_6;\n    v12 = *(_QWORD *)v8;\n    v13 = *(_QWORD *)(*(_QWORD *)v8 + 64LL);\n    v14 = *(_QWORD *)(*(_QWORD *)v8 + 40LL);\n    if ( v13 || *(_QWORD *)(v12 + 72) | v14 )\n    {\n      v15 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 4 * v6);\n      if ( v14 > 0 )\n      {\n        if ( v15 == **(_DWORD **)v12 )\n          goto LABEL_25;\n        v16 = 0LL;\n        while ( v14 != ++v16 )\n        {\n          if ( v15 == *(_DWORD *)(*(_QWORD *)v12 + 4 * v16) )\n            goto LABEL_25;\n        }\n      }\n      if ( *(_QWORD *)(v12 + 72) > 0LL )\n      {\n        v17 = 0LL;\n        while ( !iswctype(v15, *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * v17)) )\n        {\n          if ( ++v17 >= *(_QWORD *)(v12 + 72) )\n          {\n            v13 = *(_QWORD *)(v12 + 64);\n            goto LABEL_40;\n          }\n        }\nLABEL_25:\n        if ( !(*(_BYTE *)(v12 + 32) & 1) )\n          return (unsigned int)v10;\n        goto LABEL_6;\n      }\nLABEL_40:\n      if ( v13 > 0 )\n      {\n        v25 = 0LL;\n        while ( (signed int)v15 < *(_DWORD *)(*(_QWORD *)(v12 + 8) + 4 * v25)\n             || (signed int)v15 > *(_DWORD *)(*(_QWORD *)(v12 + 16) + 4 * v25) )\n        {\n          if ( ++v25 == v13 )\n            goto LABEL_45;\n        }\n        goto LABEL_25;\n      }\n    }\nLABEL_45:\n    if ( *(_BYTE *)(v12 + 32) & 1 )\n      return (unsigned int)v10;\n    goto LABEL_6;\n  }\n  if ( v5 <= 1\n    || !(*a2 & 0x40) && *(_BYTE *)(*(_QWORD *)(v7 + 8) + v6) == 10\n    || *a2 & 0x80 && !*(_BYTE *)(*(_QWORD *)(v7 + 8) + v6) )\n  {\n    goto LABEL_6;\n  }\n  return (unsigned int)v10;\n}\n", 
            "funcStartAddr": "0x411010L", 
            "funcEndAddr": "0x411294L", 
            "funcName": "sub_411010"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4112A0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned int a7)\n{\n  __int64 v7; // r13@1\n  __int64 v8; // r12@1\n  __int64 v9; // rbp@1\n  __int64 v10; // r15@1\n  __int64 v11; // rax@1\n  __int64 v12; // rax@1\n  int v13; // edx@2\n  __int64 v14; // rbx@2\n  __int64 v15; // r14@2\n  __int64 v16; // rcx@2\n  __int64 v17; // r15@4\n  __int64 v18; // rax@9\n  __int64 v19; // r14@9\n  __int64 v20; // rsi@10\n  bool v21; // zf@13\n  bool v22; // sf@13\n  __int64 v23; // rbp@13\n  __int64 v24; // r14@14\n  __int64 v25; // rax@19\n  __int64 v26; // r13@19\n  signed __int64 v27; // rbx@19\n  __int64 v28; // rsi@19\n  signed int v29; // eax@20\n  __int64 v30; // rbx@21\n  __int64 v31; // rdx@21\n  __int64 v32; // rsi@21\n  __int64 v33; // ST40_8@22\n  int v34; // eax@22\n  __int64 *v35; // r13@24\n  unsigned int v36; // eax@30\n  __int64 v37; // rax@34\n  signed __int64 result; // rax@35\n  __int128 *v39; // r13@43\n  void *v40; // rdi@49\n  void *v41; // rax@54\n  signed __int64 v42; // rbx@57\n  signed __int64 v43; // r14@58\n  char *v44; // rax@59\n  unsigned int v45; // [sp+0h] [bp-F8h]@3\n  __int64 v46; // [sp+0h] [bp-F8h]@10\n  signed __int64 v47; // [sp+8h] [bp-F0h]@16\n  signed __int64 v48; // [sp+10h] [bp-E8h]@9\n  signed __int64 v49; // [sp+18h] [bp-E0h]@10\n  __int64 v50; // [sp+20h] [bp-D8h]@1\n  __int64 v51; // [sp+30h] [bp-C8h]@1\n  __int64 v52; // [sp+38h] [bp-C0h]@1\n  __int64 v53; // [sp+48h] [bp-B0h]@14\n  __int64 *v54; // [sp+50h] [bp-A8h]@1\n  __int64 v55; // [sp+58h] [bp-A0h]@2\n  __int64 v56; // [sp+60h] [bp-98h]@2\n  __int64 v57; // [sp+68h] [bp-90h]@1\n  unsigned int v58; // [sp+78h] [bp-80h]@1\n  unsigned int v59; // [sp+7Ch] [bp-7Ch]@13\n  __int128 v60; // [sp+80h] [bp-78h]@6\n  void *v61; // [sp+90h] [bp-68h]@6\n  __int128 v62; // [sp+A0h] [bp-58h]@13\n  void *ptr; // [sp+B0h] [bp-48h]@13\n\n  v7 = a3;\n  v8 = a1;\n  v9 = a4;\n  v10 = *(_QWORD *)(a2 + 8);\n  v54 = (__int64 *)a2;\n  v57 = a5;\n  v51 = a6;\n  v50 = *(_QWORD *)(a1 + 152);\n  v52 = *(_QWORD *)(**(_QWORD **)(a1 + 152) + 16 * a3);\n  v11 = *(_DWORD *)(a1 + 224);\n  v58 = 0;\n  v12 = a6 + v11;\n  if ( v12 >= v10 )\n  {\n    v42 = v12 + 1;\n    if ( 0x7FFFFFFFFFFFFFFFLL - v10 < v12 + 1 )\n      return 12LL;\n    v43 = v10 + v42;\n    if ( (unsigned __int64)(v10 + v42) > 0x1FFFFFFFFFFFFFFFLL )\n      return 12LL;\n    v44 = (char *)realloc(*(void **)(a2 + 16), 8 * v43);\n    if ( !v44 )\n      return 12LL;\n    *(_QWORD *)(a2 + 16) = v44;\n    *(_QWORD *)(a2 + 8) = v43;\n    memset(&v44[8 * v10], 0, 8 * v42);\n  }\n  v13 = *(_DWORD *)(a1 + 160);\n  v14 = *(_QWORD *)a2;\n  v15 = *(_QWORD *)(a2 + 16);\n  v55 = *(_QWORD *)(a1 + 184);\n  v16 = *(_QWORD *)(a1 + 72);\n  *(_QWORD *)(a1 + 184) = v15;\n  v56 = v16;\n  if ( v14 )\n  {\n    *(_QWORD *)(a1 + 72) = v14;\n    v45 = sub_40E5C0(a1, v14 - 1, v13);\n    if ( v14 != v9 )\n    {\n      v17 = *(_QWORD *)(v15 + 8 * v14);\n      if ( !v17 || !(*(_BYTE *)(v17 + 104) & 0x40) )\n      {\n        v61 = 0LL;\n        v60 = 0LL;\n        goto LABEL_7;\n      }\n      v39 = &v60;\n      result = sub_40D930((__int64)&v60, v17 + 8);\n      v58 = result;\n      if ( (_DWORD)result )\n        return result;\n      if ( !(*(_BYTE *)(v17 + 104) & 0x40) )\n        goto LABEL_7;\n      goto LABEL_45;\n    }\n  }\n  else\n  {\n    *(_QWORD *)(a1 + 72) = v9;\n    v45 = sub_40E5C0(a1, v9 - 1, v13);\n  }\n  *(_QWORD *)&v60 = 1LL;\n  *((_QWORD *)&v60 + 1) = 1LL;\n  v41 = malloc(8uLL);\n  v61 = v41;\n  if ( !v41 )\n    return 12LL;\n  *(_QWORD *)v41 = v7;\n  v14 = v9;\n  v39 = &v60;\n  v58 = sub_40D200(v50, (__int64)&v60, v52, a7);\n  if ( v58 )\n  {\nLABEL_41:\n    free(v61);\n    return v58;\n  }\nLABEL_45:\n  if ( *((_QWORD *)&v60 + 1) )\n  {\n    v58 = sub_40E0E0(a1, (__int64)v39, v14, v52, a7);\n    if ( v58 )\n      goto LABEL_41;\n  }\n  v17 = sub_40DB40(&v58, v50, (__int64)v39, v45);\n  if ( !v17 )\n  {\n    if ( v58 )\n      goto LABEL_41;\n  }\n  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v14) = v17;\nLABEL_7:\n  if ( v14 < v51 && *(_DWORD *)(a1 + 224) >= 0 )\n  {\n    v48 = 0LL;\n    v18 = *(_QWORD *)(a1 + 184);\n    v19 = v14 + 1;\n    while ( 1 )\n    {\n      v20 = *(_QWORD *)(v18 + 8 * v19);\n      *((_QWORD *)&v60 + 1) = 0LL;\n      v46 = v19 - 1;\n      v49 = 8 * v19;\n      if ( v20 )\n      {\n        v58 = sub_40CDD0((__int64)&v60, v20 + 8);\n        if ( v58 )\n          goto LABEL_41;\n        if ( !v17 )\n          goto LABEL_27;\n      }\n      else if ( !v17 )\n      {\n        v14 = v19;\n        goto LABEL_30;\n      }\n      v21 = *(_QWORD *)(v17 + 40) == 0LL;\n      v22 = *(_QWORD *)(v17 + 40) < 0;\n      v23 = *(_QWORD *)(v8 + 152);\n      v59 = 0;\n      v62 = 0LL;\n      ptr = 0LL;\n      if ( !v22 && !v21 )\n      {\n        v53 = v19;\n        v24 = 0LL;\n        while ( 1 )\n        {\n          v25 = *(_QWORD *)(v17 + 48);\n          v26 = *(_QWORD *)(v25 + 8 * v24);\n          v27 = 16LL * *(_QWORD *)(v25 + 8 * v24);\n          v28 = *(_QWORD *)v23 + v27;\n          if ( *(_BYTE *)(v28 + 10) & 0x10 )\n          {\n            v29 = sub_411010(*(_QWORD *)v23, (_QWORD *)(v23 + 216), *(_QWORD *)(v25 + 8 * v24), v8, v46);\n            if ( v29 > 1 )\n            {\n              v47 = 8 * v26;\n              v30 = v29 + v46;\n              v31 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8 * v26);\n              v32 = *(_QWORD *)(*(_QWORD *)(v8 + 184) + 8 * v30);\n              *((_QWORD *)&v62 + 1) = 0LL;\n              if ( v32 )\n              {\n                v33 = v31;\n                v34 = sub_40CDD0((__int64)&v62, v32 + 8);\n                v31 = v33;\n                v59 = v34;\n                if ( v34 )\n                  goto LABEL_68;\n              }\n              if ( !(unsigned __int8)sub_40B280((__int64)&v62, v31) )\n              {\nLABEL_40:\n                free(ptr);\n                v58 = 12;\n                goto LABEL_41;\n              }\n              v35 = (__int64 *)(*(_QWORD *)(v8 + 184) + 8 * v30);\n              *v35 = sub_40DE40(&v59, v23, (__int64)&v62);\n              if ( !*(_QWORD *)(*(_QWORD *)(v8 + 184) + 8 * v30) )\n              {\n                if ( v59 )\n                {\nLABEL_68:\n                  v19 = v53;\n                  free(ptr);\n                  v58 = v59;\n                  if ( v59 )\n                    goto LABEL_41;\n                  goto LABEL_27;\n                }\n              }\n              goto LABEL_17;\n            }\n            if ( v29 )\n            {\nLABEL_16:\n              v47 = 8 * v26;\nLABEL_17:\n              if ( !(unsigned __int8)sub_40B280((__int64)&v60, *(_QWORD *)(*(_QWORD *)(v23 + 24) + v47)) )\n                goto LABEL_40;\n              goto LABEL_18;\n            }\n            v28 = *(_QWORD *)v23 + v27;\n          }\n          if ( (unsigned __int8)sub_40E6B0(v8, v28, v46) )\n            goto LABEL_16;\nLABEL_18:\n          if ( ++v24 >= *(_QWORD *)(v17 + 40) )\n          {\n            v19 = v53;\n            v40 = ptr;\n            goto LABEL_50;\n          }\n        }\n      }\n      v40 = 0LL;\nLABEL_50:\n      free(v40);\n      v58 = 0;\nLABEL_27:\n      v14 = v19;\n      if ( *((_QWORD *)&v60 + 1) )\n      {\n        v58 = sub_40D200(v50, (__int64)&v60, v52, a7);\n        if ( v58 )\n          goto LABEL_41;\n        v58 = sub_40E0E0(v8, (__int64)&v60, v19, v52, a7);\n        if ( v58 )\n          goto LABEL_41;\n      }\nLABEL_30:\n      v36 = sub_40E5C0(v8, v46, *(_DWORD *)(v8 + 160));\n      v17 = sub_40DB40(&v58, v50, (__int64)&v60, v36);\n      if ( v17 )\n      {\n        v18 = *(_QWORD *)(v8 + 184);\n        v48 = 0LL;\n        *(_QWORD *)(v18 + v49) = v17;\n      }\n      else\n      {\n        if ( v58 )\n          goto LABEL_41;\n        v18 = *(_QWORD *)(v8 + 184);\n        ++v48;\n        *(_QWORD *)(v18 + v49) = 0LL;\n      }\n      if ( v51 > v19 )\n      {\n        ++v19;\n        if ( *(_DWORD *)(v8 + 224) >= v48 )\n          continue;\n      }\n      break;\n    }\n  }\n  free(v61);\n  v37 = *(_QWORD *)(*(_QWORD *)(v8 + 184) + 8 * v51);\n  if ( v37 )\n  {\n    *v54 = v14;\n    *(_QWORD *)(v8 + 184) = v55;\n    *(_QWORD *)(v8 + 72) = v56;\n    result = sub_40C890(*(_QWORD *)(v37 + 16), (__int64 *)(v37 + 24), v57) == 0;\n  }\n  else\n  {\n    *v54 = v14;\n    *(_QWORD *)(v8 + 184) = v55;\n    *(_QWORD *)(v8 + 72) = v56;\n    result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4112a0L", 
            "funcEndAddr": "0x4119bfL", 
            "funcName": "sub_4112A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4119C0(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, char a5)\n{\n  __int64 v5; // r13@1\n  __int64 v6; // r12@1\n  __int64 v7; // rax@1\n  __int64 v8; // rbx@3\n  void *v9; // rsp@4\n  __int64 v10; // rcx@5\n  __int64 v11; // r14@9\n  __int64 v12; // rdi@9\n  __int64 v13; // rsi@9\n  char v14; // al@9\n  __int64 v15; // rcx@12\n  __int64 v16; // rdx@14\n  __int64 v17; // rax@17\n  __int64 v18; // rax@22\n  __int64 v19; // r15@23\n  signed __int64 v20; // r9@23\n  signed __int64 v21; // rsi@23\n  int v22; // edx@23\n  signed __int64 v23; // rdx@24\n  signed __int64 v24; // rdx@25\n  __int64 v25; // rax@26\n  signed __int64 v26; // r15@26\n  __int64 v27; // r11@28\n  __int64 v28; // rax@28\n  __int64 v29; // r15@28\n  signed __int64 v30; // r9@28\n  signed __int64 v31; // r12@28\n  __int64 v32; // rbx@28\n  __int64 *v33; // r11@28\n  signed __int64 v34; // r14@29\n  __int64 v35; // r9@29\n  __int64 v36; // r10@29\n  __int64 v37; // rax@36\n  __int64 *v38; // rdi@38\n  signed __int64 result; // rax@40\n  signed __int64 v40; // rdx@42\n  signed __int64 v41; // rdx@43\n  signed __int64 v42; // rax@43\n  int v43; // eax@47\n  size_t v44; // rcx@47\n  signed __int64 v45; // rax@49\n  __int64 v46; // rdi@49\n  __int64 v47; // rax@53\n  __int64 v48; // r15@53\n  int v49; // eax@53\n  __int64 v50; // rdx@55\n  __int64 *v51; // rcx@56\n  signed __int64 v52; // r15@57\n  __int64 v53; // rdx@57\n  signed __int64 v54; // rax@57\n  char *v55; // rax@58\n  signed __int64 v56; // r15@59\n  size_t v57; // r14@59\n  void *v58; // rax@59\n  __int64 v59; // rax@67\n  __int64 v60; // rdx@67\n  signed __int64 v61; // rax@77\n  __int64 v62; // rax@77\n  __int64 *v63; // rcx@86\n  __int64 v64; // [sp+8h] [bp-C8h]@77\n  __int64 v65; // [sp+8h] [bp-C8h]@78\n  signed __int64 v66; // [sp+8h] [bp-C8h]@83\n  __int64 v67; // [sp+8h] [bp-C8h]@84\n  char v68; // [sp+17h] [bp-B9h]@4\n  __int64 *v69; // [sp+18h] [bp-B8h]@5\n  void *dest; // [sp+20h] [bp-B0h]@4\n  size_t n; // [sp+28h] [bp-A8h]@3\n  __int64 v72; // [sp+30h] [bp-A0h]@13\n  __int64 v73; // [sp+38h] [bp-98h]@1\n  __int64 v74; // [sp+40h] [bp-90h]@1\n  __int64 *v75; // [sp+48h] [bp-88h]@2\n  __int64 v76; // [sp+58h] [bp-78h]@5\n  __int128 v77; // [sp+60h] [bp-70h]@3\n  void *ptr; // [sp+70h] [bp-60h]@3\n  __int64 v79; // [sp+80h] [bp-50h]@1\n  __int64 v80; // [sp+88h] [bp-48h]@1\n  void *v81; // [sp+90h] [bp-40h]@1\n\n  v5 = a4;\n  v6 = a2;\n  v7 = *a1;\n  v73 = a3;\n  v79 = 0LL;\n  v74 = v7;\n  v80 = 2LL;\n  v81 = 0LL;\n  if ( a5 )\n  {\n    v75 = &v79;\n    v81 = malloc(0x60uLL);\n    if ( !v81 )\n      return 12LL;\n  }\n  else\n  {\n    v75 = 0LL;\n  }\n  ptr = 0LL;\n  v77 = 0LL;\n  v8 = *(_QWORD *)(v74 + 144);\n  n = 16 * v73;\n  if ( (unsigned __int64)(16 * v73) <= 0xFBF )\n  {\n    v68 = 0;\n    v9 = alloca(16 * v73 + 16);\n    dest = (void *)(((unsigned __int64)&v64 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    goto LABEL_5;\n  }\n  v68 = 1;\n  dest = malloc(n);\n  if ( !dest )\n  {\n    if ( v75 )\n      sub_40FFF0((__int64)v75);\n    return 12LL;\n  }\nLABEL_5:\n  memcpy(dest, (const void *)v5, n);\n  v10 = *(_QWORD *)v5;\n  v76 = *(_QWORD *)v5;\n  v69 = (__int64 *)&ptr;\nLABEL_22:\n  v18 = *(_QWORD *)(v5 + 8);\n  if ( v18 < v10 )\n  {\nLABEL_37:\n    free(ptr);\n    if ( v68 )\n    {\n      free(dest);\n      v38 = v75;\n      if ( !v75 )\n        return 0LL;\n    }\n    else\n    {\n      v38 = v75;\n      if ( !v75 )\n        return 0LL;\n    }\n    sub_40FFF0((__int64)v38);\n    return 0LL;\n  }\n  while ( 1 )\n  {\n    v19 = v8;\n    v20 = 16 * v8;\n    v21 = 16 * v8 + *(_QWORD *)v74;\n    v22 = *(_BYTE *)(v21 + 8);\n    if ( v22 == 8 )\n    {\n      v23 = *(_QWORD *)v21 + 1LL;\n      if ( v73 > v23 )\n      {\n        v24 = v5 + 16 * v23;\n        *(_QWORD *)(v24 + 8) = -1LL;\n        v18 = *(_QWORD *)(v5 + 8);\n        *(_QWORD *)v24 = v10;\n      }\n    }\n    else if ( v22 == 9 )\n    {\n      v40 = *(_QWORD *)v21 + 1LL;\n      if ( v73 > v40 )\n      {\n        v41 = 16 * v40;\n        v42 = v5 + v41;\n        if ( *(_QWORD *)(v5 + v41) < v10 )\n        {\n          *(_QWORD *)(v42 + 8) = v10;\n          v66 = 16 * v8;\n          v72 = v10;\n          memcpy(dest, (const void *)v5, n);\n          v18 = *(_QWORD *)(v5 + 8);\n          v10 = v72;\n          v20 = v66;\n        }\n        else if ( *(_BYTE *)(v21 + 10) & 8 && *(_QWORD *)((char *)dest + v41) != -1LL )\n        {\n          v67 = v10;\n          v72 = 16 * v8;\n          memcpy((void *)v5, dest, n);\n          v18 = *(_QWORD *)(v5 + 8);\n          v20 = v72;\n          v10 = v67;\n        }\n        else\n        {\n          *(_QWORD *)(v42 + 8) = v10;\n          v18 = *(_QWORD *)(v5 + 8);\n        }\n      }\n    }\n    if ( v10 == v18 && *(_QWORD *)(v6 + 176) == v8 )\n    {\n      if ( !v75 )\n      {\n        free(ptr);\n        if ( v68 )\n        {\n          free(dest);\n          return 0LL;\n        }\n        return 0LL;\n      }\n      if ( !v73 )\n        goto LABEL_71;\n      v59 = v5;\n      v60 = 0LL;\n      while ( *(_QWORD *)v59 < 0LL || *(_QWORD *)(v59 + 8) != -1LL )\n      {\n        ++v60;\n        v59 += 16LL;\n        if ( v73 == v60 )\n          goto LABEL_71;\n      }\n      if ( v73 == v60 )\n      {\nLABEL_71:\n        free(ptr);\n        if ( v68 )\n          free(dest);\n        sub_40FFF0((__int64)v75);\n        return 0LL;\n      }\n      v8 = sub_410040(v75, v75 + 2, &v76, v73, (void *)v5, (__int64)&v77);\n      v19 = v8;\n      v20 = 16 * v8;\n    }\n    v11 = *(_QWORD *)(v6 + 152);\n    v12 = *(_QWORD *)v11;\n    v13 = *(_QWORD *)v11 + v20;\n    v14 = *(_BYTE *)(v13 + 8);\n    if ( v14 & 8 )\n      break;\n    if ( *(_BYTE *)(v13 + 10) & 0x10 )\n    {\n      v72 = v20;\n      v43 = sub_411010(v12, (_QWORD *)(v11 + 216), v8, v6, v76);\n      v44 = v43;\n      if ( v43 )\n        goto LABEL_64;\n      v15 = v76;\n      v13 = v72 + *(_QWORD *)v11;\n    }\n    else if ( v14 == 4 )\n    {\n      v45 = v5 + 16 * (*(_QWORD *)v13 + 1LL);\n      v46 = *(_QWORD *)v45;\n      v44 = *(_QWORD *)(v45 + 8) - *(_QWORD *)v45;\n      if ( v75 )\n      {\n        if ( v46 == -1 || *(_QWORD *)(v45 + 8) == -1LL )\n          goto LABEL_36;\n        if ( *(_QWORD *)(v45 + 8) != *(_QWORD *)v45 )\n        {\n          v47 = *(_QWORD *)(v6 + 8);\n          v48 = v76;\n          v72 = v44;\n          v49 = memcmp((const void *)(v47 + v46), (const void *)(v47 + v76), v44);\n          v44 = v72;\n          if ( v49 )\n            goto LABEL_36;\n          goto LABEL_54;\n        }\n      }\n      else if ( *(_QWORD *)(v45 + 8) != *(_QWORD *)v45 )\n      {\nLABEL_64:\n        v48 = v76;\nLABEL_54:\n        v16 = v48 + v44;\n        v8 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * v8);\n        goto LABEL_15;\n      }\n      v72 = v20;\n      if ( !(unsigned __int8)sub_40B280((__int64)&v77, v8) )\n      {\nLABEL_80:\n        free(ptr);\n        if ( v68 )\nLABEL_93:\n          free(dest);\n        if ( v75 )\n          goto LABEL_62;\n        return 12LL;\n      }\n      v61 = *(_QWORD *)(v11 + 40) + 24 * v8;\n      v64 = v76;\n      v8 = **(_QWORD **)(v61 + 16);\n      v62 = *(_QWORD *)(*(_QWORD *)(v6 + 184) + 8 * v76);\n      if ( sub_40C890(*(_QWORD *)(v62 + 16), (__int64 *)(v62 + 24), v8) )\n        goto LABEL_20;\n      v15 = v65;\n      v13 = v72 + *(_QWORD *)v11;\n    }\n    else\n    {\n      v15 = v76;\n    }\n    v72 = v15;\n    if ( !(unsigned __int8)sub_40E6B0(v6, v13, v15) )\n      goto LABEL_35;\n    v16 = v72 + 1;\n    v8 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * v19);\nLABEL_15:\n    v76 = v16;\n    if ( !v75\n      || v16 <= *(_QWORD *)(v6 + 168)\n      && (v17 = *(_QWORD *)(*(_QWORD *)(v6 + 184) + 8 * v16)) != 0\n      && sub_40C890(*(_QWORD *)(v17 + 16), (__int64 *)(v17 + 24), v8) )\n    {\n      *((_QWORD *)&v77 + 1) = 0LL;\nLABEL_20:\n      if ( v8 < 0 )\n      {\nLABEL_34:\n        if ( v8 == -2 )\n          goto LABEL_80;\n        goto LABEL_35;\n      }\nLABEL_21:\n      v10 = v76;\n      goto LABEL_22;\n    }\nLABEL_36:\n    v37 = sub_410040(v75, v75 + 2, &v76, v73, (void *)v5, (__int64)&v77);\n    v10 = v76;\n    v8 = v37;\n    v18 = *(_QWORD *)(v5 + 8);\n    if ( v18 < v76 )\n      goto LABEL_37;\n  }\n  v25 = *(_QWORD *)(v11 + 40);\n  v72 = *(_QWORD *)(*(_QWORD *)(v6 + 184) + 8 * v76);\n  v26 = v25 + 24 * v8;\n  if ( !(unsigned __int8)sub_40B280((__int64)&v77, v8) )\n    goto LABEL_80;\n  if ( *(_QWORD *)(v26 + 8) <= 0LL )\n  {\nLABEL_35:\n    if ( !v75 )\n    {\n      free(ptr);\n      result = 1LL;\n      if ( v68 )\n      {\n        LODWORD(v75) = 1;\n        free(dest);\n        result = (unsigned int)v75;\n      }\n      return result;\n    }\n    goto LABEL_36;\n  }\n  v27 = *(_QWORD *)(v72 + 16);\n  v28 = v72 + 24;\n  v29 = *(_QWORD *)(v26 + 16);\n  v72 = v6;\n  v30 = 0LL;\n  v31 = -1LL;\n  v32 = v27;\n  v33 = (__int64 *)v28;\n  while ( 2 )\n  {\n    v34 = *(_QWORD *)(v29 + 8 * v30);\n    if ( !sub_40C890(v32, v33, *(_QWORD *)(v29 + 8 * v30)) )\n    {\nLABEL_32:\n      v30 = v35 + 1;\n      if ( v36 == v30 )\n      {\n        v8 = v31;\n        v6 = v72;\n        if ( v8 >= 0 )\n          goto LABEL_21;\n        goto LABEL_34;\n      }\n      continue;\n    }\n    break;\n  }\n  if ( v31 == -1 )\n  {\n    v31 = v34;\n    goto LABEL_32;\n  }\n  v8 = v31;\n  v50 = v31;\n  v6 = v72;\n  if ( sub_40C890(*((__int64 *)&v77 + 1), v69, v50) )\n  {\n    v8 = v34;\n    goto LABEL_20;\n  }\n  v51 = v75;\n  if ( !v75 )\n    goto LABEL_20;\n  v52 = *v75;\n  v53 = v76;\n  v54 = *v75 + 1;\n  *v75 = v54;\n  if ( v54 != v51[1] )\n  {\n    v55 = (char *)v51[2];\n    goto LABEL_59;\n  }\n  v72 = v53;\n  v55 = (char *)realloc((void *)v75[2], 96 * v54);\n  if ( v55 )\n  {\n    v63 = v75;\n    v53 = v72;\n    v63[1] *= 2LL;\n    v63[2] = (__int64)v55;\nLABEL_59:\n    v56 = (signed __int64)&v55[48 * v52];\n    *(_QWORD *)(v56 + 8) = v34;\n    v57 = n;\n    *(_QWORD *)v56 = v53;\n    v58 = malloc(v57);\n    *(_QWORD *)(v56 + 16) = v58;\n    if ( v58 )\n    {\n      memcpy(v58, (const void *)v5, v57);\n      if ( !(unsigned int)sub_40D930(v56 + 24, (__int64)&v77) )\n        goto LABEL_20;\n    }\n  }\n  free(ptr);\n  if ( v68 )\n    goto LABEL_93;\nLABEL_62:\n  sub_40FFF0((__int64)v75);\n  return 12LL;\n}\n", 
            "funcStartAddr": "0x4119c0L", 
            "funcEndAddr": "0x412283L", 
            "funcName": "sub_4119C0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_412290(__int64 a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r14@1\n  __int64 v6; // r13@1\n  __int64 *v7; // r12@1\n  __int64 v8; // rbp@1\n  __int64 v9; // rbx@1\n  signed __int64 result; // rax@1\n  __int64 v11; // r15@3\n  __int64 v12; // rax@3\n  __int64 v13; // rdx@3\n  __int64 v14; // rcx@3\n  void *v15; // rdi@3\n  __int64 v16; // rsi@3\n  signed __int64 v17; // rdx@4\n  signed __int64 v18; // r8@5\n  char *v19; // rdi@7\n  char *v20; // rax@10\n  __int64 v21; // rdx@11\n  __int64 v22; // rsi@11\n  __int64 v23; // [sp+10h] [bp-40h]@10\n\n  v5 = a3;\n  v6 = a4;\n  v7 = a2;\n  v8 = a5;\n  v9 = a1;\n  result = sub_4112A0(a1, a3 + 16, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), a4, a5, 8u);\n  if ( !(_DWORD)result )\n  {\n    v11 = *(_QWORD *)(v5 + 8);\n    v12 = *(_QWORD *)(a1 + 200);\n    v13 = *(_QWORD *)(a1 + 208);\n    v14 = *a2;\n    v15 = *(void **)(a1 + 216);\n    v16 = *(_QWORD *)(v5 + 8);\n    if ( v12 >= v13 )\n    {\n      v23 = *v7;\n      v20 = (char *)realloc(v15, 80 * v13);\n      if ( !v20 )\n      {\n        free(*(void **)(v9 + 216));\n        return 12LL;\n      }\n      v21 = *(_QWORD *)(v9 + 208);\n      v22 = *(_QWORD *)(v9 + 200);\n      *(_QWORD *)(v9 + 216) = v20;\n      memset(&v20[40 * v22], 0, 40 * v21);\n      *(_QWORD *)(v9 + 208) *= 2LL;\n      v12 = *(_QWORD *)(v9 + 200);\n      v15 = *(void **)(v9 + 216);\n      v16 = *(_QWORD *)(v5 + 8);\n      v14 = v23;\n    }\n    v17 = 40 * v12;\n    if ( v12 > 0 )\n    {\n      v18 = (signed __int64)v15 + v17 - 40;\n      if ( v8 == *(_QWORD *)(v18 + 8) )\n        *(_BYTE *)(v18 + 32) = 1;\n    }\n    v19 = (char *)v15 + v17;\n    *(_QWORD *)v19 = v6;\n    *((_QWORD *)v19 + 1) = v8;\n    *((_WORD *)v19 + 17) = -(v11 == v14);\n    *((_QWORD *)v19 + 2) = v14;\n    *((_QWORD *)v19 + 3) = v11;\n    *(_QWORD *)(v9 + 200) = v12 + 1;\n    v19[32] = 0;\n    if ( *(_DWORD *)(v9 + 224) < v11 - v14 )\n      *(_DWORD *)(v9 + 224) = v11 - v14;\n    result = sub_40BE60(v9, v8 + v16 - *v7);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x412290L", 
            "funcEndAddr": "0x412426L", 
            "funcName": "sub_412290"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_412430(__int64 a1, _QWORD *a2, _QWORD *a3)\n{\n  __int64 v3; // r14@1\n  __int64 v4; // r15@1\n  __int64 v5; // r13@10\n  signed __int64 v6; // rbp@10\n  signed __int64 v7; // rax@10\n  int v8; // ebx@11\n  char v9; // al@12\n  signed __int64 v10; // rcx@16\n  signed __int64 i; // rax@16\n  __int64 v12; // r8@18\n  signed __int64 v13; // rdx@18\n  signed __int64 v14; // rax@24\n  signed __int64 v15; // rdi@19\n  __int64 v16; // rdx@31\n  __int64 v17; // rbx@33\n  __int64 v18; // r13@36\n  __int64 v19; // rax@37\n  __int64 v20; // r14@37\n  __int64 v21; // rbx@37\n  __int64 v22; // rbp@39\n  unsigned int v23; // ecx@39\n  __int64 v24; // rax@39\n  __int64 *v25; // r11@39\n  __int64 v26; // rax@39\n  __int64 v27; // rdx@39\n  unsigned int v28; // ST38_4@42\n  int v29; // eax@42\n  unsigned int v30; // ecx@42\n  __int64 *v31; // ST38_8@43\n  __int64 v32; // rax@43\n  void *v33; // rdi@43\n  __int64 v34; // rdx@43\n  signed __int64 v35; // rax@47\n  __int64 v36; // rbp@49\n  __int64 v37; // rax@49\n  __int64 v38; // rdx@49\n  __int64 *v39; // ST38_8@51\n  __int64 v40; // rax@51\n  int result; // eax@52\n  signed __int64 v42; // r12@54\n  __int64 v43; // r10@54\n  signed __int64 v44; // rcx@55\n  __int64 v45; // rbp@55\n  __int64 v46; // r12@55\n  __int64 v47; // r8@55\n  __int64 v48; // r9@57\n  signed __int64 v49; // r13@57\n  signed __int64 v50; // rdx@57\n  signed __int64 v51; // r15@57\n  __int64 v52; // ST40_8@59\n  signed __int64 v53; // ST38_8@59\n  __int64 v54; // ST30_8@59\n  int v55; // eax@59\n  __int64 v56; // r15@74\n  __int64 v57; // rax@79\n  __int64 v58; // rcx@80\n  __int64 v59; // rdi@81\n  __int64 v60; // rdx@81\n  __int64 v61; // rbp@83\n  signed __int64 v62; // rax@83\n  __int64 v63; // rsi@86\n  __int64 v64; // rcx@86\n  __int64 v65; // rax@89\n  _QWORD *v66; // rax@90\n  __int64 v67; // rdx@91\n  __int64 v68; // ST38_8@94\n  void *v69; // rax@94\n  void *v70; // rax@102\n  __int64 v71; // [sp+8h] [bp-E0h]@1\n  __int64 v72; // [sp+10h] [bp-D8h]@32\n  __int64 v73; // [sp+10h] [bp-D8h]@39\n  __int64 v74; // [sp+18h] [bp-D0h]@32\n  __int64 v75; // [sp+18h] [bp-D0h]@38\n  __int64 v76; // [sp+20h] [bp-C8h]@32\n  __int64 v77; // [sp+20h] [bp-C8h]@49\n  __int64 v78; // [sp+20h] [bp-C8h]@66\n  signed __int64 v79; // [sp+28h] [bp-C0h]@66\n  signed __int64 v80; // [sp+28h] [bp-C0h]@102\n  signed __int64 v81; // [sp+30h] [bp-B8h]@67\n  __int64 v82; // [sp+38h] [bp-B0h]@1\n  __int64 v83; // [sp+40h] [bp-A8h]@32\n  signed __int64 v84; // [sp+40h] [bp-A8h]@37\n  _QWORD *v85; // [sp+48h] [bp-A0h]@1\n  _QWORD *v86; // [sp+50h] [bp-98h]@1\n  signed __int64 v87; // [sp+58h] [bp-90h]@1\n  __int64 v88; // [sp+60h] [bp-88h]@31\n  __int64 *v89; // [sp+68h] [bp-80h]@31\n  __int64 v90; // [sp+70h] [bp-78h]@32\n  __int64 v91; // [sp+78h] [bp-70h]@67\n  int v92; // [sp+8Ch] [bp-5Ch]@29\n  char v93; // [sp+90h] [bp-58h]@42\n  void *ptr; // [sp+A0h] [bp-48h]@43\n\n  v3 = a1;\n  v4 = *(_QWORD *)(a1 + 72);\n  v86 = a2;\n  v85 = a3;\n  v82 = *(_QWORD *)(a1 + 152);\n  v87 = 8 * v4;\n  v71 = 0LL;\n  if ( *a2 <= 0LL )\n    return 0;\n  while ( 1 )\n  {\n    v5 = *(_QWORD *)(*v85 + 8 * v71);\n    v6 = 16LL * *(_QWORD *)(*v85 + 8 * v71);\n    v7 = v6 + *(_QWORD *)v82;\n    if ( *(_BYTE *)(v7 + 8) == 4 )\n      break;\nLABEL_9:\n    if ( ++v71 >= *v86 )\n      return 0;\n  }\n  v8 = *(_DWORD *)(v7 + 8);\n  if ( v8 & 0x3FF00 )\n  {\n    v9 = sub_40E5C0(v3, v4, *(_DWORD *)(v3 + 160));\n    if ( BYTE1(v8) & 4 )\n    {\n      if ( !(v9 & 1) || BYTE1(v8) & 8 )\n        goto LABEL_9;\n    }\n    else if ( BYTE1(v8) & 8 && v9 & 1 )\n    {\n      goto LABEL_9;\n    }\n    if ( BYTE1(v8) & 0x20 && !(v9 & 2) || BYTE1(v8) & 0x80 && !(v9 & 8) )\n      goto LABEL_9;\n  }\n  v10 = 0LL;\n  for ( i = *(_QWORD *)(v3 + 200); v10 < i; i = v13 )\n  {\n    v12 = *(_QWORD *)(v3 + 216);\n    v13 = (v10 + i) / 2;\n    if ( v4 <= *(_QWORD *)(v12 + 40 * v13 + 8) )\n    {\n      while ( v13 > v10 )\n      {\n        v15 = (v13 + v10) / 2;\n        if ( v4 > *(_QWORD *)(v12 + 40 * v15 + 8) )\n          goto LABEL_30;\n        v13 = (v13 + v10) / 2;\n      }\n      break;\n    }\n    v15 = (v10 + i) / 2;\n    v13 = i;\nLABEL_30:\n    v10 = v15 + 1;\n  }\n  if ( *(_QWORD *)(v3 + 200) > v10 )\n  {\n    v14 = *(_QWORD *)(v3 + 216) + 40 * v10;\n    if ( *(_QWORD *)(v14 + 8) == v4 && v10 != -1 )\n    {\n      while ( v5 != *(_QWORD *)v14 )\n      {\n        v14 += 40LL;\n        if ( !*(_BYTE *)(v14 - 8) )\n          goto LABEL_31;\n      }\n      goto LABEL_29;\n    }\n  }\nLABEL_31:\n  v16 = **(_QWORD **)(v3 + 152);\n  v89 = *(__int64 **)(v3 + 152);\n  v88 = *(_QWORD *)(v16 + v6);\n  if ( *(_QWORD *)(v3 + 232) <= 0LL )\n  {\nLABEL_29:\n    v92 = 0;\n    goto LABEL_9;\n  }\n  v74 = v4;\n  v72 = 0LL;\n  v76 = *(_QWORD *)(v3 + 8);\n  v83 = v5;\n  v90 = *(_QWORD *)(v3 + 200);\nLABEL_33:\n  v17 = *(_QWORD *)(*(_QWORD *)(v3 + 248) + 8 * v72);\n  if ( v88 != *(_QWORD *)(v16 + 16LL * *(_QWORD *)(v17 + 8)) )\n    goto LABEL_34;\n  v42 = *(_QWORD *)v17;\n  v43 = v74;\n  if ( *(_QWORD *)(v17 + 32) <= 0LL )\n    goto LABEL_73;\n  v44 = *(_QWORD *)v17;\n  v45 = 0LL;\n  v46 = v76;\n  v47 = v74;\n  while ( 1 )\n  {\n    v48 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8 * v45);\n    v49 = *(_QWORD *)(v48 + 8);\n    v50 = *(_QWORD *)(v48 + 8) - v44;\n    v51 = v50 + v47;\n    if ( v50 <= 0 )\n      goto LABEL_60;\n    if ( *(_QWORD *)(v3 + 48) < v51 )\n    {\n      v79 = *(_QWORD *)(v48 + 8) - v44;\n      v78 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8 * v45);\n      if ( *(_QWORD *)(v3 + 88) >= v51 )\n      {\n        v91 = v47;\n        v81 = v44;\n        result = sub_40BE60(v3, v50 + v47);\n        if ( result )\n          return result;\n        v46 = *(_QWORD *)(v3 + 8);\n        v50 = v79;\n        v48 = v78;\n        v47 = v91;\n        v44 = v81;\n        goto LABEL_59;\n      }\nLABEL_96:\n      v76 = v46;\n      v43 = v47;\n      v42 = v44;\n      if ( *(_QWORD *)(v17 + 32) <= v45 )\n      {\n        if ( v45 > 0 )\n        {\n          v49 = v44;\n          v51 = v47;\nLABEL_72:\n          v42 = v49 + 1;\n          v43 = v51;\n        }\nLABEL_73:\n        if ( v74 >= v42 )\n        {\n          v56 = v43;\n          do\n          {\n            if ( v42 - *(_QWORD *)v17 > 0 )\n            {\n              if ( *(_QWORD *)(v3 + 48) <= v56 )\n              {\n                if ( *(_QWORD *)(v3 + 88) <= v56 )\n                  break;\n                result = sub_40BD10(v3, (unsigned int)(v56 + 1));\n                if ( result )\n                  return result;\n                v76 = *(_QWORD *)(v3 + 8);\n              }\n              if ( *(_BYTE *)(v76 + v56) != *(_BYTE *)(v76 + v42 - 1) )\n                break;\n              ++v56;\n            }\n            v57 = *(_QWORD *)(*(_QWORD *)(v3 + 184) + 8 * v42);\n            if ( v57 )\n            {\n              v58 = *(_QWORD *)(v57 + 16);\n              if ( v58 > 0 )\n              {\n                v59 = *(_QWORD *)(v57 + 24);\n                v60 = 0LL;\n                while ( 1 )\n                {\n                  v61 = *(_QWORD *)(v59 + 8 * v60);\n                  v62 = *v89 + 16LL * *(_QWORD *)(v59 + 8 * v60);\n                  if ( *(_BYTE *)(v62 + 8) == 9 && v88 == *(_QWORD *)v62 )\n                    break;\n                  if ( v58 == ++v60 )\n                    goto LABEL_92;\n                }\n                if ( v61 != -1 )\n                {\n                  v63 = *(_QWORD *)(v17 + 16);\n                  v64 = *(_QWORD *)v17;\n                  if ( !v63 )\n                  {\n                    v68 = *(_QWORD *)v17;\n                    v69 = calloc(0x18uLL, v42 - v64 + 1);\n                    v64 = v68;\n                    v63 = (__int64)v69;\n                    *(_QWORD *)(v17 + 16) = v69;\n                    if ( !v69 )\n                      return 12;\n                  }\n                  result = sub_4112A0(v3, v63, *(_QWORD *)(v17 + 8), v64, v61, v42, 9u);\n                  if ( result != 1 )\n                  {\n                    if ( result )\n                      return result;\n                    v65 = *(_QWORD *)(v17 + 24);\n                    if ( *(_QWORD *)(v17 + 32) == v65 )\n                    {\n                      v80 = 2 * v65 + 1;\n                      v70 = realloc(*(void **)(v17 + 40), 8 * v80);\n                      if ( !v70 )\n                        return 12;\n                      *(_QWORD *)(v17 + 40) = v70;\n                      *(_QWORD *)(v17 + 24) = v80;\n                    }\n                    v66 = calloc(1uLL, 0x28uLL);\n                    if ( !v66 )\n                      return 12;\n                    v67 = *(_QWORD *)(v17 + 32);\n                    *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8 * v67) = v66;\n                    *v66 = v61;\n                    v66[1] = v42;\n                    *(_QWORD *)(v17 + 32) = v67 + 1;\n                    sub_412290(v3, (__int64 *)v17, (__int64)v66, v83, v74);\n                  }\n                }\n              }\n            }\nLABEL_92:\n            ++v42;\n          }\n          while ( v74 >= v42 );\n        }\n      }\nLABEL_34:\n      if ( ++v72 < *(_QWORD *)(v3 + 232) )\n      {\n        v16 = *v89;\n        goto LABEL_33;\n      }\n      v4 = v74;\n      v18 = v83;\n      v92 = 0;\n      if ( v90 < *(_QWORD *)(v3 + 200) )\n      {\n        v84 = 8 * v83;\n        v19 = v3;\n        v20 = v90;\n        v21 = v19;\n        while ( 2 )\n        {\n          v35 = *(_QWORD *)(v21 + 216) + 40 * v20;\n          if ( v18 != *(_QWORD *)v35 || v4 != *(_QWORD *)(v35 + 8) )\n            goto LABEL_46;\n          v36 = *(_QWORD *)(v35 + 24);\n          v37 = *(_QWORD *)(v35 + 16);\n          v38 = *(_QWORD *)(v82 + 48);\n          v77 = v36 - v37;\n          if ( v36 == v37 )\n            v75 = v38 + 24LL * **(_QWORD **)(*(_QWORD *)(v82 + 40) + 24 * v18 + 16);\n          else\n            v75 = v38 + 24LL * *(_QWORD *)(*(_QWORD *)(v82 + 24) + v84);\n          v22 = v4 + v36 - v37;\n          v73 = 0LL;\n          v23 = sub_40E5C0(v21, v22 - 1, *(_DWORD *)(v21 + 160));\n          v24 = *(_QWORD *)(v21 + 184);\n          v25 = (__int64 *)(v24 + 8 * v22);\n          v26 = *(_QWORD *)(v24 + v87);\n          v27 = *v25;\n          if ( v26 )\n            v73 = *(_QWORD *)(v26 + 16);\n          if ( v27 )\n          {\n            v28 = v23;\n            v29 = sub_40D9B0((__int64)&v93, *(_QWORD *)(v27 + 80), v75);\n            v30 = v28;\n            v92 = v29;\n            if ( v29 )\n            {\n              free(ptr);\n              return v92;\n            }\n            v31 = (__int64 *)(*(_QWORD *)(v21 + 184) + 8 * v22);\n            v32 = sub_40DB40(&v92, v82, (__int64)&v93, v30);\n            v33 = ptr;\n            *v31 = v32;\n            free(v33);\n            v34 = *(_QWORD *)(v21 + 184);\n            if ( *(_QWORD *)(v34 + 8 * v22) )\n            {\nLABEL_44:\n              if ( v77 || *(_QWORD *)(*(_QWORD *)(v34 + v87) + 16LL) <= v73 )\n              {\nLABEL_46:\n                if ( ++v20 >= *(_QWORD *)(v21 + 200) )\n                  goto LABEL_65;\n              }\n              else\n              {\n                result = sub_40E470(v21, (_QWORD *)(v75 + 8), (_QWORD *)(v75 + 16), v4);\n                v92 = result;\n                if ( result )\n                  return result;\n                result = sub_412430(v21, v75 + 8, v75 + 16);\n                v92 = result;\n                if ( result )\n                  return result;\n                if ( ++v20 >= *(_QWORD *)(v21 + 200) )\n                {\nLABEL_65:\n                  v3 = v21;\n                  goto LABEL_9;\n                }\n              }\n              continue;\n            }\n          }\n          else\n          {\n            v39 = v25;\n            v40 = sub_40DB40(&v92, v82, v75, v23);\n            v34 = *(_QWORD *)(v21 + 184);\n            *v39 = v40;\n            if ( *(_QWORD *)(v34 + 8 * v22) )\n              goto LABEL_44;\n          }\n          break;\n        }\n        result = v92;\n        if ( v92 )\n          return result;\n        goto LABEL_44;\n      }\n      goto LABEL_9;\n    }\nLABEL_59:\n    v52 = v48;\n    v53 = v44;\n    v54 = v47;\n    v55 = memcmp((const void *)(v46 + v47), (const void *)(v46 + v44), v50);\n    v47 = v54;\n    v44 = v53;\n    v48 = v52;\n    if ( v55 )\n      goto LABEL_96;\nLABEL_60:\n    result = sub_412290(v3, (__int64 *)v17, v48, v83, v74);\n    v46 = *(_QWORD *)(v3 + 8);\n    if ( (unsigned int)result > 1 )\n      return result;\n    ++v45;\n    v44 = v49;\n    v47 = v51;\n    if ( v45 >= *(_QWORD *)(v17 + 32) )\n    {\n      v76 = *(_QWORD *)(v3 + 8);\n      goto LABEL_72;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x412430L", 
            "funcEndAddr": "0x412ca2L", 
            "funcName": "sub_412430"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412CB0(int *a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r12@1\n  __int64 v4; // r15@1\n  signed __int64 v5; // r14@1\n  __int64 v6; // rbp@2\n  __int64 v8; // rax@6\n  __int64 v9; // r14@7\n  int v10; // eax@7\n  unsigned int v11; // eax@8\n  __int64 *v12; // ST08_8@8\n  int v13; // edx@10\n  unsigned int v14; // eax@10\n  int v15; // eax@13\n  int v16; // eax@15\n  __m128i v17; // [sp+10h] [bp-58h]@7\n  void *ptr; // [sp+20h] [bp-48h]@9\n\n  v3 = *(_QWORD *)(a2 + 72);\n  v4 = *(_QWORD *)(a2 + 152);\n  v5 = 8 * v3 + *(_QWORD *)(a2 + 184);\n  if ( *(_QWORD *)(a2 + 192) >= v3 )\n  {\n    if ( *(_QWORD *)v5 )\n    {\n      v8 = *(_QWORD *)(*(_QWORD *)v5 + 80LL);\n      if ( a3 )\n      {\n        v9 = *(_QWORD *)(a3 + 80);\n        v10 = sub_40D9B0((__int64)&v17, v9, v8);\n        *a1 = v10;\n        if ( v10 )\n          goto LABEL_17;\n        v11 = sub_40E5C0(a2, *(_QWORD *)(a2 + 72) - 1LL, *(_DWORD *)(a2 + 160));\n        v12 = (__int64 *)(8 * v3 + *(_QWORD *)(a2 + 184));\n        v6 = sub_40DB40(a1, v4, (__int64)&v17, v11);\n        *v12 = v6;\n        if ( v9 )\n          free(ptr);\n      }\n      else\n      {\n        v13 = *(_DWORD *)(a2 + 160);\n        v17 = _mm_loadu_si128((const __m128i *)v8);\n        ptr = *(void **)(v8 + 16);\n        v14 = sub_40E5C0(a2, v3 - 1, v13);\n        v6 = sub_40DB40(a1, v4, (__int64)&v17, v14);\n        *(_QWORD *)v5 = v6;\n      }\n    }\n    else\n    {\n      *(_QWORD *)v5 = a3;\n      v6 = a3;\n    }\n  }\n  else\n  {\n    *(_QWORD *)v5 = a3;\n    v6 = a3;\n    *(_QWORD *)(a2 + 192) = v3;\n  }\n  if ( *(_QWORD *)(v4 + 152) )\n  {\n    if ( v6 )\n    {\n      v15 = sub_40E470(a2, (_QWORD *)(v6 + 16), (_QWORD *)(v6 + 24), v3);\n      *a1 = v15;\n      if ( !v15 )\n      {\n        if ( !(*(_BYTE *)(v6 + 104) & 0x40) )\n          return v6;\n        v16 = sub_412430(a2, (_QWORD *)(v6 + 16), (_QWORD *)(v6 + 24));\n        *a1 = v16;\n        if ( !v16 )\n          return *(_QWORD *)(*(_QWORD *)(a2 + 184) + 8 * v3);\n      }\n    }\nLABEL_17:\n    v6 = 0LL;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x412cb0L", 
            "funcEndAddr": "0x412e67L", 
            "funcName": "sub_412CB0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_412E70(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r15@1\n  __int64 v3; // rbx@1\n  __int64 v4; // rbp@1\n  void *v5; // rax@1\n  int v6; // eax@2\n  __int64 v7; // rax@6\n  __int64 v8; // r14@6\n  __int64 v9; // r12@7\n  __int64 v10; // rax@10\n  signed int v11; // er9@12\n  __int64 v12; // rax@17\n  __int64 v13; // rbp@17\n  __int64 v14; // rsi@17\n  signed int v15; // eax@18\n  __int64 v16; // rax@19\n  __int64 v17; // rax@20\n  int v18; // ST18_4@29\n  __int64 v20; // [sp+8h] [bp-90h]@8\n  signed __int64 n; // [sp+10h] [bp-88h]@4\n  int v22; // [sp+1Ch] [bp-7Ch]@3\n  __int64 v23; // [sp+20h] [bp-78h]@18\n  signed __int64 v24; // [sp+28h] [bp-70h]@18\n  __int64 v25; // [sp+30h] [bp-68h]@18\n  _QWORD *v26; // [sp+38h] [bp-60h]@3\n  __int64 v27; // [sp+40h] [bp-58h]@1\n  __int64 v28; // [sp+48h] [bp-50h]@1\n  void *ptr; // [sp+50h] [bp-48h]@1\n\n  v2 = a2;\n  v3 = *(_QWORD *)(a2 + 24);\n  v4 = *(_QWORD *)(a2 + 16);\n  v27 = 1LL;\n  v28 = 1LL;\n  v5 = malloc(8uLL);\n  ptr = v5;\n  if ( !v5 )\n    return 12LL;\n  *(_QWORD *)v5 = v4;\n  v6 = sub_414900(a1, a2, v3, &v27);\n  if ( v6 )\n    goto LABEL_29;\n  v22 = 0;\n  v26 = (_QWORD *)(a2 + 48);\n  if ( v3 <= 0 )\n  {\nLABEL_27:\n    v6 = 0;\n    goto LABEL_29;\n  }\n  while ( 1 )\n  {\n    n = 8 * v3;\n    if ( *(_QWORD *)(*(_QWORD *)v2 + 8 * v3) )\n    {\n      v22 = 0;\n      if ( *(_DWORD *)(a1 + 224) < 0 )\n        goto LABEL_31;\n    }\n    else if ( *(_DWORD *)(a1 + 224) < ++v22 )\n    {\nLABEL_31:\n      memset(*(void **)v2, 0, n);\n      free(ptr);\n      return 0LL;\n    }\n    v7 = *(_QWORD *)(a1 + 184);\n    --v3;\n    v28 = 0LL;\n    v8 = *(_QWORD *)(v7 + n - 8);\n    if ( v8 )\n    {\n      v9 = *(_QWORD *)(a1 + 152);\n      if ( *(_QWORD *)(v8 + 40) > 0LL )\n        break;\n    }\nLABEL_25:\n    v6 = sub_414900(a1, v2, v3, &v27);\n    if ( v6 )\n      goto LABEL_29;\n    if ( !v3 )\n      goto LABEL_27;\n  }\n  v20 = 0LL;\n  while ( 1 )\n  {\n    v12 = *(_QWORD *)(v8 + 48);\n    v13 = *(_QWORD *)(v12 + 8 * v20);\n    v14 = 16LL * *(_QWORD *)(v12 + 8 * v20) + *(_QWORD *)v9;\n    if ( *(_BYTE *)(v14 + 10) & 0x10 )\n    {\n      v24 = 16LL * *(_QWORD *)(v12 + 8 * v20);\n      v25 = *(_QWORD *)(a1 + 152);\n      v23 = *(_QWORD *)(v2 + 24);\n      v15 = sub_411010(\n              **(_QWORD **)(a1 + 152),\n              (_QWORD *)(*(_QWORD *)(a1 + 152) + 216LL),\n              *(_QWORD *)(v12 + 8 * v20),\n              a1,\n              v3);\n      v11 = v15;\n      if ( v15 <= 0 )\n      {\n        if ( v15 )\n          goto LABEL_13;\nLABEL_24:\n        v14 = v24 + *(_QWORD *)v9;\n        goto LABEL_9;\n      }\n      v16 = v3 + v15;\n      if ( v23 < v16 )\n        goto LABEL_13;\n      v17 = *(_QWORD *)(*(_QWORD *)v2 + 8 * v16);\n      if ( !v17 )\n        goto LABEL_24;\n      if ( sub_40C890(*(_QWORD *)(v17 + 16), (__int64 *)(v17 + 24), *(_QWORD *)(*(_QWORD *)(v25 + 24) + 8 * v13)) )\n        goto LABEL_13;\n      v14 = v24 + *(_QWORD *)v9;\n    }\nLABEL_9:\n    if ( (unsigned __int8)sub_40E6B0(a1, v14, v3) )\n    {\n      v10 = *(_QWORD *)(*(_QWORD *)v2 + n);\n      if ( v10 )\n      {\n        if ( sub_40C890(*(_QWORD *)(v10 + 16), (__int64 *)(v10 + 24), *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8 * v13)) )\n          break;\n      }\n    }\nLABEL_16:\n    if ( ++v20 >= *(_QWORD *)(v8 + 40) )\n      goto LABEL_25;\n  }\n  v11 = 1;\nLABEL_13:\n  if ( *(_QWORD *)(v2 + 40)\n    && (unsigned __int8)sub_40CB20(\n                          a1,\n                          (_QWORD *)(v2 + 40),\n                          v26,\n                          *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8 * v13),\n                          v11 + v3,\n                          v13,\n                          v3)\n    || (unsigned __int8)sub_40B280((__int64)&v27, v13) )\n  {\n    goto LABEL_16;\n  }\n  v6 = 12;\nLABEL_29:\n  v18 = v6;\n  free(ptr);\n  return (unsigned int)v18;\n}\n", 
            "funcStartAddr": "0x412e70L", 
            "funcEndAddr": "0x413194L", 
            "funcName": "sub_412E70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4131A0(__int64 a1, __int64 a2, __int64 a3, signed __int64 a4, signed __int64 a5, __int64 a6, unsigned __int64 a7, __int64 a8, int a9)\n{\n  __int64 v9; // r12@1\n  signed __int64 v10; // rbp@1\n  signed __int64 v11; // rbx@1\n  __int64 v12; // rdx@1\n  _BYTE *v13; // rax@1\n  _BYTE *v14; // rcx@1\n  unsigned __int64 v15; // rax@7\n  signed __int64 v16; // rsi@8\n  __int64 v17; // rax@10\n  __int64 v18; // rdx@11\n  __int64 v19; // rcx@12\n  __int64 v20; // rdi@23\n  int v21; // edx@23\n  __int64 v22; // rax@23\n  signed __int64 v23; // rsi@23\n  unsigned __int8 v24; // al@27\n  bool v25; // zf@29\n  bool v26; // sf@29\n  unsigned __int8 v27; // of@29\n  unsigned __int64 v28; // rax@29\n  unsigned __int8 v29; // al@31\n  __int64 v30; // r15@31\n  void *v31; // r14@33\n  void *v32; // rdi@37\n  signed __int64 v33; // rax@38\n  __int64 v34; // rax@40\n  int v35; // eax@42\n  int v36; // ecx@43\n  __int64 *v37; // rdx@47\n  int v38; // eax@49\n  char v39; // cl@53\n  __int64 v40; // rax@53\n  __int64 v41; // rdx@55\n  __int64 v42; // rbx@66\n  __int64 v43; // r14@66\n  unsigned int v44; // eax@67\n  char v45; // al@74\n  unsigned __int64 v46; // r12@75\n  __int64 v47; // rbx@76\n  __int64 v48; // rax@77\n  char v49; // al@79\n  __int64 v50; // rbx@88\n  __int64 v51; // rax@89\n  __int64 v52; // rbp@90\n  __int64 v53; // rax@97\n  char v54; // cl@97\n  signed __int64 v55; // rdx@99\n  void *v56; // rbx@108\n  void *v57; // r14@108\n  signed __int64 v58; // rax@112\n  __int64 v59; // rdx@114\n  __int64 v60; // rax@118\n  signed __int64 v61; // rax@125\n  __int64 v62; // rdx@127\n  __int64 v64; // rax@137\n  int v65; // eax@145\n  __int64 v66; // rbp@147\n  __int64 v67; // r12@148\n  __int64 v68; // r8@148\n  int v69; // eax@155\n  __int64 v70; // rbx@156\n  int v71; // eax@158\n  __int64 v72; // rdx@159\n  unsigned int v73; // eax@161\n  char *v74; // r15@161\n  __int64 v75; // rax@161\n  void *v76; // rdi@161\n  _QWORD *v77; // rdx@161\n  __int64 v78; // r9@164\n  __int64 v79; // r15@164\n  signed __int64 v80; // rax@164\n  int v81; // ebx@165\n  __int64 v82; // ST38_8@166\n  __int64 v83; // ST30_8@166\n  char v84; // al@166\n  unsigned int v85; // eax@170\n  __int64 v86; // rax@170\n  __int64 v87; // rbp@173\n  signed int v88; // ebp@178\n  __int64 v89; // rcx@185\n  _BYTE *v90; // rax@186\n  __int64 v91; // rdx@191\n  __int64 v92; // ST08_8@192\n  signed int v93; // eax@192\n  __int64 v94; // rbp@210\n  void *v95; // r15@210\n  void *v96; // rbx@212\n  __int64 v97; // rax@217\n  __int64 v98; // rax@221\n  __int64 v99; // r14@221\n  __int64 v100; // r12@221\n  signed __int64 v101; // rax@241\n  bool v102; // r8@245\n  signed int v103; // eax@247\n  unsigned __int64 v104; // rdx@248\n  char v105; // r8@249\n  __int64 v106; // r9@249\n  __int64 v107; // rcx@249\n  __int64 v108; // r11@249\n  unsigned __int64 v109; // r10@249\n  __int64 v110; // rdi@249\n  __int64 i; // rax@249\n  unsigned __int64 v112; // rsi@252\n  _QWORD *v113; // rax@256\n  __int64 v114; // rsi@258\n  __int64 j; // rax@259\n  __int64 v116; // rdx@260\n  signed __int64 v117; // rcx@261\n  int v118; // eax@265\n  __int64 v119; // [sp+8h] [bp-230h]@23\n  signed __int64 v120; // [sp+8h] [bp-230h]@85\n  __int64 v121; // [sp+8h] [bp-230h]@209\n  __int64 v122; // [sp+10h] [bp-228h]@66\n  signed int v123; // [sp+10h] [bp-228h]@213\n  __int64 v124; // [sp+18h] [bp-220h]@1\n  void *v125; // [sp+20h] [bp-218h]@75\n  void *v126; // [sp+20h] [bp-218h]@212\n  unsigned __int64 v127; // [sp+28h] [bp-210h]@76\n  char *v128; // [sp+30h] [bp-208h]@159\n  __int64 v129; // [sp+40h] [bp-1F8h]@1\n  signed int v130; // [sp+48h] [bp-1F0h]@21\n  signed int v131; // [sp+4Ch] [bp-1ECh]@19\n  __int64 *v132; // [sp+50h] [bp-1E8h]@76\n  _QWORD *v133; // [sp+58h] [bp-1E0h]@148\n  _BYTE *v134; // [sp+60h] [bp-1D8h]@1\n  __int64 v135; // [sp+68h] [bp-1D0h]@42\n  __int64 v136; // [sp+70h] [bp-1C8h]@1\n  __int64 v137; // [sp+78h] [bp-1C0h]@1\n  signed __int64 v138; // [sp+80h] [bp-1B8h]@40\n  __int64 v139; // [sp+88h] [bp-1B0h]@23\n  signed __int64 v140; // [sp+90h] [bp-1A8h]@7\n  unsigned int v141; // [sp+98h] [bp-1A0h]@49\n  int v142; // [sp+9Ch] [bp-19Ch]@38\n  __int64 *v143; // [sp+A0h] [bp-198h]@49\n  int v144; // [sp+A8h] [bp-190h]@42\n  unsigned __int8 v145; // [sp+ADh] [bp-18Bh]@74\n  bool v146; // [sp+AFh] [bp-189h]@49\n  int v147; // [sp+B0h] [bp-188h]@66\n  int v148; // [sp+B4h] [bp-184h]@158\n  __int64 v149; // [sp+B8h] [bp-180h]@38\n  __m128i v150; // [sp+C0h] [bp-178h]@160\n  void *v151; // [sp+D0h] [bp-168h]@161\n  unsigned __int64 v152; // [sp+D8h] [bp-160h]@178\n  __int128 v153; // [sp+E0h] [bp-158h]@178\n  void *v154; // [sp+F0h] [bp-148h]@178\n  __int64 v155; // [sp+100h] [bp-138h]@1\n  __int64 v156; // [sp+108h] [bp-130h]@29\n  _DWORD *v157; // [sp+110h] [bp-128h]@65\n  __int64 v158; // [sp+118h] [bp-120h]@249\n  __int64 v159; // [sp+128h] [bp-110h]@191\n  __int64 v160; // [sp+130h] [bp-108h]@31\n  unsigned __int64 v161; // [sp+138h] [bp-100h]@31\n  __int64 v162; // [sp+140h] [bp-F8h]@36\n  __int64 v163; // [sp+148h] [bp-F0h]@66\n  __int64 v164; // [sp+150h] [bp-E8h]@25\n  __int64 v165; // [sp+158h] [bp-E0h]@25\n  __int64 v166; // [sp+160h] [bp-D8h]@27\n  __int64 v167; // [sp+168h] [bp-D0h]@27\n  int v168; // [sp+170h] [bp-C8h]@38\n  __int64 v169; // [sp+178h] [bp-C0h]@25\n  __int64 v170; // [sp+180h] [bp-B8h]@28\n  bool v171; // [sp+188h] [bp-B0h]@27\n  char v172; // [sp+189h] [bp-AFh]@27\n  char v173; // [sp+18Ah] [bp-AEh]@27\n  bool v174; // [sp+18Bh] [bp-ADh]@27\n  char v175; // [sp+18Ch] [bp-ACh]@249\n  char v176; // [sp+18Dh] [bp-ABh]@31\n  char v177; // [sp+18Eh] [bp-AAh]@28\n  int v178; // [sp+190h] [bp-A8h]@23\n  __int64 v179; // [sp+198h] [bp-A0h]@1\n  int v180; // [sp+1A0h] [bp-98h]@31\n  __int64 v181; // [sp+1A8h] [bp-90h]@31\n  void *v182; // [sp+1B0h] [bp-88h]@108\n  void *ptr; // [sp+1B8h] [bp-80h]@37\n  __int64 v184; // [sp+1C0h] [bp-78h]@66\n  __int64 v185; // [sp+1C8h] [bp-70h]@66\n  __int64 v186; // [sp+1D0h] [bp-68h]@35\n  void *v187; // [sp+1D8h] [bp-60h]@33\n  int v188; // [sp+1E0h] [bp-58h]@35\n  __int64 v189; // [sp+1F0h] [bp-48h]@35\n  void *v190; // [sp+1F8h] [bp-40h]@33\n\n  v9 = a6;\n  v10 = a5;\n  v11 = a4;\n  v129 = a1;\n  v136 = a2;\n  v137 = a3;\n  v12 = *(_QWORD *)a1;\n  v124 = *(_QWORD *)a1;\n  v13 = 0LL;\n  memset(&v155, 0, 0x100uLL);\n  v14 = *(_BYTE **)(a1 + 32);\n  v179 = v12;\n  v134 = v14;\n  if ( v14 )\n  {\n    if ( *(_BYTE *)(a1 + 56) & 8 && v11 != a5 )\n    {\n      if ( !(*(_BYTE *)(a1 + 56) & 1) )\n        v13 = v14;\n      v134 = v13;\n    }\n    else\n    {\n      v134 = 0LL;\n    }\n  }\n  v140 = 0LL;\n  v15 = *(_QWORD *)(a1 + 48);\n  if ( v15 < a7 )\n  {\n    v16 = a7 - 1 - v15;\n    a7 += v15 - (a7 - 1);\n    v140 = v16;\n  }\n  if ( !*(_QWORD *)(a1 + 16)\n    || (v17 = *(_QWORD *)(v124 + 72)) == 0\n    || (v18 = *(_QWORD *)(v124 + 80)) == 0\n    || (v19 = *(_QWORD *)(v124 + 88)) == 0\n    || !*(_QWORD *)(v124 + 96) )\n  {\n    return 1;\n  }\n  if ( !*(_QWORD *)(v17 + 16) && !*(_QWORD *)(v18 + 16) && (!*(_QWORD *)(v19 + 16) || *(_BYTE *)(a1 + 56) >= 0) )\n  {\n    if ( v11 )\n    {\n      v131 = 1;\n      if ( a5 )\n        return (unsigned int)v131;\n    }\n    v10 = 0LL;\n    v11 = 0LL;\n  }\n  v130 = 1;\n  if ( !a7 )\n    v130 = *(_QWORD *)(v124 + 152) != 0LL;\n  v20 = *(_QWORD *)(a1 + 40);\n  v21 = *(_DWORD *)(v124 + 180);\n  v119 = *(_QWORD *)(v129 + 24);\n  v22 = *(_QWORD *)(v124 + 16);\n  v178 = v21;\n  v23 = v22 + 1;\n  v139 = v20;\n  if ( v22 + 1 < v21 )\n    v23 = v21;\n  v169 = v20;\n  v165 = v137;\n  v164 = v137;\n  if ( v23 > v137 + 1 )\n    v23 = v137 + 1;\n  v167 = v137;\n  v166 = v137;\n  v155 = v136;\n  v171 = (v119 & 0x400000) != 0;\n  v24 = *(_BYTE *)(v124 + 176);\n  v174 = (v20 | v119 & 0x400000) != 0;\n  v173 = (v24 >> 3) & 1;\n  v172 = (v24 >> 2) & 1;\n  v131 = sub_40B170((__int64)&v155, v23);\n  if ( v131 )\n  {\nLABEL_132:\n    v32 = ptr;\n    goto LABEL_133;\n  }\n  v170 = v124 + 184;\n  v177 = (*(_BYTE *)(v124 + 176) >> 4) & 1;\n  if ( v174\n    || (v27 = __OFSUB__(*(_DWORD *)(v124 + 180), 1),\n        v25 = *(_DWORD *)(v124 + 180) == 1,\n        v26 = *(_DWORD *)(v124 + 180) - 1 < 0,\n        v156 = v136,\n        v28 = v137,\n        !((unsigned __int8)(v26 ^ v27) | v25)) )\n  {\n    v28 = 0LL;\n  }\n  v160 = v28;\n  v161 = v28;\n  v167 = v9;\n  v29 = *(_BYTE *)(v129 + 56);\n  v166 = v9;\n  v176 = v29 >> 7;\n  v30 = *(_QWORD *)(v124 + 152);\n  v181 = -1LL;\n  v180 = a9;\n  if ( 2 * v30 > 0 )\n  {\n    if ( 2 * v30 > 461168601842738790LL )\n      goto LABEL_206;\n    v31 = malloc(80 * v30);\n    v187 = v31;\n    v190 = malloc(16 * v30);\n    if ( !v190 || !v31 )\n      goto LABEL_206;\n  }\n  v186 = 2 * v30;\n  v188 = 1;\n  v189 = 2 * v30;\n  if ( a7 > 1 || *(_BYTE *)(v124 + 176) & 2 )\n  {\n    if ( (unsigned __int64)v162 <= 0x1FFFFFFFFFFFFFFELL )\n    {\n      v32 = malloc(8 * v162 + 8);\n      ptr = v32;\n      if ( !v32 )\n      {\nLABEL_200:\n        v131 = 12;\n        goto LABEL_133;\n      }\n      goto LABEL_38;\n    }\nLABEL_206:\n    v32 = ptr;\n    v131 = 12;\n    goto LABEL_133;\n  }\n  ptr = 0LL;\nLABEL_38:\n  v149 = v11;\n  v168 = (a9 & 1u) < 1 ? 6 : 4;\n  v142 = 2 * (v11 <= v10) - 1;\n  v33 = v10;\n  if ( v11 <= v10 )\n    v33 = v11;\n  v138 = v33;\n  v34 = v10;\n  if ( v11 >= v10 )\n    v34 = v11;\n  v135 = v34;\n  v35 = 8;\n  v144 = *(_DWORD *)(v124 + 180);\n  if ( v134 )\n  {\n    v36 = 4;\n    if ( *(_DWORD *)(v124 + 180) != 1 )\n      v36 = 4 * ((v139 | *(_QWORD *)(v129 + 24) & 0x400000LL) == 0);\n    v35 = 2 * (v11 <= v10) | v36 | (v139 != 0);\n  }\n  if ( v11 < v138 || v11 > v135 )\n  {\nLABEL_123:\n    v32 = ptr;\n    v131 = 1;\n    goto LABEL_133;\n  }\n  v37 = 0LL;\n  if ( v11 <= v10 )\n    v37 = &v149;\n  v143 = v37;\n  v146 = v37 != 0LL;\n  v38 = v35 - 4;\n  v141 = v38;\n  while ( 1 )\n  {\n    switch ( v38 )\n    {\n      case 0:\n      case 1:\n        if ( v138 > v11 )\n          goto LABEL_123;\n        v39 = 0;\n        v40 = v11;\n        do\n        {\n          v41 = 0LL;\n          if ( v137 > v40 )\n            v41 = *(_BYTE *)(v136 + v40);\n          if ( v139 )\n            v41 = *(_BYTE *)(v139 + v41);\n          if ( v134[v41] )\n          {\n            if ( v39 )\n            {\n              v149 = v40;\n              v11 = v40;\n            }\n            goto LABEL_62;\n          }\n          --v40;\n          v39 = 1;\n        }\n        while ( v40 >= v138 );\n        v149 = v40;\n        v32 = ptr;\n        v131 = 1;\n        goto LABEL_133;\n      case 4:\n        goto LABEL_62;\n      case 3:\n        if ( v135 <= v11 )\n          goto LABEL_117;\n        v58 = v11 + 1;\n        if ( v134[*(_BYTE *)(v139 + *(_BYTE *)(v136 + v11))] )\n          goto LABEL_62;\n        while ( 1 )\n        {\n          v11 = v58;\n          if ( v135 == v58 )\n            break;\n          v59 = *(_BYTE *)(v139 + *(_BYTE *)(v136 + v58++));\n          if ( v134[v59] )\n            goto LABEL_229;\n        }\n        v149 = v135;\n        goto LABEL_117;\n      case 2:\n        if ( v135 <= v11 )\n          goto LABEL_117;\n        v61 = v11 + 1;\n        if ( v134[*(_BYTE *)(v136 + v11)] )\n          goto LABEL_62;\n        break;\n      default:\n        goto LABEL_185;\n    }\n    while ( 1 )\n    {\n      v11 = v61;\n      if ( v135 == v61 )\n        break;\n      v62 = *(_BYTE *)(v136 + v61++);\n      if ( v134[v62] )\n      {\nLABEL_229:\n        v149 = v11;\n        goto LABEL_62;\n      }\n    }\n    v149 = v135;\nLABEL_117:\n    if ( v135 == v11 )\n    {\n      v60 = 0LL;\n      if ( v137 > v135 )\n        v60 = *(_BYTE *)(v136 + v135);\n      if ( v139 )\n        v60 = *(_BYTE *)(v139 + v60);\n      if ( !v134[v60] )\n        goto LABEL_123;\n    }\nLABEL_62:\n    v131 = sub_40E8B0((__int64)&v155, v11, a9);\n    if ( v131 )\n      goto LABEL_132;\n    if ( v144 == 1 || !v160 || *v157 != -1 )\n      break;\nLABEL_182:\n    v11 += v142;\n    v149 = v11;\n    if ( v11 < v138 || v11 > v135 )\n      goto LABEL_123;\n    v38 = v141;\n    if ( v141 > 4 )\n    {\nLABEL_185:\n      v89 = v135;\n      while ( 1 )\n      {\n        v91 = v11 - v159;\n        if ( v161 <= v11 - v159 )\n        {\n          v92 = v89;\n          v93 = sub_40E8B0((__int64)&v155, v11, a9);\n          v89 = v92;\n          if ( v93 )\n          {\n            v131 = v93;\n            goto LABEL_132;\n          }\n          v91 = v11 - v159;\n        }\n        v90 = v134;\n        if ( v137 > v11 )\n          v90 = &v134[*(_BYTE *)(v156 + v91)];\n        if ( *v90 )\n          goto LABEL_62;\n        v11 += v142;\n        v149 = v11;\n        if ( v11 < v138 || v11 > v89 )\n          goto LABEL_123;\n      }\n    }\n  }\n  v42 = v179;\n  v188 = 0;\n  v185 = 0LL;\n  v43 = *(_QWORD *)(v179 + 72);\n  v184 = 0LL;\n  v147 = 0;\n  v122 = v163;\n  if ( *(_BYTE *)(v43 + 104) >= 0 )\n    goto LABEL_72;\n  v44 = sub_40E5C0((__int64)&v155, v163 - 1, v180);\n  if ( v44 & 1 )\n  {\n    v43 = *(_QWORD *)(v42 + 80);\n  }\n  else\n  {\n    if ( !v44 )\n      goto LABEL_72;\n    if ( (v44 & 6) == 6 )\n    {\n      v43 = *(_QWORD *)(v42 + 96);\n    }\n    else if ( v44 & 2 )\n    {\n      v43 = *(_QWORD *)(v42 + 88);\n    }\n    else\n    {\n      if ( !(v44 & 4) )\n        goto LABEL_72;\n      v43 = sub_40DB40(&v147, v42, *(_QWORD *)(v43 + 80), v44);\n    }\n  }\n  if ( !v43 )\n  {\n    v131 = v147;\n    if ( v147 != 12 )\n      __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 0x431u, \"check_matching\");\n    goto LABEL_132;\n  }\nLABEL_72:\n  if ( ptr && (v25 = *(_QWORD *)(v42 + 152) == 0LL, *((_QWORD *)ptr + v122) = v43, !v25) )\n  {\n    v118 = sub_40E470((__int64)&v155, (_QWORD *)(v43 + 16), (_QWORD *)(v43 + 24), 0LL);\n    v147 = v118;\n    if ( v118 )\n      goto LABEL_279;\n    v45 = *(_BYTE *)(v43 + 104);\n    if ( v45 & 0x40 )\n    {\n      v118 = sub_412430((__int64)&v155, (_QWORD *)(v43 + 16), (_QWORD *)(v43 + 24));\n      v147 = v118;\n      if ( v118 )\n      {\nLABEL_279:\n        v46 = v118;\n        goto LABEL_104;\n      }\n      v45 = *(_BYTE *)(v43 + 104);\n    }\n    v145 = 0;\n  }\n  else\n  {\n    v145 = v146;\n    v45 = *(_BYTE *)(v43 + 104);\n  }\n  LOBYTE(v125) = 0;\n  v46 = -1LL;\n  if ( v45 & 0x10 )\n  {\n    if ( *(_BYTE *)(v43 + 104) >= 0\n      || (v125 = (void *)sub_40E7E0((__int64)&v155, *(_QWORD *)(v43 + 16), (__int64 *)(v43 + 24), v122)) != 0LL )\n    {\n      v46 = v122;\n      LOBYTE(v125) = 1;\n      if ( !v130 )\n        goto LABEL_104;\n    }\n  }\n  v47 = v163;\n  v127 = v46;\n  v132 = v143;\n  while ( 2 )\n  {\n    if ( v167 <= v47 )\n      goto LABEL_141;\n    v120 = v47 + 1;\n    if ( (v47 + 1 < v162 || v162 >= v165) && (v120 < v160 || v160 >= v165) )\n    {\n      if ( !(*(_BYTE *)(v43 + 104) & 0x20) )\n        goto LABEL_88;\n    }\n    else\n    {\n      v65 = sub_40BD10((__int64)&v155, (unsigned int)(v47 + 2));\n      v147 = v65;\n      if ( v65 )\n      {\n        if ( v65 != 12 )\n          __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 0x468u, \"check_matching\");\n        goto LABEL_206;\n      }\n      v47 = v163;\n      if ( !(*(_BYTE *)(v43 + 104) & 0x20) )\n        goto LABEL_88;\n    }\n    v66 = v179;\n    if ( *(_QWORD *)(v43 + 16) <= 0LL )\n    {\nLABEL_203:\n      v147 = 0;\nLABEL_88:\n      v163 = v47 + 1;\n      v50 = *(_BYTE *)(v156 + v47);\n      while ( 1 )\n      {\n        v51 = *(_QWORD *)(v43 + 88);\n        if ( v51 )\n        {\n          v52 = *(_QWORD *)(v51 + 8 * v50);\n          goto LABEL_91;\n        }\n        v87 = *(_QWORD *)(v43 + 96);\n        if ( v87 )\n          break;\n        if ( !sub_40F2D0(v179, v43) )\n        {\n          v147 = 12;\n          if ( !ptr )\n          {\nLABEL_199:\n            v32 = 0LL;\n            goto LABEL_200;\n          }\n          goto LABEL_196;\n        }\n      }\n      if ( sub_40E5C0((__int64)&v155, v163 - 1, v180) & 1 )\n        v52 = *(_QWORD *)(v87 + 8 * v50 + 2048);\n      else\n        v52 = *(_QWORD *)(v87 + 8 * v50);\nLABEL_91:\n      if ( !ptr )\n        goto LABEL_93;\n      goto LABEL_92;\n    }\n    v67 = 0LL;\n    v68 = v47;\n    v133 = (_QWORD *)(v179 + 216);\n    while ( 1 )\n    {\n      v78 = *(_QWORD *)v66;\n      v79 = *(_QWORD *)(*(_QWORD *)(v43 + 24) + 8 * v67);\n      v80 = *(_QWORD *)v66 + 16LL * *(_QWORD *)(*(_QWORD *)(v43 + 24) + 8 * v67);\n      if ( !(*(_BYTE *)(v80 + 10) & 0x10) )\n        goto LABEL_163;\n      v81 = *(_DWORD *)(v80 + 8);\n      if ( v81 & 0x3FF00 )\n      {\n        v82 = *(_QWORD *)v66;\n        v83 = v68;\n        v84 = sub_40E5C0((__int64)&v155, v68, v180);\n        v68 = v83;\n        v78 = v82;\n        if ( BYTE1(v81) & 4 )\n        {\n          if ( !(v84 & 1) || BYTE1(v81) & 8 )\n            goto LABEL_163;\n        }\n        else if ( BYTE1(v81) & 8 && v84 & 1 )\n        {\n          goto LABEL_163;\n        }\n        if ( BYTE1(v81) & 0x20 && !(v84 & 2) || BYTE1(v81) & 0x80 && !(v84 & 8) )\n          goto LABEL_163;\n      }\n      v69 = sub_411010(v78, v133, v79, (__int64)&v155, v68);\n      if ( !v69 )\n        goto LABEL_162;\n      v70 = v163 + v69;\n      if ( v188 >= v69 )\n        v69 = v188;\n      v188 = v69;\n      v71 = sub_40BE60((__int64)&v155, v70);\n      v148 = v71;\n      if ( v71 )\n        break;\n      v128 = (char *)ptr + 8 * v70;\n      v72 = *(_QWORD *)(v66 + 48) + 24LL * *(_QWORD *)(*(_QWORD *)(v66 + 24) + 8 * v79);\n      if ( *(_QWORD *)v128 )\n      {\n        v71 = sub_40D9B0((__int64)&v150, *(_QWORD *)(*(_QWORD *)v128 + 80LL), v72);\n        v148 = v71;\n        if ( v71 )\n          break;\n        v73 = sub_40E5C0((__int64)&v155, v70 - 1, v180);\n        v74 = (char *)ptr + 8 * v70;\n        v75 = sub_40DB40(&v148, v66, (__int64)&v150, v73);\n        v76 = v151;\n        *(_QWORD *)v74 = v75;\n        free(v76);\n        v77 = ptr;\n        if ( *((_QWORD *)ptr + v70) )\n          goto LABEL_162;\nLABEL_171:\n        v71 = v148;\n        if ( v148 )\n          goto LABEL_195;\n        goto LABEL_162;\n      }\n      v150 = _mm_loadu_si128((const __m128i *)v72);\n      v151 = *(void **)(v72 + 16);\n      v85 = sub_40E5C0((__int64)&v155, v70 - 1, v180);\n      v86 = sub_40DB40(&v148, v66, (__int64)&v150, v85);\n      v77 = ptr;\n      *(_QWORD *)v128 = v86;\n      if ( !v77[v70] )\n        goto LABEL_171;\nLABEL_162:\n      v68 = v163;\nLABEL_163:\n      if ( ++v67 >= *(_QWORD *)(v43 + 16) )\n      {\n        v47 = v68;\n        goto LABEL_203;\n      }\n    }\n    v77 = ptr;\nLABEL_195:\n    v147 = v71;\n    if ( !v77 )\n      goto LABEL_199;\nLABEL_196:\n    v52 = 0LL;\nLABEL_92:\n    v52 = sub_412CB0(&v147, (__int64)&v155, v52);\nLABEL_93:\n    if ( v52 )\n      goto LABEL_77;\n    v32 = ptr;\n    if ( v147 )\n      goto LABEL_200;\n    if ( !ptr || (unsigned __int8)(v130 & 1 ^ 1) & (unsigned __int8)v125 )\n      goto LABEL_141;\n    while ( 2 )\n    {\n      v53 = v163;\n      v54 = 0;\n      while ( 2 )\n      {\n        v55 = v53 + 1;\n        if ( v184 < v53 + 1 )\n        {\n          v46 = v127;\n          if ( v54 )\n            v163 = v53;\n          goto LABEL_102;\n        }\n        ++v53;\n        v54 = 1;\n        if ( !*((_QWORD *)v32 + v55) )\n          continue;\n        break;\n      }\n      v163 = v55;\n      v64 = sub_412CB0(&v147, (__int64)&v155, 0LL);\n      if ( v147 )\n      {\n        v52 = v64;\n        if ( v64 )\n          goto LABEL_77;\nLABEL_141:\n        v46 = v127;\nLABEL_102:\n        if ( v132 )\n          *v132 += v122;\n        goto LABEL_104;\n      }\n      if ( !v64 )\n      {\n        v32 = ptr;\n        continue;\n      }\n      break;\n    }\n    v52 = v64;\nLABEL_77:\n    v47 = v163;\n    v25 = ((v43 == v52) & v145) == 0;\n    v145 &= v43 == v52;\n    v48 = v120;\n    if ( v25 )\n      v48 = v122;\n    v122 = v48;\n    v49 = *(_BYTE *)(v52 + 104);\n    if ( !(v49 & 0x10) || v49 < 0 && !sub_40E7E0((__int64)&v155, *(_QWORD *)(v52 + 16), (__int64 *)(v52 + 24), v163) )\n    {\nLABEL_83:\n      v43 = v52;\n      continue;\n    }\n    break;\n  }\n  if ( v130 )\n  {\n    v127 = v47;\n    LOBYTE(v125) = 1;\n    v132 = 0LL;\n    goto LABEL_83;\n  }\n  v46 = v47;\nLABEL_104:\n  if ( v46 == -1LL )\n    goto LABEL_181;\n  if ( v46 == -2LL )\n    goto LABEL_206;\n  v181 = v46;\n  if ( *(_BYTE *)(v129 + 56) & 0x10 || a7 <= 1 )\n  {\n    if ( !*(_QWORD *)(v124 + 152) )\n      goto LABEL_131;\n    v56 = ptr;\n    v182 = (void *)sub_40E7E0(\n                     (__int64)&v155,\n                     *(_QWORD *)(*((_QWORD *)ptr + v46) + 16LL),\n                     (__int64 *)(*((_QWORD *)ptr + v46) + 24LL),\n                     v46);\nLABEL_208:\n    v57 = v182;\nLABEL_209:\n    v121 = v179;\n    if ( v46 > 0x1FFFFFFFFFFFFFFELL )\n    {\n      v32 = v56;\n      v131 = 12;\n      goto LABEL_133;\n    }\n    v94 = v46 + 1;\n    v95 = malloc(8 * (v46 + 1));\n    if ( !v95 )\n      goto LABEL_206;\n    if ( *(_QWORD *)(v121 + 152) )\n    {\n      v96 = malloc(8 * (v46 + 1));\n      v126 = v96;\n      if ( !v96 )\n      {\n        free(v95);\n        v32 = ptr;\n        v131 = 12;\n        goto LABEL_133;\n      }\n      while ( 1 )\n      {\n        memset(v96, 0, 8 * v94);\n        v153 = 0LL;\n        v150.m128i_i64[0] = (__int64)v95;\n        v150.m128i_i64[1] = (__int64)v96;\n        v151 = v57;\n        v152 = v46;\n        v154 = 0LL;\n        v123 = sub_412E70((__int64)&v155, (__int64)&v150);\n        free(v154);\n        if ( v123 )\n        {\n          v88 = v123;\n          goto LABEL_270;\n        }\n        if ( *(_QWORD *)v95 || *(_QWORD *)v96 )\n          break;\n        do\n        {\n          if ( --v46 == -1LL )\n          {\n            free(v95);\n            free(v96);\n            sub_40C500((__int64)&v155);\n            v11 = v149;\n            goto LABEL_182;\n          }\n          v97 = *((_QWORD *)ptr + v46);\n        }\n        while ( !v97 || !(*(_BYTE *)(v97 + 104) & 0x10) );\n        v94 = v46 + 1;\n        v57 = (void *)sub_40E7E0((__int64)&v155, *(_QWORD *)(v97 + 16), (__int64 *)(v97 + 24), v46);\n      }\n      v88 = sub_40E030(v121, (__int64)v95, (__int64)v96, v94);\n      free(v96);\n      if ( !v88 )\n      {\nLABEL_221:\n        v98 = (__int64)v57;\n        v99 = v46;\n        v100 = v98;\n        free(ptr);\n        ptr = v95;\n        v182 = (void *)v100;\n        v181 = v99;\n        goto LABEL_131;\n      }\nLABEL_273:\n      v126 = 0LL;\nLABEL_270:\n      free(v95);\n      free(v126);\n      v103 = v88;\n      if ( v88 != 1 )\n        goto LABEL_271;\n    }\n    else\n    {\n      v150.m128i_i64[0] = (__int64)v95;\n      v150.m128i_i64[1] = 0LL;\n      v151 = v57;\n      v152 = v46;\n      v153 = 0LL;\n      v154 = 0LL;\n      v88 = sub_412E70((__int64)&v155, (__int64)&v150);\n      free(v154);\n      if ( v88 )\n        goto LABEL_273;\n      if ( *(_QWORD *)v95 )\n        goto LABEL_221;\n      free(v95);\n    }\nLABEL_181:\n    sub_40C500((__int64)&v155);\n    v11 = v149;\n    goto LABEL_182;\n  }\n  v56 = ptr;\n  v57 = (void *)sub_40E7E0(\n                  (__int64)&v155,\n                  *(_QWORD *)(*((_QWORD *)ptr + v46) + 16LL),\n                  (__int64 *)(*((_QWORD *)ptr + v46) + 24LL),\n                  v46);\n  v182 = v57;\n  if ( *(_BYTE *)(v124 + 176) & 1 )\n    goto LABEL_209;\n  if ( *(_QWORD *)(v124 + 152) )\n    goto LABEL_208;\nLABEL_131:\n  if ( !a7 )\n    goto LABEL_132;\n  v101 = a8 + 16;\n  if ( a7 <= 1 )\n  {\n    *(_QWORD *)a8 = 0LL;\n    *(_QWORD *)(a8 + 8) = v181;\nLABEL_278:\n    v104 = 0LL;\n    goto LABEL_249;\n  }\n  do\n  {\n    *(_QWORD *)(v101 + 8) = -1LL;\n    v101 += 16LL;\n    *(_QWORD *)(v101 - 16) = -1LL;\n  }\n  while ( a8 + 16 * a7 != v101 );\n  *(_QWORD *)a8 = 0LL;\n  *(_QWORD *)(a8 + 8) = v181;\n  if ( *(_BYTE *)(v129 + 56) & 0x10 || a7 == 1 )\n    goto LABEL_278;\n  v102 = 0;\n  if ( *(_BYTE *)(v124 + 176) & 1 )\n    v102 = *(_QWORD *)(v124 + 152) > 0LL;\n  v103 = sub_4119C0((__int64 *)v129, (__int64)&v155, a7, a8, v102);\n  if ( v103 )\n  {\nLABEL_271:\n    v32 = ptr;\n    v131 = v103;\n    goto LABEL_133;\n  }\n  v104 = *(_QWORD *)a8;\nLABEL_249:\n  v105 = v175;\n  v106 = v160;\n  v107 = 0LL;\n  v108 = v158;\n  v109 = v161;\n  v110 = v149;\n  for ( i = a8; ; v104 = *(_QWORD *)i )\n  {\n    if ( v104 != -1LL )\n    {\n      v112 = *(_QWORD *)(i + 8);\n      if ( v105 )\n      {\n        if ( v106 == v104 )\n          v104 = v109;\n        else\n          v104 = *(_QWORD *)(v108 + 8 * v104);\n        *(_QWORD *)i = v104;\n        if ( v106 == v112 )\n          v112 = v109;\n        else\n          v112 = *(_QWORD *)(v108 + 8 * v112);\n      }\n      *(_QWORD *)i = v110 + v104;\n      *(_QWORD *)(i + 8) = v110 + v112;\n    }\n    ++v107;\n    i += 16LL;\n    if ( v107 == a7 )\n      break;\n  }\n  if ( v140 > 0 )\n  {\n    v113 = (_QWORD *)(a8 + 16 * a7);\n    do\n    {\n      *v113 = -1LL;\n      v113 += 2;\n      *(v113 - 1) = -1LL;\n    }\n    while ( (_QWORD *)(a8 + 16 * (a7 + v140)) != v113 );\n  }\n  v32 = ptr;\n  v114 = *(_QWORD *)(v124 + 224);\n  if ( v114 )\n  {\n    for ( j = 0LL; j != a7 - 1; ++j )\n    {\n      v116 = *(_QWORD *)(v114 + 8 * j);\n      if ( v116 != j )\n      {\n        v117 = 16 * j;\n        *(_QWORD *)(a8 + v117 + 16) = *(_QWORD *)(a8 + 16 * (v116 + 1));\n        *(_QWORD *)(a8 + v117 + 24) = *(_QWORD *)(a8 + 16 * (*(_QWORD *)(v114 + 8 * j) + 1LL) + 8);\n      }\n    }\n  }\nLABEL_133:\n  free(v32);\n  if ( *(_QWORD *)(v124 + 152) )\n  {\n    sub_40C500((__int64)&v155);\n    free(v190);\n    free(v187);\n  }\n  sub_40C4C0((__int64)&v155);\n  return (unsigned int)v131;\n}\n", 
            "funcStartAddr": "0x4131a0L", 
            "funcEndAddr": "0x4148f6L", 
            "funcName": "sub_4131A0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_414900(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14@1\n  __int64 v5; // rbp@1\n  signed __int64 v6; // rcx@1\n  __int64 v7; // rbx@1\n  __int64 v8; // r12@1\n  __int64 v9; // rdx@1\n  signed __int64 v10; // rcx@1\n  __int64 v11; // rdi@1\n  signed __int64 result; // rax@3\n  __int64 v13; // r15@5\n  __int64 v14; // r13@6\n  __int64 v15; // rdi@7\n  void *v16; // rax@7\n  bool v17; // zf@8\n  bool v18; // sf@8\n  __int64 *v19; // r13@15\n  signed __int64 v20; // r12@17\n  signed __int64 i; // rax@17\n  __int64 v22; // rdi@19\n  signed __int64 v23; // rdx@19\n  __int64 v24; // r13@27\n  __int64 v25; // r15@28\n  __int64 v26; // r14@28\n  __int64 v27; // rbp@31\n  char v28; // al@31\n  __int64 v29; // r12@34\n  signed __int64 j; // rbx@34\n  __int64 v31; // r9@35\n  __int64 v32; // rax@37\n  __int64 v33; // r9@38\n  __int64 v34; // r10@38\n  __int64 v35; // rbx@42\n  __int64 v36; // rsi@43\n  __int64 v37; // rdx@43\n  __int64 v38; // r9@46\n  __int64 v39; // rax@46\n  __int64 v40; // r9@46\n  __int64 *v41; // r10@46\n  __int64 v42; // r10@53\n  __int64 *v43; // rbx@57\n  signed __int64 v44; // r8@20\n  __m128i v45; // xmm1@61\n  __m128i v46; // xmm2@61\n  void *v47; // rax@61\n  unsigned int v48; // ST18_4@63\n  __int64 v49; // r15@66\n  signed __int64 v50; // rdx@67\n  __int64 v51; // rax@69\n  __int64 v52; // rsi@69\n  __int64 v53; // r8@69\n  __int64 v54; // r13@70\n  __int64 v55; // rbx@71\n  signed __int64 v56; // rax@74\n  __int64 v57; // r10@82\n  signed __int64 v58; // r9@82\n  signed __int64 v59; // r11@82\n  __int64 *v60; // rcx@82\n  __int64 v61; // rsi@82\n  signed __int64 v62; // rdx@87\n  int v63; // er13@87\n  signed __int64 v64; // r13@91\n  __int64 v65; // rbx@93\n  signed __int64 v66; // rax@97\n  __int64 v67; // rdx@97\n  __int64 v68; // r9@97\n  __int64 v69; // r10@98\n  __int64 v70; // [sp+8h] [bp-D0h]@1\n  __int64 v71; // [sp+10h] [bp-C8h]@1\n  signed __int64 v72; // [sp+18h] [bp-C0h]@1\n  __int64 v73; // [sp+20h] [bp-B8h]@6\n  __int64 v74; // [sp+20h] [bp-B8h]@65\n  __int64 v75; // [sp+28h] [bp-B0h]@13\n  __int64 v76; // [sp+30h] [bp-A8h]@28\n  __int64 v77; // [sp+30h] [bp-A8h]@71\n  __int64 v78; // [sp+30h] [bp-A8h]@91\n  signed __int64 v79; // [sp+38h] [bp-A0h]@25\n  __int64 v80; // [sp+38h] [bp-A0h]@93\n  __int64 v81; // [sp+40h] [bp-98h]@28\n  unsigned int v82; // [sp+5Ch] [bp-7Ch]@1\n  __m128i v83; // [sp+60h] [bp-78h]@5\n  __m128i v84; // [sp+70h] [bp-68h]@41\n  __m128i v85; // [sp+80h] [bp-58h]@41\n  void *ptr; // [sp+90h] [bp-48h]@46\n\n  v4 = a3;\n  v5 = a4;\n  v6 = 8 * a3;\n  v7 = a2;\n  v8 = *(_QWORD *)(a1 + 152);\n  v9 = *(_QWORD *)(v5 + 8);\n  v72 = v6;\n  v10 = *(_QWORD *)(a1 + 184) + v6;\n  v70 = a1;\n  v11 = *(_QWORD *)v10;\n  v82 = 0;\n  v71 = v11;\n  if ( !v11 )\n  {\n    if ( v9 )\n    {\n      v43 = (__int64 *)(*(_QWORD *)a2 + v72);\n      *v43 = sub_40DE40(&v82, v8, v5);\n      result = v82;\n    }\n    else\n    {\n      *(_QWORD *)(*(_QWORD *)a2 + v72) = 0LL;\n      result = 0LL;\n    }\n    return result;\n  }\n  if ( !v9 )\n  {\n    *(_QWORD *)(*(_QWORD *)a2 + 8 * v4) = 0LL;\n    result = 0LL;\n    if ( !(*(_BYTE *)(*(_QWORD *)v10 + 104LL) & 0x40) )\n      return result;\n    goto LABEL_17;\n  }\n  v83.m128i_i32[0] = 0;\n  v13 = sub_40DE40(&v83, v8, v5);\n  result = v83.m128i_u32[0];\n  if ( v83.m128i_i32[0] )\n    return result;\n  v14 = *(_QWORD *)(v13 + 56);\n  v73 = v13 + 56;\n  if ( !v14 )\n  {\n    v15 = *(_QWORD *)(v5 + 8);\n    *(_QWORD *)(v13 + 64) = 0LL;\n    *(_QWORD *)(v13 + 56) = v15;\n    v16 = malloc(8 * v15);\n    *(_QWORD *)(v13 + 72) = v16;\n    if ( !v16 )\n      return 12LL;\n    v17 = *(_QWORD *)(v5 + 8) == 0LL;\n    v18 = *(_QWORD *)(v5 + 8) < 0;\n    v83.m128i_i32[0] = 0;\n    if ( !v18 && !v17 )\n    {\n      do\n      {\n        v83.m128i_i32[0] = sub_40CDD0(v73, *(_QWORD *)(v8 + 56) + 24LL * *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v14));\n        if ( v83.m128i_i32[0] )\n          return 12LL;\n      }\n      while ( ++v14 < *(_QWORD *)(v5 + 8) );\n    }\n  }\n  v75 = v71 + 8;\n  result = sub_40D340(v5, v71 + 8, v73);\n  v82 = result;\n  if ( (_DWORD)result )\n    return result;\n  if ( *(_QWORD *)(a2 + 40) )\n  {\n    v74 = *(_QWORD *)(v70 + 216);\n    if ( *(_QWORD *)(a2 + 40) <= 0LL )\n    {\nLABEL_80:\n      v82 = 0;\n      goto LABEL_15;\n    }\n    v49 = 0LL;\n    while ( 1 )\n    {\n      v50 = v74 + 40LL * *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v49);\n      if ( v4 <= *(_QWORD *)(v50 + 16) || v4 > *(_QWORD *)(v50 + 8) )\n        goto LABEL_79;\n      v51 = *(_QWORD *)v8;\n      v52 = *(_QWORD *)(v5 + 8);\n      v53 = *(_QWORD *)(*(_QWORD *)v8 + 16LL * *(_QWORD *)v50);\n      if ( v4 != *(_QWORD *)(v50 + 24) )\n      {\n        v54 = 0LL;\n        if ( v52 <= 0 )\n          goto LABEL_79;\n        v77 = v7;\n        v55 = *(_QWORD *)(*(_QWORD *)v8 + 16LL * *(_QWORD *)v50);\n        while ( 1 )\n        {\n          v56 = 16LL * *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v54) + v51;\n          if ( (unsigned int)*(_BYTE *)(v56 + 8) - 8 > 1 || v55 != *(_QWORD *)v56 )\n          {\n            if ( ++v54 >= *(_QWORD *)(v5 + 8) )\n              goto LABEL_78;\n          }\n          else\n          {\n            result = sub_40F0A0(v8, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v54), v5, v75);\n            if ( (_DWORD)result )\n              return result;\n            if ( ++v54 >= *(_QWORD *)(v5 + 8) )\n            {\nLABEL_78:\n              v7 = v77;\n              goto LABEL_79;\n            }\n          }\n          v51 = *(_QWORD *)v8;\n        }\n      }\n      if ( v52 <= 0 )\n        goto LABEL_79;\n      v57 = *(_QWORD *)(v5 + 16);\n      v58 = -1LL;\n      v59 = v57 + 8 * v52;\n      v60 = *(__int64 **)(v5 + 16);\n      v61 = -1LL;\n      do\n      {\n        while ( 1 )\n        {\n          v62 = v51 + 16 * *v60;\n          v63 = *(_BYTE *)(v62 + 8);\n          if ( v63 != 8 )\n            break;\n          if ( v53 == *(_QWORD *)v62 )\n            v61 = *v60;\n          ++v60;\n          if ( (__int64 *)v59 == v60 )\n            goto LABEL_91;\n        }\n        if ( v63 == 9 && v53 == *(_QWORD *)v62 )\n          v58 = *v60;\n        ++v60;\n      }\n      while ( (__int64 *)v59 != v60 );\nLABEL_91:\n      v64 = v58;\n      v78 = v58;\n      if ( v61 >= 0 )\n      {\n        result = sub_40F0A0(v8, v61, v5, v75);\n        if ( (_DWORD)result )\n          return result;\n        if ( v64 >= 0 && *(_QWORD *)(v5 + 8) > 0LL )\n        {\n          v57 = *(_QWORD *)(v5 + 16);\nLABEL_93:\n          v80 = v7;\n          v65 = 0LL;\n          while ( 1 )\n          {\n            v66 = 24LL * *(_QWORD *)(v57 + 8 * v65) + *(_QWORD *)(v8 + 56);\n            if ( sub_40C890(*(_QWORD *)(v66 + 8), (__int64 *)(v66 + 16), v78)\n              || sub_40C890(\n                   *(_QWORD *)(*(_QWORD *)(v8 + 48) + v68 + 8),\n                   (__int64 *)(*(_QWORD *)(v8 + 48) + v68 + 16),\n                   v67) )\n            {\n              ++v65;\n            }\n            else\n            {\n              result = sub_40F0A0(v8, v69, v5, v75);\n              if ( (_DWORD)result )\n                return result;\n            }\n            if ( *(_QWORD *)(v5 + 8) <= v65 )\n              break;\n            v57 = *(_QWORD *)(v5 + 16);\n          }\n          v7 = v80;\n          goto LABEL_79;\n        }\n      }\n      else if ( v58 >= 0 )\n      {\n        goto LABEL_93;\n      }\nLABEL_79:\n      if ( ++v49 >= *(_QWORD *)(v7 + 40) )\n        goto LABEL_80;\n    }\n  }\nLABEL_15:\n  v19 = (__int64 *)(*(_QWORD *)v7 + v72);\n  *v19 = sub_40DE40(&v82, v8, v5);\n  result = v82;\n  if ( v82 )\n    return result;\n  result = 0LL;\n  if ( !(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v70 + 184) + v72) + 104LL) & 0x40) )\n    return result;\nLABEL_17:\n  v20 = 0LL;\n  for ( i = *(_QWORD *)(v70 + 200); v20 < i; i = v23 )\n  {\n    v22 = *(_QWORD *)(v70 + 216);\n    v23 = (v20 + i) / 2;\n    if ( v4 <= *(_QWORD *)(v22 + 40 * v23 + 8) )\n    {\n      while ( v20 < v23 )\n      {\n        v44 = (v20 + v23) / 2;\n        if ( v4 > *(_QWORD *)(v22 + 40 * v44 + 8) )\n          goto LABEL_60;\n        v23 = (v20 + v23) / 2;\n      }\n      break;\n    }\n    v44 = (v20 + i) / 2;\n    v23 = i;\nLABEL_60:\n    v20 = v44 + 1;\n  }\n  if ( *(_QWORD *)(v70 + 200) <= v20 )\n    return 0LL;\n  v79 = 40 * v20;\n  if ( v4 != *(_QWORD *)(*(_QWORD *)(v70 + 216) + 40 * v20 + 8) )\n    return 0LL;\n  if ( v20 == -1 )\n    return 0LL;\n  v24 = *(_QWORD *)(v70 + 152);\n  v83.m128i_i64[0] = 0LL;\n  if ( *(_QWORD *)(v71 + 16) <= 0LL )\n    return 0LL;\n  v76 = v4;\n  v25 = 0LL;\n  v26 = v7;\n  v81 = v20;\n  while ( 1 )\n  {\n    v27 = *(_QWORD *)(*(_QWORD *)(v71 + 24) + 8 * v25);\n    v28 = *(_BYTE *)(*(_QWORD *)v24 + 16LL * *(_QWORD *)(*(_QWORD *)(v71 + 24) + 8 * v25) + 8);\n    if ( v27 != *(_QWORD *)(v26 + 16) )\n    {\n      if ( v28 == 4 )\n        break;\n      goto LABEL_30;\n    }\n    if ( v76 != *(_QWORD *)(v26 + 24) && v28 == 4 )\n      break;\nLABEL_30:\n    if ( ++v25 >= *(_QWORD *)(v71 + 16) )\n    {\n      if ( v83.m128i_i64[0] )\n      {\n        LODWORD(result) = 0;\n        goto LABEL_63;\n      }\n      return 0LL;\n    }\n  }\n  v29 = v81;\n  for ( j = *(_QWORD *)(v70 + 216) + v79; ; j += 40LL )\n  {\n    if ( v27 != *(_QWORD *)j )\n      goto LABEL_50;\n    v42 = v76 + *(_QWORD *)(j + 24) - *(_QWORD *)(j + 16);\n    v31 = *(_QWORD *)(j + 24) == *(_QWORD *)(j + 16) ? **(_QWORD **)(*(_QWORD *)(v24 + 40) + 24 * v27 + 16) : *(_QWORD *)(*(_QWORD *)(v24 + 24) + 8 * v27);\n    if ( v42 > *(_QWORD *)(v26 + 24) )\n      goto LABEL_50;\n    v32 = *(_QWORD *)(*(_QWORD *)v26 + 8 * v42);\n    if ( !v32\n      || !sub_40C890(*(_QWORD *)(v32 + 16), (__int64 *)(v32 + 24), v31)\n      || (unsigned __int8)sub_40CB20(v70, (_QWORD *)(v26 + 40), (_QWORD *)(v26 + 48), v27, v76, v33, v34) )\n    {\n      goto LABEL_50;\n    }\n    if ( !v83.m128i_i64[0] )\n    {\n      v45 = _mm_load_si128((const __m128i *)(v26 + 16));\n      v46 = _mm_load_si128((const __m128i *)(v26 + 32));\n      v47 = *(void **)(v26 + 48);\n      v83 = _mm_load_si128((const __m128i *)v26);\n      v84 = v45;\n      v85 = v46;\n      ptr = v47;\n      result = sub_40D930((__int64)&v85, v26 + 32);\n      if ( (_DWORD)result )\n        goto LABEL_62;\n    }\n    v84.m128i_i64[0] = v27;\n    v84.m128i_i64[1] = v76;\n    if ( !(unsigned __int8)sub_40B280((__int64)&v85, v29) )\n      break;\n    v35 = *(_QWORD *)(v83.m128i_i64[0] + v72);\n    result = sub_412E70(v70, (__int64)&v83);\n    if ( (_DWORD)result )\n      goto LABEL_62;\n    v36 = *(_QWORD *)(v26 + 8);\n    v37 = v83.m128i_i64[0];\n    if ( v36 )\n    {\n      result = sub_40E030(v24, v36, v83.m128i_i64[0], v76 + 1);\n      if ( (_DWORD)result )\n        goto LABEL_62;\n      v37 = v83.m128i_i64[0];\n    }\n    v38 = v85.m128i_i64[1];\n    *(_QWORD *)(v37 + v72) = v35;\n    v39 = sub_40C890(v38, (__int64 *)&ptr, v29) - 1;\n    if ( v39 >= 0 && v40 > v39 )\n    {\n      v85.m128i_i64[1] = v40 - 1;\n      sub_40CA00(&v85.m128i_i64[1], v41, v39);\n    }\n    j = *(_QWORD *)(v70 + 216) + 40 * v29;\nLABEL_50:\n    ++v29;\n    if ( !*(_BYTE *)(j + 32) )\n      goto LABEL_30;\n  }\n  result = 12LL;\nLABEL_62:\n  if ( v83.m128i_i64[0] )\n  {\nLABEL_63:\n    v48 = result;\n    free(ptr);\n    result = v48;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x414900L", 
            "funcEndAddr": "0x415129L", 
            "funcName": "sub_414900"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_415130(__int64 a1, __int64 a2, __int64 a3, int a4, char a5, char a6)\n{\n  __int64 v6; // r10@1\n  __int64 v7; // r11@1\n  __int64 v8; // rbp@1\n  __int64 v9; // r12@1\n  signed int v10; // eax@2\n  char v11; // al@3\n  __int64 v12; // r11@3\n  char v13; // al@7\n  signed __int64 result; // rax@7\n  __int64 v15; // rdx@9\n  char v16; // r9@11\n  __int64 v17; // r8@11\n  __int64 v18; // r12@14\n  __int64 v19; // rdx@15\n  signed __int64 v20; // rax@15\n  char v21; // r13@15\n  char v22; // dl@19\n  signed __int64 v23; // rax@29\n  char *v24; // r11@32\n  __int64 v25; // [sp+0h] [bp-38h]@33\n  char v26; // [sp+8h] [bp-30h]@33\n\n  v6 = a2;\n  v7 = a4;\n  v8 = a3;\n  v9 = *(_QWORD *)(a2 + 72);\n  if ( *(_DWORD *)(a2 + 144) != 1 )\n  {\n    v10 = sub_40C840(a2, *(_QWORD *)(a2 + 72));\n    if ( v10 > 1 )\n    {\n      v15 = *(_QWORD *)(v6 + 16);\n      *(_DWORD *)a1 = 1;\n      *(_DWORD *)(a1 + 8) = *(_DWORD *)(v15 + 4 * v9);\n      *(_QWORD *)(v6 + 72) = v9 + v10;\n      return 0LL;\n    }\n  }\n  v11 = *(_BYTE *)(v8 + 8);\n  v12 = v9 + v7;\n  *(_QWORD *)(v6 + 72) = v12;\n  if ( (v11 & 0xFB) != 26 && v11 != 28 )\n  {\n    if ( v11 != 22 || a6 || (sub_40ADA0((__int64)&v25, v6, a5), result = 11LL, v26 == 21) )\n    {\n      v13 = *(_BYTE *)v8;\n      *(_DWORD *)a1 = 0;\n      *(_BYTE *)(a1 + 8) = v13;\n      result = 0LL;\n    }\n    return result;\n  }\n  if ( v12 >= *(_QWORD *)(v6 + 104) )\n    return 7LL;\n  v16 = *(_BYTE *)v8;\n  v17 = 0LL;\n  while ( 1 )\n  {\n    v18 = (signed int)v17;\n    if ( v11 != 30 || !*(_BYTE *)(v6 + 139) )\n    {\nLABEL_15:\n      v19 = *(_QWORD *)(v6 + 8);\n      v20 = v12 + 1;\n      *(_QWORD *)(v6 + 72) = v12 + 1;\n      v21 = *(_BYTE *)(v19 + v12);\n      goto LABEL_16;\n    }\n    if ( *(_BYTE *)(v6 + 140) )\n    {\n      if ( v12 != *(_QWORD *)(v6 + 48) && *(_DWORD *)(*(_QWORD *)(v6 + 16) + 4 * v12) == -1 )\n        goto LABEL_15;\n      v21 = *(_BYTE *)(*(_QWORD *)(v6 + 40) + *(_QWORD *)v6 + *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12));\n      if ( v21 & 0x80 )\n        goto LABEL_15;\n      v23 = 1LL;\n      if ( *(_DWORD *)(v6 + 144) != 1 )\n        v23 = (signed int)sub_40C840(v6, v12);\n      v20 = v12 + v23;\n      *(_QWORD *)(v6 + 72) = v20;\n    }\n    else\n    {\n      v20 = v12 + 1;\n      v24 = (char *)(*(_QWORD *)(v6 + 40) + *(_QWORD *)v6 + v12);\n      *(_QWORD *)(v6 + 72) = v20;\n      v21 = *v24;\n    }\nLABEL_16:\n    if ( *(_QWORD *)(v6 + 104) <= v20 )\n      return 7LL;\n    if ( v16 == v21 && *(_BYTE *)(*(_QWORD *)(v6 + 8) + v20) == 93 )\n      break;\n    *(_BYTE *)(*(_QWORD *)(a1 + 8) + v17++) = v21;\n    if ( v17 == 32 )\n      return 7LL;\n    v11 = *(_BYTE *)(v8 + 8);\n    v12 = *(_QWORD *)(v6 + 72);\n  }\n  *(_QWORD *)(v6 + 72) = v20 + 1;\n  *(_BYTE *)(*(_QWORD *)(a1 + 8) + v18) = 0;\n  v22 = *(_BYTE *)(v8 + 8);\n  if ( v22 == 28 )\n  {\n    *(_DWORD *)a1 = 2;\n    result = 0LL;\n  }\n  else if ( v22 == 30 )\n  {\n    *(_DWORD *)a1 = 4;\n    result = 0LL;\n  }\n  else\n  {\n    result = 0LL;\n    if ( v22 == 26 )\n      *(_DWORD *)a1 = 3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x415130L", 
            "funcEndAddr": "0x41534dL", 
            "funcName": "sub_415130"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_415350(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r12@1\n  __int64 v4; // r15@2\n  __int64 v5; // rdx@2\n  __int64 v6; // r13@2\n  signed int v7; // eax@2\n  __int64 v8; // rbx@2\n  unsigned __int8 v9; // bp@2\n  char v10; // r14@2\n  __int64 v11; // rax@6\n  __int64 v12; // ST08_8@6\n  int v13; // er14@6\n  __int64 v14; // rdx@6\n  __int64 v15; // ST08_8@9\n  signed __int64 v16; // rcx@10\n  signed __int64 result; // rax@11\n  unsigned __int8 v18; // r14@15\n  wint_t v19; // ebp@17\n  signed __int64 v20; // r12@43\n  char v21; // al@44\n  unsigned __int8 v22; // dl@44\n  __int64 v23; // rdi@86\n  __int64 v24; // rsi@89\n  __int64 v25; // rdi@89\n  int v26; // eax@96\n  int v27; // [sp+8h] [bp-50h]@15\n  char v28; // [sp+10h] [bp-48h]@44\n  char v29; // [sp+18h] [bp-40h]@44\n\n  v3 = *(_QWORD *)(a2 + 72);\n  if ( *(_QWORD *)(a2 + 104) <= v3 )\n  {\n    *(_BYTE *)(a1 + 8) = 2;\n    return 0LL;\n  }\n  v4 = a3;\n  v5 = *(_QWORD *)(a2 + 8);\n  v6 = a2;\n  v7 = *(_DWORD *)(a2 + 144);\n  v8 = a1;\n  v9 = *(_BYTE *)(v5 + v3);\n  v10 = *(_BYTE *)(a1 + 10) & 0x9F;\n  *(_BYTE *)(a1 + 10) = v10;\n  *(_BYTE *)a1 = v9;\n  if ( v7 <= 1 )\n  {\n    if ( v9 != 92 )\n    {\n      *(_BYTE *)(a1 + 8) = 1;\n      v15 = v5;\n      *(_BYTE *)(a1 + 10) = (((v9 == 95) | ((*__ctype_b_loc())[v9] >> 3) & 1) << 6) | v10;\n      v14 = v15;\nLABEL_7:\n      switch ( v9 )\n      {\n        case 0x28u:\n          result = 1LL;\n          if ( v4 & 0x2000 )\n            goto LABEL_23;\n          break;\n        case 0x29u:\n          result = 1LL;\n          if ( v4 & 0x2000 )\n            goto LABEL_25;\n          break;\n        case 0x2Au:\n          *(_BYTE *)(a1 + 8) = 11;\n          result = 1LL;\n          break;\n        case 0x2Bu:\n          result = 1LL;\n          if ( !(v4 & 0x402) )\n            goto LABEL_28;\n          break;\n        case 0x2Eu:\n          *(_BYTE *)(a1 + 8) = 5;\n          result = 1LL;\n          break;\n        case 0x3Fu:\n          result = 1LL;\n          if ( !(v4 & 0x402) )\n            goto LABEL_31;\n          break;\n        case 0x5Bu:\n          *(_BYTE *)(a1 + 8) = 20;\n          result = 1LL;\n          break;\n        case 0x5Eu:\n          if ( !(v4 & 0x800008) && v3 && (*(_BYTE *)(v14 + v3 - 1) != 10 || !(v4 & 0x800)) )\n            goto LABEL_39;\n          *(_BYTE *)(a1 + 8) = 12;\n          result = 1LL;\n          *(_DWORD *)a1 = 16;\n          break;\n        case 0x7Bu:\n          result = 1LL;\n          if ( (v4 & 0x1200) == 4608 )\n            goto LABEL_37;\n          break;\n        case 0x7Cu:\n          if ( (v4 & 0x8400) == 0x8000 )\n            goto LABEL_41;\n          goto LABEL_39;\n        default:\nLABEL_39:\n          result = 1LL;\n          break;\n        case 0xAu:\n          result = 1LL;\n          if ( v4 & 0x800 )\n          {\nLABEL_41:\n            *(_BYTE *)(a1 + 8) = 10;\n            result = 1LL;\n          }\n          break;\n        case 0x24u:\n          if ( v4 & 8\n            || (v20 = v3 + 1, v20 == *(_QWORD *)(a2 + 88))\n            || (*(_QWORD *)(a2 + 72) = v20,\n                sub_415350(&v28, a2, v4),\n                v21 = v29,\n                --*(_QWORD *)(a2 + 72),\n                v22 = v21 - 9,\n                result = 1LL,\n                v22 <= 1u) )\n          {\n            *(_BYTE *)(a1 + 8) = 12;\n            result = 1LL;\n            *(_DWORD *)a1 = 32;\n          }\n          break;\n        case 0x7Du:\n          result = 1LL;\n          if ( (v4 & 0x1200) == 4608 )\n            goto LABEL_47;\n          break;\n      }\n      return result;\n    }\n  }\n  else\n  {\n    if ( v3 != *(_QWORD *)(a2 + 48) && *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v3) == -1 )\n    {\n      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFDFFF00 | 0x200001;\n      return 1LL;\n    }\n    if ( v9 != 92 )\n    {\n      v11 = *(_QWORD *)(a2 + 16);\n      *(_BYTE *)(a1 + 8) = 1;\n      v12 = v5;\n      v13 = *(_DWORD *)(v11 + 4 * v3);\n      *(_BYTE *)(a1 + 10) = (((v13 == 95) | (iswalnum(*(_DWORD *)(v11 + 4 * v3)) != 0)) << 6) | *(_BYTE *)(a1 + 10) & 0xBF;\n      v14 = v12;\n      goto LABEL_7;\n    }\n  }\n  v16 = v3 + 1;\n  if ( v3 + 1 >= *(_QWORD *)(a2 + 88) )\n  {\n    *(_BYTE *)(a1 + 8) = 36;\n    return 1LL;\n  }\n  if ( !*(_BYTE *)(a2 + 139) )\n    goto LABEL_15;\n  if ( v7 > 1 )\n  {\n    v23 = *(_QWORD *)(a2 + 16);\n    v19 = *(_DWORD *)(v23 + 4 * v16);\n    if ( v19 == -1 || *(_QWORD *)(a2 + 48) != v3 + 2 && *(_DWORD *)(v23 + 4 * v16 + 4) == -1 )\n    {\n      v26 = *(_BYTE *)(v5 + v3 + 1);\n      *(_BYTE *)(v8 + 8) = 1;\n      v18 = v26;\n      *(_BYTE *)v8 = v26;\n      v27 = v26;\n      goto LABEL_18;\n    }\n  }\n  v24 = *(_QWORD *)a2;\n  v25 = *(_QWORD *)(v6 + 40);\n  if ( *(_BYTE *)(v6 + 140) )\n  {\n    v18 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v16) + v25 + v24);\n    v27 = v18;\n    if ( *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v16) + v25 + v24) & 0x80 )\n    {\nLABEL_15:\n      v27 = *(_BYTE *)(v5 + v3 + 1);\n      v18 = *(_BYTE *)(v5 + v3 + 1);\n      goto LABEL_16;\n    }\n  }\n  else\n  {\n    v18 = *(_BYTE *)(v16 + v24 + v25);\n    v27 = *(_BYTE *)(v16 + v24 + v25);\n  }\nLABEL_16:\n  *(_BYTE *)v8 = v18;\n  *(_BYTE *)(v8 + 8) = 1;\n  if ( v7 > 1 )\n  {\n    v19 = *(_DWORD *)(*(_QWORD *)(v6 + 16) + 4 * v16);\nLABEL_18:\n    *(_BYTE *)(v8 + 10) = (((v19 == 95) | (iswalnum(v19) != 0)) << 6) | *(_BYTE *)(v8 + 10) & 0xBF;\n    goto LABEL_19;\n  }\n  *(_BYTE *)(v8 + 10) = *(_BYTE *)(v8 + 10) & 0xBF | (((v18 == 95) | ((*__ctype_b_loc())[v18] >> 3) & 1) << 6);\nLABEL_19:\n  switch ( v18 )\n  {\n    case 0x7Du:\n      result = 2LL;\n      if ( (v4 & 0x1200) == 512 )\nLABEL_47:\n        *(_BYTE *)(v8 + 8) = 24;\n      break;\n    case 0x7Cu:\n      result = 2LL;\n      if ( !(v4 & 0x8400) )\n        *(_BYTE *)(v8 + 8) = 10;\n      break;\n    case 0x7Bu:\n      result = 2LL;\n      if ( (v4 & 0x1200) == 512 )\nLABEL_37:\n        *(_BYTE *)(v8 + 8) = 23;\n      break;\n    case 0x77u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n        *(_BYTE *)(v8 + 8) = 32;\n      break;\n    case 0x73u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n        *(_BYTE *)(v8 + 8) = 34;\n      break;\n    case 0x62u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        *(_BYTE *)(v8 + 8) = 12;\n        *(_DWORD *)v8 = 256;\n      }\n      break;\n    case 0x60u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        *(_BYTE *)(v8 + 8) = 12;\n        *(_DWORD *)v8 = 64;\n      }\n      break;\n    case 0x57u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n        *(_BYTE *)(v8 + 8) = 33;\n      break;\n    case 0x53u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n        *(_BYTE *)(v8 + 8) = 35;\n      break;\n    case 0x42u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        *(_BYTE *)(v8 + 8) = 12;\n        *(_DWORD *)v8 = 512;\n      }\n      break;\n    case 0x3Fu:\n      result = 2LL;\n      if ( (v4 & 0x402) == 2 )\nLABEL_31:\n        *(_BYTE *)(v8 + 8) = 19;\n      break;\n    case 0x3Eu:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        *(_BYTE *)(v8 + 8) = 12;\n        *(_DWORD *)v8 = 9;\n      }\n      break;\n    case 0x3Cu:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        *(_BYTE *)(v8 + 8) = 12;\n        *(_DWORD *)v8 = 6;\n      }\n      break;\n    case 0x31u:\n    case 0x32u:\n    case 0x33u:\n    case 0x34u:\n    case 0x35u:\n    case 0x36u:\n    case 0x37u:\n    case 0x38u:\n    case 0x39u:\n      result = 2LL;\n      if ( !(v4 & 0x4000) )\n      {\n        *(_BYTE *)(v8 + 8) = 4;\n        *(_QWORD *)v8 = v27 - 49;\n      }\n      break;\n    case 0x2Bu:\n      result = 2LL;\n      if ( (v4 & 0x402) == 2 )\nLABEL_28:\n        *(_BYTE *)(v8 + 8) = 18;\n      break;\n    case 0x29u:\n      result = 2LL;\n      if ( !(v4 & 0x2000) )\nLABEL_25:\n        *(_BYTE *)(v8 + 8) = 9;\n      break;\n    case 0x28u:\n      result = 2LL;\n      if ( !(v4 & 0x2000) )\nLABEL_23:\n        *(_BYTE *)(v8 + 8) = 8;\n      break;\n    case 0x27u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        *(_BYTE *)(v8 + 8) = 12;\n        *(_DWORD *)v8 = 128;\n      }\n      break;\n    default:\n      result = 2LL;\n      break;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x415350L", 
            "funcEndAddr": "0x4159f3L", 
            "funcName": "sub_415350"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_415A00(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp@1\n  signed __int64 v4; // rbx@1\n  int v5; // eax@2\n  __int64 v6; // rdx@2\n  char v7; // al@2\n  signed __int64 v8; // rbx@10\n\n  v3 = a3;\n  v4 = -1LL;\n  while ( 1 )\n  {\n    v5 = sub_415350(a2, a1, v3);\n    v6 = *(_BYTE *)a2;\n    *(_QWORD *)(a1 + 72) += v5;\n    v7 = *(_BYTE *)(a2 + 8);\n    if ( v7 == 2 )\n      break;\n    if ( v7 == 24 || (_BYTE)v6 == 44 )\n      return v4;\n    if ( v7 != 1 || (unsigned __int8)(v6 - 48) > 9u || v4 == -2 )\n    {\n      v4 = -2LL;\n    }\n    else if ( v4 == -1 )\n    {\n      v4 = (unsigned __int8)v6 - 48;\n    }\n    else\n    {\n      v8 = v6 + 10 * v4;\n      if ( v8 > 32816 )\n        v8 = 32816LL;\n      v4 = v8 - 48;\n    }\n  }\n  return -2LL;\n}\n", 
            "funcStartAddr": "0x415a00L", 
            "funcEndAddr": "0x415ab6L", 
            "funcName": "sub_415A00"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_415AC0(__int64 a1, __int64 a2, const __m128i *a3, __int64 a4, __int64 a5, _DWORD *a6)\n{\n  char v6; // al@1\n  const __m128i *v7; // r12@1\n  __int64 v8; // r15@1\n  int v9; // eax@7\n  unsigned __int64 v10; // rbp@7\n  char *result; // rax@9\n  unsigned __int64 v12; // rbx@10\n  char **v13; // rax@10\n  signed __int64 v14; // rax@17\n  signed __int64 v15; // rbx@17\n  __int64 v16; // r13@18\n  __m128i v17; // xmm0@18\n  __int64 v18; // rbp@22\n  char v19; // al@24\n  char **v20; // r13@25\n  signed int *v21; // r14@25\n  char *v22; // rax@25\n  char **v23; // rdx@25\n  signed __int64 v24; // rbx@26\n  char *v25; // r12@27\n  char **v26; // rbp@27\n  char *v27; // rax@28\n  char *v28; // rax@30\n  char *v29; // rax@34\n  char **v30; // r14@46\n  signed __int64 v31; // rbp@46\n  char *v32; // r15@46\n  char *v33; // rax@49\n  char *v34; // rax@49\n  signed __int64 v35; // rax@59\n  __m128i v36; // xmm0@59\n  char v37; // al@61\n  signed __int64 v38; // rax@70\n  char *v39; // r14@88\n  char *v40; // rax@92\n  __int64 v41; // rdx@92\n  bool v42; // zf@93\n  void *v43; // r13@95\n  int v44; // ebx@96\n  char v45; // al@96\n  char v46; // r9@100\n  int v47; // eax@101\n  int v48; // eax@102\n  char v49; // dl@103\n  _DWORD *v50; // rbx@106\n  __int64 v51; // rsi@106\n  _BYTE *v52; // rcx@106\n  const char *v53; // rdx@106\n  _DWORD *v54; // r9@106\n  bool v55; // r8@106\n  char *v56; // rax@107\n  char **v57; // rbx@112\n  signed int *v58; // rbp@112\n  char *v59; // r14@113\n  __int64 v60; // rax@114\n  char *v61; // r13@117\n  __int64 v62; // rax@119\n  __int64 v63; // rbx@120\n  int v64; // er14@125\n  char v65; // al@126\n  char v66; // al@127\n  char **v67; // r13@130\n  signed int *v68; // rbp@130\n  char *v69; // rax@132\n  char **v70; // rbx@132\n  char *v71; // r14@133\n  char *v72; // rcx@133\n  char *v73; // rax@140\n  int v74; // eax@142\n  char v75; // al@143\n  __int64 v76; // rdx@146\n  _DWORD *v77; // rax@146\n  int v78; // eax@149\n  int v79; // eax@152\n  __int64 v80; // ST10_8@161\n  int v81; // eax@161\n  _DWORD *v82; // r9@161\n  __int64 v83; // rax@161\n  char *v84; // rax@164\n  int v85; // eax@165\n  char v86; // r10@165\n  int v87; // eax@168\n  __int64 v88; // rdx@168\n  int v89; // esi@171\n  unsigned __int8 v90; // di@175\n  int v91; // ecx@177\n  const char *v92; // r9@178\n  unsigned int v93; // er8@181\n  unsigned int v94; // er9@183\n  __int64 v95; // rax@189\n  _DWORD *v96; // rcx@189\n  __int64 v97; // rcx@190\n  signed __int64 v98; // rax@191\n  size_t v99; // rsi@203\n  char *v100; // rax@206\n  signed int v101; // edx@208\n  __int64 v102; // rcx@209\n  __int64 v103; // rax@209\n  __int64 v104; // rax@220\n  char **v105; // rbp@220\n  signed int *v106; // rbx@220\n  char *v107; // rax@220\n  char *v108; // rsi@220\n  char *v109; // rax@220\n  char *v110; // rax@224\n  wint_t v111; // eax@229\n  signed int v112; // ebx@230\n  signed int v113; // ebp@230\n  const unsigned __int16 **v114; // rax@231\n  signed __int64 v115; // rsi@231\n  int v116; // er9@231\n  signed __int64 v117; // rdi@231\n  __int64 v118; // rax@232\n  wint_t v119; // eax@240\n  void *v120; // rdi@250\n  void *v121; // rax@250\n  void *v122; // ST28_8@254\n  __int64 v123; // [sp+0h] [bp-118h]@10\n  signed __int64 v124; // [sp+0h] [bp-118h]@23\n  void *v125; // [sp+0h] [bp-118h]@95\n  __int64 v126; // [sp+8h] [bp-110h]@1\n  __int64 v127; // [sp+10h] [bp-108h]@1\n  char *v128; // [sp+18h] [bp-100h]@6\n  signed __int64 v129; // [sp+18h] [bp-100h]@100\n  __m128i v130; // [sp+20h] [bp-F8h]@23\n  _DWORD *v131; // [sp+30h] [bp-E8h]@1\n  const __m128i *v132; // [sp+38h] [bp-E0h]@27\n  __int64 v133; // [sp+40h] [bp-D8h]@172\n  void *ptr; // [sp+48h] [bp-D0h]@229\n  size_t size; // [sp+50h] [bp-C8h]@250\n  unsigned int v136; // [sp+58h] [bp-C0h]@250\n  unsigned int v137; // [sp+5Ch] [bp-BCh]@250\n  __int64 v138; // [sp+68h] [bp-B0h]@95\n  int v139; // [sp+70h] [bp-A8h]@101\n  const char *v140; // [sp+78h] [bp-A0h]@101\n  int v141; // [sp+80h] [bp-98h]@167\n  const char *v142; // [sp+88h] [bp-90h]@167\n  char v143; // [sp+90h] [bp-88h]@165\n  char v144; // [sp+98h] [bp-80h]@165\n  void *v145; // [sp+A0h] [bp-78h]@101\n  char v146; // [sp+A8h] [bp-70h]@218\n  char v147; // [sp+C0h] [bp-58h]@25\n  char v148; // [sp+C8h] [bp-50h]@25\n\n  v127 = *(_QWORD *)a2;\n  v6 = a3->m128i_i64[1];\n  v7 = a3;\n  v131 = a6;\n  v126 = a4;\n  v8 = a1;\n  switch ( v6 )\n  {\n    case 23:\n      if ( a4 & 0x1000000 )\n        goto LABEL_43;\n      goto LABEL_3;\n    case 11:\n    case 18:\n    case 19:\nLABEL_3:\n      if ( a4 & 0x20 )\n        goto LABEL_43;\n      if ( a4 & 0x10 )\n      {\n        v80 = a5;\n        v81 = sub_415350((__int64)a3, a1, a4);\n        v82 = v131;\n        *(_QWORD *)(a1 + 72) += v81;\n        LODWORD(v83) = sub_415AC0(a1, a2, v7, v126, v80, v82);\n        return (char *)v83;\n      }\n      if ( v6 == 9 )\n      {\nLABEL_136:\n        if ( !(a4 & 0x20000) )\n        {\n          v128 = 0LL;\n          *v131 = 16;\n          return v128;\n        }\n      }\nLABEL_6:\n      LOBYTE(a3->m128i_i64[1]) = 1;\n      v128 = sub_40D500((char **)(v127 + 112), (signed int *)(v127 + 128), 0LL, 0LL, a3);\n      if ( !v128 )\n        goto LABEL_118;\n      goto LABEL_7;\n    case 24:\n      goto LABEL_6;\n    case 8:\n      v12 = *(_QWORD *)(a2 + 48);\n      v123 = a5;\n      *(_QWORD *)(a2 + 48) = v12 + 1;\n      *(_QWORD *)(a1 + 72) += (signed int)sub_415350((__int64)a3, a1, a4 | 0x800000);\n      v13 = 0LL;\n      if ( LOBYTE(v7->m128i_i64[1]) == 9 )\n        goto LABEL_138;\n      LODWORD(v13) = sub_4170F0(a1, a2, v7, v126, v123 + 1, v131);\n      if ( *v131 )\n        return 0LL;\n      if ( LOBYTE(v7->m128i_i64[1]) != 9 )\n      {\n        if ( v13 )\n          sub_40AD30((__int64)v13, (int (__fastcall *)(__int64, __int64))sub_40BF40, 0LL);\n        *v131 = 8;\n        return 0LL;\n      }\nLABEL_138:\n      if ( v12 <= 8 )\n        *(_QWORD *)(v127 + 168) |= 1 << v12;\n      v148 = 17;\n      v73 = sub_40D500((char **)(v127 + 112), (signed int *)(v127 + 128), v13, 0LL, (const __m128i *)&v147);\n      v128 = v73;\n      if ( v73 )\n      {\n        *((_QWORD *)v73 + 5) = v12;\n        goto LABEL_7;\n      }\n      goto LABEL_118;\n    default:\n      return 0LL;\n    case 20:\n      v138 = 0LL;\n      v125 = calloc(0x20uLL, 1uLL);\n      v43 = calloc(0x50uLL, 1uLL);\n      if ( v43 == 0LL || v125 == 0LL )\n      {\n        free(v125);\n        free(v43);\n        goto LABEL_118;\n      }\n      v44 = sub_40ADA0((__int64)v7, a1, v126);\n      v45 = v7->m128i_i64[1];\n      if ( v45 == 2 )\n        goto LABEL_197;\n      LOBYTE(v132) = 0;\n      if ( v45 != 25 )\n        goto LABEL_98;\n      *((_BYTE *)v43 + 32) |= 1u;\n      if ( v126 & 0x100 )\n        *(_QWORD *)v125 |= 0x400uLL;\n      *(_QWORD *)(a1 + 72) += v44;\n      v44 = sub_40ADA0((__int64)v7, a1, v126);\n      v45 = v7->m128i_i64[1];\n      if ( v45 == 2 )\n      {\nLABEL_197:\n        *v131 = 2;\n        goto LABEL_150;\n      }\n      LOBYTE(v132) = 1;\nLABEL_98:\n      if ( v45 == 21 )\n        LOBYTE(v7->m128i_i64[1]) = 1;\n      v130.m128i_i64[0] = 0LL;\n      v46 = 1;\n      v129 = 0LL;\n      while ( 2 )\n      {\n        v140 = (const char *)&v145;\n        v139 = 3;\n        v47 = sub_415130((__int64)&v139, v8, (__int64)v7, v44, v126, v46 & 1);\n        if ( v47 )\n        {\nLABEL_162:\n          *v131 = v47;\n          goto LABEL_150;\n        }\n        v44 = sub_40ADA0((__int64)v7, v8, v126);\n        v48 = v139;\n        if ( !((v139 - 2) & 0xFFFFFFFD) )\n          goto LABEL_105;\n        v49 = v7->m128i_i64[1];\n        if ( v49 == 2 )\n          goto LABEL_160;\n        if ( v49 != 22 )\n          goto LABEL_105;\n        *(_QWORD *)(v8 + 72) += v44;\n        v85 = sub_40ADA0((__int64)&v143, v8, v126);\n        if ( v144 == 2 )\n        {\nLABEL_160:\n          *v131 = 7;\nLABEL_150:\n          free(v125);\n          sub_40BEF0((__int64)v43);\n          if ( *v131 )\n            return 0LL;\n          v128 = 0LL;\n          goto LABEL_7;\n        }\n        if ( v144 == 21 )\n        {\n          *(_QWORD *)(v8 + 72) += -v44;\n          v48 = v139;\n          LOBYTE(v7->m128i_i64[1]) = 1;\nLABEL_105:\n          switch ( v48 )\n          {\n            case 2:\n              v74 = sub_4100D0((__int64)v125, v140);\n              *v131 = v74;\n              if ( !v74 )\n                goto LABEL_143;\n              goto LABEL_150;\n            case 1:\n              v76 = *((_QWORD *)v43 + 5);\n              v77 = *(_DWORD **)v43;\n              if ( v76 != v129 )\n                goto LABEL_147;\n              v99 = 4 * (2 * v129 + 1);\n              v129 = 2 * v129 + 1;\n              v77 = realloc(*(void **)v43, v99);\n              if ( !v77 )\n                goto LABEL_219;\n              *(_QWORD *)v43 = v77;\n              v76 = *((_QWORD *)v43 + 5);\nLABEL_147:\n              *((_QWORD *)v43 + 5) = v76 + 1;\n              v77[v76] = (_DWORD)v140;\n              goto LABEL_143;\n            case 0:\n              *(_QWORD *)((char *)v125 + (((unsigned __int64)(unsigned __int8)v140 >> 3) & 0x18)) |= 1LL << (char)v140;\n              goto LABEL_143;\n            case 4:\n              v78 = sub_410120(\n                      *(_QWORD *)(v8 + 120),\n                      (__int64)v125,\n                      (void **)v43 + 3,\n                      (__int64 *)v43 + 9,\n                      &v138,\n                      v140,\n                      v126);\n              *v131 = v78;\n              if ( v78 )\n                goto LABEL_150;\n              goto LABEL_143;\n            case 3:\n              v79 = sub_4100D0((__int64)v125, v140);\n              *v131 = v79;\n              if ( v79 )\n                goto LABEL_150;\n              break;\n            default:\n              __assert_fail(\"0\", \"lib/regcomp.c\", 0xCF3u, \"parse_bracket_exp\");\n              return result;\n          }\n          goto LABEL_143;\n        }\n        v141 = 3;\n        v142 = &v147;\n        v47 = sub_415130((__int64)&v141, v8, (__int64)&v143, v85, v86, 1);\n        if ( v47 )\n          goto LABEL_162;\n        v87 = sub_40ADA0((__int64)v7, v8, v126);\n        v88 = 0LL;\n        v44 = v87;\n        if ( *(_DWORD *)(v127 + 180) >= 2 )\n          v88 = (__int64)v43;\n        if ( !((v139 - 2) & 0xFFFFFFFD) || (v89 = v141, !((v141 - 2) & 0xFFFFFFFD)) )\n        {\nLABEL_243:\n          *v131 = 11;\n          goto LABEL_150;\n        }\n        LOBYTE(v133) = v139 == 3;\n        if ( v139 == 3 )\n        {\n          if ( strlen(v140) > 1 || v141 == 3 && strlen(v142) > 1 )\n            goto LABEL_228;\n          v90 = *v140;\n        }\n        else\n        {\n          if ( v141 == 3 )\n          {\n            v92 = v142;\n            if ( strlen(v142) > 1 )\n              goto LABEL_228;\n            v90 = 0;\n            if ( v139 )\n            {\nLABEL_179:\n              v91 = *v92;\n              goto LABEL_180;\n            }\n          }\n          else if ( v139 )\n          {\n            v90 = 0;\n            v91 = 0;\n            if ( v141 )\n              goto LABEL_180;\n            goto LABEL_242;\n          }\n          v90 = (unsigned __int8)v140;\n        }\n        if ( v141 )\n        {\n          v91 = 0;\n          if ( v141 != 3 )\n            goto LABEL_180;\n          v92 = v142;\n          goto LABEL_179;\n        }\nLABEL_242:\n        v91 = (unsigned __int8)v142;\nLABEL_180:\n        if ( !v139 || (v93 = (unsigned int)v140, (_BYTE)v133) )\n        {\n          LODWORD(ptr) = v91;\n          v133 = v88;\n          v119 = sub_40B4B0(v90, v88);\n          v89 = v141;\n          LOBYTE(v91) = (_BYTE)ptr;\n          v93 = v119;\n          v88 = v133;\n        }\n        if ( !v89 || (v94 = (unsigned int)v142, v89 == 3) )\n        {\n          LODWORD(ptr) = v93;\n          v133 = v88;\n          v111 = sub_40B4B0(v91, v88);\n          v93 = (unsigned int)ptr;\n          v88 = v133;\n          v94 = v111;\n        }\n        if ( v93 == -1 || v94 == -1 )\n        {\nLABEL_228:\n          *v131 = 3;\n          goto LABEL_150;\n        }\n        if ( v126 & 0x10000 && v93 > v94 )\n          goto LABEL_243;\n        if ( v88 )\n        {\n          v95 = *(_QWORD *)(v88 + 64);\n          v96 = *(_DWORD **)(v88 + 8);\n          if ( v95 == v130.m128i_i64[0] )\n          {\n            v120 = *(void **)(v88 + 8);\n            v137 = v94;\n            v136 = v93;\n            v133 = v88;\n            v130.m128i_i64[0] = 2 * v130.m128i_i64[0] + 1;\n            size = 4 * v130.m128i_i64[0];\n            ptr = realloc(v120, 4 * v130.m128i_i64[0]);\n            v121 = realloc(*(void **)(v133 + 16), 4 * v130.m128i_i64[0]);\n            v96 = ptr;\n            if ( !ptr || (v88 = v133, v93 = v136, v94 = v137, !v121) )\n            {\n              v122 = v121;\n              free(ptr);\n              free(v122);\n              *v131 = 12;\n              goto LABEL_150;\n            }\n            *(_QWORD *)(v133 + 16) = v121;\n            v95 = *(_QWORD *)(v88 + 64);\n            *(_QWORD *)(v88 + 8) = v96;\n          }\n          v96[v95] = v93;\n          v97 = *(_QWORD *)(v88 + 16);\n          *(_QWORD *)(v88 + 64) = v95 + 1;\n          *(_DWORD *)(v97 + 4 * v95) = v94;\n        }\n        v98 = 0LL;\n        do\n        {\n          if ( v93 <= (unsigned int)v98 && v94 >= (unsigned int)v98 )\n            *((_QWORD *)v125 + (v98 >> 6)) |= 1LL << v98;\n          ++v98;\n        }\n        while ( v98 != 256 );\n        *v131 = 0;\nLABEL_143:\n        v75 = v7->m128i_i64[1];\n        if ( v75 == 2 )\n          goto LABEL_160;\n        if ( v75 != 21 )\n        {\n          v46 = 0;\n          continue;\n        }\n        break;\n      }\n      *(_QWORD *)(v8 + 72) += v44;\n      if ( (_BYTE)v132 )\n      {\n        v100 = (char *)v125;\n        do\n        {\n          *(_QWORD *)v100 = ~*(_QWORD *)v100;\n          v100 += 8;\n        }\n        while ( (char *)v125 + 32 != v100 );\n      }\n      v101 = *(_DWORD *)(v127 + 180);\n      if ( v101 > 1 )\n      {\n        v102 = *(_QWORD *)(v127 + 120);\n        v103 = 0LL;\n        do\n        {\n          *(_QWORD *)((char *)v125 + v103) &= *(_QWORD *)(v102 + v103);\n          v103 += 8LL;\n        }\n        while ( v103 != 32 );\n      }\n      if ( !*((_QWORD *)v43 + 5)\n        && !*((_QWORD *)v43 + 6)\n        && !*((_QWORD *)v43 + 7)\n        && !*((_QWORD *)v43 + 8)\n        && (v101 <= 1 || !*((_QWORD *)v43 + 9) && !(*((_BYTE *)v43 + 32) & 1)) )\n      {\n        sub_40BEF0((__int64)v43);\n        v146 = 3;\n        v145 = v125;\n        v128 = sub_40D500((char **)(v127 + 112), (signed int *)(v127 + 128), 0LL, 0LL, (const __m128i *)&v145);\n        if ( v128 )\n          goto LABEL_7;\n        goto LABEL_219;\n      }\n      v104 = v127;\n      *(_BYTE *)(v104 + 176) |= 2u;\n      v105 = (char **)(v127 + 112);\n      v106 = (signed int *)(v127 + 128);\n      v146 = 6;\n      v145 = v43;\n      v107 = sub_40D500((char **)(v104 + 112), (signed int *)(v104 + 128), 0LL, 0LL, (const __m128i *)&v145);\n      v108 = v107;\n      v128 = v107;\n      v109 = (char *)v125;\n      if ( !v108 )\n        goto LABEL_219;\n      while ( !*(_QWORD *)v109 )\n      {\n        v109 += 8;\n        if ( (char *)v125 + 32 == v109 )\n        {\n          free(v125);\n          goto LABEL_7;\n        }\n      }\n      v146 = 3;\n      v145 = v125;\n      v110 = sub_40D500(v105, v106, 0LL, 0LL, (const __m128i *)&v145);\n      if ( !v110\n        || (v148 = 10, (v128 = sub_40D500(v105, v106, (char **)v110, (char **)v128, (const __m128i *)&v147)) == 0LL) )\n      {\nLABEL_219:\n        *v131 = 12;\n        goto LABEL_150;\n      }\nLABEL_7:\n      v9 = sub_415350((__int64)v7, v8, v126);\n      v10 = LOBYTE(v7->m128i_i64[1]);\n      *(_QWORD *)(v8 + 72) += v9;\n      while ( 2 )\n      {\n        if ( (unsigned __int8)v10 > 0x17u )\n          return v128;\n        v14 = 9177088LL;\n        LOBYTE(v15) = (_BYTE)v10 == 18;\n        if ( !_bittest64(&v14, v10) )\n          return v128;\n        v16 = *(_QWORD *)(v8 + 72);\n        v17 = _mm_load_si128(v7);\n        if ( (_BYTE)v10 == 23 )\n        {\n          v130 = v17;\n          v35 = sub_415A00(v8, (__int64)v7, v126);\n          v36 = _mm_load_si128(&v130);\n          v124 = v35;\n          if ( v35 == -1 )\n          {\n            if ( LOBYTE(v7->m128i_i64[1]) != 1 || LOBYTE(v7->m128i_i64[0]) != 44 )\n              goto LABEL_85;\n            v15 = 0LL;\n          }\n          else\n          {\n            if ( v35 == -2 )\n            {\nLABEL_63:\n              if ( v126 & 0x200000 )\n              {\nLABEL_64:\n                *(_QWORD *)(v8 + 72) = v16;\n                v29 = v128;\n                *v7 = v36;\n                LOBYTE(v7->m128i_i64[1]) = 1;\n                goto LABEL_35;\n              }\n              if ( LOBYTE(v7->m128i_i64[1]) == 2 )\n                *v131 = 9;\n              else\nLABEL_85:\n                *v131 = 10;\nLABEL_86:\n              if ( v128 )\n                goto LABEL_51;\n              return 0LL;\n            }\n            v37 = v7->m128i_i64[1];\n            if ( v37 == 24 )\n            {\n              v15 = v124;\n              goto LABEL_81;\n            }\n            if ( v37 != 1 )\n              goto LABEL_63;\n            if ( LOBYTE(v7->m128i_i64[0]) != 44 )\n            {\n              if ( !(v126 & 0x200000) )\n                goto LABEL_85;\n              goto LABEL_64;\n            }\n            v15 = v124;\n          }\n          v130 = v36;\n          v38 = sub_415A00(v8, (__int64)v7, v126);\n          v36 = _mm_load_si128(&v130);\n          v124 = v38;\n          if ( v38 == -2 )\n            goto LABEL_63;\n          if ( v38 != -1 && v38 < v15 || LOBYTE(v7->m128i_i64[1]) != 24 )\n            goto LABEL_85;\n          if ( v38 == -1 )\n          {\n            if ( v15 > 0x7FFF )\n              goto LABEL_82;\n            goto LABEL_76;\n          }\nLABEL_81:\n          if ( v124 > 0x7FFF )\n          {\nLABEL_82:\n            *v131 = 15;\n            goto LABEL_86;\n          }\nLABEL_76:\n          *(_QWORD *)(v8 + 72) += (signed int)sub_415350((__int64)v7, v8, v126);\n          if ( !v128 )\n            goto LABEL_65;\n          if ( !(v15 | v124) )\n          {\n            sub_40AD30((__int64)v128, (int (__fastcall *)(__int64, __int64))sub_40BF40, 0LL);\n            if ( *v131 )\n              goto LABEL_51;\n            goto LABEL_66;\n          }\n          if ( v15 <= 0 )\n          {\n            v18 = (__int64)v128;\n            v41 = 0LL;\n            goto LABEL_93;\n          }\n          if ( v15 == 1 )\n          {\n            v39 = v128;\n            v23 = (char **)v128;\nLABEL_89:\n            if ( v15 == v124 )\n            {\nLABEL_90:\n              v128 = (char *)v23;\n              goto LABEL_38;\n            }\n            goto LABEL_92;\n          }\n          v30 = (char **)v128;\n          v130.m128i_i64[0] = v8;\n          v31 = 2LL;\n          v132 = v7;\n          v32 = v128;\n          while ( 1 )\n          {\n            v33 = sub_40D5E0(v32, v127);\n            v32 = v33;\n            v148 = 16;\n            v34 = sub_40D500(\n                    (char **)(v127 + 112),\n                    (signed int *)(v127 + 128),\n                    v30,\n                    (char **)v33,\n                    (const __m128i *)&v147);\n            v30 = (char **)v34;\n            if ( !v32 || !v34 )\n              break;\n            if ( v15 < ++v31 )\n            {\n              v39 = v32;\n              v7 = v132;\n              v8 = v130.m128i_i64[0];\n              v23 = (char **)v34;\n              goto LABEL_89;\n            }\n          }\nLABEL_50:\n          *v131 = 12;\nLABEL_51:\n          sub_40AD30((__int64)v128, (int (__fastcall *)(__int64, __int64))sub_40BF40, 0LL);\n          return 0LL;\n        }\n        v15 = (unsigned __int8)v15;\n        if ( (_BYTE)v10 == 19 )\n        {\n          *(_QWORD *)(v8 + 72) += (signed int)sub_415350((__int64)v7, v8, v126);\n          if ( v128 )\n          {\n            v18 = (__int64)v128;\n            if ( v128[48] == 17 )\n            {\n              v18 = (__int64)v128;\n              v124 = 1LL;\n              v130.m128i_i64[0] = 0LL;\n              goto LABEL_56;\n            }\n            v124 = 1LL;\n            v19 = 10;\n            v130.m128i_i64[0] = 0LL;\n            goto LABEL_25;\n          }\n          goto LABEL_65;\n        }\n        *(_QWORD *)(v8 + 72) += (signed int)sub_415350((__int64)v7, v8, v126);\n        if ( !v128 )\n        {\nLABEL_65:\n          if ( *v131 )\n            return 0LL;\nLABEL_66:\n          v128 = 0LL;\n          goto LABEL_38;\n        }\n        if ( (_BYTE)v10 == 18 )\n        {\n          v39 = v128;\n          v124 = -1LL;\n          v15 = 1LL;\n          v23 = (char **)v128;\nLABEL_92:\n          v130.m128i_i64[0] = (__int64)v23;\n          v40 = sub_40D5E0(v39, v127);\n          v41 = v130.m128i_i64[0];\n          v18 = (__int64)v40;\n          if ( !v40 )\n            goto LABEL_50;\nLABEL_93:\n          v42 = *(_BYTE *)(v18 + 48) == 17;\n          v130.m128i_i64[0] = v41;\n          if ( v42 )\n            goto LABEL_56;\n          goto LABEL_57;\n        }\n        v18 = (__int64)v128;\n        if ( v128[48] != 17 )\n        {\n          v124 = -1LL;\n          v15 = 0LL;\n          v130.m128i_i64[0] = 0LL;\n          goto LABEL_24;\n        }\n        v124 = -1LL;\n        v18 = (__int64)v128;\n        v15 = 0LL;\n        v130.m128i_i64[0] = 0LL;\nLABEL_56:\n        sub_40AD30(v18, (int (__fastcall *)(__int64, __int64))sub_40AED0, *(_QWORD *)(v18 + 40));\nLABEL_57:\n        if ( v124 == -1 )\nLABEL_24:\n          v19 = 11;\n        else\n          v19 = 10;\nLABEL_25:\n        v148 = v19;\n        v20 = (char **)(v127 + 112);\n        v21 = (signed int *)(v127 + 128);\n        v22 = sub_40D500((char **)(v127 + 112), (signed int *)(v127 + 128), (char **)v18, 0LL, (const __m128i *)&v147);\n        v23 = (char **)v22;\n        if ( !v22 )\n          goto LABEL_50;\n        v24 = v15 + 2;\n        if ( v24 <= v124 )\n        {\n          v132 = v7;\n          v25 = (char *)v18;\n          v26 = (char **)v22;\n          while ( 1 )\n          {\n            v25 = sub_40D5E0(v25, v127);\n            v148 = 16;\n            v27 = sub_40D500(v20, v21, v26, (char **)v25, (const __m128i *)&v147);\n            if ( !v25 )\n              goto LABEL_50;\n            if ( !v27 )\n              goto LABEL_50;\n            v148 = 10;\n            v28 = sub_40D500(v20, v21, (char **)v27, 0LL, (const __m128i *)&v147);\n            v26 = (char **)v28;\n            if ( !v28 )\n              goto LABEL_50;\n            if ( ++v24 > v124 )\n            {\n              v7 = v132;\n              v23 = (char **)v28;\n              break;\n            }\n          }\n        }\n        if ( !v130.m128i_i64[0] )\n          goto LABEL_90;\n        v148 = 16;\n        v29 = sub_40D500(v20, v21, (char **)v130.m128i_i64[0], v23, (const __m128i *)&v147);\nLABEL_35:\n        if ( *v131 && !v29 )\n          goto LABEL_86;\n        v128 = v29;\nLABEL_38:\n        v10 = LOBYTE(v7->m128i_i64[1]);\n        if ( !(v126 & 0x1000000) || (_BYTE)v10 != 11 && (_BYTE)v10 != 23 )\n          continue;\n        break;\n      }\n      if ( v128 )\n        sub_40AD30((__int64)v128, (int (__fastcall *)(__int64, __int64))sub_40BF40, 0LL);\nLABEL_43:\n      v128 = 0LL;\n      *v131 = 13;\n      return v128;\n    case 32:\n    case 33:\n      v50 = v131;\n      v51 = *(_QWORD *)(a1 + 120);\n      v52 = \"en_\" + 2;\n      v53 = \"alnum\";\n      v54 = v131;\n      v55 = v6 == 33;\n      goto LABEL_107;\n    case 34:\n    case 35:\n      v50 = v131;\n      v51 = *(_QWORD *)(a1 + 120);\n      v52 = \"%s: invalid option -- '%c'\\n\" + 27;\n      v53 = \"space\";\n      v54 = v131;\n      v55 = v6 == 35;\nLABEL_107:\n      v56 = sub_4108F0(v127, v51, v53, v52, v55, v54);\n      v128 = v56;\n      if ( *v50 && !v56 )\n        return 0LL;\n      goto LABEL_7;\n    case 36:\n      v128 = 0LL;\n      *v131 = 5;\n      return v128;\n    case 1:\n      v57 = (char **)(v127 + 112);\n      v58 = (signed int *)(v127 + 128);\n      v128 = sub_40D500((char **)(v127 + 112), (signed int *)(v127 + 128), 0LL, 0LL, a3);\n      if ( !v128 )\n        goto LABEL_118;\n      v59 = v128;\n      if ( *(_DWORD *)(v127 + 180) <= 1 )\n        goto LABEL_7;\n      do\n      {\n        v60 = *(_QWORD *)(a1 + 72);\n        if ( *(_QWORD *)(a1 + 104) <= v60\n          || v60 == *(_QWORD *)(a1 + 48)\n          || *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v60) != -1 )\n        {\n          v128 = v59;\n          goto LABEL_7;\n        }\n        *(_QWORD *)(a1 + 72) += (signed int)sub_415350((__int64)v7, a1, v126);\n        v61 = sub_40D500(v57, v58, 0LL, 0LL, v7);\n        v148 = 16;\n        v59 = sub_40D500(v57, v58, (char **)v59, (char **)v61, (const __m128i *)&v147);\n      }\n      while ( v59 != 0LL && v61 != 0LL );\n      goto LABEL_118;\n    case 4:\n      v62 = 1 << a3->m128i_i64[0];\n      if ( !(v62 & *(_QWORD *)(v127 + 168)) )\n      {\n        v128 = 0LL;\n        *v131 = 6;\n        return v128;\n      }\n      v63 = v127;\n      *(_QWORD *)(v63 + 160) |= v62;\n      v128 = sub_40D500((char **)(v63 + 112), (signed int *)(v63 + 128), 0LL, 0LL, a3);\n      if ( !v128 )\n        goto LABEL_118;\n      ++*(_QWORD *)(v127 + 152);\n      *(_BYTE *)(v127 + 176) |= 2u;\n      goto LABEL_7;\n    case 5:\n      v128 = sub_40D500((char **)(v127 + 112), (signed int *)(v127 + 128), 0LL, 0LL, a3);\n      if ( !v128 )\n        goto LABEL_118;\n      if ( *(_DWORD *)(v127 + 180) > 1 )\n        *(_BYTE *)(v127 + 176) |= 2u;\n      goto LABEL_7;\n    case 12:\n      v64 = a3->m128i_i64[0];\n      if ( !(a3->m128i_i64[0] & 0x30F) )\n        goto LABEL_130;\n      v65 = *(_BYTE *)(v127 + 176);\n      if ( v65 & 0x10 )\n        goto LABEL_130;\n      v66 = v65 | 0x10;\n      *(_BYTE *)(v127 + 176) = v66;\n      if ( v66 & 8 )\n      {\n        v112 = 0;\n        v113 = 0;\n      }\n      else\n      {\n        *(_QWORD *)(v127 + 184) = 287948901175001088LL;\n        *(_QWORD *)(v127 + 192) = 576460745995190270LL;\n        if ( v66 & 4 )\n        {\n          *(_OWORD *)(v127 + 200) = 0LL;\n          v64 = a3->m128i_i64[0];\n          goto LABEL_130;\n        }\n        v112 = 128;\n        v113 = 2;\n      }\n      v114 = __ctype_b_loc();\n      v115 = v127 + 8LL * v113;\n      v116 = v112 + 256 - (v113 << 6);\n      v117 = (signed __int64)&(*v114)[v112];\n      do\n      {\n        v118 = 0LL;\n        do\n        {\n          if ( *(_BYTE *)(v117 + 2 * v118) & 8 || v112 + (_DWORD)v118 == 95 )\n            *(_QWORD *)(v115 + 184) |= 1LL << v118;\n          ++v118;\n        }\n        while ( v118 != 64 );\n        v112 += 64;\n        v115 += 8LL;\n        v117 += 128LL;\n      }\n      while ( v116 != v112 );\nLABEL_130:\n      v67 = (char **)(v127 + 112);\n      v68 = (signed int *)(v127 + 128);\n      if ( (v64 - 256) & 0xFFFFFEFF )\n      {\n        v128 = sub_40D500((char **)(v127 + 112), (signed int *)(v127 + 128), 0LL, 0LL, v7);\n        if ( v128 )\n        {\nLABEL_135:\n          *(_QWORD *)(v8 + 72) += (signed int)sub_415350((__int64)v7, v8, v126);\n          return v128;\n        }\n      }\n      else\n      {\n        if ( v64 == 256 )\n        {\n          LODWORD(v7->m128i_i64[0]) = 6;\n          v84 = sub_40D500(v67, v68, 0LL, 0LL, v7);\n          LODWORD(v7->m128i_i64[0]) = 9;\n          v70 = (char **)v84;\n        }\n        else\n        {\n          LODWORD(v7->m128i_i64[0]) = 5;\n          v69 = sub_40D500(v67, v68, 0LL, 0LL, v7);\n          LODWORD(v7->m128i_i64[0]) = 10;\n          v70 = (char **)v69;\n        }\n        v71 = sub_40D500(v67, v68, 0LL, 0LL, v7);\n        v148 = 10;\n        v72 = sub_40D500(v67, v68, v70, (char **)v71, (const __m128i *)&v147);\n        v128 = v72;\n        if ( v71 != 0LL && v70 != 0LL && v72 )\n          goto LABEL_135;\n      }\nLABEL_118:\n      *v131 = 12;\n      return 0LL;\n    case 9:\n      goto LABEL_136;\n  }\n}\n", 
            "funcStartAddr": "0x415ac0L", 
            "funcEndAddr": "0x416fa4L", 
            "funcName": "sub_415AC0"
        }, 
        {
            "decompiledFuncCode": "char **__fastcall sub_416FB0(__int64 a1, __int64 *a2, const __m128i *a3, __int64 a4, __int64 a5, _DWORD *a6)\n{\n  __int64 v6; // r15@1\n  __int64 v7; // r12@1\n  const __m128i *v8; // rbp@1\n  _DWORD *v9; // rbx@1\n  char *v10; // rax@1\n  char **v11; // r14@1\n  char v12; // al@3\n  char *v13; // r9@6\n  char *v14; // rax@10\n  __int64 v16; // [sp+10h] [bp-58h]@10\n  __int64 v17; // [sp+18h] [bp-50h]@1\n  char v18; // [sp+20h] [bp-48h]@10\n  char v19; // [sp+28h] [bp-40h]@10\n\n  v6 = a4;\n  v7 = a5;\n  v8 = a3;\n  v9 = a6;\n  v17 = *a2;\n  v10 = sub_415AC0(a1, (__int64)a2, a3, a4, a5, a6);\n  v11 = (char **)v10;\n  if ( *v9 && !v10 )\n  {\nLABEL_18:\n    v11 = 0LL;\n  }\n  else\n  {\nLABEL_3:\n    v12 = v8->m128i_i64[1];\n    if ( (v8->m128i_i64[1] & 0xF7) != 2 )\n    {\n      while ( v12 != 9 || !v7 )\n      {\n        v13 = sub_415AC0(a1, (__int64)a2, v8, v6, v7, v9);\n        if ( *v9 && !v13 )\n        {\n          if ( v11 )\n            sub_40AD30((__int64)v11, (int (__fastcall *)(__int64, __int64))sub_40BF40, 0LL);\n          goto LABEL_18;\n        }\n        if ( !v11 || !v13 )\n        {\n          if ( !v11 )\n            v11 = (char **)v13;\n          goto LABEL_3;\n        }\n        v16 = (__int64)v13;\n        v19 = 16;\n        v14 = sub_40D500((char **)(v17 + 112), (signed int *)(v17 + 128), v11, (char **)v13, (const __m128i *)&v18);\n        if ( !v14 )\n        {\n          sub_40AD30(v16, (int (__fastcall *)(__int64, __int64))sub_40BF40, 0LL);\n          sub_40AD30((__int64)v11, (int (__fastcall *)(__int64, __int64))sub_40BF40, 0LL);\n          v11 = 0LL;\n          *v9 = 12;\n          return v11;\n        }\n        v11 = (char **)v14;\n        v12 = v8->m128i_i64[1];\n        if ( (v8->m128i_i64[1] & 0xF7) == 2 )\n          return v11;\n      }\n    }\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x416fb0L", 
            "funcEndAddr": "0x4170eeL", 
            "funcName": "sub_416FB0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4170F0(__int64 a1, __int64 *a2, const __m128i *a3, __int64 a4, __int64 a5, _DWORD *a6)\n{\n  _DWORD *v6; // r14@1\n  __int64 v7; // r13@1\n  const __m128i *v8; // rbp@1\n  __int64 v9; // rbx@1\n  char **v10; // rax@1\n  char *v11; // r15@1\n  char **v13; // rcx@7\n  __int64 v14; // [sp+0h] [bp-68h]@1\n  __int64 v15; // [sp+8h] [bp-60h]@7\n  __int64 v16; // [sp+10h] [bp-58h]@1\n  char v17; // [sp+20h] [bp-48h]@10\n  char v18; // [sp+28h] [bp-40h]@10\n\n  v6 = a6;\n  v7 = a4;\n  v8 = a3;\n  v9 = *a2;\n  v14 = a5;\n  v16 = *(_QWORD *)(*a2 + 168);\n  v10 = sub_416FB0(a1, a2, a3, a4, a5, a6);\n  v11 = (char *)v10;\n  if ( !*v6 || v10 )\n  {\n    while ( LOBYTE(v8->m128i_i64[1]) == 10 )\n    {\n      *(_QWORD *)(a1 + 72) += (signed int)sub_415350((__int64)v8, a1, v7 | 0x800000);\n      if ( (v8->m128i_i64[1] & 0xF7) == 2 || LOBYTE(v8->m128i_i64[1]) == 9 && v14 )\n      {\n        v13 = 0LL;\n      }\n      else\n      {\n        v15 = *(_QWORD *)(v9 + 168);\n        *(_QWORD *)(v9 + 168) = v16;\n        v13 = sub_416FB0(a1, a2, v8, v7, v14, v6);\n        if ( *v6 && !v13 )\n        {\n          if ( v11 )\n            sub_40AD30((__int64)v11, (int (__fastcall *)(__int64, __int64))sub_40BF40, 0LL);\n          goto LABEL_3;\n        }\n        *(_QWORD *)(v9 + 168) |= v15;\n      }\n      v18 = 10;\n      v11 = sub_40D500((char **)(v9 + 112), (signed int *)(v9 + 128), (char **)v11, v13, (const __m128i *)&v17);\n      if ( !v11 )\n      {\n        *v6 = 12;\n        return v11;\n      }\n    }\n  }\n  else\n  {\nLABEL_3:\n    v11 = 0LL;\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x4170f0L", 
            "funcEndAddr": "0x417241L", 
            "funcName": "sub_4170F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_417250(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14@1\n  __int64 v5; // r13@1\n  unsigned __int64 v6; // r12@1\n  __int64 v7; // rbp@1\n  __int64 v8; // rbx@1\n  size_t v9; // rsi@4\n  signed __int64 v10; // r15@6\n  void *v11; // rax@7\n  char *v12; // rax@7\n  bool v13; // cf@10\n  bool v14; // zf@10\n  _BYTE *v15; // rdi@10\n  signed __int64 v16; // rcx@10\n  char *v17; // rsi@10\n  char v18; // al@15\n  bool v19; // sf@15\n  unsigned __int8 v20; // of@15\n  __int64 v21; // rdx@20\n  signed int v22; // edi@20\n  __int64 v23; // rdx@20\n  unsigned __int8 v24; // al@20\n  char v25; // si@20\n  __int64 v26; // r15@20\n  signed int v27; // eax@25\n  __int64 v28; // rcx@31\n  __int64 v29; // rax@32\n  __int64 v30; // r12@39\n  int v31; // eax@39\n  char *v32; // rax@39\n  char **v33; // r15@40\n  size_t v34; // ST08_8@40\n  signed int *v35; // r13@40\n  const __m128i *v36; // r12@40\n  char *v37; // rax@40\n  char **v38; // r9@40\n  char **v39; // r14@40\n  void *v40; // rdx@40\n  char *v41; // rax@41\n  __int64 v42; // r15@42\n  size_t v43; // r13@43\n  signed __int64 v44; // ST08_8@43\n  void *v45; // rax@43\n  void *v46; // r14@43\n  void *v47; // rax@43\n  void *v48; // rax@43\n  void *v49; // rax@43\n  __int64 v50; // r13@47\n  _QWORD *v51; // rax@47\n  __int64 v52; // rdx@48\n  __int64 v53; // rdx@50\n  _QWORD *v54; // rdi@51\n  __int64 v55; // rax@51\n  char v56; // r13@59\n  __int64 v57; // r14@59\n  char *v58; // rax@74\n  unsigned __int64 v59; // rdx@75\n  signed __int64 v60; // rcx@78\n  signed __int64 v61; // rax@78\n  unsigned __int64 v62; // rax@78\n  __int64 v63; // rax@80\n  __int64 v64; // r14@81\n  signed __int64 v65; // rsi@81\n  size_t v66; // rcx@81\n  unsigned __int8 v67; // al@88\n  char v68; // al@88\n  __int64 v69; // rax@89\n  unsigned int v70; // er13@89\n  __int64 v71; // r10@91\n  signed __int64 v72; // r9@92\n  signed __int64 v73; // rcx@94\n  __int64 v74; // rdx@95\n  signed __int64 v75; // rax@97\n  __int64 v76; // r11@99\n  unsigned int v77; // eax@100\n  __int64 v78; // rax@102\n  __int64 v79; // r12@106\n  void *v80; // rdi@106\n  void *v81; // r13@107\n  void *v82; // rdi@108\n  signed __int64 result; // rax@108\n  void *v84; // rdi@111\n  void *v85; // r12@112\n  void *v86; // rdi@113\n  void *v87; // rax@116\n  __int64 v88; // r15@117\n  int v89; // edx@118\n  int v90; // ecx@118\n  wint_t v91; // eax@122\n  unsigned int v92; // edi@122\n  __int64 v93; // rdi@130\n  __int64 v94; // r8@131\n  char v95; // r9@131\n  __int64 v96; // rcx@131\n  __int64 v97; // rdx@131\n  __int64 v98; // rax@133\n  void *v99; // rax@138\n  size_t v100; // ST08_8@144\n  char *v101; // rax@144\n  signed __int64 v102; // rax@150\n  char v103; // dl@154\n  unsigned int v104; // esi@160\n  char v105; // dl@176\n  __int64 v106; // [sp+0h] [bp-138h]@20\n  int v107; // [sp+0h] [bp-138h]@122\n  size_t size; // [sp+8h] [bp-130h]@43\n  size_t sizea; // [sp+8h] [bp-130h]@65\n  size_t sizeb; // [sp+8h] [bp-130h]@84\n  int sizec; // [sp+8h] [bp-130h]@122\n  void *v112; // [sp+10h] [bp-128h]@43\n  __int64 v113; // [sp+10h] [bp-128h]@80\n  unsigned int v114; // [sp+2Ch] [bp-10Ch]@1\n  const __m128i v115; // [sp+30h] [bp-108h]@39\n  char v116; // [sp+40h] [bp-F8h]@40\n  __int64 v117; // [sp+48h] [bp-F0h]@40\n  void *ptr; // [sp+50h] [bp-E8h]@67\n  __int64 v119; // [sp+60h] [bp-D8h]@20\n  __int64 v120; // [sp+68h] [bp-D0h]@20\n  __int64 v121; // [sp+88h] [bp-B0h]@37\n  __int64 v122; // [sp+90h] [bp-A8h]@27\n  __int64 v123; // [sp+98h] [bp-A0h]@26\n  __int64 v124; // [sp+A0h] [bp-98h]@27\n  __int64 v125; // [sp+A8h] [bp-90h]@39\n  unsigned __int64 v126; // [sp+B0h] [bp-88h]@20\n  __int64 v127; // [sp+B8h] [bp-80h]@20\n  unsigned __int64 v128; // [sp+C0h] [bp-78h]@20\n  unsigned __int64 v129; // [sp+C8h] [bp-70h]@20\n  __int64 v130; // [sp+D8h] [bp-60h]@20\n  bool v131; // [sp+E8h] [bp-50h]@20\n  char v132; // [sp+E9h] [bp-4Fh]@20\n  char v133; // [sp+EAh] [bp-4Eh]@20\n  bool v134; // [sp+EBh] [bp-4Dh]@20\n  int v135; // [sp+F0h] [bp-48h]@20\n\n  v4 = a2;\n  v5 = a4;\n  v6 = a3;\n  v7 = a1;\n  *(_BYTE *)(a1 + 56) &= 0x90u;\n  v13 = *(_QWORD *)(a1 + 8) < 0xE7uLL;\n  v14 = *(_QWORD *)(a1 + 8) == 231LL;\n  v114 = 0;\n  v8 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 24) = a4;\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_QWORD *)(a1 + 48) = 0LL;\n  if ( v13 || v14 )\n  {\n    v99 = realloc((void *)v8, 0xE8uLL);\n    v8 = (__int64)v99;\n    if ( !v99 )\n      return 12LL;\n    *(_QWORD *)(a1 + 8) = 232LL;\n    *(_QWORD *)a1 = v99;\n  }\n  *(_QWORD *)(a1 + 16) = 232LL;\n  *(_QWORD *)v8 = 0LL;\n  *(_QWORD *)(v8 + 224) = 0LL;\n  memset(\n    (void *)((v8 + 8) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v8 - (((_DWORD)v8 + 8) & 0xFFFFFFF8) + 232) >> 3));\n  *(_DWORD *)(v8 + 128) = 15;\n  if ( v6 > 0x555555555555554LL )\n    goto LABEL_115;\n  *(_QWORD *)(v8 + 8) = v6 + 1;\n  *(_QWORD *)v8 = malloc(16 * (v6 + 1));\n  if ( v6 )\n  {\n    v9 = 1LL;\n    do\n      v9 *= 2LL;\n    while ( v6 >= v9 );\n    v10 = v9 - 1;\n  }\n  else\n  {\n    v10 = 0LL;\n    v9 = 1LL;\n  }\n  v11 = calloc(0x18uLL, v9);\n  *(_QWORD *)(v8 + 136) = v10;\n  *(_QWORD *)(v8 + 64) = v11;\n  *(_DWORD *)(v8 + 180) = __ctype_get_mb_cur_max();\n  v12 = nl_langinfo(14);\n  if ( (*v12 & 0xDF) == 85 && (v12[1] & 0xDF) == 84 && (v12[2] & 0xDF) == 70 )\n  {\n    v13 = (unsigned __int8)v12[3] < 0x2Du;\n    v14 = v12[3] == 45;\n    v15 = \"UTF-8\" + 4;\n    v16 = 2LL;\n    v17 = &v12[v14 + 3];\n    do\n    {\n      if ( !v16 )\n        break;\n      v13 = (unsigned __int8)*v17 < *v15;\n      v14 = *v17++ == *v15++;\n      --v16;\n    }\n    while ( v14 );\n    if ( (!v13 && !v14) == v13 )\n      *(_BYTE *)(v8 + 176) |= 4u;\n  }\n  v18 = *(_BYTE *)(v8 + 176);\n  v20 = __OFSUB__(*(_DWORD *)(v8 + 180), 1);\n  v14 = *(_DWORD *)(v8 + 180) == 1;\n  v19 = *(_DWORD *)(v8 + 180) - 1 < 0;\n  *(_BYTE *)(v8 + 176) &= 0xF7u;\n  if ( !((unsigned __int8)(v19 ^ v20) | v14) )\n  {\n    if ( v18 & 4 )\n    {\n      *(_QWORD *)(v8 + 120) = &unk_41E560;\n      goto LABEL_18;\n    }\n    v87 = calloc(0x20uLL, 1uLL);\n    *(_QWORD *)(v8 + 120) = v87;\n    if ( !v87 )\n    {\nLABEL_115:\n      v114 = 12;\nLABEL_114:\n      sub_40FE70((void **)v8);\n      *(_QWORD *)v7 = 0LL;\n      result = v114;\n      *(_QWORD *)(v7 + 8) = 0LL;\n      return result;\n    }\n    v88 = 0LL;\nLABEL_118:\n    v89 = 8 * v88;\n    v90 = 0;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        sizec = v90;\n        v107 = v89;\n        v91 = btowc(v89);\n        v92 = v107 & 0xFFFFFF80;\n        if ( v91 != -1 )\n          break;\n        if ( !v92 )\n          goto LABEL_120;\nLABEL_121:\n        v90 = sizec + 1;\n        v89 = v107 + 1;\n        if ( sizec == 63 )\n          goto LABEL_126;\n      }\n      *(_QWORD *)(v88 + *(_QWORD *)(v8 + 120)) |= 1LL << sizec;\n      if ( v92 )\n        goto LABEL_121;\n      if ( v91 != v107 )\n      {\nLABEL_120:\n        *(_BYTE *)(v8 + 176) |= 8u;\n        goto LABEL_121;\n      }\n      v90 = sizec + 1;\n      v89 = v107 + 1;\n      if ( sizec == 63 )\n      {\nLABEL_126:\n        v88 += 8LL;\n        if ( v88 == 32 )\n          break;\n        goto LABEL_118;\n      }\n    }\n  }\nLABEL_18:\n  if ( !*(_QWORD *)v8 || !*(_QWORD *)(v8 + 64) )\n    goto LABEL_115;\n  v21 = *(_QWORD *)(v7 + 40);\n  v114 = 0;\n  memset(&v120, 0, 0x90uLL);\n  v130 = v21;\n  v22 = *(_DWORD *)(v8 + 180);\n  v119 = v4;\n  v106 = v5 & 0x400000;\n  v131 = (v5 & 0x400000) != 0;\n  v23 = v106 | v21;\n  v24 = *(_BYTE *)(v8 + 176);\n  v25 = v23 != 0;\n  v127 = v6;\n  v26 = v23;\n  v126 = v6;\n  v134 = v23 != 0;\n  v135 = v22;\n  v132 = (v24 >> 2) & 1;\n  v133 = (v24 >> 3) & 1;\n  v129 = v6;\n  v128 = v6;\n  if ( v6 )\n  {\n    v27 = sub_40B170((__int64)&v119, v6 + 1);\n    if ( v27 )\n    {\nLABEL_86:\n      v114 = v27;\n      v42 = *(_QWORD *)v7;\nLABEL_111:\n      v84 = *(void **)(v42 + 112);\n      if ( v84 )\n      {\n        do\n        {\n          v85 = *(void **)v84;\n          free(v84);\n          v84 = v85;\n        }\n        while ( v85 );\n      }\n      *(_QWORD *)(v42 + 112) = 0LL;\n      v86 = *(void **)(v42 + 32);\n      *(_DWORD *)(v42 + 128) = 15;\n      *(_QWORD *)(v42 + 104) = 0LL;\n      free(v86);\n      *(_QWORD *)(v42 + 32) = 0LL;\n      sub_40C4C0((__int64)&v119);\n      goto LABEL_114;\n    }\n    v25 = v134;\n    v22 = *(_DWORD *)(v8 + 180);\n  }\n  if ( v25 )\n    v4 = v120;\n  v120 = v4;\n  if ( v5 & 0x400000 )\n  {\n    if ( v22 <= 1 )\n    {\n      sub_40B4E0((__int64)&v119);\n      v114 = 0;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v27 = sub_40B710((__int64)&v119);\n        if ( v27 )\n          goto LABEL_86;\n        if ( (signed __int64)v6 <= v123 || v124 > v122 + *(_DWORD *)(v8 + 180) )\n          break;\n        v27 = sub_40B170((__int64)&v119, 2 * v124);\n        if ( v27 )\n          goto LABEL_86;\n      }\n      v114 = 0;\n    }\n  }\n  else if ( v22 > 1 )\n  {\n    sub_40B560((__int64)&v119);\n    v114 = 0;\n  }\n  else\n  {\n    v28 = v124;\n    if ( v26 )\n    {\n      v29 = v122;\n      if ( v127 <= v124 )\n        v28 = v127;\n      if ( v28 > v122 )\n      {\n        while ( 1 )\n        {\n          *(_BYTE *)(v4 + v29) = *(_BYTE *)(v130 + *(_BYTE *)(v121 + v29 + v119));\n          if ( v28 == ++v29 )\n            break;\n          v4 = v120;\n        }\n      }\n      else\n      {\n        v28 = v122;\n      }\n    }\n    v122 = v28;\n    v123 = v28;\n    v114 = 0;\n  }\n  v30 = *(_QWORD *)v7;\n  *(_QWORD *)(v7 + 48) = 0LL;\n  *(_QWORD *)(v30 + 216) = v5;\n  v31 = sub_415350((__int64)&v115, (__int64)&v119, v5 | 0x800000);\n  v125 += v31;\n  v32 = sub_4170F0((__int64)&v119, (__int64 *)v7, &v115, v5, 0LL, &v114);\n  if ( v114 )\n  {\n    if ( !v32 )\n    {\n      *(_QWORD *)(v8 + 104) = 0LL;\n      v42 = *(_QWORD *)v7;\n      goto LABEL_111;\n    }\n    v33 = (char **)(v30 + 112);\n    v100 = (size_t)v32;\n    v35 = (signed int *)(v30 + 128);\n    v36 = (const __m128i *)&v116;\n    LOBYTE(v117) = 2;\n    v101 = sub_40D500(v33, v35, 0LL, 0LL, (const __m128i *)&v116);\n    v38 = (char **)v100;\n    v39 = (char **)v101;\n  }\n  else\n  {\n    v33 = (char **)(v30 + 112);\n    v34 = (size_t)v32;\n    v35 = (signed int *)(v30 + 128);\n    v36 = (const __m128i *)&v116;\n    LOBYTE(v117) = 2;\n    v37 = sub_40D500(v33, v35, 0LL, 0LL, (const __m128i *)&v116);\n    v38 = (char **)v34;\n    v39 = (char **)v37;\n    v40 = v37;\n    if ( !v34 )\n      goto LABEL_42;\n  }\n  LOBYTE(v117) = 16;\n  v41 = sub_40D500(v33, v35, v38, v39, v36);\n  v40 = v39;\n  v39 = (char **)v41;\nLABEL_42:\n  v42 = *(_QWORD *)v7;\n  if ( v39 == 0LL || v40 == 0LL )\n  {\n    v114 = 12;\n    *(_QWORD *)(v8 + 104) = 0LL;\n    goto LABEL_111;\n  }\n  v43 = *(_QWORD *)(v42 + 8);\n  *(_QWORD *)(v8 + 104) = v39;\n  v44 = 8 * v43;\n  v43 *= 24LL;\n  v45 = malloc(v44);\n  *(_QWORD *)(v42 + 24) = v45;\n  v46 = v45;\n  v47 = malloc(v44);\n  *(_QWORD *)(v42 + 32) = v47;\n  v112 = v47;\n  v48 = malloc(v43);\n  *(_QWORD *)(v42 + 40) = v48;\n  size = (size_t)v48;\n  v49 = malloc(v43);\n  *(_QWORD *)(v42 + 48) = v49;\n  if ( !v46 || !v112 || !size || !v49 )\n  {\n    v114 = 12;\n    goto LABEL_111;\n  }\n  v50 = *(_QWORD *)(v7 + 48);\n  v51 = malloc(8 * v50);\n  *(_QWORD *)(v42 + 224) = v51;\n  if ( v51 )\n  {\n    v52 = 0LL;\n    if ( v50 )\n    {\n      do\n      {\n        v51[v52] = v52;\n        ++v52;\n      }\n      while ( v52 != v50 );\n    }\n    sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40CA30, v42);\n    v53 = *(_QWORD *)(v7 + 48);\n    if ( v53 )\n    {\n      v54 = *(_QWORD **)(v42 + 224);\n      v55 = *v54;\n      if ( *v54 )\n        goto LABEL_56;\n      while ( ++v55 != v53 )\n      {\n        if ( v54[v55] != v55 )\n          goto LABEL_56;\n      }\n    }\n    else\n    {\n      v54 = *(_QWORD **)(v42 + 224);\n    }\n    free(v54);\n    *(_QWORD *)(v42 + 224) = 0LL;\n  }\nLABEL_56:\n  v27 = sub_40AD30(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40D8B0, v7);\n  if ( v27 )\n    goto LABEL_86;\n  v27 = sub_40AD30(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40FDE0, v42);\n  if ( v27 )\n    goto LABEL_86;\n  sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40CAC0, v42);\n  v27 = sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40C5C0, v42);\n  if ( v27 )\n    goto LABEL_86;\n  v56 = 0;\n  v57 = 0LL;\n  while ( *(_QWORD *)(v42 + 16) != v57 )\n  {\n    while ( 1 )\n    {\n      while ( *(_QWORD *)(*(_QWORD *)(v42 + 48) + 24 * v57 + 8) )\n      {\n        if ( *(_QWORD *)(v42 + 16) == ++v57 )\n          goto LABEL_63;\n      }\n      sizea = 24 * v57;\n      v27 = sub_40CFA0((__m128i *)v36, v42, v57, 1);\n      if ( v27 )\n        goto LABEL_86;\n      ++v57;\n      if ( *(_QWORD *)(*(_QWORD *)(v42 + 48) + sizea + 8) )\n        break;\n      v56 = 1;\n      free(ptr);\n      if ( *(_QWORD *)(v42 + 16) == v57 )\n      {\nLABEL_64:\n        v56 = 0;\n        v57 = 0LL;\n      }\n    }\n  }\nLABEL_63:\n  if ( v56 )\n    goto LABEL_64;\n  if ( !(*(_BYTE *)(v7 + 56) & 0x10) && *(_QWORD *)(v7 + 48) && *(_BYTE *)(v42 + 176) & 1 || *(_QWORD *)(v42 + 152) )\n  {\n    v58 = (char *)malloc(24 * v57);\n    *(_QWORD *)(v42 + 56) = v58;\n    if ( !v58 )\n    {\n      v114 = 12;\n      v42 = *(_QWORD *)v7;\n      goto LABEL_111;\n    }\n    v59 = 0LL;\n    if ( !v57 )\n      goto LABEL_88;\n    while ( 1 )\n    {\n      v60 = 3 * v59++;\n      v61 = (signed __int64)&v58[8 * v60];\n      *(_OWORD *)v61 = 0LL;\n      *(_QWORD *)(v61 + 16) = 0LL;\n      v62 = *(_QWORD *)(v42 + 16);\n      if ( v62 <= v59 )\n        break;\n      v58 = *(char **)(v42 + 56);\n    }\n    if ( !v62 )\n      goto LABEL_88;\n    v113 = 0LL;\n    v63 = *(_QWORD *)(v42 + 48);\n    while ( 1 )\n    {\n      v64 = 0LL;\n      v65 = v63 + 24 * v113;\n      v66 = *(_QWORD *)(v65 + 16);\n      if ( *(_QWORD *)(v65 + 8) > 0LL )\n        break;\nLABEL_141:\n      if ( *(_QWORD *)(v42 + 16) <= (unsigned __int64)++v113 )\n        goto LABEL_88;\n    }\n    while ( 1 )\n    {\n      sizeb = v66;\n      if ( !(unsigned __int8)sub_40B210(*(_QWORD *)(v42 + 56) + 24LL * *(_QWORD *)(v66 + 8 * v64), v113) )\n        break;\n      v63 = *(_QWORD *)(v42 + 48);\n      ++v64;\n      v66 = sizeb;\n      if ( v64 >= *(_QWORD *)(v63 + 24 * v113 + 8) )\n        goto LABEL_141;\n    }\n    v27 = 12;\n    goto LABEL_86;\n  }\nLABEL_88:\n  v67 = *(_BYTE *)(v8 + 176);\n  v114 = 0;\n  v68 = (v106 == 0) & (v67 >> 2);\n  if ( v68 && !*(_QWORD *)(v7 + 40) )\n  {\n    v93 = *(_QWORD *)(v8 + 16);\n    if ( v93 )\n    {\n      v94 = *(_QWORD *)v8;\n      v95 = 0;\n      v96 = 0LL;\n      v97 = *(_QWORD *)v8;\n      while ( 2 )\n      {\n        switch ( *(_BYTE *)(v97 + 8) )\n        {\n          default:\n            abort();\n            return result;\n          case 6:\n            goto LABEL_89;\n          case 5:\n            v95 = v68;\n            goto LABEL_148;\n          case 2:\n          case 4:\n          case 8:\n          case 9:\n          case 0xA:\n          case 0xB:\n            goto LABEL_148;\n          case 1:\n            if ( *(_BYTE *)v97 < 0 )\n              v56 = v68;\n            goto LABEL_148;\n          case 0xC:\n            v104 = *(_DWORD *)v97;\n            if ( *(_DWORD *)v97 == 32 )\n              goto LABEL_148;\n            if ( v104 <= 0x20 )\n            {\n              if ( v104 != 16 )\n                goto LABEL_89;\n            }\n            else if ( v104 != 64 && v104 != 128 )\n            {\n              goto LABEL_89;\n            }\nLABEL_148:\n            ++v96;\n            v97 += 16LL;\n            if ( v96 != v93 )\n              continue;\n            if ( !((unsigned __int8)v95 | (unsigned __int8)v56) )\n              goto LABEL_175;\n            v102 = v94 + 16 * v96;\n            do\n            {\n              v103 = *(_BYTE *)(v94 + 8);\n              if ( v103 == 1 )\n              {\n                if ( *(_BYTE *)v94 < 0 )\n                  *(_BYTE *)(v94 + 10) &= 0xDFu;\n              }\n              else if ( v103 == 5 )\n              {\n                *(_BYTE *)(v94 + 8) = 7;\n              }\n              v94 += 16LL;\n            }\n            while ( v102 != v94 );\n            break;\n          case 3:\n            if ( *(_QWORD *)(*(_QWORD *)v97 + 16LL) || *(_QWORD *)(*(_QWORD *)v97 + 24LL) )\n              goto LABEL_89;\n            goto LABEL_148;\n        }\n        break;\n      }\n    }\n    else\n    {\nLABEL_175:\n      v95 = 0;\n    }\n    v14 = *(_QWORD *)(v8 + 152) == 0LL;\n    v19 = *(_QWORD *)(v8 + 152) < 0;\n    v105 = *(_BYTE *)(v8 + 176);\n    *(_DWORD *)(v8 + 180) = 1;\n    *(_BYTE *)(v8 + 176) = v105 & 0xF9 | 2 * ((v95 | (!v19 && !v14)) & 1);\n  }\nLABEL_89:\n  v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 104) + 24LL) + 56LL);\n  *(_QWORD *)(v8 + 144) = v69;\n  v70 = sub_40D930((__int64)v36, *(_QWORD *)(v8 + 48) + 24 * v69);\n  v115.m128i_i32[0] = v70;\n  if ( !v70 )\n  {\n    if ( *(_QWORD *)(v8 + 152) > 0LL )\n    {\n      v71 = v117;\n      if ( v117 > 0 )\n      {\n        v72 = 0LL;\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            v73 = *(_QWORD *)v8 + 16LL * *((_QWORD *)ptr + v72);\n            if ( *(_BYTE *)(v73 + 8) == 4 )\n            {\n              v74 = 0LL;\n              while ( 1 )\n              {\n                v75 = *(_QWORD *)v8 + 16LL * *((_QWORD *)ptr + v74);\n                if ( *(_BYTE *)(v75 + 8) == 9 && *(_QWORD *)v75 == *(_QWORD *)v73 )\n                  break;\n                if ( v71 == ++v74 )\n                  goto LABEL_93;\n              }\n              if ( !sub_40C890(\n                      v71,\n                      (__int64 *)&v36[1],\n                      **(_QWORD **)(*(_QWORD *)(v8 + 40) + 24LL * *((_QWORD *)ptr + v72) + 16)) )\n                break;\n            }\nLABEL_93:\n            if ( v71 <= ++v72 )\n              goto LABEL_102;\n          }\n          v77 = sub_40CDD0((__int64)v36, *(_QWORD *)(v8 + 48) + 24 * v76);\n          if ( v77 )\n            break;\n          v71 = v117;\n          v72 = 1LL;\n          if ( v117 <= 1 )\n            goto LABEL_102;\n        }\n        v70 = v77;\n        goto LABEL_106;\n      }\n    }\nLABEL_102:\n    v78 = sub_40DB40(&v115, v8, (__int64)v36, 0);\n    *(_QWORD *)(v8 + 72) = v78;\n    if ( v78 )\n    {\n      if ( *(_BYTE *)(v78 + 104) >= 0 )\n      {\n        *(_QWORD *)(v8 + 96) = v78;\n        *(_QWORD *)(v8 + 88) = v78;\n        *(_QWORD *)(v8 + 80) = v78;\nLABEL_105:\n        free(ptr);\n        goto LABEL_106;\n      }\n      *(_QWORD *)(v8 + 80) = sub_40DB40(&v115, v8, (__int64)v36, 1u);\n      *(_QWORD *)(v8 + 88) = sub_40DB40(&v115, v8, (__int64)v36, 2u);\n      v98 = sub_40DB40(&v115, v8, (__int64)v36, 6u);\n      v14 = *(_QWORD *)(v8 + 80) == 0LL;\n      *(_QWORD *)(v8 + 96) = v98;\n      if ( !v14 && *(_QWORD *)(v8 + 88) && v98 )\n        goto LABEL_105;\n    }\n    v70 = v115.m128i_i32[0];\n  }\nLABEL_106:\n  v79 = *(_QWORD *)v7;\n  v114 = v70;\n  v80 = *(void **)(v79 + 112);\n  if ( v80 )\n  {\n    do\n    {\n      v81 = *(void **)v80;\n      free(v80);\n      v80 = v81;\n    }\n    while ( v81 );\n  }\n  *(_QWORD *)(v79 + 112) = 0LL;\n  v82 = *(void **)(v79 + 32);\n  *(_DWORD *)(v79 + 128) = 15;\n  *(_QWORD *)(v79 + 104) = 0LL;\n  free(v82);\n  *(_QWORD *)(v79 + 32) = 0LL;\n  sub_40C4C0((__int64)&v119);\n  result = v114;\n  if ( v114 )\n    goto LABEL_114;\n  return result;\n}\n\nsigned __int64 __fastcall sub_417250(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14@1\n  __int64 v5; // r13@1\n  unsigned __int64 v6; // r12@1\n  __int64 v7; // rbp@1\n  __int64 v8; // rbx@1\n  size_t v9; // rsi@4\n  signed __int64 v10; // r15@6\n  void *v11; // rax@7\n  char *v12; // rax@7\n  bool v13; // cf@10\n  bool v14; // zf@10\n  _BYTE *v15; // rdi@10\n  signed __int64 v16; // rcx@10\n  char *v17; // rsi@10\n  char v18; // al@15\n  bool v19; // sf@15\n  unsigned __int8 v20; // of@15\n  __int64 v21; // rdx@20\n  signed int v22; // edi@20\n  __int64 v23; // rdx@20\n  unsigned __int8 v24; // al@20\n  char v25; // si@20\n  __int64 v26; // r15@20\n  signed int v27; // eax@25\n  __int64 v28; // rcx@31\n  __int64 v29; // rax@32\n  __int64 v30; // r12@39\n  int v31; // eax@39\n  char *v32; // rax@39\n  char **v33; // r15@40\n  size_t v34; // ST08_8@40\n  signed int *v35; // r13@40\n  const __m128i *v36; // r12@40\n  char *v37; // rax@40\n  char **v38; // r9@40\n  char **v39; // r14@40\n  void *v40; // rdx@40\n  char *v41; // rax@41\n  __int64 v42; // r15@42\n  size_t v43; // r13@43\n  signed __int64 v44; // ST08_8@43\n  void *v45; // rax@43\n  void *v46; // r14@43\n  void *v47; // rax@43\n  void *v48; // rax@43\n  void *v49; // rax@43\n  __int64 v50; // r13@47\n  _QWORD *v51; // rax@47\n  __int64 v52; // rdx@48\n  __int64 v53; // rdx@50\n  _QWORD *v54; // rdi@51\n  __int64 v55; // rax@51\n  char v56; // r13@59\n  __int64 v57; // r14@59\n  char *v58; // rax@74\n  unsigned __int64 v59; // rdx@75\n  signed __int64 v60; // rcx@78\n  signed __int64 v61; // rax@78\n  unsigned __int64 v62; // rax@78\n  __int64 v63; // rax@80\n  __int64 v64; // r14@81\n  signed __int64 v65; // rsi@81\n  size_t v66; // rcx@81\n  unsigned __int8 v67; // al@88\n  char v68; // al@88\n  __int64 v69; // rax@89\n  unsigned int v70; // er13@89\n  __int64 v71; // r10@91\n  signed __int64 v72; // r9@92\n  signed __int64 v73; // rcx@94\n  __int64 v74; // rdx@95\n  signed __int64 v75; // rax@97\n  __int64 v76; // r11@99\n  unsigned int v77; // eax@100\n  __int64 v78; // rax@102\n  __int64 v79; // r12@106\n  void *v80; // rdi@106\n  void *v81; // r13@107\n  void *v82; // rdi@108\n  signed __int64 result; // rax@108\n  void *v84; // rdi@111\n  void *v85; // r12@112\n  void *v86; // rdi@113\n  void *v87; // rax@116\n  __int64 v88; // r15@117\n  int v89; // edx@118\n  int v90; // ecx@118\n  wint_t v91; // eax@122\n  unsigned int v92; // edi@122\n  __int64 v93; // rdi@130\n  __int64 v94; // r8@131\n  char v95; // r9@131\n  __int64 v96; // rcx@131\n  __int64 v97; // rdx@131\n  __int64 v98; // rax@133\n  void *v99; // rax@138\n  size_t v100; // ST08_8@144\n  char *v101; // rax@144\n  signed __int64 v102; // rax@150\n  char v103; // dl@154\n  unsigned int v104; // esi@160\n  char v105; // dl@176\n  __int64 v106; // [sp+0h] [bp-138h]@20\n  int v107; // [sp+0h] [bp-138h]@122\n  size_t size; // [sp+8h] [bp-130h]@43\n  size_t sizea; // [sp+8h] [bp-130h]@65\n  size_t sizeb; // [sp+8h] [bp-130h]@84\n  int sizec; // [sp+8h] [bp-130h]@122\n  void *v112; // [sp+10h] [bp-128h]@43\n  __int64 v113; // [sp+10h] [bp-128h]@80\n  unsigned int v114; // [sp+2Ch] [bp-10Ch]@1\n  const __m128i v115; // [sp+30h] [bp-108h]@39\n  char v116; // [sp+40h] [bp-F8h]@40\n  __int64 v117; // [sp+48h] [bp-F0h]@40\n  void *ptr; // [sp+50h] [bp-E8h]@67\n  __int64 v119; // [sp+60h] [bp-D8h]@20\n  __int64 v120; // [sp+68h] [bp-D0h]@20\n  __int64 v121; // [sp+88h] [bp-B0h]@37\n  __int64 v122; // [sp+90h] [bp-A8h]@27\n  __int64 v123; // [sp+98h] [bp-A0h]@26\n  __int64 v124; // [sp+A0h] [bp-98h]@27\n  __int64 v125; // [sp+A8h] [bp-90h]@39\n  unsigned __int64 v126; // [sp+B0h] [bp-88h]@20\n  __int64 v127; // [sp+B8h] [bp-80h]@20\n  unsigned __int64 v128; // [sp+C0h] [bp-78h]@20\n  unsigned __int64 v129; // [sp+C8h] [bp-70h]@20\n  __int64 v130; // [sp+D8h] [bp-60h]@20\n  bool v131; // [sp+E8h] [bp-50h]@20\n  char v132; // [sp+E9h] [bp-4Fh]@20\n  char v133; // [sp+EAh] [bp-4Eh]@20\n  bool v134; // [sp+EBh] [bp-4Dh]@20\n  int v135; // [sp+F0h] [bp-48h]@20\n\n  v4 = a2;\n  v5 = a4;\n  v6 = a3;\n  v7 = a1;\n  *(_BYTE *)(a1 + 56) &= 0x90u;\n  v13 = *(_QWORD *)(a1 + 8) < 0xE7uLL;\n  v14 = *(_QWORD *)(a1 + 8) == 231LL;\n  v114 = 0;\n  v8 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 24) = a4;\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_QWORD *)(a1 + 48) = 0LL;\n  if ( v13 || v14 )\n  {\n    v99 = realloc((void *)v8, 0xE8uLL);\n    v8 = (__int64)v99;\n    if ( !v99 )\n      return 12LL;\n    *(_QWORD *)(a1 + 8) = 232LL;\n    *(_QWORD *)a1 = v99;\n  }\n  *(_QWORD *)(a1 + 16) = 232LL;\n  *(_QWORD *)v8 = 0LL;\n  *(_QWORD *)(v8 + 224) = 0LL;\n  memset(\n    (void *)((v8 + 8) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v8 - (((_DWORD)v8 + 8) & 0xFFFFFFF8) + 232) >> 3));\n  *(_DWORD *)(v8 + 128) = 15;\n  if ( v6 > 0x555555555555554LL )\n    goto LABEL_115;\n  *(_QWORD *)(v8 + 8) = v6 + 1;\n  *(_QWORD *)v8 = malloc(16 * (v6 + 1));\n  if ( v6 )\n  {\n    v9 = 1LL;\n    do\n      v9 *= 2LL;\n    while ( v6 >= v9 );\n    v10 = v9 - 1;\n  }\n  else\n  {\n    v10 = 0LL;\n    v9 = 1LL;\n  }\n  v11 = calloc(0x18uLL, v9);\n  *(_QWORD *)(v8 + 136) = v10;\n  *(_QWORD *)(v8 + 64) = v11;\n  *(_DWORD *)(v8 + 180) = __ctype_get_mb_cur_max();\n  v12 = nl_langinfo(14);\n  if ( (*v12 & 0xDF) == 85 && (v12[1] & 0xDF) == 84 && (v12[2] & 0xDF) == 70 )\n  {\n    v13 = (unsigned __int8)v12[3] < 0x2Du;\n    v14 = v12[3] == 45;\n    v15 = \"UTF-8\" + 4;\n    v16 = 2LL;\n    v17 = &v12[v14 + 3];\n    do\n    {\n      if ( !v16 )\n        break;\n      v13 = (unsigned __int8)*v17 < *v15;\n      v14 = *v17++ == *v15++;\n      --v16;\n    }\n    while ( v14 );\n    if ( (!v13 && !v14) == v13 )\n      *(_BYTE *)(v8 + 176) |= 4u;\n  }\n  v18 = *(_BYTE *)(v8 + 176);\n  v20 = __OFSUB__(*(_DWORD *)(v8 + 180), 1);\n  v14 = *(_DWORD *)(v8 + 180) == 1;\n  v19 = *(_DWORD *)(v8 + 180) - 1 < 0;\n  *(_BYTE *)(v8 + 176) &= 0xF7u;\n  if ( !((unsigned __int8)(v19 ^ v20) | v14) )\n  {\n    if ( v18 & 4 )\n    {\n      *(_QWORD *)(v8 + 120) = &unk_41E560;\n      goto LABEL_18;\n    }\n    v87 = calloc(0x20uLL, 1uLL);\n    *(_QWORD *)(v8 + 120) = v87;\n    if ( !v87 )\n    {\nLABEL_115:\n      v114 = 12;\nLABEL_114:\n      sub_40FE70((void **)v8);\n      *(_QWORD *)v7 = 0LL;\n      result = v114;\n      *(_QWORD *)(v7 + 8) = 0LL;\n      return result;\n    }\n    v88 = 0LL;\nLABEL_118:\n    v89 = 8 * v88;\n    v90 = 0;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        sizec = v90;\n        v107 = v89;\n        v91 = btowc(v89);\n        v92 = v107 & 0xFFFFFF80;\n        if ( v91 != -1 )\n          break;\n        if ( !v92 )\n          goto LABEL_120;\nLABEL_121:\n        v90 = sizec + 1;\n        v89 = v107 + 1;\n        if ( sizec == 63 )\n          goto LABEL_126;\n      }\n      *(_QWORD *)(v88 + *(_QWORD *)(v8 + 120)) |= 1LL << sizec;\n      if ( v92 )\n        goto LABEL_121;\n      if ( v91 != v107 )\n      {\nLABEL_120:\n        *(_BYTE *)(v8 + 176) |= 8u;\n        goto LABEL_121;\n      }\n      v90 = sizec + 1;\n      v89 = v107 + 1;\n      if ( sizec == 63 )\n      {\nLABEL_126:\n        v88 += 8LL;\n        if ( v88 == 32 )\n          break;\n        goto LABEL_118;\n      }\n    }\n  }\nLABEL_18:\n  if ( !*(_QWORD *)v8 || !*(_QWORD *)(v8 + 64) )\n    goto LABEL_115;\n  v21 = *(_QWORD *)(v7 + 40);\n  v114 = 0;\n  memset(&v120, 0, 0x90uLL);\n  v130 = v21;\n  v22 = *(_DWORD *)(v8 + 180);\n  v119 = v4;\n  v106 = v5 & 0x400000;\n  v131 = (v5 & 0x400000) != 0;\n  v23 = v106 | v21;\n  v24 = *(_BYTE *)(v8 + 176);\n  v25 = v23 != 0;\n  v127 = v6;\n  v26 = v23;\n  v126 = v6;\n  v134 = v23 != 0;\n  v135 = v22;\n  v132 = (v24 >> 2) & 1;\n  v133 = (v24 >> 3) & 1;\n  v129 = v6;\n  v128 = v6;\n  if ( v6 )\n  {\n    v27 = sub_40B170((__int64)&v119, v6 + 1);\n    if ( v27 )\n    {\nLABEL_86:\n      v114 = v27;\n      v42 = *(_QWORD *)v7;\nLABEL_111:\n      v84 = *(void **)(v42 + 112);\n      if ( v84 )\n      {\n        do\n        {\n          v85 = *(void **)v84;\n          free(v84);\n          v84 = v85;\n        }\n        while ( v85 );\n      }\n      *(_QWORD *)(v42 + 112) = 0LL;\n      v86 = *(void **)(v42 + 32);\n      *(_DWORD *)(v42 + 128) = 15;\n      *(_QWORD *)(v42 + 104) = 0LL;\n      free(v86);\n      *(_QWORD *)(v42 + 32) = 0LL;\n      sub_40C4C0((__int64)&v119);\n      goto LABEL_114;\n    }\n    v25 = v134;\n    v22 = *(_DWORD *)(v8 + 180);\n  }\n  if ( v25 )\n    v4 = v120;\n  v120 = v4;\n  if ( v5 & 0x400000 )\n  {\n    if ( v22 <= 1 )\n    {\n      sub_40B4E0((__int64)&v119);\n      v114 = 0;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v27 = sub_40B710((__int64)&v119);\n        if ( v27 )\n          goto LABEL_86;\n        if ( (signed __int64)v6 <= v123 || v124 > v122 + *(_DWORD *)(v8 + 180) )\n          break;\n        v27 = sub_40B170((__int64)&v119, 2 * v124);\n        if ( v27 )\n          goto LABEL_86;\n      }\n      v114 = 0;\n    }\n  }\n  else if ( v22 > 1 )\n  {\n    sub_40B560((__int64)&v119);\n    v114 = 0;\n  }\n  else\n  {\n    v28 = v124;\n    if ( v26 )\n    {\n      v29 = v122;\n      if ( v127 <= v124 )\n        v28 = v127;\n      if ( v28 > v122 )\n      {\n        while ( 1 )\n        {\n          *(_BYTE *)(v4 + v29) = *(_BYTE *)(v130 + *(_BYTE *)(v121 + v29 + v119));\n          if ( v28 == ++v29 )\n            break;\n          v4 = v120;\n        }\n      }\n      else\n      {\n        v28 = v122;\n      }\n    }\n    v122 = v28;\n    v123 = v28;\n    v114 = 0;\n  }\n  v30 = *(_QWORD *)v7;\n  *(_QWORD *)(v7 + 48) = 0LL;\n  *(_QWORD *)(v30 + 216) = v5;\n  v31 = sub_415350((__int64)&v115, (__int64)&v119, v5 | 0x800000);\n  v125 += v31;\n  v32 = sub_4170F0((__int64)&v119, (__int64 *)v7, &v115, v5, 0LL, &v114);\n  if ( v114 )\n  {\n    if ( !v32 )\n    {\n      *(_QWORD *)(v8 + 104) = 0LL;\n      v42 = *(_QWORD *)v7;\n      goto LABEL_111;\n    }\n    v33 = (char **)(v30 + 112);\n    v100 = (size_t)v32;\n    v35 = (signed int *)(v30 + 128);\n    v36 = (const __m128i *)&v116;\n    LOBYTE(v117) = 2;\n    v101 = sub_40D500(v33, v35, 0LL, 0LL, (const __m128i *)&v116);\n    v38 = (char **)v100;\n    v39 = (char **)v101;\n  }\n  else\n  {\n    v33 = (char **)(v30 + 112);\n    v34 = (size_t)v32;\n    v35 = (signed int *)(v30 + 128);\n    v36 = (const __m128i *)&v116;\n    LOBYTE(v117) = 2;\n    v37 = sub_40D500(v33, v35, 0LL, 0LL, (const __m128i *)&v116);\n    v38 = (char **)v34;\n    v39 = (char **)v37;\n    v40 = v37;\n    if ( !v34 )\n      goto LABEL_42;\n  }\n  LOBYTE(v117) = 16;\n  v41 = sub_40D500(v33, v35, v38, v39, v36);\n  v40 = v39;\n  v39 = (char **)v41;\nLABEL_42:\n  v42 = *(_QWORD *)v7;\n  if ( v39 == 0LL || v40 == 0LL )\n  {\n    v114 = 12;\n    *(_QWORD *)(v8 + 104) = 0LL;\n    goto LABEL_111;\n  }\n  v43 = *(_QWORD *)(v42 + 8);\n  *(_QWORD *)(v8 + 104) = v39;\n  v44 = 8 * v43;\n  v43 *= 24LL;\n  v45 = malloc(v44);\n  *(_QWORD *)(v42 + 24) = v45;\n  v46 = v45;\n  v47 = malloc(v44);\n  *(_QWORD *)(v42 + 32) = v47;\n  v112 = v47;\n  v48 = malloc(v43);\n  *(_QWORD *)(v42 + 40) = v48;\n  size = (size_t)v48;\n  v49 = malloc(v43);\n  *(_QWORD *)(v42 + 48) = v49;\n  if ( !v46 || !v112 || !size || !v49 )\n  {\n    v114 = 12;\n    goto LABEL_111;\n  }\n  v50 = *(_QWORD *)(v7 + 48);\n  v51 = malloc(8 * v50);\n  *(_QWORD *)(v42 + 224) = v51;\n  if ( v51 )\n  {\n    v52 = 0LL;\n    if ( v50 )\n    {\n      do\n      {\n        v51[v52] = v52;\n        ++v52;\n      }\n      while ( v52 != v50 );\n    }\n    sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40CA30, v42);\n    v53 = *(_QWORD *)(v7 + 48);\n    if ( v53 )\n    {\n      v54 = *(_QWORD **)(v42 + 224);\n      v55 = *v54;\n      if ( *v54 )\n        goto LABEL_56;\n      while ( ++v55 != v53 )\n      {\n        if ( v54[v55] != v55 )\n          goto LABEL_56;\n      }\n    }\n    else\n    {\n      v54 = *(_QWORD **)(v42 + 224);\n    }\n    free(v54);\n    *(_QWORD *)(v42 + 224) = 0LL;\n  }\nLABEL_56:\n  v27 = sub_40AD30(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40D8B0, v7);\n  if ( v27 )\n    goto LABEL_86;\n  v27 = sub_40AD30(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40FDE0, v42);\n  if ( v27 )\n    goto LABEL_86;\n  sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40CAC0, v42);\n  v27 = sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40C5C0, v42);\n  if ( v27 )\n    goto LABEL_86;\n  v56 = 0;\n  v57 = 0LL;\n  while ( *(_QWORD *)(v42 + 16) != v57 )\n  {\n    while ( 1 )\n    {\n      while ( *(_QWORD *)(*(_QWORD *)(v42 + 48) + 24 * v57 + 8) )\n      {\n        if ( *(_QWORD *)(v42 + 16) == ++v57 )\n          goto LABEL_63;\n      }\n      sizea = 24 * v57;\n      v27 = sub_40CFA0((__m128i *)v36, v42, v57, 1);\n      if ( v27 )\n        goto LABEL_86;\n      ++v57;\n      if ( *(_QWORD *)(*(_QWORD *)(v42 + 48) + sizea + 8) )\n        break;\n      v56 = 1;\n      free(ptr);\n      if ( *(_QWORD *)(v42 + 16) == v57 )\n      {\nLABEL_64:\n        v56 = 0;\n        v57 = 0LL;\n      }\n    }\n  }\nLABEL_63:\n  if ( v56 )\n    goto LABEL_64;\n  if ( !(*(_BYTE *)(v7 + 56) & 0x10) && *(_QWORD *)(v7 + 48) && *(_BYTE *)(v42 + 176) & 1 || *(_QWORD *)(v42 + 152) )\n  {\n    v58 = (char *)malloc(24 * v57);\n    *(_QWORD *)(v42 + 56) = v58;\n    if ( !v58 )\n    {\n      v114 = 12;\n      v42 = *(_QWORD *)v7;\n      goto LABEL_111;\n    }\n    v59 = 0LL;\n    if ( !v57 )\n      goto LABEL_88;\n    while ( 1 )\n    {\n      v60 = 3 * v59++;\n      v61 = (signed __int64)&v58[8 * v60];\n      *(_OWORD *)v61 = 0LL;\n      *(_QWORD *)(v61 + 16) = 0LL;\n      v62 = *(_QWORD *)(v42 + 16);\n      if ( v62 <= v59 )\n        break;\n      v58 = *(char **)(v42 + 56);\n    }\n    if ( !v62 )\n      goto LABEL_88;\n    v113 = 0LL;\n    v63 = *(_QWORD *)(v42 + 48);\n    while ( 1 )\n    {\n      v64 = 0LL;\n      v65 = v63 + 24 * v113;\n      v66 = *(_QWORD *)(v65 + 16);\n      if ( *(_QWORD *)(v65 + 8) > 0LL )\n        break;\nLABEL_141:\n      if ( *(_QWORD *)(v42 + 16) <= (unsigned __int64)++v113 )\n        goto LABEL_88;\n    }\n    while ( 1 )\n    {\n      sizeb = v66;\n      if ( !(unsigned __int8)sub_40B210(*(_QWORD *)(v42 + 56) + 24LL * *(_QWORD *)(v66 + 8 * v64), v113) )\n        break;\n      v63 = *(_QWORD *)(v42 + 48);\n      ++v64;\n      v66 = sizeb;\n      if ( v64 >= *(_QWORD *)(v63 + 24 * v113 + 8) )\n        goto LABEL_141;\n    }\n    v27 = 12;\n    goto LABEL_86;\n  }\nLABEL_88:\n  v67 = *(_BYTE *)(v8 + 176);\n  v114 = 0;\n  v68 = (v106 == 0) & (v67 >> 2);\n  if ( v68 && !*(_QWORD *)(v7 + 40) )\n  {\n    v93 = *(_QWORD *)(v8 + 16);\n    if ( v93 )\n    {\n      v94 = *(_QWORD *)v8;\n      v95 = 0;\n      v96 = 0LL;\n      v97 = *(_QWORD *)v8;\n      while ( 2 )\n      {\n        switch ( *(_BYTE *)(v97 + 8) )\n        {\n          default:\n            abort();\n            return result;\n          case 6:\n            goto LABEL_89;\n          case 5:\n            v95 = v68;\n            goto LABEL_148;\n          case 2:\n          case 4:\n          case 8:\n          case 9:\n          case 0xA:\n          case 0xB:\n            goto LABEL_148;\n          case 1:\n            if ( *(_BYTE *)v97 < 0 )\n              v56 = v68;\n            goto LABEL_148;\n          case 0xC:\n            v104 = *(_DWORD *)v97;\n            if ( *(_DWORD *)v97 == 32 )\n              goto LABEL_148;\n            if ( v104 <= 0x20 )\n            {\n              if ( v104 != 16 )\n                goto LABEL_89;\n            }\n            else if ( v104 != 64 && v104 != 128 )\n            {\n              goto LABEL_89;\n            }\nLABEL_148:\n            ++v96;\n            v97 += 16LL;\n            if ( v96 != v93 )\n              continue;\n            if ( !((unsigned __int8)v95 | (unsigned __int8)v56) )\n              goto LABEL_175;\n            v102 = v94 + 16 * v96;\n            do\n            {\n              v103 = *(_BYTE *)(v94 + 8);\n              if ( v103 == 1 )\n              {\n                if ( *(_BYTE *)v94 < 0 )\n                  *(_BYTE *)(v94 + 10) &= 0xDFu;\n              }\n              else if ( v103 == 5 )\n              {\n                *(_BYTE *)(v94 + 8) = 7;\n              }\n              v94 += 16LL;\n            }\n            while ( v102 != v94 );\n            break;\n          case 3:\n            if ( *(_QWORD *)(*(_QWORD *)v97 + 16LL) || *(_QWORD *)(*(_QWORD *)v97 + 24LL) )\n              goto LABEL_89;\n            goto LABEL_148;\n        }\n        break;\n      }\n    }\n    else\n    {\nLABEL_175:\n      v95 = 0;\n    }\n    v14 = *(_QWORD *)(v8 + 152) == 0LL;\n    v19 = *(_QWORD *)(v8 + 152) < 0;\n    v105 = *(_BYTE *)(v8 + 176);\n    *(_DWORD *)(v8 + 180) = 1;\n    *(_BYTE *)(v8 + 176) = v105 & 0xF9 | 2 * ((v95 | (!v19 && !v14)) & 1);\n  }\nLABEL_89:\n  v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 104) + 24LL) + 56LL);\n  *(_QWORD *)(v8 + 144) = v69;\n  v70 = sub_40D930((__int64)v36, *(_QWORD *)(v8 + 48) + 24 * v69);\n  v115.m128i_i32[0] = v70;\n  if ( !v70 )\n  {\n    if ( *(_QWORD *)(v8 + 152) > 0LL )\n    {\n      v71 = v117;\n      if ( v117 > 0 )\n      {\n        v72 = 0LL;\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            v73 = *(_QWORD *)v8 + 16LL * *((_QWORD *)ptr + v72);\n            if ( *(_BYTE *)(v73 + 8) == 4 )\n            {\n              v74 = 0LL;\n              while ( 1 )\n              {\n                v75 = *(_QWORD *)v8 + 16LL * *((_QWORD *)ptr + v74);\n                if ( *(_BYTE *)(v75 + 8) == 9 && *(_QWORD *)v75 == *(_QWORD *)v73 )\n                  break;\n                if ( v71 == ++v74 )\n                  goto LABEL_93;\n              }\n              if ( !sub_40C890(\n                      v71,\n                      (__int64 *)&v36[1],\n                      **(_QWORD **)(*(_QWORD *)(v8 + 40) + 24LL * *((_QWORD *)ptr + v72) + 16)) )\n                break;\n            }\nLABEL_93:\n            if ( v71 <= ++v72 )\n              goto LABEL_102;\n          }\n          v77 = sub_40CDD0((__int64)v36, *(_QWORD *)(v8 + 48) + 24 * v76);\n          if ( v77 )\n            break;\n          v71 = v117;\n          v72 = 1LL;\n          if ( v117 <= 1 )\n            goto LABEL_102;\n        }\n        v70 = v77;\n        goto LABEL_106;\n      }\n    }\nLABEL_102:\n    v78 = sub_40DB40(&v115, v8, (__int64)v36, 0);\n    *(_QWORD *)(v8 + 72) = v78;\n    if ( v78 )\n    {\n      if ( *(_BYTE *)(v78 + 104) >= 0 )\n      {\n        *(_QWORD *)(v8 + 96) = v78;\n        *(_QWORD *)(v8 + 88) = v78;\n        *(_QWORD *)(v8 + 80) = v78;\nLABEL_105:\n        free(ptr);\n        goto LABEL_106;\n      }\n      *(_QWORD *)(v8 + 80) = sub_40DB40(&v115, v8, (__int64)v36, 1u);\n      *(_QWORD *)(v8 + 88) = sub_40DB40(&v115, v8, (__int64)v36, 2u);\n      v98 = sub_40DB40(&v115, v8, (__int64)v36, 6u);\n      v14 = *(_QWORD *)(v8 + 80) == 0LL;\n      *(_QWORD *)(v8 + 96) = v98;\n      if ( !v14 && *(_QWORD *)(v8 + 88) && v98 )\n        goto LABEL_105;\n    }\n    v70 = v115.m128i_i32[0];\n  }\nLABEL_106:\n  v79 = *(_QWORD *)v7;\n  v114 = v70;\n  v80 = *(void **)(v79 + 112);\n  if ( v80 )\n  {\n    do\n    {\n      v81 = *(void **)v80;\n      free(v80);\n      v80 = v81;\n    }\n    while ( v81 );\n  }\n  *(_QWORD *)(v79 + 112) = 0LL;\n  v82 = *(void **)(v79 + 32);\n  *(_DWORD *)(v79 + 128) = 15;\n  *(_QWORD *)(v79 + 104) = 0LL;\n  free(v82);\n  *(_QWORD *)(v79 + 32) = 0LL;\n  sub_40C4C0((__int64)&v119);\n  result = v114;\n  if ( v114 )\n    goto LABEL_114;\n  return result;\n}\n", 
            "funcStartAddr": "0x401ff3L", 
            "funcEndAddr": "0x401ff8L", 
            "funcName": "sub_417250"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_417250(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14@1\n  __int64 v5; // r13@1\n  unsigned __int64 v6; // r12@1\n  __int64 v7; // rbp@1\n  __int64 v8; // rbx@1\n  size_t v9; // rsi@4\n  signed __int64 v10; // r15@6\n  void *v11; // rax@7\n  char *v12; // rax@7\n  bool v13; // cf@10\n  bool v14; // zf@10\n  _BYTE *v15; // rdi@10\n  signed __int64 v16; // rcx@10\n  char *v17; // rsi@10\n  char v18; // al@15\n  bool v19; // sf@15\n  unsigned __int8 v20; // of@15\n  __int64 v21; // rdx@20\n  signed int v22; // edi@20\n  __int64 v23; // rdx@20\n  unsigned __int8 v24; // al@20\n  char v25; // si@20\n  __int64 v26; // r15@20\n  signed int v27; // eax@25\n  __int64 v28; // rcx@31\n  __int64 v29; // rax@32\n  __int64 v30; // r12@39\n  int v31; // eax@39\n  char *v32; // rax@39\n  char **v33; // r15@40\n  size_t v34; // ST08_8@40\n  signed int *v35; // r13@40\n  const __m128i *v36; // r12@40\n  char *v37; // rax@40\n  char **v38; // r9@40\n  char **v39; // r14@40\n  void *v40; // rdx@40\n  char *v41; // rax@41\n  __int64 v42; // r15@42\n  size_t v43; // r13@43\n  signed __int64 v44; // ST08_8@43\n  void *v45; // rax@43\n  void *v46; // r14@43\n  void *v47; // rax@43\n  void *v48; // rax@43\n  void *v49; // rax@43\n  __int64 v50; // r13@47\n  _QWORD *v51; // rax@47\n  __int64 v52; // rdx@48\n  __int64 v53; // rdx@50\n  _QWORD *v54; // rdi@51\n  __int64 v55; // rax@51\n  char v56; // r13@59\n  __int64 v57; // r14@59\n  char *v58; // rax@74\n  unsigned __int64 v59; // rdx@75\n  signed __int64 v60; // rcx@78\n  signed __int64 v61; // rax@78\n  unsigned __int64 v62; // rax@78\n  __int64 v63; // rax@80\n  __int64 v64; // r14@81\n  signed __int64 v65; // rsi@81\n  size_t v66; // rcx@81\n  unsigned __int8 v67; // al@88\n  char v68; // al@88\n  __int64 v69; // rax@89\n  unsigned int v70; // er13@89\n  __int64 v71; // r10@91\n  signed __int64 v72; // r9@92\n  signed __int64 v73; // rcx@94\n  __int64 v74; // rdx@95\n  signed __int64 v75; // rax@97\n  __int64 v76; // r11@99\n  unsigned int v77; // eax@100\n  __int64 v78; // rax@102\n  __int64 v79; // r12@106\n  void *v80; // rdi@106\n  void *v81; // r13@107\n  void *v82; // rdi@108\n  signed __int64 result; // rax@108\n  void *v84; // rdi@111\n  void *v85; // r12@112\n  void *v86; // rdi@113\n  void *v87; // rax@116\n  __int64 v88; // r15@117\n  int v89; // edx@118\n  int v90; // ecx@118\n  wint_t v91; // eax@122\n  unsigned int v92; // edi@122\n  __int64 v93; // rdi@130\n  __int64 v94; // r8@131\n  char v95; // r9@131\n  __int64 v96; // rcx@131\n  __int64 v97; // rdx@131\n  __int64 v98; // rax@133\n  void *v99; // rax@138\n  size_t v100; // ST08_8@144\n  char *v101; // rax@144\n  signed __int64 v102; // rax@150\n  char v103; // dl@154\n  unsigned int v104; // esi@160\n  char v105; // dl@176\n  __int64 v106; // [sp+0h] [bp-138h]@20\n  int v107; // [sp+0h] [bp-138h]@122\n  size_t size; // [sp+8h] [bp-130h]@43\n  size_t sizea; // [sp+8h] [bp-130h]@65\n  size_t sizeb; // [sp+8h] [bp-130h]@84\n  int sizec; // [sp+8h] [bp-130h]@122\n  void *v112; // [sp+10h] [bp-128h]@43\n  __int64 v113; // [sp+10h] [bp-128h]@80\n  unsigned int v114; // [sp+2Ch] [bp-10Ch]@1\n  const __m128i v115; // [sp+30h] [bp-108h]@39\n  char v116; // [sp+40h] [bp-F8h]@40\n  __int64 v117; // [sp+48h] [bp-F0h]@40\n  void *ptr; // [sp+50h] [bp-E8h]@67\n  __int64 v119; // [sp+60h] [bp-D8h]@20\n  __int64 v120; // [sp+68h] [bp-D0h]@20\n  __int64 v121; // [sp+88h] [bp-B0h]@37\n  __int64 v122; // [sp+90h] [bp-A8h]@27\n  __int64 v123; // [sp+98h] [bp-A0h]@26\n  __int64 v124; // [sp+A0h] [bp-98h]@27\n  __int64 v125; // [sp+A8h] [bp-90h]@39\n  unsigned __int64 v126; // [sp+B0h] [bp-88h]@20\n  __int64 v127; // [sp+B8h] [bp-80h]@20\n  unsigned __int64 v128; // [sp+C0h] [bp-78h]@20\n  unsigned __int64 v129; // [sp+C8h] [bp-70h]@20\n  __int64 v130; // [sp+D8h] [bp-60h]@20\n  bool v131; // [sp+E8h] [bp-50h]@20\n  char v132; // [sp+E9h] [bp-4Fh]@20\n  char v133; // [sp+EAh] [bp-4Eh]@20\n  bool v134; // [sp+EBh] [bp-4Dh]@20\n  int v135; // [sp+F0h] [bp-48h]@20\n\n  v4 = a2;\n  v5 = a4;\n  v6 = a3;\n  v7 = a1;\n  *(_BYTE *)(a1 + 56) &= 0x90u;\n  v13 = *(_QWORD *)(a1 + 8) < 0xE7uLL;\n  v14 = *(_QWORD *)(a1 + 8) == 231LL;\n  v114 = 0;\n  v8 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 24) = a4;\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_QWORD *)(a1 + 48) = 0LL;\n  if ( v13 || v14 )\n  {\n    v99 = realloc((void *)v8, 0xE8uLL);\n    v8 = (__int64)v99;\n    if ( !v99 )\n      return 12LL;\n    *(_QWORD *)(a1 + 8) = 232LL;\n    *(_QWORD *)a1 = v99;\n  }\n  *(_QWORD *)(a1 + 16) = 232LL;\n  *(_QWORD *)v8 = 0LL;\n  *(_QWORD *)(v8 + 224) = 0LL;\n  memset(\n    (void *)((v8 + 8) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v8 - (((_DWORD)v8 + 8) & 0xFFFFFFF8) + 232) >> 3));\n  *(_DWORD *)(v8 + 128) = 15;\n  if ( v6 > 0x555555555555554LL )\n    goto LABEL_115;\n  *(_QWORD *)(v8 + 8) = v6 + 1;\n  *(_QWORD *)v8 = malloc(16 * (v6 + 1));\n  if ( v6 )\n  {\n    v9 = 1LL;\n    do\n      v9 *= 2LL;\n    while ( v6 >= v9 );\n    v10 = v9 - 1;\n  }\n  else\n  {\n    v10 = 0LL;\n    v9 = 1LL;\n  }\n  v11 = calloc(0x18uLL, v9);\n  *(_QWORD *)(v8 + 136) = v10;\n  *(_QWORD *)(v8 + 64) = v11;\n  *(_DWORD *)(v8 + 180) = __ctype_get_mb_cur_max();\n  v12 = nl_langinfo(14);\n  if ( (*v12 & 0xDF) == 85 && (v12[1] & 0xDF) == 84 && (v12[2] & 0xDF) == 70 )\n  {\n    v13 = (unsigned __int8)v12[3] < 0x2Du;\n    v14 = v12[3] == 45;\n    v15 = \"UTF-8\" + 4;\n    v16 = 2LL;\n    v17 = &v12[v14 + 3];\n    do\n    {\n      if ( !v16 )\n        break;\n      v13 = (unsigned __int8)*v17 < *v15;\n      v14 = *v17++ == *v15++;\n      --v16;\n    }\n    while ( v14 );\n    if ( (!v13 && !v14) == v13 )\n      *(_BYTE *)(v8 + 176) |= 4u;\n  }\n  v18 = *(_BYTE *)(v8 + 176);\n  v20 = __OFSUB__(*(_DWORD *)(v8 + 180), 1);\n  v14 = *(_DWORD *)(v8 + 180) == 1;\n  v19 = *(_DWORD *)(v8 + 180) - 1 < 0;\n  *(_BYTE *)(v8 + 176) &= 0xF7u;\n  if ( !((unsigned __int8)(v19 ^ v20) | v14) )\n  {\n    if ( v18 & 4 )\n    {\n      *(_QWORD *)(v8 + 120) = &unk_41E560;\n      goto LABEL_18;\n    }\n    v87 = calloc(0x20uLL, 1uLL);\n    *(_QWORD *)(v8 + 120) = v87;\n    if ( !v87 )\n    {\nLABEL_115:\n      v114 = 12;\nLABEL_114:\n      sub_40FE70((void **)v8);\n      *(_QWORD *)v7 = 0LL;\n      result = v114;\n      *(_QWORD *)(v7 + 8) = 0LL;\n      return result;\n    }\n    v88 = 0LL;\nLABEL_118:\n    v89 = 8 * v88;\n    v90 = 0;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        sizec = v90;\n        v107 = v89;\n        v91 = btowc(v89);\n        v92 = v107 & 0xFFFFFF80;\n        if ( v91 != -1 )\n          break;\n        if ( !v92 )\n          goto LABEL_120;\nLABEL_121:\n        v90 = sizec + 1;\n        v89 = v107 + 1;\n        if ( sizec == 63 )\n          goto LABEL_126;\n      }\n      *(_QWORD *)(v88 + *(_QWORD *)(v8 + 120)) |= 1LL << sizec;\n      if ( v92 )\n        goto LABEL_121;\n      if ( v91 != v107 )\n      {\nLABEL_120:\n        *(_BYTE *)(v8 + 176) |= 8u;\n        goto LABEL_121;\n      }\n      v90 = sizec + 1;\n      v89 = v107 + 1;\n      if ( sizec == 63 )\n      {\nLABEL_126:\n        v88 += 8LL;\n        if ( v88 == 32 )\n          break;\n        goto LABEL_118;\n      }\n    }\n  }\nLABEL_18:\n  if ( !*(_QWORD *)v8 || !*(_QWORD *)(v8 + 64) )\n    goto LABEL_115;\n  v21 = *(_QWORD *)(v7 + 40);\n  v114 = 0;\n  memset(&v120, 0, 0x90uLL);\n  v130 = v21;\n  v22 = *(_DWORD *)(v8 + 180);\n  v119 = v4;\n  v106 = v5 & 0x400000;\n  v131 = (v5 & 0x400000) != 0;\n  v23 = v106 | v21;\n  v24 = *(_BYTE *)(v8 + 176);\n  v25 = v23 != 0;\n  v127 = v6;\n  v26 = v23;\n  v126 = v6;\n  v134 = v23 != 0;\n  v135 = v22;\n  v132 = (v24 >> 2) & 1;\n  v133 = (v24 >> 3) & 1;\n  v129 = v6;\n  v128 = v6;\n  if ( v6 )\n  {\n    v27 = sub_40B170((__int64)&v119, v6 + 1);\n    if ( v27 )\n    {\nLABEL_86:\n      v114 = v27;\n      v42 = *(_QWORD *)v7;\nLABEL_111:\n      v84 = *(void **)(v42 + 112);\n      if ( v84 )\n      {\n        do\n        {\n          v85 = *(void **)v84;\n          free(v84);\n          v84 = v85;\n        }\n        while ( v85 );\n      }\n      *(_QWORD *)(v42 + 112) = 0LL;\n      v86 = *(void **)(v42 + 32);\n      *(_DWORD *)(v42 + 128) = 15;\n      *(_QWORD *)(v42 + 104) = 0LL;\n      free(v86);\n      *(_QWORD *)(v42 + 32) = 0LL;\n      sub_40C4C0((__int64)&v119);\n      goto LABEL_114;\n    }\n    v25 = v134;\n    v22 = *(_DWORD *)(v8 + 180);\n  }\n  if ( v25 )\n    v4 = v120;\n  v120 = v4;\n  if ( v5 & 0x400000 )\n  {\n    if ( v22 <= 1 )\n    {\n      sub_40B4E0((__int64)&v119);\n      v114 = 0;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v27 = sub_40B710((__int64)&v119);\n        if ( v27 )\n          goto LABEL_86;\n        if ( (signed __int64)v6 <= v123 || v124 > v122 + *(_DWORD *)(v8 + 180) )\n          break;\n        v27 = sub_40B170((__int64)&v119, 2 * v124);\n        if ( v27 )\n          goto LABEL_86;\n      }\n      v114 = 0;\n    }\n  }\n  else if ( v22 > 1 )\n  {\n    sub_40B560((__int64)&v119);\n    v114 = 0;\n  }\n  else\n  {\n    v28 = v124;\n    if ( v26 )\n    {\n      v29 = v122;\n      if ( v127 <= v124 )\n        v28 = v127;\n      if ( v28 > v122 )\n      {\n        while ( 1 )\n        {\n          *(_BYTE *)(v4 + v29) = *(_BYTE *)(v130 + *(_BYTE *)(v121 + v29 + v119));\n          if ( v28 == ++v29 )\n            break;\n          v4 = v120;\n        }\n      }\n      else\n      {\n        v28 = v122;\n      }\n    }\n    v122 = v28;\n    v123 = v28;\n    v114 = 0;\n  }\n  v30 = *(_QWORD *)v7;\n  *(_QWORD *)(v7 + 48) = 0LL;\n  *(_QWORD *)(v30 + 216) = v5;\n  v31 = sub_415350((__int64)&v115, (__int64)&v119, v5 | 0x800000);\n  v125 += v31;\n  v32 = sub_4170F0((__int64)&v119, (__int64 *)v7, &v115, v5, 0LL, &v114);\n  if ( v114 )\n  {\n    if ( !v32 )\n    {\n      *(_QWORD *)(v8 + 104) = 0LL;\n      v42 = *(_QWORD *)v7;\n      goto LABEL_111;\n    }\n    v33 = (char **)(v30 + 112);\n    v100 = (size_t)v32;\n    v35 = (signed int *)(v30 + 128);\n    v36 = (const __m128i *)&v116;\n    LOBYTE(v117) = 2;\n    v101 = sub_40D500(v33, v35, 0LL, 0LL, (const __m128i *)&v116);\n    v38 = (char **)v100;\n    v39 = (char **)v101;\n  }\n  else\n  {\n    v33 = (char **)(v30 + 112);\n    v34 = (size_t)v32;\n    v35 = (signed int *)(v30 + 128);\n    v36 = (const __m128i *)&v116;\n    LOBYTE(v117) = 2;\n    v37 = sub_40D500(v33, v35, 0LL, 0LL, (const __m128i *)&v116);\n    v38 = (char **)v34;\n    v39 = (char **)v37;\n    v40 = v37;\n    if ( !v34 )\n      goto LABEL_42;\n  }\n  LOBYTE(v117) = 16;\n  v41 = sub_40D500(v33, v35, v38, v39, v36);\n  v40 = v39;\n  v39 = (char **)v41;\nLABEL_42:\n  v42 = *(_QWORD *)v7;\n  if ( v39 == 0LL || v40 == 0LL )\n  {\n    v114 = 12;\n    *(_QWORD *)(v8 + 104) = 0LL;\n    goto LABEL_111;\n  }\n  v43 = *(_QWORD *)(v42 + 8);\n  *(_QWORD *)(v8 + 104) = v39;\n  v44 = 8 * v43;\n  v43 *= 24LL;\n  v45 = malloc(v44);\n  *(_QWORD *)(v42 + 24) = v45;\n  v46 = v45;\n  v47 = malloc(v44);\n  *(_QWORD *)(v42 + 32) = v47;\n  v112 = v47;\n  v48 = malloc(v43);\n  *(_QWORD *)(v42 + 40) = v48;\n  size = (size_t)v48;\n  v49 = malloc(v43);\n  *(_QWORD *)(v42 + 48) = v49;\n  if ( !v46 || !v112 || !size || !v49 )\n  {\n    v114 = 12;\n    goto LABEL_111;\n  }\n  v50 = *(_QWORD *)(v7 + 48);\n  v51 = malloc(8 * v50);\n  *(_QWORD *)(v42 + 224) = v51;\n  if ( v51 )\n  {\n    v52 = 0LL;\n    if ( v50 )\n    {\n      do\n      {\n        v51[v52] = v52;\n        ++v52;\n      }\n      while ( v52 != v50 );\n    }\n    sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40CA30, v42);\n    v53 = *(_QWORD *)(v7 + 48);\n    if ( v53 )\n    {\n      v54 = *(_QWORD **)(v42 + 224);\n      v55 = *v54;\n      if ( *v54 )\n        goto LABEL_56;\n      while ( ++v55 != v53 )\n      {\n        if ( v54[v55] != v55 )\n          goto LABEL_56;\n      }\n    }\n    else\n    {\n      v54 = *(_QWORD **)(v42 + 224);\n    }\n    free(v54);\n    *(_QWORD *)(v42 + 224) = 0LL;\n  }\nLABEL_56:\n  v27 = sub_40AD30(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40D8B0, v7);\n  if ( v27 )\n    goto LABEL_86;\n  v27 = sub_40AD30(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40FDE0, v42);\n  if ( v27 )\n    goto LABEL_86;\n  sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40CAC0, v42);\n  v27 = sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40C5C0, v42);\n  if ( v27 )\n    goto LABEL_86;\n  v56 = 0;\n  v57 = 0LL;\n  while ( *(_QWORD *)(v42 + 16) != v57 )\n  {\n    while ( 1 )\n    {\n      while ( *(_QWORD *)(*(_QWORD *)(v42 + 48) + 24 * v57 + 8) )\n      {\n        if ( *(_QWORD *)(v42 + 16) == ++v57 )\n          goto LABEL_63;\n      }\n      sizea = 24 * v57;\n      v27 = sub_40CFA0((__m128i *)v36, v42, v57, 1);\n      if ( v27 )\n        goto LABEL_86;\n      ++v57;\n      if ( *(_QWORD *)(*(_QWORD *)(v42 + 48) + sizea + 8) )\n        break;\n      v56 = 1;\n      free(ptr);\n      if ( *(_QWORD *)(v42 + 16) == v57 )\n      {\nLABEL_64:\n        v56 = 0;\n        v57 = 0LL;\n      }\n    }\n  }\nLABEL_63:\n  if ( v56 )\n    goto LABEL_64;\n  if ( !(*(_BYTE *)(v7 + 56) & 0x10) && *(_QWORD *)(v7 + 48) && *(_BYTE *)(v42 + 176) & 1 || *(_QWORD *)(v42 + 152) )\n  {\n    v58 = (char *)malloc(24 * v57);\n    *(_QWORD *)(v42 + 56) = v58;\n    if ( !v58 )\n    {\n      v114 = 12;\n      v42 = *(_QWORD *)v7;\n      goto LABEL_111;\n    }\n    v59 = 0LL;\n    if ( !v57 )\n      goto LABEL_88;\n    while ( 1 )\n    {\n      v60 = 3 * v59++;\n      v61 = (signed __int64)&v58[8 * v60];\n      *(_OWORD *)v61 = 0LL;\n      *(_QWORD *)(v61 + 16) = 0LL;\n      v62 = *(_QWORD *)(v42 + 16);\n      if ( v62 <= v59 )\n        break;\n      v58 = *(char **)(v42 + 56);\n    }\n    if ( !v62 )\n      goto LABEL_88;\n    v113 = 0LL;\n    v63 = *(_QWORD *)(v42 + 48);\n    while ( 1 )\n    {\n      v64 = 0LL;\n      v65 = v63 + 24 * v113;\n      v66 = *(_QWORD *)(v65 + 16);\n      if ( *(_QWORD *)(v65 + 8) > 0LL )\n        break;\nLABEL_141:\n      if ( *(_QWORD *)(v42 + 16) <= (unsigned __int64)++v113 )\n        goto LABEL_88;\n    }\n    while ( 1 )\n    {\n      sizeb = v66;\n      if ( !(unsigned __int8)sub_40B210(*(_QWORD *)(v42 + 56) + 24LL * *(_QWORD *)(v66 + 8 * v64), v113) )\n        break;\n      v63 = *(_QWORD *)(v42 + 48);\n      ++v64;\n      v66 = sizeb;\n      if ( v64 >= *(_QWORD *)(v63 + 24 * v113 + 8) )\n        goto LABEL_141;\n    }\n    v27 = 12;\n    goto LABEL_86;\n  }\nLABEL_88:\n  v67 = *(_BYTE *)(v8 + 176);\n  v114 = 0;\n  v68 = (v106 == 0) & (v67 >> 2);\n  if ( v68 && !*(_QWORD *)(v7 + 40) )\n  {\n    v93 = *(_QWORD *)(v8 + 16);\n    if ( v93 )\n    {\n      v94 = *(_QWORD *)v8;\n      v95 = 0;\n      v96 = 0LL;\n      v97 = *(_QWORD *)v8;\n      while ( 2 )\n      {\n        switch ( *(_BYTE *)(v97 + 8) )\n        {\n          default:\n            abort();\n            return result;\n          case 6:\n            goto LABEL_89;\n          case 5:\n            v95 = v68;\n            goto LABEL_148;\n          case 2:\n          case 4:\n          case 8:\n          case 9:\n          case 0xA:\n          case 0xB:\n            goto LABEL_148;\n          case 1:\n            if ( *(_BYTE *)v97 < 0 )\n              v56 = v68;\n            goto LABEL_148;\n          case 0xC:\n            v104 = *(_DWORD *)v97;\n            if ( *(_DWORD *)v97 == 32 )\n              goto LABEL_148;\n            if ( v104 <= 0x20 )\n            {\n              if ( v104 != 16 )\n                goto LABEL_89;\n            }\n            else if ( v104 != 64 && v104 != 128 )\n            {\n              goto LABEL_89;\n            }\nLABEL_148:\n            ++v96;\n            v97 += 16LL;\n            if ( v96 != v93 )\n              continue;\n            if ( !((unsigned __int8)v95 | (unsigned __int8)v56) )\n              goto LABEL_175;\n            v102 = v94 + 16 * v96;\n            do\n            {\n              v103 = *(_BYTE *)(v94 + 8);\n              if ( v103 == 1 )\n              {\n                if ( *(_BYTE *)v94 < 0 )\n                  *(_BYTE *)(v94 + 10) &= 0xDFu;\n              }\n              else if ( v103 == 5 )\n              {\n                *(_BYTE *)(v94 + 8) = 7;\n              }\n              v94 += 16LL;\n            }\n            while ( v102 != v94 );\n            break;\n          case 3:\n            if ( *(_QWORD *)(*(_QWORD *)v97 + 16LL) || *(_QWORD *)(*(_QWORD *)v97 + 24LL) )\n              goto LABEL_89;\n            goto LABEL_148;\n        }\n        break;\n      }\n    }\n    else\n    {\nLABEL_175:\n      v95 = 0;\n    }\n    v14 = *(_QWORD *)(v8 + 152) == 0LL;\n    v19 = *(_QWORD *)(v8 + 152) < 0;\n    v105 = *(_BYTE *)(v8 + 176);\n    *(_DWORD *)(v8 + 180) = 1;\n    *(_BYTE *)(v8 + 176) = v105 & 0xF9 | 2 * ((v95 | (!v19 && !v14)) & 1);\n  }\nLABEL_89:\n  v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 104) + 24LL) + 56LL);\n  *(_QWORD *)(v8 + 144) = v69;\n  v70 = sub_40D930((__int64)v36, *(_QWORD *)(v8 + 48) + 24 * v69);\n  v115.m128i_i32[0] = v70;\n  if ( !v70 )\n  {\n    if ( *(_QWORD *)(v8 + 152) > 0LL )\n    {\n      v71 = v117;\n      if ( v117 > 0 )\n      {\n        v72 = 0LL;\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            v73 = *(_QWORD *)v8 + 16LL * *((_QWORD *)ptr + v72);\n            if ( *(_BYTE *)(v73 + 8) == 4 )\n            {\n              v74 = 0LL;\n              while ( 1 )\n              {\n                v75 = *(_QWORD *)v8 + 16LL * *((_QWORD *)ptr + v74);\n                if ( *(_BYTE *)(v75 + 8) == 9 && *(_QWORD *)v75 == *(_QWORD *)v73 )\n                  break;\n                if ( v71 == ++v74 )\n                  goto LABEL_93;\n              }\n              if ( !sub_40C890(\n                      v71,\n                      (__int64 *)&v36[1],\n                      **(_QWORD **)(*(_QWORD *)(v8 + 40) + 24LL * *((_QWORD *)ptr + v72) + 16)) )\n                break;\n            }\nLABEL_93:\n            if ( v71 <= ++v72 )\n              goto LABEL_102;\n          }\n          v77 = sub_40CDD0((__int64)v36, *(_QWORD *)(v8 + 48) + 24 * v76);\n          if ( v77 )\n            break;\n          v71 = v117;\n          v72 = 1LL;\n          if ( v117 <= 1 )\n            goto LABEL_102;\n        }\n        v70 = v77;\n        goto LABEL_106;\n      }\n    }\nLABEL_102:\n    v78 = sub_40DB40(&v115, v8, (__int64)v36, 0);\n    *(_QWORD *)(v8 + 72) = v78;\n    if ( v78 )\n    {\n      if ( *(_BYTE *)(v78 + 104) >= 0 )\n      {\n        *(_QWORD *)(v8 + 96) = v78;\n        *(_QWORD *)(v8 + 88) = v78;\n        *(_QWORD *)(v8 + 80) = v78;\nLABEL_105:\n        free(ptr);\n        goto LABEL_106;\n      }\n      *(_QWORD *)(v8 + 80) = sub_40DB40(&v115, v8, (__int64)v36, 1u);\n      *(_QWORD *)(v8 + 88) = sub_40DB40(&v115, v8, (__int64)v36, 2u);\n      v98 = sub_40DB40(&v115, v8, (__int64)v36, 6u);\n      v14 = *(_QWORD *)(v8 + 80) == 0LL;\n      *(_QWORD *)(v8 + 96) = v98;\n      if ( !v14 && *(_QWORD *)(v8 + 88) && v98 )\n        goto LABEL_105;\n    }\n    v70 = v115.m128i_i32[0];\n  }\nLABEL_106:\n  v79 = *(_QWORD *)v7;\n  v114 = v70;\n  v80 = *(void **)(v79 + 112);\n  if ( v80 )\n  {\n    do\n    {\n      v81 = *(void **)v80;\n      free(v80);\n      v80 = v81;\n    }\n    while ( v81 );\n  }\n  *(_QWORD *)(v79 + 112) = 0LL;\n  v82 = *(void **)(v79 + 32);\n  *(_DWORD *)(v79 + 128) = 15;\n  *(_QWORD *)(v79 + 104) = 0LL;\n  free(v82);\n  *(_QWORD *)(v79 + 32) = 0LL;\n  sub_40C4C0((__int64)&v119);\n  result = v114;\n  if ( v114 )\n    goto LABEL_114;\n  return result;\n}\n\nsigned __int64 __fastcall sub_417250(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14@1\n  __int64 v5; // r13@1\n  unsigned __int64 v6; // r12@1\n  __int64 v7; // rbp@1\n  __int64 v8; // rbx@1\n  size_t v9; // rsi@4\n  signed __int64 v10; // r15@6\n  void *v11; // rax@7\n  char *v12; // rax@7\n  bool v13; // cf@10\n  bool v14; // zf@10\n  _BYTE *v15; // rdi@10\n  signed __int64 v16; // rcx@10\n  char *v17; // rsi@10\n  char v18; // al@15\n  bool v19; // sf@15\n  unsigned __int8 v20; // of@15\n  __int64 v21; // rdx@20\n  signed int v22; // edi@20\n  __int64 v23; // rdx@20\n  unsigned __int8 v24; // al@20\n  char v25; // si@20\n  __int64 v26; // r15@20\n  signed int v27; // eax@25\n  __int64 v28; // rcx@31\n  __int64 v29; // rax@32\n  __int64 v30; // r12@39\n  int v31; // eax@39\n  char *v32; // rax@39\n  char **v33; // r15@40\n  size_t v34; // ST08_8@40\n  signed int *v35; // r13@40\n  const __m128i *v36; // r12@40\n  char *v37; // rax@40\n  char **v38; // r9@40\n  char **v39; // r14@40\n  void *v40; // rdx@40\n  char *v41; // rax@41\n  __int64 v42; // r15@42\n  size_t v43; // r13@43\n  signed __int64 v44; // ST08_8@43\n  void *v45; // rax@43\n  void *v46; // r14@43\n  void *v47; // rax@43\n  void *v48; // rax@43\n  void *v49; // rax@43\n  __int64 v50; // r13@47\n  _QWORD *v51; // rax@47\n  __int64 v52; // rdx@48\n  __int64 v53; // rdx@50\n  _QWORD *v54; // rdi@51\n  __int64 v55; // rax@51\n  char v56; // r13@59\n  __int64 v57; // r14@59\n  char *v58; // rax@74\n  unsigned __int64 v59; // rdx@75\n  signed __int64 v60; // rcx@78\n  signed __int64 v61; // rax@78\n  unsigned __int64 v62; // rax@78\n  __int64 v63; // rax@80\n  __int64 v64; // r14@81\n  signed __int64 v65; // rsi@81\n  size_t v66; // rcx@81\n  unsigned __int8 v67; // al@88\n  char v68; // al@88\n  __int64 v69; // rax@89\n  unsigned int v70; // er13@89\n  __int64 v71; // r10@91\n  signed __int64 v72; // r9@92\n  signed __int64 v73; // rcx@94\n  __int64 v74; // rdx@95\n  signed __int64 v75; // rax@97\n  __int64 v76; // r11@99\n  unsigned int v77; // eax@100\n  __int64 v78; // rax@102\n  __int64 v79; // r12@106\n  void *v80; // rdi@106\n  void *v81; // r13@107\n  void *v82; // rdi@108\n  signed __int64 result; // rax@108\n  void *v84; // rdi@111\n  void *v85; // r12@112\n  void *v86; // rdi@113\n  void *v87; // rax@116\n  __int64 v88; // r15@117\n  int v89; // edx@118\n  int v90; // ecx@118\n  wint_t v91; // eax@122\n  unsigned int v92; // edi@122\n  __int64 v93; // rdi@130\n  __int64 v94; // r8@131\n  char v95; // r9@131\n  __int64 v96; // rcx@131\n  __int64 v97; // rdx@131\n  __int64 v98; // rax@133\n  void *v99; // rax@138\n  size_t v100; // ST08_8@144\n  char *v101; // rax@144\n  signed __int64 v102; // rax@150\n  char v103; // dl@154\n  unsigned int v104; // esi@160\n  char v105; // dl@176\n  __int64 v106; // [sp+0h] [bp-138h]@20\n  int v107; // [sp+0h] [bp-138h]@122\n  size_t size; // [sp+8h] [bp-130h]@43\n  size_t sizea; // [sp+8h] [bp-130h]@65\n  size_t sizeb; // [sp+8h] [bp-130h]@84\n  int sizec; // [sp+8h] [bp-130h]@122\n  void *v112; // [sp+10h] [bp-128h]@43\n  __int64 v113; // [sp+10h] [bp-128h]@80\n  unsigned int v114; // [sp+2Ch] [bp-10Ch]@1\n  const __m128i v115; // [sp+30h] [bp-108h]@39\n  char v116; // [sp+40h] [bp-F8h]@40\n  __int64 v117; // [sp+48h] [bp-F0h]@40\n  void *ptr; // [sp+50h] [bp-E8h]@67\n  __int64 v119; // [sp+60h] [bp-D8h]@20\n  __int64 v120; // [sp+68h] [bp-D0h]@20\n  __int64 v121; // [sp+88h] [bp-B0h]@37\n  __int64 v122; // [sp+90h] [bp-A8h]@27\n  __int64 v123; // [sp+98h] [bp-A0h]@26\n  __int64 v124; // [sp+A0h] [bp-98h]@27\n  __int64 v125; // [sp+A8h] [bp-90h]@39\n  unsigned __int64 v126; // [sp+B0h] [bp-88h]@20\n  __int64 v127; // [sp+B8h] [bp-80h]@20\n  unsigned __int64 v128; // [sp+C0h] [bp-78h]@20\n  unsigned __int64 v129; // [sp+C8h] [bp-70h]@20\n  __int64 v130; // [sp+D8h] [bp-60h]@20\n  bool v131; // [sp+E8h] [bp-50h]@20\n  char v132; // [sp+E9h] [bp-4Fh]@20\n  char v133; // [sp+EAh] [bp-4Eh]@20\n  bool v134; // [sp+EBh] [bp-4Dh]@20\n  int v135; // [sp+F0h] [bp-48h]@20\n\n  v4 = a2;\n  v5 = a4;\n  v6 = a3;\n  v7 = a1;\n  *(_BYTE *)(a1 + 56) &= 0x90u;\n  v13 = *(_QWORD *)(a1 + 8) < 0xE7uLL;\n  v14 = *(_QWORD *)(a1 + 8) == 231LL;\n  v114 = 0;\n  v8 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 24) = a4;\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_QWORD *)(a1 + 48) = 0LL;\n  if ( v13 || v14 )\n  {\n    v99 = realloc((void *)v8, 0xE8uLL);\n    v8 = (__int64)v99;\n    if ( !v99 )\n      return 12LL;\n    *(_QWORD *)(a1 + 8) = 232LL;\n    *(_QWORD *)a1 = v99;\n  }\n  *(_QWORD *)(a1 + 16) = 232LL;\n  *(_QWORD *)v8 = 0LL;\n  *(_QWORD *)(v8 + 224) = 0LL;\n  memset(\n    (void *)((v8 + 8) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v8 - (((_DWORD)v8 + 8) & 0xFFFFFFF8) + 232) >> 3));\n  *(_DWORD *)(v8 + 128) = 15;\n  if ( v6 > 0x555555555555554LL )\n    goto LABEL_115;\n  *(_QWORD *)(v8 + 8) = v6 + 1;\n  *(_QWORD *)v8 = malloc(16 * (v6 + 1));\n  if ( v6 )\n  {\n    v9 = 1LL;\n    do\n      v9 *= 2LL;\n    while ( v6 >= v9 );\n    v10 = v9 - 1;\n  }\n  else\n  {\n    v10 = 0LL;\n    v9 = 1LL;\n  }\n  v11 = calloc(0x18uLL, v9);\n  *(_QWORD *)(v8 + 136) = v10;\n  *(_QWORD *)(v8 + 64) = v11;\n  *(_DWORD *)(v8 + 180) = __ctype_get_mb_cur_max();\n  v12 = nl_langinfo(14);\n  if ( (*v12 & 0xDF) == 85 && (v12[1] & 0xDF) == 84 && (v12[2] & 0xDF) == 70 )\n  {\n    v13 = (unsigned __int8)v12[3] < 0x2Du;\n    v14 = v12[3] == 45;\n    v15 = \"UTF-8\" + 4;\n    v16 = 2LL;\n    v17 = &v12[v14 + 3];\n    do\n    {\n      if ( !v16 )\n        break;\n      v13 = (unsigned __int8)*v17 < *v15;\n      v14 = *v17++ == *v15++;\n      --v16;\n    }\n    while ( v14 );\n    if ( (!v13 && !v14) == v13 )\n      *(_BYTE *)(v8 + 176) |= 4u;\n  }\n  v18 = *(_BYTE *)(v8 + 176);\n  v20 = __OFSUB__(*(_DWORD *)(v8 + 180), 1);\n  v14 = *(_DWORD *)(v8 + 180) == 1;\n  v19 = *(_DWORD *)(v8 + 180) - 1 < 0;\n  *(_BYTE *)(v8 + 176) &= 0xF7u;\n  if ( !((unsigned __int8)(v19 ^ v20) | v14) )\n  {\n    if ( v18 & 4 )\n    {\n      *(_QWORD *)(v8 + 120) = &unk_41E560;\n      goto LABEL_18;\n    }\n    v87 = calloc(0x20uLL, 1uLL);\n    *(_QWORD *)(v8 + 120) = v87;\n    if ( !v87 )\n    {\nLABEL_115:\n      v114 = 12;\nLABEL_114:\n      sub_40FE70((void **)v8);\n      *(_QWORD *)v7 = 0LL;\n      result = v114;\n      *(_QWORD *)(v7 + 8) = 0LL;\n      return result;\n    }\n    v88 = 0LL;\nLABEL_118:\n    v89 = 8 * v88;\n    v90 = 0;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        sizec = v90;\n        v107 = v89;\n        v91 = btowc(v89);\n        v92 = v107 & 0xFFFFFF80;\n        if ( v91 != -1 )\n          break;\n        if ( !v92 )\n          goto LABEL_120;\nLABEL_121:\n        v90 = sizec + 1;\n        v89 = v107 + 1;\n        if ( sizec == 63 )\n          goto LABEL_126;\n      }\n      *(_QWORD *)(v88 + *(_QWORD *)(v8 + 120)) |= 1LL << sizec;\n      if ( v92 )\n        goto LABEL_121;\n      if ( v91 != v107 )\n      {\nLABEL_120:\n        *(_BYTE *)(v8 + 176) |= 8u;\n        goto LABEL_121;\n      }\n      v90 = sizec + 1;\n      v89 = v107 + 1;\n      if ( sizec == 63 )\n      {\nLABEL_126:\n        v88 += 8LL;\n        if ( v88 == 32 )\n          break;\n        goto LABEL_118;\n      }\n    }\n  }\nLABEL_18:\n  if ( !*(_QWORD *)v8 || !*(_QWORD *)(v8 + 64) )\n    goto LABEL_115;\n  v21 = *(_QWORD *)(v7 + 40);\n  v114 = 0;\n  memset(&v120, 0, 0x90uLL);\n  v130 = v21;\n  v22 = *(_DWORD *)(v8 + 180);\n  v119 = v4;\n  v106 = v5 & 0x400000;\n  v131 = (v5 & 0x400000) != 0;\n  v23 = v106 | v21;\n  v24 = *(_BYTE *)(v8 + 176);\n  v25 = v23 != 0;\n  v127 = v6;\n  v26 = v23;\n  v126 = v6;\n  v134 = v23 != 0;\n  v135 = v22;\n  v132 = (v24 >> 2) & 1;\n  v133 = (v24 >> 3) & 1;\n  v129 = v6;\n  v128 = v6;\n  if ( v6 )\n  {\n    v27 = sub_40B170((__int64)&v119, v6 + 1);\n    if ( v27 )\n    {\nLABEL_86:\n      v114 = v27;\n      v42 = *(_QWORD *)v7;\nLABEL_111:\n      v84 = *(void **)(v42 + 112);\n      if ( v84 )\n      {\n        do\n        {\n          v85 = *(void **)v84;\n          free(v84);\n          v84 = v85;\n        }\n        while ( v85 );\n      }\n      *(_QWORD *)(v42 + 112) = 0LL;\n      v86 = *(void **)(v42 + 32);\n      *(_DWORD *)(v42 + 128) = 15;\n      *(_QWORD *)(v42 + 104) = 0LL;\n      free(v86);\n      *(_QWORD *)(v42 + 32) = 0LL;\n      sub_40C4C0((__int64)&v119);\n      goto LABEL_114;\n    }\n    v25 = v134;\n    v22 = *(_DWORD *)(v8 + 180);\n  }\n  if ( v25 )\n    v4 = v120;\n  v120 = v4;\n  if ( v5 & 0x400000 )\n  {\n    if ( v22 <= 1 )\n    {\n      sub_40B4E0((__int64)&v119);\n      v114 = 0;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v27 = sub_40B710((__int64)&v119);\n        if ( v27 )\n          goto LABEL_86;\n        if ( (signed __int64)v6 <= v123 || v124 > v122 + *(_DWORD *)(v8 + 180) )\n          break;\n        v27 = sub_40B170((__int64)&v119, 2 * v124);\n        if ( v27 )\n          goto LABEL_86;\n      }\n      v114 = 0;\n    }\n  }\n  else if ( v22 > 1 )\n  {\n    sub_40B560((__int64)&v119);\n    v114 = 0;\n  }\n  else\n  {\n    v28 = v124;\n    if ( v26 )\n    {\n      v29 = v122;\n      if ( v127 <= v124 )\n        v28 = v127;\n      if ( v28 > v122 )\n      {\n        while ( 1 )\n        {\n          *(_BYTE *)(v4 + v29) = *(_BYTE *)(v130 + *(_BYTE *)(v121 + v29 + v119));\n          if ( v28 == ++v29 )\n            break;\n          v4 = v120;\n        }\n      }\n      else\n      {\n        v28 = v122;\n      }\n    }\n    v122 = v28;\n    v123 = v28;\n    v114 = 0;\n  }\n  v30 = *(_QWORD *)v7;\n  *(_QWORD *)(v7 + 48) = 0LL;\n  *(_QWORD *)(v30 + 216) = v5;\n  v31 = sub_415350((__int64)&v115, (__int64)&v119, v5 | 0x800000);\n  v125 += v31;\n  v32 = sub_4170F0((__int64)&v119, (__int64 *)v7, &v115, v5, 0LL, &v114);\n  if ( v114 )\n  {\n    if ( !v32 )\n    {\n      *(_QWORD *)(v8 + 104) = 0LL;\n      v42 = *(_QWORD *)v7;\n      goto LABEL_111;\n    }\n    v33 = (char **)(v30 + 112);\n    v100 = (size_t)v32;\n    v35 = (signed int *)(v30 + 128);\n    v36 = (const __m128i *)&v116;\n    LOBYTE(v117) = 2;\n    v101 = sub_40D500(v33, v35, 0LL, 0LL, (const __m128i *)&v116);\n    v38 = (char **)v100;\n    v39 = (char **)v101;\n  }\n  else\n  {\n    v33 = (char **)(v30 + 112);\n    v34 = (size_t)v32;\n    v35 = (signed int *)(v30 + 128);\n    v36 = (const __m128i *)&v116;\n    LOBYTE(v117) = 2;\n    v37 = sub_40D500(v33, v35, 0LL, 0LL, (const __m128i *)&v116);\n    v38 = (char **)v34;\n    v39 = (char **)v37;\n    v40 = v37;\n    if ( !v34 )\n      goto LABEL_42;\n  }\n  LOBYTE(v117) = 16;\n  v41 = sub_40D500(v33, v35, v38, v39, v36);\n  v40 = v39;\n  v39 = (char **)v41;\nLABEL_42:\n  v42 = *(_QWORD *)v7;\n  if ( v39 == 0LL || v40 == 0LL )\n  {\n    v114 = 12;\n    *(_QWORD *)(v8 + 104) = 0LL;\n    goto LABEL_111;\n  }\n  v43 = *(_QWORD *)(v42 + 8);\n  *(_QWORD *)(v8 + 104) = v39;\n  v44 = 8 * v43;\n  v43 *= 24LL;\n  v45 = malloc(v44);\n  *(_QWORD *)(v42 + 24) = v45;\n  v46 = v45;\n  v47 = malloc(v44);\n  *(_QWORD *)(v42 + 32) = v47;\n  v112 = v47;\n  v48 = malloc(v43);\n  *(_QWORD *)(v42 + 40) = v48;\n  size = (size_t)v48;\n  v49 = malloc(v43);\n  *(_QWORD *)(v42 + 48) = v49;\n  if ( !v46 || !v112 || !size || !v49 )\n  {\n    v114 = 12;\n    goto LABEL_111;\n  }\n  v50 = *(_QWORD *)(v7 + 48);\n  v51 = malloc(8 * v50);\n  *(_QWORD *)(v42 + 224) = v51;\n  if ( v51 )\n  {\n    v52 = 0LL;\n    if ( v50 )\n    {\n      do\n      {\n        v51[v52] = v52;\n        ++v52;\n      }\n      while ( v52 != v50 );\n    }\n    sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40CA30, v42);\n    v53 = *(_QWORD *)(v7 + 48);\n    if ( v53 )\n    {\n      v54 = *(_QWORD **)(v42 + 224);\n      v55 = *v54;\n      if ( *v54 )\n        goto LABEL_56;\n      while ( ++v55 != v53 )\n      {\n        if ( v54[v55] != v55 )\n          goto LABEL_56;\n      }\n    }\n    else\n    {\n      v54 = *(_QWORD **)(v42 + 224);\n    }\n    free(v54);\n    *(_QWORD *)(v42 + 224) = 0LL;\n  }\nLABEL_56:\n  v27 = sub_40AD30(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40D8B0, v7);\n  if ( v27 )\n    goto LABEL_86;\n  v27 = sub_40AD30(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40FDE0, v42);\n  if ( v27 )\n    goto LABEL_86;\n  sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40CAC0, v42);\n  v27 = sub_40CD70(*(_QWORD *)(v42 + 104), (int (__fastcall *)(__int64, __int64))sub_40C5C0, v42);\n  if ( v27 )\n    goto LABEL_86;\n  v56 = 0;\n  v57 = 0LL;\n  while ( *(_QWORD *)(v42 + 16) != v57 )\n  {\n    while ( 1 )\n    {\n      while ( *(_QWORD *)(*(_QWORD *)(v42 + 48) + 24 * v57 + 8) )\n      {\n        if ( *(_QWORD *)(v42 + 16) == ++v57 )\n          goto LABEL_63;\n      }\n      sizea = 24 * v57;\n      v27 = sub_40CFA0((__m128i *)v36, v42, v57, 1);\n      if ( v27 )\n        goto LABEL_86;\n      ++v57;\n      if ( *(_QWORD *)(*(_QWORD *)(v42 + 48) + sizea + 8) )\n        break;\n      v56 = 1;\n      free(ptr);\n      if ( *(_QWORD *)(v42 + 16) == v57 )\n      {\nLABEL_64:\n        v56 = 0;\n        v57 = 0LL;\n      }\n    }\n  }\nLABEL_63:\n  if ( v56 )\n    goto LABEL_64;\n  if ( !(*(_BYTE *)(v7 + 56) & 0x10) && *(_QWORD *)(v7 + 48) && *(_BYTE *)(v42 + 176) & 1 || *(_QWORD *)(v42 + 152) )\n  {\n    v58 = (char *)malloc(24 * v57);\n    *(_QWORD *)(v42 + 56) = v58;\n    if ( !v58 )\n    {\n      v114 = 12;\n      v42 = *(_QWORD *)v7;\n      goto LABEL_111;\n    }\n    v59 = 0LL;\n    if ( !v57 )\n      goto LABEL_88;\n    while ( 1 )\n    {\n      v60 = 3 * v59++;\n      v61 = (signed __int64)&v58[8 * v60];\n      *(_OWORD *)v61 = 0LL;\n      *(_QWORD *)(v61 + 16) = 0LL;\n      v62 = *(_QWORD *)(v42 + 16);\n      if ( v62 <= v59 )\n        break;\n      v58 = *(char **)(v42 + 56);\n    }\n    if ( !v62 )\n      goto LABEL_88;\n    v113 = 0LL;\n    v63 = *(_QWORD *)(v42 + 48);\n    while ( 1 )\n    {\n      v64 = 0LL;\n      v65 = v63 + 24 * v113;\n      v66 = *(_QWORD *)(v65 + 16);\n      if ( *(_QWORD *)(v65 + 8) > 0LL )\n        break;\nLABEL_141:\n      if ( *(_QWORD *)(v42 + 16) <= (unsigned __int64)++v113 )\n        goto LABEL_88;\n    }\n    while ( 1 )\n    {\n      sizeb = v66;\n      if ( !(unsigned __int8)sub_40B210(*(_QWORD *)(v42 + 56) + 24LL * *(_QWORD *)(v66 + 8 * v64), v113) )\n        break;\n      v63 = *(_QWORD *)(v42 + 48);\n      ++v64;\n      v66 = sizeb;\n      if ( v64 >= *(_QWORD *)(v63 + 24 * v113 + 8) )\n        goto LABEL_141;\n    }\n    v27 = 12;\n    goto LABEL_86;\n  }\nLABEL_88:\n  v67 = *(_BYTE *)(v8 + 176);\n  v114 = 0;\n  v68 = (v106 == 0) & (v67 >> 2);\n  if ( v68 && !*(_QWORD *)(v7 + 40) )\n  {\n    v93 = *(_QWORD *)(v8 + 16);\n    if ( v93 )\n    {\n      v94 = *(_QWORD *)v8;\n      v95 = 0;\n      v96 = 0LL;\n      v97 = *(_QWORD *)v8;\n      while ( 2 )\n      {\n        switch ( *(_BYTE *)(v97 + 8) )\n        {\n          default:\n            abort();\n            return result;\n          case 6:\n            goto LABEL_89;\n          case 5:\n            v95 = v68;\n            goto LABEL_148;\n          case 2:\n          case 4:\n          case 8:\n          case 9:\n          case 0xA:\n          case 0xB:\n            goto LABEL_148;\n          case 1:\n            if ( *(_BYTE *)v97 < 0 )\n              v56 = v68;\n            goto LABEL_148;\n          case 0xC:\n            v104 = *(_DWORD *)v97;\n            if ( *(_DWORD *)v97 == 32 )\n              goto LABEL_148;\n            if ( v104 <= 0x20 )\n            {\n              if ( v104 != 16 )\n                goto LABEL_89;\n            }\n            else if ( v104 != 64 && v104 != 128 )\n            {\n              goto LABEL_89;\n            }\nLABEL_148:\n            ++v96;\n            v97 += 16LL;\n            if ( v96 != v93 )\n              continue;\n            if ( !((unsigned __int8)v95 | (unsigned __int8)v56) )\n              goto LABEL_175;\n            v102 = v94 + 16 * v96;\n            do\n            {\n              v103 = *(_BYTE *)(v94 + 8);\n              if ( v103 == 1 )\n              {\n                if ( *(_BYTE *)v94 < 0 )\n                  *(_BYTE *)(v94 + 10) &= 0xDFu;\n              }\n              else if ( v103 == 5 )\n              {\n                *(_BYTE *)(v94 + 8) = 7;\n              }\n              v94 += 16LL;\n            }\n            while ( v102 != v94 );\n            break;\n          case 3:\n            if ( *(_QWORD *)(*(_QWORD *)v97 + 16LL) || *(_QWORD *)(*(_QWORD *)v97 + 24LL) )\n              goto LABEL_89;\n            goto LABEL_148;\n        }\n        break;\n      }\n    }\n    else\n    {\nLABEL_175:\n      v95 = 0;\n    }\n    v14 = *(_QWORD *)(v8 + 152) == 0LL;\n    v19 = *(_QWORD *)(v8 + 152) < 0;\n    v105 = *(_BYTE *)(v8 + 176);\n    *(_DWORD *)(v8 + 180) = 1;\n    *(_BYTE *)(v8 + 176) = v105 & 0xF9 | 2 * ((v95 | (!v19 && !v14)) & 1);\n  }\nLABEL_89:\n  v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 104) + 24LL) + 56LL);\n  *(_QWORD *)(v8 + 144) = v69;\n  v70 = sub_40D930((__int64)v36, *(_QWORD *)(v8 + 48) + 24 * v69);\n  v115.m128i_i32[0] = v70;\n  if ( !v70 )\n  {\n    if ( *(_QWORD *)(v8 + 152) > 0LL )\n    {\n      v71 = v117;\n      if ( v117 > 0 )\n      {\n        v72 = 0LL;\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            v73 = *(_QWORD *)v8 + 16LL * *((_QWORD *)ptr + v72);\n            if ( *(_BYTE *)(v73 + 8) == 4 )\n            {\n              v74 = 0LL;\n              while ( 1 )\n              {\n                v75 = *(_QWORD *)v8 + 16LL * *((_QWORD *)ptr + v74);\n                if ( *(_BYTE *)(v75 + 8) == 9 && *(_QWORD *)v75 == *(_QWORD *)v73 )\n                  break;\n                if ( v71 == ++v74 )\n                  goto LABEL_93;\n              }\n              if ( !sub_40C890(\n                      v71,\n                      (__int64 *)&v36[1],\n                      **(_QWORD **)(*(_QWORD *)(v8 + 40) + 24LL * *((_QWORD *)ptr + v72) + 16)) )\n                break;\n            }\nLABEL_93:\n            if ( v71 <= ++v72 )\n              goto LABEL_102;\n          }\n          v77 = sub_40CDD0((__int64)v36, *(_QWORD *)(v8 + 48) + 24 * v76);\n          if ( v77 )\n            break;\n          v71 = v117;\n          v72 = 1LL;\n          if ( v117 <= 1 )\n            goto LABEL_102;\n        }\n        v70 = v77;\n        goto LABEL_106;\n      }\n    }\nLABEL_102:\n    v78 = sub_40DB40(&v115, v8, (__int64)v36, 0);\n    *(_QWORD *)(v8 + 72) = v78;\n    if ( v78 )\n    {\n      if ( *(_BYTE *)(v78 + 104) >= 0 )\n      {\n        *(_QWORD *)(v8 + 96) = v78;\n        *(_QWORD *)(v8 + 88) = v78;\n        *(_QWORD *)(v8 + 80) = v78;\nLABEL_105:\n        free(ptr);\n        goto LABEL_106;\n      }\n      *(_QWORD *)(v8 + 80) = sub_40DB40(&v115, v8, (__int64)v36, 1u);\n      *(_QWORD *)(v8 + 88) = sub_40DB40(&v115, v8, (__int64)v36, 2u);\n      v98 = sub_40DB40(&v115, v8, (__int64)v36, 6u);\n      v14 = *(_QWORD *)(v8 + 80) == 0LL;\n      *(_QWORD *)(v8 + 96) = v98;\n      if ( !v14 && *(_QWORD *)(v8 + 88) && v98 )\n        goto LABEL_105;\n    }\n    v70 = v115.m128i_i32[0];\n  }\nLABEL_106:\n  v79 = *(_QWORD *)v7;\n  v114 = v70;\n  v80 = *(void **)(v79 + 112);\n  if ( v80 )\n  {\n    do\n    {\n      v81 = *(void **)v80;\n      free(v80);\n      v80 = v81;\n    }\n    while ( v81 );\n  }\n  *(_QWORD *)(v79 + 112) = 0LL;\n  v82 = *(void **)(v79 + 32);\n  *(_DWORD *)(v79 + 128) = 15;\n  *(_QWORD *)(v79 + 104) = 0LL;\n  free(v82);\n  *(_QWORD *)(v79 + 32) = 0LL;\n  sub_40C4C0((__int64)&v119);\n  result = v114;\n  if ( v114 )\n    goto LABEL_114;\n  return result;\n}\n", 
            "funcStartAddr": "0x401ff3L", 
            "funcEndAddr": "0x401ff8L", 
            "funcName": "sub_417250"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_418000(__int64 a1, unsigned __int64 a2, __int64 a3)\n{\n  __int64 v3; // rcx@1\n  int v4; // eax@1\n  char *result; // rax@2\n\n  v3 = qword_6244D0;\n  *(_BYTE *)(a3 + 56) = 16 * (((unsigned __int64)qword_6244D0 >> 25) & 1) | *(_BYTE *)(a3 + 56) & 0xEF | 0x80;\n  v4 = sub_417250(a3, a1, a2, v3);\n  if ( v4 )\n    result = dcgettext(0LL, (const char *)(qword_41E580[v4] + 4318752), 5);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x418000L", 
            "funcEndAddr": "0x418067L", 
            "funcName": "sub_418000"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_418080(__int64 a1)\n{\n  __int64 v1; // rbp@1\n  __int64 v2; // r12@1\n  __int64 v3; // rax@1\n  __int64 v4; // rsi@3\n  __int64 v5; // rsi@5\n\n  v1 = *(_QWORD *)(a1 + 32);\n  v2 = *(_QWORD *)a1;\n  *(_QWORD *)v1 = 0LL;\n  *(_QWORD *)(v1 + 248) = 0LL;\n  memset(\n    (void *)((v1 + 8) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v1 - (((_DWORD)v1 + 8) & 0xFFFFFFF8) + 256) >> 3));\n  sub_410B30((_QWORD *)a1, (_QWORD *)(*(_QWORD *)(v2 + 72) + 16LL), (_QWORD *)(*(_QWORD *)(v2 + 72) + 24LL), v1);\n  v3 = *(_QWORD *)(v2 + 80);\n  if ( *(_QWORD *)(v2 + 72) != v3 )\n  {\n    sub_410B30((_QWORD *)a1, (_QWORD *)(v3 + 16), (_QWORD *)(v3 + 24), v1);\n    v3 = *(_QWORD *)(v2 + 72);\n  }\n  v4 = *(_QWORD *)(v2 + 88);\n  if ( v4 != v3 )\n  {\n    sub_410B30((_QWORD *)a1, (_QWORD *)(v4 + 16), (_QWORD *)(v4 + 24), v1);\n    v3 = *(_QWORD *)(v2 + 72);\n  }\n  v5 = *(_QWORD *)(v2 + 96);\n  if ( v5 != v3 )\n    sub_410B30((_QWORD *)a1, (_QWORD *)(v5 + 16), (_QWORD *)(v5 + 24), v1);\n  *(_BYTE *)(a1 + 56) |= 8u;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x418080L", 
            "funcEndAddr": "0x418143L", 
            "funcName": "sub_418080"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_418150(__int64 a1, __int64 a2, __int64 a3, signed __int64 a4, __int64 a5, __int64 a6, unsigned __int64 *a7, char a8)\n{\n  __int64 v8; // rax@1\n  void *v9; // r8@1\n  unsigned __int64 *v10; // r12@1\n  signed __int64 v11; // rbx@3\n  __int64 v12; // r15@3\n  char v13; // al@9\n  unsigned __int64 v14; // rcx@15\n  unsigned __int64 v15; // r14@16\n  signed __int64 v16; // r13@16\n  size_t v17; // rdi@17\n  char *v18; // rbp@18\n  int v19; // eax@19\n  signed __int64 v20; // r12@20\n  unsigned __int64 v22; // rdx@25\n  int v23; // eax@25\n  signed int v24; // er9@29\n  unsigned __int64 v25; // r8@31\n  unsigned __int64 v26; // rdi@31\n  unsigned __int64 v27; // rdx@31\n  __int64 v28; // rax@31\n  unsigned __int64 v29; // rsi@34\n  unsigned __int64 v30; // rcx@34\n  int v31; // eax@36\n  __int64 v32; // ST40_8@12\n  __int64 v33; // ST38_8@12\n  void *v34; // ST30_8@12\n  size_t v35; // r14@44\n  void *v36; // rax@44\n  void *v37; // rax@45\n  void *v38; // r14@51\n  void *v39; // rax@52\n  signed __int64 size; // [sp+8h] [bp-60h]@51\n  void *ptr; // [sp+10h] [bp-58h]@18\n  void *ptra; // [sp+10h] [bp-58h]@45\n  __int64 v43; // [sp+18h] [bp-50h]@18\n  __int64 v44; // [sp+20h] [bp-48h]@18\n  int v45; // [sp+2Ch] [bp-3Ch]@9\n\n  v8 = a5;\n  v9 = (void *)(a4 + a5);\n  v10 = a7;\n  if ( a4 < 0 || a4 > a3 )\n    return -1LL;\n  v11 = a4;\n  v12 = a1;\n  if ( (signed __int64)v9 > a3 || v8 >= 0 && a4 > (signed __int64)v9 )\n  {\n    v9 = (void *)a3;\n  }\n  else if ( (signed __int64)v9 < 0 || v8 < 0 && a4 <= (signed __int64)v9 )\n  {\n    v13 = *(_BYTE *)(a1 + 56);\n    v9 = 0LL;\n    v45 = (*(_BYTE *)(a1 + 56) >> 5) & 3;\n    goto LABEL_13;\n  }\n  v13 = *(_BYTE *)(a1 + 56);\n  v45 = (*(_BYTE *)(a1 + 56) >> 5) & 3;\n  if ( (signed __int64)v9 > a4 && *(_QWORD *)(a1 + 32) && !(v13 & 8) )\n  {\n    v32 = a6;\n    v33 = a3;\n    v34 = v9;\n    sub_418080(a1);\n    v13 = *(_BYTE *)(a1 + 56);\n    a6 = v32;\n    a3 = v33;\n    v9 = v34;\n  }\nLABEL_13:\n  if ( v13 & 0x10 || !a7 )\n    goto LABEL_42;\n  v14 = *(_QWORD *)(a1 + 48);\n  if ( (v13 & 6) != 4 || (v15 = *a7, *a7 > v14) )\n  {\n    v15 = v14 + 1;\n    v16 = v14 + 1;\nLABEL_17:\n    v17 = 16 * v15;\n    goto LABEL_18;\n  }\n  v16 = *a7;\n  if ( (signed __int64)v15 > 0 )\n    goto LABEL_17;\nLABEL_42:\n  v17 = 16LL;\n  v15 = 1LL;\n  v16 = 1LL;\n  v10 = 0LL;\nLABEL_18:\n  v44 = a6;\n  v43 = a3;\n  ptr = v9;\n  v18 = (char *)malloc(v17);\n  if ( !v18 )\n    return -2LL;\n  v19 = sub_4131A0(v12, a2, v43, v11, (signed __int64)ptr, v44, v15, (__int64)v18, v45);\n  if ( !v19 )\n  {\n    if ( !v10 )\n      goto LABEL_37;\n    v22 = v16 + 1;\n    v23 = (*(_BYTE *)(v12 + 56) >> 1) & 3;\n    if ( (*(_BYTE *)(v12 + 56) >> 1) & 3 )\n    {\n      if ( v23 != 1 )\n      {\n        if ( v23 != 2 )\n          __assert_fail(\"regs_allocated == REGS_FIXED\", \"lib/regexec.c\", 0x1F8u, \"re_copy_regs\");\n        if ( v15 > *v10 )\n          __assert_fail(\"regs->num_regs >= nregs\", \"lib/regexec.c\", 0x1FAu, \"re_copy_regs\");\n        v24 = 2;\n        goto LABEL_30;\n      }\n      v24 = 1;\n      if ( *v10 >= v22 )\n      {\nLABEL_30:\n        if ( v16 <= 0 )\n        {\n          v27 = 0LL;\n          v16 = 0LL;\n        }\n        else\n        {\n          v25 = v10[1];\n          v26 = v10[2];\n          v27 = v16;\n          v28 = 0LL;\n          do\n          {\n            *(_QWORD *)(v25 + v28) = *(_QWORD *)&v18[2 * v28];\n            *(_QWORD *)(v26 + v28) = *(_QWORD *)&v18[2 * v28 + 8];\n            v28 += 8LL;\n          }\n          while ( v28 != 8 * v16 );\n        }\n        if ( *v10 > v27 )\n        {\n          v29 = v10[2];\n          v30 = v10[1];\n          do\n          {\n            ++v16;\n            *(_QWORD *)(v29 + 8 * v27) = -1LL;\n            *(_QWORD *)(v30 + 8 * v27) = -1LL;\n            v27 = v16;\n          }\n          while ( *v10 > v16 );\n        }\nLABEL_36:\n        v31 = 2 * v24 | (unsigned __int8)(*(_BYTE *)(v12 + 56) & 0xF9);\n        *(_BYTE *)(v12 + 56) = 2 * v24 | *(_BYTE *)(v12 + 56) & 0xF9;\n        if ( !(v31 & 6) )\n          goto LABEL_21;\nLABEL_37:\n        v20 = *(_QWORD *)v18;\n        if ( a8 )\n        {\n          if ( v11 != v20 )\n            __assert_fail(\"pmatch[0].rm_so == start\", \"lib/regexec.c\", 0x1BDu, \"re_search_stub\");\n          v20 = *((_QWORD *)v18 + 1) - v20;\n        }\n        goto LABEL_22;\n      }\n      size = 8 * v22;\n      v38 = realloc((void *)v10[1], 8 * v22);\n      if ( v38 )\n      {\n        v39 = realloc((void *)v10[2], size);\n        v24 = 1;\n        if ( !v39 )\n        {\n          free(v38);\n          v24 = 0;\n          goto LABEL_36;\n        }\n        v10[1] = (unsigned __int64)v38;\n        v10[2] = (unsigned __int64)v39;\n        *v10 = v16 + 1;\n        goto LABEL_30;\n      }\n    }\n    else\n    {\n      v35 = 8 * v22;\n      v36 = malloc(8 * v22);\n      v10[1] = (unsigned __int64)v36;\n      if ( v36 )\n      {\n        ptra = v36;\n        v37 = malloc(v35);\n        v10[2] = (unsigned __int64)v37;\n        if ( v37 )\n        {\n          *v10 = v16 + 1;\n          v24 = 1;\n          goto LABEL_30;\n        }\n        free(ptra);\n      }\n    }\n    v24 = 0;\n    goto LABEL_36;\n  }\n  v20 = -1LL;\n  if ( v19 != 1 )\nLABEL_21:\n    v20 = -2LL;\nLABEL_22:\n  free(v18);\n  return v20;\n}\n", 
            "funcStartAddr": "0x418150L", 
            "funcEndAddr": "0x4185a5L", 
            "funcName": "sub_418150"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_4185B0(__int64 a1, char *a2, signed __int64 a3, char *a4, unsigned __int64 a5, signed __int64 a6, __int64 a7, unsigned __int64 *a8, unsigned __int64 a9, char a10)\n{\n  char *v10; // r14@1\n  signed __int64 v11; // rcx@1\n  __int64 v12; // r12@1\n  size_t v13; // rbp@1\n  size_t v14; // rbx@1\n  int v15; // edi@1\n  __int64 v16; // r9@1\n  char v17; // r8@1\n  char *v18; // r13@5\n  signed __int64 v19; // rbx@6\n  char *v21; // rax@8\n  signed __int64 v22; // [sp+10h] [bp-48h]@8\n\n  v10 = a4;\n  v11 = a6;\n  v12 = a1;\n  v13 = a5;\n  v14 = a3;\n  v15 = a5 >> 63;\n  v16 = a9;\n  v17 = a10;\n  if ( (a9 >> 63) | (unsigned __int8)v15 || a3 < 0 || __OFADD__(v13, a3) )\n    return -2LL;\n  if ( !v13 )\n  {\n    v10 = a2;\n    v18 = 0LL;\n    goto LABEL_6;\n  }\n  v18 = 0LL;\n  if ( a3 )\n  {\n    v22 = v11;\n    v21 = (char *)malloc(v13 + a3);\n    v18 = v21;\n    if ( v21 )\n    {\n      memcpy(v21, a2, v14);\n      memcpy(&v18[v14], v10, v13);\n      v10 = v18;\n      v11 = v22;\n      v16 = a9;\n      v17 = a10;\n      goto LABEL_6;\n    }\n    return -2LL;\n  }\nLABEL_6:\n  v19 = sub_418150(v12, (__int64)v10, v13 + v14, v11, a7, v16, a8, v17);\n  free(v18);\n  return v19;\n}\n", 
            "funcStartAddr": "0x4185b0L", 
            "funcEndAddr": "0x4186dbL", 
            "funcName": "sub_4185B0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_418960(__int64 a1, __int64 a2, __int64 a3, signed __int64 a4, unsigned __int64 *a5)\n{\n  return sub_418150(a1, a2, a3, a4, 0LL, a3, a5, 1);\n}\n", 
            "funcStartAddr": "0x418960L", 
            "funcEndAddr": "0x418978L", 
            "funcName": "sub_418960"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_418980(__int64 a1, __int64 a2, __int64 a3, signed __int64 a4, __int64 a5, unsigned __int64 *a6)\n{\n  return sub_418150(a1, a2, a3, a4, a5, a3, a6, 0);\n}\n", 
            "funcStartAddr": "0x418980L", 
            "funcEndAddr": "0x418995L", 
            "funcName": "sub_418980"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_418A20(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax@1\n  __int64 v3; // rdx@2\n  int v4; // er8@4\n  char v5; // al@4\n  int v6; // er9@6\n  char v7; // cl@6\n\n  result = 0LL;\n  if ( a1 != a2 )\n  {\n    v3 = 0LL;\n    do\n    {\n      v4 = *(_BYTE *)(a1 + v3);\n      v5 = *(_BYTE *)(a1 + v3);\n      if ( (unsigned int)(v4 - 65) <= 0x19 )\n      {\n        LOBYTE(v4) = v4 + 32;\n        v5 += 32;\n      }\n      v6 = *(_BYTE *)(a2 + v3);\n      v7 = *(_BYTE *)(a2 + v3);\n      if ( (unsigned int)(v6 - 65) <= 0x19 )\n      {\n        LOBYTE(v6) = v6 + 32;\n        v7 += 32;\n      }\n      if ( !v5 )\n        break;\n      ++v3;\n    }\n    while ( v5 == v7 );\n    result = (unsigned __int8)v4 - (unsigned int)(unsigned __int8)v6;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x418a20L", 
            "funcEndAddr": "0x418a79L", 
            "funcName": "sub_418A20"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_418A80(FILE *stream)\n{\n  size_t v1; // r12@1\n  int v2; // ebx@1\n  int result; // eax@1\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_409BC0(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n  }\n  else\n  {\n    if ( !result )\n      return result;\n    if ( !v1 )\n      return -(*__errno_location() != 9);\n  }\n  return -1;\n}\n", 
            "funcStartAddr": "0x418a80L", 
            "funcEndAddr": "0x418addL", 
            "funcName": "sub_418A80"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_418AE0(int a1)\n{\n  char *v1; // rdx@1\n  bool result; // al@1\n  bool v3; // cf@1\n  bool v4; // zf@1\n  signed __int64 v5; // rcx@2\n  _BYTE *v6; // rdi@2\n  char *v7; // rsi@2\n  char v8; // cl@5\n  bool v9; // cf@5\n  bool v10; // zf@5\n  const char *v11; // rdi@7\n  signed __int64 v12; // rcx@7\n  char *v13; // rsi@7\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  v3 = 0;\n  v4 = v1 == 0LL;\n  if ( v1 )\n  {\n    v5 = 2LL;\n    v6 = &unk_41E7B0;\n    v7 = v1;\n    do\n    {\n      if ( !v5 )\n        break;\n      v3 = (unsigned __int8)*v7 < *v6;\n      v4 = *v7++ == *v6++;\n      --v5;\n    }\n    while ( v4 );\n    v8 = (!v3 && !v4) - v3;\n    result = 0;\n    v9 = 0;\n    v10 = v8 == 0;\n    if ( v8 )\n    {\n      v11 = \"POSIX\";\n      v12 = 6LL;\n      v13 = v1;\n      do\n      {\n        if ( !v12 )\n          break;\n        v9 = (unsigned __int8)*v13 < *v11;\n        v10 = *v13++ == *v11++;\n        --v12;\n      }\n      while ( v10 );\n      result = (!v9 && !v10) != v9;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x418ae0L", 
            "funcEndAddr": "0x418b3eL", 
            "funcName": "sub_418AE0"
        }, 
        {
            "decompiledFuncCode": "const char *sub_418B40()\n{\n  char *v0; // rax@1\n  char *v1; // r15@1\n  const char *v2; // rbx@1\n  char v3; // bp@4\n  size_t v4; // rax@6\n  char *v6; // rax@14\n  const char *v7; // r13@14\n  size_t v8; // rax@16\n  signed __int64 v9; // r12@16\n  size_t v10; // r14@16\n  size_t v11; // rdi@17\n  char *v12; // rax@18\n  const char *v13; // rbp@18\n  size_t v14; // rdi@21\n  char *v15; // rax@22\n  const char *v16; // r12@24\n  int v17; // eax@24\n  int v18; // er12@24\n  FILE *v19; // r13@28\n  const char *v20; // rax@29\n  _IO_FILE *v21; // rbx@29\n  const char *v22; // r13@29\n  char *v23; // rax@30\n  int v24; // edi@31\n  char *v25; // kr00_8@36\n  char *v26; // rdx@36\n  int v27; // esi@37\n  unsigned int v28; // eax@37\n  signed __int64 v29; // rdx@42\n  signed __int64 v30; // rax@42\n  char *v31; // rax@43\n  signed __int64 v32; // rcx@43\n  __int64 v33; // rdx@43\n  signed __int64 v34; // rsi@45\n  unsigned int v35; // ecx@45\n  signed __int64 v36; // rdi@45\n  char *v37; // rsi@45\n  unsigned int v38; // edx@50\n  char *v39; // rcx@50\n  FILE *v40; // rdi@57\n  int v41; // eax@59\n  bool v42; // dl@59\n  char *v43; // rax@62\n  signed __int64 v44; // rax@64\n  unsigned __int64 v45; // r9@65\n  char *v46; // rsi@65\n  char *v47; // r10@65\n  unsigned int v48; // ecx@65\n  unsigned int v49; // ecx@66\n  unsigned int v50; // esi@66\n  __int64 v51; // r8@67\n  unsigned __int64 v52; // rdi@69\n  char *v53; // rcx@69\n  char *v54; // r9@69\n  unsigned int v55; // edx@69\n  unsigned int v56; // edx@70\n  unsigned int v57; // ecx@70\n  __int64 v58; // rsi@71\n  const char *v59; // rax@80\n  char *v60; // rdi@80\n  FILE *v61; // r13@80\n  signed __int64 v62; // [sp+8h] [bp-D0h]@28\n  __int64 v63; // [sp+18h] [bp-C0h]@42\n  char v64[64]; // [sp+20h] [bp-B8h]@35\n  char v65[120]; // [sp+60h] [bp-78h]@35\n\n  v0 = nl_langinfo(14);\n  v1 = qword_623CB8;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_623CB8 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          qword_623CB8 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        v16 = &v13[v9];\n        *(_QWORD *)v16 = 3347411969557751907LL;\n        *((_WORD *)v16 + 6) = 115;\n        *((_DWORD *)v16 + 2) = 1634298977;\n        v17 = open(v13, 0);\n        v18 = v17;\n        if ( v17 >= 0 )\n        {\n          v1 = 0LL;\n          v62 = 0LL;\n          v19 = fdopen(v17, \"r\");\n          if ( v19 )\n          {\n            v20 = v2;\n            v21 = v19;\n            v22 = v20;\nLABEL_30:\n            v23 = v21->_IO_read_ptr;\n            if ( v23 < v21->_IO_read_end )\n            {\nLABEL_31:\n              v21->_IO_read_ptr = v23 + 1;\n              v24 = (unsigned __int8)*v23;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v24 = __uflow(v21);\n              if ( v24 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v24 - 9) <= 1 || v24 == 32 )\n                goto LABEL_30;\n              if ( v24 == 35 )\n              {\n                do\n                {\n                  v43 = v21->_IO_read_ptr;\n                  if ( v43 < v21->_IO_read_end )\n                  {\n                    v21->_IO_read_ptr = v43 + 1;\n                    v41 = (unsigned __int8)*v43;\n                    v42 = 1;\n                  }\n                  else\n                  {\n                    v41 = __uflow(v21);\n                    v42 = v41 != -1;\n                  }\n                }\n                while ( v41 != 10 && v42 );\n                if ( v41 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v24, v21);\n              if ( fscanf(v21, \"%50s %50s\", v64, v65) <= 1 )\n                break;\n              v25 = &v64[strlen(v64)];\n              v26 = v65;\n              do\n              {\n                v27 = *(_DWORD *)v26;\n                v26 += 4;\n                v28 = ~v27 & (v27 - 16843009) & 0x80808080;\n              }\n              while ( !v28 );\n              if ( !(~v27 & (v27 - 16843009) & 0x8080) )\n                v28 >>= 16;\n              if ( !(~v27 & (v27 - 16843009) & 0x8080) )\n                v26 += 2;\n              v29 = &v26[-__CFADD__((_BYTE)v28, (_BYTE)v28) - 3] - v65;\n              v30 = v25 - v64 + v29;\n              v63 = v29;\n              if ( v62 )\n              {\n                v44 = v62 + v30;\n                v62 = v44 + 2;\n                v31 = (char *)realloc(v1, v44 + 3);\n                v33 = v63;\n                v32 = v25 - v64;\n              }\n              else\n              {\n                v62 = v30 + 2;\n                v31 = (char *)malloc(v30 + 3);\n                v32 = v25 - v64;\n                v33 = v63;\n              }\n              if ( !v31 )\n              {\n                v59 = v22;\n                v60 = v1;\n                v61 = v21;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v59;\n                free(v60);\n                sub_409BC0(v61);\n                goto LABEL_26;\n              }\n              v34 = -2 - v32;\n              v35 = v32 + 1;\n              v36 = v62 - v33;\n              v37 = &v31[v62 - v33] + v34;\n              if ( v35 >= 8 )\n              {\n                *(_QWORD *)v37 = *(_QWORD *)v64;\n                *(_QWORD *)&v37[v35 - 8] = *(_QWORD *)&v64[v35 - 8];\n                v45 = (unsigned __int64)(v37 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v46 = &v37[-v45];\n                v47 = (char *)(v64 - v46);\n                v48 = ((_DWORD)v46 + v35) & 0xFFFFFFF8;\n                if ( v48 >= 8 )\n                {\n                  v49 = v48 & 0xFFFFFFF8;\n                  v50 = 0;\n                  do\n                  {\n                    v51 = v50;\n                    v50 += 8;\n                    *(_QWORD *)(v45 + v51) = *(_QWORD *)&v47[v51];\n                  }\n                  while ( v50 < v49 );\n                }\n              }\n              else if ( v35 & 4 )\n              {\n                *(_DWORD *)v37 = *(_DWORD *)v64;\n                *(_DWORD *)&v37[v35 - 4] = *(_DWORD *)&v64[v35 - 4];\n              }\n              else if ( v35 )\n              {\n                *v37 = v64[0];\n                if ( v35 & 2 )\n                  *(_WORD *)&v37[v35 - 2] = *(_WORD *)&v64[v35 - 2];\n              }\n              v38 = v33 + 1;\n              v39 = &v31[v36 - 1];\n              if ( v38 >= 8 )\n              {\n                *(_QWORD *)v39 = *(_QWORD *)v65;\n                *(_QWORD *)&v39[v38 - 8] = *(_QWORD *)&v65[v38 - 8];\n                v52 = (unsigned __int64)(v39 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v53 = &v39[-v52];\n                v54 = (char *)(v65 - v53);\n                v55 = ((_DWORD)v53 + v38) & 0xFFFFFFF8;\n                if ( v55 >= 8 )\n                {\n                  v56 = v55 & 0xFFFFFFF8;\n                  v57 = 0;\n                  do\n                  {\n                    v58 = v57;\n                    v57 += 8;\n                    *(_QWORD *)(v52 + v58) = *(_QWORD *)&v54[v58];\n                  }\n                  while ( v57 < v56 );\n                }\n              }\n              else if ( v38 & 4 )\n              {\n                *(_DWORD *)v39 = *(_DWORD *)v65;\n                *(_DWORD *)&v39[v38 - 4] = *(_DWORD *)&v65[v38 - 4];\n              }\n              else if ( v38 )\n              {\n                *v39 = v65[0];\n                if ( v38 & 2 )\n                  *(_WORD *)&v39[v38 - 2] = *(_WORD *)&v65[v38 - 2];\n              }\n              v1 = v31;\n              v23 = v21->_IO_read_ptr;\n              if ( v23 < v21->_IO_read_end )\n                goto LABEL_31;\n            }\n            v40 = v21;\n            v2 = v22;\n            sub_409BC0(v40);\n            if ( !v62 )\n              goto LABEL_25;\n            v1[v62] = 0;\n            goto LABEL_26;\n          }\n          close(v18);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free((void *)v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x418b40L", 
            "funcEndAddr": "0x4190a2L", 
            "funcName": "sub_418B40"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_419160(_BYTE *a1, __int64 a2, unsigned __int64 a3, _QWORD *a4)\n{\n  _BYTE *v4; // rbx@1\n  unsigned __int64 v5; // rdi@1\n  void *v6; // rsp@4\n  unsigned __int64 v7; // rdi@4\n  __int64 v8; // r8@5\n  signed __int64 v9; // r9@5\n  char v10; // al@6\n  __int64 v11; // r8@12\n  _BYTE *v12; // r9@12\n  __int64 v13; // rax@12\n  __int64 v14; // r10@16\n  unsigned __int64 v16; // rax@18\n  _QWORD *v17; // [sp+8h] [bp-28h]@18\n  unsigned __int64 v18; // [sp+10h] [bp-20h]@18\n  __int64 v19; // [sp+18h] [bp-18h]@18\n\n  v4 = a1;\n  v5 = 8 * a3;\n  if ( a3 & 0x1000000000000000LL || a3 >> 61 != 0 )\n    return 0LL;\n  if ( v5 > 0xFAF )\n  {\n    v17 = a4;\n    v18 = a3;\n    v19 = a2;\n    LODWORD(v16) = sub_41B0D0();\n    a4 = v17;\n    a3 = v18;\n    v7 = v16;\n    if ( v16 )\n      goto LABEL_5;\n    return 0LL;\n  }\n  v6 = alloca(v5 + 24);\n  v7 = (((unsigned __int64)&v17 + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  if ( (((unsigned __int64)&v17 + 7) & 0xFFFFFFFFFFFFFFF0LL) == -16LL )\n    return 0LL;\nLABEL_5:\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v8 = 0LL;\n  v9 = 2LL;\n  if ( a3 > 2 )\n  {\n    do\n    {\n      v10 = *(_BYTE *)(a2 + v9 - 1);\n      if ( v10 == *(_BYTE *)(a2 + v8) )\n      {\nLABEL_23:\n        *(_QWORD *)(v7 + 8 * v9) = v9 - ++v8;\n      }\n      else\n      {\n        while ( v8 )\n        {\n          v8 -= *(_QWORD *)(v7 + 8 * v8);\n          if ( *(_BYTE *)(a2 + v8) == v10 )\n            goto LABEL_23;\n        }\n        *(_QWORD *)(v7 + 8 * v9) = v9;\n        v8 = 0LL;\n      }\n      ++v9;\n    }\n    while ( a3 != v9 );\n  }\n  *a4 = 0LL;\n  v11 = *v4;\n  v12 = v4;\n  v13 = 0LL;\nLABEL_13:\n  while ( 2 )\n  {\n    if ( (_BYTE)v11 )\n    {\n      while ( *(_BYTE *)(a2 + v13) != (_BYTE)v11 )\n      {\n        if ( !v13 )\n        {\n          v11 = v12[1];\n          ++v4;\n          ++v12;\n          goto LABEL_13;\n        }\n        v14 = *(_QWORD *)(v7 + 8 * v13);\n        v4 += v14;\n        v13 -= v14;\n        if ( !(_BYTE)v11 )\n          goto LABEL_17;\n      }\n      if ( a3 != ++v13 )\n      {\n        v11 = (v12++)[1];\n        continue;\n      }\n      *a4 = v4;\n    }\n    break;\n  }\nLABEL_17:\n  sub_41B140(v7, a2, a3, a4, v11, v12);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x419160L", 
            "funcEndAddr": "0x4192e3L", 
            "funcName": "sub_419160"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4192F0()\n{\n  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n}\n", 
            "funcStartAddr": "0x4192f0L", 
            "funcEndAddr": "0x41930dL", 
            "funcName": "sub_4192F0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_419310(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9@1\n  void *v4; // rsp@4\n  unsigned __int64 v5; // r12@4\n  unsigned __int64 v6; // rbx@6\n  __int64 v7; // r13@6\n  __int64 v8; // rcx@7\n  unsigned int v9; // eax@8\n  __int64 v10; // r8@8\n  char v11; // al@9\n  size_t v12; // rdx@10\n  signed __int64 v13; // rax@16\n  char *v14; // r14@16\n  signed __int64 v15; // rax@16\n  size_t v16; // rax@16\n  __int64 v17; // r15@24\n  signed __int64 v18; // r14@24\n  bool v19; // cf@24\n  bool v20; // zf@24\n  char v21; // bl@25\n  signed __int64 v22; // rax@30\n  size_t v23; // rdx@31\n  __int64 v24; // r15@35\n  char *v25; // rax@35\n  char v26; // al@35\n  signed __int64 v27; // rax@38\n  size_t v28; // rdx@39\n  unsigned int v29; // eax@44\n  unsigned int v30; // eax@49\n  __int64 v31; // rdx@50\n  unsigned __int64 v33; // rax@57\n  void *v34; // rax@60\n  size_t v35; // rax@62\n  signed __int64 v36; // rax@65\n  char *v37; // rbx@65\n  signed __int64 v38; // rax@65\n  size_t v39; // rax@65\n  __int64 v40; // rbx@75\n  __int64 v41; // r14@75\n  unsigned int v42; // eax@81\n  signed __int64 v43; // rax@86\n  char *v44; // r15@86\n  signed __int64 v45; // rax@86\n  size_t v46; // rax@86\n  size_t v47; // rax@95\n  signed __int64 v48; // rax@100\n  char *v49; // rbx@100\n  signed __int64 v50; // rax@100\n  size_t v51; // rax@100\n  size_t v52; // rax@109\n  size_t v53; // rax@113\n  char **v54; // [sp+0h] [bp-110h]@1\n  mbstate_t *ps; // [sp+8h] [bp-108h]@1\n  unsigned __int64 v56; // [sp+10h] [bp-100h]@1\n  mbstate_t *v57; // [sp+18h] [bp-F8h]@24\n  char v58; // [sp+20h] [bp-F0h]@6\n  __int64 v59; // [sp+24h] [bp-ECh]@6\n  char v60; // [sp+2Ch] [bp-E4h]@6\n  void *src; // [sp+30h] [bp-E0h]@6\n  size_t n; // [sp+38h] [bp-D8h]@8\n  char v63; // [sp+40h] [bp-D0h]@8\n  unsigned int v64; // [sp+44h] [bp-CCh]@8\n  __int64 v65; // [sp+48h] [bp-C8h]@10\n  char v66; // [sp+60h] [bp-B0h]@35\n  __int64 v67; // [sp+64h] [bp-ACh]@35\n  char v68; // [sp+6Ch] [bp-A4h]@35\n  char *s; // [sp+70h] [bp-A0h]@35\n  size_t v70; // [sp+78h] [bp-98h]@44\n  char v71; // [sp+80h] [bp-90h]@44\n  unsigned int v72; // [sp+84h] [bp-8Ch]@44\n  char v73; // [sp+A0h] [bp-70h]@35\n  __int64 v74; // [sp+A4h] [bp-6Ch]@35\n  char v75; // [sp+ACh] [bp-64h]@35\n  void *s2; // [sp+B0h] [bp-60h]@35\n  size_t v77; // [sp+B8h] [bp-58h]@39\n  char v78; // [sp+C0h] [bp-50h]@37\n  unsigned int v79; // [sp+C4h] [bp-4Ch]@49\n\n  ps = a1;\n  v54 = a3;\n  v56 = sub_41B1D0(a2);\n  if ( (56 * v56 & 0x8000000000000000LL) != 0LL || 56 * (unsigned __int128)v56 >> 64 != 0 )\n    return 0LL;\n  if ( 56 * v56 > 0xFAF )\n  {\n    LODWORD(v33) = sub_41B0D0();\n    v5 = v33;\n  }\n  else\n  {\n    v4 = alloca(56 * v56 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v58 = 0;\n  v60 = 0;\n  v59 = 0LL;\n  v7 = v5 + 48 * v56;\n  while ( 1 )\n  {\n    if ( !v58 )\n    {\n      v8 = *(_BYTE *)src;\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)src >> 5) & 7)] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(_BYTE *)src;\n        v63 = 1;\n        v64 = v9;\n        v10 = v9;\n        v60 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit((const mbstate_t *)&v59) )\n        goto LABEL_115;\n      v58 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_4085C0((__int64)src, v13);\n    a2 = v14;\n    v16 = sub_40AB50((wchar_t *)&v64, v14, v15, (mbstate_t *)&v59);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v63 = 0;\n      v60 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v35 = strlen((const char *)src);\n    v63 = 0;\n    n = v35;\n    v11 = 0;\n    v60 = 1;\nLABEL_10:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v65 )\n    {\n      v34 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v34;\n      v11 = v63;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v64;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v60 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v64 )\n      goto LABEL_116;\n  }\n  v63 = 1;\n  if ( mbsinit((const mbstate_t *)&v59) )\n    v58 = 0;\n  v10 = v64;\n  v60 = 1;\n  if ( v64 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v56 < 2;\n  v20 = v56 == 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v57 = (mbstate_t *)2;\n  if ( !v19 && !v20 )\n  {\n    do\n    {\n      v21 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v22 = v5 + 48 * v17;\n        if ( v21 && *(_BYTE *)(v22 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v22 + 20) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v23 = *(_QWORD *)(v18 + 8);\n          if ( v23 == *(_QWORD *)(v22 + 8) )\n          {\n            a2 = *(char **)v22;\n            if ( !memcmp(*(const void **)v18, *(const void **)v22, v23) )\n            {\nLABEL_33:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v57) = (char *)v57 - ++v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v57) = v57;\nLABEL_34:\n      v57 = (mbstate_t *)((char *)v57 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v56 != v57 );\n  }\n  v66 = 0;\n  v24 = 0LL;\n  v68 = 0;\n  *v54 = 0LL;\n  v25 = (char *)ps;\n  ps = (mbstate_t *)&v74;\n  v73 = 0;\n  v67 = 0LL;\n  v74 = 0LL;\n  v75 = 0;\n  v57 = (mbstate_t *)&v67;\n  s = v25;\n  s2 = v25;\n  v26 = 0;\nLABEL_36:\n  if ( v26 )\n  {\n    if ( !v78 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v73 )\n      {\n        v8 = *(_BYTE *)s2;\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s2 >> 5) & 7)] >> v8) & 1 )\n        {\n          v77 = 1LL;\n          v30 = *(_BYTE *)s2;\n          v78 = 1;\n          v79 = v30;\n          v75 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_115;\n        v73 = 1;\n      }\n      v36 = __ctype_get_mb_cur_max();\n      v37 = (char *)s2;\n      v38 = sub_4085C0((__int64)s2, v36);\n      a2 = v37;\n      v39 = sub_40AB50((wchar_t *)&v79, v37, v38, (mbstate_t *)&v74);\n      v77 = v39;\n      if ( v39 == -1LL )\n      {\n        v77 = 1LL;\n        v78 = 0;\n        v75 = 1;\nLABEL_38:\n        v27 = v5 + 48 * v24;\n        goto LABEL_39;\n      }\n      if ( v39 == -2LL )\n      {\n        v52 = strlen((const char *)s2);\n        v78 = 0;\n        v77 = v52;\n        v75 = 1;\n        goto LABEL_38;\n      }\n      if ( !v39 )\n      {\n        v77 = 1LL;\n        if ( *(_BYTE *)s2 )\n          goto LABEL_114;\n        if ( v79 )\n          goto LABEL_116;\n      }\n      v78 = 1;\n      if ( mbsinit((const mbstate_t *)&v74) )\n        v73 = 0;\n      v75 = 1;\nLABEL_50:\n      v31 = v79;\n      if ( !v79 )\n        goto LABEL_55;\n      v27 = v5 + 48 * v24;\n      if ( *(_BYTE *)(v27 + 16) )\n      {\n        if ( *(_DWORD *)(v27 + 20) != v79 )\n        {\nLABEL_40:\n          if ( !v24 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v28 = *(_QWORD *)(v27 + 8);\n        if ( v28 != v77 )\n          goto LABEL_40;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v27, s2, v28) )\n        {\n          if ( !v24 )\n          {\nLABEL_41:\n            if ( v68 )\n            {\n              if ( v71 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v66 )\n            {\n              if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n              {\n                v70 = 1LL;\n                v29 = *s;\n                v71 = 1;\n                v72 = v29;\n                v68 = 1;\nLABEL_45:\n                if ( !v72 )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v70;\n                s2 = (char *)s2 + v77;\n                v68 = 0;\n                v75 = 0;\n                continue;\n              }\n              if ( mbsinit(v57) )\n              {\n                v66 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v48 = __ctype_get_mb_cur_max();\n            v49 = s;\n            v50 = sub_4085C0((__int64)s, v48);\n            a2 = v49;\n            v51 = sub_40AB50((wchar_t *)&v72, v49, v50, (mbstate_t *)&v67);\n            v70 = v51;\n            if ( v51 == -1LL )\n            {\n              v70 = 1LL;\n              v71 = 0;\n              goto LABEL_46;\n            }\n            if ( v51 == -2LL )\n            {\n              v53 = strlen(s);\n              v71 = 0;\n              v70 = v53;\n              goto LABEL_46;\n            }\n            if ( v51 )\n            {\nLABEL_105:\n              v71 = 1;\n              if ( mbsinit((const mbstate_t *)&v67) )\n                v66 = 0;\n              v68 = 1;\n              goto LABEL_45;\n            }\n            v70 = 1LL;\n            if ( !*s )\n            {\n              if ( !v72 )\n                goto LABEL_105;\nLABEL_116:\n              sub_4192F0();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v40 = *(_QWORD *)(v7 + 8 * v24);\n          v26 = v75;\n          v41 = v24 - v40;\n          if ( !v40 )\n            goto LABEL_36;\n          if ( !v68 )\n            goto LABEL_79;\n          if ( v71 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              while ( 2 )\n              {\n                v68 = 0;\n                s += v70;\n                if ( !--v40 )\n                {\n                  v26 = v75;\n                  v24 = v41;\n                  goto LABEL_36;\n                }\nLABEL_79:\n                if ( !v66 )\n                {\n                  v8 = (unsigned __int8)*s;\n                  if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> v8) & 1 )\n                  {\n                    v70 = 1LL;\n                    v42 = *s;\n                    v71 = 1;\n                    v72 = v42;\n                    v68 = 1;\nLABEL_82:\n                    a2 = (char *)v72;\n                    if ( !v72 )\n                      goto LABEL_118;\n                    continue;\n                  }\n                  if ( !mbsinit(v57) )\n                    goto LABEL_115;\n                  v66 = 1;\n                }\n                break;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = s;\n              v45 = sub_4085C0((__int64)s, v43);\n              a2 = v44;\n              v46 = sub_40AB50((wchar_t *)&v72, v44, v45, (mbstate_t *)&v67);\n              v70 = v46;\n              if ( v46 == -1LL )\n              {\n                v70 = 1LL;\n                v71 = 0;\n                continue;\n              }\n              break;\n            }\n            if ( v46 == -2LL )\n            {\n              v47 = strlen(s);\n              v71 = 0;\n              v70 = v47;\n              continue;\n            }\n            break;\n          }\n          if ( !v46 )\n          {\n            v70 = 1LL;\n            if ( *s )\n              goto LABEL_114;\n            if ( v72 )\n              __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n          }\n          v71 = 1;\n          if ( mbsinit((const mbstate_t *)&v67) )\n            v66 = 0;\n          v68 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v24;\n    s2 = (char *)s2 + v77;\n    v75 = 0;\n    if ( v56 != v24 )\n      continue;\n    break;\n  }\n  *v54 = s;\nLABEL_55:\n  sub_41B140(v5, a2, v31, v8, v10, v3);\n  return 1LL;\n}\n\nsigned __int64 __fastcall sub_419310(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9@1\n  void *v4; // rsp@4\n  unsigned __int64 v5; // r12@4\n  unsigned __int64 v6; // rbx@6\n  __int64 v7; // r13@6\n  __int64 v8; // rcx@7\n  unsigned int v9; // eax@8\n  __int64 v10; // r8@8\n  char v11; // al@9\n  size_t v12; // rdx@10\n  signed __int64 v13; // rax@16\n  char *v14; // r14@16\n  signed __int64 v15; // rax@16\n  size_t v16; // rax@16\n  __int64 v17; // r15@24\n  signed __int64 v18; // r14@24\n  bool v19; // cf@24\n  bool v20; // zf@24\n  char v21; // bl@25\n  signed __int64 v22; // rax@30\n  size_t v23; // rdx@31\n  __int64 v24; // r15@35\n  char *v25; // rax@35\n  char v26; // al@35\n  signed __int64 v27; // rax@38\n  size_t v28; // rdx@39\n  unsigned int v29; // eax@44\n  unsigned int v30; // eax@49\n  __int64 v31; // rdx@50\n  unsigned __int64 v33; // rax@57\n  void *v34; // rax@60\n  size_t v35; // rax@62\n  signed __int64 v36; // rax@65\n  char *v37; // rbx@65\n  signed __int64 v38; // rax@65\n  size_t v39; // rax@65\n  __int64 v40; // rbx@75\n  __int64 v41; // r14@75\n  unsigned int v42; // eax@81\n  signed __int64 v43; // rax@86\n  char *v44; // r15@86\n  signed __int64 v45; // rax@86\n  size_t v46; // rax@86\n  size_t v47; // rax@95\n  signed __int64 v48; // rax@100\n  char *v49; // rbx@100\n  signed __int64 v50; // rax@100\n  size_t v51; // rax@100\n  size_t v52; // rax@109\n  size_t v53; // rax@113\n  char **v54; // [sp+0h] [bp-110h]@1\n  mbstate_t *ps; // [sp+8h] [bp-108h]@1\n  unsigned __int64 v56; // [sp+10h] [bp-100h]@1\n  mbstate_t *v57; // [sp+18h] [bp-F8h]@24\n  char v58; // [sp+20h] [bp-F0h]@6\n  __int64 v59; // [sp+24h] [bp-ECh]@6\n  char v60; // [sp+2Ch] [bp-E4h]@6\n  void *src; // [sp+30h] [bp-E0h]@6\n  size_t n; // [sp+38h] [bp-D8h]@8\n  char v63; // [sp+40h] [bp-D0h]@8\n  unsigned int v64; // [sp+44h] [bp-CCh]@8\n  __int64 v65; // [sp+48h] [bp-C8h]@10\n  char v66; // [sp+60h] [bp-B0h]@35\n  __int64 v67; // [sp+64h] [bp-ACh]@35\n  char v68; // [sp+6Ch] [bp-A4h]@35\n  char *s; // [sp+70h] [bp-A0h]@35\n  size_t v70; // [sp+78h] [bp-98h]@44\n  char v71; // [sp+80h] [bp-90h]@44\n  unsigned int v72; // [sp+84h] [bp-8Ch]@44\n  char v73; // [sp+A0h] [bp-70h]@35\n  __int64 v74; // [sp+A4h] [bp-6Ch]@35\n  char v75; // [sp+ACh] [bp-64h]@35\n  void *s2; // [sp+B0h] [bp-60h]@35\n  size_t v77; // [sp+B8h] [bp-58h]@39\n  char v78; // [sp+C0h] [bp-50h]@37\n  unsigned int v79; // [sp+C4h] [bp-4Ch]@49\n\n  ps = a1;\n  v54 = a3;\n  v56 = sub_41B1D0(a2);\n  if ( (56 * v56 & 0x8000000000000000LL) != 0LL || 56 * (unsigned __int128)v56 >> 64 != 0 )\n    return 0LL;\n  if ( 56 * v56 > 0xFAF )\n  {\n    LODWORD(v33) = sub_41B0D0();\n    v5 = v33;\n  }\n  else\n  {\n    v4 = alloca(56 * v56 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v58 = 0;\n  v60 = 0;\n  v59 = 0LL;\n  v7 = v5 + 48 * v56;\n  while ( 1 )\n  {\n    if ( !v58 )\n    {\n      v8 = *(_BYTE *)src;\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)src >> 5) & 7)] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(_BYTE *)src;\n        v63 = 1;\n        v64 = v9;\n        v10 = v9;\n        v60 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit((const mbstate_t *)&v59) )\n        goto LABEL_115;\n      v58 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_4085C0((__int64)src, v13);\n    a2 = v14;\n    v16 = sub_40AB50((wchar_t *)&v64, v14, v15, (mbstate_t *)&v59);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v63 = 0;\n      v60 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v35 = strlen((const char *)src);\n    v63 = 0;\n    n = v35;\n    v11 = 0;\n    v60 = 1;\nLABEL_10:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v65 )\n    {\n      v34 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v34;\n      v11 = v63;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v64;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v60 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v64 )\n      goto LABEL_116;\n  }\n  v63 = 1;\n  if ( mbsinit((const mbstate_t *)&v59) )\n    v58 = 0;\n  v10 = v64;\n  v60 = 1;\n  if ( v64 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v56 < 2;\n  v20 = v56 == 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v57 = (mbstate_t *)2;\n  if ( !v19 && !v20 )\n  {\n    do\n    {\n      v21 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v22 = v5 + 48 * v17;\n        if ( v21 && *(_BYTE *)(v22 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v22 + 20) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v23 = *(_QWORD *)(v18 + 8);\n          if ( v23 == *(_QWORD *)(v22 + 8) )\n          {\n            a2 = *(char **)v22;\n            if ( !memcmp(*(const void **)v18, *(const void **)v22, v23) )\n            {\nLABEL_33:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v57) = (char *)v57 - ++v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v57) = v57;\nLABEL_34:\n      v57 = (mbstate_t *)((char *)v57 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v56 != v57 );\n  }\n  v66 = 0;\n  v24 = 0LL;\n  v68 = 0;\n  *v54 = 0LL;\n  v25 = (char *)ps;\n  ps = (mbstate_t *)&v74;\n  v73 = 0;\n  v67 = 0LL;\n  v74 = 0LL;\n  v75 = 0;\n  v57 = (mbstate_t *)&v67;\n  s = v25;\n  s2 = v25;\n  v26 = 0;\nLABEL_36:\n  if ( v26 )\n  {\n    if ( !v78 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v73 )\n      {\n        v8 = *(_BYTE *)s2;\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s2 >> 5) & 7)] >> v8) & 1 )\n        {\n          v77 = 1LL;\n          v30 = *(_BYTE *)s2;\n          v78 = 1;\n          v79 = v30;\n          v75 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_115;\n        v73 = 1;\n      }\n      v36 = __ctype_get_mb_cur_max();\n      v37 = (char *)s2;\n      v38 = sub_4085C0((__int64)s2, v36);\n      a2 = v37;\n      v39 = sub_40AB50((wchar_t *)&v79, v37, v38, (mbstate_t *)&v74);\n      v77 = v39;\n      if ( v39 == -1LL )\n      {\n        v77 = 1LL;\n        v78 = 0;\n        v75 = 1;\nLABEL_38:\n        v27 = v5 + 48 * v24;\n        goto LABEL_39;\n      }\n      if ( v39 == -2LL )\n      {\n        v52 = strlen((const char *)s2);\n        v78 = 0;\n        v77 = v52;\n        v75 = 1;\n        goto LABEL_38;\n      }\n      if ( !v39 )\n      {\n        v77 = 1LL;\n        if ( *(_BYTE *)s2 )\n          goto LABEL_114;\n        if ( v79 )\n          goto LABEL_116;\n      }\n      v78 = 1;\n      if ( mbsinit((const mbstate_t *)&v74) )\n        v73 = 0;\n      v75 = 1;\nLABEL_50:\n      v31 = v79;\n      if ( !v79 )\n        goto LABEL_55;\n      v27 = v5 + 48 * v24;\n      if ( *(_BYTE *)(v27 + 16) )\n      {\n        if ( *(_DWORD *)(v27 + 20) != v79 )\n        {\nLABEL_40:\n          if ( !v24 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v28 = *(_QWORD *)(v27 + 8);\n        if ( v28 != v77 )\n          goto LABEL_40;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v27, s2, v28) )\n        {\n          if ( !v24 )\n          {\nLABEL_41:\n            if ( v68 )\n            {\n              if ( v71 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v66 )\n            {\n              if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n              {\n                v70 = 1LL;\n                v29 = *s;\n                v71 = 1;\n                v72 = v29;\n                v68 = 1;\nLABEL_45:\n                if ( !v72 )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v70;\n                s2 = (char *)s2 + v77;\n                v68 = 0;\n                v75 = 0;\n                continue;\n              }\n              if ( mbsinit(v57) )\n              {\n                v66 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v48 = __ctype_get_mb_cur_max();\n            v49 = s;\n            v50 = sub_4085C0((__int64)s, v48);\n            a2 = v49;\n            v51 = sub_40AB50((wchar_t *)&v72, v49, v50, (mbstate_t *)&v67);\n            v70 = v51;\n            if ( v51 == -1LL )\n            {\n              v70 = 1LL;\n              v71 = 0;\n              goto LABEL_46;\n            }\n            if ( v51 == -2LL )\n            {\n              v53 = strlen(s);\n              v71 = 0;\n              v70 = v53;\n              goto LABEL_46;\n            }\n            if ( v51 )\n            {\nLABEL_105:\n              v71 = 1;\n              if ( mbsinit((const mbstate_t *)&v67) )\n                v66 = 0;\n              v68 = 1;\n              goto LABEL_45;\n            }\n            v70 = 1LL;\n            if ( !*s )\n            {\n              if ( !v72 )\n                goto LABEL_105;\nLABEL_116:\n              sub_4192F0();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v40 = *(_QWORD *)(v7 + 8 * v24);\n          v26 = v75;\n          v41 = v24 - v40;\n          if ( !v40 )\n            goto LABEL_36;\n          if ( !v68 )\n            goto LABEL_79;\n          if ( v71 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              while ( 2 )\n              {\n                v68 = 0;\n                s += v70;\n                if ( !--v40 )\n                {\n                  v26 = v75;\n                  v24 = v41;\n                  goto LABEL_36;\n                }\nLABEL_79:\n                if ( !v66 )\n                {\n                  v8 = (unsigned __int8)*s;\n                  if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> v8) & 1 )\n                  {\n                    v70 = 1LL;\n                    v42 = *s;\n                    v71 = 1;\n                    v72 = v42;\n                    v68 = 1;\nLABEL_82:\n                    a2 = (char *)v72;\n                    if ( !v72 )\n                      goto LABEL_118;\n                    continue;\n                  }\n                  if ( !mbsinit(v57) )\n                    goto LABEL_115;\n                  v66 = 1;\n                }\n                break;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = s;\n              v45 = sub_4085C0((__int64)s, v43);\n              a2 = v44;\n              v46 = sub_40AB50((wchar_t *)&v72, v44, v45, (mbstate_t *)&v67);\n              v70 = v46;\n              if ( v46 == -1LL )\n              {\n                v70 = 1LL;\n                v71 = 0;\n                continue;\n              }\n              break;\n            }\n            if ( v46 == -2LL )\n            {\n              v47 = strlen(s);\n              v71 = 0;\n              v70 = v47;\n              continue;\n            }\n            break;\n          }\n          if ( !v46 )\n          {\n            v70 = 1LL;\n            if ( *s )\n              goto LABEL_114;\n            if ( v72 )\n              __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n          }\n          v71 = 1;\n          if ( mbsinit((const mbstate_t *)&v67) )\n            v66 = 0;\n          v68 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v24;\n    s2 = (char *)s2 + v77;\n    v75 = 0;\n    if ( v56 != v24 )\n      continue;\n    break;\n  }\n  *v54 = s;\nLABEL_55:\n  sub_41B140(v5, a2, v31, v8, v10, v3);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x401ffdL", 
            "funcEndAddr": "0x402002L", 
            "funcName": "sub_419310"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_419310(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9@1\n  void *v4; // rsp@4\n  unsigned __int64 v5; // r12@4\n  unsigned __int64 v6; // rbx@6\n  __int64 v7; // r13@6\n  __int64 v8; // rcx@7\n  unsigned int v9; // eax@8\n  __int64 v10; // r8@8\n  char v11; // al@9\n  size_t v12; // rdx@10\n  signed __int64 v13; // rax@16\n  char *v14; // r14@16\n  signed __int64 v15; // rax@16\n  size_t v16; // rax@16\n  __int64 v17; // r15@24\n  signed __int64 v18; // r14@24\n  bool v19; // cf@24\n  bool v20; // zf@24\n  char v21; // bl@25\n  signed __int64 v22; // rax@30\n  size_t v23; // rdx@31\n  __int64 v24; // r15@35\n  char *v25; // rax@35\n  char v26; // al@35\n  signed __int64 v27; // rax@38\n  size_t v28; // rdx@39\n  unsigned int v29; // eax@44\n  unsigned int v30; // eax@49\n  __int64 v31; // rdx@50\n  unsigned __int64 v33; // rax@57\n  void *v34; // rax@60\n  size_t v35; // rax@62\n  signed __int64 v36; // rax@65\n  char *v37; // rbx@65\n  signed __int64 v38; // rax@65\n  size_t v39; // rax@65\n  __int64 v40; // rbx@75\n  __int64 v41; // r14@75\n  unsigned int v42; // eax@81\n  signed __int64 v43; // rax@86\n  char *v44; // r15@86\n  signed __int64 v45; // rax@86\n  size_t v46; // rax@86\n  size_t v47; // rax@95\n  signed __int64 v48; // rax@100\n  char *v49; // rbx@100\n  signed __int64 v50; // rax@100\n  size_t v51; // rax@100\n  size_t v52; // rax@109\n  size_t v53; // rax@113\n  char **v54; // [sp+0h] [bp-110h]@1\n  mbstate_t *ps; // [sp+8h] [bp-108h]@1\n  unsigned __int64 v56; // [sp+10h] [bp-100h]@1\n  mbstate_t *v57; // [sp+18h] [bp-F8h]@24\n  char v58; // [sp+20h] [bp-F0h]@6\n  __int64 v59; // [sp+24h] [bp-ECh]@6\n  char v60; // [sp+2Ch] [bp-E4h]@6\n  void *src; // [sp+30h] [bp-E0h]@6\n  size_t n; // [sp+38h] [bp-D8h]@8\n  char v63; // [sp+40h] [bp-D0h]@8\n  unsigned int v64; // [sp+44h] [bp-CCh]@8\n  __int64 v65; // [sp+48h] [bp-C8h]@10\n  char v66; // [sp+60h] [bp-B0h]@35\n  __int64 v67; // [sp+64h] [bp-ACh]@35\n  char v68; // [sp+6Ch] [bp-A4h]@35\n  char *s; // [sp+70h] [bp-A0h]@35\n  size_t v70; // [sp+78h] [bp-98h]@44\n  char v71; // [sp+80h] [bp-90h]@44\n  unsigned int v72; // [sp+84h] [bp-8Ch]@44\n  char v73; // [sp+A0h] [bp-70h]@35\n  __int64 v74; // [sp+A4h] [bp-6Ch]@35\n  char v75; // [sp+ACh] [bp-64h]@35\n  void *s2; // [sp+B0h] [bp-60h]@35\n  size_t v77; // [sp+B8h] [bp-58h]@39\n  char v78; // [sp+C0h] [bp-50h]@37\n  unsigned int v79; // [sp+C4h] [bp-4Ch]@49\n\n  ps = a1;\n  v54 = a3;\n  v56 = sub_41B1D0(a2);\n  if ( (56 * v56 & 0x8000000000000000LL) != 0LL || 56 * (unsigned __int128)v56 >> 64 != 0 )\n    return 0LL;\n  if ( 56 * v56 > 0xFAF )\n  {\n    LODWORD(v33) = sub_41B0D0();\n    v5 = v33;\n  }\n  else\n  {\n    v4 = alloca(56 * v56 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v58 = 0;\n  v60 = 0;\n  v59 = 0LL;\n  v7 = v5 + 48 * v56;\n  while ( 1 )\n  {\n    if ( !v58 )\n    {\n      v8 = *(_BYTE *)src;\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)src >> 5) & 7)] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(_BYTE *)src;\n        v63 = 1;\n        v64 = v9;\n        v10 = v9;\n        v60 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit((const mbstate_t *)&v59) )\n        goto LABEL_115;\n      v58 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_4085C0((__int64)src, v13);\n    a2 = v14;\n    v16 = sub_40AB50((wchar_t *)&v64, v14, v15, (mbstate_t *)&v59);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v63 = 0;\n      v60 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v35 = strlen((const char *)src);\n    v63 = 0;\n    n = v35;\n    v11 = 0;\n    v60 = 1;\nLABEL_10:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v65 )\n    {\n      v34 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v34;\n      v11 = v63;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v64;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v60 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v64 )\n      goto LABEL_116;\n  }\n  v63 = 1;\n  if ( mbsinit((const mbstate_t *)&v59) )\n    v58 = 0;\n  v10 = v64;\n  v60 = 1;\n  if ( v64 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v56 < 2;\n  v20 = v56 == 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v57 = (mbstate_t *)2;\n  if ( !v19 && !v20 )\n  {\n    do\n    {\n      v21 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v22 = v5 + 48 * v17;\n        if ( v21 && *(_BYTE *)(v22 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v22 + 20) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v23 = *(_QWORD *)(v18 + 8);\n          if ( v23 == *(_QWORD *)(v22 + 8) )\n          {\n            a2 = *(char **)v22;\n            if ( !memcmp(*(const void **)v18, *(const void **)v22, v23) )\n            {\nLABEL_33:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v57) = (char *)v57 - ++v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v57) = v57;\nLABEL_34:\n      v57 = (mbstate_t *)((char *)v57 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v56 != v57 );\n  }\n  v66 = 0;\n  v24 = 0LL;\n  v68 = 0;\n  *v54 = 0LL;\n  v25 = (char *)ps;\n  ps = (mbstate_t *)&v74;\n  v73 = 0;\n  v67 = 0LL;\n  v74 = 0LL;\n  v75 = 0;\n  v57 = (mbstate_t *)&v67;\n  s = v25;\n  s2 = v25;\n  v26 = 0;\nLABEL_36:\n  if ( v26 )\n  {\n    if ( !v78 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v73 )\n      {\n        v8 = *(_BYTE *)s2;\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s2 >> 5) & 7)] >> v8) & 1 )\n        {\n          v77 = 1LL;\n          v30 = *(_BYTE *)s2;\n          v78 = 1;\n          v79 = v30;\n          v75 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_115;\n        v73 = 1;\n      }\n      v36 = __ctype_get_mb_cur_max();\n      v37 = (char *)s2;\n      v38 = sub_4085C0((__int64)s2, v36);\n      a2 = v37;\n      v39 = sub_40AB50((wchar_t *)&v79, v37, v38, (mbstate_t *)&v74);\n      v77 = v39;\n      if ( v39 == -1LL )\n      {\n        v77 = 1LL;\n        v78 = 0;\n        v75 = 1;\nLABEL_38:\n        v27 = v5 + 48 * v24;\n        goto LABEL_39;\n      }\n      if ( v39 == -2LL )\n      {\n        v52 = strlen((const char *)s2);\n        v78 = 0;\n        v77 = v52;\n        v75 = 1;\n        goto LABEL_38;\n      }\n      if ( !v39 )\n      {\n        v77 = 1LL;\n        if ( *(_BYTE *)s2 )\n          goto LABEL_114;\n        if ( v79 )\n          goto LABEL_116;\n      }\n      v78 = 1;\n      if ( mbsinit((const mbstate_t *)&v74) )\n        v73 = 0;\n      v75 = 1;\nLABEL_50:\n      v31 = v79;\n      if ( !v79 )\n        goto LABEL_55;\n      v27 = v5 + 48 * v24;\n      if ( *(_BYTE *)(v27 + 16) )\n      {\n        if ( *(_DWORD *)(v27 + 20) != v79 )\n        {\nLABEL_40:\n          if ( !v24 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v28 = *(_QWORD *)(v27 + 8);\n        if ( v28 != v77 )\n          goto LABEL_40;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v27, s2, v28) )\n        {\n          if ( !v24 )\n          {\nLABEL_41:\n            if ( v68 )\n            {\n              if ( v71 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v66 )\n            {\n              if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n              {\n                v70 = 1LL;\n                v29 = *s;\n                v71 = 1;\n                v72 = v29;\n                v68 = 1;\nLABEL_45:\n                if ( !v72 )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v70;\n                s2 = (char *)s2 + v77;\n                v68 = 0;\n                v75 = 0;\n                continue;\n              }\n              if ( mbsinit(v57) )\n              {\n                v66 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v48 = __ctype_get_mb_cur_max();\n            v49 = s;\n            v50 = sub_4085C0((__int64)s, v48);\n            a2 = v49;\n            v51 = sub_40AB50((wchar_t *)&v72, v49, v50, (mbstate_t *)&v67);\n            v70 = v51;\n            if ( v51 == -1LL )\n            {\n              v70 = 1LL;\n              v71 = 0;\n              goto LABEL_46;\n            }\n            if ( v51 == -2LL )\n            {\n              v53 = strlen(s);\n              v71 = 0;\n              v70 = v53;\n              goto LABEL_46;\n            }\n            if ( v51 )\n            {\nLABEL_105:\n              v71 = 1;\n              if ( mbsinit((const mbstate_t *)&v67) )\n                v66 = 0;\n              v68 = 1;\n              goto LABEL_45;\n            }\n            v70 = 1LL;\n            if ( !*s )\n            {\n              if ( !v72 )\n                goto LABEL_105;\nLABEL_116:\n              sub_4192F0();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v40 = *(_QWORD *)(v7 + 8 * v24);\n          v26 = v75;\n          v41 = v24 - v40;\n          if ( !v40 )\n            goto LABEL_36;\n          if ( !v68 )\n            goto LABEL_79;\n          if ( v71 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              while ( 2 )\n              {\n                v68 = 0;\n                s += v70;\n                if ( !--v40 )\n                {\n                  v26 = v75;\n                  v24 = v41;\n                  goto LABEL_36;\n                }\nLABEL_79:\n                if ( !v66 )\n                {\n                  v8 = (unsigned __int8)*s;\n                  if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> v8) & 1 )\n                  {\n                    v70 = 1LL;\n                    v42 = *s;\n                    v71 = 1;\n                    v72 = v42;\n                    v68 = 1;\nLABEL_82:\n                    a2 = (char *)v72;\n                    if ( !v72 )\n                      goto LABEL_118;\n                    continue;\n                  }\n                  if ( !mbsinit(v57) )\n                    goto LABEL_115;\n                  v66 = 1;\n                }\n                break;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = s;\n              v45 = sub_4085C0((__int64)s, v43);\n              a2 = v44;\n              v46 = sub_40AB50((wchar_t *)&v72, v44, v45, (mbstate_t *)&v67);\n              v70 = v46;\n              if ( v46 == -1LL )\n              {\n                v70 = 1LL;\n                v71 = 0;\n                continue;\n              }\n              break;\n            }\n            if ( v46 == -2LL )\n            {\n              v47 = strlen(s);\n              v71 = 0;\n              v70 = v47;\n              continue;\n            }\n            break;\n          }\n          if ( !v46 )\n          {\n            v70 = 1LL;\n            if ( *s )\n              goto LABEL_114;\n            if ( v72 )\n              __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n          }\n          v71 = 1;\n          if ( mbsinit((const mbstate_t *)&v67) )\n            v66 = 0;\n          v68 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v24;\n    s2 = (char *)s2 + v77;\n    v75 = 0;\n    if ( v56 != v24 )\n      continue;\n    break;\n  }\n  *v54 = s;\nLABEL_55:\n  sub_41B140(v5, a2, v31, v8, v10, v3);\n  return 1LL;\n}\n\nsigned __int64 __fastcall sub_419310(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9@1\n  void *v4; // rsp@4\n  unsigned __int64 v5; // r12@4\n  unsigned __int64 v6; // rbx@6\n  __int64 v7; // r13@6\n  __int64 v8; // rcx@7\n  unsigned int v9; // eax@8\n  __int64 v10; // r8@8\n  char v11; // al@9\n  size_t v12; // rdx@10\n  signed __int64 v13; // rax@16\n  char *v14; // r14@16\n  signed __int64 v15; // rax@16\n  size_t v16; // rax@16\n  __int64 v17; // r15@24\n  signed __int64 v18; // r14@24\n  bool v19; // cf@24\n  bool v20; // zf@24\n  char v21; // bl@25\n  signed __int64 v22; // rax@30\n  size_t v23; // rdx@31\n  __int64 v24; // r15@35\n  char *v25; // rax@35\n  char v26; // al@35\n  signed __int64 v27; // rax@38\n  size_t v28; // rdx@39\n  unsigned int v29; // eax@44\n  unsigned int v30; // eax@49\n  __int64 v31; // rdx@50\n  unsigned __int64 v33; // rax@57\n  void *v34; // rax@60\n  size_t v35; // rax@62\n  signed __int64 v36; // rax@65\n  char *v37; // rbx@65\n  signed __int64 v38; // rax@65\n  size_t v39; // rax@65\n  __int64 v40; // rbx@75\n  __int64 v41; // r14@75\n  unsigned int v42; // eax@81\n  signed __int64 v43; // rax@86\n  char *v44; // r15@86\n  signed __int64 v45; // rax@86\n  size_t v46; // rax@86\n  size_t v47; // rax@95\n  signed __int64 v48; // rax@100\n  char *v49; // rbx@100\n  signed __int64 v50; // rax@100\n  size_t v51; // rax@100\n  size_t v52; // rax@109\n  size_t v53; // rax@113\n  char **v54; // [sp+0h] [bp-110h]@1\n  mbstate_t *ps; // [sp+8h] [bp-108h]@1\n  unsigned __int64 v56; // [sp+10h] [bp-100h]@1\n  mbstate_t *v57; // [sp+18h] [bp-F8h]@24\n  char v58; // [sp+20h] [bp-F0h]@6\n  __int64 v59; // [sp+24h] [bp-ECh]@6\n  char v60; // [sp+2Ch] [bp-E4h]@6\n  void *src; // [sp+30h] [bp-E0h]@6\n  size_t n; // [sp+38h] [bp-D8h]@8\n  char v63; // [sp+40h] [bp-D0h]@8\n  unsigned int v64; // [sp+44h] [bp-CCh]@8\n  __int64 v65; // [sp+48h] [bp-C8h]@10\n  char v66; // [sp+60h] [bp-B0h]@35\n  __int64 v67; // [sp+64h] [bp-ACh]@35\n  char v68; // [sp+6Ch] [bp-A4h]@35\n  char *s; // [sp+70h] [bp-A0h]@35\n  size_t v70; // [sp+78h] [bp-98h]@44\n  char v71; // [sp+80h] [bp-90h]@44\n  unsigned int v72; // [sp+84h] [bp-8Ch]@44\n  char v73; // [sp+A0h] [bp-70h]@35\n  __int64 v74; // [sp+A4h] [bp-6Ch]@35\n  char v75; // [sp+ACh] [bp-64h]@35\n  void *s2; // [sp+B0h] [bp-60h]@35\n  size_t v77; // [sp+B8h] [bp-58h]@39\n  char v78; // [sp+C0h] [bp-50h]@37\n  unsigned int v79; // [sp+C4h] [bp-4Ch]@49\n\n  ps = a1;\n  v54 = a3;\n  v56 = sub_41B1D0(a2);\n  if ( (56 * v56 & 0x8000000000000000LL) != 0LL || 56 * (unsigned __int128)v56 >> 64 != 0 )\n    return 0LL;\n  if ( 56 * v56 > 0xFAF )\n  {\n    LODWORD(v33) = sub_41B0D0();\n    v5 = v33;\n  }\n  else\n  {\n    v4 = alloca(56 * v56 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v58 = 0;\n  v60 = 0;\n  v59 = 0LL;\n  v7 = v5 + 48 * v56;\n  while ( 1 )\n  {\n    if ( !v58 )\n    {\n      v8 = *(_BYTE *)src;\n      if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)src >> 5) & 7)] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(_BYTE *)src;\n        v63 = 1;\n        v64 = v9;\n        v10 = v9;\n        v60 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit((const mbstate_t *)&v59) )\n        goto LABEL_115;\n      v58 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_4085C0((__int64)src, v13);\n    a2 = v14;\n    v16 = sub_40AB50((wchar_t *)&v64, v14, v15, (mbstate_t *)&v59);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v63 = 0;\n      v60 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v35 = strlen((const char *)src);\n    v63 = 0;\n    n = v35;\n    v11 = 0;\n    v60 = 1;\nLABEL_10:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v65 )\n    {\n      v34 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v34;\n      v11 = v63;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v64;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v60 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v64 )\n      goto LABEL_116;\n  }\n  v63 = 1;\n  if ( mbsinit((const mbstate_t *)&v59) )\n    v58 = 0;\n  v10 = v64;\n  v60 = 1;\n  if ( v64 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v56 < 2;\n  v20 = v56 == 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v57 = (mbstate_t *)2;\n  if ( !v19 && !v20 )\n  {\n    do\n    {\n      v21 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v22 = v5 + 48 * v17;\n        if ( v21 && *(_BYTE *)(v22 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v22 + 20) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v23 = *(_QWORD *)(v18 + 8);\n          if ( v23 == *(_QWORD *)(v22 + 8) )\n          {\n            a2 = *(char **)v22;\n            if ( !memcmp(*(const void **)v18, *(const void **)v22, v23) )\n            {\nLABEL_33:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v57) = (char *)v57 - ++v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v57) = v57;\nLABEL_34:\n      v57 = (mbstate_t *)((char *)v57 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v56 != v57 );\n  }\n  v66 = 0;\n  v24 = 0LL;\n  v68 = 0;\n  *v54 = 0LL;\n  v25 = (char *)ps;\n  ps = (mbstate_t *)&v74;\n  v73 = 0;\n  v67 = 0LL;\n  v74 = 0LL;\n  v75 = 0;\n  v57 = (mbstate_t *)&v67;\n  s = v25;\n  s2 = v25;\n  v26 = 0;\nLABEL_36:\n  if ( v26 )\n  {\n    if ( !v78 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v73 )\n      {\n        v8 = *(_BYTE *)s2;\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s2 >> 5) & 7)] >> v8) & 1 )\n        {\n          v77 = 1LL;\n          v30 = *(_BYTE *)s2;\n          v78 = 1;\n          v79 = v30;\n          v75 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_115;\n        v73 = 1;\n      }\n      v36 = __ctype_get_mb_cur_max();\n      v37 = (char *)s2;\n      v38 = sub_4085C0((__int64)s2, v36);\n      a2 = v37;\n      v39 = sub_40AB50((wchar_t *)&v79, v37, v38, (mbstate_t *)&v74);\n      v77 = v39;\n      if ( v39 == -1LL )\n      {\n        v77 = 1LL;\n        v78 = 0;\n        v75 = 1;\nLABEL_38:\n        v27 = v5 + 48 * v24;\n        goto LABEL_39;\n      }\n      if ( v39 == -2LL )\n      {\n        v52 = strlen((const char *)s2);\n        v78 = 0;\n        v77 = v52;\n        v75 = 1;\n        goto LABEL_38;\n      }\n      if ( !v39 )\n      {\n        v77 = 1LL;\n        if ( *(_BYTE *)s2 )\n          goto LABEL_114;\n        if ( v79 )\n          goto LABEL_116;\n      }\n      v78 = 1;\n      if ( mbsinit((const mbstate_t *)&v74) )\n        v73 = 0;\n      v75 = 1;\nLABEL_50:\n      v31 = v79;\n      if ( !v79 )\n        goto LABEL_55;\n      v27 = v5 + 48 * v24;\n      if ( *(_BYTE *)(v27 + 16) )\n      {\n        if ( *(_DWORD *)(v27 + 20) != v79 )\n        {\nLABEL_40:\n          if ( !v24 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v28 = *(_QWORD *)(v27 + 8);\n        if ( v28 != v77 )\n          goto LABEL_40;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v27, s2, v28) )\n        {\n          if ( !v24 )\n          {\nLABEL_41:\n            if ( v68 )\n            {\n              if ( v71 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v66 )\n            {\n              if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n              {\n                v70 = 1LL;\n                v29 = *s;\n                v71 = 1;\n                v72 = v29;\n                v68 = 1;\nLABEL_45:\n                if ( !v72 )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v70;\n                s2 = (char *)s2 + v77;\n                v68 = 0;\n                v75 = 0;\n                continue;\n              }\n              if ( mbsinit(v57) )\n              {\n                v66 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v48 = __ctype_get_mb_cur_max();\n            v49 = s;\n            v50 = sub_4085C0((__int64)s, v48);\n            a2 = v49;\n            v51 = sub_40AB50((wchar_t *)&v72, v49, v50, (mbstate_t *)&v67);\n            v70 = v51;\n            if ( v51 == -1LL )\n            {\n              v70 = 1LL;\n              v71 = 0;\n              goto LABEL_46;\n            }\n            if ( v51 == -2LL )\n            {\n              v53 = strlen(s);\n              v71 = 0;\n              v70 = v53;\n              goto LABEL_46;\n            }\n            if ( v51 )\n            {\nLABEL_105:\n              v71 = 1;\n              if ( mbsinit((const mbstate_t *)&v67) )\n                v66 = 0;\n              v68 = 1;\n              goto LABEL_45;\n            }\n            v70 = 1LL;\n            if ( !*s )\n            {\n              if ( !v72 )\n                goto LABEL_105;\nLABEL_116:\n              sub_4192F0();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v40 = *(_QWORD *)(v7 + 8 * v24);\n          v26 = v75;\n          v41 = v24 - v40;\n          if ( !v40 )\n            goto LABEL_36;\n          if ( !v68 )\n            goto LABEL_79;\n          if ( v71 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              while ( 2 )\n              {\n                v68 = 0;\n                s += v70;\n                if ( !--v40 )\n                {\n                  v26 = v75;\n                  v24 = v41;\n                  goto LABEL_36;\n                }\nLABEL_79:\n                if ( !v66 )\n                {\n                  v8 = (unsigned __int8)*s;\n                  if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> v8) & 1 )\n                  {\n                    v70 = 1LL;\n                    v42 = *s;\n                    v71 = 1;\n                    v72 = v42;\n                    v68 = 1;\nLABEL_82:\n                    a2 = (char *)v72;\n                    if ( !v72 )\n                      goto LABEL_118;\n                    continue;\n                  }\n                  if ( !mbsinit(v57) )\n                    goto LABEL_115;\n                  v66 = 1;\n                }\n                break;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = s;\n              v45 = sub_4085C0((__int64)s, v43);\n              a2 = v44;\n              v46 = sub_40AB50((wchar_t *)&v72, v44, v45, (mbstate_t *)&v67);\n              v70 = v46;\n              if ( v46 == -1LL )\n              {\n                v70 = 1LL;\n                v71 = 0;\n                continue;\n              }\n              break;\n            }\n            if ( v46 == -2LL )\n            {\n              v47 = strlen(s);\n              v71 = 0;\n              v70 = v47;\n              continue;\n            }\n            break;\n          }\n          if ( !v46 )\n          {\n            v70 = 1LL;\n            if ( *s )\n              goto LABEL_114;\n            if ( v72 )\n              __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n          }\n          v71 = 1;\n          if ( mbsinit((const mbstate_t *)&v67) )\n            v66 = 0;\n          v68 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v24;\n    s2 = (char *)s2 + v77;\n    v75 = 0;\n    if ( v56 != v24 )\n      continue;\n    break;\n  }\n  *v54 = s;\nLABEL_55:\n  sub_41B140(v5, a2, v31, v8, v10, v3);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x401ffdL", 
            "funcEndAddr": "0x402002L", 
            "funcName": "sub_419310"
        }, 
        {
            "decompiledFuncCode": "mbstate_t __fastcall sub_419CF0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13@1\n  mbstate_t *v3; // rbp@1\n  char v4; // r15@2\n  mbstate_t result; // rax@2\n  char v6; // cl@3\n  const char *v7; // r9@4\n  unsigned __int64 v8; // r12@4\n  unsigned __int64 v9; // rdx@4\n  unsigned __int64 v10; // r8@4\n  char v11; // al@4\n  const char *v12; // ST00_8@6\n  size_t v13; // rax@6\n  unsigned __int64 v14; // ST00_8@7\n  unsigned __int64 v15; // rax@7\n  unsigned __int64 v16; // rbx@10\n  mbstate_t *v17; // r14@10\n  char v18; // bp@12\n  wchar_t v19; // ecx@15\n  char v20; // cl@20\n  signed __int64 v21; // rdx@23\n  __int64 v22; // rdi@23\n  char *v23; // rdx@23\n  char v24; // si@24\n  char v25; // cl@26\n  unsigned __int64 v26; // r12@29\n  unsigned __int64 v27; // rbx@29\n  char v28; // r14@29\n  __int128 *v29; // r15@30\n  int v30; // eax@32\n  wchar_t v31; // ecx@39\n  __m128i v32; // xmm1@39\n  __m128i v33; // xmm0@39\n  __m128i v34; // xmm2@39\n  __m128i v35; // xmm3@39\n  unsigned int v36; // eax@39\n  wchar_t v37; // eax@44\n  __int32 v38; // eax@48\n  __int32 v39; // eax@49\n  bool v40; // al@51\n  signed __int64 v41; // rax@55\n  char *v42; // r15@55\n  signed __int64 v43; // rax@55\n  void *v44; // rax@55\n  size_t v45; // r15@66\n  signed __int64 v46; // rax@70\n  char *v47; // r15@70\n  signed __int64 v48; // rax@70\n  void *v49; // rax@70\n  signed __int64 v50; // rax@94\n  char *v51; // ST00_8@94\n  signed __int64 v52; // rax@94\n  size_t v53; // rax@94\n  void *v54; // rax@102\n  void *v55; // rax@103\n  unsigned __int64 v56; // r14@106\n  int v57; // eax@112\n  char v58; // dl@116\n  signed __int64 v59; // rax@119\n  char *v60; // r15@119\n  signed __int64 v61; // rax@119\n  size_t v62; // rax@119\n  size_t v63; // rax@128\n  size_t v64; // rax@129\n  int v65; // eax@132\n  signed __int64 v66; // rax@138\n  char *v67; // ST00_8@138\n  signed __int64 v68; // rax@138\n  void *v69; // rax@138\n  signed __int64 v70; // rax@148\n  char *v71; // r14@148\n  signed __int64 v72; // rax@148\n  size_t v73; // rax@148\n  signed __int64 v74; // rax@157\n  char *v75; // r12@157\n  signed __int64 v76; // rax@157\n  size_t v77; // rax@157\n  void *v78; // rax@165\n  size_t v79; // rax@166\n  size_t v80; // rax@168\n  unsigned __int64 v81; // [sp+8h] [bp-180h]@29\n  mbstate_t v82; // [sp+14h] [bp-174h]@15\n  char v83; // [sp+1Ch] [bp-16Ch]@15\n  char *v84; // [sp+20h] [bp-168h]@15\n  size_t v85; // [sp+28h] [bp-160h]@16\n  char v86; // [sp+30h] [bp-158h]@16\n  wchar_t v87; // [sp+34h] [bp-154h]@16\n  char v88; // [sp+50h] [bp-138h]@29\n  mbstate_t v89; // [sp+54h] [bp-134h]@29\n  char v90; // [sp+5Ch] [bp-12Ch]@29\n  char *s; // [sp+60h] [bp-128h]@29\n  size_t v92; // [sp+68h] [bp-120h]@109\n  char v93; // [sp+70h] [bp-118h]@108\n  int v94; // [sp+74h] [bp-114h]@112\n  __int128 v95; // [sp+90h] [bp-F8h]@29\n  size_t n[2]; // [sp+A0h] [bp-E8h]@29\n  __int128 v97; // [sp+B0h] [bp-D8h]@32\n  __int128 v98; // [sp+C0h] [bp-C8h]@39\n  mbstate_t v99[2]; // [sp+D0h] [bp-B8h]@39\n  void *s1[2]; // [sp+E0h] [bp-A8h]@39\n  __m128i v101; // [sp+F0h] [bp-98h]@39\n  __m128i v102; // [sp+100h] [bp-88h]@39\n  mbstate_t ps; // [sp+110h] [bp-78h]@7\n  char v104; // [sp+11Ch] [bp-6Ch]@39\n  void *s2; // [sp+120h] [bp-68h]@39\n  void *v106; // [sp+128h] [bp-60h]@40\n  char v107; // [sp+130h] [bp-58h]@40\n  wchar_t pwc; // [sp+134h] [bp-54h]@40\n\n  v2 = (__int64)a2;\n  v3 = a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v19 = *a2;\n    v84 = a2;\n    v83 = 0;\n    v82 = 0LL;\n    if ( ((unsigned int)dword_41E840[(unsigned __int64)((unsigned __int8)v19 >> 5)] >> v19) & 1 )\n    {\n      v85 = 1LL;\n      v87 = v19;\n      v86 = 1;\n      v83 = 1;\nLABEL_17:\n      if ( !v87 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v82) )\n      goto LABEL_173;\n    v74 = __ctype_get_mb_cur_max();\n    v75 = v84;\n    v76 = sub_4085C0((__int64)v84, v74);\n    v77 = sub_40AB50(&v87, v75, v76, &v82);\n    v85 = v77;\n    if ( v77 == -1LL )\n    {\n      v85 = 1LL;\n      v86 = 0;\n      v83 = 1;\n    }\n    else\n    {\n      if ( v77 != -2LL )\n      {\n        if ( !v77 )\n        {\n          v85 = 1LL;\n          if ( *v84 )\n            goto LABEL_174;\n          if ( v87 )\n            goto LABEL_162;\n        }\n        v86 = 1;\n        mbsinit(&v82);\n        v83 = 1;\n        goto LABEL_17;\n      }\n      v80 = strlen(v84);\n      v86 = 0;\n      v85 = v80;\n      v83 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v26 = 0LL;\n    v27 = 0LL;\n    v28 = 1;\n    v88 = 0;\n    v89 = 0LL;\n    v90 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v95) = 0;\n    *(_QWORD *)((char *)&v95 + 4) = 0LL;\n    BYTE12(v95) = 0;\n    v81 = 0LL;\n    while ( 1 )\n    {\n      v29 = &v95;\n      if ( !(_BYTE)v95 )\n      {\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)n[0] >> 5) & 7)] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v30 = *(_BYTE *)n[0];\n          LOBYTE(v97) = 1;\n          DWORD1(v97) = v30;\n          BYTE12(v95) = 1;\n          goto LABEL_33;\n        }\n        v29 = &v95;\n        if ( !mbsinit((const mbstate_t *)((char *)&v95 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v95) = 1;\n      }\n      v50 = __ctype_get_mb_cur_max();\n      v51 = (char *)n[0];\n      v52 = sub_4085C0(n[0], v50);\n      v53 = sub_40AB50((wchar_t *)v29 + 9, v51, v52, (mbstate_t *)((char *)v29 + 4));\n      n[1] = v53;\n      if ( v53 == -1LL )\n      {\n        n[1] = 1LL;\n        LOBYTE(v97) = 0;\n        BYTE12(v95) = 1;\n        goto LABEL_85;\n      }\n      if ( v53 == -2LL )\n      {\n        v64 = strlen((const char *)n[0]);\n        LOBYTE(v97) = 0;\n        n[1] = v64;\n        BYTE12(v95) = 1;\nLABEL_85:\n        if ( !((unsigned __int8)v28 & (v26 > 9)) )\n        {\n          ++v27;\n          goto LABEL_88;\n        }\n        if ( v27 < 5 * v26 )\n        {\n          ++v27;\n          v28 &= v26 > 9;\n          goto LABEL_88;\n        }\nLABEL_106:\n        v56 = v27 - v81;\n        if ( v27 == v81 )\n        {\n          if ( !v90 )\n            goto LABEL_130;\n          if ( !v93 )\n            goto LABEL_134;\nLABEL_133:\n          if ( v94 )\n            goto LABEL_134;\nLABEL_115:\n          v28 = sub_419310(a1, a2, (char **)&ps);\n          if ( v28 )\n            return ps;\n          v58 = v97;\nLABEL_135:\n          v81 = v27++;\n          if ( !v58 )\n            goto LABEL_88;\n          goto LABEL_37;\n        }\n        if ( !v90 )\n          goto LABEL_110;\n        if ( v93 )\n          goto LABEL_113;\n        while ( 2 )\n        {\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v90 = 0;\n              s += v92;\n              if ( !--v56 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v88 )\n              {\n                if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n                {\n                  v92 = 1LL;\n                  v57 = *s;\n                  v93 = 1;\n                  v94 = v57;\n                  v90 = 1;\nLABEL_113:\n                  if ( !v94 )\n                  {\n                    if ( v90 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v88 )\n                    {\n                      if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n                      {\n                        v92 = 1LL;\n                        v65 = *s;\n                        v93 = 1;\n                        v94 = v65;\n                        v90 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v89) )\n                        goto LABEL_173;\n                      v88 = 1;\n                    }\n                    v70 = __ctype_get_mb_cur_max();\n                    v71 = s;\n                    v72 = sub_4085C0((__int64)s, v70);\n                    v73 = sub_40AB50(&v94, v71, v72, &v89);\n                    v92 = v73;\n                    if ( v73 == -1LL )\n                    {\n                      v92 = 1LL;\n                      v93 = 0;\n                      v90 = 1;\n                    }\n                    else\n                    {\n                      if ( v73 != -2LL )\n                      {\n                        if ( !v73 )\n                        {\n                          v92 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v94 )\n                            goto LABEL_162;\n                        }\n                        v93 = 1;\n                        if ( mbsinit(&v89) )\n                          v88 = 0;\n                        v90 = 1;\n                        goto LABEL_133;\n                      }\n                      v79 = strlen(s);\n                      v93 = 0;\n                      v92 = v79;\n                      v90 = 1;\n                    }\nLABEL_134:\n                    v58 = v97;\n                    v28 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v89) )\n                  goto LABEL_173;\n                v88 = 1;\n              }\n              break;\n            }\n            v59 = __ctype_get_mb_cur_max();\n            v60 = s;\n            v61 = sub_4085C0((__int64)s, v59);\n            v62 = sub_40AB50(&v94, v60, v61, &v89);\n            v92 = v62;\n            if ( v62 == -1LL )\n            {\n              v92 = 1LL;\n              v93 = 0;\n              continue;\n            }\n            break;\n          }\n          if ( v62 == -2LL )\n          {\n            v63 = strlen(s);\n            v93 = 0;\n            v92 = v63;\n            continue;\n          }\n          break;\n        }\n        if ( !v62 )\n        {\n          v92 = 1LL;\n          if ( *s )\n            goto LABEL_174;\n          if ( v94 )\n            goto LABEL_162;\n        }\n        v93 = 1;\n        if ( mbsinit(&v89) )\n          v88 = 0;\n        v90 = 1;\n        goto LABEL_113;\n      }\n      if ( !v53 )\n      {\n        n[1] = 1LL;\n        if ( *(_BYTE *)n[0] )\n          goto LABEL_174;\n        if ( DWORD1(v97) )\n          goto LABEL_162;\n      }\n      LOBYTE(v97) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)v29 + 4)) )\n        LOBYTE(v95) = 0;\n      BYTE12(v95) = 1;\nLABEL_33:\n      if ( !DWORD1(v97) )\n        return 0LL;\n      if ( (unsigned __int8)v28 & (v26 > 9) )\n      {\n        if ( v27 >= 5 * v26 )\n          goto LABEL_106;\n        ++v27;\n        v28 &= v26 > 9;\n      }\n      else\n      {\n        ++v27;\n      }\nLABEL_37:\n      if ( v86 )\n      {\n        if ( DWORD1(v97) == v87 )\n          goto LABEL_39;\nLABEL_66:\n        v45 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v45 = n[1];\n      if ( n[1] == v85 && !memcmp((const void *)n[0], v84, n[1]) )\n      {\nLABEL_39:\n        v31 = *a2;\n        v32 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v33 = _mm_load_si128((const __m128i *)&v95);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v32;\n        v34 = _mm_load_si128((const __m128i *)&v97);\n        s1[0] = (void *)(v32.m128i_i64[1] + v32.m128i_i64[0]);\n        v35 = _mm_load_si128((const __m128i *)&v98);\n        *(__m128i *)&v99[0].__count = v33;\n        v101 = v34;\n        v36 = dword_41E840[(unsigned __int64)((unsigned __int8)v31 >> 5)];\n        v102 = v35;\n        v99[1].__wchb[0] = 0;\n        v104 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v36 >> v31) & 1 )\n        {\n          v106 = (void *)1;\n          pwc = v31;\n          v107 = 1;\n          v104 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v66 = __ctype_get_mb_cur_max();\n          v67 = (char *)s2;\n          v68 = sub_4085C0((__int64)s2, v66);\n          v69 = (void *)sub_40AB50(&pwc, v67, v68, (mbstate_t *)((char *)&ps + 4));\n          v106 = v69;\n          if ( v69 == (void *)-1 )\n          {\n            v106 = (void *)1;\n            v107 = 0;\n          }\n          else if ( v69 == (void *)-2 )\n          {\n            v78 = (void *)strlen((const char *)s2);\n            v107 = 0;\n            v106 = v78;\n          }\n          else\n          {\n            if ( !v69 )\n            {\n              v106 = (void *)1;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc )\n                  goto LABEL_143;\nLABEL_162:\n                sub_4192F0();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v107 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v104 = 1;\nLABEL_41:\n            if ( !pwc )\n              abort();\n          }\n          v104 = 0;\n          ++v27;\n          s2 = (char *)s2 + (_QWORD)v106;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v41 = __ctype_get_mb_cur_max();\n              v42 = (char *)s2;\n              v43 = sub_4085C0((__int64)s2, v41);\n              v44 = (void *)sub_40AB50(&pwc, v42, v43, (mbstate_t *)((char *)&ps + 4));\n              v106 = v44;\n              if ( v44 == (void *)-1 )\n              {\n                v106 = (void *)1;\n                v107 = 0;\n                v104 = 1;\n              }\n              else if ( v44 == (void *)-2 )\n              {\n                v54 = (void *)strlen((const char *)s2);\n                v107 = 0;\n                v106 = v54;\n                v104 = 1;\n              }\n              else\n              {\n                if ( !v44 )\n                {\n                  v106 = (void *)1;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( pwc )\n                    goto LABEL_162;\n                }\n                v107 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v104 = 1;\n                if ( !pwc )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s2 >> 5) & 7)] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  break;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v106 = (void *)1;\n              v37 = *(_BYTE *)s2;\n              v107 = 1;\n              pwc = v37;\n              v104 = 1;\n              if ( !v37 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v99[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v99[0].__count) )\n              {\n                if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s1[0] >> 5) & 7)] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v38 = *(_BYTE *)s1[0];\n                  v101.m128i_i8[0] = 1;\n                  v101.m128i_i32[1] = v38;\n                  v99[1].__wchb[0] = 1;\nLABEL_49:\n                  v39 = v101.m128i_i32[1];\n                  if ( !v101.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v107 )\n                  {\n                    v40 = pwc != v39;\nLABEL_52:\n                    if ( v40 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned int)s1[1];\n                    ++v27;\n                    s2 = (char *)s2 + (_QWORD)v106;\n                    v99[1].__wchb[0] = 0;\n                    v104 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != v106 )\n                    goto LABEL_66;\n                  v40 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v99 + 4)) )\n                  break;\n                LOBYTE(v99[0].__count) = 1;\n              }\n              v46 = __ctype_get_mb_cur_max();\n              v47 = (char *)s1[0];\n              v48 = sub_4085C0((__int64)s1[0], v46);\n              v49 = (void *)sub_40AB50((wchar_t *)&v101.m128i_i32[1], v47, v48, (mbstate_t *)((char *)v99 + 4));\n              s1[1] = v49;\n              if ( v49 == (void *)-1 )\n              {\n                s1[1] = (void *)1;\n                v101.m128i_i8[0] = 0;\n                v99[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v49 != (void *)-2 )\n                {\n                  if ( !v49 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v101.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v101.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v99 + 4)) )\n                    LOBYTE(v99[0].__count) = 0;\n                  v39 = v101.m128i_i32[1];\n                  v99[1].__wchb[0] = 1;\n                  if ( !v101.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v55 = (void *)strlen((const char *)s1[0]);\n                v101.m128i_i8[0] = 0;\n                s1[1] = v55;\n                v99[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v101.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v45;\n      ++v26;\n      BYTE12(v95) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v16 = v9 + 1;\n    v17 = (mbstate_t *)((char *)v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !BYTE1(v3->__count) )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v20 = *(_BYTE *)(v2 + 1);\n    if ( !v20 )\n      return (mbstate_t)v3;\n    if ( !LOBYTE(v17->__count) )\n      return 0LL;\n    v16 = v9 + 2;\n    if ( v20 == LOBYTE(v17->__count) )\n      break;\nLABEL_12:\n    v18 = v11 & (v8 > 9);\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v16 < 5 * v8 || v7 && (v12 = v7, v13 = strnlen(v7, v16 - v10), v10 = v16, v7 = &v12[v13], v12[v13]) )\n      {\n        v11 = v18;\n      }\n      else\n      {\n        v14 = v10;\n        v15 = strlen((const char *)v2);\n        v11 = sub_419160(v17, v2, v15, &ps);\n        v10 = v14;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = v17->__count;\n    v3 = v17;\n    v9 = v16;\n  }\n  v21 = -(signed __int64)v9;\n  v22 = v2 + v21;\n  v23 = (char *)v3 + v21;\n  while ( 1 )\n  {\n    v25 = *(_BYTE *)(v22 + v16);\n    if ( !v25 )\n      return (mbstate_t)v3;\n    v24 = v23[v16];\n    if ( !v24 )\n      return 0LL;\n    ++v16;\n    if ( v25 != v24 )\n      goto LABEL_12;\n  }\n}\n\nmbstate_t __fastcall sub_419CF0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13@1\n  mbstate_t *v3; // rbp@1\n  char v4; // r15@2\n  mbstate_t result; // rax@2\n  char v6; // cl@3\n  const char *v7; // r9@4\n  unsigned __int64 v8; // r12@4\n  unsigned __int64 v9; // rdx@4\n  unsigned __int64 v10; // r8@4\n  char v11; // al@4\n  const char *v12; // ST00_8@6\n  size_t v13; // rax@6\n  unsigned __int64 v14; // ST00_8@7\n  unsigned __int64 v15; // rax@7\n  unsigned __int64 v16; // rbx@10\n  mbstate_t *v17; // r14@10\n  char v18; // bp@12\n  wchar_t v19; // ecx@15\n  char v20; // cl@20\n  signed __int64 v21; // rdx@23\n  __int64 v22; // rdi@23\n  char *v23; // rdx@23\n  char v24; // si@24\n  char v25; // cl@26\n  unsigned __int64 v26; // r12@29\n  unsigned __int64 v27; // rbx@29\n  char v28; // r14@29\n  __int128 *v29; // r15@30\n  int v30; // eax@32\n  wchar_t v31; // ecx@39\n  __m128i v32; // xmm1@39\n  __m128i v33; // xmm0@39\n  __m128i v34; // xmm2@39\n  __m128i v35; // xmm3@39\n  unsigned int v36; // eax@39\n  wchar_t v37; // eax@44\n  __int32 v38; // eax@48\n  __int32 v39; // eax@49\n  bool v40; // al@51\n  signed __int64 v41; // rax@55\n  char *v42; // r15@55\n  signed __int64 v43; // rax@55\n  void *v44; // rax@55\n  size_t v45; // r15@66\n  signed __int64 v46; // rax@70\n  char *v47; // r15@70\n  signed __int64 v48; // rax@70\n  void *v49; // rax@70\n  signed __int64 v50; // rax@94\n  char *v51; // ST00_8@94\n  signed __int64 v52; // rax@94\n  size_t v53; // rax@94\n  void *v54; // rax@102\n  void *v55; // rax@103\n  unsigned __int64 v56; // r14@106\n  int v57; // eax@112\n  char v58; // dl@116\n  signed __int64 v59; // rax@119\n  char *v60; // r15@119\n  signed __int64 v61; // rax@119\n  size_t v62; // rax@119\n  size_t v63; // rax@128\n  size_t v64; // rax@129\n  int v65; // eax@132\n  signed __int64 v66; // rax@138\n  char *v67; // ST00_8@138\n  signed __int64 v68; // rax@138\n  void *v69; // rax@138\n  signed __int64 v70; // rax@148\n  char *v71; // r14@148\n  signed __int64 v72; // rax@148\n  size_t v73; // rax@148\n  signed __int64 v74; // rax@157\n  char *v75; // r12@157\n  signed __int64 v76; // rax@157\n  size_t v77; // rax@157\n  void *v78; // rax@165\n  size_t v79; // rax@166\n  size_t v80; // rax@168\n  unsigned __int64 v81; // [sp+8h] [bp-180h]@29\n  mbstate_t v82; // [sp+14h] [bp-174h]@15\n  char v83; // [sp+1Ch] [bp-16Ch]@15\n  char *v84; // [sp+20h] [bp-168h]@15\n  size_t v85; // [sp+28h] [bp-160h]@16\n  char v86; // [sp+30h] [bp-158h]@16\n  wchar_t v87; // [sp+34h] [bp-154h]@16\n  char v88; // [sp+50h] [bp-138h]@29\n  mbstate_t v89; // [sp+54h] [bp-134h]@29\n  char v90; // [sp+5Ch] [bp-12Ch]@29\n  char *s; // [sp+60h] [bp-128h]@29\n  size_t v92; // [sp+68h] [bp-120h]@109\n  char v93; // [sp+70h] [bp-118h]@108\n  int v94; // [sp+74h] [bp-114h]@112\n  __int128 v95; // [sp+90h] [bp-F8h]@29\n  size_t n[2]; // [sp+A0h] [bp-E8h]@29\n  __int128 v97; // [sp+B0h] [bp-D8h]@32\n  __int128 v98; // [sp+C0h] [bp-C8h]@39\n  mbstate_t v99[2]; // [sp+D0h] [bp-B8h]@39\n  void *s1[2]; // [sp+E0h] [bp-A8h]@39\n  __m128i v101; // [sp+F0h] [bp-98h]@39\n  __m128i v102; // [sp+100h] [bp-88h]@39\n  mbstate_t ps; // [sp+110h] [bp-78h]@7\n  char v104; // [sp+11Ch] [bp-6Ch]@39\n  void *s2; // [sp+120h] [bp-68h]@39\n  void *v106; // [sp+128h] [bp-60h]@40\n  char v107; // [sp+130h] [bp-58h]@40\n  wchar_t pwc; // [sp+134h] [bp-54h]@40\n\n  v2 = (__int64)a2;\n  v3 = a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v19 = *a2;\n    v84 = a2;\n    v83 = 0;\n    v82 = 0LL;\n    if ( ((unsigned int)dword_41E840[(unsigned __int64)((unsigned __int8)v19 >> 5)] >> v19) & 1 )\n    {\n      v85 = 1LL;\n      v87 = v19;\n      v86 = 1;\n      v83 = 1;\nLABEL_17:\n      if ( !v87 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v82) )\n      goto LABEL_173;\n    v74 = __ctype_get_mb_cur_max();\n    v75 = v84;\n    v76 = sub_4085C0((__int64)v84, v74);\n    v77 = sub_40AB50(&v87, v75, v76, &v82);\n    v85 = v77;\n    if ( v77 == -1LL )\n    {\n      v85 = 1LL;\n      v86 = 0;\n      v83 = 1;\n    }\n    else\n    {\n      if ( v77 != -2LL )\n      {\n        if ( !v77 )\n        {\n          v85 = 1LL;\n          if ( *v84 )\n            goto LABEL_174;\n          if ( v87 )\n            goto LABEL_162;\n        }\n        v86 = 1;\n        mbsinit(&v82);\n        v83 = 1;\n        goto LABEL_17;\n      }\n      v80 = strlen(v84);\n      v86 = 0;\n      v85 = v80;\n      v83 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v26 = 0LL;\n    v27 = 0LL;\n    v28 = 1;\n    v88 = 0;\n    v89 = 0LL;\n    v90 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v95) = 0;\n    *(_QWORD *)((char *)&v95 + 4) = 0LL;\n    BYTE12(v95) = 0;\n    v81 = 0LL;\n    while ( 1 )\n    {\n      v29 = &v95;\n      if ( !(_BYTE)v95 )\n      {\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)n[0] >> 5) & 7)] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v30 = *(_BYTE *)n[0];\n          LOBYTE(v97) = 1;\n          DWORD1(v97) = v30;\n          BYTE12(v95) = 1;\n          goto LABEL_33;\n        }\n        v29 = &v95;\n        if ( !mbsinit((const mbstate_t *)((char *)&v95 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v95) = 1;\n      }\n      v50 = __ctype_get_mb_cur_max();\n      v51 = (char *)n[0];\n      v52 = sub_4085C0(n[0], v50);\n      v53 = sub_40AB50((wchar_t *)v29 + 9, v51, v52, (mbstate_t *)((char *)v29 + 4));\n      n[1] = v53;\n      if ( v53 == -1LL )\n      {\n        n[1] = 1LL;\n        LOBYTE(v97) = 0;\n        BYTE12(v95) = 1;\n        goto LABEL_85;\n      }\n      if ( v53 == -2LL )\n      {\n        v64 = strlen((const char *)n[0]);\n        LOBYTE(v97) = 0;\n        n[1] = v64;\n        BYTE12(v95) = 1;\nLABEL_85:\n        if ( !((unsigned __int8)v28 & (v26 > 9)) )\n        {\n          ++v27;\n          goto LABEL_88;\n        }\n        if ( v27 < 5 * v26 )\n        {\n          ++v27;\n          v28 &= v26 > 9;\n          goto LABEL_88;\n        }\nLABEL_106:\n        v56 = v27 - v81;\n        if ( v27 == v81 )\n        {\n          if ( !v90 )\n            goto LABEL_130;\n          if ( !v93 )\n            goto LABEL_134;\nLABEL_133:\n          if ( v94 )\n            goto LABEL_134;\nLABEL_115:\n          v28 = sub_419310(a1, a2, (char **)&ps);\n          if ( v28 )\n            return ps;\n          v58 = v97;\nLABEL_135:\n          v81 = v27++;\n          if ( !v58 )\n            goto LABEL_88;\n          goto LABEL_37;\n        }\n        if ( !v90 )\n          goto LABEL_110;\n        if ( v93 )\n          goto LABEL_113;\n        while ( 2 )\n        {\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v90 = 0;\n              s += v92;\n              if ( !--v56 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v88 )\n              {\n                if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n                {\n                  v92 = 1LL;\n                  v57 = *s;\n                  v93 = 1;\n                  v94 = v57;\n                  v90 = 1;\nLABEL_113:\n                  if ( !v94 )\n                  {\n                    if ( v90 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v88 )\n                    {\n                      if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n                      {\n                        v92 = 1LL;\n                        v65 = *s;\n                        v93 = 1;\n                        v94 = v65;\n                        v90 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v89) )\n                        goto LABEL_173;\n                      v88 = 1;\n                    }\n                    v70 = __ctype_get_mb_cur_max();\n                    v71 = s;\n                    v72 = sub_4085C0((__int64)s, v70);\n                    v73 = sub_40AB50(&v94, v71, v72, &v89);\n                    v92 = v73;\n                    if ( v73 == -1LL )\n                    {\n                      v92 = 1LL;\n                      v93 = 0;\n                      v90 = 1;\n                    }\n                    else\n                    {\n                      if ( v73 != -2LL )\n                      {\n                        if ( !v73 )\n                        {\n                          v92 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v94 )\n                            goto LABEL_162;\n                        }\n                        v93 = 1;\n                        if ( mbsinit(&v89) )\n                          v88 = 0;\n                        v90 = 1;\n                        goto LABEL_133;\n                      }\n                      v79 = strlen(s);\n                      v93 = 0;\n                      v92 = v79;\n                      v90 = 1;\n                    }\nLABEL_134:\n                    v58 = v97;\n                    v28 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v89) )\n                  goto LABEL_173;\n                v88 = 1;\n              }\n              break;\n            }\n            v59 = __ctype_get_mb_cur_max();\n            v60 = s;\n            v61 = sub_4085C0((__int64)s, v59);\n            v62 = sub_40AB50(&v94, v60, v61, &v89);\n            v92 = v62;\n            if ( v62 == -1LL )\n            {\n              v92 = 1LL;\n              v93 = 0;\n              continue;\n            }\n            break;\n          }\n          if ( v62 == -2LL )\n          {\n            v63 = strlen(s);\n            v93 = 0;\n            v92 = v63;\n            continue;\n          }\n          break;\n        }\n        if ( !v62 )\n        {\n          v92 = 1LL;\n          if ( *s )\n            goto LABEL_174;\n          if ( v94 )\n            goto LABEL_162;\n        }\n        v93 = 1;\n        if ( mbsinit(&v89) )\n          v88 = 0;\n        v90 = 1;\n        goto LABEL_113;\n      }\n      if ( !v53 )\n      {\n        n[1] = 1LL;\n        if ( *(_BYTE *)n[0] )\n          goto LABEL_174;\n        if ( DWORD1(v97) )\n          goto LABEL_162;\n      }\n      LOBYTE(v97) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)v29 + 4)) )\n        LOBYTE(v95) = 0;\n      BYTE12(v95) = 1;\nLABEL_33:\n      if ( !DWORD1(v97) )\n        return 0LL;\n      if ( (unsigned __int8)v28 & (v26 > 9) )\n      {\n        if ( v27 >= 5 * v26 )\n          goto LABEL_106;\n        ++v27;\n        v28 &= v26 > 9;\n      }\n      else\n      {\n        ++v27;\n      }\nLABEL_37:\n      if ( v86 )\n      {\n        if ( DWORD1(v97) == v87 )\n          goto LABEL_39;\nLABEL_66:\n        v45 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v45 = n[1];\n      if ( n[1] == v85 && !memcmp((const void *)n[0], v84, n[1]) )\n      {\nLABEL_39:\n        v31 = *a2;\n        v32 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v33 = _mm_load_si128((const __m128i *)&v95);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v32;\n        v34 = _mm_load_si128((const __m128i *)&v97);\n        s1[0] = (void *)(v32.m128i_i64[1] + v32.m128i_i64[0]);\n        v35 = _mm_load_si128((const __m128i *)&v98);\n        *(__m128i *)&v99[0].__count = v33;\n        v101 = v34;\n        v36 = dword_41E840[(unsigned __int64)((unsigned __int8)v31 >> 5)];\n        v102 = v35;\n        v99[1].__wchb[0] = 0;\n        v104 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v36 >> v31) & 1 )\n        {\n          v106 = (void *)1;\n          pwc = v31;\n          v107 = 1;\n          v104 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v66 = __ctype_get_mb_cur_max();\n          v67 = (char *)s2;\n          v68 = sub_4085C0((__int64)s2, v66);\n          v69 = (void *)sub_40AB50(&pwc, v67, v68, (mbstate_t *)((char *)&ps + 4));\n          v106 = v69;\n          if ( v69 == (void *)-1 )\n          {\n            v106 = (void *)1;\n            v107 = 0;\n          }\n          else if ( v69 == (void *)-2 )\n          {\n            v78 = (void *)strlen((const char *)s2);\n            v107 = 0;\n            v106 = v78;\n          }\n          else\n          {\n            if ( !v69 )\n            {\n              v106 = (void *)1;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc )\n                  goto LABEL_143;\nLABEL_162:\n                sub_4192F0();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v107 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v104 = 1;\nLABEL_41:\n            if ( !pwc )\n              abort();\n          }\n          v104 = 0;\n          ++v27;\n          s2 = (char *)s2 + (_QWORD)v106;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v41 = __ctype_get_mb_cur_max();\n              v42 = (char *)s2;\n              v43 = sub_4085C0((__int64)s2, v41);\n              v44 = (void *)sub_40AB50(&pwc, v42, v43, (mbstate_t *)((char *)&ps + 4));\n              v106 = v44;\n              if ( v44 == (void *)-1 )\n              {\n                v106 = (void *)1;\n                v107 = 0;\n                v104 = 1;\n              }\n              else if ( v44 == (void *)-2 )\n              {\n                v54 = (void *)strlen((const char *)s2);\n                v107 = 0;\n                v106 = v54;\n                v104 = 1;\n              }\n              else\n              {\n                if ( !v44 )\n                {\n                  v106 = (void *)1;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( pwc )\n                    goto LABEL_162;\n                }\n                v107 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v104 = 1;\n                if ( !pwc )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s2 >> 5) & 7)] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  break;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v106 = (void *)1;\n              v37 = *(_BYTE *)s2;\n              v107 = 1;\n              pwc = v37;\n              v104 = 1;\n              if ( !v37 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v99[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v99[0].__count) )\n              {\n                if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s1[0] >> 5) & 7)] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v38 = *(_BYTE *)s1[0];\n                  v101.m128i_i8[0] = 1;\n                  v101.m128i_i32[1] = v38;\n                  v99[1].__wchb[0] = 1;\nLABEL_49:\n                  v39 = v101.m128i_i32[1];\n                  if ( !v101.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v107 )\n                  {\n                    v40 = pwc != v39;\nLABEL_52:\n                    if ( v40 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned int)s1[1];\n                    ++v27;\n                    s2 = (char *)s2 + (_QWORD)v106;\n                    v99[1].__wchb[0] = 0;\n                    v104 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != v106 )\n                    goto LABEL_66;\n                  v40 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v99 + 4)) )\n                  break;\n                LOBYTE(v99[0].__count) = 1;\n              }\n              v46 = __ctype_get_mb_cur_max();\n              v47 = (char *)s1[0];\n              v48 = sub_4085C0((__int64)s1[0], v46);\n              v49 = (void *)sub_40AB50((wchar_t *)&v101.m128i_i32[1], v47, v48, (mbstate_t *)((char *)v99 + 4));\n              s1[1] = v49;\n              if ( v49 == (void *)-1 )\n              {\n                s1[1] = (void *)1;\n                v101.m128i_i8[0] = 0;\n                v99[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v49 != (void *)-2 )\n                {\n                  if ( !v49 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v101.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v101.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v99 + 4)) )\n                    LOBYTE(v99[0].__count) = 0;\n                  v39 = v101.m128i_i32[1];\n                  v99[1].__wchb[0] = 1;\n                  if ( !v101.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v55 = (void *)strlen((const char *)s1[0]);\n                v101.m128i_i8[0] = 0;\n                s1[1] = v55;\n                v99[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v101.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v45;\n      ++v26;\n      BYTE12(v95) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v16 = v9 + 1;\n    v17 = (mbstate_t *)((char *)v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !BYTE1(v3->__count) )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v20 = *(_BYTE *)(v2 + 1);\n    if ( !v20 )\n      return (mbstate_t)v3;\n    if ( !LOBYTE(v17->__count) )\n      return 0LL;\n    v16 = v9 + 2;\n    if ( v20 == LOBYTE(v17->__count) )\n      break;\nLABEL_12:\n    v18 = v11 & (v8 > 9);\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v16 < 5 * v8 || v7 && (v12 = v7, v13 = strnlen(v7, v16 - v10), v10 = v16, v7 = &v12[v13], v12[v13]) )\n      {\n        v11 = v18;\n      }\n      else\n      {\n        v14 = v10;\n        v15 = strlen((const char *)v2);\n        v11 = sub_419160(v17, v2, v15, &ps);\n        v10 = v14;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = v17->__count;\n    v3 = v17;\n    v9 = v16;\n  }\n  v21 = -(signed __int64)v9;\n  v22 = v2 + v21;\n  v23 = (char *)v3 + v21;\n  while ( 1 )\n  {\n    v25 = *(_BYTE *)(v22 + v16);\n    if ( !v25 )\n      return (mbstate_t)v3;\n    v24 = v23[v16];\n    if ( !v24 )\n      return 0LL;\n    ++v16;\n    if ( v25 != v24 )\n      goto LABEL_12;\n  }\n}\n", 
            "funcStartAddr": "0x402002L", 
            "funcEndAddr": "0x402007L", 
            "funcName": "sub_419CF0"
        }, 
        {
            "decompiledFuncCode": "mbstate_t __fastcall sub_419CF0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13@1\n  mbstate_t *v3; // rbp@1\n  char v4; // r15@2\n  mbstate_t result; // rax@2\n  char v6; // cl@3\n  const char *v7; // r9@4\n  unsigned __int64 v8; // r12@4\n  unsigned __int64 v9; // rdx@4\n  unsigned __int64 v10; // r8@4\n  char v11; // al@4\n  const char *v12; // ST00_8@6\n  size_t v13; // rax@6\n  unsigned __int64 v14; // ST00_8@7\n  unsigned __int64 v15; // rax@7\n  unsigned __int64 v16; // rbx@10\n  mbstate_t *v17; // r14@10\n  char v18; // bp@12\n  wchar_t v19; // ecx@15\n  char v20; // cl@20\n  signed __int64 v21; // rdx@23\n  __int64 v22; // rdi@23\n  char *v23; // rdx@23\n  char v24; // si@24\n  char v25; // cl@26\n  unsigned __int64 v26; // r12@29\n  unsigned __int64 v27; // rbx@29\n  char v28; // r14@29\n  __int128 *v29; // r15@30\n  int v30; // eax@32\n  wchar_t v31; // ecx@39\n  __m128i v32; // xmm1@39\n  __m128i v33; // xmm0@39\n  __m128i v34; // xmm2@39\n  __m128i v35; // xmm3@39\n  unsigned int v36; // eax@39\n  wchar_t v37; // eax@44\n  __int32 v38; // eax@48\n  __int32 v39; // eax@49\n  bool v40; // al@51\n  signed __int64 v41; // rax@55\n  char *v42; // r15@55\n  signed __int64 v43; // rax@55\n  void *v44; // rax@55\n  size_t v45; // r15@66\n  signed __int64 v46; // rax@70\n  char *v47; // r15@70\n  signed __int64 v48; // rax@70\n  void *v49; // rax@70\n  signed __int64 v50; // rax@94\n  char *v51; // ST00_8@94\n  signed __int64 v52; // rax@94\n  size_t v53; // rax@94\n  void *v54; // rax@102\n  void *v55; // rax@103\n  unsigned __int64 v56; // r14@106\n  int v57; // eax@112\n  char v58; // dl@116\n  signed __int64 v59; // rax@119\n  char *v60; // r15@119\n  signed __int64 v61; // rax@119\n  size_t v62; // rax@119\n  size_t v63; // rax@128\n  size_t v64; // rax@129\n  int v65; // eax@132\n  signed __int64 v66; // rax@138\n  char *v67; // ST00_8@138\n  signed __int64 v68; // rax@138\n  void *v69; // rax@138\n  signed __int64 v70; // rax@148\n  char *v71; // r14@148\n  signed __int64 v72; // rax@148\n  size_t v73; // rax@148\n  signed __int64 v74; // rax@157\n  char *v75; // r12@157\n  signed __int64 v76; // rax@157\n  size_t v77; // rax@157\n  void *v78; // rax@165\n  size_t v79; // rax@166\n  size_t v80; // rax@168\n  unsigned __int64 v81; // [sp+8h] [bp-180h]@29\n  mbstate_t v82; // [sp+14h] [bp-174h]@15\n  char v83; // [sp+1Ch] [bp-16Ch]@15\n  char *v84; // [sp+20h] [bp-168h]@15\n  size_t v85; // [sp+28h] [bp-160h]@16\n  char v86; // [sp+30h] [bp-158h]@16\n  wchar_t v87; // [sp+34h] [bp-154h]@16\n  char v88; // [sp+50h] [bp-138h]@29\n  mbstate_t v89; // [sp+54h] [bp-134h]@29\n  char v90; // [sp+5Ch] [bp-12Ch]@29\n  char *s; // [sp+60h] [bp-128h]@29\n  size_t v92; // [sp+68h] [bp-120h]@109\n  char v93; // [sp+70h] [bp-118h]@108\n  int v94; // [sp+74h] [bp-114h]@112\n  __int128 v95; // [sp+90h] [bp-F8h]@29\n  size_t n[2]; // [sp+A0h] [bp-E8h]@29\n  __int128 v97; // [sp+B0h] [bp-D8h]@32\n  __int128 v98; // [sp+C0h] [bp-C8h]@39\n  mbstate_t v99[2]; // [sp+D0h] [bp-B8h]@39\n  void *s1[2]; // [sp+E0h] [bp-A8h]@39\n  __m128i v101; // [sp+F0h] [bp-98h]@39\n  __m128i v102; // [sp+100h] [bp-88h]@39\n  mbstate_t ps; // [sp+110h] [bp-78h]@7\n  char v104; // [sp+11Ch] [bp-6Ch]@39\n  void *s2; // [sp+120h] [bp-68h]@39\n  void *v106; // [sp+128h] [bp-60h]@40\n  char v107; // [sp+130h] [bp-58h]@40\n  wchar_t pwc; // [sp+134h] [bp-54h]@40\n\n  v2 = (__int64)a2;\n  v3 = a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v19 = *a2;\n    v84 = a2;\n    v83 = 0;\n    v82 = 0LL;\n    if ( ((unsigned int)dword_41E840[(unsigned __int64)((unsigned __int8)v19 >> 5)] >> v19) & 1 )\n    {\n      v85 = 1LL;\n      v87 = v19;\n      v86 = 1;\n      v83 = 1;\nLABEL_17:\n      if ( !v87 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v82) )\n      goto LABEL_173;\n    v74 = __ctype_get_mb_cur_max();\n    v75 = v84;\n    v76 = sub_4085C0((__int64)v84, v74);\n    v77 = sub_40AB50(&v87, v75, v76, &v82);\n    v85 = v77;\n    if ( v77 == -1LL )\n    {\n      v85 = 1LL;\n      v86 = 0;\n      v83 = 1;\n    }\n    else\n    {\n      if ( v77 != -2LL )\n      {\n        if ( !v77 )\n        {\n          v85 = 1LL;\n          if ( *v84 )\n            goto LABEL_174;\n          if ( v87 )\n            goto LABEL_162;\n        }\n        v86 = 1;\n        mbsinit(&v82);\n        v83 = 1;\n        goto LABEL_17;\n      }\n      v80 = strlen(v84);\n      v86 = 0;\n      v85 = v80;\n      v83 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v26 = 0LL;\n    v27 = 0LL;\n    v28 = 1;\n    v88 = 0;\n    v89 = 0LL;\n    v90 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v95) = 0;\n    *(_QWORD *)((char *)&v95 + 4) = 0LL;\n    BYTE12(v95) = 0;\n    v81 = 0LL;\n    while ( 1 )\n    {\n      v29 = &v95;\n      if ( !(_BYTE)v95 )\n      {\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)n[0] >> 5) & 7)] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v30 = *(_BYTE *)n[0];\n          LOBYTE(v97) = 1;\n          DWORD1(v97) = v30;\n          BYTE12(v95) = 1;\n          goto LABEL_33;\n        }\n        v29 = &v95;\n        if ( !mbsinit((const mbstate_t *)((char *)&v95 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v95) = 1;\n      }\n      v50 = __ctype_get_mb_cur_max();\n      v51 = (char *)n[0];\n      v52 = sub_4085C0(n[0], v50);\n      v53 = sub_40AB50((wchar_t *)v29 + 9, v51, v52, (mbstate_t *)((char *)v29 + 4));\n      n[1] = v53;\n      if ( v53 == -1LL )\n      {\n        n[1] = 1LL;\n        LOBYTE(v97) = 0;\n        BYTE12(v95) = 1;\n        goto LABEL_85;\n      }\n      if ( v53 == -2LL )\n      {\n        v64 = strlen((const char *)n[0]);\n        LOBYTE(v97) = 0;\n        n[1] = v64;\n        BYTE12(v95) = 1;\nLABEL_85:\n        if ( !((unsigned __int8)v28 & (v26 > 9)) )\n        {\n          ++v27;\n          goto LABEL_88;\n        }\n        if ( v27 < 5 * v26 )\n        {\n          ++v27;\n          v28 &= v26 > 9;\n          goto LABEL_88;\n        }\nLABEL_106:\n        v56 = v27 - v81;\n        if ( v27 == v81 )\n        {\n          if ( !v90 )\n            goto LABEL_130;\n          if ( !v93 )\n            goto LABEL_134;\nLABEL_133:\n          if ( v94 )\n            goto LABEL_134;\nLABEL_115:\n          v28 = sub_419310(a1, a2, (char **)&ps);\n          if ( v28 )\n            return ps;\n          v58 = v97;\nLABEL_135:\n          v81 = v27++;\n          if ( !v58 )\n            goto LABEL_88;\n          goto LABEL_37;\n        }\n        if ( !v90 )\n          goto LABEL_110;\n        if ( v93 )\n          goto LABEL_113;\n        while ( 2 )\n        {\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v90 = 0;\n              s += v92;\n              if ( !--v56 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v88 )\n              {\n                if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n                {\n                  v92 = 1LL;\n                  v57 = *s;\n                  v93 = 1;\n                  v94 = v57;\n                  v90 = 1;\nLABEL_113:\n                  if ( !v94 )\n                  {\n                    if ( v90 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v88 )\n                    {\n                      if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n                      {\n                        v92 = 1LL;\n                        v65 = *s;\n                        v93 = 1;\n                        v94 = v65;\n                        v90 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v89) )\n                        goto LABEL_173;\n                      v88 = 1;\n                    }\n                    v70 = __ctype_get_mb_cur_max();\n                    v71 = s;\n                    v72 = sub_4085C0((__int64)s, v70);\n                    v73 = sub_40AB50(&v94, v71, v72, &v89);\n                    v92 = v73;\n                    if ( v73 == -1LL )\n                    {\n                      v92 = 1LL;\n                      v93 = 0;\n                      v90 = 1;\n                    }\n                    else\n                    {\n                      if ( v73 != -2LL )\n                      {\n                        if ( !v73 )\n                        {\n                          v92 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v94 )\n                            goto LABEL_162;\n                        }\n                        v93 = 1;\n                        if ( mbsinit(&v89) )\n                          v88 = 0;\n                        v90 = 1;\n                        goto LABEL_133;\n                      }\n                      v79 = strlen(s);\n                      v93 = 0;\n                      v92 = v79;\n                      v90 = 1;\n                    }\nLABEL_134:\n                    v58 = v97;\n                    v28 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v89) )\n                  goto LABEL_173;\n                v88 = 1;\n              }\n              break;\n            }\n            v59 = __ctype_get_mb_cur_max();\n            v60 = s;\n            v61 = sub_4085C0((__int64)s, v59);\n            v62 = sub_40AB50(&v94, v60, v61, &v89);\n            v92 = v62;\n            if ( v62 == -1LL )\n            {\n              v92 = 1LL;\n              v93 = 0;\n              continue;\n            }\n            break;\n          }\n          if ( v62 == -2LL )\n          {\n            v63 = strlen(s);\n            v93 = 0;\n            v92 = v63;\n            continue;\n          }\n          break;\n        }\n        if ( !v62 )\n        {\n          v92 = 1LL;\n          if ( *s )\n            goto LABEL_174;\n          if ( v94 )\n            goto LABEL_162;\n        }\n        v93 = 1;\n        if ( mbsinit(&v89) )\n          v88 = 0;\n        v90 = 1;\n        goto LABEL_113;\n      }\n      if ( !v53 )\n      {\n        n[1] = 1LL;\n        if ( *(_BYTE *)n[0] )\n          goto LABEL_174;\n        if ( DWORD1(v97) )\n          goto LABEL_162;\n      }\n      LOBYTE(v97) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)v29 + 4)) )\n        LOBYTE(v95) = 0;\n      BYTE12(v95) = 1;\nLABEL_33:\n      if ( !DWORD1(v97) )\n        return 0LL;\n      if ( (unsigned __int8)v28 & (v26 > 9) )\n      {\n        if ( v27 >= 5 * v26 )\n          goto LABEL_106;\n        ++v27;\n        v28 &= v26 > 9;\n      }\n      else\n      {\n        ++v27;\n      }\nLABEL_37:\n      if ( v86 )\n      {\n        if ( DWORD1(v97) == v87 )\n          goto LABEL_39;\nLABEL_66:\n        v45 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v45 = n[1];\n      if ( n[1] == v85 && !memcmp((const void *)n[0], v84, n[1]) )\n      {\nLABEL_39:\n        v31 = *a2;\n        v32 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v33 = _mm_load_si128((const __m128i *)&v95);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v32;\n        v34 = _mm_load_si128((const __m128i *)&v97);\n        s1[0] = (void *)(v32.m128i_i64[1] + v32.m128i_i64[0]);\n        v35 = _mm_load_si128((const __m128i *)&v98);\n        *(__m128i *)&v99[0].__count = v33;\n        v101 = v34;\n        v36 = dword_41E840[(unsigned __int64)((unsigned __int8)v31 >> 5)];\n        v102 = v35;\n        v99[1].__wchb[0] = 0;\n        v104 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v36 >> v31) & 1 )\n        {\n          v106 = (void *)1;\n          pwc = v31;\n          v107 = 1;\n          v104 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v66 = __ctype_get_mb_cur_max();\n          v67 = (char *)s2;\n          v68 = sub_4085C0((__int64)s2, v66);\n          v69 = (void *)sub_40AB50(&pwc, v67, v68, (mbstate_t *)((char *)&ps + 4));\n          v106 = v69;\n          if ( v69 == (void *)-1 )\n          {\n            v106 = (void *)1;\n            v107 = 0;\n          }\n          else if ( v69 == (void *)-2 )\n          {\n            v78 = (void *)strlen((const char *)s2);\n            v107 = 0;\n            v106 = v78;\n          }\n          else\n          {\n            if ( !v69 )\n            {\n              v106 = (void *)1;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc )\n                  goto LABEL_143;\nLABEL_162:\n                sub_4192F0();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v107 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v104 = 1;\nLABEL_41:\n            if ( !pwc )\n              abort();\n          }\n          v104 = 0;\n          ++v27;\n          s2 = (char *)s2 + (_QWORD)v106;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v41 = __ctype_get_mb_cur_max();\n              v42 = (char *)s2;\n              v43 = sub_4085C0((__int64)s2, v41);\n              v44 = (void *)sub_40AB50(&pwc, v42, v43, (mbstate_t *)((char *)&ps + 4));\n              v106 = v44;\n              if ( v44 == (void *)-1 )\n              {\n                v106 = (void *)1;\n                v107 = 0;\n                v104 = 1;\n              }\n              else if ( v44 == (void *)-2 )\n              {\n                v54 = (void *)strlen((const char *)s2);\n                v107 = 0;\n                v106 = v54;\n                v104 = 1;\n              }\n              else\n              {\n                if ( !v44 )\n                {\n                  v106 = (void *)1;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( pwc )\n                    goto LABEL_162;\n                }\n                v107 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v104 = 1;\n                if ( !pwc )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s2 >> 5) & 7)] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  break;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v106 = (void *)1;\n              v37 = *(_BYTE *)s2;\n              v107 = 1;\n              pwc = v37;\n              v104 = 1;\n              if ( !v37 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v99[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v99[0].__count) )\n              {\n                if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s1[0] >> 5) & 7)] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v38 = *(_BYTE *)s1[0];\n                  v101.m128i_i8[0] = 1;\n                  v101.m128i_i32[1] = v38;\n                  v99[1].__wchb[0] = 1;\nLABEL_49:\n                  v39 = v101.m128i_i32[1];\n                  if ( !v101.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v107 )\n                  {\n                    v40 = pwc != v39;\nLABEL_52:\n                    if ( v40 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned int)s1[1];\n                    ++v27;\n                    s2 = (char *)s2 + (_QWORD)v106;\n                    v99[1].__wchb[0] = 0;\n                    v104 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != v106 )\n                    goto LABEL_66;\n                  v40 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v99 + 4)) )\n                  break;\n                LOBYTE(v99[0].__count) = 1;\n              }\n              v46 = __ctype_get_mb_cur_max();\n              v47 = (char *)s1[0];\n              v48 = sub_4085C0((__int64)s1[0], v46);\n              v49 = (void *)sub_40AB50((wchar_t *)&v101.m128i_i32[1], v47, v48, (mbstate_t *)((char *)v99 + 4));\n              s1[1] = v49;\n              if ( v49 == (void *)-1 )\n              {\n                s1[1] = (void *)1;\n                v101.m128i_i8[0] = 0;\n                v99[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v49 != (void *)-2 )\n                {\n                  if ( !v49 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v101.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v101.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v99 + 4)) )\n                    LOBYTE(v99[0].__count) = 0;\n                  v39 = v101.m128i_i32[1];\n                  v99[1].__wchb[0] = 1;\n                  if ( !v101.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v55 = (void *)strlen((const char *)s1[0]);\n                v101.m128i_i8[0] = 0;\n                s1[1] = v55;\n                v99[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v101.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v45;\n      ++v26;\n      BYTE12(v95) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v16 = v9 + 1;\n    v17 = (mbstate_t *)((char *)v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !BYTE1(v3->__count) )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v20 = *(_BYTE *)(v2 + 1);\n    if ( !v20 )\n      return (mbstate_t)v3;\n    if ( !LOBYTE(v17->__count) )\n      return 0LL;\n    v16 = v9 + 2;\n    if ( v20 == LOBYTE(v17->__count) )\n      break;\nLABEL_12:\n    v18 = v11 & (v8 > 9);\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v16 < 5 * v8 || v7 && (v12 = v7, v13 = strnlen(v7, v16 - v10), v10 = v16, v7 = &v12[v13], v12[v13]) )\n      {\n        v11 = v18;\n      }\n      else\n      {\n        v14 = v10;\n        v15 = strlen((const char *)v2);\n        v11 = sub_419160(v17, v2, v15, &ps);\n        v10 = v14;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = v17->__count;\n    v3 = v17;\n    v9 = v16;\n  }\n  v21 = -(signed __int64)v9;\n  v22 = v2 + v21;\n  v23 = (char *)v3 + v21;\n  while ( 1 )\n  {\n    v25 = *(_BYTE *)(v22 + v16);\n    if ( !v25 )\n      return (mbstate_t)v3;\n    v24 = v23[v16];\n    if ( !v24 )\n      return 0LL;\n    ++v16;\n    if ( v25 != v24 )\n      goto LABEL_12;\n  }\n}\n\nmbstate_t __fastcall sub_419CF0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13@1\n  mbstate_t *v3; // rbp@1\n  char v4; // r15@2\n  mbstate_t result; // rax@2\n  char v6; // cl@3\n  const char *v7; // r9@4\n  unsigned __int64 v8; // r12@4\n  unsigned __int64 v9; // rdx@4\n  unsigned __int64 v10; // r8@4\n  char v11; // al@4\n  const char *v12; // ST00_8@6\n  size_t v13; // rax@6\n  unsigned __int64 v14; // ST00_8@7\n  unsigned __int64 v15; // rax@7\n  unsigned __int64 v16; // rbx@10\n  mbstate_t *v17; // r14@10\n  char v18; // bp@12\n  wchar_t v19; // ecx@15\n  char v20; // cl@20\n  signed __int64 v21; // rdx@23\n  __int64 v22; // rdi@23\n  char *v23; // rdx@23\n  char v24; // si@24\n  char v25; // cl@26\n  unsigned __int64 v26; // r12@29\n  unsigned __int64 v27; // rbx@29\n  char v28; // r14@29\n  __int128 *v29; // r15@30\n  int v30; // eax@32\n  wchar_t v31; // ecx@39\n  __m128i v32; // xmm1@39\n  __m128i v33; // xmm0@39\n  __m128i v34; // xmm2@39\n  __m128i v35; // xmm3@39\n  unsigned int v36; // eax@39\n  wchar_t v37; // eax@44\n  __int32 v38; // eax@48\n  __int32 v39; // eax@49\n  bool v40; // al@51\n  signed __int64 v41; // rax@55\n  char *v42; // r15@55\n  signed __int64 v43; // rax@55\n  void *v44; // rax@55\n  size_t v45; // r15@66\n  signed __int64 v46; // rax@70\n  char *v47; // r15@70\n  signed __int64 v48; // rax@70\n  void *v49; // rax@70\n  signed __int64 v50; // rax@94\n  char *v51; // ST00_8@94\n  signed __int64 v52; // rax@94\n  size_t v53; // rax@94\n  void *v54; // rax@102\n  void *v55; // rax@103\n  unsigned __int64 v56; // r14@106\n  int v57; // eax@112\n  char v58; // dl@116\n  signed __int64 v59; // rax@119\n  char *v60; // r15@119\n  signed __int64 v61; // rax@119\n  size_t v62; // rax@119\n  size_t v63; // rax@128\n  size_t v64; // rax@129\n  int v65; // eax@132\n  signed __int64 v66; // rax@138\n  char *v67; // ST00_8@138\n  signed __int64 v68; // rax@138\n  void *v69; // rax@138\n  signed __int64 v70; // rax@148\n  char *v71; // r14@148\n  signed __int64 v72; // rax@148\n  size_t v73; // rax@148\n  signed __int64 v74; // rax@157\n  char *v75; // r12@157\n  signed __int64 v76; // rax@157\n  size_t v77; // rax@157\n  void *v78; // rax@165\n  size_t v79; // rax@166\n  size_t v80; // rax@168\n  unsigned __int64 v81; // [sp+8h] [bp-180h]@29\n  mbstate_t v82; // [sp+14h] [bp-174h]@15\n  char v83; // [sp+1Ch] [bp-16Ch]@15\n  char *v84; // [sp+20h] [bp-168h]@15\n  size_t v85; // [sp+28h] [bp-160h]@16\n  char v86; // [sp+30h] [bp-158h]@16\n  wchar_t v87; // [sp+34h] [bp-154h]@16\n  char v88; // [sp+50h] [bp-138h]@29\n  mbstate_t v89; // [sp+54h] [bp-134h]@29\n  char v90; // [sp+5Ch] [bp-12Ch]@29\n  char *s; // [sp+60h] [bp-128h]@29\n  size_t v92; // [sp+68h] [bp-120h]@109\n  char v93; // [sp+70h] [bp-118h]@108\n  int v94; // [sp+74h] [bp-114h]@112\n  __int128 v95; // [sp+90h] [bp-F8h]@29\n  size_t n[2]; // [sp+A0h] [bp-E8h]@29\n  __int128 v97; // [sp+B0h] [bp-D8h]@32\n  __int128 v98; // [sp+C0h] [bp-C8h]@39\n  mbstate_t v99[2]; // [sp+D0h] [bp-B8h]@39\n  void *s1[2]; // [sp+E0h] [bp-A8h]@39\n  __m128i v101; // [sp+F0h] [bp-98h]@39\n  __m128i v102; // [sp+100h] [bp-88h]@39\n  mbstate_t ps; // [sp+110h] [bp-78h]@7\n  char v104; // [sp+11Ch] [bp-6Ch]@39\n  void *s2; // [sp+120h] [bp-68h]@39\n  void *v106; // [sp+128h] [bp-60h]@40\n  char v107; // [sp+130h] [bp-58h]@40\n  wchar_t pwc; // [sp+134h] [bp-54h]@40\n\n  v2 = (__int64)a2;\n  v3 = a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v19 = *a2;\n    v84 = a2;\n    v83 = 0;\n    v82 = 0LL;\n    if ( ((unsigned int)dword_41E840[(unsigned __int64)((unsigned __int8)v19 >> 5)] >> v19) & 1 )\n    {\n      v85 = 1LL;\n      v87 = v19;\n      v86 = 1;\n      v83 = 1;\nLABEL_17:\n      if ( !v87 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v82) )\n      goto LABEL_173;\n    v74 = __ctype_get_mb_cur_max();\n    v75 = v84;\n    v76 = sub_4085C0((__int64)v84, v74);\n    v77 = sub_40AB50(&v87, v75, v76, &v82);\n    v85 = v77;\n    if ( v77 == -1LL )\n    {\n      v85 = 1LL;\n      v86 = 0;\n      v83 = 1;\n    }\n    else\n    {\n      if ( v77 != -2LL )\n      {\n        if ( !v77 )\n        {\n          v85 = 1LL;\n          if ( *v84 )\n            goto LABEL_174;\n          if ( v87 )\n            goto LABEL_162;\n        }\n        v86 = 1;\n        mbsinit(&v82);\n        v83 = 1;\n        goto LABEL_17;\n      }\n      v80 = strlen(v84);\n      v86 = 0;\n      v85 = v80;\n      v83 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v26 = 0LL;\n    v27 = 0LL;\n    v28 = 1;\n    v88 = 0;\n    v89 = 0LL;\n    v90 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v95) = 0;\n    *(_QWORD *)((char *)&v95 + 4) = 0LL;\n    BYTE12(v95) = 0;\n    v81 = 0LL;\n    while ( 1 )\n    {\n      v29 = &v95;\n      if ( !(_BYTE)v95 )\n      {\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)n[0] >> 5) & 7)] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v30 = *(_BYTE *)n[0];\n          LOBYTE(v97) = 1;\n          DWORD1(v97) = v30;\n          BYTE12(v95) = 1;\n          goto LABEL_33;\n        }\n        v29 = &v95;\n        if ( !mbsinit((const mbstate_t *)((char *)&v95 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v95) = 1;\n      }\n      v50 = __ctype_get_mb_cur_max();\n      v51 = (char *)n[0];\n      v52 = sub_4085C0(n[0], v50);\n      v53 = sub_40AB50((wchar_t *)v29 + 9, v51, v52, (mbstate_t *)((char *)v29 + 4));\n      n[1] = v53;\n      if ( v53 == -1LL )\n      {\n        n[1] = 1LL;\n        LOBYTE(v97) = 0;\n        BYTE12(v95) = 1;\n        goto LABEL_85;\n      }\n      if ( v53 == -2LL )\n      {\n        v64 = strlen((const char *)n[0]);\n        LOBYTE(v97) = 0;\n        n[1] = v64;\n        BYTE12(v95) = 1;\nLABEL_85:\n        if ( !((unsigned __int8)v28 & (v26 > 9)) )\n        {\n          ++v27;\n          goto LABEL_88;\n        }\n        if ( v27 < 5 * v26 )\n        {\n          ++v27;\n          v28 &= v26 > 9;\n          goto LABEL_88;\n        }\nLABEL_106:\n        v56 = v27 - v81;\n        if ( v27 == v81 )\n        {\n          if ( !v90 )\n            goto LABEL_130;\n          if ( !v93 )\n            goto LABEL_134;\nLABEL_133:\n          if ( v94 )\n            goto LABEL_134;\nLABEL_115:\n          v28 = sub_419310(a1, a2, (char **)&ps);\n          if ( v28 )\n            return ps;\n          v58 = v97;\nLABEL_135:\n          v81 = v27++;\n          if ( !v58 )\n            goto LABEL_88;\n          goto LABEL_37;\n        }\n        if ( !v90 )\n          goto LABEL_110;\n        if ( v93 )\n          goto LABEL_113;\n        while ( 2 )\n        {\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v90 = 0;\n              s += v92;\n              if ( !--v56 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v88 )\n              {\n                if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n                {\n                  v92 = 1LL;\n                  v57 = *s;\n                  v93 = 1;\n                  v94 = v57;\n                  v90 = 1;\nLABEL_113:\n                  if ( !v94 )\n                  {\n                    if ( v90 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v88 )\n                    {\n                      if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*s >> 5) & 7)] >> *s) & 1 )\n                      {\n                        v92 = 1LL;\n                        v65 = *s;\n                        v93 = 1;\n                        v94 = v65;\n                        v90 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v89) )\n                        goto LABEL_173;\n                      v88 = 1;\n                    }\n                    v70 = __ctype_get_mb_cur_max();\n                    v71 = s;\n                    v72 = sub_4085C0((__int64)s, v70);\n                    v73 = sub_40AB50(&v94, v71, v72, &v89);\n                    v92 = v73;\n                    if ( v73 == -1LL )\n                    {\n                      v92 = 1LL;\n                      v93 = 0;\n                      v90 = 1;\n                    }\n                    else\n                    {\n                      if ( v73 != -2LL )\n                      {\n                        if ( !v73 )\n                        {\n                          v92 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v94 )\n                            goto LABEL_162;\n                        }\n                        v93 = 1;\n                        if ( mbsinit(&v89) )\n                          v88 = 0;\n                        v90 = 1;\n                        goto LABEL_133;\n                      }\n                      v79 = strlen(s);\n                      v93 = 0;\n                      v92 = v79;\n                      v90 = 1;\n                    }\nLABEL_134:\n                    v58 = v97;\n                    v28 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v89) )\n                  goto LABEL_173;\n                v88 = 1;\n              }\n              break;\n            }\n            v59 = __ctype_get_mb_cur_max();\n            v60 = s;\n            v61 = sub_4085C0((__int64)s, v59);\n            v62 = sub_40AB50(&v94, v60, v61, &v89);\n            v92 = v62;\n            if ( v62 == -1LL )\n            {\n              v92 = 1LL;\n              v93 = 0;\n              continue;\n            }\n            break;\n          }\n          if ( v62 == -2LL )\n          {\n            v63 = strlen(s);\n            v93 = 0;\n            v92 = v63;\n            continue;\n          }\n          break;\n        }\n        if ( !v62 )\n        {\n          v92 = 1LL;\n          if ( *s )\n            goto LABEL_174;\n          if ( v94 )\n            goto LABEL_162;\n        }\n        v93 = 1;\n        if ( mbsinit(&v89) )\n          v88 = 0;\n        v90 = 1;\n        goto LABEL_113;\n      }\n      if ( !v53 )\n      {\n        n[1] = 1LL;\n        if ( *(_BYTE *)n[0] )\n          goto LABEL_174;\n        if ( DWORD1(v97) )\n          goto LABEL_162;\n      }\n      LOBYTE(v97) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)v29 + 4)) )\n        LOBYTE(v95) = 0;\n      BYTE12(v95) = 1;\nLABEL_33:\n      if ( !DWORD1(v97) )\n        return 0LL;\n      if ( (unsigned __int8)v28 & (v26 > 9) )\n      {\n        if ( v27 >= 5 * v26 )\n          goto LABEL_106;\n        ++v27;\n        v28 &= v26 > 9;\n      }\n      else\n      {\n        ++v27;\n      }\nLABEL_37:\n      if ( v86 )\n      {\n        if ( DWORD1(v97) == v87 )\n          goto LABEL_39;\nLABEL_66:\n        v45 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v45 = n[1];\n      if ( n[1] == v85 && !memcmp((const void *)n[0], v84, n[1]) )\n      {\nLABEL_39:\n        v31 = *a2;\n        v32 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v33 = _mm_load_si128((const __m128i *)&v95);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v32;\n        v34 = _mm_load_si128((const __m128i *)&v97);\n        s1[0] = (void *)(v32.m128i_i64[1] + v32.m128i_i64[0]);\n        v35 = _mm_load_si128((const __m128i *)&v98);\n        *(__m128i *)&v99[0].__count = v33;\n        v101 = v34;\n        v36 = dword_41E840[(unsigned __int64)((unsigned __int8)v31 >> 5)];\n        v102 = v35;\n        v99[1].__wchb[0] = 0;\n        v104 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v36 >> v31) & 1 )\n        {\n          v106 = (void *)1;\n          pwc = v31;\n          v107 = 1;\n          v104 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v66 = __ctype_get_mb_cur_max();\n          v67 = (char *)s2;\n          v68 = sub_4085C0((__int64)s2, v66);\n          v69 = (void *)sub_40AB50(&pwc, v67, v68, (mbstate_t *)((char *)&ps + 4));\n          v106 = v69;\n          if ( v69 == (void *)-1 )\n          {\n            v106 = (void *)1;\n            v107 = 0;\n          }\n          else if ( v69 == (void *)-2 )\n          {\n            v78 = (void *)strlen((const char *)s2);\n            v107 = 0;\n            v106 = v78;\n          }\n          else\n          {\n            if ( !v69 )\n            {\n              v106 = (void *)1;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc )\n                  goto LABEL_143;\nLABEL_162:\n                sub_4192F0();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v107 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v104 = 1;\nLABEL_41:\n            if ( !pwc )\n              abort();\n          }\n          v104 = 0;\n          ++v27;\n          s2 = (char *)s2 + (_QWORD)v106;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v41 = __ctype_get_mb_cur_max();\n              v42 = (char *)s2;\n              v43 = sub_4085C0((__int64)s2, v41);\n              v44 = (void *)sub_40AB50(&pwc, v42, v43, (mbstate_t *)((char *)&ps + 4));\n              v106 = v44;\n              if ( v44 == (void *)-1 )\n              {\n                v106 = (void *)1;\n                v107 = 0;\n                v104 = 1;\n              }\n              else if ( v44 == (void *)-2 )\n              {\n                v54 = (void *)strlen((const char *)s2);\n                v107 = 0;\n                v106 = v54;\n                v104 = 1;\n              }\n              else\n              {\n                if ( !v44 )\n                {\n                  v106 = (void *)1;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( pwc )\n                    goto LABEL_162;\n                }\n                v107 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v104 = 1;\n                if ( !pwc )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s2 >> 5) & 7)] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  break;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v106 = (void *)1;\n              v37 = *(_BYTE *)s2;\n              v107 = 1;\n              pwc = v37;\n              v104 = 1;\n              if ( !v37 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v99[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v99[0].__count) )\n              {\n                if ( ((unsigned int)dword_41E840[(unsigned __int64)((*(_BYTE *)s1[0] >> 5) & 7)] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v38 = *(_BYTE *)s1[0];\n                  v101.m128i_i8[0] = 1;\n                  v101.m128i_i32[1] = v38;\n                  v99[1].__wchb[0] = 1;\nLABEL_49:\n                  v39 = v101.m128i_i32[1];\n                  if ( !v101.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v107 )\n                  {\n                    v40 = pwc != v39;\nLABEL_52:\n                    if ( v40 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned int)s1[1];\n                    ++v27;\n                    s2 = (char *)s2 + (_QWORD)v106;\n                    v99[1].__wchb[0] = 0;\n                    v104 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != v106 )\n                    goto LABEL_66;\n                  v40 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v99 + 4)) )\n                  break;\n                LOBYTE(v99[0].__count) = 1;\n              }\n              v46 = __ctype_get_mb_cur_max();\n              v47 = (char *)s1[0];\n              v48 = sub_4085C0((__int64)s1[0], v46);\n              v49 = (void *)sub_40AB50((wchar_t *)&v101.m128i_i32[1], v47, v48, (mbstate_t *)((char *)v99 + 4));\n              s1[1] = v49;\n              if ( v49 == (void *)-1 )\n              {\n                s1[1] = (void *)1;\n                v101.m128i_i8[0] = 0;\n                v99[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v49 != (void *)-2 )\n                {\n                  if ( !v49 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v101.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v101.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v99 + 4)) )\n                    LOBYTE(v99[0].__count) = 0;\n                  v39 = v101.m128i_i32[1];\n                  v99[1].__wchb[0] = 1;\n                  if ( !v101.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v55 = (void *)strlen((const char *)s1[0]);\n                v101.m128i_i8[0] = 0;\n                s1[1] = v55;\n                v99[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v101.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v45;\n      ++v26;\n      BYTE12(v95) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v16 = v9 + 1;\n    v17 = (mbstate_t *)((char *)v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !BYTE1(v3->__count) )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v20 = *(_BYTE *)(v2 + 1);\n    if ( !v20 )\n      return (mbstate_t)v3;\n    if ( !LOBYTE(v17->__count) )\n      return 0LL;\n    v16 = v9 + 2;\n    if ( v20 == LOBYTE(v17->__count) )\n      break;\nLABEL_12:\n    v18 = v11 & (v8 > 9);\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v16 < 5 * v8 || v7 && (v12 = v7, v13 = strnlen(v7, v16 - v10), v10 = v16, v7 = &v12[v13], v12[v13]) )\n      {\n        v11 = v18;\n      }\n      else\n      {\n        v14 = v10;\n        v15 = strlen((const char *)v2);\n        v11 = sub_419160(v17, v2, v15, &ps);\n        v10 = v14;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = v17->__count;\n    v3 = v17;\n    v9 = v16;\n  }\n  v21 = -(signed __int64)v9;\n  v22 = v2 + v21;\n  v23 = (char *)v3 + v21;\n  while ( 1 )\n  {\n    v25 = *(_BYTE *)(v22 + v16);\n    if ( !v25 )\n      return (mbstate_t)v3;\n    v24 = v23[v16];\n    if ( !v24 )\n      return 0LL;\n    ++v16;\n    if ( v25 != v24 )\n      goto LABEL_12;\n  }\n}\n", 
            "funcStartAddr": "0x402002L", 
            "funcEndAddr": "0x402007L", 
            "funcName": "sub_419CF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41ABC0(char *a1, char *a2, void *a3, void **a4, size_t *a5)\n{\n  char *v5; // r13@1\n  void *v6; // rbx@1\n  __int64 v7; // r14@1\n  int v8; // eax@5\n  void *v9; // r14@9\n  signed int v10; // ebx@17\n  int *v12; // rax@25\n  int v13; // er12@25\n  int *v14; // rbp@25\n  size_t v15; // [sp+0h] [bp-1078h]@8\n  void **v16; // [sp+8h] [bp-1070h]@1\n  size_t *v17; // [sp+10h] [bp-1068h]@1\n  char *inbuf; // [sp+20h] [bp-1058h]@1\n  size_t inbytesleft; // [sp+28h] [bp-1050h]@1\n  char *outbuf; // [sp+30h] [bp-1048h]@3\n  size_t outbytesleft; // [sp+38h] [bp-1040h]@4\n  size_t v22; // [sp+40h] [bp-1038h]@3\n\n  v5 = a2;\n  v6 = a3;\n  v16 = a4;\n  v17 = a5;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)&v22;\n      outbytesleft = 4096LL;\n      if ( iconv(v6, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)&v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      goto LABEL_21;\n  }\nLABEL_7:\n  outbuf = (char *)&v22;\n  outbytesleft = 4096LL;\n  if ( iconv(v6, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\nLABEL_21:\n    return (unsigned int)-1;\n  v15 = v7 + outbuf - (char *)&v22;\n  if ( !(v7 + outbuf - (char *)&v22) )\n  {\n    v10 = 0;\n    *v17 = 0LL;\n    return (unsigned int)v10;\n  }\n  v9 = *v16;\n  if ( !*v16 || *v17 < v15 )\n  {\n    v9 = malloc(v15);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      goto LABEL_21;\n    }\n  }\n  iconv(v6, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22 = v15;\n  while ( v5 )\n  {\n    if ( iconv(v6, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, &v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(v6, 0LL, 0LL, (char **)&outbytesleft, &v22) != -1LL )\n  {\n    if ( v22 )\n      abort();\n    v10 = 0;\n    *v16 = v9;\n    *v17 = v15;\n    return (unsigned int)v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *v16 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return (unsigned int)v10;\n}\n\n__int64 __fastcall sub_41ABC0(char *a1, char *a2, void *a3, void **a4, size_t *a5)\n{\n  char *v5; // r13@1\n  void *v6; // rbx@1\n  __int64 v7; // r14@1\n  int v8; // eax@5\n  void *v9; // r14@9\n  signed int v10; // ebx@17\n  int *v12; // rax@25\n  int v13; // er12@25\n  int *v14; // rbp@25\n  size_t v15; // [sp+0h] [bp-1078h]@8\n  void **v16; // [sp+8h] [bp-1070h]@1\n  size_t *v17; // [sp+10h] [bp-1068h]@1\n  char *inbuf; // [sp+20h] [bp-1058h]@1\n  size_t inbytesleft; // [sp+28h] [bp-1050h]@1\n  char *outbuf; // [sp+30h] [bp-1048h]@3\n  size_t outbytesleft; // [sp+38h] [bp-1040h]@4\n  size_t v22; // [sp+40h] [bp-1038h]@3\n\n  v5 = a2;\n  v6 = a3;\n  v16 = a4;\n  v17 = a5;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)&v22;\n      outbytesleft = 4096LL;\n      if ( iconv(v6, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)&v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      goto LABEL_21;\n  }\nLABEL_7:\n  outbuf = (char *)&v22;\n  outbytesleft = 4096LL;\n  if ( iconv(v6, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\nLABEL_21:\n    return (unsigned int)-1;\n  v15 = v7 + outbuf - (char *)&v22;\n  if ( !(v7 + outbuf - (char *)&v22) )\n  {\n    v10 = 0;\n    *v17 = 0LL;\n    return (unsigned int)v10;\n  }\n  v9 = *v16;\n  if ( !*v16 || *v17 < v15 )\n  {\n    v9 = malloc(v15);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      goto LABEL_21;\n    }\n  }\n  iconv(v6, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22 = v15;\n  while ( v5 )\n  {\n    if ( iconv(v6, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, &v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(v6, 0LL, 0LL, (char **)&outbytesleft, &v22) != -1LL )\n  {\n    if ( v22 )\n      abort();\n    v10 = 0;\n    *v16 = v9;\n    *v17 = v15;\n    return (unsigned int)v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *v16 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return (unsigned int)v10;\n}\n", 
            "funcStartAddr": "0x402007L", 
            "funcEndAddr": "0x40200cL", 
            "funcName": "sub_41ABC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41ABC0(char *a1, char *a2, void *a3, void **a4, size_t *a5)\n{\n  char *v5; // r13@1\n  void *v6; // rbx@1\n  __int64 v7; // r14@1\n  int v8; // eax@5\n  void *v9; // r14@9\n  signed int v10; // ebx@17\n  int *v12; // rax@25\n  int v13; // er12@25\n  int *v14; // rbp@25\n  size_t v15; // [sp+0h] [bp-1078h]@8\n  void **v16; // [sp+8h] [bp-1070h]@1\n  size_t *v17; // [sp+10h] [bp-1068h]@1\n  char *inbuf; // [sp+20h] [bp-1058h]@1\n  size_t inbytesleft; // [sp+28h] [bp-1050h]@1\n  char *outbuf; // [sp+30h] [bp-1048h]@3\n  size_t outbytesleft; // [sp+38h] [bp-1040h]@4\n  size_t v22; // [sp+40h] [bp-1038h]@3\n\n  v5 = a2;\n  v6 = a3;\n  v16 = a4;\n  v17 = a5;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)&v22;\n      outbytesleft = 4096LL;\n      if ( iconv(v6, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)&v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      goto LABEL_21;\n  }\nLABEL_7:\n  outbuf = (char *)&v22;\n  outbytesleft = 4096LL;\n  if ( iconv(v6, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\nLABEL_21:\n    return (unsigned int)-1;\n  v15 = v7 + outbuf - (char *)&v22;\n  if ( !(v7 + outbuf - (char *)&v22) )\n  {\n    v10 = 0;\n    *v17 = 0LL;\n    return (unsigned int)v10;\n  }\n  v9 = *v16;\n  if ( !*v16 || *v17 < v15 )\n  {\n    v9 = malloc(v15);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      goto LABEL_21;\n    }\n  }\n  iconv(v6, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22 = v15;\n  while ( v5 )\n  {\n    if ( iconv(v6, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, &v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(v6, 0LL, 0LL, (char **)&outbytesleft, &v22) != -1LL )\n  {\n    if ( v22 )\n      abort();\n    v10 = 0;\n    *v16 = v9;\n    *v17 = v15;\n    return (unsigned int)v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *v16 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return (unsigned int)v10;\n}\n\n__int64 __fastcall sub_41ABC0(char *a1, char *a2, void *a3, void **a4, size_t *a5)\n{\n  char *v5; // r13@1\n  void *v6; // rbx@1\n  __int64 v7; // r14@1\n  int v8; // eax@5\n  void *v9; // r14@9\n  signed int v10; // ebx@17\n  int *v12; // rax@25\n  int v13; // er12@25\n  int *v14; // rbp@25\n  size_t v15; // [sp+0h] [bp-1078h]@8\n  void **v16; // [sp+8h] [bp-1070h]@1\n  size_t *v17; // [sp+10h] [bp-1068h]@1\n  char *inbuf; // [sp+20h] [bp-1058h]@1\n  size_t inbytesleft; // [sp+28h] [bp-1050h]@1\n  char *outbuf; // [sp+30h] [bp-1048h]@3\n  size_t outbytesleft; // [sp+38h] [bp-1040h]@4\n  size_t v22; // [sp+40h] [bp-1038h]@3\n\n  v5 = a2;\n  v6 = a3;\n  v16 = a4;\n  v17 = a5;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)&v22;\n      outbytesleft = 4096LL;\n      if ( iconv(v6, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)&v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      goto LABEL_21;\n  }\nLABEL_7:\n  outbuf = (char *)&v22;\n  outbytesleft = 4096LL;\n  if ( iconv(v6, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\nLABEL_21:\n    return (unsigned int)-1;\n  v15 = v7 + outbuf - (char *)&v22;\n  if ( !(v7 + outbuf - (char *)&v22) )\n  {\n    v10 = 0;\n    *v17 = 0LL;\n    return (unsigned int)v10;\n  }\n  v9 = *v16;\n  if ( !*v16 || *v17 < v15 )\n  {\n    v9 = malloc(v15);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      goto LABEL_21;\n    }\n  }\n  iconv(v6, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22 = v15;\n  while ( v5 )\n  {\n    if ( iconv(v6, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, &v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(v6, 0LL, 0LL, (char **)&outbytesleft, &v22) != -1LL )\n  {\n    if ( v22 )\n      abort();\n    v10 = 0;\n    *v16 = v9;\n    *v17 = v15;\n    return (unsigned int)v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *v16 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return (unsigned int)v10;\n}\n", 
            "funcStartAddr": "0x402007L", 
            "funcEndAddr": "0x40200cL", 
            "funcName": "sub_41ABC0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_41AE10(const char *a1, void *a2)\n{\n  unsigned __int64 v2; // rax@1\n  size_t v3; // rbx@1\n  unsigned __int64 v4; // r13@3\n  char *v5; // r12@3\n  int *v6; // rax@5\n  int *v7; // r15@5\n  int v8; // eax@5\n  signed __int64 v9; // rbp@7\n  char *v10; // rbx@7\n  char *v11; // rax@8\n  signed __int64 v12; // rbp@13\n  char *v13; // rbx@13\n  char *v14; // rax@14\n  char *v15; // rax@17\n  char *v16; // rax@18\n  char *v17; // rdi@22\n  const char *v19; // [sp+0h] [bp-58h]@1\n  size_t inbytesleft; // [sp+8h] [bp-50h]@1\n  char *outbuf; // [sp+10h] [bp-48h]@4\n  size_t outbytesleft; // [sp+18h] [bp-40h]@4\n\n  v19 = a1;\n  v2 = strlen(a1);\n  inbytesleft = v2;\n  v3 = 16 * v2;\n  if ( v2 >= 0x10000000 )\n    v3 = v2;\n  v4 = v3 + 1;\n  v5 = (char *)malloc(v3 + 1);\n  if ( v5 )\n  {\n    iconv(a2, 0LL, 0LL, 0LL, 0LL);\n    outbuf = v5;\n    for ( outbytesleft = v3;\n          iconv(a2, (char **)&v19, &inbytesleft, &outbuf, &outbytesleft) == -1LL;\n          outbytesleft = v9 - 1 - (_QWORD)v10 )\n    {\n      v6 = __errno_location();\n      v7 = v6;\n      v8 = *v6;\n      if ( v8 == 22 )\n        break;\n      if ( v8 != 7 )\n        goto LABEL_22;\n      v9 = 2 * v4;\n      v10 = (char *)(outbuf - v5);\n      if ( v4 >= 2 * v4 || (v11 = (char *)realloc(v5, 2 * v4)) == 0LL )\n      {\nLABEL_21:\n        *v7 = 12;\nLABEL_22:\n        v17 = v5;\n        v5 = 0LL;\n        free(v17);\n        return v5;\n      }\n      v5 = v11;\n      v4 *= 2LL;\n      outbuf = &v10[(_QWORD)v11];\n    }\n    while ( iconv(a2, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\n    {\n      v7 = __errno_location();\n      if ( *v7 != 7 )\n        goto LABEL_22;\n      v12 = 2 * v4;\n      v13 = (char *)(outbuf - v5);\n      if ( v4 >= 2 * v4 )\n        goto LABEL_21;\n      v14 = (char *)realloc(v5, 2 * v4);\n      if ( !v14 )\n        goto LABEL_21;\n      v4 *= 2LL;\n      v5 = v14;\n      outbuf = &v13[(_QWORD)v14];\n      outbytesleft = v12 - 1 - (_QWORD)v13;\n    }\n    v15 = outbuf++;\n    *v15 = 0;\n    if ( v4 > outbuf - v5 )\n    {\n      v16 = (char *)realloc(v5, outbuf - v5);\n      if ( v16 )\n        v5 = v16;\n    }\n  }\n  else\n  {\n    *__errno_location() = 12;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x41ae10L", 
            "funcEndAddr": "0x41afd5L", 
            "funcName": "sub_41AE10"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_41AFE0(char *s, char *fromcode, char *tocode)\n{\n  char *v3; // rbp@2\n  char *v4; // rbx@3\n  iconv_t v6; // rax@5\n  void *v7; // rbp@5\n  int *v8; // rax@8\n  char *v9; // rdi@8\n  int v10; // er12@8\n  int *v11; // rbp@8\n  int *v12; // rax@11\n  int v13; // er13@11\n  int *v14; // r12@11\n\n  if ( *s )\n  {\n    v3 = tocode;\n    if ( (unsigned int)sub_418A20((__int64)fromcode, (__int64)tocode) )\n    {\n      v6 = iconv_open(v3, fromcode);\n      v7 = v6;\n      if ( v6 == (iconv_t)-1 )\n      {\n        v4 = 0LL;\n      }\n      else\n      {\n        v4 = sub_41AE10(s, v6);\n        if ( v4 )\n        {\n          if ( iconv_close(v7) < 0 )\n          {\n            v8 = __errno_location();\n            v9 = v4;\n            v4 = 0LL;\n            v10 = *v8;\n            v11 = v8;\n            free(v9);\n            *v11 = v10;\n          }\n        }\n        else\n        {\n          v12 = __errno_location();\n          v13 = *v12;\n          v14 = v12;\n          iconv_close(v7);\n          *v14 = v13;\n        }\n      }\n      return v4;\n    }\n  }\n  v4 = strdup(s);\n  if ( v4 )\n    return v4;\n  *__errno_location() = 12;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x41afe0L", 
            "funcEndAddr": "0x41b0ccL", 
            "funcName": "sub_41AFE0"
        }, 
        {
            "decompiledFuncCode": "signed __int64 __fastcall sub_41B0D0(__int64 a1)\n{\n  unsigned __int8 v1; // cf@1\n  size_t v2; // rdi@1\n  __int64 *v3; // rax@2\n  signed __int64 v4; // rcx@2\n  __int64 *v5; // rsi@2\n  unsigned __int64 v6; // rax@3\n  unsigned __int64 v7; // rdx@3\n  __int64 v8; // rax@3\n  signed __int64 result; // rax@4\n\n  v1 = __CFADD__(a1, 16LL);\n  v2 = a1 + 16;\n  if ( v1 )\n  {\n    result = 0LL;\n  }\n  else\n  {\n    v3 = (__int64 *)malloc(v2);\n    v4 = 0LL;\n    v5 = v3;\n    if ( v3 )\n    {\n      *((_DWORD *)v3 + 3) = 336984906;\n      v4 = (signed __int64)(v3 + 2);\n      v6 = (unsigned __int64)v3\n         + -257 * ((unsigned __int64)(0x0FF00FF00FF00FF01LL * (unsigned __int128)(unsigned __int64)(v3 + 2) >> 64) >> 8)\n         + 16;\n      v7 = v6;\n      v8 = qword_623CC0[v6];\n      qword_623CC0[v7] = v4;\n      *v5 = v8;\n    }\n    result = v4;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x41b0d0L", 
            "funcEndAddr": "0x41b13cL", 
            "funcName": "sub_41B0D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41B140(unsigned __int64 a1)\n{\n  unsigned __int64 v1; // rax@4\n  __int64 v2; // rcx@4\n  __int64 v3; // rax@9\n  __int64 *v4; // rcx@6\n\n  if ( a1 )\n  {\n    if ( *(_DWORD *)(a1 - 4) == 336984906 )\n    {\n      v1 = a1 - 257 * ((unsigned __int64)(0x0FF00FF00FF00FF01LL * (unsigned __int128)a1 >> 64) >> 8);\n      v2 = qword_623CC0[v1];\n      if ( v2 )\n      {\n        if ( v2 == a1 )\n        {\n          v4 = &qword_623CC0[v1];\nLABEL_12:\n          *v4 = *(_QWORD *)(a1 - 16);\n          free((void *)(a1 - 16));\n        }\n        else\n        {\n          while ( 1 )\n          {\n            v3 = *(_QWORD *)(v2 - 16);\n            if ( !v3 )\n              break;\n            if ( a1 == v3 )\n            {\n              v4 = (__int64 *)(v2 - 16);\n              goto LABEL_12;\n            }\n            v2 = *(_QWORD *)(v2 - 16);\n          }\n        }\n      }\n    }\n  }\n}\n", 
            "funcStartAddr": "0x41b140L", 
            "funcEndAddr": "0x41b1c6L", 
            "funcName": "sub_41B140"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_41B1D0(char *s)\n{\n  __int64 v1; // rbx@2\n  wchar_t v3; // eax@6\n  signed __int64 v4; // rax@10\n  char *v5; // rbp@10\n  signed __int64 v6; // rax@10\n  size_t v7; // rax@10\n  size_t v8; // rax@20\n  char v9; // [sp+0h] [bp-58h]@4\n  mbstate_t ps; // [sp+4h] [bp-54h]@4\n  char i; // [sp+Ch] [bp-4Ch]@4\n  char *sa; // [sp+10h] [bp-48h]@4\n  size_t v13; // [sp+18h] [bp-40h]@6\n  char v14; // [sp+20h] [bp-38h]@6\n  wchar_t pwc; // [sp+24h] [bp-34h]@6\n\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    sa = s;\n    v1 = 0LL;\n    v9 = 0;\n    ps = 0LL;\n    for ( i = 0; ; i = 0 )\n    {\n      if ( !v9 )\n      {\n        if ( ((unsigned int)dword_41E840[(unsigned __int64)(((unsigned __int8)*sa >> 5) & 7)] >> *sa) & 1 )\n        {\n          v13 = 1LL;\n          v3 = *sa;\n          v14 = 1;\n          pwc = v3;\n          goto LABEL_7;\n        }\n        if ( !mbsinit(&ps) )\n          __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n        v9 = 1;\n      }\n      v4 = __ctype_get_mb_cur_max();\n      v5 = sa;\n      v6 = sub_4085C0((__int64)sa, v4);\n      v7 = sub_40AB50(&pwc, v5, v6, &ps);\n      v13 = v7;\n      if ( v7 == -1LL )\n      {\n        v13 = 1LL;\n        v14 = 0;\n        goto LABEL_8;\n      }\n      if ( v7 == -2LL )\n      {\n        v8 = strlen(sa);\n        v14 = 0;\n        v13 = v8;\n        goto LABEL_8;\n      }\n      if ( !v7 )\n      {\n        v13 = 1LL;\n        if ( *sa )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n        if ( pwc )\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v14 = 1;\n      if ( mbsinit(&ps) )\n        v9 = 0;\nLABEL_7:\n      if ( !pwc )\n        return v1;\nLABEL_8:\n      sa += v13;\n      ++v1;\n    }\n  }\n  return strlen(s);\n}\n", 
            "funcStartAddr": "0x41b1d0L", 
            "funcEndAddr": "0x41b39cL", 
            "funcName": "sub_41B1D0"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x41b3a0L", 
            "funcEndAddr": "0x41b3fdL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x41b400L", 
            "funcEndAddr": "0x41b401L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_41B410(__int64 a1)\n{\n  __int64 v1; // rdx@1\n\n  v1 = 0LL;\n  if ( &unk_6232A8 )\n    v1 = unk_6232A8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x41b410L", 
            "funcEndAddr": "0x41b428L", 
            "funcName": "sub_41B410"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41B428(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx@1\n  __int64 v5; // [sp-8h] [bp-10h]@1\n\n  v3 = (void (**)(void))&unk_622E30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1 )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x41b428L", 
            "funcEndAddr": "0x41b448L", 
            "funcName": "sub_41B428"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_ptx.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 171, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}