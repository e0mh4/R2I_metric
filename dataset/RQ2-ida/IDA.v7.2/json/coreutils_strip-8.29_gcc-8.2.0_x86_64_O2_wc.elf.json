{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __usercall main@<rax>(char **a1@<rsi>, char **a2@<rdx>, unsigned int a3@<edi>, FILE *a4@<r14>)\n{\n  char **v4; // r12\n  const char *v5; // rbp\n  char *v6; // rbx\n  struct stat *v7; // rsi\n  int v8; // eax\n  FILE *v9; // rbx\n  unsigned int v10; // eax\n  FILE *v11; // rdi\n  _BOOL8 v12; // rdx\n  __int64 v13; // rbx\n  _DWORD *v14; // rax\n  int v15; // ecx\n  char v16; // r13\n  unsigned int v17; // eax\n  int v18; // eax\n  char v19; // dl\n  const char *v20; // rax\n  const char *v21; // r15\n  __int64 v22; // rax\n  __int64 v23; // r13\n  char *v24; // rax\n  __int64 v25; // r15\n  char *v26; // r13\n  __int64 v27; // rax\n  char *v28; // rax\n  int *v29; // rax\n  char *v30; // rax\n  __int64 v32; // r15\n  int *v33; // rax\n  __int64 v34; // r12\n  struct stat *v35; // r13\n  int v36; // eax\n  const char *v37; // r15\n  _DWORD *v38; // rdx\n  int v39; // edi\n  unsigned __int64 v40; // rax\n  __int64 v41; // rcx\n  int *v42; // rax\n  double v43; // xmm1_8\n  __int64 v44; // rbx\n  char *v45; // rax\n  char *v46; // rax\n  __int64 v47; // rbx\n  char *v48; // rax\n  struct stat *v49; // [rsp+0h] [rbp-208h]\n  _DWORD *ptr; // [rsp+8h] [rbp-200h]\n  double ptra; // [rsp+8h] [rbp-200h]\n  _DWORD *v52; // [rsp+10h] [rbp-1F8h]\n  char v53; // [rsp+10h] [rbp-1F8h]\n  char **v54; // [rsp+10h] [rbp-1F8h]\n  char v55; // [rsp+1Bh] [rbp-1EDh]\n  int fd; // [rsp+1Ch] [rbp-1ECh]\n  struct stat stat_buf; // [rsp+20h] [rbp-1E8h]\n  __int64 v58; // [rsp+B0h] [rbp-158h]\n  FILE *v59; // [rsp+B8h] [rbp-150h]\n\n  v4 = a1;\n  v5 = 0LL;\n  LODWORD(v6) = a3;\n  sub_403BB0(*a1);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_407E80(sub_403810);\n  qword_60C320 = getpagesize();\n  setvbuf(stdout, 0LL, 1, 0LL);\n  byte_60C331 = 0;\n  byte_60C332 = 0;\n  byte_60C333 = 0;\n  byte_60C334 = 0;\n  byte_60C330 = 0;\n  qword_60C338 = 0LL;\n  qword_60C340 = 0LL;\n  qword_60C348 = 0LL;\n  qword_60C350 = 0LL;\n  qword_60C358 = 0LL;\n  while ( 1 )\n  {\n    v7 = (struct stat *)v4;\n    v8 = sub_4072A0(a3, v4, \"clLmw\", &off_408200, 0LL);\n    if ( v8 == -1 )\n      break;\n    if ( v8 == 99 )\n    {\n      byte_60C331 = 1;\n    }\n    else if ( v8 <= 99 )\n    {\n      if ( v8 == -130 )\n        sub_403350(0);\n      if ( v8 != 76 )\n      {\n        if ( v8 == -131 )\n        {\n          sub_406060((char)stdout);\n          exit(0);\n        }\nLABEL_17:\n        sub_403350(1);\n      }\n      byte_60C330 = 1;\n    }\n    else if ( v8 == 109 )\n    {\n      byte_60C332 = 1;\n    }\n    else if ( v8 <= 109 )\n    {\n      if ( v8 != 108 )\n        goto LABEL_17;\n      byte_60C334 = 1;\n    }\n    else if ( v8 == 119 )\n    {\n      byte_60C333 = 1;\n    }\n    else\n    {\n      if ( v8 != 128 )\n        goto LABEL_17;\n      v5 = (const char *)qword_60C500;\n    }\n  }\n  if ( !byte_60C334 && !byte_60C333 )\n    goto LABEL_74;\n  while ( 2 )\n  {\n    if ( v5 )\n    {\n      if ( (int)v6 > dword_60C2BC )\n      {\n        v44 = sub_405580(4LL, v4[dword_60C2BC]);\n        v45 = dcgettext(0LL, \"extra operand %s\", 5);\n        error(0, 0, v45, v44);\n        v46 = dcgettext(0LL, \"file operands cannot be combined with --files0-from\", 5);\n        __fprintf_chk(stderr, 1LL, \"%s\\n\", v46);\n        goto LABEL_17;\n      }\n      if ( !strcmp(v5, \"-\") )\n      {\n        v9 = stdin;\n      }\n      else\n      {\n        v9 = fopen(v5, \"r\");\n        if ( !v9 )\n        {\n          v5 = (const char *)sub_405580(4LL, v5);\n          v13 = (__int64)dcgettext(0LL, \"cannot open %s for reading\", 5);\n          v42 = __errno_location();\n          v39 = 1;\n          error(1, *v42, (const char *)v13, v5);\nLABEL_97:\n          v15 = 1;\n          while ( v40 > 9 )\n          {\n            ++v15;\n            v40 /= 0xAuLL;\n          }\n          if ( v15 < v39 )\n            v15 = v39;\n          goto LABEL_33;\n        }\n      }\n      v10 = fileno(v9);\n      v7 = (struct stat *)v10;\n      v49 = &stat_buf;\n      if ( __fxstat(1, v10, &stat_buf) || (stat_buf.st_mode & 0xF000) != 0x8000 )\n        goto LABEL_124;\n      ptra = (double)SLODWORD(stat_buf.st_size);\n      v43 = 10485760.0;\n      if ( sub_403AB0() * 0.5 <= 10485760.0 )\n        v43 = 0.5 * sub_403AB0();\n      if ( v43 < ptra )\n      {\nLABEL_124:\n        v11 = v9;\n        a4 = (FILE *)sub_4036E0(v9);\n        if ( !a4 )\n          goto LABEL_116;\n        v55 = 0;\n      }\n      else\n      {\n        sub_4058E0(&v58);\n        v7 = (struct stat *)&v58;\n        v55 = sub_405980(v9);\n        if ( !v55 || (unsigned int)sub_406430(v9) )\n        {\n          v47 = sub_405580(4LL, v5);\n          v48 = dcgettext(0LL, \"cannot read file names from %s\", 5);\n          error(1, 0, v48, v47);\n          start();\n        }\n        v13 = v58;\n        v11 = v59;\n        v54 = (char **)v59;\n        a4 = (FILE *)sub_4036B0(v59);\n        if ( !a4 )\nLABEL_116:\n          sub_4063F0(v11, v7, v12);\n        if ( v13 )\n        {\n          v12 = ((unsigned __int64)v13 * (unsigned __int128)0x98uLL) >> 64 != 0;\n          if ( 152 * v13 < 0 || ((unsigned __int64)v13 * (unsigned __int128)0x98uLL) >> 64 != 0 )\n            goto LABEL_116;\n          goto LABEL_81;\n        }\n      }\n      v13 = 0LL;\n      v14 = (_DWORD *)sub_4061A0(152LL);\n      v15 = 1;\n      ptr = v14;\n      *v14 = 1;\n      goto LABEL_33;\n    }\n    if ( (int)v6 <= dword_60C2BC )\n    {\n      v11 = (FILE *)&unk_60C318;\n      a4 = (FILE *)sub_4036B0(&unk_60C318);\n      if ( !a4 )\n        goto LABEL_116;\n      v55 = 0;\n      ptr = (_DWORD *)sub_4061A0(152LL);\n      v54 = (char **)&unk_60C318;\n      v49 = &stat_buf;\n      goto LABEL_105;\n    }\n    v11 = (FILE *)&v4[dword_60C2BC];\n    v13 = (int)v6 - dword_60C2BC;\n    v54 = &v4[dword_60C2BC];\n    a4 = (FILE *)sub_4036B0(v11);\n    if ( !a4 )\n      goto LABEL_116;\n    v55 = 0;\n    v49 = &stat_buf;\nLABEL_81:\n    ptr = (_DWORD *)sub_4061A0(152 * v13);\n    if ( v13 == 1 )\n    {\nLABEL_105:\n      v15 = (unsigned __int8)byte_60C330\n          + (unsigned __int8)byte_60C331\n          + (unsigned __int8)byte_60C332\n          + (unsigned __int8)byte_60C333\n          + (unsigned __int8)byte_60C334;\n      if ( v15 == 1 )\n      {\n        v13 = 1LL;\n        *ptr = 1;\n        goto LABEL_33;\n      }\n      v13 = 1LL;\n    }\n    v34 = 0LL;\n    v35 = (struct stat *)(ptr + 2);\n    do\n    {\n      v37 = v54[v34];\n      if ( !v37 || !strcmp(v54[v34], \"-\") )\n        v36 = __fxstat(1, 0, v35);\n      else\n        v36 = __xstat(1, v37, v35);\n      ++v34;\n      LODWORD(v35[-1].__unused[2]) = v36;\n      v35 = (struct stat *)((char *)v35 + 152);\n    }\n    while ( v13 != v34 );\n    v38 = ptr;\n    v15 = 1;\n    if ( *ptr <= 0 )\n    {\n      v39 = 1;\n      v40 = 0LL;\n      v41 = 0LL;\n      do\n      {\n        if ( !*v38 )\n        {\n          if ( (v38[8] & 0xF000) == 0x8000 )\n            v40 += *((_QWORD *)v38 + 7);\n          else\n            v39 = 7;\n        }\n        ++v41;\n        v38 += 38;\n      }\n      while ( v13 != v41 );\n      goto LABEL_97;\n    }\nLABEL_33:\n    dword_60C32C = v15;\n    v4 = 0LL;\n    v16 = 1;\n    while ( 1 )\n    {\n      v7 = v49;\n      v11 = a4;\n      v20 = (const char *)sub_403720(a4, v49);\n      v21 = v20;\n      if ( !v20 )\n        break;\n      if ( v5 )\n      {\n        if ( strcmp(v5, \"-\") )\n        {\n          if ( *v20 )\n            goto LABEL_48;\nLABEL_53:\n          v25 = sub_4037B0(a4);\n          v26 = dcgettext(0LL, \"invalid zero-length file name\", 5);\n          v27 = sub_405650(0LL, 3LL, v5);\n          error(0, 0, \"%s:%lu: %s\", v27, v25, v26);\n          v16 = 0;\n          goto LABEL_41;\n        }\n        if ( strcmp(v20, \"-\") )\n        {\n          if ( *v21 )\n          {\n            if ( v13 )\n              goto LABEL_49;\n            v52 = ptr;\n            goto LABEL_38;\n          }\n          goto LABEL_53;\n        }\n        v23 = sub_405580(4LL, v21);\n        v24 = dcgettext(0LL, \"when reading file names from stdin, no file name of %s allowed\", 5);\n        error(0, 0, v24, v23);\n        if ( !*v21 )\n          goto LABEL_53;\n      }\n      else\n      {\n        if ( *v20 )\n        {\nLABEL_48:\n          v22 = 0LL;\n          if ( v13 )\nLABEL_49:\n            v22 = 38LL * (_QWORD)v4;\n          v52 = &ptr[v22];\n          if ( !strcmp(v21, \"-\") )\n          {\n            byte_60C328 = 1;\n            v19 = sub_402A20(0LL, v21, v52, -1LL);\nLABEL_40:\n            v16 &= v19;\n            goto LABEL_41;\n          }\nLABEL_38:\n          v17 = open(v21, 0);\n          if ( v17 == -1 || (fd = v17, v53 = sub_402A20(v17, v21, v52, 0LL), v18 = close(fd), v19 = v53, v18) )\n          {\n            v32 = sub_405650(0LL, 3LL, v21);\n            v33 = __errno_location();\n            error(0, *v33, \"%s\", v32);\n            v19 = 0;\n          }\n          goto LABEL_40;\n        }\n        v28 = dcgettext(0LL, \"invalid zero-length file name\", 5);\n        error(0, 0, \"%s\", v28);\n      }\n      v16 = 0;\nLABEL_41:\n      if ( !v13 )\n        *ptr = 1;\n      v4 = (char **)((char *)v4 + 1);\n    }\n    if ( LODWORD(stat_buf.st_dev) == 3 )\n      goto LABEL_116;\n    if ( LODWORD(stat_buf.st_dev) == 4 )\n    {\n      v16 = 0;\n      v5 = (const char *)sub_405650(0LL, 3LL, v5);\n      v6 = dcgettext(0LL, \"%s: read error\", 5);\n      v29 = __errno_location();\n      error(0, *v29, v6, v5);\n    }\n    else\n    {\n      if ( LODWORD(stat_buf.st_dev) != 2 )\n        __assert_fail(\"!\\\"unexpected error code from argv_iter\\\"\", \"src/wc.c\", 0x31Au, \"main\");\n      LODWORD(v6) = (unsigned __int8)v16 & (v5 == 0LL);\n      if ( (unsigned __int8)v16 & (v5 == 0LL) )\n      {\n        v16 &= v5 == 0LL;\n        if ( !sub_4037B0(a4) )\n        {\n          byte_60C328 = 1;\n          v16 = sub_402A20(0LL, 0LL, ptr, -1LL);\n        }\n      }\n    }\n    if ( v55 )\n      sub_405950(&v58);\n    if ( (unsigned __int64)sub_4037B0(a4) > 1 )\n    {\n      v30 = dcgettext(0LL, \"total\", 5);\n      sub_402850(qword_60C358, qword_60C350, qword_60C348, qword_60C340, qword_60C338, v30);\n    }\n    sub_4037D0(a4);\n    free(ptr);\n    if ( byte_60C328 && close(0) )\n    {\n      v7 = (struct stat *)(unsigned int)*__errno_location();\n      error(1, (int)v7, \"-\");\nLABEL_74:\n      if ( !byte_60C332 && !byte_60C331 && !byte_60C330 )\n      {\n        byte_60C331 = 1;\n        byte_60C333 = 1;\n        byte_60C334 = 1;\n      }\n      continue;\n    }\n    return (unsigned __int8)v16 ^ 1u;\n  }\n}\n", 
            "funcStartAddr": "0x401d80L", 
            "funcEndAddr": "0x402770L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x402770L", 
            "funcEndAddr": "0x40279bL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "void *sub_40279B()\n{\n  void *result; // rax\n\n  result = &unk_60C2C8;\n  if ( &unk_60C2C8 != &unk_60C2C8 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x40279bL", 
            "funcEndAddr": "0x4027baL", 
            "funcName": "sub_40279B"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4027BA()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4027baL", 
            "funcEndAddr": "0x4027f1L", 
            "funcName": "sub_4027BA"
        }, 
        {
            "decompiledFuncCode": "void *sub_4027F1()\n{\n  void *result; // rax\n\n  if ( !byte_60C308 )\n  {\n    while ( qword_60C310 < (unsigned __int64)(&qword_60BE48 - qword_60BE40 - 1) )\n      ((void (*)(void))qword_60BE40[++qword_60C310])();\n    result = sub_40279B();\n    byte_60C308 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4027f1L", 
            "funcEndAddr": "0x402848L", 
            "funcName": "sub_4027F1"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402848()\n{\n  return sub_4027BA();\n}\n", 
            "funcStartAddr": "0x402848L", 
            "funcEndAddr": "0x40284dL", 
            "funcName": "sub_402848"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_402850(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, const char *a6)\n{\n  __int64 v6; // r14\n  __int64 v7; // r13\n  __int64 v8; // r12\n  char *v9; // rbp\n  const char *v10; // rbx\n  __int64 v11; // rcx\n  char *v12; // rax\n  __int64 v13; // rax\n  __int64 v14; // rax\n  char *v15; // rsi\n  __int64 v16; // rax\n  char *v17; // rsi\n  __int64 v18; // rax\n  char *v19; // rsi\n  __int64 v20; // rax\n  __int64 v22; // [rsp+0h] [rbp-58h]\n\n  v6 = a3;\n  v7 = a4;\n  v8 = a5;\n  v9 = \"%*s\";\n  v10 = a6;\n  if ( byte_60C334 )\n  {\n    v20 = sub_4038F0(a1, &v22);\n    v9 = \" %*s\";\n    __printf_chk(1LL, \"%*s\", (unsigned int)dword_60C32C, v20);\n  }\n  if ( byte_60C333 )\n  {\n    v18 = sub_4038F0(a2, &v22);\n    v19 = v9;\n    v9 = \" %*s\";\n    __printf_chk(1LL, v19, (unsigned int)dword_60C32C, v18);\n  }\n  if ( byte_60C332 )\n  {\n    v16 = sub_4038F0(v6, &v22);\n    v17 = v9;\n    v9 = \" %*s\";\n    __printf_chk(1LL, v17, (unsigned int)dword_60C32C, v16);\n  }\n  if ( byte_60C331 )\n  {\n    v14 = sub_4038F0(v7, &v22);\n    v15 = v9;\n    v9 = \" %*s\";\n    __printf_chk(1LL, v15, (unsigned int)dword_60C32C, v14);\n  }\n  if ( byte_60C330 )\n  {\n    v13 = sub_4038F0(v8, &v22);\n    __printf_chk(1LL, v9, (unsigned int)dword_60C32C, v13);\n  }\n  if ( v10 )\n  {\n    if ( strchr(v10, 10) )\n      v10 = (const char *)sub_405650(0LL, 3LL, v10);\n    __printf_chk(1LL, \" %s\", v10, v11);\n  }\n  v12 = stdout->_IO_write_ptr;\n  if ( v12 >= stdout->_IO_write_end )\n  {\n    LODWORD(v12) = __overflow(stdout, 10);\n  }\n  else\n  {\n    stdout->_IO_write_ptr = v12 + 1;\n    *v12 = 10;\n  }\n  return (int)v12;\n}\n", 
            "funcStartAddr": "0x402850L", 
            "funcEndAddr": "0x402a1fL", 
            "funcName": "sub_402850"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402A20(int a1, char *a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbp\n  __int64 v5; // rbx\n  size_t v6; // rax\n  char v7; // r12\n  unsigned int v8; // er15\n  int v9; // eax\n  unsigned __int64 i; // rbx\n  unsigned __int64 v11; // rbp\n  __int64 v12; // rbx\n  __int64 v13; // r12\n  __int64 v14; // r13\n  bool j; // r15\n  __int64 v16; // rax\n  char *v17; // r14\n  wint_t v18; // ecx\n  __int64 v19; // rdx\n  mbstate_t v20; // r15\n  __int64 v21; // rax\n  int v22; // eax\n  wint_t v23; // edi\n  int v24; // eax\n  __int64 v25; // rbp\n  unsigned __int64 v26; // r15\n  unsigned __int64 v27; // rbx\n  __int64 v28; // r13\n  __int64 v29; // rax\n  char *v30; // r12\n  char *v31; // r14\n  unsigned __int16 v32; // ax\n  __int64 v33; // rax\n  __int64 v34; // r14\n  unsigned __int64 v35; // r12\n  unsigned __int64 v36; // r13\n  unsigned __int64 v37; // rsi\n  __off_t v38; // rbp\n  __int64 v39; // rax\n  unsigned __int64 v40; // rcx\n  __int64 v41; // rax\n  bool v42; // cc\n  unsigned __int64 v43; // rcx\n  __off_t v44; // r12\n  __int64 v46; // r13\n  int *v47; // rax\n  unsigned __int8 v48; // al\n  __int64 v49; // r12\n  unsigned __int64 v50; // r13\n  unsigned __int8 v51; // bl\n  unsigned __int8 v52; // al\n  __int64 v53; // r14\n  int *v54; // rax\n  __int64 v55; // rbx\n  int *v56; // rax\n  bool v57; // r15\n  unsigned __int64 v58; // rax\n  char *v59; // rbp\n  unsigned __int64 v60; // rbx\n  __int64 v61; // rdx\n  char *v62; // rax\n  unsigned __int64 v63; // rax\n  __int64 v64; // r12\n  char *v65; // rdi\n  __int64 v66; // rax\n  unsigned __int64 v67; // rax\n  __int64 v68; // rbx\n  int *v69; // rax\n  __int64 v70; // [rsp+8h] [rbp-40A0h]\n  __int64 cb; // [rsp+10h] [rbp-4098h]\n  wchar_t c; // [rsp+10h] [rbp-4098h]\n  unsigned __int8 cc; // [rsp+10h] [rbp-4098h]\n  unsigned __int8 ca; // [rsp+10h] [rbp-4098h]\n  __int64 v75; // [rsp+18h] [rbp-4090h]\n  unsigned __int64 v76; // [rsp+20h] [rbp-4088h]\n  __off_t v77; // [rsp+28h] [rbp-4080h]\n  unsigned __int64 v78; // [rsp+28h] [rbp-4080h]\n  int fd; // [rsp+38h] [rbp-4070h]\n  unsigned __int8 v80; // [rsp+3Fh] [rbp-4069h]\n  const char *v81; // [rsp+40h] [rbp-4068h]\n  char *v82; // [rsp+48h] [rbp-4060h]\n  wint_t wc; // [rsp+54h] [rbp-4054h]\n  mbstate_t ps; // [rsp+58h] [rbp-4050h]\n  char v85[16456]; // [rsp+60h] [rbp-4048h]\n\n  v4 = a4;\n  v5 = a3;\n  fd = a1;\n  v81 = a2;\n  v82 = a2;\n  if ( !a2 )\n    v82 = dcgettext(0LL, \"standard input\", 5);\n  v6 = __ctype_get_mb_cur_max();\n  v7 = byte_60C331;\n  if ( v6 <= 1 )\n  {\n    v80 = 0;\n    if ( !byte_60C331 )\n      v7 = byte_60C332;\n  }\n  else\n  {\n    v80 = byte_60C332;\n  }\n  if ( byte_60C333 || (v8 = (unsigned __int8)byte_60C330, byte_60C330) )\n  {\n    j__posix_fadvise(a1, 0LL, 0LL, 2);\n  }\n  else\n  {\n    if ( v7 == 1 && !v80 )\n    {\n      if ( !byte_60C334 )\n        goto LABEL_10;\n      j__posix_fadvise(a1, 0LL, 0LL, 2);\nLABEL_109:\n      if ( !byte_60C334 )\n      {\nLABEL_10:\n        v9 = *(_DWORD *)v5;\n        if ( *(_DWORD *)v5 > 0 )\n        {\n          v9 = __fxstat(1, a1, (struct stat *)(v5 + 8));\n          *(_DWORD *)v5 = v9;\n        }\n        if ( v9 )\n          goto LABEL_13;\n        if ( (*(_DWORD *)(v5 + 32) & 0xD000) != 0x8000 )\n          goto LABEL_13;\n        v35 = *(_QWORD *)(v5 + 56);\n        if ( (v35 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_13;\n        v78 = *(_QWORD *)(v5 + 56);\n        v36 = qword_60C320;\n        if ( v4 == -1 )\n        {\n          v38 = lseek(a1, 0LL, 1);\n          if ( !(v35 % v36) )\n          {\n            v37 = (unsigned __int64)~v38 >> 63;\nLABEL_72:\n            v39 = *(_QWORD *)(v5 + 64);\n            v40 = v39 - 1;\n            v41 = v39 + 1;\n            v42 = v40 <= 0x1FFFFFFFFFFFFFFFLL;\n            v43 = 513LL;\n            if ( v42 )\n              v43 = v41;\n            v44 = v35 - v35 % v43;\n            if ( v44 > v38 && (_BYTE)v37 && lseek(a1, v44, 1) >= 0 )\n            {\n              v77 = v44 - v38;\nLABEL_14:\n              j__posix_fadvise(a1, 0LL, 0LL, 2);\n              for ( i = v77; ; i += v33 )\n              {\n                v33 = sub_405BA0(a1, v85, 0x4000uLL);\n                if ( !v33 )\n                {\n                  v78 = i;\n                  goto LABEL_66;\n                }\n                if ( v33 == -1 )\n                  break;\n              }\n              v11 = 0LL;\n              v78 = i;\n              v13 = 0LL;\n              v34 = 0LL;\n              v55 = sub_405650(0LL, 3LL, v82);\n              v56 = __errno_location();\n              error(0, *v56, \"%s\", v55);\n              v70 = 0LL;\n              goto LABEL_89;\n            }\nLABEL_13:\n            v77 = 0LL;\n            goto LABEL_14;\n          }\n          if ( v38 > v78 )\n          {\n            v11 = 0LL;\n            v13 = 0LL;\n            v34 = 0LL;\n            v8 = 1;\n            v78 = 0LL;\n            v70 = 0LL;\n            goto LABEL_89;\n          }\n          v78 -= v38;\n        }\n        else if ( !(v35 % qword_60C320) )\n        {\n          LOBYTE(v37) = 1;\n          v38 = 0LL;\n          goto LABEL_72;\n        }\nLABEL_66:\n        v11 = 0LL;\n        v13 = 0LL;\n        v34 = 0LL;\n        v8 = 1;\n        v70 = 0LL;\n        goto LABEL_89;\n      }\n      goto LABEL_110;\n    }\n    j__posix_fadvise(a1, 0LL, 0LL, 2);\n    if ( v80 != 1 )\n    {\n      if ( v7 )\n        goto LABEL_109;\n      if ( !v80 )\n      {\nLABEL_110:\n        ca = v8;\n        v78 = 0LL;\n        v57 = 0;\n        v70 = 0LL;\n        while ( 1 )\n        {\n          v58 = sub_405BA0(fd, v85, 0x4000uLL);\n          if ( !v58 )\n          {\n            v11 = 0LL;\n            v13 = 0LL;\n            v34 = 0LL;\n            v8 = 1;\n            goto LABEL_89;\n          }\n          if ( v58 == -1LL )\n            break;\n          v78 += v58;\n          v59 = &v85[v58];\n          v60 = v58 / 0xF;\n          if ( v57 )\n          {\n            v64 = v70;\n            v65 = v85;\n            while ( 1 )\n            {\n              v66 = sub_4073A0(v65, 10LL, v59 - v65);\n              if ( !v66 )\n                break;\n              v65 = (char *)(v66 + 1);\n              ++v64;\n            }\n            v67 = v64 - v70;\n            v70 = v64;\n            v57 = v67 <= v60;\n          }\n          else if ( v59 == v85 )\n          {\n            v57 = 1;\n          }\n          else\n          {\n            v61 = v70;\n            v62 = v85;\n            do\n              v61 += *(++v62 - 1) == 10;\n            while ( v59 != v62 );\n            v63 = v61 - v70;\n            v70 = v61;\n            v57 = v63 <= v60;\n          }\n        }\n        v11 = 0LL;\n        v8 = ca;\n        v13 = 0LL;\n        v34 = 0LL;\n        v68 = sub_405650(0LL, 3LL, v82);\n        v69 = __errno_location();\n        error(0, *v69, \"%s\", v68);\n        goto LABEL_89;\n      }\n    }\n  }\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    v25 = 0LL;\n    v78 = 0LL;\n    v26 = 0LL;\n    v70 = 0LL;\n    v27 = 0LL;\n    v28 = 0LL;\n    while ( 2 )\n    {\n      v29 = sub_405BA0(a1, v85, 0x4000uLL);\n      if ( v29 )\n      {\n        if ( v29 != -1 )\n        {\n          v78 += v29;\n          v30 = v85;\n          v31 = &v85[v29];\nLABEL_49:\n          switch ( *(++v30 - 1) )\n          {\n            case 9:\n              v26 = (v26 & 0xFFFFFFFFFFFFFFF8LL) + 8;\n              goto LABEL_54;\n            case 10:\n              ++v70;\n              goto LABEL_51;\n            case 11:\n              goto LABEL_54;\n            case 12:\n            case 13:\nLABEL_51:\n              if ( v27 < v26 )\n                v27 = v26;\n              v26 = 0LL;\n              goto LABEL_54;\n            case 32:\n              ++v26;\n              goto LABEL_54;\n            default:\n              cc = *(v30 - 1);\n              v32 = (*__ctype_b_loc())[cc];\n              if ( !(v32 & 0x4000) )\n                goto LABEL_55;\n              ++v26;\n              if ( v32 & 0x2000 )\n              {\nLABEL_54:\n                v25 += v28;\n                v28 = 0LL;\n              }\n              else\n              {\n                v28 = 1LL;\n              }\nLABEL_55:\n              if ( v30 == v31 )\n                continue;\n              goto LABEL_49;\n          }\n        }\n        v52 = v28;\n        v50 = v27;\n        v51 = v52;\n        v49 = v25;\n        v11 = v26;\n        v8 = 0;\n        v53 = sub_405650(0LL, 3LL, v82);\n        v54 = __errno_location();\n        error(0, *v54, \"%s\", v53);\n      }\n      else\n      {\n        v48 = v28;\n        v49 = v25;\n        v50 = v27;\n        v11 = v26;\n        v51 = v48;\n        v8 = 1;\n      }\n      break;\n    }\n    if ( v50 >= v11 )\n      v11 = v50;\n    v34 = v49 + v51;\n    v13 = 0LL;\n  }\n  else\n  {\n    v11 = 0LL;\n    ps = 0LL;\n    v12 = 0LL;\n    v13 = 0LL;\n    v76 = 0LL;\n    v78 = 0LL;\n    v75 = 0LL;\n    v70 = 0LL;\n    v14 = 0LL;\n    for ( j = 0; ; j = 1 )\n    {\nLABEL_18:\n      v16 = sub_405BA0(fd, &v85[v14], 0x4000 - v14);\n      if ( !v16 )\n      {\n        v8 = 1;\n        goto LABEL_86;\n      }\n      if ( v16 == -1 )\n        break;\n      v78 += v16;\n      v14 += v16;\n      v17 = v85;\n      if ( j )\n        goto LABEL_34;\nLABEL_21:\n      v18 = *v17;\n      if ( ((unsigned int)dword_408980[((unsigned __int8)*v17 >> 5) & 7] >> *v17) & 1 )\n      {\n        wc = *v17;\n        ++v13;\n        v19 = 1LL;\nLABEL_23:\n        v17 += v19;\n        v14 -= v19;\n        switch ( v18 )\n        {\n          case 9u:\n            v11 = (v11 & 0xFFFFFFFFFFFFFFF8LL) + 8;\n            goto LABEL_31;\n          case 0xAu:\n            ++v70;\n            break;\n          case 0xBu:\n            goto LABEL_31;\n          case 0xCu:\n          case 0xDu:\n            break;\n          case 0x20u:\n            ++v11;\n            goto LABEL_31;\n          default:\n            v23 = v18;\n            goto LABEL_38;\n        }\n        if ( v76 >= v11 )\n          v11 = v76;\n        v76 = v11;\n        v11 = 0LL;\nLABEL_31:\n        v75 += v12;\n        v12 = 0LL;\n        goto LABEL_32;\n      }\nLABEL_34:\n      while ( 1 )\n      {\n        v20 = ps;\n        v21 = sub_407320((wchar_t *)&wc, v17);\n        if ( v21 == -2 )\n          break;\n        if ( v21 == -1 )\n        {\n          ++v17;\n          --v14;\n          j = 1;\n        }\n        else\n        {\n          cb = v21;\n          v22 = mbsinit(&ps);\n          v19 = cb;\n          j = v22 == 0;\n          ++v13;\n          if ( cb )\n          {\n            v18 = wc;\n            goto LABEL_23;\n          }\n          wc = 0;\n          ++v17;\n          v23 = 0;\n          v18 = 0;\n          --v14;\nLABEL_38:\n          c = v18;\n          if ( iswprint(v23) )\n          {\n            v24 = wcwidth(c);\n            if ( v24 > 0 )\n              v11 += v24;\n            if ( iswspace(wc) )\n              goto LABEL_31;\n            v12 = 1LL;\n          }\n        }\nLABEL_32:\n        if ( !v14 )\n          goto LABEL_18;\n        if ( !j )\n          goto LABEL_21;\n      }\n      ps = v20;\n      if ( v14 )\n      {\n        if ( v14 == 0x4000 )\n        {\n          ++v17;\n          v14 = 0x3FFFLL;\n        }\n        __memmove_chk(v85, v17, v14, 16385LL);\n      }\n    }\n    v8 = 0;\n    v46 = sub_405650(0LL, 3LL, v82);\n    v47 = __errno_location();\n    error(0, *v47, \"%s\", v46);\nLABEL_86:\n    if ( v76 >= v11 )\n      v11 = v76;\n    v34 = v12 + v75;\n  }\nLABEL_89:\n  if ( (unsigned __int8)byte_60C332 > v80 )\n    v13 = v78;\n  sub_402850(v70, v34, v13, v78, v11, v81);\n  qword_60C358 += v70;\n  qword_60C350 += v34;\n  qword_60C348 += v13;\n  qword_60C340 += v78;\n  if ( qword_60C338 < v11 )\n    qword_60C338 = v11;\n  return v8;\n}\n", 
            "funcStartAddr": "0x402a20L", 
            "funcEndAddr": "0x403342L", 
            "funcName": "sub_402A20"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_403350(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  const char **v16; // rax\n  char *v17; // rbp\n  char *v18; // rax\n  char *v19; // rax\n  char *v20; // r12\n  char *v21; // rax\n  char *v22; // rax\n  char *v23; // rax\n  char *v24; // rax\n  char *v25; // rax\n  char *v26; // rax\n  __int64 v27; // rcx\n  const char *v28; // [rsp+0h] [rbp-88h]\n  const char *v29; // [rsp+8h] [rbp-80h]\n  const char *v30; // [rsp+10h] [rbp-78h]\n  const char *v31; // [rsp+18h] [rbp-70h]\n  const char *v32; // [rsp+20h] [rbp-68h]\n  const char *v33; // [rsp+28h] [rbp-60h]\n  const char *v34; // [rsp+30h] [rbp-58h]\n  const char *v35; // [rsp+38h] [rbp-50h]\n  const char *v36; // [rsp+40h] [rbp-48h]\n  const char *v37; // [rsp+48h] [rbp-40h]\n  const char *v38; // [rsp+50h] [rbp-38h]\n  const char *v39; // [rsp+58h] [rbp-30h]\n  __int64 v40; // [rsp+60h] [rbp-28h]\n  __int64 v41; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_60C370;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]...\\n  or:  %s [OPTION]... --files0-from=F\\n\", 5);\n  __printf_chk(1LL, v3, v1, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"Print newline, word, and byte counts for each FILE, and a total line if\\n\"\n         \"more than one FILE is specified.  A word is a non-zero-length sequence of\\n\"\n         \"characters delimited by white space.\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"The options below may be used to select which counts are printed, always in\\n\"\n         \"the following order: newline, word, character, byte, maximum line length.\\n\"\n         \"  -c, --bytes            print the byte counts\\n\"\n         \"  -m, --chars            print the character counts\\n\"\n         \"  -l, --lines            print the newline counts\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"      --files0-from=F    read input from the files specified by\\n\"\n          \"                           NUL-terminated names in file F;\\n\"\n          \"                           If F is - then read names from standard input\\n\"\n          \"  -L, --max-line-length  print the maximum display width\\n\"\n          \"  -w, --words            print the word counts\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v15, v14);\n  v28 = \"[\";\n  v16 = &v28;\n  v29 = \"test invocation\";\n  v30 = \"coreutils\";\n  v31 = \"Multi-call invocation\";\n  v32 = \"sha224sum\";\n  v33 = \"sha2 utilities\";\n  v34 = \"sha256sum\";\n  v35 = \"sha2 utilities\";\n  v36 = \"sha384sum\";\n  v37 = \"sha2 utilities\";\n  v38 = \"sha512sum\";\n  v39 = \"sha2 utilities\";\n  v40 = 0LL;\n  v41 = 0LL;\n  do\n    v16 += 2;\n  while ( *v16 && strcmp(\"wc\", *v16) );\n  v17 = (char *)v16[1];\n  if ( v17 )\n  {\n    v18 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v18, &unk_407F6C, \"https://www.gnu.org/software/coreutils/\");\n    v19 = setlocale(5, 0LL);\n    if ( !v19 || !strncmp(v19, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v23 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v23, &unk_407F6C, \"https://www.gnu.org/software/coreutils/\");\n    v24 = setlocale(5, 0LL);\n    if ( !v24 || !strncmp(v24, \"en_\", 3uLL) )\n    {\n      v17 = \"wc\";\n      v25 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v20 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v25, \"https://www.gnu.org/software/coreutils/\", \"wc\");\nLABEL_12:\n      v22 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v22, v17, v20);\nLABEL_3:\n      exit(status);\n    }\n    v17 = \"wc\";\n  }\n  v26 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v26, \"wc\", v27);\nLABEL_10:\n  v20 = \"Multi-call invocation\" + 10;\n  v21 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v21, \"https://www.gnu.org/software/coreutils/\", \"wc\");\n  if ( v17 != \"wc\" )\n    v20 = \"\";\n  goto LABEL_12;\n}\n", 
            "funcStartAddr": "0x403350L", 
            "funcEndAddr": "0x4036adL", 
            "funcName": "sub_403350"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_4036B0(__int64 a1)\n{\n  _QWORD *result; // rax\n\n  result = malloc(0x30uLL);\n  if ( result )\n  {\n    *result = 0LL;\n    result[4] = a1;\n    result[5] = a1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4036b0L", 
            "funcEndAddr": "0x4036d4L", 
            "funcName": "sub_4036B0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_4036E0(__int64 a1)\n{\n  _QWORD *result; // rax\n\n  result = malloc(0x30uLL);\n  if ( result )\n  {\n    *result = a1;\n    result[2] = 0LL;\n    result[3] = 0LL;\n    result[1] = 0LL;\n    result[4] = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4036e0L", 
            "funcEndAddr": "0x403718L", 
            "funcName": "sub_4036E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403720(__int64 a1, _DWORD *a2)\n{\n  __int64 result; // rax\n  __int64 *v3; // rdx\n\n  if ( *(_QWORD *)a1 )\n  {\n    if ( getdelim((char **)(a1 + 16), (size_t *)(a1 + 24), 0, *(FILE **)a1) < 0 )\n    {\n      *a2 = (unsigned int)feof(*(FILE **)a1) < 1 ? 4 : 2;\n      result = 0LL;\n    }\n    else\n    {\n      *a2 = 1;\n      result = *(_QWORD *)(a1 + 16);\n      ++*(_QWORD *)(a1 + 8);\n    }\n  }\n  else\n  {\n    v3 = *(__int64 **)(a1 + 40);\n    result = *v3;\n    if ( *v3 )\n    {\n      *a2 = 1;\n      *(_QWORD *)(a1 + 40) = v3 + 1;\n    }\n    else\n    {\n      *a2 = 2;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403720L", 
            "funcEndAddr": "0x4037a7L", 
            "funcName": "sub_403720"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4037B0(_QWORD *a1)\n{\n  __int64 result; // rax\n\n  if ( *a1 )\n    result = a1[1];\n  else\n    result = (a1[5] - a1[4]) >> 3;\n  return result;\n}\n", 
            "funcStartAddr": "0x4037b0L", 
            "funcEndAddr": "0x4037cdL", 
            "funcName": "sub_4037B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4037D0(void *ptr)\n{\n  if ( *(_QWORD *)ptr )\n    free(*((void **)ptr + 2));\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x4037d0L", 
            "funcEndAddr": "0x4037ecL", 
            "funcName": "sub_4037D0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403810()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_4077E0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60C360 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60C368 )\n      {\n        v5 = sub_405620();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_4077E0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x403810L", 
            "funcEndAddr": "0x4038aeL", 
            "funcName": "sub_403810"
        }, 
        {
            "decompiledFuncCode": "int j__posix_fadvise(int fd, off_t offset, off_t len, int advise)\n{\n  return posix_fadvise(fd, offset, len, advise);\n}\n", 
            "funcStartAddr": "0x4038b0L", 
            "funcEndAddr": "0x4038b5L", 
            "funcName": "j_.posix_fadvise"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4038F0(unsigned __int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  while ( 1 )\n  {\n    *(_BYTE *)--v2 = a1 % 0xA + 48;\n    if ( a1 <= 9 )\n      break;\n    a1 /= 0xAuLL;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x4038f0L", 
            "funcEndAddr": "0x403938L", 
            "funcName": "sub_4038F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403970(__int64 a1, const void **a2)\n{\n  const void **v2; // rbx\n  __int64 v3; // rax\n  const void *v4; // rsi\n  size_t v5; // rdx\n  __int64 result; // rax\n  void *v7; // rax\n\n  v2 = a2;\n  v3 = (__int64)(a2 + 3);\n  v4 = *a2;\n  v5 = (size_t)v2[1];\n  if ( v4 == (const void *)v3 )\n  {\n    v7 = memcpy((void *)(a1 + 24), v4, v5);\n    v5 = (size_t)v2[1];\n    *(_QWORD *)a1 = v7;\n  }\n  else\n  {\n    *(_QWORD *)a1 = v4;\n  }\n  result = *((unsigned __int8 *)v2 + 16);\n  *(_QWORD *)(a1 + 8) = v5;\n  *(_BYTE *)(a1 + 16) = result;\n  if ( (_BYTE)result )\n  {\n    result = *((unsigned int *)v2 + 5);\n    *(_DWORD *)(a1 + 20) = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403970L", 
            "funcEndAddr": "0x4039c6L", 
            "funcName": "sub_403970"
        }, 
        {
            "decompiledFuncCode": "int sub_4039F0()\n{\n  int result; // eax\n  double v1; // [rsp+8h] [rbp-80h]\n  char v2; // [rsp+10h] [rbp-78h]\n  int v3; // [rsp+78h] [rbp-10h]\n\n  v1 = (double)(int)sysconf(85);\n  result = sysconf(30);\n  if ( v1 < 0.0 || (double)result < 0.0 )\n  {\n    result = sysinfo((struct sysinfo *)&v2);\n    if ( !result )\n      result = v3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4039f0L", 
            "funcEndAddr": "0x403aabL", 
            "funcName": "sub_4039F0"
        }, 
        {
            "decompiledFuncCode": "int sub_403AB0()\n{\n  int result; // eax\n  double v1; // [rsp+8h] [rbp-80h]\n  char v2; // [rsp+10h] [rbp-78h]\n  int v3; // [rsp+78h] [rbp-10h]\n\n  v1 = (double)(int)sysconf(86);\n  result = sysconf(30);\n  if ( v1 < 0.0 || (double)result < 0.0 )\n  {\n    if ( sysinfo((struct sysinfo *)&v2) )\n      result = sub_4039F0();\n    else\n      result = v3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403ab0L", 
            "funcEndAddr": "0x403ba6L", 
            "funcName": "sub_403AB0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_403BB0(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60C370 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x403bb0L", 
            "funcEndAddr": "0x403c49L", 
            "funcName": "sub_403BB0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_403C50(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_4078A0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_408A01;\n      if ( !v5 )\n        v2 = (char *)&unk_4089F6;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_4089FD;\n    if ( !v5 )\n      v2 = (char *)&unk_4089FA;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x403c50L", 
            "funcEndAddr": "0x403d42L", 
            "funcName": "sub_403C50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_403D50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403D50((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403D50((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403D50((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403D50((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_407320((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403D50((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403D50((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403C50(\"`\", v11);\n        v47 = sub_403C50(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_403D50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403D50((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403D50((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403D50((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403D50((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_407320((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403D50((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403D50((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403C50(\"`\", v11);\n        v47 = sub_403C50(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401d50L", 
            "funcEndAddr": "0x401d55L", 
            "funcName": "sub_403D50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_403D50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403D50((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403D50((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403D50((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403D50((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_407320((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403D50((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403D50((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403C50(\"`\", v11);\n        v47 = sub_403C50(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_403D50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403D50((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403D50((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403D50((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403D50((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403D50((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403D50((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_407320((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403D50((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403D50((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403C50(\"`\", v11);\n        v47 = sub_403C50(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401d50L", 
            "funcEndAddr": "0x401d55L", 
            "funcName": "sub_403D50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404F80(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_60C298;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60C2B0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4063F0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60C298 == &xmmword_60C2A0 )\n    {\n      v8 = (__int128 *)sub_406200(0LL, v10);\n      off_60C298 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60C2A0);\n    }\n    else\n    {\n      off_60C298 = (__int128 *)sub_406200(off_60C298, v10);\n      v8 = off_60C298;\n    }\n    memset(&v8[dword_60C2B0], 0, 16LL * ((int)a1 + 1 - dword_60C2B0));\n    dword_60C2B0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_403D50(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60C380 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4061A0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_403D50(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_404F80(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_60C298;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60C2B0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4063F0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60C298 == &xmmword_60C2A0 )\n    {\n      v8 = (__int128 *)sub_406200(0LL, v10);\n      off_60C298 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60C2A0);\n    }\n    else\n    {\n      off_60C298 = (__int128 *)sub_406200(off_60C298, v10);\n      v8 = off_60C298;\n    }\n    memset(&v8[dword_60C2B0], 0, 16LL * ((int)a1 + 1 - dword_60C2B0));\n    dword_60C2B0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_403D50(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60C380 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4061A0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_403D50(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x401d55L", 
            "funcEndAddr": "0x401d5aL", 
            "funcName": "sub_404F80"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404F80(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_60C298;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60C2B0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4063F0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60C298 == &xmmword_60C2A0 )\n    {\n      v8 = (__int128 *)sub_406200(0LL, v10);\n      off_60C298 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60C2A0);\n    }\n    else\n    {\n      off_60C298 = (__int128 *)sub_406200(off_60C298, v10);\n      v8 = off_60C298;\n    }\n    memset(&v8[dword_60C2B0], 0, 16LL * ((int)a1 + 1 - dword_60C2B0));\n    dword_60C2B0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_403D50(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60C380 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4061A0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_403D50(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_404F80(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_60C298;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60C2B0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4063F0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60C298 == &xmmword_60C2A0 )\n    {\n      v8 = (__int128 *)sub_406200(0LL, v10);\n      off_60C298 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60C2A0);\n    }\n    else\n    {\n      off_60C298 = (__int128 *)sub_406200(off_60C298, v10);\n      v8 = off_60C298;\n    }\n    memset(&v8[dword_60C2B0], 0, 16LL * ((int)a1 + 1 - dword_60C2B0));\n    dword_60C2B0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_403D50(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60C380 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4061A0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_403D50(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x401d55L", 
            "funcEndAddr": "0x401d5aL", 
            "funcName": "sub_404F80"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4054A0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404F80(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4054A0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404F80(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401d5aL", 
            "funcEndAddr": "0x401d5fL", 
            "funcName": "sub_4054A0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4054A0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404F80(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4054A0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404F80(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401d5aL", 
            "funcEndAddr": "0x401d5fL", 
            "funcName": "sub_4054A0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405510(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_404F80(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_405510(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_404F80(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401d5fL", 
            "funcEndAddr": "0x401d64L", 
            "funcName": "sub_405510"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405510(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_404F80(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_405510(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_404F80(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401d5fL", 
            "funcEndAddr": "0x401d64L", 
            "funcName": "sub_405510"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405580(int a1, char *a2)\n{\n  return sub_4054A0(0LL, a1, a2);\n}\n", 
            "funcStartAddr": "0x405580L", 
            "funcEndAddr": "0x40558cL", 
            "funcName": "sub_405580"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4055A0(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_60C4B0;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60C480);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60C490);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_60C4A0);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_404F80(0LL, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x4055a0L", 
            "funcEndAddr": "0x405610L", 
            "funcName": "sub_4055A0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405620(char *a1)\n{\n  return sub_4055A0(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x405620L", 
            "funcEndAddr": "0x405631L", 
            "funcName": "sub_405620"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405650(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404F80(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_405650(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404F80(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401d64L", 
            "funcEndAddr": "0x401d69L", 
            "funcName": "sub_405650"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405650(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404F80(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_405650(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404F80(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401d64L", 
            "funcEndAddr": "0x401d69L", 
            "funcName": "sub_405650"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4056C0(__int64 a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_60C480);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60C490);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60C4A0);\n  v9 = qword_60C4B0;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_404F80(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x4056c0L", 
            "funcEndAddr": "0x40572cL", 
            "funcName": "sub_4056C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4057F0(__int64 a1)\n{\n  __int64 v1; // rdx\n  _QWORD *v2; // rbx\n  __int64 v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rcx\n  __int64 v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9; // rcx\n  __int64 v10; // rdi\n  _QWORD *v11; // rdx\n  __int64 *v12; // rdx\n  __int64 v13; // rax\n  unsigned __int64 result; // rax\n\n  v1 = *(_QWORD *)(a1 + 48);\n  v2 = (_QWORD *)a1;\n  v3 = *(_QWORD *)(a1 + 40);\n  v4 = *(_QWORD *)(a1 + 48) - v3 - 1;\n  if ( v1 == v3 )\n    *(_BYTE *)(a1 + 104) |= 2u;\n  v5 = *(_QWORD *)(a1 + 72);\n  v6 = v1 + v5;\n  v7 = *(_QWORD *)(a1 + 56);\n  v8 = ~v5 & v6;\n  v9 = *(_QWORD *)(a1 + 32);\n  v10 = *(_QWORD *)(a1 + 56);\n  v2[6] = v8;\n  if ( v8 - v9 > (unsigned __int64)(v10 - v9) )\n  {\n    v2[6] = v7;\n    v8 = v7;\n  }\n  v2[5] = v8;\n  v11 = (_QWORD *)v2[17];\n  if ( v2[18] - (_QWORD)v11 <= 7uLL )\n  {\n    obstack_newchunk(v2 + 14, 8LL);\n    v11 = (_QWORD *)v2[17];\n  }\n  *v11 = v3;\n  v12 = (__int64 *)v2[28];\n  v13 = v2[29];\n  v2[17] += 8LL;\n  result = v13 - (_QWORD)v12;\n  if ( result <= 7 )\n  {\n    result = obstack_newchunk(v2 + 25, 8LL);\n    v12 = (__int64 *)v2[28];\n  }\n  *v12 = v4;\n  v2[28] += 8LL;\n  ++*v2;\n  return result;\n}\n", 
            "funcStartAddr": "0x4057f0L", 
            "funcEndAddr": "0x4058d9L", 
            "funcName": "sub_4057F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4058E0(_QWORD *a1)\n{\n  _QWORD *v1; // rbx\n  __int64 v2; // rdi\n\n  v1 = a1;\n  *a1 = 0LL;\n  v2 = (__int64)(a1 + 3);\n  *(_QWORD *)(v2 - 16) = 0LL;\n  *(_QWORD *)(v2 - 8) = 0LL;\n  obstack_begin(v2, 0LL, 0LL, malloc, free);\n  obstack_begin(v1 + 14, 0LL, 0LL, malloc, free);\n  return obstack_begin(v1 + 25, 0LL, 0LL, malloc, free);\n}\n", 
            "funcStartAddr": "0x4058e0L", 
            "funcEndAddr": "0x405947L", 
            "funcName": "sub_4058E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405950(__int64 a1)\n{\n  obstack_free((struct obstack *)(a1 + 24), 0LL);\n  obstack_free((struct obstack *)(a1 + 112), 0LL);\n  obstack_free((struct obstack *)(a1 + 200), 0LL);\n}\n", 
            "funcStartAddr": "0x405950L", 
            "funcEndAddr": "0x405979L", 
            "funcName": "sub_405950"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_405980(FILE *stream, _QWORD *a2)\n{\n  _QWORD *v2; // rbx\n  int i; // eax\n  _BYTE *v4; // rdx\n  _BYTE *v5; // rdx\n  _BYTE *v6; // rax\n  _QWORD *v7; // rdx\n  __int64 v8; // rsi\n  __int64 v9; // rdx\n  __int64 v10; // rcx\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  __int64 v13; // rax\n  __int64 v14; // rcx\n  __int64 v15; // rdx\n  __int64 v16; // rsi\n  __int64 v17; // rcx\n  __int64 v18; // rax\n  __int64 v19; // rdx\n  __int64 v20; // rax\n  __int64 v21; // rcx\n  int v23; // [rsp+Ch] [rbp-1Ch]\n\n  v2 = a2;\nLABEL_3:\n  for ( i = fgetc(stream); i != -1; i = fgetc(stream) )\n  {\n    v4 = (_BYTE *)a2[6];\n    if ( (_BYTE *)a2[7] == v4 )\n    {\n      v23 = i;\n      obstack_newchunk(a2 + 3, 1LL);\n      v5 = (_BYTE *)a2[6];\n      a2[6] = v5 + 1;\n      *v5 = v23;\n      if ( v23 )\n        goto LABEL_3;\n    }\n    else\n    {\n      a2[6] = v4 + 1;\n      *v4 = i;\n      if ( i )\n        goto LABEL_3;\n    }\n    sub_4057F0((__int64)a2);\n  }\n  v6 = (_BYTE *)a2[6];\n  if ( v6 != (_BYTE *)a2[5] )\n  {\n    if ( v6 == (_BYTE *)a2[7] )\n    {\n      obstack_newchunk(a2 + 3, 1LL);\n      v6 = (_BYTE *)a2[6];\n    }\n    a2[6] = v6 + 1;\n    *v6 = 0;\n    sub_4057F0((__int64)a2);\n  }\n  v7 = (_QWORD *)a2[17];\n  if ( a2[18] - (_QWORD)v7 <= 7uLL )\n  {\n    obstack_newchunk(a2 + 14, 8LL);\n    v7 = (_QWORD *)a2[17];\n  }\n  *v7 = 0LL;\n  v8 = a2[16];\n  v9 = v2[17] + 8LL;\n  v2[17] = v9;\n  if ( v9 == v8 )\n    *((_BYTE *)v2 + 192) |= 2u;\n  v10 = v2[20];\n  v11 = v9 + v10;\n  v12 = v2[15];\n  v13 = ~v10 & v11;\n  v14 = v2[18];\n  v2[17] = v13;\n  if ( v13 - v12 > (unsigned __int64)(v14 - v12) )\n  {\n    v2[17] = v14;\n    v13 = v14;\n  }\n  v2[1] = v8;\n  v15 = v2[28];\n  v16 = v2[27];\n  v2[16] = v13;\n  if ( v15 == v16 )\n    *((_BYTE *)v2 + 280) |= 2u;\n  v17 = v2[31];\n  v18 = v15 + v17;\n  v19 = v2[26];\n  v20 = ~v17 & v18;\n  v21 = v2[29];\n  v2[28] = v20;\n  if ( v20 - v19 > (unsigned __int64)(v21 - v19) )\n  {\n    v2[28] = v21;\n    v20 = v21;\n  }\n  v2[27] = v20;\n  v2[2] = v16;\n  return ferror(stream) == 0;\n}\n", 
            "funcStartAddr": "0x405980L", 
            "funcEndAddr": "0x405b93L", 
            "funcName": "sub_405980"
        }, 
        {
            "decompiledFuncCode": "ssize_t __fastcall sub_405BA0(int fd, void *buf, size_t nbytes)\n{\n  size_t v3; // rbx\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  v3 = nbytes;\n  while ( 1 )\n  {\n    v4 = read(fd, buf, v3);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( v3 <= 0x7FFFE000 || v5 != 22 )\n        return v4;\n      v3 = 2147475456LL;\n    }\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x405ba0L", 
            "funcEndAddr": "0x405bfeL", 
            "funcName": "sub_405BA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405C00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_405C00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401d69L", 
            "funcEndAddr": "0x401d6eL", 
            "funcName": "sub_405C00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405C00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_405C00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401d69L", 
            "funcEndAddr": "0x401d6eL", 
            "funcName": "sub_405C00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406000(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_405C00(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_405C00(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x406000L", 
            "funcEndAddr": "0x406060L", 
            "funcName": "sub_406000"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406060(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_405C00(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_405C00(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x406060L", 
            "funcEndAddr": "0x40611cL", 
            "funcName": "sub_406060"
        }, 
        {
            "decompiledFuncCode": "int sub_406120()\n{\n  char *v0; // rax\n  __int64 v1; // rcx\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\", v1);\n  v2 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v2, &unk_407F6C, \"https://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v4, v3);\n}\n", 
            "funcStartAddr": "0x406120L", 
            "funcEndAddr": "0x406194L", 
            "funcName": "sub_406120"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4061A0(size_t a1, __int64 a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_4063F0(a1, a2, v3);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4061a0L", 
            "funcEndAddr": "0x4061baL", 
            "funcName": "sub_4061A0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_406200(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_4063F0(a1, a2, v3);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406200L", 
            "funcEndAddr": "0x406236L", 
            "funcName": "sub_406200"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4063A0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_4061A0(n, n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x4063a0L", 
            "funcEndAddr": "0x4063c8L", 
            "funcName": "sub_4063A0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4063F0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x4063f0L", 
            "funcEndAddr": "0x406421L", 
            "funcName": "sub_4063F0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_406430(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_4064B0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406430L", 
            "funcEndAddr": "0x4064abL", 
            "funcName": "sub_406430"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4064B0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_4064F0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x4064b0L", 
            "funcEndAddr": "0x4064f0L", 
            "funcName": "sub_4064B0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4064F0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x4064f0L", 
            "funcEndAddr": "0x406547L", 
            "funcName": "sub_4064F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406550(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x406550L", 
            "funcEndAddr": "0x40662fL", 
            "funcName": "sub_406550"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406630(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406630L", 
            "funcEndAddr": "0x406c4cL", 
            "funcName": "sub_406630"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406C50(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_406550(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_406550((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_406630(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_406630(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_406630(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x406c50L", 
            "funcEndAddr": "0x407216L", 
            "funcName": "sub_406C50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407220(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_60C4C0 = dword_60C2BC;\n  dword_60C4C4 = dword_60C2B8;\n  result = sub_406C50(a1, a2, a3, a4, a5, a6, &dword_60C4C0, a7);\n  dword_60C2BC = dword_60C4C0;\n  qword_60C500 = qword_60C4D0;\n  dword_60C2B4 = dword_60C4C8;\n  return result;\n}\n", 
            "funcStartAddr": "0x407220L", 
            "funcEndAddr": "0x407276L", 
            "funcName": "sub_407220"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407280(int a1, __int64 a2, char *a3)\n{\n  return sub_407220(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x407280L", 
            "funcEndAddr": "0x407298L", 
            "funcName": "sub_407280"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4072A0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_407220(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x4072a0L", 
            "funcEndAddr": "0x4072b3L", 
            "funcName": "sub_4072A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4072C0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_406C50(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x4072c0L", 
            "funcEndAddr": "0x4072d5L", 
            "funcName": "sub_4072C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4072E0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_407220(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x4072e0L", 
            "funcEndAddr": "0x4072f6L", 
            "funcName": "sub_4072E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407300(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_406C50(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x407300L", 
            "funcEndAddr": "0x407318L", 
            "funcName": "sub_407300"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_407320(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_407840(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x407320L", 
            "funcEndAddr": "0x40739aL", 
            "funcName": "sub_407320"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4073A0(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax\n  __int64 v4; // r9\n  __int64 v5; // rcx\n  _BYTE *v6; // rdi\n\n  if ( !a3 )\n    return 0LL;\n  if ( (unsigned __int8)a1 & 7 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( !((unsigned __int8)a1 & 7) )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && !(((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( ((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = (__int64)(a1 + 1);\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = (_BYTE *)v5;\n      if ( (_BYTE *)v5 == v6 )\n        break;\n      if ( *(_BYTE *)(++v5 - 1) == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x4073a0L", 
            "funcEndAddr": "0x4074a4L", 
            "funcName": "sub_4073A0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4074B0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  __fprintf_chk(stderr, 1LL, 4233024LL, v0);\n  exit(status);\n}\n", 
            "funcStartAddr": "0x4074b0L", 
            "funcEndAddr": "0x4074ebL", 
            "funcName": "sub_4074B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4074F0(__int64 a1, __int64 a2)\n{\n  __int64 (__fastcall *v2)(__int64); // rax\n  __int64 result; // rax\n\n  v2 = *(__int64 (__fastcall **)(__int64))(a1 + 56);\n  if ( *(_BYTE *)(a1 + 80) & 1 )\n    result = v2(*(_QWORD *)(a1 + 72));\n  else\n    result = v2(a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x4074f0L", 
            "funcEndAddr": "0x407505L", 
            "funcName": "sub_4074F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407510(__int64 a1, __int64 a2)\n{\n  __int64 (__fastcall *v2)(__int64); // rax\n  __int64 result; // rax\n\n  v2 = *(__int64 (__fastcall **)(__int64))(a1 + 64);\n  if ( *(_BYTE *)(a1 + 80) & 1 )\n    result = v2(*(_QWORD *)(a1 + 72));\n  else\n    result = v2(a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x407510L", 
            "funcEndAddr": "0x407525L", 
            "funcName": "sub_407510"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n", 
            "funcStartAddr": "0x4075a0L", 
            "funcEndAddr": "0x4075b3L", 
            "funcName": "_obstack_begin"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n", 
            "funcStartAddr": "0x4075a0L", 
            "funcEndAddr": "0x4075b3L", 
            "funcName": "_obstack_begin"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n", 
            "funcStartAddr": "0x4075a0L", 
            "funcEndAddr": "0x4075b3L", 
            "funcName": "_obstack_begin"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_begin_1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // rbp\n  __int64 v7; // r12\n  _QWORD *v8; // rax\n  __int64 v9; // rbp\n  __int64 v10; // rdx\n  char *v11; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) |= 1u;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  *(_QWORD *)(a1 + 72) = a6;\n  if ( !a3 )\n    JUMPOUT(0x4075A0LL);\n  v6 = a3;\n  v7 = a3 - 1;\n  *(_QWORD *)(a1 + 48) = a3 - 1;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v8 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v8;\n  if ( !v8 )\n    JUMPOUT(0x4075ADLL);\n  v9 = ((unsigned __int64)v8 + v7 + 16) & -v6;\n  v10 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v9;\n  v11 = (char *)v8 + v10;\n  *(_QWORD *)(a1 + 24) = v9;\n  *v8 = v11;\n  *(_QWORD *)(a1 + 32) = v11;\n  v8[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n", 
            "funcStartAddr": "0x407530L", 
            "funcEndAddr": "0x40759dL", 
            "funcName": "_obstack_begin_1"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_begin_1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // rbp\n  __int64 v7; // r12\n  _QWORD *v8; // rax\n  __int64 v9; // rbp\n  __int64 v10; // rdx\n  char *v11; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) |= 1u;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  *(_QWORD *)(a1 + 72) = a6;\n  if ( !a3 )\n    JUMPOUT(0x4075A0LL);\n  v6 = a3;\n  v7 = a3 - 1;\n  *(_QWORD *)(a1 + 48) = a3 - 1;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v8 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v8;\n  if ( !v8 )\n    JUMPOUT(0x4075ADLL);\n  v9 = ((unsigned __int64)v8 + v7 + 16) & -v6;\n  v10 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v9;\n  v11 = (char *)v8 + v10;\n  *(_QWORD *)(a1 + 24) = v9;\n  *v8 = v11;\n  *(_QWORD *)(a1 + 32) = v11;\n  v8[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_4074F0(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n", 
            "funcStartAddr": "0x407530L", 
            "funcEndAddr": "0x40759dL", 
            "funcName": "_obstack_begin_1"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_newchunk(__int64 a1, __int64 a2, __int64 a3, _BOOL8 a4)\n{\n  size_t v4; // r13\n  __int64 v5; // rbp\n  size_t v6; // rsi\n  _BOOL8 v7; // rax\n  bool v8; // cf\n  unsigned __int64 v9; // rsi\n  size_t v10; // rdx\n  unsigned __int64 v11; // rbx\n  _QWORD *v12; // rax\n  _QWORD *v13; // r14\n  char *v14; // rbx\n  __int64 result; // rax\n\n  v4 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);\n  v5 = *(_QWORD *)(a1 + 8);\n  v8 = __CFADD__(v4, a2);\n  v6 = v4 + a2;\n  v7 = v8;\n  v8 = __CFADD__(*(_QWORD *)(a1 + 48), v6);\n  v9 = *(_QWORD *)(a1 + 48) + v6;\n  LOBYTE(a4) = v8;\n  v10 = v4 >> 3;\n  v11 = v9 + (v4 >> 3) + 100;\n  if ( *(_QWORD *)a1 >= v9 )\n    v9 = *(_QWORD *)a1;\n  if ( v9 >= v11 )\n    v11 = v9;\n  if ( v7 || (a4 = v8) || (v9 = v11, v12 = (_QWORD *)sub_4074F0(a1, v11), (v13 = v12) == 0LL) )\n    obstack_alloc_failed_handler(a1, v9, v10, a4);\n  *(_QWORD *)(a1 + 8) = v12;\n  v12[1] = v5;\n  *(_QWORD *)(a1 + 32) = (char *)v12 + v11;\n  *v12 = (char *)v12 + v11;\n  v14 = (char *)(~*(_QWORD *)(a1 + 48) & ((unsigned __int64)v12 + *(_QWORD *)(a1 + 48) + 16));\n  result = (__int64)memcpy(v14, *(const void **)(a1 + 16), v4);\n  if ( !(*(_BYTE *)(a1 + 80) & 2) )\n  {\n    result = (v5 + *(_QWORD *)(a1 + 48) + 16) & ~*(_QWORD *)(a1 + 48);\n    if ( *(_QWORD *)(a1 + 16) == result )\n    {\n      v13[1] = *(_QWORD *)(v5 + 8);\n      result = sub_407510(a1, v5);\n    }\n  }\n  *(_QWORD *)(a1 + 16) = v14;\n  *(_QWORD *)(a1 + 24) = &v14[v4];\n  *(_BYTE *)(a1 + 80) &= 0xFDu;\n  return result;\n}\n", 
            "funcStartAddr": "0x407600L", 
            "funcEndAddr": "0x4076fbL", 
            "funcName": "_obstack_newchunk"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall obstack_allocated_p(__int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n\n  result = *(_QWORD *)(a1 + 8);\n  if ( result )\n  {\n    while ( a2 <= result || *(_QWORD *)result < a2 )\n    {\n      result = *(_QWORD *)(result + 8);\n      if ( !result )\n        return 0LL;\n    }\n    result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407700L", 
            "funcEndAddr": "0x407737L", 
            "funcName": "_obstack_allocated_p"
        }, 
        {
            "decompiledFuncCode": "void obstack_free(struct obstack *obstack, void *block)\n{\n  char *v2; // rbp\n  struct _obstack_chunk *v3; // rsi\n  char *v4; // rax\n  struct _obstack_chunk *v5; // r12\n\n  v2 = (char *)block;\n  v3 = obstack->chunk;\n  if ( v3 )\n  {\n    while ( 1 )\n    {\n      if ( v3 < (struct _obstack_chunk *)v2 )\n      {\n        v4 = v3->limit;\n        if ( v3->limit >= v2 )\n          break;\n      }\n      v5 = v3->prev;\n      sub_407510((__int64)obstack, (__int64)v3);\n      *((_BYTE *)obstack + 80) |= 2u;\n      v3 = v5;\n      if ( !v5 )\n        goto LABEL_5;\n    }\n    obstack->next_free = v2;\n    obstack->object_base = v2;\n    obstack->chunk_limit = v4;\n    obstack->chunk = v3;\n  }\n  else\n  {\nLABEL_5:\n    if ( v2 )\n      abort();\n  }\n}\n\nvoid obstack_free(struct obstack *obstack, void *block)\n{\n  char *v2; // rbp\n  struct _obstack_chunk *v3; // rsi\n  char *v4; // rax\n  struct _obstack_chunk *v5; // r12\n\n  v2 = (char *)block;\n  v3 = obstack->chunk;\n  if ( v3 )\n  {\n    while ( 1 )\n    {\n      if ( v3 < (struct _obstack_chunk *)v2 )\n      {\n        v4 = v3->limit;\n        if ( v3->limit >= v2 )\n          break;\n      }\n      v5 = v3->prev;\n      sub_407510((__int64)obstack, (__int64)v3);\n      *((_BYTE *)obstack + 80) |= 2u;\n      v3 = v5;\n      if ( !v5 )\n        goto LABEL_5;\n    }\n    obstack->next_free = v2;\n    obstack->object_base = v2;\n    obstack->chunk_limit = v4;\n    obstack->chunk = v3;\n  }\n  else\n  {\nLABEL_5:\n    if ( v2 )\n      abort();\n  }\n}\n", 
            "funcStartAddr": "0x401d6eL", 
            "funcEndAddr": "0x401d73L", 
            "funcName": "_obstack_free"
        }, 
        {
            "decompiledFuncCode": "void obstack_free(struct obstack *obstack, void *block)\n{\n  char *v2; // rbp\n  struct _obstack_chunk *v3; // rsi\n  char *v4; // rax\n  struct _obstack_chunk *v5; // r12\n\n  v2 = (char *)block;\n  v3 = obstack->chunk;\n  if ( v3 )\n  {\n    while ( 1 )\n    {\n      if ( v3 < (struct _obstack_chunk *)v2 )\n      {\n        v4 = v3->limit;\n        if ( v3->limit >= v2 )\n          break;\n      }\n      v5 = v3->prev;\n      sub_407510((__int64)obstack, (__int64)v3);\n      *((_BYTE *)obstack + 80) |= 2u;\n      v3 = v5;\n      if ( !v5 )\n        goto LABEL_5;\n    }\n    obstack->next_free = v2;\n    obstack->object_base = v2;\n    obstack->chunk_limit = v4;\n    obstack->chunk = v3;\n  }\n  else\n  {\nLABEL_5:\n    if ( v2 )\n      abort();\n  }\n}\n\nvoid obstack_free(struct obstack *obstack, void *block)\n{\n  char *v2; // rbp\n  struct _obstack_chunk *v3; // rsi\n  char *v4; // rax\n  struct _obstack_chunk *v5; // r12\n\n  v2 = (char *)block;\n  v3 = obstack->chunk;\n  if ( v3 )\n  {\n    while ( 1 )\n    {\n      if ( v3 < (struct _obstack_chunk *)v2 )\n      {\n        v4 = v3->limit;\n        if ( v3->limit >= v2 )\n          break;\n      }\n      v5 = v3->prev;\n      sub_407510((__int64)obstack, (__int64)v3);\n      *((_BYTE *)obstack + 80) |= 2u;\n      v3 = v5;\n      if ( !v5 )\n        goto LABEL_5;\n    }\n    obstack->next_free = v2;\n    obstack->object_base = v2;\n    obstack->chunk_limit = v4;\n    obstack->chunk = v3;\n  }\n  else\n  {\nLABEL_5:\n    if ( v2 )\n      abort();\n  }\n}\n", 
            "funcStartAddr": "0x401d6eL", 
            "funcEndAddr": "0x401d73L", 
            "funcName": "_obstack_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_memory_used(__int64 a1)\n{\n  _QWORD *v1; // rdx\n  __int64 result; // rax\n  __int64 v3; // rcx\n\n  v1 = *(_QWORD **)(a1 + 8);\n  for ( result = 0LL; v1; result += v3 )\n  {\n    v3 = *v1 - (_QWORD)v1;\n    v1 = (_QWORD *)v1[1];\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4077b0L", 
            "funcEndAddr": "0x4077d9L", 
            "funcName": "_obstack_memory_used"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4077E0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_406430(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n  }\n  else\n  {\n    if ( !result )\n      return result;\n    if ( !v1 )\n      return -(*__errno_location() != 9);\n  }\n  return -1;\n}\n", 
            "funcStartAddr": "0x4077e0L", 
            "funcEndAddr": "0x40783dL", 
            "funcName": "sub_4077E0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_407840(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407840L", 
            "funcEndAddr": "0x40789eL", 
            "funcName": "sub_407840"
        }, 
        {
            "decompiledFuncCode": "const char *sub_4078A0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_406430(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_406430(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x4078a0L", 
            "funcEndAddr": "0x407e02L", 
            "funcName": "sub_4078A0"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x407e10L", 
            "funcEndAddr": "0x407e6dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x407e70L", 
            "funcEndAddr": "0x407e71L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_407E80(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_60C248 )\n    v1 = (void *)unk_60C248;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x407e80L", 
            "funcEndAddr": "0x407e98L", 
            "funcName": "sub_407E80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407E98(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_60BE30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x407e98L", 
            "funcEndAddr": "0x407eb8L", 
            "funcName": "sub_407E98"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_wc.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 84, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}