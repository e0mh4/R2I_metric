{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  __int64 v3; // r14\n  char v4; // r13\n  char **v5; // rbp\n  char *v6; // rbx\n  int v7; // eax\n  char v8; // r13\n  int *v9; // rax\n  __int64 v10; // r14\n  char *v11; // r15\n  int *v12; // rax\n  char v13; // r10\n  unsigned int v14; // er11\n  char *v15; // r15\n  bool v16; // zf\n  int v17; // er14\n  time_t *v18; // rcx\n  int v19; // eax\n  char v20; // r10\n  int v21; // edx\n  int v22; // eax\n  __int64 v23; // r15\n  char *v24; // rax\n  __int64 v26; // r14\n  char *v27; // r15\n  int *v28; // rax\n  bool v29; // al\n  char v30; // al\n  const char *v31; // rsi\n  char *v32; // rax\n  int *v33; // rax\n  struct tm *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  char *v38; // rax\n  __int64 v39; // rbx\n  char *v40; // rax\n  unsigned int v41; // [rsp+Ch] [rbp-FCh]\n  char v42; // [rsp+Ch] [rbp-FCh]\n  unsigned int v43; // [rsp+Ch] [rbp-FCh]\n  char v44; // [rsp+10h] [rbp-F8h]\n  int v45; // [rsp+10h] [rbp-F8h]\n  char *v46; // [rsp+10h] [rbp-F8h]\n  unsigned int v47; // [rsp+18h] [rbp-F0h]\n  unsigned int v48; // [rsp+1Ch] [rbp-ECh]\n  struct timespec tp; // [rsp+20h] [rbp-E8h]\n  __time_t v50; // [rsp+30h] [rbp-D8h]\n  __syscall_slong_t v51; // [rsp+38h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+40h] [rbp-C8h]\n\n  v3 = 0LL;\n  v4 = 0;\n  v5 = a2;\n  sub_408430(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_410EE0(sub_402F30);\n  byte_6183A2 = 0;\n  dword_6183A4 = 0;\n  byte_6183A3 = 0;\n  while ( 1 )\n  {\n    LODWORD(v6) = sub_40B5F0((unsigned int)a1, a2, \"acd:fhmr:t:\", &off_411920, 0LL);\n    if ( (_DWORD)v6 == -1 )\n      break;\n    if ( (_DWORD)v6 != 102 )\n    {\n      if ( (int)v6 <= 102 )\n      {\n        if ( (_DWORD)v6 == 97 )\n        {\n          dword_6183A4 |= 1u;\n        }\n        else\n        {\n          if ( (int)v6 <= 97 )\n          {\n            if ( (_DWORD)v6 == -131 )\n            {\n              sub_40A4D0((char)stdout);\n              exit(0);\n            }\n            if ( (_DWORD)v6 == -130 )\n              sub_4027E0(0);\nLABEL_96:\n            sub_4027E0(1);\n          }\n          if ( (_DWORD)v6 == 99 )\n          {\n            byte_6183A3 = 1;\n          }\n          else\n          {\n            if ( (_DWORD)v6 != 100 )\n              goto LABEL_96;\n            v3 = qword_618550;\n          }\n        }\n      }\n      else if ( (_DWORD)v6 == 114 )\n      {\n        byte_6183A2 = 1;\n        filename = (char *)qword_618550;\n      }\n      else if ( (int)v6 > 114 )\n      {\n        if ( (_DWORD)v6 == 116 )\n        {\n          v4 = sub_408100(&timer, qword_618550, 6LL);\n          if ( !v4 )\n          {\n            v39 = sub_40A050(qword_618550);\n            v40 = dcgettext(0LL, \"invalid date format %s\", 5);\n            error(1, 0, v40, v39);\n            start();\n          }\n          *(&timer + 1) = 0LL;\n          xmmword_618390 = (__int128)_mm_load_si128((const __m128i *)&timer);\n        }\n        else\n        {\n          if ( (_DWORD)v6 != 128 )\n            goto LABEL_96;\n          dword_6183A4 |= dword_4118B0[sub_402E50(\"--time\", qword_618550, off_4118E0, dword_4118B0, 4LL, off_618298)];\n        }\n      }\n      else if ( (_DWORD)v6 == 104 )\n      {\n        byte_6183A1 = 1;\n      }\n      else\n      {\n        if ( (_DWORD)v6 != 109 )\n          goto LABEL_96;\n        dword_6183A4 |= 2u;\n      }\n    }\n  }\n  if ( !dword_6183A4 )\n    dword_6183A4 = 3;\n  if ( !v4 )\n  {\n    if ( byte_6183A2 )\n    {\n      if ( byte_6183A1 )\n        v29 = __lxstat(1, filename, &stat_buf) != 0;\n      else\n        v29 = __xstat(1, filename, &stat_buf) != 0;\n      if ( !v29 )\n      {\n        *(timespec *)&timer = stat_buf.st_atim;\n        xmmword_618390 = (__int128)stat_buf.st_mtim;\n        if ( v3 )\n        {\n          v30 = dword_6183A4;\n          if ( dword_6183A4 & 1 )\n          {\n            sub_4027A0(&timer, v3);\n            v30 = dword_6183A4;\n          }\n          if ( v30 & 2 )\n            sub_4027A0(&xmmword_618390, v3);\n        }\n        goto LABEL_34;\n      }\n      v5 = (char **)sub_409E00(4LL, filename);\n      v6 = dcgettext(0LL, \"failed to get attributes of %s\", 5);\n      v33 = __errno_location();\n      error(1, *v33, v6, v5);\n    }\n    else\n    {\n      if ( v3 )\n      {\n        sub_4030D0(&tp);\n        sub_4027A0(&timer, v3);\n        xmmword_618390 = (__int128)_mm_load_si128((const __m128i *)&timer);\n        if ( dword_6183A4 != 3 )\n          goto LABEL_34;\n        if ( *(_OWORD *)&timer != tp )\n          goto LABEL_34;\n        v51 = tp.tv_nsec;\n        v50 = tp.tv_sec ^ 1;\n        sub_4027A0(&stat_buf, v3);\n        if ( stat_buf.st_dev != v50 || stat_buf.st_ino != v51 )\n          goto LABEL_34;\n      }\n      if ( a1 - dword_61831C <= 1\n        || (int)sub_4083B0() > 200111\n        || !(unsigned __int8)sub_408100(&timer, a2[dword_61831C], 9LL) )\n      {\n        if ( dword_6183A4 == 3 )\n        {\n          byte_6183A0 = 1;\n        }\n        else\n        {\n          *(&timer + 1) = 0x3FFFFFFFLL;\n          *((_QWORD *)&xmmword_618390 + 1) = 0x3FFFFFFFLL;\n        }\n        goto LABEL_34;\n      }\n      *(&timer + 1) = 0LL;\n      xmmword_618390 = (__int128)_mm_load_si128((const __m128i *)&timer);\n      if ( getenv(\"POSIXLY_CORRECT\") )\n      {\nLABEL_93:\n        ++dword_61831C;\n        goto LABEL_34;\n      }\n    }\n    v34 = localtime(&timer);\n    if ( v34 )\n    {\n      v35 = (unsigned int)v34->tm_hour;\n      v36 = (unsigned int)v34->tm_mday;\n      v48 = v34->tm_sec;\n      v47 = v34->tm_min;\n      v37 = v34->tm_year + 1900LL;\n      v43 = v34->tm_mon + 1;\n      v46 = v5[dword_61831C];\n      v38 = dcgettext(0LL, \"warning: 'touch %s' is obsolete; use 'touch -t %04ld%02d%02d%02d%02d.%02d'\", 5);\n      error(0, 0, v38, v46, v37, v43, v36, v35, v47, v48);\n    }\n    goto LABEL_93;\n  }\n  if ( v3 || byte_6183A2 )\n  {\n    v31 = \"cannot specify times from more than one source\";\n    goto LABEL_95;\n  }\nLABEL_34:\n  v7 = dword_61831C;\n  if ( dword_61831C == a1 )\n  {\n    v31 = \"missing file operand\";\nLABEL_95:\n    v32 = dcgettext(0LL, v31, 5);\n    error(0, 0, v32);\n    goto LABEL_96;\n  }\n  v8 = 1;\n  if ( dword_61831C < a1 )\n  {\n    while ( 1 )\n    {\n      v14 = 1;\n      v15 = v5[v7];\n      v16 = strcmp(v5[v7], \"-\") == 0;\n      v17 = !v16;\n      if ( !v16 )\n      {\n        if ( byte_6183A3\n          || byte_6183A1\n          || (v17 = 0, v14 = sub_402FD0(0, v5[v7], 2369), v14 == -1)\n          && ((v17 = *__errno_location(), (unsigned int)(v17 - 21) <= 1) || (v14 = -1, v17 == 1)) )\n        {\n          v14 = (unsigned int)v6;\n          v17 = 0;\n        }\n      }\n      if ( dword_6183A4 != 3 )\n      {\n        if ( dword_6183A4 == 2 )\n        {\n          *(&timer + 1) = 1073741822LL;\n        }\n        else\n        {\n          if ( dword_6183A4 != 1 )\n            __assert_fail(\"change_times == CH_ATIME\", \"src/touch.c\", 0x99u, \"touch\");\n          *((_QWORD *)&xmmword_618390 + 1) = 1073741822LL;\n        }\n      }\n      v18 = &timer;\n      if ( byte_6183A0 )\n        v18 = 0LL;\n      if ( (unsigned __int8)byte_6183A1 & (v14 == -1) )\n        break;\n      if ( v14 != 1 )\n      {\n        v44 = byte_6183A1 & (v14 == -1);\n        v41 = v14;\n        v19 = sub_403040(v14, 4294967196LL, v15, v18, 0LL);\n        v20 = v44;\n        v21 = v19;\n        if ( !v41 )\n        {\n          v45 = v19;\n          v42 = v20;\n          v22 = close(0);\n          v21 = v45;\n          if ( v22 )\n          {\n            v26 = sub_409E00(4LL, v15);\n            v27 = dcgettext(0LL, \"failed to close %s\", 5);\n            v28 = __errno_location();\n            error(0, *v28, v27, v26);\n            v13 = v42;\n            goto LABEL_41;\n          }\n        }\nLABEL_56:\n        if ( !v21 )\n          goto LABEL_57;\nLABEL_37:\n        if ( v17 )\n          goto LABEL_62;\n        v9 = __errno_location();\n        if ( byte_6183A3 && *v9 == 2 )\n        {\nLABEL_57:\n          v13 = 1;\n          goto LABEL_41;\n        }\n        goto LABEL_40;\n      }\n      if ( !(unsigned int)sub_403040(1LL, 4294967196LL, 0LL, v18, 0LL) )\n        goto LABEL_57;\n      if ( *__errno_location() != 9 )\n        goto LABEL_37;\n      if ( byte_6183A3 )\n        goto LABEL_57;\n      if ( v17 )\n      {\nLABEL_62:\n        v23 = sub_409E00(4LL, v15);\n        v24 = dcgettext(0LL, \"cannot touch %s\", 5);\n        error(0, v17, v24, v23);\n        v13 = 0;\n        goto LABEL_41;\n      }\nLABEL_40:\n      v10 = sub_409E00(4LL, v15);\n      v11 = dcgettext(0LL, \"setting times of %s\", 5);\n      v12 = __errno_location();\n      error(0, *v12, v11, v10);\n      v13 = 0;\nLABEL_41:\n      v8 &= v13;\n      v7 = dword_61831C + 1;\n      dword_61831C = v7;\n      if ( v7 >= a1 )\n        return (unsigned __int8)v8 ^ 1u;\n    }\n    v21 = sub_403040(0xFFFFFFFFLL, 4294967196LL, v15, v18, 256LL);\n    goto LABEL_56;\n  }\n  return (unsigned __int8)v8 ^ 1u;\n}\n", 
            "funcStartAddr": "0x401df0L", 
            "funcEndAddr": "0x4026c0L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x4026c0L", 
            "funcEndAddr": "0x4026ebL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_4026EB()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4026ebL", 
            "funcEndAddr": "0x40270aL", 
            "funcName": "sub_4026EB"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40270A()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40270aL", 
            "funcEndAddr": "0x402741L", 
            "funcName": "sub_40270A"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_402741()\n{\n  __int64 *result; // rax\n\n  if ( !byte_618348 )\n  {\n    while ( qword_618350 < (unsigned __int64)(&qword_617E48 - qword_617E40 - 1) )\n      ((void (*)(void))qword_617E40[++qword_618350])();\n    result = sub_4026EB();\n    byte_618348 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x402741L", 
            "funcEndAddr": "0x402798L", 
            "funcName": "sub_402741"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402798()\n{\n  return sub_40270A();\n}\n", 
            "funcStartAddr": "0x402798L", 
            "funcEndAddr": "0x40279dL", 
            "funcName": "sub_402798"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4027A0(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rbx\n  char *v4; // rax\n\n  result = sub_408000();\n  if ( !(_BYTE)result )\n  {\n    v3 = sub_40A050(a2);\n    v4 = dcgettext(0LL, \"invalid date format %s\", 5);\n    error(1, 0, v4, v3);\n    sub_4027E0(1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4027a0L", 
            "funcEndAddr": "0x4027e0L", 
            "funcName": "sub_4027A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_4027E0(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  const char **v20; // rax\n  const char *v21; // rbp\n  char *v22; // rax\n  char *v23; // rax\n  char *v24; // rax\n  char *v25; // rax\n  char *v26; // rax\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  const char *v30; // [rsp+0h] [rbp-88h]\n  const char *v31; // [rsp+8h] [rbp-80h]\n  const char *v32; // [rsp+10h] [rbp-78h]\n  const char *v33; // [rsp+18h] [rbp-70h]\n  const char *v34; // [rsp+20h] [rbp-68h]\n  const char *v35; // [rsp+28h] [rbp-60h]\n  const char *v36; // [rsp+30h] [rbp-58h]\n  const char *v37; // [rsp+38h] [rbp-50h]\n  const char *v38; // [rsp+40h] [rbp-48h]\n  const char *v39; // [rsp+48h] [rbp-40h]\n  const char *v40; // [rsp+50h] [rbp-38h]\n  const char *v41; // [rsp+58h] [rbp-30h]\n  __int64 v42; // [rsp+60h] [rbp-28h]\n  __int64 v43; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_6183B8;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... FILE...\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"Update the access and modification times of each FILE to the current time.\\n\"\n         \"\\n\"\n         \"A FILE argument that does not exist is created empty, unless -c or -h\\n\"\n         \"is supplied.\\n\"\n         \"\\n\"\n         \"A FILE argument string of - is handled specially and causes touch to\\n\"\n         \"change the times of the file associated with standard output.\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"  -a                     change only the access time\\n\"\n         \"  -c, --no-create        do not create any files\\n\"\n         \"  -d, --date=STRING      parse STRING and use it instead of current time\\n\"\n         \"  -f                     (ignored)\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"  -h, --no-dereference   affect each symbolic link instead of any referenced\\n\"\n          \"                         file (useful only on systems that can change the\\n\"\n          \"                         timestamps of a symlink)\\n\"\n          \"  -m                     change only the modification time\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  -r, --reference=FILE   use this file's times instead of current time\\n\"\n          \"  -t STAMP               use [[CC]YY]MMDDhhmm[.ss] instead of current time\\n\"\n          \"      --time=WORD        change the specified time:\\n\"\n          \"                           WORD is access, atime, or use: equivalent to -a\\n\"\n          \"                           WORD is modify or mtime: equivalent to -m\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \"\\nNote that the -d and -t options accept different time-date formats.\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v30 = \"[\";\n  v20 = &v30;\n  v31 = \"test invocation\";\n  v32 = \"coreutils\";\n  v33 = \"Multi-call invocation\";\n  v34 = \"sha224sum\";\n  v35 = \"sha2 utilities\";\n  v36 = \"sha256sum\";\n  v37 = \"sha2 utilities\";\n  v38 = \"sha384sum\";\n  v39 = \"sha2 utilities\";\n  v40 = \"sha512sum\";\n  v41 = \"sha2 utilities\";\n  v42 = 0LL;\n  v43 = 0LL;\n  do\n    v20 += 2;\n  while ( *v20 && strcmp(\"touch\", *v20) );\n  v21 = v20[1];\n  if ( v21 )\n  {\n    v22 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v22, &unk_410FD7);\n    v23 = setlocale(5, 0LL);\n    if ( !v23 || !strncmp(v23, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v26 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v26, &unk_410FD7);\n    v27 = setlocale(5, 0LL);\n    if ( !v27 || !strncmp(v27, \"en_\", 3uLL) )\n    {\n      v21 = \"touch\";\n      v28 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v28, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v21 = \"touch\";\n  }\n  v29 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v29, \"touch\");\nLABEL_10:\n  v24 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v24, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v25 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v25, v21);\nLABEL_3:\n  exit(status);\n}\n", 
            "funcStartAddr": "0x4027e0L", 
            "funcEndAddr": "0x402b7dL", 
            "funcName": "sub_4027E0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_402B80()\n{\n  sub_4027E0(1);\n}\n", 
            "funcStartAddr": "0x402b80L", 
            "funcEndAddr": "0x402b8aL", 
            "funcName": "sub_402B80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402B90(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  size_t v4; // r13\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n  char *v16; // [rsp+18h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  v16 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += v4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( v16 )\n      {\n        v10 = memcmp(&v16[v4 * v14], v5, v4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += v4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    v12 = v14;\n  return v12;\n}\n", 
            "funcStartAddr": "0x402b90L", 
            "funcEndAddr": "0x402ca6L", 
            "funcName": "sub_402B90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_402CB0(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_40A030(1LL, a1);\n  v5 = sub_409D20(0LL, 8LL, a2);\n  error(0, 0, v3, v5, v4);\n}\n", 
            "funcStartAddr": "0x402cb0L", 
            "funcEndAddr": "0x402d21L", 
            "funcName": "sub_402CB0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_402D30(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  size_t v4; // r13\n  char *v5; // rbp\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  __int64 v11; // rax\n  __int64 v12; // rax\n  char *v13; // rax\n\n  v3 = 0LL;\n  v4 = a3;\n  v5 = a2;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, v5, v4) )\n    {\n      ++v9;\n      v3 = v5;\n      v5 += v4;\n      v11 = sub_40A050(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    v5 += v4;\n    v12 = sub_40A050(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  v13 = stderr->_IO_write_ptr;\n  if ( v13 >= stderr->_IO_write_end )\n  {\n    LODWORD(v13) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = v13 + 1;\n    *v13 = 10;\n  }\n  return (int)v13;\n}\n", 
            "funcStartAddr": "0x402d30L", 
            "funcEndAddr": "0x402e48L", 
            "funcName": "sub_402D30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402E50(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  size_t v6; // r15\n  void (*v7)(void); // r13\n  char *v8; // rbp\n  __int64 *v9; // rbx\n  __int64 result; // rax\n\n  v6 = a5;\n  v7 = a6;\n  v8 = a4;\n  v9 = (__int64 *)a3;\n  result = sub_402B90(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_402CB0(a1, (__int64)a2, result);\n    sub_402D30(v9, v8, v6);\n    v7();\n    result = -1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x402e50L", 
            "funcEndAddr": "0x402ec0L", 
            "funcName": "sub_402E50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402EC0(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  size_t v5; // r12\n  __int64 *v6; // rbx\n  char *v7; // rbp\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v5 = a4;\n    v6 = a2 + 1;\n    v7 = a3;\n    do\n    {\n      if ( !memcmp(s1, v7, v5) )\n        break;\n      v4 = *v6;\n      v7 += v5;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x402ec0L", 
            "funcEndAddr": "0x402f0dL", 
            "funcName": "sub_402EC0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402F30()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_40C430(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_6183A8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_6183B0 )\n      {\n        v5 = sub_409EA0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_40C430(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x402f30L", 
            "funcEndAddr": "0x402fceL", 
            "funcName": "sub_402F30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402FD0(int fd2, char *file, int oflag, unsigned int a4)\n{\n  __int64 result; // rax\n  int v5; // ebx\n  unsigned int v6; // er12\n  int *v7; // rax\n  int v8; // er13\n  int *v9; // rbp\n\n  LODWORD(result) = open(file, oflag, a4);\n  v5 = result;\n  if ( fd2 == (_DWORD)result || (int)result < 0 )\n    return (unsigned int)result;\n  v6 = dup2(result, fd2);\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  close(v5);\n  result = v6;\n  *v9 = v8;\n  return result;\n}\n", 
            "funcStartAddr": "0x402fd0L", 
            "funcEndAddr": "0x40303aL", 
            "funcName": "sub_402FD0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_403040(int a1, int a2, const char *a3, const struct timespec *a4, int a5)\n{\n  int v5; // er13\n  const struct timespec *v6; // rbp\n  const char *v7; // rbx\n  int result; // eax\n\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  if ( a1 < 0 )\n  {\n    if ( !a3 )\n    {\nLABEL_10:\n      *__errno_location() = 9;\n      return -1;\n    }\n    goto LABEL_3;\n  }\n  result = futimens(a1, a4);\n  if ( v7 && result == -1 )\n  {\n    if ( *__errno_location() != 38 )\n      return -1;\nLABEL_3:\n    result = utimensat(a2, v7, v6, v5);\n  }\n  if ( result == 1 )\n    goto LABEL_10;\n  return result;\n}\n", 
            "funcStartAddr": "0x403040L", 
            "funcEndAddr": "0x4030cbL", 
            "funcName": "sub_403040"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4030D0(struct timespec *tp)\n{\n  int result; // eax\n  __time_t v2; // [rsp+0h] [rbp-18h]\n  __int64 v3; // [rsp+8h] [rbp-10h]\n\n  result = clock_gettime(0, tp);\n  if ( result )\n  {\n    gettimeofday((struct timeval *)&v2, 0LL);\n    tp->tv_sec = v2;\n    result = 1000 * v3;\n    tp->tv_nsec = 1000 * v3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4030d0L", 
            "funcEndAddr": "0x40310aL", 
            "funcName": "sub_4030D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403110(__m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9)\n{\n  __int64 result; // rax\n  __int64 v10; // r8\n  __int64 v11; // r9\n  __m128i v12; // xmm0\n  __int64 v13; // r9\n\n  result = a1[10].m128i_i64[1];\n  v10 = a8;\n  v11 = a9;\n  if ( result && !a1[3].m128i_i64[0] && !a1[10].m128i_i8[1] )\n  {\n    if ( a1[12].m128i_i64[1] || a9 > 2 )\n    {\n      v12 = _mm_loadu_si128((const __m128i *)&a7);\n      result = a9;\n      a1[13].m128i_i8[8] = 1;\n      a1[2] = v12;\n      a1[3].m128i_i64[0] = result;\n      return result;\n    }\n    a1[12].m128i_i64[1] = 1LL;\nLABEL_13:\n    a1[4].m128i_i64[1] = v10;\n    a1[5].m128i_i64[0] = 0LL;\n    goto LABEL_11;\n  }\n  if ( a9 > 4 )\n  {\n    v13 = a9 - 4;\n    a1[10].m128i_i64[1] = result + 1;\n    a1[3].m128i_i64[0] = v13;\n    a1[4].m128i_i64[0] = v10 % 100;\n    result = 3777893186295716171LL * v10;\n    a1[3].m128i_i64[1] = v10 / 100 % 100;\n    a1[2].m128i_i64[1] = v10 / 10000;\n    return result;\n  }\n  ++a1[12].m128i_i64[1];\n  if ( v11 <= 2 )\n    goto LABEL_13;\n  a1[4].m128i_i64[1] = v10 / 100;\n  result = 100 * (v10 / 100);\n  a1[5].m128i_i64[0] = v10 % 100;\nLABEL_11:\n  a1[5].m128i_i64[1] = 0LL;\n  a1[6].m128i_i64[0] = 0LL;\n  a1[1].m128i_i32[3] = 2;\n  return result;\n}\n", 
            "funcStartAddr": "0x403110L", 
            "funcEndAddr": "0x40328eL", 
            "funcName": "sub_403110"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403290(int a1, __int64 a2)\n{\n  __int64 v2; // r12\n  int v3; // eax\n  __int64 v4; // rsi\n  unsigned int v5; // ebp\n  unsigned int v6; // ecx\n  unsigned int v7; // ebp\n\n  v2 = a2;\n  v3 = __sprintf_chk(a2, 1LL, -1LL, \"%c%02d\", ((a1 >> 31) & 2u) + 43, (unsigned int)abs32(a1 / 3600));\n  if ( a1 % 3600 )\n  {\n    v4 = a2 + v3;\n    *(_BYTE *)v4 = 58;\n    v5 = abs32(a1 % 3600);\n    *(_BYTE *)(v4 + 1) = v5 / 0x258 + 48;\n    v6 = v5 / 0x3C % 0xA + 48;\n    v7 = v5 % 0x3C;\n    *(_BYTE *)(v4 + 2) = v6;\n    if ( v7 )\n    {\n      *(_BYTE *)(v4 + 3) = 58;\n      *(_BYTE *)(v4 + 4) = v7 / 0xA + 48;\n      *(_WORD *)(v4 + 5) = (unsigned __int8)(v7 % 0xA + 48);\n    }\n    else\n    {\n      *(_BYTE *)(v4 + 3) = 0;\n    }\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x403290L", 
            "funcEndAddr": "0x403389L", 
            "funcName": "sub_403290"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403390(int a1, __int64 a2)\n{\n  __sprintf_chk(\n    a2,\n    1LL,\n    -1LL,\n    (a1 >= -1900) + 4266649LL,\n    (unsigned int)abs32(a1 / 100 + 19),\n    (unsigned int)abs32(a1 % 100));\n  return a2;\n}\n", 
            "funcStartAddr": "0x403390L", 
            "funcEndAddr": "0x4033feL", 
            "funcName": "sub_403390"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403400()\n{\n  fwrite(\"date: \", 1uLL, 6uLL, stderr);\n  return sub_40C370(stderr);\n}\n", 
            "funcStartAddr": "0x403400L", 
            "funcEndAddr": "0x4034beL", 
            "funcName": "sub_403400"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_4034C0(__int64 a1, _DWORD *a2, _DWORD *a3, __int64 a4)\n{\n  bool result; // al\n  __int64 v5; // [rsp+8h] [rbp-50h]\n  char v6; // [rsp+10h] [rbp-48h]\n\n  v5 = a4;\n  if ( a4 != -1 || (a3 = (_DWORD *)sub_40C180(a1, &v5, &v6)) != 0LL )\n    result = (a3[5] ^ a2[5] | a3[4] ^ a2[4] | a3[3] ^ a2[3] | a3[2] ^ a2[2] | a3[1] ^ a2[1] | *a3 ^ *a2) == 0;\n  else\n    result = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x4034c0L", 
            "funcEndAddr": "0x40352bL", 
            "funcName": "sub_4034C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403530(unsigned __int8 a1, __int64 a2)\n{\n  __fprintf_chk(stderr, 1LL, &aLdS[a1 ^ 1], a2);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x403530L", 
            "funcEndAddr": "0x403565L", 
            "funcName": "sub_403530"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403570(_DWORD *a1, char a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r9\n  __int64 v6; // r9\n  bool v7; // of\n  __int64 v8; // r9\n  __int64 result; // rax\n  __int64 v10; // rcx\n\n  v5 = a3;\n  if ( a4 <= 2 )\n  {\n    if ( a5 >= 0 )\n      goto LABEL_3;\n    v10 = 0LL;\nLABEL_11:\n    v8 = v10 + 60 * v5;\nLABEL_6:\n    result = 0LL;\n    if ( (unsigned __int64)(v8 + 1440) <= 0xB40 )\n    {\n      result = 1LL;\n      *a1 = 60 * v8;\n    }\n    return result;\n  }\n  if ( a5 < 0 )\n  {\n    v5 = a3 / 100;\n    v10 = a3 % 100;\n    goto LABEL_11;\n  }\nLABEL_3:\n  v6 = 60 * a3;\n  if ( a2 )\n  {\n    v7 = __OFSUB__(v6, a5);\n    v8 = v6 - a5;\n  }\n  else\n  {\n    v7 = __OFADD__(a5, v6);\n    v8 = a5 + v6;\n  }\n  result = 0LL;\n  if ( !v7 && (unsigned __int128)(60 * (__int128)a3) >> 64 == 0 )\n    goto LABEL_6;\n  return result;\n}\n", 
            "funcStartAddr": "0x403570L", 
            "funcEndAddr": "0x403625L", 
            "funcName": "sub_403570"
        }, 
        {
            "decompiledFuncCode": "char **__fastcall sub_403630(__int64 a1, const char *a2)\n{\n  const char *v2; // rbp\n  const char *v3; // rsi\n  char **v4; // rbx\n  const char *v6; // rsi\n  const char **v7; // rbx\n  const char *v8; // rsi\n\n  v2 = a2;\n  v3 = \"GMT\";\n  v4 = &off_4130C0;\n  do\n  {\n    if ( !strcmp(v2, v3) )\n      return v4;\n    v4 += 2;\n    v3 = *v4;\n  }\n  while ( *v4 );\n  v6 = *(const char **)(a1 + 232);\n  v7 = (const char **)(a1 + 232);\n  if ( !v6 )\n  {\nLABEL_6:\n    v4 = &off_412DC0;\n    v8 = \"WET\";\n    while ( strcmp(v2, v8) )\n    {\n      v4 += 2;\n      v8 = *v4;\n      if ( !*v4 )\n        return 0LL;\n    }\n    return v4;\n  }\n  while ( strcmp(v2, v6) )\n  {\n    v7 += 2;\n    v6 = *v7;\n    if ( !*v7 )\n      goto LABEL_6;\n  }\n  return (char **)v7;\n}\n", 
            "funcStartAddr": "0x403630L", 
            "funcEndAddr": "0x4036eaL", 
            "funcName": "sub_403630"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4036F0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rsi\n  __int64 v4; // rsi\n  unsigned __int8 v5; // di\n  unsigned __int8 v6; // al\n  __int64 v7; // rsi\n  __int64 v8; // rsi\n  __int64 v9; // rsi\n  __int64 v10; // rsi\n  FILE *v12; // rbx\n  char *v13; // rax\n  unsigned __int8 v14; // al\n\n  v2 = a2;\n  dcgettext(0LL, \"parsed %s part: \", 5);\n  sub_403400();\n  v3 = *(_QWORD *)(a2 + 104);\n  if ( !v3 )\n  {\n    v4 = *(_QWORD *)(v2 + 112);\n    if ( !v4 )\n    {\n      v7 = *(_QWORD *)(v2 + 120);\n      v5 = 0;\n      if ( v7 )\n        goto LABEL_6;\n      if ( !*(_QWORD *)(v2 + 128) && !*(_QWORD *)(v2 + 136) && !*(_QWORD *)(v2 + 144) && !*(_DWORD *)(v2 + 152) )\n      {\n        v12 = stderr;\n        v13 = dcgettext(0LL, \"today/this/now\\n\", 5);\n        return fputs(v13, v12);\n      }\n      goto LABEL_7;\n    }\n    v5 = 0;\n    goto LABEL_4;\n  }\n  v14 = sub_403530(0, v3);\n  v4 = *(_QWORD *)(v2 + 112);\n  v5 = v14;\n  if ( v4 )\n  {\nLABEL_4:\n    v6 = sub_403530(v5, v4);\n    v7 = *(_QWORD *)(v2 + 120);\n    v5 = v6;\n    goto LABEL_5;\n  }\n  v7 = *(_QWORD *)(v2 + 120);\nLABEL_5:\n  if ( v7 )\nLABEL_6:\n    v5 = sub_403530(v5, v7);\nLABEL_7:\n  v8 = *(_QWORD *)(v2 + 128);\n  if ( v8 )\n    v5 = sub_403530(v5, v8);\n  v9 = *(_QWORD *)(v2 + 136);\n  if ( v9 )\n    v5 = sub_403530(v5, v9);\n  v10 = *(_QWORD *)(v2 + 144);\n  if ( v10 )\n    v5 = sub_403530(v5, v10);\n  if ( *(_DWORD *)(v2 + 152) )\n    sub_403530(v5, *(int *)(v2 + 152));\n  return fputc(10, stderr);\n}\n", 
            "funcStartAddr": "0x4036f0L", 
            "funcEndAddr": "0x403875L", 
            "funcName": "sub_4036F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403880(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  int v4; // eax\n  int v5; // ebp\n  __int64 v7; // rax\n  __int64 v8; // [rsp+0h] [rbp-38h]\n\n  v3 = a3;\n  v4 = sub_40E2D0(a3, 100LL, \"(Y-M-D) %Y-%m-%d %H:%M:%S\", a1, 0LL, 0LL);\n  if ( !a2 )\n    return v3;\n  v5 = v4;\n  if ( v4 > 99 || !*(_QWORD *)(a2 + 208) )\n    return v3;\n  v7 = sub_403290(*(_DWORD *)(a2 + 24), (__int64)&v8);\n  __snprintf_chk(v3 + v5, 100 - v5, 1LL, -1LL, \" TZ=%s\", v7);\n  return v3;\n}\n", 
            "funcStartAddr": "0x403880L", 
            "funcEndAddr": "0x403915L", 
            "funcName": "sub_403880"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_403920(__int64 a1, char *a2)\n{\n  char *v2; // rbp\n  __int64 v3; // r9\n  int v4; // eax\n  __int64 v5; // rdx\n  _BOOL8 v6; // rcx\n  __int64 v7; // rsi\n  char *v8; // rdi\n\n  v2 = a2;\n  if ( !*(_BYTE *)(a1 + 224) )\n  {\n    *a2 = 0;\n    v5 = *(int *)(a1 + 16);\n    if ( (unsigned int)v5 <= 6 )\n    {\n      v8 = a2;\n      v6 = 1LL;\n      v7 = 100LL;\n      goto LABEL_10;\n    }\n    return a2;\n  }\n  v3 = *(_QWORD *)(a1 + 8);\n  if ( (unsigned __int64)(v3 + 1) <= 0xD )\n  {\n    v4 = snprintf(a2, 0x64uLL, \"%s\", &aLast[11 * v3 + 11]);\n    v5 = *(int *)(a1 + 16);\n    if ( (unsigned int)v5 <= 6 && (unsigned int)v4 <= 0x63 )\n      goto LABEL_5;\n    return a2;\n  }\n  v4 = __snprintf_chk(a2, 100LL, 1LL, -1LL, \"%ld\", v3);\n  v5 = *(int *)(a1 + 16);\n  if ( (unsigned int)v5 > 6 )\n    return a2;\nLABEL_5:\n  v6 = v4 == 0;\n  v7 = 100 - v4;\n  v8 = &v2[v4];\nLABEL_10:\n  __snprintf_chk(v8, v7, 1LL, -1LL, v6 + 4266619, (char *)&unk_412B60 + 4 * v5);\n  return v2;\n}\n", 
            "funcStartAddr": "0x403920L", 
            "funcEndAddr": "0x403a0dL", 
            "funcName": "sub_403920"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_403A10(__int64 a1, __int64 a2)\n{\n  char v2; // dl\n  __int64 v3; // rbp\n  char *v4; // rax\n  char *v5; // rbp\n  char *v6; // rax\n  bool v7; // zf\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v11; // rcx\n  const char *v12; // rbp\n  __int64 v13; // rax\n  __int64 v14; // [rsp+0h] [rbp-98h]\n\n  dcgettext(0LL, \"parsed %s part: \", 5);\n  sub_403400();\n  if ( *(_QWORD *)(a2 + 168) && !*(_BYTE *)(a2 + 218) )\n  {\n    __fprintf_chk(stderr, 1LL, \"(Y-M-D) %04ld-%02ld-%02ld\", *(_QWORD *)(a2 + 40));\n    *(_BYTE *)(a2 + 218) = 1;\n    v2 = 1;\n    if ( *(_BYTE *)(a2 + 216) == *(_BYTE *)(a2 + 223) )\n      goto LABEL_5;\n    fputc(32, stderr);\n    goto LABEL_4;\n  }\n  v2 = 0;\n  if ( *(_BYTE *)(a2 + 216) != *(_BYTE *)(a2 + 223) )\n  {\nLABEL_4:\n    v3 = *(_QWORD *)(a2 + 40);\n    v4 = dcgettext(0LL, \"year: %04ld\", 5);\n    __fprintf_chk(stderr, 1LL, v4, v3);\n    v2 = 1;\n    *(_BYTE *)(a2 + 223) = *(_BYTE *)(a2 + 216);\n  }\nLABEL_5:\n  if ( *(_QWORD *)(a2 + 200) && !*(_BYTE *)(a2 + 221) )\n  {\n    __fprintf_chk(stderr, 1LL, ((unsigned __int8)v2 ^ 1u) + 4266851LL, *(_QWORD *)(a2 + 72));\n    v11 = *(_QWORD *)(a2 + 96);\n    if ( v11 )\n      __fprintf_chk(stderr, 1LL, \".%09d\", v11);\n    if ( *(_DWORD *)(a2 + 28) == 1 )\n      fwrite(\"pm\", 1uLL, 2uLL, stderr);\n    v7 = *(_QWORD *)(a2 + 176) == 0LL;\n    *(_BYTE *)(a2 + 221) = 1;\n    v2 = 1;\n    if ( !v7 )\n    {\n      v2 = *(_BYTE *)(a2 + 219);\n      if ( !v2 )\n        goto LABEL_32;\n    }\n  }\n  else if ( *(_QWORD *)(a2 + 176) && !*(_BYTE *)(a2 + 219) )\n  {\n    if ( !v2 )\n    {\nLABEL_10:\n      v5 = sub_403920(a2, (char *)&v14);\n      v6 = dcgettext(0LL, \"%s (day ordinal=%ld number=%d)\", 5);\n      __fprintf_chk(stderr, 1LL, v6, v5);\n      *(_BYTE *)(a2 + 219) = 1;\n      v2 = 1;\n      goto LABEL_11;\n    }\nLABEL_32:\n    fputc(32, stderr);\n    goto LABEL_10;\n  }\nLABEL_11:\n  if ( !*(_QWORD *)(a2 + 184) || *(_BYTE *)(a2 + 220) )\n  {\n    if ( !*(_QWORD *)(a2 + 208) || *(_BYTE *)(a2 + 222) )\n    {\n      if ( *(_BYTE *)(a2 + 160) )\n      {\n        v8 = *(_QWORD *)(a2 + 88);\n        if ( !v2 )\n          goto LABEL_22;\n        goto LABEL_17;\n      }\n      return fputc(10, stderr);\n    }\n    v12 = (const char *)(((unsigned __int8)v2 ^ 1u) + 4266806LL);\nLABEL_34:\n    v13 = sub_403290(*(_DWORD *)(a2 + 24), (__int64)&v14);\n    __fprintf_chk(stderr, 1LL, v12, v13);\n    v7 = *(_BYTE *)(a2 + 160) == 0;\n    *(_BYTE *)(a2 + 222) = 1;\n    if ( v7 )\n      return fputc(10, stderr);\n    goto LABEL_16;\n  }\n  __fprintf_chk(stderr, 1LL, ((unsigned __int8)v2 ^ 1u) + 4266879LL, *(unsigned int *)(a2 + 20));\n  v7 = *(_QWORD *)(a2 + 208) == 0LL;\n  *(_BYTE *)(a2 + 220) = 1;\n  if ( !v7 && !*(_BYTE *)(a2 + 222) )\n  {\n    v12 = \" UTC%s\";\n    goto LABEL_34;\n  }\n  if ( *(_BYTE *)(a2 + 160) )\n  {\nLABEL_16:\n    v8 = *(_QWORD *)(a2 + 88);\nLABEL_17:\n    fputc(32, stderr);\nLABEL_22:\n    v9 = dcgettext(0LL, \"number of seconds: %ld\", 5);\n    __fprintf_chk(stderr, 1LL, v9, v8);\n  }\n  return fputc(10, stderr);\n}\n", 
            "funcStartAddr": "0x403a10L", 
            "funcEndAddr": "0x403db0L", 
            "funcName": "sub_403A10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403DB0(__int16 *a1)\n{\n  __int64 v1; // r8\n  __int16 *v2; // r9\n  unsigned int v3; // er15\n  int v4; // ebp\n  char *v5; // rbx\n  __int16 *v6; // r14\n  int v7; // eax\n  __int16 *v8; // rcx\n  __m128i v9; // xmm7\n  __int64 v10; // rax\n  __m128i v11; // xmm0\n  __m128i v12; // xmm7\n  int v13; // ecx\n  char v14; // dl\n  int v16; // eax\n  unsigned int v17; // eax\n  __int64 v18; // rsi\n  const __m128i *v19; // rax\n  __m128i v20; // xmm1\n  __m128i v21; // xmm2\n  __m128i v22; // xmm3\n  __int64 v23; // r15\n  __int64 v24; // r10\n  __int64 v25; // rdi\n  __int64 v26; // r13\n  __int64 v27; // r11\n  __int64 v28; // rdi\n  __int64 v29; // rdx\n  unsigned __int8 *v30; // rax\n  int v31; // ebp\n  int v32; // ecx\n  __int64 v33; // rdx\n  unsigned __int8 *v34; // rsi\n  char v35; // cl\n  char *v36; // rsi\n  _BYTE *i; // rax\n  unsigned int v38; // ecx\n  unsigned __int8 v39; // al\n  char *j; // rcx\n  const char *v41; // rsi\n  const char **v42; // rbx\n  __int16 *v43; // rbp\n  const char **v44; // rbp\n  __int64 v45; // rdx\n  int v46; // ecx\n  _BYTE *v47; // rsi\n  __int64 v48; // rcx\n  char v49; // dl\n  bool v50; // al\n  unsigned int v51; // esi\n  unsigned __int8 *v52; // r11\n  __int64 v53; // rcx\n  int v54; // edi\n  int v55; // ebp\n  __int64 v56; // rcx\n  __int64 v57; // rbp\n  int v58; // edx\n  char *v59; // rbp\n  int v60; // er11\n  int v61; // eax\n  char v62; // r13\n  unsigned int v63; // edi\n  __m128i v64; // xmm0\n  __int64 v65; // rax\n  __m128i v66; // xmm0\n  __int64 v67; // rax\n  __int64 v68; // rdx\n  __m128i v69; // xmm0\n  __m128i v70; // xmm7\n  __int64 v71; // rax\n  int v72; // eax\n  __m128i v73; // xmm4\n  __m128i v74; // xmm5\n  __m128i v75; // xmm6\n  __int64 v76; // rsi\n  unsigned int v77; // er8\n  int v78; // eax\n  bool v79; // r8\n  unsigned __int8 *v80; // rax\n  unsigned __int8 *v81; // rdx\n  unsigned __int8 *v82; // rdx\n  bool v83; // di\n  unsigned __int8 *v84; // rdx\n  bool v85; // si\n  unsigned __int8 *v86; // rdx\n  unsigned __int8 *v87; // rdx\n  unsigned __int8 *v88; // rdx\n  _BOOL8 v89; // rcx\n  __int64 v90; // rax\n  __int64 v91; // rax\n  __int64 v92; // rax\n  __int64 v93; // rcx\n  __int64 v94; // r8\n  __int64 v95; // rdx\n  char v96; // si\n  char v97; // al\n  unsigned __int8 *v98; // rax\n  unsigned __int8 *v99; // rdx\n  unsigned __int8 *v100; // rcx\n  unsigned __int8 *v101; // rax\n  __int64 v102; // rax\n  __int64 v103; // rax\n  __int64 v104; // rax\n  __m128i v105; // xmm0\n  char *v106; // rax\n  __int64 v107; // rdi\n  const char *v108; // rsi\n  char *v109; // rax\n  __int64 v110; // rax\n  __int64 v111; // rax\n  __int64 v112; // rax\n  unsigned __int8 *v113; // rax\n  unsigned __int8 *v114; // rdx\n  unsigned __int8 *v115; // rax\n  int v116; // eax\n  bool v117; // r8\n  unsigned __int8 *v118; // rax\n  unsigned __int8 *v119; // rdx\n  unsigned __int8 *v120; // rdx\n  bool v121; // di\n  unsigned __int8 *v122; // rdx\n  bool v123; // si\n  unsigned __int8 *v124; // rdx\n  bool v125; // r11\n  unsigned __int8 *v126; // rdx\n  bool v127; // r10\n  unsigned __int8 *v128; // rdx\n  _BOOL8 v129; // rcx\n  char *v130; // rax\n  __int64 v131; // rdi\n  __int64 v132; // rsi\n  __int64 v133; // rax\n  unsigned __int8 *v134; // rdx\n  unsigned __int8 *v135; // rcx\n  unsigned __int8 *v136; // rax\n  __int64 v137; // rax\n  unsigned __int8 *v138; // rax\n  unsigned __int8 *v139; // rdx\n  __int64 v140; // rax\n  unsigned __int8 *v141; // rax\n  __int64 v142; // rax\n  const char *v143; // rsi\n  char *v144; // rax\n  char *v145; // rax\n  __int64 v146; // rdi\n  __int64 v147; // rsi\n  unsigned __int8 *v148; // rax\n  __int64 v149; // rax\n  __int64 v150; // rax\n  __int64 v151; // rax\n  __int64 v152; // rcx\n  __int64 v153; // r8\n  __int64 v154; // rdx\n  char v155; // si\n  __int64 v156; // rax\n  __int64 v157; // rax\n  int v158; // edx\n  __int64 v159; // rax\n  __int64 v160; // rdi\n  __int64 v161; // rsi\n  __int64 v162; // rcx\n  int v163; // er8\n  __int64 v164; // rdx\n  unsigned __int8 *v165; // rax\n  __int64 v166; // rdx\n  __int64 v167; // rdi\n  __int64 v168; // rdx\n  __int64 v169; // rsi\n  int v170; // ecx\n  __int64 v171; // rdx\n  bool v172; // r8\n  bool v173; // cl\n  bool v174; // si\n  bool v175; // di\n  _BOOL8 v176; // rdx\n  bool v177; // of\n  unsigned __int8 v178; // al\n  __m128i v179; // xmm0\n  __int64 v180; // rax\n  __int64 v181; // rax\n  __m128i v182; // xmm7\n  unsigned __int8 *v183; // rax\n  __m128i v184; // xmm0\n  unsigned __int8 *v185; // rax\n  __int64 v186; // rax\n  __int64 v187; // rax\n  __int64 v188; // rax\n  __int64 v189; // rcx\n  char v190; // al\n  __m128i v191; // xmm0\n  unsigned __int8 *v192; // rax\n  int v193; // eax\n  bool v194; // r8\n  unsigned __int8 *v195; // rax\n  unsigned __int8 *v196; // rdx\n  unsigned __int8 *v197; // rdx\n  bool v198; // di\n  unsigned __int8 *v199; // rdx\n  bool v200; // si\n  unsigned __int8 *v201; // rdx\n  bool v202; // r11\n  unsigned __int8 *v203; // rdx\n  bool v204; // r10\n  unsigned __int8 *v205; // rdx\n  _BOOL8 v206; // rcx\n  __int64 v207; // r9\n  char *v208; // rbp\n  int v209; // edx\n  unsigned int v210; // eax\n  bool v211; // cf\n  _BOOL4 v212; // eax\n  __int64 v213; // rbp\n  const char *v214; // rsi\n  char **v215; // rbx\n  _BOOL4 v216; // ebp\n  bool v217; // dl\n  bool v218; // zf\n  const char *v219; // rsi\n  char **v220; // rcx\n  __int64 v221; // rbp\n  char **v222; // rax\n  __m128i v223; // xmm7\n  unsigned __int8 *v224; // rax\n  bool v225; // r8\n  bool v226; // cl\n  bool v227; // dl\n  bool v228; // si\n  _BOOL8 v229; // rdi\n  _BOOL8 v230; // rdi\n  __int64 v231; // rax\n  char *v232; // rcx\n  int v233; // er8\n  char *v234; // rbx\n  char v235; // dl\n  const char *v236; // rsi\n  char *v237; // r15\n  const char **v238; // rbx\n  int v239; // ebp\n  int v240; // eax\n  const char **v241; // rcx\n  const char *v242; // rsi\n  char *v243; // r15\n  const char **v244; // rbx\n  int v245; // ebp\n  int v246; // eax\n  const char **v247; // r10\n  char v248; // al\n  char *v249; // rsi\n  char *v250; // rcx\n  char **v251; // rcx\n  char *v252; // rsi\n  __int64 v253; // [rsp-20h] [rbp-608h]\n  __int64 v254; // [rsp-20h] [rbp-608h]\n  __int64 v255; // [rsp-18h] [rbp-600h]\n  __int64 v256; // [rsp-18h] [rbp-600h]\n  __int64 v257; // [rsp-10h] [rbp-5F8h]\n  __int64 v258; // [rsp-10h] [rbp-5F8h]\n  __int64 v259; // [rsp+8h] [rbp-5E0h]\n  int v260; // [rsp+8h] [rbp-5E0h]\n  unsigned int v261; // [rsp+8h] [rbp-5E0h]\n  unsigned int v262; // [rsp+8h] [rbp-5E0h]\n  __int16 *v263; // [rsp+8h] [rbp-5E0h]\n  int v264; // [rsp+8h] [rbp-5E0h]\n  __int64 v265; // [rsp+10h] [rbp-5D8h]\n  char *v266; // [rsp+10h] [rbp-5D8h]\n  __int64 v267; // [rsp+10h] [rbp-5D8h]\n  __int64 v268; // [rsp+10h] [rbp-5D8h]\n  __int16 *v269; // [rsp+10h] [rbp-5D8h]\n  int v270; // [rsp+18h] [rbp-5D0h]\n  __int64 v271; // [rsp+18h] [rbp-5D0h]\n  char v272; // [rsp+18h] [rbp-5D0h]\n  char v273; // [rsp+18h] [rbp-5D0h]\n  unsigned int v274; // [rsp+24h] [rbp-5C4h]\n  __int64 v275; // [rsp+28h] [rbp-5C0h]\n  __int64 v276; // [rsp+30h] [rbp-5B8h]\n  __int64 v277; // [rsp+38h] [rbp-5B0h]\n  __int64 v278; // [rsp+40h] [rbp-5A8h]\n  __int16 *v279; // [rsp+48h] [rbp-5A0h]\n  __int64 v280; // [rsp+50h] [rbp-598h]\n  __int64 v281; // [rsp+58h] [rbp-590h]\n  char *v282; // [rsp+60h] [rbp-588h]\n  __int64 v283; // [rsp+68h] [rbp-580h]\n  __int64 v284; // [rsp+70h] [rbp-578h]\n  unsigned __int8 *v285; // [rsp+78h] [rbp-570h]\n  char s1[3]; // [rsp+80h] [rbp-568h]\n  char v287; // [rsp+83h] [rbp-565h]\n  _BYTE v288[5]; // [rsp+93h] [rbp-555h]\n  __int16 v289; // [rsp+A0h] [rbp-548h]\n  __int16 v290; // [rsp+C6h] [rbp-522h]\n  __int128 v291; // [rsp+D0h] [rbp-518h]\n  __int128 v292; // [rsp+E0h] [rbp-508h]\n  __int128 v293; // [rsp+F0h] [rbp-4F8h]\n  __int64 v294; // [rsp+100h] [rbp-4E8h]\n  __m128i v295; // [rsp+110h] [rbp-4D8h]\n  __m128i v296; // [rsp+120h] [rbp-4C8h]\n  __m128i v297; // [rsp+130h] [rbp-4B8h]\n  __int64 v298; // [rsp+140h] [rbp-4A8h]\n  char v299; // [rsp+150h] [rbp-498h]\n\n  v1 = 0LL;\n  v2 = a1;\n  v3 = 38;\n  v4 = -2;\n  v289 = 0;\n  v5 = &v299;\n  v6 = &v289;\n  v274 = 0;\nLABEL_2:\n  if ( v4 != -2 )\n    goto LABEL_3;\n  v30 = *(unsigned __int8 **)v2;\n  v31 = **(unsigned __int8 **)v2;\n  v32 = **(unsigned __int8 **)v2;\n  while ( 1 )\n  {\nLABEL_31:\n    LODWORD(v33) = v32;\n    if ( (unsigned __int8)v32 > 0x20u )\n      goto LABEL_55;\n    if ( !((1LL << v32) & 0x100003E00LL) )\n    {\nLABEL_36:\n      if ( (unsigned int)(v31 - 48) > 9 )\n      {\n        v35 = v31 - 65;\n        if ( (unsigned int)(v31 - 65) > 0x39 )\n          goto LABEL_27;\nLABEL_38:\n        if ( !((1LL << v35) & 0x3FFFFFF03FFFFFFLL) )\n          goto LABEL_58;\n        v36 = s1;\n        for ( i = (_BYTE *)(*(_QWORD *)v2 + 1LL); ; ++i )\n        {\n          if ( v36 < v288 )\n            *v36++ = v33;\n          *(_QWORD *)v2 = i;\n          LOBYTE(v33) = *i;\n          v38 = (unsigned __int8)*i - 65;\n          if ( (v38 > 0x39 || !((1LL << v38) & 0x3FFFFFF03FFFFFFLL)) && (_BYTE)v33 != 46 )\n            break;\n        }\n        *v36 = 0;\n        v39 = s1[0];\n        for ( j = s1; *j; v39 = *j )\n        {\n          if ( (unsigned int)v39 - 97 < 0x1A )\n            v39 -= 32;\n          *(++j - 1) = v39;\n        }\n        v266 = v5;\n        v41 = \"AM\";\n        v42 = (const char **)&off_4134C0;\n        v260 = v1;\n        v43 = v2;\n        do\n        {\n          if ( !strcmp(s1, v41) )\n          {\n            v2 = v43;\n            v44 = v42;\n            v1 = v260;\n            v5 = v266;\n            v45 = *((int *)v44 + 3);\n            v4 = *((_DWORD *)v44 + 2);\n            goto LABEL_54;\n          }\n          v42 += 2;\n          v41 = *v42;\n        }\n        while ( *v42 );\n        v207 = (__int64)v43;\n        v208 = s1;\n        do\n        {\n          v209 = *(_DWORD *)v208;\n          v208 += 4;\n          v210 = ~v209 & (v209 - 16843009) & 0x80808080;\n        }\n        while ( !v210 );\n        if ( !(~v209 & (v209 - 16843009) & 0x8080) )\n          LOBYTE(v210) = (~v209 & (v209 - 16843009) & 0x80808080) >> 16;\n        if ( !(~v209 & (v209 - 16843009) & 0x8080) )\n          v208 += 2;\n        v211 = __CFADD__((_BYTE)v210, (_BYTE)v210);\n        v212 = 1;\n        v213 = &v208[-v211 - 3] - s1;\n        if ( v213 != 3 )\n        {\n          v212 = 0;\n          if ( v213 == 4 )\n            v212 = v287 == 46;\n        }\n        v214 = \"JANUARY\";\n        v277 = v213;\n        v215 = &off_413320;\n        v216 = v212;\n        v271 = v207;\n        do\n        {\n          if ( v216 )\n            v217 = strncmp(s1, v214, 3uLL) == 0;\n          else\n            v217 = strcmp(s1, v214) == 0;\n          if ( v217 )\n            goto LABEL_257;\n          v215 += 2;\n          v214 = *v215;\n        }\n        while ( *v215 );\n        v5 = v266;\n        v221 = v277;\n        LODWORD(v278) = v260;\n        v222 = sub_403630(v271, s1);\n        v2 = (__int16 *)v271;\n        v1 = (int)v278;\n        if ( !v222 )\n        {\n          v218 = memcmp(s1, \"DST\", 4uLL) == 0;\n          v219 = \"YEAR\";\n          if ( v218 )\n          {\n            *(_QWORD *)&v291 = 0LL;\n            v4 = 259;\n            goto LABEL_72;\n          }\n          v215 = &off_413260;\n          v260 = v278;\n          LOBYTE(v277) = 0;\n          while ( strcmp(s1, v219) )\n          {\n            v215 += 2;\n            v219 = *v215;\n            if ( !*v215 )\n            {\n              v232 = &s1[v221 - 1];\n              v233 = v260;\n              v234 = v266;\n              v235 = v277;\n              v2 = (__int16 *)v271;\n              if ( *v232 == 83 )\n              {\n                v262 = v3;\n                v242 = \"YEAR\";\n                v243 = v266;\n                v268 = v221;\n                v244 = (const char **)&off_413260;\n                v245 = v233;\n                *v232 = 0;\n                do\n                {\n                  v278 = (__int64)v2;\n                  v277 = (__int64)v232;\n                  v273 = v235;\n                  v246 = strcmp(s1, v242);\n                  v235 = v273;\n                  v232 = (char *)v277;\n                  v2 = (__int16 *)v278;\n                  if ( !v246 )\n                  {\n                    v247 = v244;\n                    v1 = v245;\n                    v5 = v243;\n                    v3 = v262;\n                    v45 = *((int *)v247 + 3);\n                    v4 = *((_DWORD *)v247 + 2);\n                    goto LABEL_54;\n                  }\n                  v244 += 2;\n                  v242 = *v244;\n                }\n                while ( *v244 );\n                v233 = v245;\n                v234 = v243;\n                v221 = v268;\n                v3 = v262;\n                *(_BYTE *)v277 = 83;\n              }\n              v261 = v3;\n              v236 = \"TOMORROW\";\n              v237 = v234;\n              v267 = v221;\n              v238 = (const char **)&off_413100;\n              v239 = v233;\n              do\n              {\n                v277 = (__int64)v2;\n                v272 = v235;\n                v240 = strcmp(s1, v236);\n                v235 = v272;\n                v2 = (__int16 *)v277;\n                if ( !v240 )\n                {\n                  v241 = v238;\n                  v1 = v239;\n                  v5 = v237;\n                  v3 = v261;\n                  v45 = *((int *)v241 + 3);\n                  v4 = *((_DWORD *)v241 + 2);\n                  goto LABEL_54;\n                }\n                v238 += 2;\n                v236 = *v238;\n              }\n              while ( *v238 );\n              v1 = v239;\n              v5 = v237;\n              v248 = s1[0];\n              v3 = v261;\n              if ( v267 == 1 )\n              {\n                v251 = &off_412C20;\n                if ( s1[0] == 65 )\n                {\n                  *(_QWORD *)&v291 = -3600LL;\n                  v4 = 273;\n                  goto LABEL_72;\n                }\n                while ( 1 )\n                {\n                  v252 = v251[2];\n                  if ( !v252 )\n                    break;\n                  if ( *v252 == s1[0] )\n                  {\n                    v45 = *((int *)v251 + 7);\n                    v4 = *((_DWORD *)v251 + 6);\n                    goto LABEL_54;\n                  }\n                  v251 += 2;\n                }\n              }\n              v249 = s1;\n              v250 = s1;\n              if ( !s1[0] )\n                goto LABEL_294;\n              do\n              {\n                if ( v248 == 46 )\n                  v235 = 1;\n                else\n                  ++v250;\n                v248 = *++v249;\n                *v250 = *v249;\n              }\n              while ( v248 );\n              if ( !v235 || (v263 = v2, v222 = sub_403630((__int64)v2, s1), v2 = v263, v1 = v239, !v222) )\n              {\nLABEL_294:\n                if ( !*((_BYTE *)v2 + 217) )\n                  goto LABEL_115;\n                v269 = v2;\n                v264 = v1;\n                v4 = 63;\n                dcgettext(0LL, \"error: unknown word '%s'\\n\", 5);\n                sub_403400();\n                v7 = 2;\n                v1 = v264;\n                v2 = v269;\n                goto LABEL_73;\n              }\n              goto LABEL_259;\n            }\n          }\nLABEL_257:\n          v220 = v215;\n          v1 = v260;\n          v5 = v266;\n          v2 = (__int16 *)v271;\n          v45 = *((int *)v220 + 3);\n          v4 = *((_DWORD *)v220 + 2);\n          goto LABEL_54;\n        }\nLABEL_259:\n        v45 = *((int *)v222 + 3);\n        v4 = *((_DWORD *)v222 + 2);\nLABEL_54:\n        *(_QWORD *)&v291 = v45;\nLABEL_3:\n        if ( v4 <= 0 )\n          goto LABEL_28;\n        if ( v4 > 277 )\n        {\n          v3 += 2;\n          v7 = 2;\n          goto LABEL_6;\n        }\n        goto LABEL_72;\n      }\nLABEL_103:\n      v30 = *(unsigned __int8 **)v2;\n      v51 = 0;\nLABEL_75:\n      v52 = v30;\n      v53 = 0LL;\n      v54 = (unsigned __int8)v33;\n      while ( 1 )\n      {\n        v55 = v54 - 48;\n        if ( v51 == -1 )\n          v55 = 48 - v54;\n        v177 = __OFADD__(v55, v53);\n        v56 = v55 + v53;\n        if ( v177 )\n          goto LABEL_115;\n        v54 = v52[1];\n        v57 = (__int64)(v52 + 1);\n        if ( (unsigned int)(v54 - 48) > 9 )\n          break;\n        v177 = (unsigned __int128)(10 * (__int128)v56) >> 64 != 0;\n        v53 = 10 * v56;\n        if ( v177 )\n          goto LABEL_115;\n        ++v52;\n      }\n      if ( (v52[1] & 0xFD) != 44 || (v58 = (char)v52[2] - 48, (unsigned int)v58 > 9) )\n      {\n        *(_QWORD *)v2 = v57;\n        v275 = v56;\n        LOBYTE(v291) = (v51 & 0x80000000) != 0;\n        v276 = v57 - (_QWORD)v30;\n        v7 = 20 - (v51 >= 1);\n        v4 = 275 - (v51 >= 1);\n        goto LABEL_73;\n      }\n      v59 = (char *)(v52 + 3);\n      v60 = (char)v52[3];\n      v61 = 8;\n      v62 = v60;\n      do\n      {\n        v63 = v60 - 48;\n        v58 *= 10;\n        if ( (unsigned int)(v60 - 48) <= 9 )\n        {\n          v60 = v59[1];\n          v58 += v63;\n          ++v59;\n          v62 = v60;\n          v63 = v60 - 48;\n        }\n        --v61;\n      }\n      while ( v61 );\n      if ( v51 != -1 )\n      {\n        if ( v63 > 9 )\n          goto LABEL_250;\n        goto LABEL_88;\n      }\n      if ( v63 <= 9 )\n      {\n        if ( v62 != 48 )\n        {\nLABEL_113:\n          ++v58;\n          if ( (unsigned int)(*v59 - 48) > 9 )\n            goto LABEL_91;\n          do\nLABEL_88:\n            ++v59;\n          while ( (unsigned int)(*v59 - 48) <= 9 );\n          if ( (v51 & 0x80000000) != 0 && v58 )\n            goto LABEL_91;\nLABEL_250:\n          *(_QWORD *)v2 = v59;\n          v275 = v58;\n          *(_QWORD *)&v291 = v56;\n          v7 = 22 - (v51 >= 1);\n          v4 = 277 - (v51 >= 1);\n          goto LABEL_73;\n        }\n        while ( (unsigned int)(*++v59 - 48) <= 9 )\n        {\n          if ( *v59 != 48 )\n            goto LABEL_113;\n        }\n      }\n      if ( !v58 )\n      {\n        *(_QWORD *)v2 = v59;\n        v7 = 21;\n        v4 = 276;\n        *(_QWORD *)&v291 = v56;\n        v275 = 0LL;\n        goto LABEL_73;\n      }\nLABEL_91:\n      if ( v56 != 0x8000000000000000LL )\n      {\n        *(_QWORD *)v2 = v59;\n        v4 = 276;\n        *(_QWORD *)&v291 = v56 - 1;\n        v275 = 1000000000 - v58;\n        v7 = 21;\n        goto LABEL_73;\n      }\nLABEL_115:\n      v7 = 2;\n      v4 = 63;\n      goto LABEL_73;\n    }\n    v34 = v30 + 1;\n    while ( 1 )\n    {\n      *(_QWORD *)v2 = v34;\n      v31 = *v34;\n      v30 = v34;\n      LODWORD(v33) = *v34;\n      if ( (unsigned __int8)v31 > 0x20u )\n        break;\n      ++v34;\n      if ( !((1LL << v33) & 0x100003E00LL) )\n        goto LABEL_36;\n    }\nLABEL_55:\n    v46 = (v33 - 43) & 0xFFFFFFFD;\n    if ( (unsigned int)(v31 - 48) <= 9 )\n    {\n      v50 = (_BYTE)v33 == 45;\n      if ( (_BYTE)v46 )\n        goto LABEL_103;\n      goto LABEL_67;\n    }\n    if ( (_BYTE)v46 )\n      break;\n    v50 = (_BYTE)v33 == 45;\nLABEL_67:\n    v33 = *(_QWORD *)v2 + 1LL;\n    v51 = (unsigned __int8)v50 < 1u ? 1 : -1;\n    while ( 1 )\n    {\n      *(_QWORD *)v2 = v33;\n      v30 = (unsigned __int8 *)v33;\n      LOBYTE(v33) = *(_BYTE *)v33;\n      v32 = (unsigned __int8)v33;\n      if ( (unsigned __int8)v33 > 0x20u )\n        break;\n      v33 = (__int64)(v30 + 1);\n      if ( !((1LL << v32) & 0x100003E00LL) )\n      {\n        v31 = (unsigned __int8)v32;\n        goto LABEL_31;\n      }\n    }\n    v31 = (unsigned __int8)v33;\n    if ( (unsigned int)(unsigned __int8)v33 - 48 <= 9 )\n      goto LABEL_75;\n  }\n  v35 = v31 - 65;\n  if ( (unsigned int)(v31 - 65) <= 0x39 )\n    goto LABEL_38;\nLABEL_58:\n  if ( (_BYTE)v33 != 40 )\n  {\nLABEL_27:\n    *(_QWORD *)v2 = v30 + 1;\n    v4 = *v30;\n    if ( !(_BYTE)v4 )\n      goto LABEL_28;\nLABEL_72:\n    v7 = (unsigned __int8)byte_413820[v4];\nLABEL_73:\n    v3 += v7;\n    goto LABEL_6;\n  }\n  v47 = *(_BYTE **)v2;\n  v48 = 0LL;\n  while ( 1 )\n  {\n    v30 = v47 + 1;\n    *(_QWORD *)v2 = v47 + 1;\n    v49 = *v47;\n    if ( !*v47 )\n      break;\n    if ( v49 == 40 )\n      ++v48;\n    else\n      v48 -= v49 == 41;\n    if ( !v48 )\n    {\n      v31 = (unsigned __int8)v47[1];\n      v32 = (unsigned __int8)v47[1];\n      goto LABEL_31;\n    }\n    ++v47;\n  }\nLABEL_28:\n  v7 = 0;\n  v4 = 0;\nLABEL_6:\n  if ( v3 <= 0x70 && byte_4135E0[v3] == v7 )\n  {\n    v1 = (unsigned __int8)byte_413660[v3];\n    if ( byte_413660[v3] )\n    {\n      v8 = v6;\n      v4 = -2;\n      v5 += 56;\n      v274 = (v274 < 1) + v274 - 1;\n      *((_QWORD *)&v291 + 1) = v275;\n      v9 = _mm_load_si128((const __m128i *)&v291);\n      *(_QWORD *)&v292 = v276;\n      v10 = v294;\n      v11 = _mm_load_si128((const __m128i *)&v292);\n      *(__m128i *)v5 = v9;\n      v12 = _mm_load_si128((const __m128i *)&v293);\n      *((_QWORD *)v5 + 6) = v10;\n      *((__m128i *)v5 + 1) = v11;\n      *((__m128i *)v5 + 2) = v12;\n      goto LABEL_10;\n    }\n    v67 = *((_QWORD *)v5 + 13);\n    v8 = v6;\n    v68 = (__int64)v5;\n    v69 = _mm_loadu_si128((const __m128i *)(v5 + 72));\n    v23 = *((_QWORD *)v5 + 7);\n    v295 = _mm_loadu_si128((const __m128i *)(v5 + 56));\n    v70 = _mm_loadu_si128((const __m128i *)(v5 + 88));\n    v24 = *((_QWORD *)v5 + 8);\n    v26 = *((_QWORD *)v5 + 9);\n    v298 = v67;\n    v71 = *((_QWORD *)v5 + 11);\n    v27 = *((_QWORD *)v5 + 10);\n    v296 = v69;\n    v297 = v70;\n    v265 = v71;\n    v259 = *((_QWORD *)v5 + 12);\n    v270 = *((_DWORD *)v5 + 26);\n    v72 = -28;\n    goto LABEL_100;\n  }\n  while ( 1 )\n  {\n    v13 = (unsigned __int8)byte_413720[v1];\n    v14 = byte_413720[v1];\n    if ( byte_413720[v1] )\n    {\n      v18 = (unsigned __int8)byte_413520[(unsigned __int8)byte_413720[v1]];\n      v19 = (const __m128i *)&v5[56 * (1 - (unsigned __int8)byte_413520[(unsigned __int8)byte_413720[v1]])];\n      v20 = _mm_loadu_si128(v19);\n      v21 = _mm_loadu_si128(v19 + 1);\n      v22 = _mm_loadu_si128(v19 + 2);\n      v23 = v19->m128i_i64[0];\n      v24 = v19->m128i_i64[1];\n      v298 = v19[3].m128i_i64[0];\n      v25 = v19[2].m128i_i64[0];\n      v26 = v19[1].m128i_i64[0];\n      v295 = v20;\n      v27 = v19[1].m128i_i64[1];\n      v296 = v21;\n      v265 = v25;\n      v28 = v19[2].m128i_i64[1];\n      LODWORD(v19) = v19[3].m128i_i32[0];\n      v297 = v22;\n      v259 = v28;\n      v270 = (int)v19;\n      v29 = (unsigned __int8)(v14 - 4);\n      switch ( (_BYTE)v29 )\n      {\n        case 0:\n          v105 = _mm_loadu_si128((const __m128i *)v5);\n          *((_BYTE *)v2 + 160) = 1;\n          *(__m128i *)(v2 + 44) = v105;\n          v279 = (__int16 *)v24;\n          v278 = v27;\n          v277 = (__int64)v2;\n          v106 = dcgettext(0LL, aNumberOf, 5);\n          v8 = v6 - 2;\n          v68 = (__int64)(v5 - 112);\n          LODWORD(v1) = -93;\n          v107 = (__int64)v106;\n          v72 = 2;\n          goto LABEL_148;\n        case 3:\n          v279 = (__int16 *)v24;\n          v108 = \"datetime\";\n          v278 = v27;\n          ++*((_QWORD *)v2 + 25);\n          ++*((_QWORD *)v2 + 21);\n          v277 = (__int64)v2;\n          goto LABEL_152;\n        case 4:\n          v279 = (__int16 *)v24;\n          v108 = \"--time\" + 2;\n          v278 = v27;\n          ++*((_QWORD *)v2 + 25);\n          v277 = (__int64)v2;\n          goto LABEL_152;\n        case 5:\n          v279 = (__int16 *)v24;\n          v108 = (const char *)&unk_411BF0;\n          v278 = v27;\n          ++*((_QWORD *)v2 + 23);\n          v277 = (__int64)v2;\n          goto LABEL_152;\n        case 6:\n          v279 = (__int16 *)v24;\n          v108 = \"zone\";\n          ++*((_QWORD *)v2 + 26);\n          v278 = v27;\n          v277 = (__int64)v2;\n          goto LABEL_152;\n        case 7:\n          v279 = (__int16 *)v24;\n          v108 = \"date\";\n          v278 = v27;\n          ++*((_QWORD *)v2 + 21);\n          v277 = (__int64)v2;\n          goto LABEL_152;\n        case 8:\n          v279 = (__int16 *)v24;\n          v108 = \"day\";\n          v278 = v27;\n          ++*((_QWORD *)v2 + 22);\n          v277 = (__int64)v2;\nLABEL_152:\n          v109 = dcgettext(0LL, v108, 5);\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          LODWORD(v1) = -93;\n          v107 = (__int64)v109;\n          v72 = 4;\nLABEL_148:\n          v2 = (__int16 *)v277;\n          v27 = v278;\n          v24 = (__int64)v279;\n          if ( !*(_BYTE *)(v277 + 217) )\n            break;\n          LODWORD(v283) = -93;\n          v282 = (char *)v68;\n          LODWORD(v281) = v72;\n          v280 = (__int64)v279;\n          v279 = v8;\n          sub_403A10(v107, v277);\n          goto LABEL_150;\n        case 9:\n          v279 = v2;\n          v143 = \"relative\";\n          v278 = v24;\n          v277 = v27;\n          goto LABEL_184;\n        case 0xA:\n          v279 = v2;\n          v278 = v24;\n          v277 = v27;\n          v145 = dcgettext(0LL, \"number\", 5);\n          v2 = v279;\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          v146 = (__int64)v145;\n          LODWORD(v1) = -93;\n          v72 = 4;\n          v27 = v277;\n          v24 = v278;\n          if ( !*((_BYTE *)v279 + 217) )\n            break;\n          v147 = (__int64)v279;\n          LODWORD(v283) = -93;\n          v282 = v5 - 56;\n          LODWORD(v281) = 4;\n          v280 = v278;\n          v279 = v6 - 1;\n          v278 = v277;\n          v277 = (__int64)v2;\n          sub_403A10(v146, v147);\n          goto LABEL_150;\n        case 0xB:\n          v279 = v2;\n          v143 = \"hybrid\";\n          v278 = v24;\n          v277 = v27;\nLABEL_184:\n          v144 = dcgettext(0LL, v143, 5);\n          v2 = v279;\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          v131 = (__int64)v144;\n          LODWORD(v1) = -93;\n          v72 = 4;\n          v27 = v277;\n          v24 = v278;\n          if ( !*((_BYTE *)v279 + 217) )\n            break;\n          LODWORD(v283) = -93;\n          v132 = (__int64)v279;\n          v282 = v5 - 56;\n          LODWORD(v281) = 4;\n          v280 = v278;\n          v279 = v6 - 1;\n          v278 = v277;\n          v277 = (__int64)v2;\n          goto LABEL_176;\n        case 0xE:\n          v141 = (unsigned __int8 *)*((_QWORD *)v5 - 6);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          *((_QWORD *)v2 + 10) = 0LL;\n          *((_QWORD *)v2 + 11) = 0LL;\n          LODWORD(v1) = -93;\n          *((_QWORD *)v2 + 9) = v141;\n          v142 = *(_QWORD *)v5;\n          *((_QWORD *)v2 + 12) = 0LL;\n          *((_DWORD *)v2 + 7) = v142;\n          v72 = 7;\n          break;\n        case 0xF:\n          v138 = (unsigned __int8 *)*((_QWORD *)v5 - 6);\n          v139 = (unsigned __int8 *)*((_QWORD *)v5 - 20);\n          v8 = v6 - 4;\n          *((_QWORD *)v2 + 11) = 0LL;\n          *((_QWORD *)v2 + 12) = 0LL;\n          LODWORD(v1) = -93;\n          *((_QWORD *)v2 + 10) = v138;\n          v140 = *(_QWORD *)v5;\n          *((_QWORD *)v2 + 9) = v139;\n          v68 = (__int64)(v5 - 224);\n          *((_DWORD *)v2 + 7) = v140;\n          v72 = 7;\n          break;\n        case 0x10:\n          v134 = (unsigned __int8 *)*((_QWORD *)v5 - 20);\n          LODWORD(v1) = -93;\n          v135 = (unsigned __int8 *)*((_QWORD *)v5 - 34);\n          *((_QWORD *)v2 + 11) = *((_QWORD *)v5 - 7);\n          v136 = (unsigned __int8 *)*((int *)v5 - 12);\n          *((_QWORD *)v2 + 9) = v135;\n          v8 = v6 - 6;\n          *((_QWORD *)v2 + 12) = v136;\n          v137 = *(_QWORD *)v5;\n          *((_QWORD *)v2 + 10) = v134;\n          v68 = (__int64)(v5 - 336);\n          *((_DWORD *)v2 + 7) = v137;\n          v72 = 7;\n          break;\n        case 0x12:\n          v115 = (unsigned __int8 *)*((_QWORD *)v5 - 6);\n          *((_QWORD *)v2 + 10) = 0LL;\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          *((_QWORD *)v2 + 11) = 0LL;\n          LODWORD(v1) = 20;\n          *((_QWORD *)v2 + 9) = v115;\n          v72 = 8;\n          *((_QWORD *)v2 + 12) = 0LL;\n          *((_DWORD *)v2 + 7) = 2;\n          break;\n        case 0x13:\n          v113 = (unsigned __int8 *)*((_QWORD *)v5 - 6);\n          v114 = (unsigned __int8 *)*((_QWORD *)v5 - 20);\n          *((_QWORD *)v2 + 11) = 0LL;\n          v8 = v6 - 4;\n          *((_QWORD *)v2 + 12) = 0LL;\n          LODWORD(v1) = 20;\n          *((_QWORD *)v2 + 9) = v114;\n          v68 = (__int64)(v5 - 224);\n          *((_QWORD *)v2 + 10) = v113;\n          v72 = 8;\n          *((_DWORD *)v2 + 7) = 2;\n          break;\n        case 0x14:\n          v98 = (unsigned __int8 *)*((_QWORD *)v5 - 7);\n          v99 = (unsigned __int8 *)*((_QWORD *)v5 - 20);\n          *((_DWORD *)v2 + 7) = 2;\n          LODWORD(v1) = 20;\n          v100 = (unsigned __int8 *)*((_QWORD *)v5 - 34);\n          *((_QWORD *)v2 + 11) = v98;\n          v101 = (unsigned __int8 *)*((int *)v5 - 12);\n          *((_QWORD *)v2 + 9) = v100;\n          v8 = v6 - 6;\n          *((_QWORD *)v2 + 10) = v99;\n          v68 = (__int64)(v5 - 336);\n          *((_QWORD *)v2 + 12) = v101;\n          v72 = 8;\n          break;\n        case 0x17:\n          v93 = *((_QWORD *)v5 - 5);\n          v94 = *(_QWORD *)v5;\n          v279 = (__int16 *)v24;\n          v95 = *((_QWORD *)v5 - 6);\n          v96 = *(v5 - 56);\n          v278 = v27;\n          ++*((_QWORD *)v2 + 26);\n          v277 = (__int64)v2;\n          v97 = sub_403570((_DWORD *)v2 + 6, v96, v95, v93, v94);\n          v2 = (__int16 *)v277;\n          v27 = v278;\n          v24 = (__int64)v279;\n          if ( !v97 )\n            return 1LL;\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -27;\n          v72 = 10;\n          break;\n        case 0x18:\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          LODWORD(v1) = -93;\n          *((_DWORD *)v2 + 5) = *(_QWORD *)v5;\n          v72 = 11;\n          break;\n        case 0x19:\n          *((_DWORD *)v2 + 5) = 1;\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -93;\n          ++*((_QWORD *)v2 + 24);\n          v72 = 11;\n          break;\n        case 0x1A:\n          v92 = *(_QWORD *)v5;\n          goto LABEL_121;\n        case 0x1B:\n          *((_DWORD *)v2 + 6) = 25200;\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          LODWORD(v1) = -93;\n          v72 = 12;\n          break;\n        case 0x1C:\n          v133 = *((_QWORD *)v5 - 7);\n          v279 = (__int16 *)v24;\n          v278 = v27;\n          *((_DWORD *)v2 + 6) = v133;\n          goto LABEL_172;\n        case 0x1D:\n          v279 = (__int16 *)v24;\n          v278 = v27;\n          *((_DWORD *)v2 + 6) = 25200;\nLABEL_172:\n          v116 = *((_DWORD *)v5 + 12);\n          v117 = __OFADD__(*((_DWORD *)v2 + 38), v116);\n          *((_DWORD *)v2 + 38) += v116;\n          v118 = (unsigned __int8 *)*((_QWORD *)v2 + 18);\n          v119 = &v118[*((_QWORD *)v5 + 5)];\n          LOBYTE(v118) = __OFADD__(*((_QWORD *)v5 + 5), v118);\n          *((_QWORD *)v2 + 18) = v119;\n          v120 = (unsigned __int8 *)*((_QWORD *)v2 + 17);\n          v121 = __OFADD__(*((_QWORD *)v5 + 4), v120);\n          *((_QWORD *)v2 + 17) = &v120[*((_QWORD *)v5 + 4)];\n          v122 = (unsigned __int8 *)*((_QWORD *)v2 + 16);\n          v123 = __OFADD__(*((_QWORD *)v5 + 3), v122);\n          *((_QWORD *)v2 + 16) = &v122[*((_QWORD *)v5 + 3)];\n          v124 = (unsigned __int8 *)*((_QWORD *)v2 + 15);\n          v125 = __OFADD__(*((_QWORD *)v5 + 2), v124);\n          *((_QWORD *)v2 + 15) = &v124[*((_QWORD *)v5 + 2)];\n          v126 = (unsigned __int8 *)*((_QWORD *)v2 + 14);\n          v127 = __OFADD__(*((_QWORD *)v5 + 1), v126);\n          *((_QWORD *)v2 + 14) = &v126[*((_QWORD *)v5 + 1)];\n          v128 = (unsigned __int8 *)*((_QWORD *)v2 + 13);\n          v129 = __OFADD__(*(_QWORD *)v5, v128);\n          *((_QWORD *)v2 + 13) = &v128[*(_QWORD *)v5];\n          if ( (unsigned __int8)(v125 | v123 | v121 | v117 | (unsigned __int8)v118) | v127 || v129 )\n            return 1LL;\n          *((_BYTE *)v2 + 161) = 1;\n          v277 = (__int64)v2;\n          v130 = dcgettext(0LL, \"relative\", 5);\n          v2 = (__int16 *)v277;\n          v8 = v6 - 2;\n          v68 = (__int64)(v5 - 112);\n          v131 = (__int64)v130;\n          LODWORD(v1) = -93;\n          v72 = 12;\n          v27 = v278;\n          v24 = (__int64)v279;\n          if ( *(_BYTE *)(v277 + 217) )\n          {\n            LODWORD(v283) = -93;\n            v132 = v277;\n            v282 = v5 - 112;\n            LODWORD(v281) = 12;\n            v280 = (__int64)v279;\n            v279 = v6 - 2;\nLABEL_176:\n            sub_4036F0(v131, v132);\nLABEL_150:\n            v2 = (__int16 *)v277;\n            v27 = v278;\n            v8 = v279;\n            v24 = v280;\n            v72 = v281;\n            v68 = (__int64)v282;\n            LODWORD(v1) = v283;\n          }\n          break;\n        case 0x1E:\n          v152 = *((_QWORD *)v5 - 5);\n          v153 = *(_QWORD *)v5;\n          v279 = (__int16 *)v24;\n          v154 = *((_QWORD *)v5 - 6);\n          v155 = *(v5 - 56);\n          v278 = v27;\n          v277 = (__int64)v2;\n          if ( !(unsigned __int8)sub_403570((_DWORD *)v2 + 6, v155, v154, v152, v153) )\n            return 1LL;\n          v2 = (__int16 *)v277;\n          v156 = *(int *)(v277 + 24);\n          v177 = __OFADD__(*((_QWORD *)v5 - 14), v156);\n          v157 = *((_QWORD *)v5 - 14) + v156;\n          v158 = v177;\n          *(_DWORD *)(v277 + 24) = v157;\n          if ( v157 != (int)v157 )\n            v158 = 1;\n          if ( v158 )\n            return 1LL;\n          v68 = (__int64)(v5 - 168);\n          v8 = v6 - 3;\n          LODWORD(v1) = -93;\n          v72 = 12;\n          v27 = v278;\n          v24 = (__int64)v279;\n          break;\n        case 0x1F:\n          LODWORD(v92) = *(_DWORD *)v5 + 3600;\nLABEL_121:\n          *((_DWORD *)v2 + 6) = v92;\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          LODWORD(v1) = -93;\n          v72 = 12;\n          break;\n        case 0x20:\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -93;\n          *((_DWORD *)v2 + 6) = *((_DWORD *)v5 - 14) + 3600;\n          v72 = 12;\n          break;\n        case 0x21:\n          v151 = *(_QWORD *)v5;\n          *((_QWORD *)v2 + 1) = 0LL;\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          LODWORD(v1) = -93;\n          *((_DWORD *)v2 + 4) = v151;\n          v72 = 13;\n          break;\n        case 0x22:\n          v150 = *((_QWORD *)v5 - 7);\n          *((_QWORD *)v2 + 1) = 0LL;\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -93;\n          *((_DWORD *)v2 + 4) = v150;\n          v72 = 13;\n          break;\n        case 0x23:\n          v148 = (unsigned __int8 *)*((_QWORD *)v5 - 7);\n          goto LABEL_192;\n        case 0x24:\n          v148 = (unsigned __int8 *)*((_QWORD *)v5 - 6);\nLABEL_192:\n          *((_QWORD *)v2 + 1) = v148;\n          v149 = *(_QWORD *)v5;\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          *((_BYTE *)v2 + 224) = 1;\n          LODWORD(v1) = -93;\n          *((_DWORD *)v2 + 4) = v149;\n          v72 = 13;\n          break;\n        case 0x25:\n          v8 = v6 - 3;\n          v68 = (__int64)(v5 - 168);\n          LODWORD(v1) = -93;\n          *((_QWORD *)v2 + 7) = *((_QWORD *)v5 - 13);\n          *((_QWORD *)v2 + 8) = *((_QWORD *)v5 + 1);\n          v72 = 14;\n          break;\n        case 0x26:\n          v189 = *((_QWORD *)v5 - 26);\n          v190 = *((_BYTE *)v2 + 217);\n          if ( v189 <= 3 )\n          {\n            v277 = *((_QWORD *)v5 - 27);\n            if ( v190 )\n            {\n              v280 = (__int64)v2;\n              v279 = (__int16 *)v24;\n              v278 = v27;\n              dcgettext(0LL, \"warning: value %ld has less than 4 digits. Assuming MM/DD/YY[YY]\\n\", 5);\n              sub_403400();\n              v2 = (__int16 *)v280;\n              v24 = (__int64)v279;\n              v27 = v278;\n            }\n            v223 = _mm_loadu_si128((const __m128i *)v5);\n            v8 = v6 - 5;\n            v68 = (__int64)(v5 - 280);\n            LODWORD(v1) = -93;\n            *((_QWORD *)v2 + 7) = v277;\n            v224 = (unsigned __int8 *)*((_QWORD *)v5 - 13);\n            *((__m128i *)v2 + 2) = v223;\n            *((_QWORD *)v2 + 8) = v224;\n            *((_QWORD *)v2 + 6) = *((_QWORD *)v5 + 2);\n            v72 = 14;\n          }\n          else\n          {\n            if ( v190 )\n            {\n              v231 = *((_QWORD *)v5 - 27);\n              v281 = (__int64)v2;\n              v280 = v24;\n              v279 = (__int16 *)v27;\n              v278 = v189;\n              v277 = v231;\n              dcgettext(0LL, \"warning: value %ld has %ld digits. Assuming YYYY/MM/DD\\n\", 5);\n              sub_403400();\n              v2 = (__int16 *)v281;\n              v24 = v280;\n              v27 = (__int64)v279;\n            }\n            v191 = _mm_loadu_si128((const __m128i *)v5 - 14);\n            v8 = v6 - 5;\n            v68 = (__int64)(v5 - 280);\n            LODWORD(v1) = -93;\n            *((_QWORD *)v2 + 6) = *((_QWORD *)v5 - 26);\n            v192 = (unsigned __int8 *)*((_QWORD *)v5 - 13);\n            *((__m128i *)v2 + 2) = v191;\n            *((_QWORD *)v2 + 7) = v192;\n            *((_QWORD *)v2 + 8) = *((_QWORD *)v5 + 1);\n            v72 = 14;\n          }\n          break;\n        case 0x27:\n          *((_QWORD *)v2 + 8) = *((_QWORD *)v5 - 13);\n          *((_QWORD *)v2 + 7) = *((_QWORD *)v5 - 7);\n          v188 = *((_QWORD *)v5 + 1);\n          *((_QWORD *)v2 + 5) = -*((_QWORD *)v5 + 1);\n          if ( v188 == 0x8000000000000000LL )\n            return 1LL;\n          goto LABEL_212;\n        case 0x28:\n          *((_QWORD *)v2 + 7) = *((_QWORD *)v5 - 14);\n          v186 = *((_QWORD *)v5 - 6);\n          *((_QWORD *)v2 + 8) = -*((_QWORD *)v5 - 6);\n          if ( v186 == 0x8000000000000000LL )\n            return 1LL;\n          v187 = *((_QWORD *)v5 + 1);\n          *((_QWORD *)v2 + 5) = -*((_QWORD *)v5 + 1);\n          if ( v187 == 0x8000000000000000LL )\n            return 1LL;\n          goto LABEL_212;\n        case 0x29:\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -93;\n          *((_QWORD *)v2 + 7) = *((_QWORD *)v5 - 7);\n          *((_QWORD *)v2 + 8) = *((_QWORD *)v5 + 1);\n          v72 = 14;\n          break;\n        case 0x2A:\n          v184 = _mm_loadu_si128((const __m128i *)v5);\n          v8 = v6 - 4;\n          v68 = (__int64)(v5 - 224);\n          LODWORD(v1) = -93;\n          *((_QWORD *)v2 + 7) = *((_QWORD *)v5 - 21);\n          v185 = (unsigned __int8 *)*((_QWORD *)v5 - 13);\n          *((__m128i *)v2 + 2) = v184;\n          *((_QWORD *)v2 + 8) = v185;\n          *((_QWORD *)v2 + 6) = *((_QWORD *)v5 + 2);\n          v72 = 14;\n          break;\n        case 0x2B:\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -93;\n          *((_QWORD *)v2 + 8) = *((_QWORD *)v5 - 6);\n          *((_QWORD *)v2 + 7) = *(_QWORD *)v5;\n          v72 = 14;\n          break;\n        case 0x2C:\n          v182 = _mm_loadu_si128((const __m128i *)v5);\n          *((_QWORD *)v2 + 8) = *((_QWORD *)v5 - 13);\n          v183 = (unsigned __int8 *)*((_QWORD *)v5 - 7);\n          *((__m128i *)v2 + 2) = v182;\n          *((_QWORD *)v2 + 7) = v183;\nLABEL_212:\n          v8 = v6 - 3;\n          v68 = (__int64)(v5 - 168);\n          LODWORD(v1) = -93;\n          *((_QWORD *)v2 + 6) = *((_QWORD *)v5 + 2);\n          v72 = 14;\n          break;\n        case 0x2E:\n          v179 = _mm_loadu_si128((const __m128i *)v5 - 7);\n          *((_QWORD *)v2 + 6) = *((_QWORD *)v5 - 12);\n          v180 = *((_QWORD *)v5 - 6);\n          *((__m128i *)v2 + 2) = v179;\n          *((_QWORD *)v2 + 7) = -v180;\n          if ( v180 == 0x8000000000000000LL )\n            return 1LL;\n          v181 = *((_QWORD *)v5 + 1);\n          *((_QWORD *)v2 + 8) = -*((_QWORD *)v5 + 1);\n          if ( v181 == 0x8000000000000000LL )\n            return 1LL;\n          v68 = (__int64)(v5 - 168);\n          v8 = v6 - 3;\n          LODWORD(v1) = -93;\n          v72 = 15;\n          break;\n        case 0x2F:\n          v159 = *((_QWORD *)v5 - 7);\n          v160 = *((_QWORD *)v5 - 6);\n          v161 = *((_QWORD *)v5 - 5);\n          v162 = *((_QWORD *)v5 - 4);\n          v163 = *((_DWORD *)v5 - 2);\n          v281 = *((_QWORD *)v2 + 18);\n          v164 = *((_QWORD *)v2 + 16);\n          v277 = v159;\n          v278 = v160;\n          v165 = (unsigned __int8 *)*((_QWORD *)v2 + 17);\n          v282 = (char *)v164;\n          v166 = *((_QWORD *)v2 + 15);\n          v279 = (__int16 *)v161;\n          v167 = *((_QWORD *)v5 - 2);\n          v283 = v166;\n          v168 = *((_QWORD *)v2 + 14);\n          v280 = v162;\n          v169 = *((_QWORD *)v5 - 3);\n          v284 = v168;\n          v170 = *((_DWORD *)v2 + 38);\n          v285 = (unsigned __int8 *)*((_QWORD *)v2 + 13);\n          v171 = v281;\n          if ( *(_DWORD *)v5 < 0 )\n          {\n            *((_DWORD *)v2 + 38) = v170 - v163;\n            v225 = __OFSUB__(v170, v163);\n            v226 = __OFSUB__(v171, v167);\n            *((_QWORD *)v2 + 18) = v171 - v167;\n            v227 = __OFSUB__(v165, v169);\n            *((_QWORD *)v2 + 17) = &v165[-v169];\n            v228 = __OFSUB__(v282, v280);\n            *((_QWORD *)v2 + 16) = &v282[-v280];\n            v229 = __OFSUB__(v283, v279);\n            *((_QWORD *)v2 + 15) = v283 - (_QWORD)v279;\n            v279 = (__int16 *)v229;\n            v230 = __OFSUB__(v284, v278);\n            *((_QWORD *)v2 + 14) = v284 - v278;\n            v278 = v230;\n            v177 = __OFSUB__(v285, v277);\n            *((_QWORD *)v2 + 13) = &v285[-v277];\n            v178 = v278 | (unsigned __int8)v279 | (v228 || v227 || v225 || v226);\n          }\n          else\n          {\n            *((_DWORD *)v2 + 38) = v163 + v170;\n            v172 = __OFADD__(v163, v170);\n            v173 = __OFADD__(v167, v171);\n            *((_QWORD *)v2 + 18) = v167 + v171;\n            *((_QWORD *)v2 + 17) = &v165[v169];\n            v281 = __OFADD__(v169, v165);\n            v174 = __OFADD__(v280, v282);\n            *((_QWORD *)v2 + 16) = &v282[v280];\n            v175 = __OFADD__(v279, v283);\n            *((_QWORD *)v2 + 15) = (char *)v279 + v283;\n            v176 = __OFADD__(v278, v284);\n            *((_QWORD *)v2 + 14) = v278 + v284;\n            v278 = v176;\n            v177 = __OFADD__(v277, v285);\n            *((_QWORD *)v2 + 13) = &v285[v277];\n            v178 = v278 | v175 | v174 | v281 | (v172 || v173);\n          }\n          if ( v177 | v178 )\n            return 1LL;\n          *((_BYTE *)v2 + 161) = 1;\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -93;\n          v72 = 16;\n          break;\n        case 0x30:\n        case 0x31:\n          v78 = *((_DWORD *)v5 + 12);\n          v79 = __OFADD__(*((_DWORD *)v2 + 38), v78);\n          *((_DWORD *)v2 + 38) += v78;\n          v80 = (unsigned __int8 *)*((_QWORD *)v2 + 18);\n          v81 = &v80[*((_QWORD *)v5 + 5)];\n          LOBYTE(v80) = __OFADD__(*((_QWORD *)v5 + 5), v80);\n          *((_QWORD *)v2 + 18) = v81;\n          v82 = (unsigned __int8 *)*((_QWORD *)v2 + 17);\n          v83 = __OFADD__(*((_QWORD *)v5 + 4), v82);\n          *((_QWORD *)v2 + 17) = &v82[*((_QWORD *)v5 + 4)];\n          v84 = (unsigned __int8 *)*((_QWORD *)v2 + 16);\n          v85 = __OFADD__(*((_QWORD *)v5 + 3), v84);\n          *((_QWORD *)v2 + 16) = &v84[*((_QWORD *)v5 + 3)];\n          v86 = (unsigned __int8 *)*((_QWORD *)v2 + 15);\n          v177 = __OFADD__(*((_QWORD *)v5 + 2), v86);\n          *((_QWORD *)v2 + 15) = &v86[*((_QWORD *)v5 + 2)];\n          v87 = (unsigned __int8 *)*((_QWORD *)v2 + 14);\n          v277 = v177;\n          v177 = __OFADD__(*((_QWORD *)v5 + 1), v87);\n          *((_QWORD *)v2 + 14) = &v87[*((_QWORD *)v5 + 1)];\n          v278 = v177;\n          v88 = (unsigned __int8 *)*((_QWORD *)v2 + 13);\n          v89 = __OFADD__(*(_QWORD *)v5, v88);\n          *((_QWORD *)v2 + 13) = &v88[*(_QWORD *)v5];\n          if ( (unsigned __int8)(v277 | v85 | v83 | v79 | (unsigned __int8)v80) | (unsigned __int8)v278 || v89 )\n            return 1LL;\n          *((_BYTE *)v2 + 161) = 1;\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          LODWORD(v1) = -93;\n          v72 = 16;\n          break;\n        case 0x32:\n          HIDWORD(v298) = 0;\n          v23 = *((_QWORD *)v5 - 7);\n          goto LABEL_163;\n        case 0x33:\n          HIDWORD(v298) = 0;\n          v23 = *((_QWORD *)v5 - 6);\nLABEL_163:\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -93;\n          v72 = 17;\n          goto LABEL_159;\n        case 0x34:\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          v72 = 17;\n          v27 = 0LL;\n          LODWORD(v1) = -93;\n          v26 = 0LL;\n          HIDWORD(v298) = 0;\n          v24 = 0LL;\n          v270 = 0;\n          v23 = 1LL;\n          v259 = 0LL;\n          v265 = 0LL;\n          break;\n        case 0x35:\n          v24 = *((_QWORD *)v5 - 7);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = -93;\n          v72 = 17;\n          goto LABEL_145;\n        case 0x36:\n          v24 = *((_QWORD *)v5 - 6);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = -93;\n          v72 = 17;\n          goto LABEL_145;\n        case 0x37:\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          v72 = 17;\n          v27 = 0LL;\n          LODWORD(v1) = -93;\n          v26 = 0LL;\n          v23 = 0LL;\n          HIDWORD(v298) = 0;\n          v270 = 0;\n          v24 = 1LL;\n          v259 = 0LL;\n          v265 = 0LL;\n          break;\n        case 0x38:\n          v104 = *(_QWORD *)v5 * *((_QWORD *)v5 - 7);\n          v177 = (unsigned __int128)(*(__int64 *)v5 * (__int128)*((__int64 *)v5 - 7)) >> 64 != 0;\n          v298 = 0LL;\n          v295 = 0LL;\n          v296 = 0LL;\n          v297 = 0LL;\n          v26 = v104;\n          if ( v177 )\n            return 1LL;\n          goto LABEL_140;\n        case 0x39:\n          v103 = *(_QWORD *)v5 * *((_QWORD *)v5 - 6);\n          v177 = (unsigned __int128)(*(__int64 *)v5 * (__int128)*((__int64 *)v5 - 6)) >> 64 != 0;\n          v298 = 0LL;\n          v295 = 0LL;\n          v296 = 0LL;\n          v297 = 0LL;\n          v26 = v103;\n          if ( v177 )\n            return 1LL;\nLABEL_140:\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -93;\n          v72 = 17;\n          goto LABEL_138;\n        case 0x3A:\n          v26 = *(_QWORD *)v5;\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          v72 = 17;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = -93;\n          goto LABEL_138;\n        case 0x3B:\n          v27 = *((_QWORD *)v5 - 7);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = -93;\n          v72 = 17;\n          goto LABEL_135;\n        case 0x3C:\n          v27 = *((_QWORD *)v5 - 6);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = -93;\n          v72 = 17;\n          goto LABEL_135;\n        case 0x3D:\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          v72 = 17;\n          v26 = 0LL;\n          LODWORD(v1) = -93;\n          v24 = 0LL;\n          v23 = 0LL;\n          HIDWORD(v298) = 0;\n          v270 = 0;\n          v27 = 1LL;\n          v259 = 0LL;\n          v265 = 0LL;\n          break;\n        case 0x3E:\n          HIDWORD(v298) = 0;\n          v102 = *((_QWORD *)v5 - 7);\n          goto LABEL_130;\n        case 0x3F:\n          HIDWORD(v298) = 0;\n          v102 = *((_QWORD *)v5 - 6);\nLABEL_130:\n          v265 = v102;\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -93;\n          v72 = 17;\n          goto LABEL_131;\n        case 0x40:\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          v72 = 17;\n          v27 = 0LL;\n          LODWORD(v1) = -93;\n          v26 = 0LL;\n          v24 = 0LL;\n          v23 = 0LL;\n          HIDWORD(v298) = 0;\n          v270 = 0;\n          v259 = 0LL;\n          v265 = 1LL;\n          break;\n        case 0x41:\n          HIDWORD(v298) = 0;\n          v91 = *((_QWORD *)v5 - 7);\n          goto LABEL_117;\n        case 0x42:\n          HIDWORD(v298) = 0;\n          v91 = *((_QWORD *)v5 - 6);\nLABEL_117:\n          v259 = v91;\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -93;\n          v72 = 17;\n          goto LABEL_118;\n        case 0x43:\n        case 0x44:\n          v90 = *((_QWORD *)v5 - 7);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = -93;\n          v259 = v90;\n          v270 = *((_DWORD *)v5 - 12);\n          v72 = 17;\n          goto LABEL_108;\n        case 0x45:\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = -93;\n          v72 = 17;\n          v270 = 0;\n          v259 = 1LL;\n          goto LABEL_108;\n        case 0x47:\n          v23 = *((_QWORD *)v5 - 6);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = 60;\n          v72 = 18;\nLABEL_159:\n          v270 = 0;\n          v27 = 0LL;\n          v26 = 0LL;\n          v24 = 0LL;\n          v259 = 0LL;\n          v265 = 0LL;\n          break;\n        case 0x48:\n          v24 = *((_QWORD *)v5 - 6);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = 60;\n          v72 = 18;\nLABEL_145:\n          v270 = 0;\n          v27 = 0LL;\n          v26 = 0LL;\n          v23 = 0LL;\n          v259 = 0LL;\n          v265 = 0LL;\n          break;\n        case 0x49:\n          v110 = *(_QWORD *)v5 * *((_QWORD *)v5 - 6);\n          v177 = (unsigned __int128)(*(__int64 *)v5 * (__int128)*((__int64 *)v5 - 6)) >> 64 != 0;\n          v298 = 0LL;\n          v295 = 0LL;\n          v296 = 0LL;\n          v297 = 0LL;\n          v26 = v110;\n          if ( v177 )\n            return 1LL;\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = 60;\n          v72 = 18;\n          goto LABEL_138;\n        case 0x4A:\n          v27 = *((_QWORD *)v5 - 6);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = 60;\n          v72 = 18;\nLABEL_135:\n          v270 = 0;\n          v26 = 0LL;\n          v24 = 0LL;\n          v23 = 0LL;\n          v259 = 0LL;\n          v265 = 0LL;\n          break;\n        case 0x4B:\n          v112 = *((_QWORD *)v5 - 6);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = 60;\n          v265 = v112;\n          v72 = 18;\nLABEL_131:\n          v27 = 0LL;\n          v26 = 0LL;\n          v24 = 0LL;\n          v23 = 0LL;\n          v270 = 0;\n          v259 = 0LL;\n          break;\n        case 0x4C:\n          v111 = *((_QWORD *)v5 - 6);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = 60;\n          v259 = v111;\n          v72 = 18;\nLABEL_118:\n          v270 = 0;\nLABEL_108:\n          v27 = 0LL;\n          v26 = 0LL;\n          v24 = 0LL;\n          v23 = 0LL;\n          v265 = 0LL;\n          break;\n        case 0x4D:\n          v26 = *(_QWORD *)v5;\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          v72 = 19;\n          HIDWORD(v298) = 0;\n          LODWORD(v1) = -93;\nLABEL_138:\n          v270 = 0;\n          v27 = 0LL;\n          v24 = 0LL;\n          v23 = 0LL;\n          v259 = 0LL;\n          v265 = 0LL;\n          break;\n        case 0x51:\n          v23 = *((_QWORD *)v5 + 1);\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          v24 = 0LL;\n          LODWORD(v1) = -93;\n          v72 = 21;\n          break;\n        case 0x53:\n          v23 = *((_QWORD *)v5 + 1);\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          v24 = 0LL;\n          LODWORD(v1) = -92;\n          v72 = 22;\n          break;\n        case 0x54:\n          v279 = (__int16 *)v24;\n          v278 = v27;\n          v258 = *((_QWORD *)v5 + 2);\n          v256 = *((_QWORD *)v5 + 1);\n          v254 = *(_QWORD *)v5;\n          v277 = (__int64)v2;\n          sub_403110((__m128i *)v2, v18, v29, v13, v1, (__int64)v2, v254, v256, v258);\n          v68 = (__int64)(v5 - 56);\n          v8 = v6 - 1;\n          LODWORD(v1) = -93;\n          v72 = 23;\n          v2 = (__int16 *)v277;\n          v27 = v278;\n          v24 = (__int64)v279;\n          break;\n        case 0x55:\n          v279 = (__int16 *)v24;\n          v278 = v27;\n          v257 = *((_QWORD *)v5 - 5);\n          v255 = *((_QWORD *)v5 - 6);\n          v253 = *((_QWORD *)v5 - 7);\n          v277 = (__int64)v2;\n          sub_403110((__m128i *)v2, v18, v29, v13, v1, (__int64)v2, v253, v255, v257);\n          v193 = *((_DWORD *)v5 + 12);\n          v2 = (__int16 *)v277;\n          v194 = __OFADD__(*(_DWORD *)(v277 + 152), v193);\n          *(_DWORD *)(v277 + 152) += v193;\n          v195 = (unsigned __int8 *)*((_QWORD *)v2 + 18);\n          v196 = &v195[*((_QWORD *)v5 + 5)];\n          LOBYTE(v195) = __OFADD__(*((_QWORD *)v5 + 5), v195);\n          *((_QWORD *)v2 + 18) = v196;\n          v197 = (unsigned __int8 *)*((_QWORD *)v2 + 17);\n          v198 = __OFADD__(*((_QWORD *)v5 + 4), v197);\n          *((_QWORD *)v2 + 17) = &v197[*((_QWORD *)v5 + 4)];\n          v199 = (unsigned __int8 *)*((_QWORD *)v2 + 16);\n          v200 = __OFADD__(*((_QWORD *)v5 + 3), v199);\n          *((_QWORD *)v2 + 16) = &v199[*((_QWORD *)v5 + 3)];\n          v201 = (unsigned __int8 *)*((_QWORD *)v2 + 15);\n          v202 = __OFADD__(*((_QWORD *)v5 + 2), v201);\n          *((_QWORD *)v2 + 15) = &v201[*((_QWORD *)v5 + 2)];\n          v203 = (unsigned __int8 *)*((_QWORD *)v2 + 14);\n          v204 = __OFADD__(*((_QWORD *)v5 + 1), v203);\n          *((_QWORD *)v2 + 14) = &v203[*((_QWORD *)v5 + 1)];\n          v205 = (unsigned __int8 *)*((_QWORD *)v2 + 13);\n          v206 = __OFADD__(*(_QWORD *)v5, v205);\n          *((_QWORD *)v2 + 13) = &v205[*(_QWORD *)v5];\n          if ( (unsigned __int8)(v202 | v200 | v198 | v194 | (unsigned __int8)v195) | v204 || v206 )\n            return 1LL;\n          *((_BYTE *)v2 + 161) = 1;\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = -93;\n          v72 = 24;\n          v27 = v278;\n          v24 = (__int64)v279;\n          break;\n        case 0x56:\n          LODWORD(v1) = 43;\n          v23 = -1LL;\n          v8 = &v6[-v18];\n          v72 = 25;\n          v68 = (__int64)&v5[-56 * v18];\n          break;\n        case 0x57:\n          v23 = *((_QWORD *)v5 + 1);\n          v68 = (__int64)(v5 - 112);\n          v8 = v6 - 2;\n          LODWORD(v1) = 43;\n          v72 = 25;\n          break;\n        default:\n          v72 = (unsigned __int8)byte_413580[v13] - 28;\n          LODWORD(v1) = byte_413700[v72];\n          v8 = &v6[-v18];\n          v68 = (__int64)&v5[-56 * v18];\n          break;\n      }\nLABEL_100:\n      v295.m128i_i64[0] = v23;\n      v5 = (char *)(v68 + 56);\n      v295.m128i_i64[1] = v24;\n      v73 = _mm_load_si128(&v295);\n      v297.m128i_i64[0] = v265;\n      v296.m128i_i64[0] = v26;\n      v296.m128i_i64[1] = v27;\n      v74 = _mm_load_si128(&v296);\n      v297.m128i_i64[1] = v259;\n      v75 = _mm_load_si128(&v297);\n      LODWORD(v298) = v270;\n      v76 = v298;\n      *(__m128i *)(v68 + 56) = v73;\n      *(_QWORD *)(v68 + 104) = v76;\n      *(__m128i *)(v68 + 72) = v74;\n      *(__m128i *)(v68 + 88) = v75;\n      v77 = *v8 + (_DWORD)v1;\n      if ( v77 <= 0x70 && *v8 == byte_4135E0[v77] )\n        v1 = (unsigned __int8)byte_413660[v77];\n      else\n        v1 = byte_4136E0[v72];\n      goto LABEL_10;\n    }\n    if ( v274 == 3 )\n    {\n      if ( v4 > 0 )\n      {\n        v4 = -2;\n        goto LABEL_22;\n      }\n      if ( !v4 )\n        return 1LL;\n    }\nLABEL_22:\n    while ( 1 )\n    {\n      v16 = byte_4137A0[v1];\n      if ( v16 != -93 )\n      {\n        v17 = v16 + 1;\n        if ( v17 <= 0x70 && byte_4135E0[v17] == 1 )\n        {\n          v1 = (unsigned __int8)byte_413660[v17];\n          if ( byte_413660[v17] )\n            break;\n        }\n      }\n      if ( v6 == &v289 )\n        return 1LL;\n      --v6;\n      v1 = *v6;\n      v5 -= 56;\n    }\n    v5 += 56;\n    v8 = v6;\n    v274 = 3;\n    *((_QWORD *)&v291 + 1) = v275;\n    v64 = _mm_load_si128((const __m128i *)&v291);\n    *(_QWORD *)&v292 = v276;\n    v65 = v294;\n    *(__m128i *)v5 = v64;\n    v66 = _mm_load_si128((const __m128i *)&v292);\n    *((_QWORD *)v5 + 6) = v65;\n    *((__m128i *)v5 + 1) = v66;\n    *((__m128i *)v5 + 2) = _mm_load_si128((const __m128i *)&v293);\nLABEL_10:\n    v6 = v8 + 1;\n    v8[1] = v1;\n    if ( v8 + 1 >= &v290 )\n      return 2LL;\n    if ( (_DWORD)v1 == 12 )\n      return 0LL;\n    v3 = byte_4137A0[(int)v1];\n    if ( v3 != -93 )\n      goto LABEL_2;\n  }\n}\n", 
            "funcStartAddr": "0x403db0L", 
            "funcEndAddr": "0x406022L", 
            "funcName": "sub_403DB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406030(time_t *a1, const char *a2, struct timespec *a3, char a4, __int64 a5, char *a6)\n{\n  __int64 v6; // r14\n  struct timespec *v7; // r13\n  const char *v8; // rbp\n  __time_t v9; // rbx\n  char *v10; // r12\n  unsigned __int64 v11; // rax\n  __int64 v12; // rdx\n  char v13; // r15\n  __int64 v14; // rsi\n  __int64 v15; // rdx\n  char v16; // al\n  signed __int64 v17; // rdi\n  __int64 v18; // rax\n  char v19; // dl\n  __int64 v20; // r15\n  bool v21; // zf\n  int v22; // er12\n  unsigned int v23; // ebx\n  unsigned __int64 v24; // r12\n  char v25; // bp\n  __int64 v26; // rax\n  unsigned __int8 v27; // bp\n  _BOOL4 v28; // edx\n  unsigned int v29; // esi\n  unsigned __int8 v30; // cl\n  unsigned int v31; // edx\n  __int64 v32; // rax\n  unsigned int v33; // er9\n  unsigned int v34; // er8\n  unsigned int v35; // edi\n  int v36; // eax\n  __int64 v37; // rbx\n  int v38; // er13\n  int v39; // er12\n  char *v40; // r9\n  __int64 v41; // rax\n  __int64 v42; // rdx\n  char *i; // rdx\n  char *v45; // rax\n  unsigned __int64 v46; // rax\n  __int64 v47; // rdx\n  const char *v48; // rsi\n  char *v49; // rax\n  char *v50; // rcx\n  char *v51; // rax\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  __int64 v54; // rax\n  FILE *v55; // rsi\n  const char *v56; // rsi\n  __int64 v57; // rcx\n  __int64 v58; // rbp\n  __int64 v59; // rbp\n  const char *v60; // rsi\n  __int64 v61; // rax\n  __int64 v62; // r12\n  bool v63; // r13\n  unsigned __int64 v64; // rax\n  __int64 v65; // rsi\n  int v66; // ecx\n  __int64 v67; // rax\n  bool v68; // of\n  __int64 v69; // rax\n  int v70; // edx\n  __int64 v71; // rdi\n  __int64 v72; // rdx\n  unsigned __int8 v73; // al\n  __int64 v74; // rdx\n  __int64 v75; // r11\n  __int64 v76; // rsi\n  unsigned __int64 v77; // rcx\n  int v78; // eax\n  __int64 v79; // rbx\n  __int64 v80; // r12\n  __int64 v81; // rdx\n  __int64 v82; // rbx\n  __int64 v83; // r13\n  __int64 v84; // rbx\n  time_t v85; // rbx\n  __int64 v86; // r9\n  __int64 v87; // rcx\n  __int64 v88; // r13\n  __int64 v89; // r12\n  __int64 v90; // rdx\n  __int64 v91; // rax\n  _BOOL4 v92; // edx\n  __int64 v93; // r9\n  __int64 v94; // rax\n  char *ptr; // [rsp+8h] [rbp-430h]\n  char *src; // [rsp+10h] [rbp-428h]\n  int srca; // [rsp+10h] [rbp-428h]\n  char v98; // [rsp+18h] [rbp-420h]\n  _BOOL4 v99; // [rsp+18h] [rbp-420h]\n  __int64 v100; // [rsp+18h] [rbp-420h]\n  int v101; // [rsp+18h] [rbp-420h]\n  __syscall_slong_t v102; // [rsp+20h] [rbp-418h]\n  int v103; // [rsp+20h] [rbp-418h]\n  time_t *timer; // [rsp+28h] [rbp-410h]\n  size_t v105; // [rsp+30h] [rbp-408h]\n  int v106; // [rsp+38h] [rbp-400h]\n  int v107; // [rsp+44h] [rbp-3F4h]\n  __int64 v108; // [rsp+48h] [rbp-3F0h]\n  struct timespec v109; // [rsp+60h] [rbp-3D8h]\n  char v110; // [rsp+70h] [rbp-3C8h]\n  unsigned __int64 v111; // [rsp+90h] [rbp-3A8h]\n  unsigned __int64 v112; // [rsp+98h] [rbp-3A0h]\n  unsigned __int64 v113; // [rsp+A0h] [rbp-398h]\n  int v114; // [rsp+A8h] [rbp-390h]\n  int v115; // [rsp+B0h] [rbp-388h]\n  __int64 v116; // [rsp+B8h] [rbp-380h]\n  unsigned __int64 v117; // [rsp+D0h] [rbp-368h]\n  unsigned __int64 v118; // [rsp+D8h] [rbp-360h]\n  unsigned __int64 v119; // [rsp+E0h] [rbp-358h]\n  int v120; // [rsp+F0h] [rbp-348h]\n  int v121; // [rsp+110h] [rbp-328h]\n  int v122; // [rsp+114h] [rbp-324h]\n  int v123; // [rsp+118h] [rbp-320h]\n  int v124; // [rsp+11Ch] [rbp-31Ch]\n  int v125; // [rsp+120h] [rbp-318h]\n  int v126; // [rsp+124h] [rbp-314h]\n  int v127; // [rsp+130h] [rbp-308h]\n  char *v128; // [rsp+140h] [rbp-2F8h]\n  struct tm tp; // [rsp+150h] [rbp-2E8h]\n  __time_t v130; // [rsp+190h] [rbp-2A8h]\n  char v131; // [rsp+200h] [rbp-238h]\n  __int16 v132; // [rsp+270h] [rbp-1C8h]\n  char v133; // [rsp+272h] [rbp-1C6h]\n  char v134; // [rsp+273h] [rbp-1C5h]\n  int v135; // [rsp+290h] [rbp-1A8h]\n  int v136; // [rsp+298h] [rbp-1A0h]\n  char *v137; // [rsp+2A0h] [rbp-198h]\n  unsigned __int64 v138; // [rsp+2E0h] [rbp-158h]\n  __int64 v139; // [rsp+2E8h] [rbp-150h]\n  int v140; // [rsp+2F0h] [rbp-148h]\n  int v141; // [rsp+2F4h] [rbp-144h]\n  int v142; // [rsp+2F8h] [rbp-140h]\n  unsigned int v143; // [rsp+2FCh] [rbp-13Ch]\n  __int64 v144; // [rsp+308h] [rbp-130h]\n  __int64 v145; // [rsp+310h] [rbp-128h]\n  __int64 v146; // [rsp+318h] [rbp-120h]\n  __int64 v147; // [rsp+320h] [rbp-118h]\n  unsigned __int64 v148; // [rsp+328h] [rbp-110h]\n  __int64 v149; // [rsp+330h] [rbp-108h]\n  __int128 v150; // [rsp+338h] [rbp-100h]\n  __int128 v151; // [rsp+348h] [rbp-F0h]\n  __int128 v152; // [rsp+358h] [rbp-E0h]\n  __int128 v153; // [rsp+368h] [rbp-D0h]\n  __int64 v154; // [rsp+378h] [rbp-C0h]\n  __int16 v155; // [rsp+380h] [rbp-B8h]\n  __int64 v156; // [rsp+388h] [rbp-B0h]\n  __int64 v157; // [rsp+390h] [rbp-A8h]\n  __int64 v158; // [rsp+398h] [rbp-A0h]\n  __int64 v159; // [rsp+3A0h] [rbp-98h]\n  __int64 v160; // [rsp+3A8h] [rbp-90h]\n  __int64 v161; // [rsp+3B0h] [rbp-88h]\n  char v162; // [rsp+3B8h] [rbp-80h]\n  unsigned __int8 v163; // [rsp+3B9h] [rbp-7Fh]\n  __int16 v164; // [rsp+3BAh] [rbp-7Eh]\n  int v165; // [rsp+3BCh] [rbp-7Ch]\n  char v166; // [rsp+3C0h] [rbp-78h]\n  char *s1; // [rsp+3C8h] [rbp-70h]\n  int v168; // [rsp+3D0h] [rbp-68h]\n  int v169; // [rsp+3D4h] [rbp-64h]\n  char *s2; // [rsp+3D8h] [rbp-60h]\n  int v171; // [rsp+3E0h] [rbp-58h]\n  int v172; // [rsp+3E4h] [rbp-54h]\n  __int64 v173; // [rsp+3E8h] [rbp-50h]\n\n  v6 = a5;\n  v7 = a3;\n  v8 = a2;\n  timer = a1;\n  v98 = a4;\n  src = a6;\n  v105 = strlen(a2);\n  if ( !v7 )\n  {\n    v7 = &v109;\n    sub_4030D0(&v109);\n  }\n  v9 = v7->tv_sec;\n  v10 = (char *)a2;\n  v102 = v7->tv_nsec;\n  v11 = *(unsigned __int8 *)a2;\n  if ( (unsigned __int8)v11 <= 0x20u )\n  {\n    v12 = 4294983168LL;\n    if ( _bittest64(&v12, v11) )\n    {\n      do\n        ++v10;\n      while ( (unsigned __int8)*v10 <= 0x20u && (1LL << *v10) & 0x100003E00LL );\n    }\n  }\n  if ( memcmp(v10, \"TZ=\\\"\", 4uLL) || (v13 = v10[4], v14 = (__int64)(v10 + 4), !v13) )\n  {\nLABEL_14:\n    if ( !sub_40C180(v6, v7, &v121) )\n      goto LABEL_106;\n    ptr = 0LL;\n    v20 = v6;\n    goto LABEL_16;\n  }\n  v15 = (__int64)(v10 + 4);\n  v16 = v10[4];\n  v17 = 1LL;\n  while ( v16 == 92 )\n  {\n    v18 = v15 + 1;\n    v19 = *(_BYTE *)(v15 + 1);\n    if ( v19 != 92 && v19 != 34 )\n      goto LABEL_14;\nLABEL_10:\n    v15 = v18 + 1;\n    v16 = *(_BYTE *)(v18 + 1);\n    ++v17;\n    if ( !v16 )\n      goto LABEL_14;\n  }\n  if ( v16 != 34 )\n  {\n    v18 = v15;\n    goto LABEL_10;\n  }\n  if ( v17 <= 100 )\n  {\n    ptr = 0LL;\n    src = &v131;\n    goto LABEL_89;\n  }\n  v14 = (__int64)(v10 + 4);\n  src = (char *)malloc(v17);\n  ptr = src;\n  if ( !src )\n  {\nLABEL_106:\n    v23 = 0;\n    free(0LL);\n    return v23;\n  }\nLABEL_89:\n  for ( i = src; v13 != 34; *(i - 1) = *v45 )\n  {\n    ++i;\n    v45 = (char *)(v14 + (v13 == 92));\n    v13 = v45[1];\n    v14 = (__int64)(v45 + 1);\n  }\n  *i = 0;\n  v20 = sub_40BEA0(src);\n  if ( !v20 )\n  {\n    v23 = 0;\n    goto LABEL_78;\n  }\n  v46 = *(unsigned __int8 *)(v14 + 1);\n  v10 = (char *)(v14 + 1);\n  if ( (unsigned __int8)v46 <= 0x20u )\n  {\n    v47 = 4294983168LL;\n    if ( _bittest64(&v47, v46) )\n    {\n      do\n        ++v10;\n      while ( (unsigned __int8)*v10 <= 0x20u && (1LL << *v10) & 0x100003E00LL );\n    }\n  }\n  if ( !sub_40C180(v20, v7, &v121) )\n  {\n    v23 = 0;\n    goto LABEL_76;\n  }\nLABEL_16:\n  v21 = *v10 == 0;\n  v145 = 0LL;\n  if ( v21 )\n    v10 = \"0\";\n  v143 = 2;\n  v151 = 0LL;\n  v138 = (unsigned __int64)v10;\n  v163 = v98 & 1;\n  v144 = v126 + 1900LL;\n  *((_QWORD *)&v150 + 1) = (int)v102;\n  v22 = 7776000;\n  v152 = 0LL;\n  v153 = 0LL;\n  v146 = v125 + 1;\n  v154 = 0LL;\n  v147 = v124;\n  v155 = 0;\n  v148 = v123;\n  v156 = 0LL;\n  v149 = v122;\n  v157 = 0LL;\n  *(_QWORD *)&v150 = v121;\n  v160 = 0LL;\n  v115 = v127;\n  v158 = 0LL;\n  v159 = 0LL;\n  v161 = 0LL;\n  v162 = 0;\n  v164 = 0;\n  v165 = 0;\n  v166 = 0;\n  s1 = v128;\n  v168 = 269;\n  v169 = v127;\n  s2 = 0LL;\n  while ( !__OFADD__(v9, v22) )\n  {\n    v130 = v9 + v22;\n    if ( sub_40C180(v20, &v130, &v132) && v137 && v135 != v169 )\n    {\n      s2 = v137;\n      v171 = 269;\n      v172 = v135;\n      v173 = 0LL;\n      break;\n    }\n    v22 += 7776000;\n    if ( v22 == 31104000 )\n      break;\n  }\n  if ( s1 && s2 && !strcmp(s1, s2) )\n  {\n    v169 = -1;\n    s2 = 0LL;\n  }\n  if ( (unsigned int)sub_403DB0((__int16 *)&v138) )\n  {\n    v23 = v163;\n    if ( v163 )\n    {\n      if ( v138 < (unsigned __int64)&v8[v105] )\n        dcgettext(0LL, \"error: parsing failed, stopped at '%s'\\n\", 5);\n      else\n        dcgettext(0LL, \"error: parsing failed\\n\", 5);\n      v23 = 0;\n      sub_403400();\n    }\n    goto LABEL_76;\n  }\n  if ( v163 )\n  {\n    dcgettext(0LL, \"input timezone: \", 5);\n    sub_403400();\n    v48 = \"'@timespec' - always UTC\";\n    if ( !(_BYTE)v155 )\n    {\n      v48 = \"parsed date/time string\";\n      if ( !v161 )\n      {\n        if ( src )\n        {\n          if ( v6 != v20 )\n          {\n            v49 = dcgettext(0LL, \"TZ=\\\"%s\\\" in date string\", 5);\n            v50 = src;\nLABEL_104:\n            __fprintf_chk(stderr, 1LL, v49, v50);\n            goto LABEL_109;\n          }\n          v48 = \"TZ=\\\"UTC0\\\" environment value or -u\";\n          if ( strcmp(src, \"UTC0\") )\n          {\n            v49 = dcgettext(0LL, \"TZ=\\\"%s\\\" environment value\", 5);\n            v50 = src;\n            goto LABEL_104;\n          }\n        }\n        else\n        {\n          v48 = \"system default\";\n        }\n      }\n    }\n    v51 = dcgettext(0LL, v48, 5);\n    __fprintf_chk(stderr, 1LL, v51, v52);\nLABEL_109:\n    v53 = v161;\n    if ( v158 )\n    {\n      if ( v161 )\n      {\nLABEL_111:\n        v54 = sub_403290(v142, (__int64)&v110);\n        __fprintf_chk(stderr, 1LL, \" (%s)\", v54);\nLABEL_112:\n        v55 = stderr;\nLABEL_113:\n        fputc(10, v55);\n        v23 = v163;\n        if ( !(_BYTE)v155 )\n        {\n          v57 = v156;\n          if ( ((v158 + v161) | v159 | v157 | v156 | v160) <= 1 )\n            goto LABEL_32;\n          if ( v163 )\n          {\n            if ( v160 > 1 )\n            {\n              sub_403400();\n              v57 = v156;\n            }\n            if ( v57 > 1 )\n              sub_403400();\n            if ( v157 > 1 )\n              sub_403400();\n            if ( v159 > 1 )\n              sub_403400();\n            if ( v158 + v161 > 1 )\n            {\n              v23 = 0;\n              sub_403400();\n              goto LABEL_76;\n            }\n          }\n          goto LABEL_75;\n        }\n        *(__m128i *)timer = _mm_loadu_si128((const __m128i *)&v150);\nLABEL_115:\n        if ( !(_BYTE)v23 )\n        {\n          v23 = 1;\n          goto LABEL_76;\n        }\n        v56 = \"timezone: system default\\n\";\n        if ( src )\n        {\n          if ( strcmp(src, \"UTC0\") )\n          {\n            dcgettext(0LL, \"timezone: TZ=\\\"%s\\\" environment value\\n\", 5);\n            sub_403400();\n            goto LABEL_120;\n          }\n          v56 = \"timezone: Universal Time\\n\";\n        }\n        dcgettext(0LL, v56, 5);\n        sub_403400();\nLABEL_120:\n        dcgettext(0LL, \"final: %ld.%09d (epoch-seconds)\\n\", 5);\n        sub_403400();\n        if ( gmtime_r(timer, &tp) )\n        {\n          sub_403880((__int64)&tp, 0LL, (__int64)&v130);\n          dcgettext(0LL, \"final: %s (UTC)\\n\", 5);\n          sub_403400();\n        }\n        if ( sub_40C180(v20, timer, &v132) )\n        {\n          sub_403290(v136, (__int64)&v110);\n          sub_403880((__int64)&v132, 0LL, (__int64)&v130);\n          dcgettext(0LL, \"final: %s (UTC%s)\\n\", 5);\n          sub_403400();\n        }\n        goto LABEL_76;\n      }\n      v55 = stderr;\n      if ( v141 <= 0 )\n        goto LABEL_113;\n      fwrite(\", dst\", 1uLL, 5uLL, stderr);\n      v53 = v161;\n    }\n    if ( !v53 )\n      goto LABEL_112;\n    goto LABEL_111;\n  }\n  v23 = (unsigned __int8)v155;\n  if ( (_BYTE)v155 )\n  {\n    *(__m128i *)timer = _mm_loadu_si128((const __m128i *)&v150);\n    goto LABEL_76;\n  }\n  if ( ((v158 + v161) | v159 | v157 | v156 | v160) > 1 )\n    goto LABEL_75;\nLABEL_32:\n  v24 = v144;\n  if ( v144 < 0 )\n  {\n    v27 = __OFSUB__(-1900LL, v144);\n    HIDWORD(v113) = -1900 - v144;\n    if ( -1900 - v144 != -1900 - (_DWORD)v144 )\n      v27 = 1;\n  }\n  else\n  {\n    if ( v145 == 2 )\n    {\n      v58 = 2000LL;\n      if ( v144 >= 69 )\n        v58 = 1900LL;\n      v59 = v144 + v58;\n      if ( (_BYTE)v23 )\n      {\n        dcgettext(0LL, \"warning: adjusting year value %ld to %ld\\n\", 5);\n        v24 = v59;\n        sub_403400();\n      }\n      else\n      {\n        v24 = v59;\n      }\n    }\n    v25 = 0;\n    v26 = v24 - 1900;\n    if ( v24 >= 0x76C )\n    {\n      if ( v26 < 0 )\n        goto LABEL_143;\n    }\n    else\n    {\n      if ( v26 < 0 )\n        goto LABEL_36;\nLABEL_143:\n      v25 = 1;\n    }\nLABEL_36:\n    HIDWORD(v113) = v24 - 1900;\n    if ( v26 != (int)v26 )\n      v25 = 1;\n    v27 = v25 & 1;\n  }\n  if ( v27 )\n  {\n    if ( (_BYTE)v23 )\n    {\n      dcgettext(0LL, \"error: out-of-range year %ld\\n\", 5);\n      sub_403400();\n    }\n    v30 = v163;\nLABEL_153:\n    v60 = \"error: year, month, or day overflow\\n\";\n    if ( !v30 )\n      goto LABEL_75;\n    goto LABEL_154;\n  }\n  v28 = __OFADD__(-1LL, v146);\n  v29 = v146 - 1;\n  LODWORD(v113) = v146 - 1;\n  if ( v146 - 1 != (_DWORD)v146 - 1 )\n    v28 = 1;\n  v30 = v163;\n  if ( v28 )\n    goto LABEL_153;\n  HIDWORD(v112) = v147;\n  v31 = v147;\n  v99 = v147 != v147;\n  if ( v147 != (int)v147 )\n    goto LABEL_153;\n  v32 = v160;\n  if ( !v160 )\n  {\n    if ( !HIBYTE(v155) || v156 )\n    {\n      v111 = 0LL;\n      LODWORD(v112) = 0;\n      *((_QWORD *)&v150 + 1) = 0LL;\n      if ( v163 )\n        goto LABEL_239;\n      v33 = 0;\n      v34 = 0;\n      v35 = 0;\n      goto LABEL_196;\n    }\n    if ( v157 )\n    {\n      v111 = 0LL;\n      LODWORD(v112) = 0;\n      *((_QWORD *)&v150 + 1) = 0LL;\n      if ( !v163 )\n      {\n        v33 = 0;\n        v34 = 0;\n        v35 = 0;\n        goto LABEL_50;\n      }\nLABEL_239:\n      sub_403400();\nLABEL_240:\n      v32 = v160;\n      v35 = v111;\n      v34 = HIDWORD(v111);\n      v33 = v112;\n      v31 = HIDWORD(v112);\n      v29 = v113;\n      goto LABEL_196;\n    }\n  }\n  v86 = v143;\n  if ( v143 )\n  {\n    if ( v143 != 1 )\n    {\n      if ( v148 <= 0x17 )\n        goto LABEL_192;\n      LODWORD(v112) = -1;\nLABEL_257:\n      if ( v163 )\n      {\n        dcgettext(0LL, \"error: invalid hour %ld%s\\n\", 5);\n        v23 = 0;\n        sub_403400();\n        goto LABEL_76;\n      }\n      goto LABEL_75;\n    }\n    v86 = (unsigned int)(v148 + 12);\n    if ( v148 - 1 > 0xA )\n    {\n      if ( v148 != 12 )\n      {\n        LODWORD(v112) = -1;\n        goto LABEL_257;\n      }\n      LODWORD(v112) = 12;\n      v86 = 12LL;\n      goto LABEL_194;\n    }\n  }\n  else\n  {\n    if ( v148 - 1 > 0xA )\n    {\n      if ( v148 != 12 )\n      {\n        LODWORD(v112) = -1;\n        goto LABEL_257;\n      }\n      LODWORD(v112) = 0;\n      goto LABEL_194;\n    }\nLABEL_192:\n    v86 = (unsigned int)v148;\n  }\n  LODWORD(v112) = v86;\nLABEL_194:\n  v34 = v149;\n  v35 = v150;\n  v111 = __PAIR64__(v149, v150);\n  if ( v163 )\n  {\n    __snprintf_chk(&v130, 100LL, 1LL, 100LL, \"%02d:%02d:%02d\", v86);\n    if ( v160 )\n      dcgettext(0LL, \"using specified time as starting value: '%s'\\n\", 5);\n    else\n      dcgettext(0LL, \"using current time as starting value: '%s'\\n\", 5);\n    sub_403400();\n    goto LABEL_240;\n  }\n  v33 = v112;\nLABEL_196:\n  if ( v32 | v157 | v156 )\nLABEL_50:\n    v115 = -1;\n  if ( v158 )\n  {\n    v36 = v141;\n    v115 = v141;\n  }\n  else\n  {\n    v36 = v115;\n  }\n  v117 = __PAIR64__(v34, v35);\n  v119 = __PAIR64__(HIDWORD(v113), v29);\n  v118 = __PAIR64__(v31, v33);\n  v120 = v36;\n  v37 = sub_40C230(v20, &v111, 0.0);\n  if ( sub_4034C0(v20, &v117, &v111, v37) )\n    goto LABEL_291;\n  v108 = v161;\n  if ( v161 )\n  {\n    v133 = 88;\n    v132 = 22616;\n    sub_403290(v142, (__int64)&v134);\n    v61 = sub_40BEA0(&v132);\n    v62 = v61;\n    if ( !v61 )\n    {\n      if ( v163 )\n      {\n        v23 = 0;\n        dcgettext(0LL, \"error: tzalloc (\\\"%s\\\") failed\\n\", 5);\n        sub_403400();\n        goto LABEL_76;\n      }\n      goto LABEL_75;\n    }\n    v111 = v117;\n    v112 = v118;\n    v113 = v119;\n    v115 = v120;\n    v37 = sub_40C230(v61, &v111, 0.0);\n    v63 = sub_4034C0(v62, &v117, &v111, v37);\n    sub_40C160(v62);\n    if ( v63 )\n    {\nLABEL_291:\n      if ( !v157 )\n        goto LABEL_202;\n      if ( v156 )\n      {\n        if ( !v163 )\n          goto LABEL_174;\n      }\n      else\n      {\n        v64 = v139;\n        if ( v139 > 0 && v114 != v140 )\n          v64 = v139 - 1;\n        v65 = 7 * v64;\n        if ( !is_mul_ok(7uLL, v64) )\n          goto LABEL_292;\n        v66 = (v140 - v114 + 7) % 7;\n        v67 = v65 + v66;\n        if ( __OFADD__(v65, v66) )\n          goto LABEL_292;\n        v68 = __OFADD__(SHIDWORD(v112), v67);\n        v69 = SHIDWORD(v112) + v67;\n        HIDWORD(v112) = v69;\n        v70 = v68;\n        if ( v69 != (int)v69 )\n          v70 = 1;\n        if ( v70 || (v115 = -1, v37 = sub_40C230(v20, &v111, 0.0), v37 == -1) )\n        {\nLABEL_292:\n          if ( v163 )\n          {\n            sub_403880((__int64)&v111, (__int64)&v138, (__int64)&v130);\n            sub_403920((__int64)&v138, (char *)&v132);\n            dcgettext(0LL, \"error: day '%s' (day ordinal=%ld number=%d) resulted in an invalid date: '%s'\\n\", 5);\n            v23 = 0;\n            sub_403400();\n            goto LABEL_76;\n          }\n          goto LABEL_75;\n        }\n        if ( !v163 )\n        {\nLABEL_174:\n          v71 = *((_QWORD *)&v151 + 1);\n          v72 = v151;\n          if ( !((unsigned __int64)v152 | (unsigned __int64)v151 | *((_QWORD *)&v151 + 1)) )\n          {\n            v73 = 0;\n            goto LABEL_176;\n          }\nLABEL_236:\n          v91 = v72 + SHIDWORD(v113);\n          v92 = __OFADD__(v72, SHIDWORD(v113));\n          if ( v91 != (int)v91 || v92 )\n            goto LABEL_75;\n          v101 = v91;\nLABEL_214:\n          v88 = v71 + (int)v113;\n          if ( v88 == (int)v88 && !__OFADD__(v71, (int)v113) )\n          {\n            v89 = v152 + SHIDWORD(v112);\n            if ( v89 == (int)v89 && !__OFADD__((_QWORD)v152, SHIDWORD(v112)) )\n            {\n              v113 = __PAIR64__(v101, v88);\n              HIDWORD(v112) += v152;\n              v111 = v117;\n              LODWORD(v112) = v118;\n              v115 = v120;\n              v37 = sub_40C230(v20, &v111, 0.0);\n              if ( v37 == -1 )\n              {\n                if ( v163 )\n                {\n                  sub_403880((__int64)&v111, (__int64)&v138, (__int64)&v130);\n                  dcgettext(0LL, \"error: adding relative date resulted in an invalid date: '%s'\\n\", 5);\n                  v23 = 0;\n                  sub_403400();\n                  goto LABEL_76;\n                }\n                goto LABEL_75;\n              }\n              v73 = v163;\n              if ( v163 )\n              {\n                dcgettext(0LL, \"after date adjustment (%+ld years, %+ld months, %+ld days),\\n\", 5);\n                sub_403400();\n                sub_403880((__int64)&v111, (__int64)&v138, (__int64)&v130);\n                dcgettext(0LL, \"    new date/time = '%s'\\n\", 5);\n                sub_403400();\n                if ( v120 != -1 && v120 != v115 )\n                {\n                  dcgettext(0LL, \"warning: daylight saving time changed after date adjustment\\n\", 5);\n                  sub_403400();\n                }\n                if ( !(_QWORD)v152\n                  && ((_DWORD)v89 != HIDWORD(v112) || !*((_QWORD *)&v151 + 1) && (_DWORD)v88 != (_DWORD)v113) )\n                {\n                  dcgettext(0LL, \"warning: month/year adjustment resulted in shifted dates:\\n\", 5);\n                  sub_403400();\n                  sub_403390(v101, (__int64)&tp);\n                  dcgettext(0LL, \"     adjusted Y M D: %s %02d %02d\\n\", 5);\n                  sub_403400();\n                  sub_403390(SHIDWORD(v113), (__int64)&tp);\n                  dcgettext(0LL, \"   normalized Y M D: %s %02d %02d\\n\", 5);\n                  sub_403400();\n                }\n                v73 = v163;\n                goto LABEL_176;\n              }\n              if ( v161 )\n              {\n                v90 = v142 - v116;\n                v68 = __OFSUB__(v37, v90);\n                v37 -= v90;\n                if ( v68 | (unsigned __int64)__OFSUB__(v142, v116) )\n                {\n                  v23 = 0;\n                  goto LABEL_76;\n                }\n                goto LABEL_178;\n              }\n              goto LABEL_179;\n            }\n          }\nLABEL_224:\n          if ( v163 )\n          {\n            v23 = 0;\n            dcgettext(0LL, \"error: %s:%d\\n\", 5);\n            sub_403400();\n            goto LABEL_76;\n          }\n          goto LABEL_75;\n        }\n        sub_403880((__int64)&v111, (__int64)&v138, (__int64)&v130);\n        sub_403920((__int64)&v138, (char *)&v132);\n        dcgettext(0LL, \"new start date: '%s' is '%s'\\n\", 5);\n        sub_403400();\nLABEL_202:\n        if ( !v163 )\n          goto LABEL_174;\n        if ( v156 )\n        {\n          if ( !v157 )\n            goto LABEL_205;\n        }\n        else if ( v157\n               || (v94 = sub_403390(SHIDWORD(v113), (__int64)&tp),\n                   __snprintf_chk(&v130, 100LL, 1LL, 100LL, \"(Y-M-D) %s-%02d-%02d\", v94),\n                   dcgettext(0LL, \"using current date as starting value: '%s'\\n\", 5),\n                   sub_403400(),\n                   !v157)\n               || !v156 )\n        {\nLABEL_205:\n          sub_403880((__int64)&v111, (__int64)&v138, (__int64)&v130);\n          dcgettext(0LL, \"starting date/time: '%s'\\n\", 5);\n          sub_403400();\n          v71 = *((_QWORD *)&v151 + 1);\n          v72 = v151;\n          v87 = v152;\n          v73 = v163;\n          if ( (unsigned __int64)v152 | *((_QWORD *)&v151 + 1) | (unsigned __int64)v151 )\n          {\n            if ( !v163 )\n              goto LABEL_236;\n            if ( v151 == 0 )\n              goto LABEL_293;\n            if ( HIDWORD(v112) != 15 )\n            {\n              dcgettext(\n                0LL,\n                \"warning: when adding relative months/years, it is recommended to specify the 15th of the months\\n\",\n                5);\n              sub_403400();\n              v87 = v152;\n            }\n            if ( v87 )\n            {\nLABEL_293:\n              if ( (_DWORD)v112 != 12 )\n              {\n                dcgettext(0LL, \"warning: when adding relative days, it is recommended to specify noon\\n\", 5);\n                sub_403400();\n              }\n            }\n            if ( (_QWORD)v151 + SHIDWORD(v113) == (_DWORD)v151 + HIDWORD(v113)\n              && !__OFADD__((_QWORD)v151, SHIDWORD(v113)) )\n            {\n              v101 = v151 + HIDWORD(v113);\n              v71 = *((_QWORD *)&v151 + 1);\n              goto LABEL_214;\n            }\n            goto LABEL_224;\n          }\nLABEL_176:\n          if ( v161 )\n          {\n            v74 = v142 - v116;\n            v68 = __OFSUB__(v37, v74);\n            v37 -= v74;\n            if ( v68 | (unsigned __int64)__OFSUB__(v142, v116) )\n            {\n              if ( v73 )\n              {\n                v23 = 0;\n                dcgettext(0LL, \"error: timezone %d caused time_t overflow\\n\", 5);\n                sub_403400();\n                goto LABEL_76;\n              }\n              goto LABEL_75;\n            }\n          }\nLABEL_178:\n          if ( v73 )\n          {\n            sub_403880((__int64)&v111, (__int64)&v138, (__int64)&v130);\n            dcgettext(0LL, \"'%s' = %ld epoch-seconds\\n\", 5);\n            sub_403400();\n            v93 = 3600LL * *((_QWORD *)&v152 + 1);\n            v100 = *((_QWORD *)&v152 + 1);\n            if ( is_mul_ok(0xE10uLL, *((unsigned __int64 *)&v152 + 1)) )\n            {\n              v76 = (int)v154;\n              v27 = v163;\n              v77 = (((int)v154 + *((_QWORD *)&v150 + 1)) % 1000000000LL + 1000000000) % 0x3B9ACA00uLL;\n              v78 = ((int)v154 + DWORD2(v150) - (int)v77) / 1000000000;\n              v68 = __OFADD__(v93, v37);\n              v79 = v93 + v37;\n              if ( !v68 )\n              {\n                v80 = v153;\n                v81 = 60 * v153;\n                if ( is_mul_ok(0x3CuLL, v153) )\n                  goto LABEL_182;\n              }\n            }\n            else\n            {\n              v27 = v163;\n            }\n          }\n          else\n          {\nLABEL_179:\n            v75 = 3600LL * *((_QWORD *)&v152 + 1);\n            v100 = *((_QWORD *)&v152 + 1);\n            if ( !is_mul_ok(0xE10uLL, *((unsigned __int64 *)&v152 + 1)) )\n              goto LABEL_75;\n            v76 = (int)v154;\n            v77 = (((int)v154 + *((_QWORD *)&v150 + 1)) % 1000000000LL + 1000000000) % 0x3B9ACA00uLL;\n            v78 = ((int)v154 + DWORD2(v150) - (int)v77) / 1000000000;\n            v68 = __OFADD__(v75, v37);\n            v79 = v75 + v37;\n            if ( v68 )\n              goto LABEL_75;\n            v80 = v153;\n            v81 = 60 * v153;\n            if ( !is_mul_ok(0x3CuLL, v153) )\n              goto LABEL_75;\nLABEL_182:\n            v68 = __OFADD__(v81, v79);\n            v82 = v81 + v79;\n            if ( !v68 )\n            {\n              v83 = *((_QWORD *)&v153 + 1);\n              v68 = __OFADD__(*((_QWORD *)&v153 + 1), v82);\n              v84 = *((_QWORD *)&v153 + 1) + v82;\n              if ( !v68 )\n              {\n                v68 = __OFADD__(v78, v84);\n                v85 = v78 + v84;\n                if ( !v68 )\n                {\n                  *timer = v85;\n                  timer[1] = v77;\n                  if ( v27 )\n                  {\n                    if ( v100 | v80 | v83 | v76 )\n                    {\n                      dcgettext(0LL, \"after time adjustment (%+ld hours, %+ld minutes, %+ld seconds, %+d ns),\\n\", 5);\n                      sub_403400();\n                      dcgettext(0LL, \"    new time = %ld epoch-seconds\\n\", 5);\n                      sub_403400();\n                      if ( v115 != -1 && sub_40C180(v20, timer, &tp) && v115 != tp.tm_isdst )\n                      {\n                        dcgettext(0LL, \"warning: daylight saving time changed after time adjustment\\n\", 5);\n                        sub_403400();\n                      }\n                    }\n                  }\n                  v23 = v163;\n                  goto LABEL_115;\n                }\n              }\n            }\n          }\n          if ( !v27 )\n            goto LABEL_75;\n          v60 = \"error: adding relative time caused an overflow\\n\";\nLABEL_154:\n          v23 = 0;\n          dcgettext(0LL, v60, 5);\n          sub_403400();\n          goto LABEL_76;\n        }\n      }\n      sub_403920((__int64)&v138, (char *)&v132);\n      dcgettext(0LL, \"warning: day (%s) ignored when explicit dates are given\\n\", 5);\n      sub_403400();\n      goto LABEL_205;\n    }\n  }\n  v38 = v119;\n  v39 = v113;\n  srca = HIDWORD(v118);\n  v103 = HIDWORD(v112);\n  v106 = HIDWORD(v119);\n  v107 = HIDWORD(v113);\n  if ( v117 == v111 )\n  {\n    if ( HIDWORD(v118) != HIDWORD(v112) || (_DWORD)v118 == (_DWORD)v112 || v119 != v113 )\n    {\n      if ( !v163 )\n        goto LABEL_75;\n      dcgettext(0LL, \"error: invalid date/time value:\\n\", 5);\n      sub_403400();\n      sub_403880((__int64)&v117, (__int64)&v138, (__int64)&v132);\n      dcgettext(0LL, \"    user provided time: '%s'\\n\", 5);\n      sub_403400();\n      sub_403880((__int64)&v111, (__int64)&v138, (__int64)&v132);\n      dcgettext(0LL, \"       normalized time: '%s'\\n\", 5);\n      sub_403400();\n    }\n    else\n    {\n      if ( !v163 )\n        goto LABEL_75;\n      dcgettext(0LL, \"error: invalid date/time value:\\n\", 5);\n      sub_403400();\n      sub_403880((__int64)&v117, (__int64)&v138, (__int64)&v132);\n      dcgettext(0LL, \"    user provided time: '%s'\\n\", 5);\n      sub_403400();\n      sub_403880((__int64)&v111, (__int64)&v138, (__int64)&v132);\n      dcgettext(0LL, \"       normalized time: '%s'\\n\", 5);\n      sub_403400();\n      v99 = 1;\n    }\n  }\n  else\n  {\n    if ( !v163 )\n      goto LABEL_75;\n    dcgettext(0LL, \"error: invalid date/time value:\\n\", 5);\n    sub_403400();\n    sub_403880((__int64)&v117, (__int64)&v138, (__int64)&v132);\n    dcgettext(0LL, \"    user provided time: '%s'\\n\", 5);\n    sub_403400();\n    sub_403880((__int64)&v111, (__int64)&v138, (__int64)&v132);\n    dcgettext(0LL, \"       normalized time: '%s'\\n\", 5);\n    sub_403400();\n  }\n  v40 = \"----\";\n  if ( v106 == v107 )\n    v40 = \"\";\n  __snprintf_chk(&v132, 100LL, 1LL, 100LL, \"                                 %4s %2s %2s %2s %2s %2s\", v40);\n  v41 = 51LL;\n  v42 = 52LL;\n  if ( BYTE3(v137) == 32 )\n  {\n    do\n    {\n      v42 = (int)v41;\n      if ( !(_DWORD)v41 )\n        break;\n      --v41;\n    }\n    while ( *((_BYTE *)&v132 + v41) == 32 );\n  }\n  *((_BYTE *)&v132 + v42) = 0;\n  sub_403400();\n  dcgettext(0LL, \"     possible reasons:\\n\", 5);\n  sub_403400();\n  if ( v99 )\n  {\n    dcgettext(0LL, \"       non-existing due to daylight-saving time;\\n\", 5);\n    sub_403400();\n  }\n  if ( srca != v103 && v38 != v39 )\n  {\n    dcgettext(0LL, \"       invalid day/month combination;\\n\", 5);\n    sub_403400();\n  }\n  dcgettext(0LL, \"       numeric values overflow;\\n\", 5);\n  sub_403400();\n  if ( v108 )\n    dcgettext(0LL, \"incorrect timezone\", 5);\n  else\n    dcgettext(0LL, \"missing timezone\", 5);\n  sub_403400();\nLABEL_75:\n  v23 = 0;\nLABEL_76:\n  if ( v20 != v6 )\n    sub_40C160(v20);\nLABEL_78:\n  free(ptr);\n  return v23;\n}\n", 
            "funcStartAddr": "0x406030L", 
            "funcEndAddr": "0x407ff6L", 
            "funcName": "sub_406030"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408000(time_t *a1, const char *a2, struct timespec *a3)\n{\n  struct timespec *v3; // r15\n  unsigned int v4; // ebp\n  char *v5; // rax\n  char *v6; // r12\n  __int64 v7; // rax\n  __int64 v8; // rbx\n\n  v3 = a3;\n  v4 = 0;\n  v5 = getenv(\"TZ\");\n  v6 = v5;\n  v7 = sub_40BEA0(v5);\n  if ( v7 )\n  {\n    v8 = v7;\n    v4 = sub_406030(a1, a2, v3, 0, v7, v6);\n    sub_40C160(v8);\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x408000L", 
            "funcEndAddr": "0x408067L", 
            "funcName": "sub_408000"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408070(int *a1, int *a2, __int64 a3, char a4)\n{\n  __int64 result; // rax\n  int v5; // edx\n  time_t timer; // [rsp+0h] [rbp-10h]\n\n  if ( a3 == 1 )\n  {\n    v5 = *a2;\n    result = 1LL;\n    *a1 = *a2;\n    if ( *a2 <= 68 )\n    {\n      if ( !(a4 & 8) )\n      {\n        *a1 = v5 + 100;\n        return result;\n      }\n      return 0LL;\n    }\n  }\n  else\n  {\n    if ( a3 == 2 )\n    {\n      if ( a4 & 2 )\n      {\n        *a1 = a2[1] + 100 * *a2 - 1900;\n        return 1LL;\n      }\n      return 0LL;\n    }\n    time(&timer);\n    result = (__int64)localtime(&timer);\n    if ( result )\n    {\n      *a1 = *(_DWORD *)(result + 20);\n      result = 1LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408070L", 
            "funcEndAddr": "0x4080fbL", 
            "funcName": "sub_408070"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408100(_QWORD *a1, const char *a2, unsigned int a3)\n{\n  unsigned int v3; // ebp\n  size_t v4; // r13\n  char *v5; // rax\n  char *v6; // r14\n  signed __int64 v7; // rax\n  __int64 result; // rax\n  const char *v9; // rax\n  size_t v10; // r13\n  __int64 v11; // rdx\n  __int64 v12; // rdx\n  unsigned int v13; // eax\n  int v14; // edx\n  int v15; // eax\n  __int64 v16; // rax\n  struct tm *v17; // rdx\n  char *v18; // rax\n  int v19; // edx\n  __int64 v20; // [rsp+0h] [rbp-C8h]\n  char v21; // [rsp+8h] [rbp-C0h]\n  char s; // [rsp+10h] [rbp-B8h]\n  int v23; // [rsp+20h] [rbp-A8h]\n  unsigned int v24; // [rsp+24h] [rbp-A4h]\n  unsigned __int64 v25; // [rsp+28h] [rbp-A0h]\n  __int64 v26; // [rsp+30h] [rbp-98h]\n  char v27[16]; // [rsp+50h] [rbp-78h]\n  int v28; // [rsp+60h] [rbp-68h]\n  unsigned int v29; // [rsp+64h] [rbp-64h]\n  unsigned __int64 v30; // [rsp+68h] [rbp-60h]\n  __int64 v31; // [rsp+70h] [rbp-58h]\n  int v32; // [rsp+80h] [rbp-48h]\n\n  v3 = a3;\n  v4 = strlen(a2);\n  if ( v3 & 4 )\n  {\n    v5 = strchr(a2, 46);\n    v6 = v5;\n    if ( v5 )\n    {\n      v7 = v5 - a2;\n      if ( v4 - v7 != 3 )\n        return 0LL;\n      v4 = v7;\n    }\n  }\n  else\n  {\n    v6 = 0LL;\n  }\n  if ( v4 - 8 <= 4 && !(v4 & 1) )\n  {\n    v9 = a2;\n    while ( (unsigned int)(*v9 - 48) <= 9 )\n    {\n      if ( &a2[v4] == ++v9 )\n      {\n        v10 = v4 >> 1;\n        v11 = 0LL;\n        do\n        {\n          *(&v28 + v11) = a2[2 * v11 + 1] + 2 * (5 * a2[2 * v11] - 240) - 48;\n          ++v11;\n        }\n        while ( v10 != v11 );\n        v12 = v10 - 4;\n        if ( v3 & 1 )\n        {\n          LODWORD(v26) = v28 - 1;\n          v24 = HIDWORD(v30);\n          v25 = __PAIR64__(v29, v30);\n          if ( !(unsigned __int8)sub_408070((int *)&v26 + 1, (int *)&v31, v12, v3) )\n            return 0LL;\n        }\n        else\n        {\n          if ( !(unsigned __int8)sub_408070((int *)&v26 + 1, &v28, v12, v3) )\n            return 0LL;\n          v18 = &v27[4 * v10];\n          LODWORD(v26) = *(_DWORD *)&v27[4 * v10] - 1;\n          HIDWORD(v25) = *((_DWORD *)v18 + 1);\n          v19 = *((_DWORD *)v18 + 2);\n          LODWORD(v18) = *((_DWORD *)v18 + 3);\n          LODWORD(v25) = v19;\n          v24 = (unsigned int)v18;\n        }\n        if ( v6 )\n        {\n          v13 = v6[1] - 48;\n          if ( v13 > 9 )\n            return 0LL;\n          v14 = v6[2];\n          if ( (unsigned int)(v14 - 48) > 9 )\n            return 0LL;\n          v15 = v14 + 10 * v13 - 48;\n          v23 = v15;\n        }\n        else\n        {\n          v23 = 0;\n          v15 = 0;\n        }\n        v28 = v15;\n        v32 = -1;\n        v29 = v24;\n        v30 = v25;\n        v31 = v26;\n        v16 = sub_40BDB0(&v28);\n        v17 = (struct tm *)&v28;\n        v20 = v16;\n        if ( v16 == -1 )\n        {\n          v17 = localtime(&v20);\n          if ( !v17 )\n            return 0LL;\n        }\n        if ( !(v23 ^ v17->tm_sec | v17->tm_min ^ v24 | v17->tm_hour ^ (unsigned int)v25 | v17->tm_mday ^ HIDWORD(v25) | v17->tm_mon ^ (unsigned int)v26 | v17->tm_year ^ HIDWORD(v26)) )\n          goto LABEL_33;\n        if ( v23 != 60 )\n          return 0LL;\n        strcpy((char *)(__stpcpy_chk(&s, a2, 16LL) - 2), \"59\");\n        result = sub_408100(&v21, &s, v3);\n        if ( (_BYTE)result )\n        {\nLABEL_33:\n          *a1 = v20;\n          result = 1LL;\n        }\n        return result;\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x408100L", 
            "funcEndAddr": "0x4083a7L", 
            "funcName": "sub_408100"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4083B0()\n{\n  unsigned int v0; // ebx\n  char *v1; // rax\n  __int64 v3; // rax\n  unsigned int v4; // ebx\n  char *endptr; // [rsp+8h] [rbp-10h]\n\n  v0 = 200809;\n  v1 = getenv(\"_POSIX2_VERSION\");\n  if ( !v1 )\n    return v0;\n  if ( !*v1 )\n    return v0;\n  v3 = strtol(v1, &endptr, 10);\n  if ( *endptr )\n    return v0;\n  if ( v3 < -2147483648LL )\n    return 2147483648;\n  v4 = 0x7FFFFFFF;\n  if ( v3 <= 0x7FFFFFFF )\n    v4 = v3;\n  return v4;\n}\n", 
            "funcStartAddr": "0x4083b0L", 
            "funcEndAddr": "0x408422L", 
            "funcName": "sub_4083B0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_408430(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_6183B8 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x408430L", 
            "funcEndAddr": "0x4084c9L", 
            "funcName": "sub_408430"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4084D0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40C4F0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_413997;\n      if ( !v5 )\n        v2 = (char *)&unk_41398C;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_413993;\n    if ( !v5 )\n      v2 = (char *)&unk_413990;\n    return v2;\n  }\n  v6 = \"TZ=\\\"\" + 3;\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x4084d0L", 
            "funcEndAddr": "0x4085c2L", 
            "funcName": "sub_4084D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4085D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4085D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4085D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4085D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4085D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40B670((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4085D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4085D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"TZ=\\\"\" + 3;\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4084D0(\"`\", v11);\n        v47 = sub_4084D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_4085D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4085D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4085D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4085D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4085D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40B670((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4085D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4085D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"TZ=\\\"\" + 3;\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4084D0(\"`\", v11);\n        v47 = sub_4084D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401dc0L", 
            "funcEndAddr": "0x401dc5L", 
            "funcName": "sub_4085D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4085D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4085D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4085D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4085D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4085D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40B670((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4085D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4085D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"TZ=\\\"\" + 3;\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4084D0(\"`\", v11);\n        v47 = sub_4084D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_4085D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4085D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4085D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4085D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4085D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4085D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4085D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40B670((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4085D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4085D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"TZ=\\\"\" + 3;\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"TZ=\\\"\" + 3;\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4084D0(\"`\", v11);\n        v47 = sub_4084D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401dc0L", 
            "funcEndAddr": "0x401dc5L", 
            "funcName": "sub_4085D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409800(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_6182F8;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_618310 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40A860();\n    v9 = 16LL * (a1 + 1);\n    if ( off_6182F8 == &xmmword_618300 )\n    {\n      v7 = (__int128 *)sub_40A670(0LL, v9);\n      off_6182F8 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_618300);\n    }\n    else\n    {\n      off_6182F8 = (__int128 *)sub_40A670(off_6182F8, v9);\n      v7 = off_6182F8;\n    }\n    memset(&v7[dword_618310], 0, 16LL * (a1 + 1 - dword_618310));\n    dword_618310 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4085D0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6183C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40A610(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4085D0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_409800(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_6182F8;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_618310 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40A860();\n    v9 = 16LL * (a1 + 1);\n    if ( off_6182F8 == &xmmword_618300 )\n    {\n      v7 = (__int128 *)sub_40A670(0LL, v9);\n      off_6182F8 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_618300);\n    }\n    else\n    {\n      off_6182F8 = (__int128 *)sub_40A670(off_6182F8, v9);\n      v7 = off_6182F8;\n    }\n    memset(&v7[dword_618310], 0, 16LL * (a1 + 1 - dword_618310));\n    dword_618310 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4085D0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6183C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40A610(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4085D0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x401dc5L", 
            "funcEndAddr": "0x401dcaL", 
            "funcName": "sub_409800"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409800(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_6182F8;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_618310 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40A860();\n    v9 = 16LL * (a1 + 1);\n    if ( off_6182F8 == &xmmword_618300 )\n    {\n      v7 = (__int128 *)sub_40A670(0LL, v9);\n      off_6182F8 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_618300);\n    }\n    else\n    {\n      off_6182F8 = (__int128 *)sub_40A670(off_6182F8, v9);\n      v7 = off_6182F8;\n    }\n    memset(&v7[dword_618310], 0, 16LL * (a1 + 1 - dword_618310));\n    dword_618310 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4085D0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6183C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40A610(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4085D0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_409800(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_6182F8;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_618310 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_40A860();\n    v9 = 16LL * (a1 + 1);\n    if ( off_6182F8 == &xmmword_618300 )\n    {\n      v7 = (__int128 *)sub_40A670(0LL, v9);\n      off_6182F8 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_618300);\n    }\n    else\n    {\n      off_6182F8 = (__int128 *)sub_40A670(off_6182F8, v9);\n      v7 = off_6182F8;\n    }\n    memset(&v7[dword_618310], 0, 16LL * (a1 + 1 - dword_618310));\n    dword_618310 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_4085D0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6183C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40A610(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_4085D0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x401dc5L", 
            "funcEndAddr": "0x401dcaL", 
            "funcName": "sub_409800"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409D20(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409800(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_409D20(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409800(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401dcaL", 
            "funcEndAddr": "0x401dcfL", 
            "funcName": "sub_409D20"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409D20(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409800(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_409D20(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409800(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401dcaL", 
            "funcEndAddr": "0x401dcfL", 
            "funcName": "sub_409D20"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409D90(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_409800(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_409D90(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_409800(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401dcfL", 
            "funcEndAddr": "0x401dd4L", 
            "funcName": "sub_409D90"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409D90(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_409800(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_409D90(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_409800(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401dcfL", 
            "funcEndAddr": "0x401dd4L", 
            "funcName": "sub_409D90"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409E00(int a1, char *a2)\n{\n  return sub_409D20(0, a1, a2);\n}\n", 
            "funcStartAddr": "0x409e00L", 
            "funcEndAddr": "0x409e0cL", 
            "funcName": "sub_409E00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409E20(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_6184F0;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6184C0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_6184D0);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_6184E0);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_409800(0, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x409e20L", 
            "funcEndAddr": "0x409e90L", 
            "funcName": "sub_409E20"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409EA0(char *a1)\n{\n  return sub_409E20(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x409ea0L", 
            "funcEndAddr": "0x409eb1L", 
            "funcName": "sub_409EA0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409ED0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409800(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_409ED0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409800(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401dd4L", 
            "funcEndAddr": "0x401dd9L", 
            "funcName": "sub_409ED0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409ED0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409800(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_409ED0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409800(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401dd4L", 
            "funcEndAddr": "0x401dd9L", 
            "funcName": "sub_409ED0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409F40(int a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_6184C0);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6184D0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_6184E0);\n  v9 = qword_6184F0;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_409800(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x409f40L", 
            "funcEndAddr": "0x409facL", 
            "funcName": "sub_409F40"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40A030(int a1, char *a2)\n{\n  return sub_409800(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6182C0);\n}\n", 
            "funcStartAddr": "0x40a030L", 
            "funcEndAddr": "0x40a041L", 
            "funcName": "sub_40A030"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40A050(char *a1)\n{\n  return sub_409800(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6182C0);\n}\n", 
            "funcStartAddr": "0x40a050L", 
            "funcEndAddr": "0x40a066L", 
            "funcName": "sub_40A050"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A070(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_40A070(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401dd9L", 
            "funcEndAddr": "0x401ddeL", 
            "funcName": "sub_40A070"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A070(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_40A070(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401dd9L", 
            "funcEndAddr": "0x401ddeL", 
            "funcName": "sub_40A070"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A470(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_40A070(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_40A070(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x40a470L", 
            "funcEndAddr": "0x40a4d0L", 
            "funcName": "sub_40A470"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A4D0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_40A070(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_40A070(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x40a4d0L", 
            "funcEndAddr": "0x40a58cL", 
            "funcName": "sub_40A4D0"
        }, 
        {
            "decompiledFuncCode": "int sub_40A590()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_410FD7);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n", 
            "funcStartAddr": "0x40a590L", 
            "funcEndAddr": "0x40a604L", 
            "funcName": "sub_40A590"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_40A610(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_40A860();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a610L", 
            "funcEndAddr": "0x40a62aL", 
            "funcName": "sub_40A610"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_40A670(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_40A860();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a670L", 
            "funcEndAddr": "0x40a6a6L", 
            "funcName": "sub_40A670"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_40A810(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_40A610(n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x40a810L", 
            "funcEndAddr": "0x40a838L", 
            "funcName": "sub_40A810"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_40A860()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x40a860L", 
            "funcEndAddr": "0x40a891L", 
            "funcName": "sub_40A860"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A8A0(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x40a8a0L", 
            "funcEndAddr": "0x40a97fL", 
            "funcName": "sub_40A8A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A980(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a980L", 
            "funcEndAddr": "0x40af9cL", 
            "funcName": "sub_40A980"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AFA0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_40A8A0(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !memcmp((const void *)v11[v16], \"--\", 3uLL) )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_40A8A0((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = v10;\n      *a7 = v10;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_40A980(v10, v11, v12, v45, v46, a6, a7, v8, 4267035LL);\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_40A980(v10, v11, v12, v45, v46, a6, a7, v8, 4267036LL);\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_40A980(v10, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != v10 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( v10 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x40afa0L", 
            "funcEndAddr": "0x40b566L", 
            "funcName": "sub_40AFA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B570(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_618500 = dword_61831C;\n  dword_618504 = dword_618318;\n  result = sub_40AFA0(a1, a2, a3, a4, a5, a6, &dword_618500, a7);\n  dword_61831C = dword_618500;\n  qword_618550 = qword_618510;\n  dword_618314 = dword_618508;\n  return result;\n}\n", 
            "funcStartAddr": "0x40b570L", 
            "funcEndAddr": "0x40b5c6L", 
            "funcName": "sub_40B570"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B5D0(int a1, __int64 a2, char *a3)\n{\n  return sub_40B570(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x40b5d0L", 
            "funcEndAddr": "0x40b5e8L", 
            "funcName": "sub_40B5D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B5F0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40B570(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x40b5f0L", 
            "funcEndAddr": "0x40b603L", 
            "funcName": "sub_40B5F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B610(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40AFA0(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x40b610L", 
            "funcEndAddr": "0x40b625L", 
            "funcName": "sub_40B610"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B630(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40B570(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x40b630L", 
            "funcEndAddr": "0x40b646L", 
            "funcName": "sub_40B630"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B650(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40AFA0(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x40b650L", 
            "funcEndAddr": "0x40b668L", 
            "funcName": "sub_40B650"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_40B670(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_40C490(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40b670L", 
            "funcEndAddr": "0x40b6eaL", 
            "funcName": "sub_40B670"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B6F0(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)\n{\n  int v10; // er10\n  int v11; // er12\n\n  v10 = (unsigned __int64)(a1 >> 2) + 475 - ((a1 & 3) == 0);\n  v11 = (a6 >> 2) + 475 - ((a6 & 3) == 0);\n  return a5\n       + 60\n       * (a4\n        + 60\n        * (a3\n         + 24\n         * ((int)(v10\n                - v11\n                - (v10 / 25\n                 - ((unsigned int)(v10 % 25) >> 31)\n                 - (v11 / 25\n                  - ((unsigned int)(v11 % 25) >> 31)))\n                + ((int)(v10 / 25 - ((unsigned int)(v10 % 25) >> 31)) >> 2)\n                - ((int)(v11 / 25 - ((unsigned int)(v11 % 25) >> 31)) >> 2))\n          + 365 * (a1 - a6)\n          + a2\n          - a7)\n         - a8)\n        - a9)\n       - a10;\n}\n", 
            "funcStartAddr": "0x40b6f0L", 
            "funcEndAddr": "0x40b807L", 
            "funcName": "sub_40B6F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B810(__int64 a1, __int64 a2, int a3, int a4, int a5, __int64 a6, int *a7)\n{\n  __int64 v7; // rbx\n  __int64 v8; // rax\n  bool v9; // of\n  __int64 result; // rax\n\n  v7 = a6;\n  if ( !a7\n    || (v8 = sub_40B6F0(a1, a2, a3, a4, a5, a7[5], a7[7], a7[2], a7[1], *a7),\n        v9 = __OFADD__(v7, v8),\n        result = v7 + v8,\n        v9) )\n  {\n    if ( v7 < 0 )\n    {\n      if ( v7 >= -9223372036854775806LL )\n        result = 0x8000000000000000LL;\n      else\n        result = v7 + 1;\n    }\n    else\n    {\n      result = 0x7FFFFFFFFFFFFFFFLL;\n      if ( v7 > 9223372036854775805LL )\n        result = v7 - 1;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b810L", 
            "funcEndAddr": "0x40b8a1L", 
            "funcName": "sub_40B810"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B8B0(__int64 (__fastcall *a1)(__int64 *, __int64), __int64 *a2, __int64 a3)\n{\n  __int64 v3; // r13\n  __int64 result; // rax\n  __int64 v5; // r14\n  __int64 v6; // rbp\n  __int64 v7; // rdx\n  __int64 v8; // rbx\n  __int64 v9; // [rsp+8h] [rbp-30h]\n\n  v3 = a3;\n  v9 = *a2;\n  result = a1(&v9, a3);\n  if ( !result )\n  {\n    v5 = *a2;\n    v6 = 0LL;\n    if ( *a2 )\n    {\n      while ( 1 )\n      {\n        v7 = (v6 >> 1) + (v5 >> 1);\n        v8 = v7 + (((unsigned __int8)v5 | (unsigned __int8)v6) & 1);\n        if ( v6 != v8 && v5 != v8 )\n          break;\n        v9 = v7 + (((unsigned __int8)v5 | (unsigned __int8)v6) & 1);\n        result = a1(&v9, v3);\n        if ( !result )\n        {\n          v5 = v8;\n          v8 = v6;\n        }\n        v6 = v8;\n      }\n      if ( !result && v6 )\n      {\n        v9 = v6;\n        result = a1(&v9, v3);\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b8b0L", 
            "funcEndAddr": "0x40b96fL", 
            "funcName": "sub_40B8B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B970(int *a1, __int64 (__fastcall *a2)(__int64 *, __int64), _QWORD *a3)\n{\n  int *v3; // r14\n  __int64 v4; // rsi\n  int v5; // eax\n  int v6; // edi\n  _BOOL4 v7; // edx\n  __int64 v8; // rbx\n  int v9; // er12\n  int v10; // ebp\n  __int64 v11; // rsi\n  int v12; // eax\n  __int64 v13; // r13\n  int v14; // er12\n  __int64 v15; // r14\n  int *v16; // rax\n  __int64 v17; // r15\n  __int64 result; // rax\n  bool v19; // dl\n  __m128i *v20; // r14\n  int v21; // esi\n  __int64 v22; // rdx\n  bool v23; // of\n  __int64 v24; // rax\n  __m128i v25; // xmm1\n  __m128i v26; // xmm2\n  __int64 v27; // rdx\n  int i; // er13\n  int v29; // er12\n  int v30; // er15\n  int v31; // [rsp+Ch] [rbp-10Ch]\n  __int64 (__fastcall *v32)(__int64 *, __int64); // [rsp+10h] [rbp-108h]\n  int v33; // [rsp+18h] [rbp-100h]\n  int v34; // [rsp+1Ch] [rbp-FCh]\n  int v35; // [rsp+28h] [rbp-F0h]\n  _QWORD *v36; // [rsp+30h] [rbp-E8h]\n  __int64 v37; // [rsp+38h] [rbp-E0h]\n  int v38; // [rsp+40h] [rbp-D8h]\n  int v39; // [rsp+44h] [rbp-D4h]\n  __m128i *v40; // [rsp+48h] [rbp-D0h]\n  __int64 v41; // [rsp+50h] [rbp-C8h]\n  __int64 v42; // [rsp+58h] [rbp-C0h]\n  __int128 v43; // [rsp+60h] [rbp-B8h]\n  __int128 v44; // [rsp+70h] [rbp-A8h]\n  __int128 v45; // [rsp+80h] [rbp-98h]\n  __int64 v46; // [rsp+90h] [rbp-88h]\n  __int64 v47; // [rsp+A0h] [rbp-78h]\n  int v48; // [rsp+C0h] [rbp-58h]\n\n  v3 = a1;\n  v32 = a2;\n  v4 = a1[3];\n  v38 = *a1;\n  v36 = a3;\n  v31 = a1[1];\n  v5 = a1[2];\n  v6 = a1[4];\n  v33 = v5;\n  v35 = v3[8];\n  v7 = 0;\n  v8 = v3[5] + (__int64)(int)(v6 / 12 - ((unsigned int)(v6 % 12) >> 31));\n  if ( !(v8 & 3) )\n  {\n    v7 = 1;\n    if ( v8 == 100 * (v8 / 100) )\n      v7 = ((v8 / 100) & 3) == 1;\n  }\n  v9 = 59;\n  v10 = 6;\n  v11 = (unsigned __int16)word_414BA0[13LL * v7 + (((v6 % 12) >> 31) & 0xC) + v6 % 12] - 1 + v4;\n  if ( v38 <= 59 )\n    v9 = v38;\n  v12 = 0;\n  if ( v9 >= 0 )\n    v12 = v9;\n  v34 = v12;\n  v39 = -(int)*v36;\n  v13 = sub_40B6F0(v8, v11, v33, v31, v12, 70, 0, 0, 0, v39);\n  v37 = v13;\n  v41 = v13;\n  v40 = (__m128i *)v3;\n  v14 = 0;\n  v15 = v13;\n  while ( 1 )\n  {\n    v16 = (int *)sub_40B8B0(v32, &v41, (__int64)&v43);\n    v17 = v41;\n    result = sub_40B810(v8, v11, v33, v31, v34, v41, v16);\n    if ( v17 == result )\n      break;\n    if ( v17 == v13 && v17 != v15 )\n    {\n      if ( (int)v45 < 0 )\n        goto LABEL_17;\n      v19 = (_DWORD)v45 != 0;\n      if ( v35 < 0 )\n      {\n        if ( v19 >= v14 )\n        {\nLABEL_17:\n          v20 = v40;\n          result = v17;\n          goto LABEL_18;\n        }\n      }\n      else if ( (v35 != 0) != v19 )\n      {\n        goto LABEL_17;\n      }\n    }\n    if ( !--v10 )\n      return -1LL;\n    v41 = result;\n    v13 = v15;\n    v15 = v17;\n    v14 = v45 != 0;\n  }\n  v20 = v40;\n  if ( (v35 == 0) != ((_DWORD)v45 == 0) && v35 >= 0 && (int)v45 >= 0 )\n  {\n    for ( i = 601200; i != 269337600; i += 601200 )\n    {\n      v29 = 2;\n      v30 = -i;\n      v42 = result + -i;\n      if ( !__OFADD__(result, -i) )\n      {\nLABEL_35:\n        sub_40B8B0(v32, &v42, (__int64)&v47);\n        if ( (v35 == 0) == (v48 == 0) || v48 < 0 )\n        {\n          v41 = sub_40B810(v8, v11, v33, v31, v34, v42, (int *)&v47);\n          sub_40B8B0(v32, &v41, (__int64)&v43);\n          result = v41;\n          break;\n        }\n        result = v41;\n      }\n      while ( 1 )\n      {\n        v30 += 2 * i;\n        if ( v29 == 1 )\n          break;\n        v29 = 1;\n        v42 = result + v30;\n        if ( !__OFADD__(result, v30) )\n          goto LABEL_35;\n      }\n    }\n  }\nLABEL_18:\n  v21 = v43;\n  *v36 = result - (v37 + v39);\n  if ( v21 == v38 )\n    goto LABEL_22;\n  v22 = ((v38 <= 0) & (unsigned __int8)(v21 == 60)) - (__int64)v34 + v38;\n  v23 = __OFADD__(v22, result);\n  v24 = v22 + result;\n  v41 = v24;\n  if ( !v23 )\n  {\n    v47 = v24;\n    if ( v32(&v47, (__int64)&v43) )\n    {\n      result = v41;\nLABEL_22:\n      v25 = _mm_load_si128((const __m128i *)&v44);\n      v26 = _mm_load_si128((const __m128i *)&v45);\n      v27 = v46;\n      *v20 = _mm_load_si128((const __m128i *)&v43);\n      v20[1] = v25;\n      v20[2] = v26;\n      v20[3].m128i_i64[0] = v27;\n      return result;\n    }\n  }\n  return -1LL;\n}\n", 
            "funcStartAddr": "0x40b970L", 
            "funcEndAddr": "0x40bdaaL", 
            "funcName": "sub_40B970"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BDB0(int *a1)\n{\n  tzset();\n  return sub_40B970(a1, (__int64 (__fastcall *)(__int64 *, __int64))localtime_r, &unk_618538);\n}\n", 
            "funcStartAddr": "0x40bdb0L", 
            "funcEndAddr": "0x40bdccL", 
            "funcName": "sub_40BDB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BDD0(__int64 a1)\n{\n  int v1; // eax\n  unsigned int v2; // edx\n\n  if ( *(_BYTE *)(a1 + 8) )\n    v1 = setenv(\"TZ\", (const char *)(a1 + 9), 1);\n  else\n    v1 = unsetenv(\"TZ\");\n  v2 = 0;\n  if ( !v1 )\n  {\n    tzset();\n    v2 = 1;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40bdd0L", 
            "funcEndAddr": "0x40be15L", 
            "funcName": "sub_40BDD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BE20(_QWORD *a1)\n{\n  _QWORD *v1; // rbx\n\n  if ( a1 )\n  {\n    do\n    {\n      v1 = (_QWORD *)*a1;\n      free(a1);\n      a1 = v1;\n    }\n    while ( v1 );\n  }\n}\n", 
            "funcStartAddr": "0x40be20L", 
            "funcEndAddr": "0x40be49L", 
            "funcName": "sub_40BE20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BE50(_QWORD *a1)\n{\n  int *v1; // rbx\n  int v2; // er13\n  unsigned int v3; // ebp\n\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = sub_40BDD0((__int64)a1);\n  if ( !(_BYTE)v3 )\n    v2 = *v1;\n  sub_40BE20(a1);\n  *v1 = v2;\n  return v3;\n}\n", 
            "funcStartAddr": "0x40be50L", 
            "funcEndAddr": "0x40be91L", 
            "funcName": "sub_40BE50"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_40BEA0(void *src)\n{\n  void *v1; // r12\n  size_t v2; // rax\n  __int64 v3; // rdi\n  size_t v4; // rbp\n  char *v5; // rax\n  _BYTE *v6; // rbx\n  _QWORD *result; // rax\n\n  if ( src )\n  {\n    v1 = src;\n    v2 = strlen((const char *)src);\n    v3 = 118LL;\n    v4 = v2 + 1;\n    if ( v2 + 1 >= 0x76 )\n      v3 = v2 + 1;\n    v5 = (char *)malloc((v3 + 17) & 0xFFFFFFFFFFFFFFF8LL);\n    v6 = v5;\n    if ( v5 )\n    {\n      *(_QWORD *)v5 = 0LL;\n      *((_WORD *)v5 + 4) = 1;\n      memcpy(v5 + 9, v1, v4);\n      v6[v4 + 9] = 0;\n    }\n    return v6;\n  }\n  result = malloc(0x80uLL);\n  v6 = result;\n  if ( !result )\n    return v6;\n  *result = 0LL;\n  *((_WORD *)result + 4) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x40bea0L", 
            "funcEndAddr": "0x40bf2fL", 
            "funcName": "sub_40BEA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BF30(__int64 *a1, unsigned __int64 a2)\n{\n  char *v2; // r12\n  __int64 *v3; // rbp\n  __int64 result; // rax\n  char *v5; // rbx\n  __int64 v6; // r14\n  __int64 *v7; // rax\n  size_t v8; // r15\n  char *v9; // rax\n  _QWORD *v10; // rax\n\n  v2 = *(char **)(a2 + 48);\n  if ( !v2 )\n    return 1LL;\n  v3 = a1;\n  if ( a2 > (unsigned __int64)v2 || (result = 1LL, (unsigned __int64)v2 >= a2 + 56) )\n  {\n    v5 = (char *)a1 + 9;\n    if ( !*v2 )\n    {\n      v5 = \"%s: invalid option -- '%c'\\n\" + 27;\n      goto LABEL_12;\n    }\nLABEL_5:\n    if ( !strcmp(v5, v2) )\n      goto LABEL_12;\n    while ( 1 )\n    {\n      if ( !*v5 )\n      {\n        v6 = (__int64)v3 + 9;\n        if ( (char *)v3 + 9 != v5 )\n        {\n          v8 = strlen(v2) + 1;\n          v9 = &v5[-v6];\n          if ( ~(unsigned __int64)&v5[-v6] < v8 )\n          {\n            *__errno_location() = 12;\n            return 0LL;\n          }\nLABEL_19:\n          if ( (unsigned __int64)&v9[v8] <= 0x76 )\n          {\n            memcpy(v5, v2, v8);\n            v5[v8] = 0;\n            goto LABEL_12;\n          }\n          v10 = sub_40BEA0(v2);\n          *v3 = (__int64)v10;\n          if ( !v10 )\n            return 0LL;\n          *((_BYTE *)v10 + 8) = 0;\n          v5 = (char *)v10 + 9;\nLABEL_12:\n          *(_QWORD *)(a2 + 48) = v5;\n          return 1LL;\n        }\n        if ( !*((_BYTE *)v3 + 8) )\n        {\n          v8 = strlen(v2) + 1;\n          v9 = 0LL;\n          goto LABEL_19;\n        }\n      }\n      v5 += strlen(v5) + 1;\n      if ( *v5 )\n        goto LABEL_5;\n      v7 = (__int64 *)*v3;\n      if ( !*v3 )\n        goto LABEL_5;\n      v5 = (char *)v7 + 9;\n      v3 = (__int64 *)*v3;\n      if ( !strcmp((const char *)v7 + 9, v2) )\n        goto LABEL_12;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40bf30L", 
            "funcEndAddr": "0x40c0a5L", 
            "funcName": "sub_40BF30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C0B0(__int64 a1)\n{\n  char *v1; // rax\n  char *v2; // rbp\n  _QWORD *v3; // rbx\n  int *v5; // rbp\n  int v6; // er12\n\n  v1 = getenv(\"TZ\");\n  v2 = v1;\n  if ( v1 )\n  {\n    if ( *(_BYTE *)(a1 + 8) && !strcmp((const char *)(a1 + 9), v1) )\n      return 1LL;\n  }\n  else if ( !*(_BYTE *)(a1 + 8) )\n  {\n    return 1LL;\n  }\n  v3 = sub_40BEA0(v2);\n  if ( !v3 || (unsigned __int8)sub_40BDD0(a1) )\n    return (__int64)v3;\n  v5 = __errno_location();\n  v6 = *v5;\n  if ( v3 != (_QWORD *)1 )\n    sub_40BE20(v3);\n  *v5 = v6;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40c0b0L", 
            "funcEndAddr": "0x40c15fL", 
            "funcName": "sub_40C0B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C160(_QWORD *a1)\n{\n  if ( a1 != (_QWORD *)1 )\n    sub_40BE20(a1);\n}\n", 
            "funcStartAddr": "0x40c160L", 
            "funcEndAddr": "0x40c171L", 
            "funcName": "sub_40C160"
        }, 
        {
            "decompiledFuncCode": "struct tm *__fastcall sub_40C180(__int64 *a1, const time_t *a2, struct tm *a3)\n{\n  struct tm *v3; // rbx\n  _QWORD *v4; // r13\n\n  if ( !a1 )\n    return gmtime_r(a2, a3);\n  v3 = a3;\n  v4 = (_QWORD *)sub_40C0B0((__int64)a1);\n  if ( v4 )\n  {\n    if ( localtime_r(a2, v3) && (unsigned __int8)sub_40BF30(a1, (unsigned __int64)v3) )\n    {\n      if ( v4 == (_QWORD *)1 || (unsigned __int8)sub_40BE50(v4) )\n        return v3;\n    }\n    else if ( v4 != (_QWORD *)1 )\n    {\n      sub_40BE50(v4);\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40c180L", 
            "funcEndAddr": "0x40c225L", 
            "funcName": "sub_40C180"
        }, 
        {
            "decompiledFuncCode": "time_t __fastcall sub_40C230(__int64 *a1, int *a2)\n{\n  _QWORD *v2; // r12\n  time_t result; // rax\n  int v4; // eax\n  time_t timer; // [rsp+8h] [rbp-60h]\n  struct tm tp; // [rsp+10h] [rbp-58h]\n\n  if ( !a1 )\n    return sub_40C350(a2);\n  v2 = (_QWORD *)sub_40C0B0((__int64)a1);\n  if ( !v2 )\n    goto LABEL_20;\n  timer = sub_40BDB0(a2);\n  if ( timer != -1\n    || localtime_r(&timer, &tp)\n    && ((v4 = a2[8], (v4 == 0) == (tp.tm_isdst == 0)) || v4 < 0 || tp.tm_isdst < 0)\n    && !(tp.tm_sec ^ *a2 | tp.tm_min ^ a2[1] | tp.tm_hour ^ a2[2] | tp.tm_mday ^ a2[3] | tp.tm_year ^ a2[5] | tp.tm_mon ^ a2[4]) )\n  {\n    if ( !(unsigned __int8)sub_40BF30(a1, (unsigned __int64)a2) )\n      timer = -1LL;\n  }\n  if ( v2 == (_QWORD *)1 || (unsigned __int8)sub_40BE50(v2) )\n    result = timer;\n  else\nLABEL_20:\n    result = -1LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x40c230L", 
            "funcEndAddr": "0x40c34cL", 
            "funcName": "sub_40C230"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C350(int *a1)\n{\n  a1[8] = 0;\n  return sub_40B970(a1, (__int64 (__fastcall *)(__int64 *, __int64))gmtime_r, &unk_618540);\n}\n", 
            "funcStartAddr": "0x40c350L", 
            "funcEndAddr": "0x40c366L", 
            "funcName": "sub_40C350"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C370(FILE *s, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  size_t v4; // rbx\n  char *v5; // rbp\n  int *v7; // rax\n  int v8; // er13\n  int *v9; // r12\n  size_t n; // [rsp+8h] [rbp-800h]\n  char v11; // [rsp+10h] [rbp-7F8h]\n\n  n = 2000LL;\n  v3 = (char *)sub_40E420(&v11, &n, a2, a3);\n  v4 = n;\n  if ( !v3 )\n    goto LABEL_10;\n  v5 = v3;\n  if ( fwrite(v3, 1uLL, n, s) >= v4 )\n  {\n    if ( v5 != &v11 )\n      free(v5);\n    if ( v4 <= 0x7FFFFFFF )\n      return (unsigned int)v4;\n    *__errno_location() = 75;\nLABEL_10:\n    LODWORD(v4) = -1;\n    sub_40E410(s);\n    return (unsigned int)v4;\n  }\n  LODWORD(v4) = -1;\n  if ( v5 != &v11 )\n  {\n    v7 = __errno_location();\n    v8 = *v7;\n    v9 = v7;\n    free(v5);\n    *v9 = v8;\n  }\n  return (unsigned int)v4;\n}\n", 
            "funcStartAddr": "0x40c370L", 
            "funcEndAddr": "0x40c42dL", 
            "funcName": "sub_40C370"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C430(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_40E2F0(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  else\n  {\n    if ( !(_DWORD)result )\n      return result;\n    if ( !v1 )\n      return (unsigned int)-(*__errno_location() != 9);\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x40c430L", 
            "funcEndAddr": "0x40c48dL", 
            "funcName": "sub_40C430"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40C490(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c490L", 
            "funcEndAddr": "0x40c4eeL", 
            "funcName": "sub_40C490"
        }, 
        {
            "decompiledFuncCode": "const char *sub_40C4F0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_40E2F0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_40E2F0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x40c4f0L", 
            "funcEndAddr": "0x40ca52L", 
            "funcName": "sub_40C4F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CA60(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  const __int32_t **v4; // rax\n\n  if ( a3 )\n  {\n    v3 = a3 - 1;\n    v4 = __ctype_tolower_loc();\n    do\n    {\n      *(_BYTE *)(a1 + v3) = (*v4)[*(unsigned __int8 *)(a2 + v3)];\n      --v3;\n    }\n    while ( v3 != -1 );\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x40ca60L", 
            "funcEndAddr": "0x40caa1L", 
            "funcName": "sub_40CA60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CAB0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  const __int32_t **v4; // rax\n\n  if ( a3 )\n  {\n    v3 = a3 - 1;\n    v4 = __ctype_toupper_loc();\n    do\n    {\n      *(_BYTE *)(a1 + v3) = (*v4)[*(unsigned __int8 *)(a2 + v3)];\n      --v3;\n    }\n    while ( v3 != -1 );\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x40cab0L", 
            "funcEndAddr": "0x40caf1L", 
            "funcName": "sub_40CAB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_40CB00@<rax>(void *s@<rdi>, char *a2@<rdx>, const __m128i *a3@<rcx>, __int64 a4@<rsi>, char a5@<r8b>, __int64 a6, int a7)\n{\n  char *v7; // r15\n  char *v8; // rbx\n  __int64 v9; // r12\n  int v10; // er11\n  char v11; // al\n  __int64 v12; // r14\n  char *v13; // r8\n  char v15; // r11\n  char v16; // r8\n  int i; // er12\n  int v18; // eax\n  char v19; // cl\n  int v20; // er9\n  bool v21; // cc\n  int v22; // ebp\n  int v23; // eax\n  unsigned int v24; // edx\n  int v25; // edi\n  char *v26; // rax\n  char *v27; // r8\n  char v28; // r13\n  size_t v29; // rax\n  unsigned __int64 v30; // rcx\n  int v31; // eax\n  unsigned __int64 v32; // rbx\n  size_t v33; // rdx\n  char *v34; // rdi\n  char *v35; // rsi\n  size_t v36; // rdx\n  char *v37; // rdi\n  unsigned __int64 v38; // rcx\n  __int64 v39; // r13\n  __m128i v40; // xmm4\n  __m128i v41; // xmm2\n  __int64 v42; // rax\n  time_t v43; // rax\n  time_t v44; // rsi\n  time_t v45; // rcx\n  int v46; // edx\n  char v47; // al\n  char v48; // dl\n  int v49; // er10\n  char *v50; // rcx\n  unsigned __int64 v51; // rax\n  size_t v52; // r9\n  unsigned __int64 v53; // r9\n  size_t v54; // rdx\n  char *v55; // rdi\n  unsigned __int64 v56; // r10\n  int v57; // eax\n  unsigned __int64 v58; // rsi\n  size_t v59; // rdx\n  char *v60; // rdi\n  __int32 v61; // er10\n  __int32 v62; // er13\n  int v63; // edi\n  int v64; // er8\n  int v65; // eax\n  int v66; // er13\n  int v67; // er13\n  int v68; // edi\n  unsigned int v69; // esi\n  int v70; // edi\n  unsigned int v71; // er8\n  unsigned __int64 v72; // r13\n  int v73; // eax\n  unsigned __int64 v74; // rsi\n  char v75; // r11\n  char v76; // r8\n  size_t v77; // rdx\n  char *v78; // rdi\n  int v79; // esi\n  unsigned __int64 v80; // r13\n  size_t v81; // rdx\n  char *v82; // rdi\n  char *v83; // rcx\n  __int64 v84; // rax\n  int v85; // edx\n  unsigned __int64 v86; // rsi\n  size_t v87; // rdx\n  char *v88; // rdi\n  size_t v89; // rdx\n  char *v90; // rdi\n  int v91; // esi\n  int v92; // edi\n  int v93; // edx\n  __int64 v94; // rax\n  char *v95; // r9\n  size_t v96; // rcx\n  size_t v97; // rax\n  unsigned __int64 v98; // rdx\n  size_t v99; // rdx\n  char *v100; // rdi\n  size_t v101; // rcx\n  __int64 j; // r13\n  __int64 v103; // rsi\n  int v104; // eax\n  int v105; // esi\n  char v106; // cl\n  int v107; // esi\n  size_t v108; // rdx\n  char *v109; // rdi\n  int v110; // eax\n  int v111; // eax\n  char v112; // al\n  __int64 v113; // rdx\n  char v114; // cl\n  unsigned __int64 v115; // r12\n  unsigned __int64 v116; // r8\n  size_t v117; // rdx\n  __int64 v118; // r12\n  char *v119; // rdi\n  int v120; // eax\n  unsigned __int64 v121; // rcx\n  char *v122; // rdi\n  int v123; // esi\n  int v124; // edx\n  int v125; // er10\n  int v126; // esi\n  int k; // edi\n  __int32 v128; // esi\n  bool v129; // sf\n  bool v130; // of\n  int v131; // eax\n  int v132; // eax\n  int v133; // esi\n  int v134; // esi\n  __int64 v135; // [rsp+0h] [rbp-4C8h]\n  const __m128i *tp; // [rsp+8h] [rbp-4C0h]\n  char *v137; // [rsp+20h] [rbp-4A8h]\n  char v138; // [rsp+2Bh] [rbp-49Dh]\n  int v139; // [rsp+2Ch] [rbp-49Ch]\n  char *v140; // [rsp+30h] [rbp-498h]\n  char v141; // [rsp+30h] [rbp-498h]\n  unsigned __int64 v142; // [rsp+30h] [rbp-498h]\n  char v143; // [rsp+30h] [rbp-498h]\n  int v144; // [rsp+30h] [rbp-498h]\n  char v145; // [rsp+30h] [rbp-498h]\n  char v146; // [rsp+30h] [rbp-498h]\n  size_t v147; // [rsp+30h] [rbp-498h]\n  char v148; // [rsp+30h] [rbp-498h]\n  size_t v149; // [rsp+30h] [rbp-498h]\n  int v150; // [rsp+30h] [rbp-498h]\n  char v151; // [rsp+40h] [rbp-488h]\n  char *v152; // [rsp+40h] [rbp-488h]\n  char *v153; // [rsp+40h] [rbp-488h]\n  char v154; // [rsp+40h] [rbp-488h]\n  char *v155; // [rsp+40h] [rbp-488h]\n  char v156; // [rsp+40h] [rbp-488h]\n  char v157; // [rsp+40h] [rbp-488h]\n  char v158; // [rsp+40h] [rbp-488h]\n  char *v159; // [rsp+40h] [rbp-488h]\n  char *v160; // [rsp+40h] [rbp-488h]\n  char v161; // [rsp+40h] [rbp-488h]\n  char *v162; // [rsp+40h] [rbp-488h]\n  char v163; // [rsp+40h] [rbp-488h]\n  int v164; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v165; // [rsp+48h] [rbp-480h]\n  char *v166; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v167; // [rsp+48h] [rbp-480h]\n  char v168; // [rsp+48h] [rbp-480h]\n  char *v169; // [rsp+48h] [rbp-480h]\n  char *v170; // [rsp+48h] [rbp-480h]\n  char v171; // [rsp+48h] [rbp-480h]\n  int v172; // [rsp+48h] [rbp-480h]\n  char v173; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v174; // [rsp+50h] [rbp-478h]\n  int v175; // [rsp+50h] [rbp-478h]\n  size_t v176; // [rsp+50h] [rbp-478h]\n  unsigned __int64 v177; // [rsp+50h] [rbp-478h]\n  int v178; // [rsp+50h] [rbp-478h]\n  size_t v179; // [rsp+58h] [rbp-470h]\n  char *v180; // [rsp+58h] [rbp-470h]\n  char v181; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v182; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v183; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v184; // [rsp+60h] [rbp-468h]\n  char format[2]; // [rsp+70h] [rbp-458h]\n  char v186; // [rsp+72h] [rbp-456h]\n  char v187; // [rsp+73h] [rbp-455h]\n  char v188[9]; // [rsp+87h] [rbp-441h]\n  char sa[16]; // [rsp+90h] [rbp-438h]\n  __m128i v190; // [rsp+A0h] [rbp-428h]\n  __m128i v191; // [rsp+B0h] [rbp-418h]\n  __int64 v192; // [rsp+C0h] [rbp-408h]\n\n  v7 = (char *)s;\n  v8 = a2;\n  v9 = a3[3].m128i_i64[0];\n  v10 = a3->m128i_i64[1];\n  v135 = a4;\n  tp = a3;\n  if ( !v9 )\n    v9 = 4279188LL;\n  v138 = a5;\n  if ( v10 <= 12 )\n  {\n    if ( !v10 )\n      v10 = 12;\n  }\n  else\n  {\n    v10 -= 12;\n  }\n  v11 = *a2;\n  v12 = 0LL;\n  if ( !*a2 )\n  {\nLABEL_13:\n    if ( v7 && v135 )\n      *v7 = 0;\n    return v12;\n  }\n  v139 = v10;\n  v137 = (char *)v9;\n  while ( v11 != 37 )\n  {\n    if ( (unsigned __int64)(v135 - v12) <= 1 )\n      return 0LL;\n    if ( v7 )\n      *v7++ = v11;\n    ++v12;\n    v13 = v8;\nLABEL_12:\n    v11 = v13[1];\n    v8 = v13 + 1;\n    if ( !v11 )\n      goto LABEL_13;\n  }\n  v15 = v138;\n  v16 = 0;\nLABEL_22:\n  for ( i = 0; ; i = v18 )\n  {\n    v18 = *++v8;\n    v19 = *v8;\n    v20 = *v8;\n    v21 = *v8 <= 48;\n    if ( *v8 != 48 )\n      break;\nLABEL_26:\n    ;\n  }\n  while ( 1 )\n  {\n    if ( !v21 )\n    {\n      if ( (_BYTE)v18 == 94 )\n      {\n        v15 = 1;\n        goto LABEL_22;\n      }\n      if ( (_BYTE)v18 != 95 )\n      {\n        v22 = -1;\n        if ( (unsigned int)(v18 - 48) > 9 )\n          goto LABEL_29;\n        goto LABEL_37;\n      }\n      goto LABEL_26;\n    }\n    if ( (_BYTE)v18 != 35 )\n      break;\n    v18 = *++v8;\n    v16 = 1;\n    v19 = *v8;\n    v20 = *v8;\n    v21 = *v8 <= 48;\n    if ( *v8 == 48 )\n      goto LABEL_26;\n  }\n  if ( (_BYTE)v18 == 45 )\n    goto LABEL_26;\n  v22 = -1;\n  if ( (unsigned int)(v18 - 48) > 9 )\n    goto LABEL_29;\nLABEL_37:\n  v22 = 0;\n  while ( 1 )\n  {\n    v23 = v8[1];\n    v19 = v8[1];\n    v24 = v23 - 48;\n    if ( v22 > 214748364 )\n      break;\n    v25 = *v8;\n    if ( v22 == 214748364 && (char)v25 > 55 )\n      break;\n    ++v8;\n    v22 = v25 + 10 * v22 - 48;\nLABEL_41:\n    if ( v24 > 9 )\n    {\n      v20 = v23;\n      goto LABEL_29;\n    }\n  }\n  if ( v24 <= 9 )\n  {\n    v23 = v8[2];\n    v22 = 0x7FFFFFFF;\n    v8 += 2;\n    v19 = v23;\n    v24 = v23 - 48;\n    goto LABEL_41;\n  }\n  v20 = *++v8;\n  v22 = 0x7FFFFFFF;\nLABEL_29:\n  if ( v19 == 69 || v19 == 79 )\n    v19 = *++v8;\n  else\n    v20 = 0;\n  switch ( v19 )\n  {\n    case 0:\n      v95 = v8 - 1;\n      v106 = *(v8 - 1);\n      goto LABEL_263;\n    case 37:\n      LODWORD(v97) = 0;\n      v80 = 1LL;\n      v98 = v135 - v12;\n      if ( v22 >= 0 )\n        LODWORD(v97) = v22;\n      v97 = (int)v97;\n      if ( (_DWORD)v97 )\n        v80 = (int)v97;\n      if ( v20 )\n      {\n        v13 = v8;\n        v95 = v8;\n        v96 = 1LL;\n        goto LABEL_244;\n      }\n      if ( v80 < v98 )\n      {\n        if ( v7 )\n        {\n          if ( v22 > 1 )\n          {\n            v108 = v22 - 1LL;\n            v109 = v7;\n            v7 += v108;\n            if ( i == 48 )\n              memset(v109, 48, v108);\n            else\n              memset(v109, 32, v108);\n            v19 = *v8;\n          }\n          *v7++ = v19;\n        }\nLABEL_176:\n        v12 += v80;\n        v13 = v8;\n        goto LABEL_12;\n      }\n      return 0LL;\n    case 58:\n      v112 = v8[1];\n      v113 = (__int64)(v8 + 1);\n      for ( j = 1LL; v112 == 58; v113 = (__int64)&v8[j] )\n        v112 = v8[++j];\n      if ( v112 != 122 )\n        goto LABEL_238;\n      v8 = (char *)v113;\n      goto LABEL_254;\n    case 65:\n    case 66:\n    case 97:\n      if ( v20 )\n        goto LABEL_238;\n      if ( v16 )\n        v15 = v16;\n      goto LABEL_51;\n    case 67:\n      if ( v20 == 69 )\n        goto LABEL_336;\n      v145 = 0;\n      v49 = 2;\n      LOBYTE(v71) = tp[1].m128i_i32[1] < -1900;\n      v69 = tp[1].m128i_i32[1] / 100\n          + 19\n          - ((tp[1].m128i_i32[1] / 100 + 19 > 0) & ((unsigned int)(tp[1].m128i_i32[1] % 100) >> 31));\n      v70 = 0;\n      goto LABEL_122;\n    case 68:\n      if ( !v20 )\n        goto LABEL_94;\n      goto LABEL_238;\n    case 70:\n      if ( !v20 )\n        goto LABEL_94;\n      goto LABEL_238;\n    case 71:\n    case 86:\n    case 103:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v61 = tp[1].m128i_i32[3];\n      v62 = tp[1].m128i_i32[2];\n      v144 = tp[1].m128i_i32[1];\n      v63 = v144 + ((v144 >> 31) & 0x190) - 100;\n      v64 = v62 - 382 + 7 * ((v61 - v62 + 382) / 7) + 3;\n      if ( v64 < 0 )\n      {\n        v123 = v144 + ((v144 >> 31) & 0x190) - 101;\n        v124 = 365;\n        if ( !(((_BYTE)v144 + ((v144 >> 31) & 0x90) - 101) & 3) )\n        {\n          v124 = 366;\n          if ( v123 == 100 * (v123 / 100) )\n            v124 = 366 - ((unsigned int)(v123 % 400) >= 1);\n        }\n        v125 = v124 + v61;\n        v126 = v125 - v62;\n        v67 = -1;\n        v64 = v125 - (v126 + 382) + 7 * ((v126 + 382) / 7) + 3;\n      }\n      else\n      {\n        v65 = 365;\n        if ( !(v63 & 3) )\n        {\n          v65 = 366;\n          if ( v63 == 100 * (v63 / 100) )\n            v65 = (v63 == 400 * (v63 / 400)) + 365;\n        }\n        v66 = v62 - 382 + 7 * ((v61 - v65 - v62 + 382) / 7) + 3;\n        if ( v66 >= 0 )\n          v64 = v66;\n        v67 = (v66 >> 31) + 1;\n      }\n      if ( v19 == 71 )\n      {\n        v128 = tp[1].m128i_i32[1];\n        v145 = 0;\n        v49 = 4;\n        v130 = __OFSUB__(v128, -1900 - v67);\n        v129 = v128 - (-1900 - v67) < 0;\n        v69 = v128 + v67 + 1900;\n        LOBYTE(v71) = v129 ^ v130;\n        v70 = 0;\n        goto LABEL_122;\n      }\n      if ( v19 == 103 )\n      {\n        v49 = 2;\n        v68 = (v67 + v144 % 100) % 100;\n        v69 = v68;\n        if ( v68 < 0 )\n        {\n          v69 = v68 + 100;\n          if ( v144 < -1900 - v67 )\n            v69 = -v68;\n        }\n      }\n      else\n      {\n        v49 = 2;\n        v69 = v64 / 7 + 1;\n      }\n      goto LABEL_121;\n    case 72:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v49 = 2;\n      v69 = tp->m128i_i64[1];\n      goto LABEL_121;\n    case 73:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v69 = v139;\n      v49 = 2;\n      goto LABEL_121;\n    case 77:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v49 = 2;\n      v69 = HIDWORD(tp->m128i_i64[0]);\n      goto LABEL_121;\n    case 78:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      if ( v22 == -1 )\n      {\n        v69 = a7;\n        v22 = 9;\n        v49 = 9;\n      }\n      else\n      {\n        if ( v22 > 8 )\n        {\n          v69 = a7;\n        }\n        else\n        {\n          v69 = a7;\n          for ( k = v22; k != 9; ++k )\n            v69 = (int)v69 / 10;\n        }\n        v49 = v22;\n      }\n      goto LABEL_121;\n    case 80:\n      v28 = 1;\n      goto LABEL_152;\n    case 82:\n    case 84:\nLABEL_94:\n      v56 = sub_40CB00(0LL, a6, a7);\n      v57 = 0;\n      if ( v22 >= 0 )\n        v57 = v22;\n      v58 = v57;\n      if ( v56 >= v57 )\n        v58 = v56;\n      if ( v135 - v12 <= v58 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( v56 < v57 )\n        {\n          v174 = v56;\n          v59 = v22 - v56;\n          v60 = v7;\n          v7 += v59;\n          if ( i == 48 )\n            memset(v60, 48, v59);\n          else\n            memset(v60, 32, v59);\n          v56 = v174;\n        }\n        v167 = v56;\n        sub_40CB00(v7, a6, a7);\n        v7 += v167;\n      }\n      v12 += v58;\n      v13 = v8;\n      goto LABEL_12;\n    case 83:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v49 = 2;\n      v69 = tp->m128i_i64[0];\n      goto LABEL_121;\n    case 85:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v92 = tp[1].m128i_i32[3] - tp[1].m128i_i32[2] + 7;\n      v93 = (unsigned __int64)(-1840700269LL * v92) >> 32;\n      goto LABEL_228;\n    case 87:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v92 = 7 * ((tp[1].m128i_i32[2] + 6) / 7) - (tp[1].m128i_i32[2] + 6) + tp[1].m128i_i32[3] + 7;\n      v93 = (unsigned __int64)(-1840700269LL * v92) >> 32;\nLABEL_228:\n      v49 = 2;\n      v69 = ((v93 + v92) >> 2) - (v92 >> 31);\n      goto LABEL_121;\n    case 88:\n    case 99:\n    case 120:\n      if ( v20 != 79 )\n        goto LABEL_69;\n      goto LABEL_238;\n    case 89:\n      if ( v20 == 69 )\n        goto LABEL_336;\n      if ( v20 == 79 )\n        goto LABEL_238;\n      v145 = 0;\n      v49 = 4;\n      v91 = tp[1].m128i_i32[1];\n      LOBYTE(v71) = v91 < -1900;\n      v69 = v91 + 1900;\n      v70 = 0;\n      goto LABEL_222;\n    case 90:\n      v168 = v16;\n      if ( v16 )\n        v15 = 0;\n      v156 = v15;\n      v72 = strlen(v137);\n      v73 = 0;\n      if ( v22 >= 0 )\n        v73 = v22;\n      v74 = v73;\n      if ( v72 >= v73 )\n        v74 = v72;\n      if ( v135 - v12 <= v74 )\n        return 0LL;\n      if ( v7 )\n      {\n        v75 = v156;\n        v76 = v168;\n        if ( v72 < v73 )\n        {\n          v77 = v22 - v72;\n          v78 = v7;\n          v7 += v77;\n          if ( i == 48 )\n          {\n            memset(v78, 48, v77);\n            v75 = v156;\n            v76 = v168;\n          }\n          else\n          {\n            memset(v78, 32, v77);\n            v76 = v168;\n            v75 = v156;\n          }\n        }\n        if ( v76 )\n        {\n          sub_40CA60((__int64)v7, (__int64)v137, v72);\n        }\n        else if ( v75 )\n        {\n          sub_40CAB0((__int64)v7, (__int64)v137, v72);\n        }\n        else\n        {\n          memcpy(v7, v137, v72);\n        }\n        v7 += v72;\n      }\n      v12 += v74;\n      v13 = v8;\n      goto LABEL_12;\n    case 98:\n    case 104:\n      if ( v16 )\n        v15 = v16;\n      if ( v20 )\n        goto LABEL_238;\nLABEL_51:\n      v26 = &v186;\n      v27 = v8;\n      v28 = 0;\n      *(_WORD *)format = 9504;\n      v20 = 0;\n      goto LABEL_52;\n    case 100:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v49 = 2;\n      v69 = HIDWORD(tp->m128i_i64[1]);\n      goto LABEL_121;\n    case 101:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v69 = HIDWORD(tp->m128i_i64[1]);\n      goto LABEL_159;\n    case 106:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v145 = 0;\n      v49 = 3;\n      v107 = tp[1].m128i_i32[3];\n      LOBYTE(v71) = v107 < -1;\n      v69 = v107 + 1;\n      v70 = 0;\n      goto LABEL_122;\n    case 107:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v69 = tp->m128i_i64[1];\n      goto LABEL_159;\n    case 108:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v69 = v139;\nLABEL_159:\n      v49 = 2;\n      if ( i != 48 && i != 45 )\n        i = 95;\n      goto LABEL_121;\n    case 109:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v145 = 0;\n      v49 = 2;\n      v79 = tp[1].m128i_i32[0];\n      LOBYTE(v71) = v79 < -1;\n      v69 = v79 + 1;\n      v70 = 0;\n      goto LABEL_122;\n    case 110:\n      LODWORD(v80) = 0;\n      if ( v22 >= 0 )\n        LODWORD(v80) = v22;\n      v80 = (int)v80;\n      if ( !(_DWORD)v80 )\n        v80 = 1LL;\n      if ( v135 - v12 <= v80 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( v22 > 1 )\n        {\n          v81 = v22 - 1LL;\n          v82 = v7;\n          v7 += v81;\n          if ( i == 48 )\n            memset(v82, 48, v81);\n          else\n            memset(v82, 32, v81);\n        }\n        *v7++ = 10;\n      }\n      goto LABEL_176;\n    case 112:\n      v28 = 0;\nLABEL_152:\n      v19 = 112;\n      if ( v16 )\n        v28 = v16;\n      if ( v16 )\n        v15 = 0;\n      goto LABEL_70;\n    case 113:\n      v49 = 1;\n      if ( v20 == 79 )\n        goto LABEL_124;\n      v145 = 0;\n      LOBYTE(v71) = 0;\n      v70 = 0;\n      v69 = ((11 * tp[1].m128i_i32[0]) >> 5) + 1;\n      goto LABEL_179;\n    case 114:\nLABEL_69:\n      v28 = 0;\nLABEL_70:\n      *(_WORD *)format = 9504;\n      if ( !v20 )\n      {\n        v27 = v8;\n        v26 = &v186;\n        goto LABEL_52;\n      }\n      v49 = 0;\n      goto LABEL_125;\n    case 115:\n      v154 = v15;\n      v39 = (__int64)v188;\n      v40 = _mm_loadu_si128(tp + 2);\n      v41 = _mm_loadu_si128(tp + 1);\n      v42 = tp[3].m128i_i64[0];\n      *(__m128i *)sa = _mm_loadu_si128(tp);\n      v190 = v41;\n      v191 = v40;\n      v192 = v42;\n      v43 = sub_40C230((__int64 *)a6, (int *)sa);\n      v15 = v154;\n      v44 = v43;\n      v45 = v43;\n      do\n      {\n        v46 = v45 % 10;\n        v45 /= 10LL;\n        v47 = 48 - v46;\n        v48 = v46 + 48;\n        if ( v44 < 0 )\n          v48 = v47;\n        *(_BYTE *)--v39 = v48;\n      }\n      while ( v45 );\n      v49 = 1;\n      if ( v22 > 0 )\n        v49 = v22;\n      if ( v44 >= 0 )\n        goto LABEL_79;\n      goto LABEL_300;\n    case 116:\n      LODWORD(v80) = 0;\n      if ( v22 >= 0 )\n        LODWORD(v80) = v22;\n      v80 = (int)v80;\n      if ( !(_DWORD)v80 )\n        v80 = 1LL;\n      if ( v135 - v12 <= v80 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( v22 > 1 )\n        {\n          v89 = v22 - 1LL;\n          v90 = v7;\n          v7 += v89;\n          if ( i == 48 )\n            memset(v90, 48, v89);\n          else\n            memset(v90, 32, v89);\n        }\n        *v7++ = 9;\n      }\n      goto LABEL_176;\n    case 117:\n      v49 = 1;\n      v69 = (tp[1].m128i_i32[2] + 6) % 7 + 1;\n      goto LABEL_121;\n    case 119:\n      if ( v20 == 69 )\n        goto LABEL_238;\n      v49 = 1;\n      v69 = tp[1].m128i_u32[2];\n      goto LABEL_121;\n    case 121:\n      if ( v20 == 69 )\n      {\nLABEL_336:\n        v49 = 0;\n        goto LABEL_124;\n      }\n      v49 = 2;\n      v110 = tp[1].m128i_i32[1] % 100;\n      v69 = v110;\n      if ( v110 < 0 )\n      {\n        v111 = -v110;\n        v69 += 100;\n        if ( tp[1].m128i_i32[1] <= -1901 )\n          v69 = v111;\n      }\nLABEL_121:\n      v145 = 0;\n      v70 = 0;\n      v71 = v69 >> 31;\nLABEL_122:\n      if ( v20 == 79 )\n      {\n        if ( (_BYTE)v71 )\n          goto LABEL_223;\nLABEL_124:\n        v28 = 0;\n        *(_WORD *)format = 9504;\nLABEL_125:\n        v186 = v20;\n        v27 = v8;\n        v20 = v49;\n        v26 = &v187;\nLABEL_52:\n        *v26 = v19;\n        v26[1] = 0;\n        v140 = v27;\n        v164 = v20;\n        v151 = v15;\n        v29 = strftime(sa, 0x400uLL, format, (const struct tm *)tp);\n        v13 = v140;\n        if ( v29 )\n        {\n          v30 = v29 - 1;\n          v31 = 0;\n          if ( v22 >= 0 )\n            v31 = v22;\n          v32 = v31;\n          if ( v30 >= v31 )\n            v32 = v30;\n          if ( v135 - v12 > v32 )\n          {\n            if ( v7 )\n            {\n              v15 = v151;\n              if ( !v164 && v30 < v31 )\n              {\n                v165 = v30;\n                v33 = v22 - v30;\n                v152 = v140;\n                v141 = v15;\n                v34 = v7;\n                v7 += v33;\n                if ( i == 48 )\n                {\n                  memset(v34, 48, v33);\n                  v15 = v141;\n                  v13 = v152;\n                  v30 = v165;\n                }\n                else\n                {\n                  memset(v34, 32, v33);\n                  v30 = v165;\n                  v13 = v152;\n                  v15 = v141;\n                }\n              }\n              v153 = v13;\n              v35 = &sa[1];\n              v36 = v30;\n              v37 = v7;\n              v142 = v30;\n              if ( !v28 )\n                goto LABEL_64;\n              sub_40CA60((__int64)v7, (__int64)&sa[1], v30);\n              v38 = v142;\n              v13 = v153;\n              goto LABEL_66;\n            }\n            goto LABEL_67;\n          }\n          return 0LL;\n        }\n        goto LABEL_12;\n      }\nLABEL_222:\n      if ( (_BYTE)v71 )\nLABEL_223:\n        v69 = -v69;\nLABEL_179:\n      v83 = v188;\n      while ( 1 )\n      {\n        v39 = (__int64)(v83 - 1);\n        if ( v70 & 1 )\n        {\n          v84 = (__int64)(v83 - 2);\n          *--v83 = 58;\n          v39 = v84;\n        }\n        v70 >>= 1;\n        *(v83 - 1) = v69 % 0xA + 48;\n        v83 = (char *)v39;\n        if ( v69 <= 9 && !v70 )\n          break;\n        v69 /= 0xAu;\n      }\n      if ( v49 < v22 )\n        v49 = v22;\n      if ( (_BYTE)v71 )\n      {\nLABEL_300:\n        v146 = 45;\n        v114 = 45;\n        if ( i == 45 )\n          goto LABEL_301;\nLABEL_191:\n        v50 = &v188[-v39];\n        LODWORD(v52) = v49 - 1 - (unsigned __int64)&v188[-v39];\n        v51 = v135 - v12;\n        if ( (int)v52 <= 0 )\n        {\n          LODWORD(v53) = 0;\n          v116 = 1LL;\n          if ( v22 >= 0 )\n            LODWORD(v53) = v22;\n          v53 = (int)v53;\n          if ( (_DWORD)v53 )\n            v116 = (int)v53;\n          if ( v116 >= v51 )\n            return 0LL;\n          if ( v7 )\n          {\n            if ( !v49 && (unsigned __int64)(int)v53 > 1 )\n            {\n              v117 = v22 - 1LL;\n              v184 = v116;\n              v182 = (int)v53;\n              v162 = &v7[v117];\n              v171 = v15;\n              if ( i == 48 )\n              {\n                memset(v7, 48, v117);\n                v7 = v162;\n                v15 = v171;\n                v49 = 0;\n                v53 = v182;\n                v116 = v184;\n                v50 = &v188[-v39];\n              }\n              else\n              {\n                memset(v7, 32, v117);\n                v7 = v162;\n                v50 = &v188[-v39];\n                v116 = v184;\n                v53 = v182;\n                v49 = 0;\n                v15 = v171;\n              }\n            }\n            *(++v7 - 1) = v146;\n          }\n          v12 += v116;\n          v13 = v8;\n          v51 = v135 - v12;\n          goto LABEL_84;\n        }\n        if ( i != 95 )\n        {\n          if ( v49 >= v51 )\n            return 0LL;\n          v85 = 0;\n          v86 = 1LL;\n          if ( v22 >= 0 )\n            v85 = v22;\n          if ( v85 )\n            v86 = v85;\n          if ( v86 >= v51 )\n            return 0LL;\n          v12 += v86;\n          v52 = (int)v52;\n          v13 = v8;\n          if ( !v7 )\n            goto LABEL_207;\n          if ( !v49 && (unsigned __int64)v85 > 1 )\n          {\n            v179 = (int)v52;\n            v87 = v22 - 1LL;\n            v157 = v15;\n            v88 = v7;\n            v7 += v87;\n            if ( i == 48 )\n            {\n              memset(v88, 48, v87);\n              v15 = v157;\n              v49 = 0;\n              v50 = &v188[-v39];\n              v52 = v179;\n            }\n            else\n            {\n              memset(v88, 32, v87);\n              v52 = v179;\n              v50 = &v188[-v39];\n              v49 = 0;\n              v15 = v157;\n            }\n          }\n          ++v7;\n          v13 = v8;\n          *(v7 - 1) = v146;\nLABEL_205:\n          if ( v7 )\n          {\n            v180 = v50;\n            v175 = v49;\n            v169 = v13;\n            v158 = v15;\n            v147 = v52;\n            memset(v7, 48, v52);\n            v52 = v147;\n            v50 = v180;\n            v49 = v175;\n            v13 = v169;\n            v15 = v158;\n            v7 += v147;\n          }\nLABEL_207:\n          v12 += v52;\n          v22 = 0;\n          v53 = 0LL;\n          v51 = v135 - v12;\n          goto LABEL_84;\n        }\nLABEL_328:\n        v118 = (int)v52;\n        if ( (int)v52 >= v51 )\n          return 0LL;\n        if ( v7 )\n        {\n          v119 = v7;\n          v178 = v52;\n          v172 = v49;\n          v7 += (int)v52;\n          v163 = v15;\n          memset(v119, 32, (int)v52);\n          LODWORD(v52) = v178;\n          v49 = v172;\n          v15 = v163;\n        }\n        v12 += v118;\n        v120 = v22 - v52;\n        v21 = (int)v52 < v22;\n        v22 = 0;\n        if ( v21 )\n          v22 = v120;\n        v51 = v135 - v12;\n        if ( v146 )\n        {\n          v53 = v22;\n          v121 = 1LL;\n          if ( v22 )\n            v121 = v22;\n          if ( v121 >= v51 )\n            return 0LL;\n          if ( v7 )\n          {\n            if ( !v49 && (unsigned __int64)v22 > 1 )\n            {\n              v122 = v7;\n              v183 = v121;\n              v7 += v22 - 1;\n              v173 = v15;\n              memset(v122, 32, v22 - 1LL);\n              v121 = v183;\n              v49 = 0;\n              v15 = v173;\n              v53 = v22;\n            }\n            *(++v7 - 1) = v146;\n          }\n          v12 += v121;\n          v13 = v8;\n          i = 95;\n          v50 = &v188[-v39];\n          v51 = v135 - v12;\n        }\n        else\n        {\n          v53 = v22;\n          v13 = v8;\n          i = 95;\n          v50 = &v188[-v39];\n        }\n        goto LABEL_84;\n      }\n      if ( !v145 )\n      {\nLABEL_79:\n        v50 = &v188[-v39];\n        v51 = v135 - v12;\n        if ( i == 45 || (LODWORD(v52) = v49 - (_DWORD)v50, v49 - (int)v50 <= 0) )\n        {\n          LODWORD(v53) = 0;\n          v13 = v8;\n          if ( v22 >= 0 )\n            LODWORD(v53) = v22;\n          v53 = (int)v53;\n          goto LABEL_84;\n        }\n        if ( i != 95 )\n        {\n          if ( v49 >= v51 )\n            return 0LL;\n          v52 = (int)v52;\n          v13 = v8;\n          goto LABEL_205;\n        }\n        v146 = 0;\n        goto LABEL_328;\n      }\n      if ( i != 45 )\n      {\n        v146 = 43;\n        goto LABEL_191;\n      }\n      v114 = 43;\nLABEL_301:\n      LODWORD(v53) = 0;\n      v115 = 1LL;\n      if ( v22 >= 0 )\n        LODWORD(v53) = v22;\n      v53 = (int)v53;\n      if ( (_DWORD)v53 )\n        v115 = (int)v53;\n      if ( v135 - v12 <= v115 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( !v49 && (unsigned __int64)(int)v53 > 1 )\n        {\n          v181 = v114;\n          v177 = (int)v53;\n          v161 = v15;\n          memset(v7, 32, v22 - 1LL);\n          v114 = v181;\n          v53 = v177;\n          v49 = 0;\n          v15 = v161;\n          v7 += v22 - 1;\n        }\n        *v7++ = v114;\n      }\n      v12 += v115;\n      v13 = v8;\n      i = 45;\n      v50 = &v188[-v39];\n      v51 = v135 - v12;\nLABEL_84:\n      v32 = v53;\n      if ( (unsigned __int64)v50 >= v53 )\n        v32 = (unsigned __int64)v50;\n      if ( v32 < v51 )\n      {\n        if ( v7 )\n        {\n          if ( !v49 && (unsigned __int64)v50 < v53 )\n          {\n            v166 = v50;\n            v54 = v22 - (_QWORD)v50;\n            v155 = v13;\n            v143 = v15;\n            v55 = v7;\n            v7 += v54;\n            if ( i == 48 )\n            {\n              memset(v55, 48, v54);\n              v15 = v143;\n              v13 = v155;\n              v50 = v166;\n            }\n            else\n            {\n              memset(v55, 32, v54);\n              v50 = v166;\n              v13 = v155;\n              v15 = v143;\n            }\n          }\n          v153 = v13;\n          v36 = (size_t)v50;\n          v35 = (char *)v39;\n          v37 = v7;\n          v142 = (unsigned __int64)v50;\nLABEL_64:\n          if ( v15 )\n          {\n            sub_40CAB0((__int64)v37, (__int64)v35, v36);\n            v38 = v142;\n            v13 = v153;\n          }\n          else\n          {\n            memcpy(v37, v35, v36);\n            v13 = v153;\n            v38 = v142;\n          }\nLABEL_66:\n          v7 += v38;\n        }\nLABEL_67:\n        v12 += v32;\n        goto LABEL_12;\n      }\n      return 0LL;\n    case 122:\n      j = 0LL;\nLABEL_254:\n      if ( tp[2].m128i_i32[0] < 0 )\n      {\n        v13 = v8;\n        goto LABEL_12;\n      }\n      v103 = tp[2].m128i_i64[1];\n      LOBYTE(v71) = 1;\n      if ( (int)v103 >= 0 )\n      {\n        LOBYTE(v71) = 0;\n        if ( !(_DWORD)v103 )\n          LOBYTE(v71) = *v137 == 45;\n      }\n      v150 = (int)v103 / 3600;\n      v104 = (int)v103 / 60 % 60;\n      v70 = (int)v103 / 60 % 60;\n      v105 = (int)v103 % 60;\n      if ( j == 1 )\n        goto LABEL_364;\n      if ( j )\n      {\n        if ( j == 2 )\n          goto LABEL_383;\n        if ( j != 3 )\n        {\n          v106 = *v8;\n          v95 = v8;\nLABEL_263:\n          LODWORD(v97) = 0;\n          v98 = v135 - v12;\n          if ( v22 >= 0 )\n            LODWORD(v97) = v22;\n          v97 = (int)v97;\n          if ( v106 == 37 )\n          {\n            v80 = 1LL;\n            v13 = v95;\n            v96 = 1LL;\n            if ( (_DWORD)v97 )\n              v80 = (int)v97;\n          }\n          else\n          {\n            v8 = v95;\nLABEL_238:\n            v94 = (__int64)(v8 - 1);\n            do\n            {\n              v95 = (char *)v94;\n              LODWORD(v96) = (_DWORD)v8 - 1 + 2 - v94--;\n            }\n            while ( *(_BYTE *)(v94 + 1) != 37 );\n            LODWORD(v97) = 0;\n            v96 = (int)v96;\n            v13 = v8;\n            v98 = v135 - v12;\n            if ( v22 >= 0 )\n              LODWORD(v97) = v22;\n            v97 = (int)v97;\n            v80 = (int)v97;\n            if ( (int)v96 >= (unsigned __int64)(int)v97 )\n              v80 = (int)v96;\n          }\nLABEL_244:\n          if ( v98 > v80 )\n          {\n            if ( v7 )\n            {\n              if ( v96 < v97 )\n              {\n                v176 = v96;\n                v99 = v22 - v96;\n                v170 = v13;\n                v159 = v95;\n                v148 = v15;\n                v100 = v7;\n                v7 += v99;\n                if ( i == 48 )\n                {\n                  memset(v100, 48, v99);\n                  v15 = v148;\n                  v95 = v159;\n                  v13 = v170;\n                  v96 = v176;\n                }\n                else\n                {\n                  memset(v100, 32, v99);\n                  v96 = v176;\n                  v13 = v170;\n                  v95 = v159;\n                  v15 = v148;\n                }\n              }\n              v160 = v13;\n              v149 = v96;\n              if ( v15 )\n              {\n                sub_40CAB0((__int64)v7, (__int64)v95, v96);\n                v101 = v149;\n                v13 = v160;\n              }\n              else\n              {\n                memcpy(v7, v95, v96);\n                v13 = v160;\n                v101 = v149;\n              }\n              v7 += v101;\n            }\n            v12 += v80;\n            goto LABEL_12;\n          }\n          return 0LL;\n        }\n        if ( v105 )\n        {\nLABEL_383:\n          v131 = 10000 * v150;\n          v49 = 9;\n          v145 = 1;\n          v132 = 100 * v70 + v131;\n          v70 = 20;\n          v69 = v132 + v105;\n        }\n        else if ( v104 )\n        {\nLABEL_364:\n          v133 = 100 * v150;\n          v49 = 6;\n          v145 = 1;\n          v69 = v70 + v133;\n          v70 = 4;\n        }\n        else\n        {\n          v69 = v150;\n          v49 = 3;\n          v145 = 1;\n        }\n      }\n      else\n      {\n        v134 = 100 * v150;\n        v70 = 0;\n        v145 = 1;\n        v49 = 5;\n        v69 = v104 + v134;\n      }\n      goto LABEL_122;\n    default:\n      goto LABEL_238;\n  }\n}\n", 
            "funcStartAddr": "0x40cb00L", 
            "funcEndAddr": "0x40e2c5L", 
            "funcName": "sub_40CB00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E2D0(void *a1, __int64 a2, char *a3, const __m128i *a4, __int64 a5, int a6)\n{\n  return sub_40CB00(a1, a3, a4, a2, 0, a5, a6);\n}\n", 
            "funcStartAddr": "0x40e2d0L", 
            "funcEndAddr": "0x40e2efL", 
            "funcName": "sub_40E2D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40E2F0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_40E370(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40e2f0L", 
            "funcEndAddr": "0x40e36bL", 
            "funcName": "sub_40E2F0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40E370(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_40E3B0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x40e370L", 
            "funcEndAddr": "0x40e3b0L", 
            "funcName": "sub_40E370"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40E3B0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x40e3b0L", 
            "funcEndAddr": "0x40e407L", 
            "funcName": "sub_40E3B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40E410(_DWORD *a1)\n{\n  *a1 |= 0x20u;\n}\n", 
            "funcStartAddr": "0x40e410L", 
            "funcEndAddr": "0x40e414L", 
            "funcName": "sub_40E410"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40E420(void *a1, size_t *a2, char *a3, __int64 a4)\n{\n  char *v4; // r15\n  __int64 v5; // rbx\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  _BYTE *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  char *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  char *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  _BYTE *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  char *result; // rax\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // er11\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  int *v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  __int64 v79; // r9\n  int v80; // ebx\n  char *v81; // rdi\n  unsigned __int64 v82; // rax\n  void *v83; // rax\n  char *v84; // rax\n  char *v85; // rcx\n  int v86; // er8\n  __int16 v87; // ax\n  unsigned __int64 v88; // r15\n  char *v89; // rax\n  char *v90; // rax\n  char *v91; // rax\n  char v92; // al\n  unsigned __int64 v93; // r9\n  size_t v94; // r8\n  unsigned __int64 v95; // r10\n  unsigned __int64 v96; // rdi\n  __int64 v97; // rax\n  unsigned __int64 v98; // r10\n  unsigned __int64 v99; // rax\n  char *v100; // rax\n  __int64 v101; // rsi\n  char v102; // al\n  size_t v103; // r15\n  size_t v104; // r14\n  bool v105; // r13\n  char *v106; // rax\n  char *v107; // rax\n  __int64 v108; // rax\n  unsigned __int64 v109; // r10\n  char *v110; // rax\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rsi\n  __int64 v114; // rdx\n  char v115; // al\n  __int64 v116; // rdx\n  unsigned __int64 v117; // rax\n  char *v118; // rax\n  __int64 v119; // rdx\n  char v120; // al\n  unsigned __int64 v121; // rax\n  __int64 v122; // rsi\n  __int64 v123; // r9\n  __int64 v124; // rdx\n  __int64 v125; // rax\n  char *v126; // rsi\n  char *v127; // rdi\n  __int64 v128; // rax\n  __int64 v129; // rsi\n  unsigned __int64 v130; // rax\n  char v131; // al\n  __int64 v132; // rsi\n  char v133; // al\n  char *v134; // rax\n  __int64 v135; // rdx\n  char v136; // al\n  __int64 v137; // rax\n  char *v138; // rax\n  char *v139; // rax\n  void *v140; // rdx\n  char v141; // al\n  char *v142; // rax\n  char *v143; // rax\n  char v144; // al\n  __int16 v145; // [rsp+24h] [rbp-6ECh]\n  __int16 v146; // [rsp+24h] [rbp-6ECh]\n  unsigned __int64 v147; // [rsp+28h] [rbp-6E8h]\n  char *v148; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v150; // [rsp+40h] [rbp-6D0h]\n  void *v151; // [rsp+48h] [rbp-6C8h]\n  char *v152; // [rsp+50h] [rbp-6C0h]\n  __int64 v153; // [rsp+58h] [rbp-6B8h]\n  char *v154; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v155; // [rsp+68h] [rbp-6A8h]\n  long double v156; // [rsp+70h] [rbp-6A0h]\n  void *v157; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v159; // [rsp+94h] [rbp-67Ch]\n  unsigned int v160; // [rsp+98h] [rbp-678h]\n  char v161; // [rsp+A0h] [rbp-670h]\n  void *v162; // [rsp+A8h] [rbp-668h]\n  __int64 v163; // [rsp+B0h] [rbp-660h]\n  __int64 v164; // [rsp+190h] [rbp-580h]\n  void *v165; // [rsp+198h] [rbp-578h]\n  __int64 v166; // [rsp+1A0h] [rbp-570h]\n  __int64 v167; // [rsp+1A8h] [rbp-568h]\n  __int64 v168; // [rsp+1B0h] [rbp-560h]\n  char v169; // [rsp+420h] [rbp-2F0h]\n\n  v4 = a3;\n  v5 = a4;\n  src = a1;\n  v150 = a2;\n  if ( (int)sub_410160(a3, &v164, &v161) < 0 )\n    return 0LL;\n  if ( (int)sub_40FF40(v5, &v161) >= 0 )\n  {\n    v6 = v166 + 7;\n    if ( (unsigned __int64)(v166 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v167, v6);\n    v7 = v167 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v155 = (_BYTE *)(((unsigned __int64)&v147 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = malloc(v8);\n      v155 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v150;\n    v11 = (char *)v165;\n    v12 = v4;\n    v13 = (char *)src;\n    v153 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v165;\n    if ( *(char **)v165 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (char *)(v15 - v12);\n    v17 = (unsigned __int64)&v16[v14];\n    v18 = (size_t)&v16[v14];\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v154 = v12;\n          LOBYTE(v156) = v19;\n          v157 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = (char *)v157;\n          v12 = v154;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v156) )\n          {\n            *(_QWORD *)&v156 = v154;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = (char *)v157;\n            v12 = *(char **)&v156;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v156 = v12;\n          v157 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = (char *)v157;\n          v12 = *(char **)&v156;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)&v16[v14];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v164 != v153 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_198;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_234;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_234:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v156 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v157) = v13 == src;\n          v91 = (char *)malloc(v10);\n          if ( !v91 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v157 )\n            v13 = (char *)memcpy(v91, v13, v18);\n          else\n            v13 = v91;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_198;\n      v26 = (char *)v162;\n      v27 = (long double *)((char *)v162 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v157) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v157 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v157 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v122 = (__int64)(v65 + 1);\n                  v123 = -1LL;\n                  v124 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v123 = 10 * v49;\n                  v75 = __CFADD__(v123, v124);\n                  v49 = v123 + v124;\n                  v65 = (char *)v122;\n                  if ( v75 )\n                  {\n                    if ( v66 == (char *)v122 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v157;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v65 - 1) != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v162 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_198;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v125 = (__int64)(v50 + 1);\n                v54 = 0LL;\n                if ( v51 != (char *)v125 )\n                {\n                  v126 = (char *)v125;\n                  while ( 1 )\n                  {\n                    v127 = v126 + 1;\n                    v128 = *v126 - 48;\n                    v129 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v129 = 10 * v54;\n                    v75 = __CFADD__(v129, v128);\n                    v130 = v129 + v128;\n                    v126 = v127;\n                    v54 = v130;\n                    if ( v75 )\n                    {\n                      if ( v51 == v127 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v126 = v127 + 1;\n                        if ( *v127 == 48 )\n                          break;\n                        if ( v51 == v126 )\n                          goto LABEL_88;\n                        ++v127;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v126 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_370;\n              }\n              v53 = (char *)v162 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_198;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_188:\n                  v82 = v55;\n                  if ( v49 >= v55 )\n                    v82 = v49;\n                  v75 = __CFADD__(v82, 1LL);\n                  v83 = (void *)(v82 + 1);\n                  v157 = v83;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v83 <= 0x2BC )\n                  {\n                    v85 = &v169;\n                  }\n                  else\n                  {\n                    v151 = (void *)v49;\n                    v152 = (char *)v54;\n                    LODWORD(v154) = v67;\n                    v156 = _FST7;\n                    if ( v83 == (void *)-1LL )\n                      goto LABEL_88;\n                    v84 = (char *)malloc((size_t)v83);\n                    v67 = (int)v154;\n                    _FST7 = v156;\n                    v85 = v84;\n                    v54 = (unsigned __int64)v152;\n                    v49 = (unsigned __int64)v151;\n                    if ( !v84 )\n                      goto LABEL_88;\n                  }\n                  v86 = (unsigned __int16)v160;\n                  LOBYTE(v87) = v160;\n                  HIBYTE(v87) = BYTE1(v160) | 3;\n                  LOWORD(v160) = v87;\n                  __asm { fxam }\n                  if ( v61 & 2 )\n                  {\n                    *v85 = 45;\n                    _FST7 = -_FST7;\n                    v88 = (unsigned __int64)(v85 + 1);\n                  }\n                  else if ( v67 & 4 )\n                  {\n                    v88 = (unsigned __int64)(v85 + 1);\n                    *v85 = 43;\n                  }\n                  else\n                  {\n                    v88 = (unsigned __int64)v85;\n                    if ( v67 & 8 )\n                    {\n                      v88 = (unsigned __int64)(v85 + 1);\n                      *v85 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_198;\n                    v93 = v88 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v88 + 2) = 102;\n                      *(_WORD *)v88 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v88 + 2) = 70;\n                      *(_WORD *)v88 = 20041;\n                    }\n                    v88 = 0LL;\n                    goto LABEL_258;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_198;\n                  v92 = v11[72] & 0xDF;\n                  switch ( v92 )\n                  {\n                    case 70:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || v54 )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v118 = nl_langinfo(0x10000);\n                        v119 = (__int64)v152;\n                        v93 = *(_QWORD *)&v156;\n                        v120 = *v118;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v120 )\n                          v120 = 46;\n                        *(_BYTE *)(v88 + 1) = v120;\n                        if ( v119 )\n                        {\n                          v121 = v93;\n                          do\n                            *(_BYTE *)(++v121 - 1) = 48;\n                          while ( v121 != v88 + v119 + 2 );\n                          v93 += v119;\n                        }\n                        goto LABEL_258;\n                      }\n                      goto LABEL_257;\n                    case 69:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || (v101 = v88 + 1, v54) )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v134 = nl_langinfo(0x10000);\n                        v135 = (__int64)v152;\n                        v101 = *(_QWORD *)&v156;\n                        v136 = *v134;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v136 )\n                          v136 = 46;\n                        *(_BYTE *)(v88 + 1) = v136;\n                        if ( v135 )\n                        {\n                          v137 = v101;\n                          do\n                            *(_BYTE *)(++v137 - 1) = 48;\n                          while ( v137 != v88 + v135 + 2 );\n                          v101 += v135;\n                        }\n                      }\n                      v102 = v11[72];\n                      v93 = v101 + 4;\n                      *(_BYTE *)(v101 + 3) = 48;\n                      *(_BYTE *)v101 = v102;\n                      *(_WORD *)(v101 + 1) = 12331;\n                      goto LABEL_258;\n                    case 71:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 )\n                      {\n                        if ( v54 )\n                        {\n                          v145 = v86;\n                          v147 = v49;\n                          v148 = (char *)(v88 + 2);\n                          v151 = v85;\n                          LODWORD(v152) = v67;\n                          v154 = (char *)v54;\n                          *(_QWORD *)&v156 = v54 - 1;\n                          v112 = nl_langinfo(0x10000);\n                          v113 = *(_QWORD *)&v156;\n                          v114 = (__int64)v154;\n                          v115 = *v112;\n                          LOBYTE(v67) = (_BYTE)v152;\n                          v85 = (char *)v151;\n                          v93 = (unsigned __int64)v148;\n                          v49 = v147;\n                          LOWORD(v86) = v145;\n                          if ( !v115 )\n                            v115 = 46;\n                          *(_BYTE *)(v88 + 1) = v115;\n                          if ( v113 )\n                          {\n                            v116 = v88 + v114 + 1;\n                            v117 = v93;\n                            do\n                              *(_BYTE *)(++v117 - 1) = 48;\n                            while ( v117 != v116 );\n                            v93 += v113;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v148) = v86;\n                          v151 = (void *)v49;\n                          v152 = (char *)(v88 + 2);\n                          v154 = v85;\n                          LODWORD(v156) = v67;\n                          v143 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v156);\n                          v85 = v154;\n                          v144 = *v143;\n                          v93 = (unsigned __int64)v152;\n                          v49 = (unsigned __int64)v151;\n                          LOWORD(v86) = (_WORD)v148;\n                          if ( !v144 )\n                            v144 = 46;\n                          *(_BYTE *)(v88 + 1) = v144;\n                        }\n                        goto LABEL_258;\n                      }\nLABEL_257:\n                      v93 = v88 + 1;\n                      goto LABEL_258;\n                  }\n                  if ( v92 != 65 )\n                    goto LABEL_198;\n                  *(_BYTE *)v88 = 48;\n                  *(_QWORD *)&v156 = v88 + 2;\n                  v131 = v11[72];\n                  *(_BYTE *)(v88 + 2) = 48;\n                  *(_BYTE *)(v88 + 1) = v131 + 23;\n                  if ( v67 & 0x10 || (v132 = v88 + 3, v54) )\n                  {\n                    v146 = v86;\n                    v147 = v49;\n                    v148 = v85;\n                    v151 = (void *)v54;\n                    LODWORD(v152) = v67;\n                    v154 = (char *)(v88 + 4);\n                    v139 = nl_langinfo(0x10000);\n                    v140 = v151;\n                    v132 = (__int64)v154;\n                    v141 = *v139;\n                    LOBYTE(v67) = (_BYTE)v152;\n                    v85 = v148;\n                    v49 = v147;\n                    LOWORD(v86) = v146;\n                    if ( !v141 )\n                      v141 = 46;\n                    *(_BYTE *)(v88 + 3) = v141;\n                    if ( v140 )\n                    {\n                      v142 = (char *)v132;\n                      do\n                        *(++v142 - 1) = 48;\n                      while ( v142 != (char *)v140 + v88 + 4 );\n                      v132 += (__int64)v140;\n                    }\n                  }\n                  v133 = v11[72];\n                  v93 = v132 + 3;\n                  *(_WORD *)(v132 + 1) = 12331;\n                  v88 = *(_QWORD *)&v156;\n                  *(_BYTE *)v132 = v133 + 15;\nLABEL_258:\n                  LOWORD(v160) = v86;\n                  v94 = v93 - (_QWORD)v85;\n                  if ( v49 > v93 - (unsigned __int64)v85 )\n                  {\n                    v95 = v49 - v94;\n                    v96 = v93 + v95;\n                    v94 = v93 + v95 - (_QWORD)v85;\n                    if ( v67 & 2 )\n                    {\n                      if ( v95 )\n                      {\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v96 != v93 );\n                      }\n                    }\n                    else if ( v67 & 0x20 && v88 )\n                    {\n                      if ( v88 >= v93 )\n                      {\n                        v88 = v93;\n                      }\n                      else\n                      {\n                        v97 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v96 + v97) = *(_BYTE *)(v93 + v97);\n                          --v97;\n                        }\n                        while ( v97 != v88 - 1 - v93 );\n                      }\n                      if ( v95 )\n                      {\n                        v98 = v88 + v95;\n                        do\n                          *(_BYTE *)(++v88 - 1) = 48;\n                        while ( v88 != v98 );\n                      }\n                    }\n                    else\n                    {\n                      v108 = -1LL;\n                      if ( (unsigned __int64)v85 < v93 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v96 + v108) = *(_BYTE *)(v93 + v108);\n                          --v108;\n                        }\n                        while ( &v85[-v93 - 1] != (char *)v108 );\n                        v93 = (unsigned __int64)v85;\n                      }\n                      if ( v95 )\n                      {\n                        v109 = v93 + v95;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v93 != v109 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v157 <= v94 )\n                    goto LABEL_198;\n                  v99 = v94 + v18;\n                  v14 = v94 + v18;\n                  if ( v10 - v18 <= v94 )\n                  {\n                    if ( __CFADD__(v94, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v99 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v99 )\n                          goto LABEL_368;\n                      }\n                      else\n                      {\n                        if ( v99 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_275;\n                        }\nLABEL_368:\n                        if ( v99 == -1LL )\n                          goto LABEL_88;\n                        v10 = v94 + v18;\n                      }\nLABEL_275:\n                      if ( v13 && v13 != src )\n                      {\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v100 = (char *)realloc(v13, v10);\n                        if ( !v100 )\n                          goto LABEL_88;\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        v13 = v100;\n                      }\n                      else\n                      {\n                        LOBYTE(v154) = v13 == src;\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v110 = (char *)malloc(v10);\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        if ( !v110 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v154 )\n                        {\n                          v111 = (char *)memcpy(v110, v13, v18);\n                          v85 = (char *)v157;\n                          v94 = *(_QWORD *)&v156;\n                          v13 = v111;\n                        }\n                        else\n                        {\n                          v13 = v110;\n                        }\n                      }\n                    }\n                  }\n                  v157 = v85;\n                  memcpy(&v13[v18], v85, v94);\n                  if ( v157 != &v169 )\n                    free(v157);\n                  goto LABEL_110;\n                }\nLABEL_370:\n                v55 = 12LL;\n                goto LABEL_188;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_188;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v155 + 1;\n        *v155 = 37;\n        if ( v30 & 1 )\n        {\n          v32 = v155;\n          v155[1] = 39;\n          v31 = v32 + 2;\n        }\n        if ( v30 & 2 )\n          *v31++ = 45;\n        if ( v30 & 4 )\n          *v31++ = 43;\n        if ( v30 & 8 )\n          *v31++ = 32;\n        if ( v30 & 0x10 )\n          *v31++ = 35;\n        if ( v30 & 0x40 )\n          *v31++ = 73;\n        if ( v30 & 0x20 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        if ( (unsigned int)v157 <= 0x10 )\n        {\n          v37 = 1LL << (char)v157;\n          if ( (1LL << (char)v157) & 0x14180 )\n            goto LABEL_125;\n          if ( v37 & 0x1000 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( !(v37 & 0x600) )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v154) = 1;\n            v160 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_198:\n          abort();\n        }\n        LODWORD(v154) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_198;\n          v43 = (int)v154;\n          *(&v160 + (unsigned int)v154) = *((_DWORD *)v42 + 4);\n          LODWORD(v154) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v156 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v165 != &v168 )\n                    free(v165);\n                  if ( v162 != &v163 )\n                    free(v162);\n                  v13 = 0LL;\n                  **(_DWORD **)&v156 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v156 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v156) = v13 == src;\n            v90 = (char *)malloc(v10);\n            v45 = v90;\n            if ( !v90 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v156) )\n              v45 = (char *)memcpy(v90, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v152 = v45;\n            v46 = __errno_location();\n            v47 = v152;\n            v152 = v31;\n            *(_QWORD *)&v156 = v46;\n            LODWORD(v148) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v159 = -1;\n              **(_DWORD **)&v156 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (_DWORD)v157 )\n              {\n                case 1:\n                  v79 = (unsigned int)*((char *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 2:\n                  v79 = *((unsigned __int8 *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 3:\n                  v79 = (unsigned int)*((__int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 4:\n                  v79 = *((unsigned __int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v79 = *((unsigned int *)v162 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_149:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_208;\n                  if ( (_DWORD)v154 != 2 )\n                    goto LABEL_151;\n                  goto LABEL_207;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v70 = &v47[v18];\n                  v71 = (int *)*((_QWORD *)v162 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                  {\nLABEL_208:\n                    v79 = v160;\nLABEL_151:\n                    v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v79);\n                    v73 = v159;\n                    v47 = (char *)v151;\n                    if ( v159 >= 0 )\n                      goto LABEL_132;\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v154 == 2 )\n                    {\nLABEL_207:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                      v47 = (char *)v151;\n                    }\n                    else\n                    {\nLABEL_130:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v71);\n                      v47 = (char *)v151;\n                    }\nLABEL_131:\n                    v73 = v159;\n                    if ( v159 >= 0 )\n                    {\nLABEL_132:\n                      if ( v73 < v48 && v47[v73 + v18] )\n                        goto LABEL_198;\n                      if ( v73 >= v72 )\n                        goto LABEL_136;\n                      goto LABEL_135;\n                    }\n                  }\n                  if ( v152[1] )\n                  {\n                    v152[1] = 0;\n                    continue;\n                  }\n                  if ( v72 < 0 )\n                  {\n                    v80 = **(_DWORD **)&v156;\n                    if ( !**(_DWORD **)&v156 )\n                    {\n                      v80 = 84;\n                      if ( (v11[72] & 0xEF) != 99 )\n                        v80 = 22;\n                    }\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    **(_DWORD **)&v156 = v80;\n                    return 0LL;\n                  }\nLABEL_135:\n                  v159 = v72;\n                  v73 = v72;\nLABEL_136:\n                  if ( (unsigned int)(v73 + 1) < v48 )\n                  {\n                    v13 = v47;\n                    v14 = v18 + v73;\n                    **(_DWORD **)&v156 = (_DWORD)v148;\n                    goto LABEL_110;\n                  }\n                  if ( v10 - v18 > 0x7FFFFFFE )\n                  {\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    v13 = 0LL;\n                    **(_DWORD **)&v156 = 75;\n                    return v13;\n                  }\n                  v74 = (unsigned int)(v73 + 2);\n                  v75 = __CFADD__(v18, v74);\n                  v76 = v18 + v74;\n                  if ( (v10 & 0x8000000000000000LL) != 0LL )\n                  {\n                    if ( v10 != -1LL )\n                      goto LABEL_200;\n                  }\n                  else\n                  {\n                    if ( v75 )\n                      goto LABEL_200;\n                    if ( 2 * v10 >= v76 )\n                      v76 = 2 * v10;\n                    if ( v10 < v76 )\n                    {\n                      v10 *= 2LL;\n                      if ( v10 < v76 )\n                      {\n                        if ( v76 == -1LL )\n                        {\nLABEL_200:\n                          v56 = v47;\n                          goto LABEL_89;\n                        }\n                        v10 = v76;\n                      }\n                      v77 = v47 == src;\n                      if ( !v47 || v77 )\n                      {\n                        v151 = v47;\n                        v89 = (char *)malloc(v10);\n                        v47 = (char *)v151;\n                        if ( !v89 )\n                          goto LABEL_200;\n                        if ( v18 && v77 )\n                          v47 = (char *)memcpy(v89, v151, v18);\n                        else\n                          v47 = v89;\n                      }\n                      else\n                      {\n                        v151 = v47;\n                        v78 = (char *)realloc(v47, v10);\n                        v47 = (char *)v151;\n                        if ( !v78 )\n                          goto LABEL_200;\n                        v47 = v78;\n                      }\n                    }\n                  }\n                  continue;\n                case 0xB:\n                  v81 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 || (_DWORD)v154 == 2 )\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, v160);\n                    v47 = (char *)v151;\n                  }\n                  else\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, &v159);\n                    v47 = (char *)v151;\n                  }\n                  goto LABEL_131;\n                case 0xC:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_207;\n                  if ( (_DWORD)v154 != 2 )\n                  {\n                    v71 = &v159;\n                    goto LABEL_130;\n                  }\n                  v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                  v47 = (char *)v151;\n                  goto LABEL_131;\n                default:\n                  goto LABEL_403;\n              }\n            }\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_403:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v12 = (char *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v153;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v103 = v18;\n    v104 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v104 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v104 )\n        {\nLABEL_298:\n          v105 = v13 == src;\n          if ( !v13 || v105 )\n          {\n            v138 = (char *)malloc(v10);\n            if ( !v138 )\n              goto LABEL_88;\n            if ( v103 && v105 )\n              v13 = (char *)memcpy(v138, v13, v103);\n            else\n              v13 = v138;\n          }\n          else\n          {\n            v106 = (char *)realloc(v13, v10);\n            if ( !v106 )\n              goto LABEL_126;\n            v13 = v106;\n          }\n          goto LABEL_302;\n        }\n      }\n      else if ( v104 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_298;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_298;\n    }\nLABEL_302:\n    v13[v103] = 0;\n    if ( v10 > v104 && v13 != src )\n    {\n      v107 = (char *)realloc(v13, v104);\n      if ( v107 )\n        v13 = v107;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v165 != &v168 )\n      free(v165);\n    if ( v162 != &v163 )\n      free(v162);\n    *v150 = v103;\n    return v13;\n  }\n  if ( v165 != &v168 )\n    free(v165);\n  if ( v162 != &v163 )\n    free(v162);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n\nchar *__fastcall sub_40E420(void *a1, size_t *a2, char *a3, __int64 a4)\n{\n  char *v4; // r15\n  __int64 v5; // rbx\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  _BYTE *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  char *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  char *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  _BYTE *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  char *result; // rax\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // er11\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  int *v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  __int64 v79; // r9\n  int v80; // ebx\n  char *v81; // rdi\n  unsigned __int64 v82; // rax\n  void *v83; // rax\n  char *v84; // rax\n  char *v85; // rcx\n  int v86; // er8\n  __int16 v87; // ax\n  unsigned __int64 v88; // r15\n  char *v89; // rax\n  char *v90; // rax\n  char *v91; // rax\n  char v92; // al\n  unsigned __int64 v93; // r9\n  size_t v94; // r8\n  unsigned __int64 v95; // r10\n  unsigned __int64 v96; // rdi\n  __int64 v97; // rax\n  unsigned __int64 v98; // r10\n  unsigned __int64 v99; // rax\n  char *v100; // rax\n  __int64 v101; // rsi\n  char v102; // al\n  size_t v103; // r15\n  size_t v104; // r14\n  bool v105; // r13\n  char *v106; // rax\n  char *v107; // rax\n  __int64 v108; // rax\n  unsigned __int64 v109; // r10\n  char *v110; // rax\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rsi\n  __int64 v114; // rdx\n  char v115; // al\n  __int64 v116; // rdx\n  unsigned __int64 v117; // rax\n  char *v118; // rax\n  __int64 v119; // rdx\n  char v120; // al\n  unsigned __int64 v121; // rax\n  __int64 v122; // rsi\n  __int64 v123; // r9\n  __int64 v124; // rdx\n  __int64 v125; // rax\n  char *v126; // rsi\n  char *v127; // rdi\n  __int64 v128; // rax\n  __int64 v129; // rsi\n  unsigned __int64 v130; // rax\n  char v131; // al\n  __int64 v132; // rsi\n  char v133; // al\n  char *v134; // rax\n  __int64 v135; // rdx\n  char v136; // al\n  __int64 v137; // rax\n  char *v138; // rax\n  char *v139; // rax\n  void *v140; // rdx\n  char v141; // al\n  char *v142; // rax\n  char *v143; // rax\n  char v144; // al\n  __int16 v145; // [rsp+24h] [rbp-6ECh]\n  __int16 v146; // [rsp+24h] [rbp-6ECh]\n  unsigned __int64 v147; // [rsp+28h] [rbp-6E8h]\n  char *v148; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v150; // [rsp+40h] [rbp-6D0h]\n  void *v151; // [rsp+48h] [rbp-6C8h]\n  char *v152; // [rsp+50h] [rbp-6C0h]\n  __int64 v153; // [rsp+58h] [rbp-6B8h]\n  char *v154; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v155; // [rsp+68h] [rbp-6A8h]\n  long double v156; // [rsp+70h] [rbp-6A0h]\n  void *v157; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v159; // [rsp+94h] [rbp-67Ch]\n  unsigned int v160; // [rsp+98h] [rbp-678h]\n  char v161; // [rsp+A0h] [rbp-670h]\n  void *v162; // [rsp+A8h] [rbp-668h]\n  __int64 v163; // [rsp+B0h] [rbp-660h]\n  __int64 v164; // [rsp+190h] [rbp-580h]\n  void *v165; // [rsp+198h] [rbp-578h]\n  __int64 v166; // [rsp+1A0h] [rbp-570h]\n  __int64 v167; // [rsp+1A8h] [rbp-568h]\n  __int64 v168; // [rsp+1B0h] [rbp-560h]\n  char v169; // [rsp+420h] [rbp-2F0h]\n\n  v4 = a3;\n  v5 = a4;\n  src = a1;\n  v150 = a2;\n  if ( (int)sub_410160(a3, &v164, &v161) < 0 )\n    return 0LL;\n  if ( (int)sub_40FF40(v5, &v161) >= 0 )\n  {\n    v6 = v166 + 7;\n    if ( (unsigned __int64)(v166 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v167, v6);\n    v7 = v167 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v155 = (_BYTE *)(((unsigned __int64)&v147 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = malloc(v8);\n      v155 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v150;\n    v11 = (char *)v165;\n    v12 = v4;\n    v13 = (char *)src;\n    v153 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v165;\n    if ( *(char **)v165 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (char *)(v15 - v12);\n    v17 = (unsigned __int64)&v16[v14];\n    v18 = (size_t)&v16[v14];\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v154 = v12;\n          LOBYTE(v156) = v19;\n          v157 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = (char *)v157;\n          v12 = v154;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v156) )\n          {\n            *(_QWORD *)&v156 = v154;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = (char *)v157;\n            v12 = *(char **)&v156;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v156 = v12;\n          v157 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = (char *)v157;\n          v12 = *(char **)&v156;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)&v16[v14];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v164 != v153 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_198;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_234;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_234:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v156 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v157) = v13 == src;\n          v91 = (char *)malloc(v10);\n          if ( !v91 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v157 )\n            v13 = (char *)memcpy(v91, v13, v18);\n          else\n            v13 = v91;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_198;\n      v26 = (char *)v162;\n      v27 = (long double *)((char *)v162 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v157) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v157 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v157 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v122 = (__int64)(v65 + 1);\n                  v123 = -1LL;\n                  v124 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v123 = 10 * v49;\n                  v75 = __CFADD__(v123, v124);\n                  v49 = v123 + v124;\n                  v65 = (char *)v122;\n                  if ( v75 )\n                  {\n                    if ( v66 == (char *)v122 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v157;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v65 - 1) != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v162 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_198;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v125 = (__int64)(v50 + 1);\n                v54 = 0LL;\n                if ( v51 != (char *)v125 )\n                {\n                  v126 = (char *)v125;\n                  while ( 1 )\n                  {\n                    v127 = v126 + 1;\n                    v128 = *v126 - 48;\n                    v129 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v129 = 10 * v54;\n                    v75 = __CFADD__(v129, v128);\n                    v130 = v129 + v128;\n                    v126 = v127;\n                    v54 = v130;\n                    if ( v75 )\n                    {\n                      if ( v51 == v127 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v126 = v127 + 1;\n                        if ( *v127 == 48 )\n                          break;\n                        if ( v51 == v126 )\n                          goto LABEL_88;\n                        ++v127;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v126 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_370;\n              }\n              v53 = (char *)v162 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_198;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_188:\n                  v82 = v55;\n                  if ( v49 >= v55 )\n                    v82 = v49;\n                  v75 = __CFADD__(v82, 1LL);\n                  v83 = (void *)(v82 + 1);\n                  v157 = v83;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v83 <= 0x2BC )\n                  {\n                    v85 = &v169;\n                  }\n                  else\n                  {\n                    v151 = (void *)v49;\n                    v152 = (char *)v54;\n                    LODWORD(v154) = v67;\n                    v156 = _FST7;\n                    if ( v83 == (void *)-1LL )\n                      goto LABEL_88;\n                    v84 = (char *)malloc((size_t)v83);\n                    v67 = (int)v154;\n                    _FST7 = v156;\n                    v85 = v84;\n                    v54 = (unsigned __int64)v152;\n                    v49 = (unsigned __int64)v151;\n                    if ( !v84 )\n                      goto LABEL_88;\n                  }\n                  v86 = (unsigned __int16)v160;\n                  LOBYTE(v87) = v160;\n                  HIBYTE(v87) = BYTE1(v160) | 3;\n                  LOWORD(v160) = v87;\n                  __asm { fxam }\n                  if ( v61 & 2 )\n                  {\n                    *v85 = 45;\n                    _FST7 = -_FST7;\n                    v88 = (unsigned __int64)(v85 + 1);\n                  }\n                  else if ( v67 & 4 )\n                  {\n                    v88 = (unsigned __int64)(v85 + 1);\n                    *v85 = 43;\n                  }\n                  else\n                  {\n                    v88 = (unsigned __int64)v85;\n                    if ( v67 & 8 )\n                    {\n                      v88 = (unsigned __int64)(v85 + 1);\n                      *v85 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_198;\n                    v93 = v88 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v88 + 2) = 102;\n                      *(_WORD *)v88 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v88 + 2) = 70;\n                      *(_WORD *)v88 = 20041;\n                    }\n                    v88 = 0LL;\n                    goto LABEL_258;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_198;\n                  v92 = v11[72] & 0xDF;\n                  switch ( v92 )\n                  {\n                    case 70:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || v54 )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v118 = nl_langinfo(0x10000);\n                        v119 = (__int64)v152;\n                        v93 = *(_QWORD *)&v156;\n                        v120 = *v118;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v120 )\n                          v120 = 46;\n                        *(_BYTE *)(v88 + 1) = v120;\n                        if ( v119 )\n                        {\n                          v121 = v93;\n                          do\n                            *(_BYTE *)(++v121 - 1) = 48;\n                          while ( v121 != v88 + v119 + 2 );\n                          v93 += v119;\n                        }\n                        goto LABEL_258;\n                      }\n                      goto LABEL_257;\n                    case 69:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || (v101 = v88 + 1, v54) )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v134 = nl_langinfo(0x10000);\n                        v135 = (__int64)v152;\n                        v101 = *(_QWORD *)&v156;\n                        v136 = *v134;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v136 )\n                          v136 = 46;\n                        *(_BYTE *)(v88 + 1) = v136;\n                        if ( v135 )\n                        {\n                          v137 = v101;\n                          do\n                            *(_BYTE *)(++v137 - 1) = 48;\n                          while ( v137 != v88 + v135 + 2 );\n                          v101 += v135;\n                        }\n                      }\n                      v102 = v11[72];\n                      v93 = v101 + 4;\n                      *(_BYTE *)(v101 + 3) = 48;\n                      *(_BYTE *)v101 = v102;\n                      *(_WORD *)(v101 + 1) = 12331;\n                      goto LABEL_258;\n                    case 71:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 )\n                      {\n                        if ( v54 )\n                        {\n                          v145 = v86;\n                          v147 = v49;\n                          v148 = (char *)(v88 + 2);\n                          v151 = v85;\n                          LODWORD(v152) = v67;\n                          v154 = (char *)v54;\n                          *(_QWORD *)&v156 = v54 - 1;\n                          v112 = nl_langinfo(0x10000);\n                          v113 = *(_QWORD *)&v156;\n                          v114 = (__int64)v154;\n                          v115 = *v112;\n                          LOBYTE(v67) = (_BYTE)v152;\n                          v85 = (char *)v151;\n                          v93 = (unsigned __int64)v148;\n                          v49 = v147;\n                          LOWORD(v86) = v145;\n                          if ( !v115 )\n                            v115 = 46;\n                          *(_BYTE *)(v88 + 1) = v115;\n                          if ( v113 )\n                          {\n                            v116 = v88 + v114 + 1;\n                            v117 = v93;\n                            do\n                              *(_BYTE *)(++v117 - 1) = 48;\n                            while ( v117 != v116 );\n                            v93 += v113;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v148) = v86;\n                          v151 = (void *)v49;\n                          v152 = (char *)(v88 + 2);\n                          v154 = v85;\n                          LODWORD(v156) = v67;\n                          v143 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v156);\n                          v85 = v154;\n                          v144 = *v143;\n                          v93 = (unsigned __int64)v152;\n                          v49 = (unsigned __int64)v151;\n                          LOWORD(v86) = (_WORD)v148;\n                          if ( !v144 )\n                            v144 = 46;\n                          *(_BYTE *)(v88 + 1) = v144;\n                        }\n                        goto LABEL_258;\n                      }\nLABEL_257:\n                      v93 = v88 + 1;\n                      goto LABEL_258;\n                  }\n                  if ( v92 != 65 )\n                    goto LABEL_198;\n                  *(_BYTE *)v88 = 48;\n                  *(_QWORD *)&v156 = v88 + 2;\n                  v131 = v11[72];\n                  *(_BYTE *)(v88 + 2) = 48;\n                  *(_BYTE *)(v88 + 1) = v131 + 23;\n                  if ( v67 & 0x10 || (v132 = v88 + 3, v54) )\n                  {\n                    v146 = v86;\n                    v147 = v49;\n                    v148 = v85;\n                    v151 = (void *)v54;\n                    LODWORD(v152) = v67;\n                    v154 = (char *)(v88 + 4);\n                    v139 = nl_langinfo(0x10000);\n                    v140 = v151;\n                    v132 = (__int64)v154;\n                    v141 = *v139;\n                    LOBYTE(v67) = (_BYTE)v152;\n                    v85 = v148;\n                    v49 = v147;\n                    LOWORD(v86) = v146;\n                    if ( !v141 )\n                      v141 = 46;\n                    *(_BYTE *)(v88 + 3) = v141;\n                    if ( v140 )\n                    {\n                      v142 = (char *)v132;\n                      do\n                        *(++v142 - 1) = 48;\n                      while ( v142 != (char *)v140 + v88 + 4 );\n                      v132 += (__int64)v140;\n                    }\n                  }\n                  v133 = v11[72];\n                  v93 = v132 + 3;\n                  *(_WORD *)(v132 + 1) = 12331;\n                  v88 = *(_QWORD *)&v156;\n                  *(_BYTE *)v132 = v133 + 15;\nLABEL_258:\n                  LOWORD(v160) = v86;\n                  v94 = v93 - (_QWORD)v85;\n                  if ( v49 > v93 - (unsigned __int64)v85 )\n                  {\n                    v95 = v49 - v94;\n                    v96 = v93 + v95;\n                    v94 = v93 + v95 - (_QWORD)v85;\n                    if ( v67 & 2 )\n                    {\n                      if ( v95 )\n                      {\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v96 != v93 );\n                      }\n                    }\n                    else if ( v67 & 0x20 && v88 )\n                    {\n                      if ( v88 >= v93 )\n                      {\n                        v88 = v93;\n                      }\n                      else\n                      {\n                        v97 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v96 + v97) = *(_BYTE *)(v93 + v97);\n                          --v97;\n                        }\n                        while ( v97 != v88 - 1 - v93 );\n                      }\n                      if ( v95 )\n                      {\n                        v98 = v88 + v95;\n                        do\n                          *(_BYTE *)(++v88 - 1) = 48;\n                        while ( v88 != v98 );\n                      }\n                    }\n                    else\n                    {\n                      v108 = -1LL;\n                      if ( (unsigned __int64)v85 < v93 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v96 + v108) = *(_BYTE *)(v93 + v108);\n                          --v108;\n                        }\n                        while ( &v85[-v93 - 1] != (char *)v108 );\n                        v93 = (unsigned __int64)v85;\n                      }\n                      if ( v95 )\n                      {\n                        v109 = v93 + v95;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v93 != v109 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v157 <= v94 )\n                    goto LABEL_198;\n                  v99 = v94 + v18;\n                  v14 = v94 + v18;\n                  if ( v10 - v18 <= v94 )\n                  {\n                    if ( __CFADD__(v94, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v99 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v99 )\n                          goto LABEL_368;\n                      }\n                      else\n                      {\n                        if ( v99 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_275;\n                        }\nLABEL_368:\n                        if ( v99 == -1LL )\n                          goto LABEL_88;\n                        v10 = v94 + v18;\n                      }\nLABEL_275:\n                      if ( v13 && v13 != src )\n                      {\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v100 = (char *)realloc(v13, v10);\n                        if ( !v100 )\n                          goto LABEL_88;\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        v13 = v100;\n                      }\n                      else\n                      {\n                        LOBYTE(v154) = v13 == src;\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v110 = (char *)malloc(v10);\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        if ( !v110 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v154 )\n                        {\n                          v111 = (char *)memcpy(v110, v13, v18);\n                          v85 = (char *)v157;\n                          v94 = *(_QWORD *)&v156;\n                          v13 = v111;\n                        }\n                        else\n                        {\n                          v13 = v110;\n                        }\n                      }\n                    }\n                  }\n                  v157 = v85;\n                  memcpy(&v13[v18], v85, v94);\n                  if ( v157 != &v169 )\n                    free(v157);\n                  goto LABEL_110;\n                }\nLABEL_370:\n                v55 = 12LL;\n                goto LABEL_188;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_188;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v155 + 1;\n        *v155 = 37;\n        if ( v30 & 1 )\n        {\n          v32 = v155;\n          v155[1] = 39;\n          v31 = v32 + 2;\n        }\n        if ( v30 & 2 )\n          *v31++ = 45;\n        if ( v30 & 4 )\n          *v31++ = 43;\n        if ( v30 & 8 )\n          *v31++ = 32;\n        if ( v30 & 0x10 )\n          *v31++ = 35;\n        if ( v30 & 0x40 )\n          *v31++ = 73;\n        if ( v30 & 0x20 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        if ( (unsigned int)v157 <= 0x10 )\n        {\n          v37 = 1LL << (char)v157;\n          if ( (1LL << (char)v157) & 0x14180 )\n            goto LABEL_125;\n          if ( v37 & 0x1000 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( !(v37 & 0x600) )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v154) = 1;\n            v160 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_198:\n          abort();\n        }\n        LODWORD(v154) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_198;\n          v43 = (int)v154;\n          *(&v160 + (unsigned int)v154) = *((_DWORD *)v42 + 4);\n          LODWORD(v154) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v156 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v165 != &v168 )\n                    free(v165);\n                  if ( v162 != &v163 )\n                    free(v162);\n                  v13 = 0LL;\n                  **(_DWORD **)&v156 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v156 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v156) = v13 == src;\n            v90 = (char *)malloc(v10);\n            v45 = v90;\n            if ( !v90 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v156) )\n              v45 = (char *)memcpy(v90, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v152 = v45;\n            v46 = __errno_location();\n            v47 = v152;\n            v152 = v31;\n            *(_QWORD *)&v156 = v46;\n            LODWORD(v148) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v159 = -1;\n              **(_DWORD **)&v156 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (_DWORD)v157 )\n              {\n                case 1:\n                  v79 = (unsigned int)*((char *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 2:\n                  v79 = *((unsigned __int8 *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 3:\n                  v79 = (unsigned int)*((__int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 4:\n                  v79 = *((unsigned __int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v79 = *((unsigned int *)v162 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_149:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_208;\n                  if ( (_DWORD)v154 != 2 )\n                    goto LABEL_151;\n                  goto LABEL_207;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v70 = &v47[v18];\n                  v71 = (int *)*((_QWORD *)v162 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                  {\nLABEL_208:\n                    v79 = v160;\nLABEL_151:\n                    v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v79);\n                    v73 = v159;\n                    v47 = (char *)v151;\n                    if ( v159 >= 0 )\n                      goto LABEL_132;\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v154 == 2 )\n                    {\nLABEL_207:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                      v47 = (char *)v151;\n                    }\n                    else\n                    {\nLABEL_130:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v71);\n                      v47 = (char *)v151;\n                    }\nLABEL_131:\n                    v73 = v159;\n                    if ( v159 >= 0 )\n                    {\nLABEL_132:\n                      if ( v73 < v48 && v47[v73 + v18] )\n                        goto LABEL_198;\n                      if ( v73 >= v72 )\n                        goto LABEL_136;\n                      goto LABEL_135;\n                    }\n                  }\n                  if ( v152[1] )\n                  {\n                    v152[1] = 0;\n                    continue;\n                  }\n                  if ( v72 < 0 )\n                  {\n                    v80 = **(_DWORD **)&v156;\n                    if ( !**(_DWORD **)&v156 )\n                    {\n                      v80 = 84;\n                      if ( (v11[72] & 0xEF) != 99 )\n                        v80 = 22;\n                    }\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    **(_DWORD **)&v156 = v80;\n                    return 0LL;\n                  }\nLABEL_135:\n                  v159 = v72;\n                  v73 = v72;\nLABEL_136:\n                  if ( (unsigned int)(v73 + 1) < v48 )\n                  {\n                    v13 = v47;\n                    v14 = v18 + v73;\n                    **(_DWORD **)&v156 = (_DWORD)v148;\n                    goto LABEL_110;\n                  }\n                  if ( v10 - v18 > 0x7FFFFFFE )\n                  {\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    v13 = 0LL;\n                    **(_DWORD **)&v156 = 75;\n                    return v13;\n                  }\n                  v74 = (unsigned int)(v73 + 2);\n                  v75 = __CFADD__(v18, v74);\n                  v76 = v18 + v74;\n                  if ( (v10 & 0x8000000000000000LL) != 0LL )\n                  {\n                    if ( v10 != -1LL )\n                      goto LABEL_200;\n                  }\n                  else\n                  {\n                    if ( v75 )\n                      goto LABEL_200;\n                    if ( 2 * v10 >= v76 )\n                      v76 = 2 * v10;\n                    if ( v10 < v76 )\n                    {\n                      v10 *= 2LL;\n                      if ( v10 < v76 )\n                      {\n                        if ( v76 == -1LL )\n                        {\nLABEL_200:\n                          v56 = v47;\n                          goto LABEL_89;\n                        }\n                        v10 = v76;\n                      }\n                      v77 = v47 == src;\n                      if ( !v47 || v77 )\n                      {\n                        v151 = v47;\n                        v89 = (char *)malloc(v10);\n                        v47 = (char *)v151;\n                        if ( !v89 )\n                          goto LABEL_200;\n                        if ( v18 && v77 )\n                          v47 = (char *)memcpy(v89, v151, v18);\n                        else\n                          v47 = v89;\n                      }\n                      else\n                      {\n                        v151 = v47;\n                        v78 = (char *)realloc(v47, v10);\n                        v47 = (char *)v151;\n                        if ( !v78 )\n                          goto LABEL_200;\n                        v47 = v78;\n                      }\n                    }\n                  }\n                  continue;\n                case 0xB:\n                  v81 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 || (_DWORD)v154 == 2 )\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, v160);\n                    v47 = (char *)v151;\n                  }\n                  else\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, &v159);\n                    v47 = (char *)v151;\n                  }\n                  goto LABEL_131;\n                case 0xC:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_207;\n                  if ( (_DWORD)v154 != 2 )\n                  {\n                    v71 = &v159;\n                    goto LABEL_130;\n                  }\n                  v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                  v47 = (char *)v151;\n                  goto LABEL_131;\n                default:\n                  goto LABEL_403;\n              }\n            }\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_403:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v12 = (char *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v153;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v103 = v18;\n    v104 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v104 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v104 )\n        {\nLABEL_298:\n          v105 = v13 == src;\n          if ( !v13 || v105 )\n          {\n            v138 = (char *)malloc(v10);\n            if ( !v138 )\n              goto LABEL_88;\n            if ( v103 && v105 )\n              v13 = (char *)memcpy(v138, v13, v103);\n            else\n              v13 = v138;\n          }\n          else\n          {\n            v106 = (char *)realloc(v13, v10);\n            if ( !v106 )\n              goto LABEL_126;\n            v13 = v106;\n          }\n          goto LABEL_302;\n        }\n      }\n      else if ( v104 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_298;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_298;\n    }\nLABEL_302:\n    v13[v103] = 0;\n    if ( v10 > v104 && v13 != src )\n    {\n      v107 = (char *)realloc(v13, v104);\n      if ( v107 )\n        v13 = v107;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v165 != &v168 )\n      free(v165);\n    if ( v162 != &v163 )\n      free(v162);\n    *v150 = v103;\n    return v13;\n  }\n  if ( v165 != &v168 )\n    free(v165);\n  if ( v162 != &v163 )\n    free(v162);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n", 
            "funcStartAddr": "0x401ddeL", 
            "funcEndAddr": "0x401de3L", 
            "funcName": "sub_40E420"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40E420(void *a1, size_t *a2, char *a3, __int64 a4)\n{\n  char *v4; // r15\n  __int64 v5; // rbx\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  _BYTE *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  char *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  char *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  _BYTE *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  char *result; // rax\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // er11\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  int *v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  __int64 v79; // r9\n  int v80; // ebx\n  char *v81; // rdi\n  unsigned __int64 v82; // rax\n  void *v83; // rax\n  char *v84; // rax\n  char *v85; // rcx\n  int v86; // er8\n  __int16 v87; // ax\n  unsigned __int64 v88; // r15\n  char *v89; // rax\n  char *v90; // rax\n  char *v91; // rax\n  char v92; // al\n  unsigned __int64 v93; // r9\n  size_t v94; // r8\n  unsigned __int64 v95; // r10\n  unsigned __int64 v96; // rdi\n  __int64 v97; // rax\n  unsigned __int64 v98; // r10\n  unsigned __int64 v99; // rax\n  char *v100; // rax\n  __int64 v101; // rsi\n  char v102; // al\n  size_t v103; // r15\n  size_t v104; // r14\n  bool v105; // r13\n  char *v106; // rax\n  char *v107; // rax\n  __int64 v108; // rax\n  unsigned __int64 v109; // r10\n  char *v110; // rax\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rsi\n  __int64 v114; // rdx\n  char v115; // al\n  __int64 v116; // rdx\n  unsigned __int64 v117; // rax\n  char *v118; // rax\n  __int64 v119; // rdx\n  char v120; // al\n  unsigned __int64 v121; // rax\n  __int64 v122; // rsi\n  __int64 v123; // r9\n  __int64 v124; // rdx\n  __int64 v125; // rax\n  char *v126; // rsi\n  char *v127; // rdi\n  __int64 v128; // rax\n  __int64 v129; // rsi\n  unsigned __int64 v130; // rax\n  char v131; // al\n  __int64 v132; // rsi\n  char v133; // al\n  char *v134; // rax\n  __int64 v135; // rdx\n  char v136; // al\n  __int64 v137; // rax\n  char *v138; // rax\n  char *v139; // rax\n  void *v140; // rdx\n  char v141; // al\n  char *v142; // rax\n  char *v143; // rax\n  char v144; // al\n  __int16 v145; // [rsp+24h] [rbp-6ECh]\n  __int16 v146; // [rsp+24h] [rbp-6ECh]\n  unsigned __int64 v147; // [rsp+28h] [rbp-6E8h]\n  char *v148; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v150; // [rsp+40h] [rbp-6D0h]\n  void *v151; // [rsp+48h] [rbp-6C8h]\n  char *v152; // [rsp+50h] [rbp-6C0h]\n  __int64 v153; // [rsp+58h] [rbp-6B8h]\n  char *v154; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v155; // [rsp+68h] [rbp-6A8h]\n  long double v156; // [rsp+70h] [rbp-6A0h]\n  void *v157; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v159; // [rsp+94h] [rbp-67Ch]\n  unsigned int v160; // [rsp+98h] [rbp-678h]\n  char v161; // [rsp+A0h] [rbp-670h]\n  void *v162; // [rsp+A8h] [rbp-668h]\n  __int64 v163; // [rsp+B0h] [rbp-660h]\n  __int64 v164; // [rsp+190h] [rbp-580h]\n  void *v165; // [rsp+198h] [rbp-578h]\n  __int64 v166; // [rsp+1A0h] [rbp-570h]\n  __int64 v167; // [rsp+1A8h] [rbp-568h]\n  __int64 v168; // [rsp+1B0h] [rbp-560h]\n  char v169; // [rsp+420h] [rbp-2F0h]\n\n  v4 = a3;\n  v5 = a4;\n  src = a1;\n  v150 = a2;\n  if ( (int)sub_410160(a3, &v164, &v161) < 0 )\n    return 0LL;\n  if ( (int)sub_40FF40(v5, &v161) >= 0 )\n  {\n    v6 = v166 + 7;\n    if ( (unsigned __int64)(v166 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v167, v6);\n    v7 = v167 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v155 = (_BYTE *)(((unsigned __int64)&v147 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = malloc(v8);\n      v155 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v150;\n    v11 = (char *)v165;\n    v12 = v4;\n    v13 = (char *)src;\n    v153 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v165;\n    if ( *(char **)v165 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (char *)(v15 - v12);\n    v17 = (unsigned __int64)&v16[v14];\n    v18 = (size_t)&v16[v14];\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v154 = v12;\n          LOBYTE(v156) = v19;\n          v157 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = (char *)v157;\n          v12 = v154;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v156) )\n          {\n            *(_QWORD *)&v156 = v154;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = (char *)v157;\n            v12 = *(char **)&v156;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v156 = v12;\n          v157 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = (char *)v157;\n          v12 = *(char **)&v156;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)&v16[v14];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v164 != v153 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_198;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_234;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_234:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v156 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v157) = v13 == src;\n          v91 = (char *)malloc(v10);\n          if ( !v91 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v157 )\n            v13 = (char *)memcpy(v91, v13, v18);\n          else\n            v13 = v91;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_198;\n      v26 = (char *)v162;\n      v27 = (long double *)((char *)v162 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v157) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v157 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v157 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v122 = (__int64)(v65 + 1);\n                  v123 = -1LL;\n                  v124 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v123 = 10 * v49;\n                  v75 = __CFADD__(v123, v124);\n                  v49 = v123 + v124;\n                  v65 = (char *)v122;\n                  if ( v75 )\n                  {\n                    if ( v66 == (char *)v122 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v157;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v65 - 1) != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v162 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_198;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v125 = (__int64)(v50 + 1);\n                v54 = 0LL;\n                if ( v51 != (char *)v125 )\n                {\n                  v126 = (char *)v125;\n                  while ( 1 )\n                  {\n                    v127 = v126 + 1;\n                    v128 = *v126 - 48;\n                    v129 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v129 = 10 * v54;\n                    v75 = __CFADD__(v129, v128);\n                    v130 = v129 + v128;\n                    v126 = v127;\n                    v54 = v130;\n                    if ( v75 )\n                    {\n                      if ( v51 == v127 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v126 = v127 + 1;\n                        if ( *v127 == 48 )\n                          break;\n                        if ( v51 == v126 )\n                          goto LABEL_88;\n                        ++v127;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v126 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_370;\n              }\n              v53 = (char *)v162 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_198;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_188:\n                  v82 = v55;\n                  if ( v49 >= v55 )\n                    v82 = v49;\n                  v75 = __CFADD__(v82, 1LL);\n                  v83 = (void *)(v82 + 1);\n                  v157 = v83;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v83 <= 0x2BC )\n                  {\n                    v85 = &v169;\n                  }\n                  else\n                  {\n                    v151 = (void *)v49;\n                    v152 = (char *)v54;\n                    LODWORD(v154) = v67;\n                    v156 = _FST7;\n                    if ( v83 == (void *)-1LL )\n                      goto LABEL_88;\n                    v84 = (char *)malloc((size_t)v83);\n                    v67 = (int)v154;\n                    _FST7 = v156;\n                    v85 = v84;\n                    v54 = (unsigned __int64)v152;\n                    v49 = (unsigned __int64)v151;\n                    if ( !v84 )\n                      goto LABEL_88;\n                  }\n                  v86 = (unsigned __int16)v160;\n                  LOBYTE(v87) = v160;\n                  HIBYTE(v87) = BYTE1(v160) | 3;\n                  LOWORD(v160) = v87;\n                  __asm { fxam }\n                  if ( v61 & 2 )\n                  {\n                    *v85 = 45;\n                    _FST7 = -_FST7;\n                    v88 = (unsigned __int64)(v85 + 1);\n                  }\n                  else if ( v67 & 4 )\n                  {\n                    v88 = (unsigned __int64)(v85 + 1);\n                    *v85 = 43;\n                  }\n                  else\n                  {\n                    v88 = (unsigned __int64)v85;\n                    if ( v67 & 8 )\n                    {\n                      v88 = (unsigned __int64)(v85 + 1);\n                      *v85 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_198;\n                    v93 = v88 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v88 + 2) = 102;\n                      *(_WORD *)v88 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v88 + 2) = 70;\n                      *(_WORD *)v88 = 20041;\n                    }\n                    v88 = 0LL;\n                    goto LABEL_258;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_198;\n                  v92 = v11[72] & 0xDF;\n                  switch ( v92 )\n                  {\n                    case 70:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || v54 )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v118 = nl_langinfo(0x10000);\n                        v119 = (__int64)v152;\n                        v93 = *(_QWORD *)&v156;\n                        v120 = *v118;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v120 )\n                          v120 = 46;\n                        *(_BYTE *)(v88 + 1) = v120;\n                        if ( v119 )\n                        {\n                          v121 = v93;\n                          do\n                            *(_BYTE *)(++v121 - 1) = 48;\n                          while ( v121 != v88 + v119 + 2 );\n                          v93 += v119;\n                        }\n                        goto LABEL_258;\n                      }\n                      goto LABEL_257;\n                    case 69:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || (v101 = v88 + 1, v54) )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v134 = nl_langinfo(0x10000);\n                        v135 = (__int64)v152;\n                        v101 = *(_QWORD *)&v156;\n                        v136 = *v134;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v136 )\n                          v136 = 46;\n                        *(_BYTE *)(v88 + 1) = v136;\n                        if ( v135 )\n                        {\n                          v137 = v101;\n                          do\n                            *(_BYTE *)(++v137 - 1) = 48;\n                          while ( v137 != v88 + v135 + 2 );\n                          v101 += v135;\n                        }\n                      }\n                      v102 = v11[72];\n                      v93 = v101 + 4;\n                      *(_BYTE *)(v101 + 3) = 48;\n                      *(_BYTE *)v101 = v102;\n                      *(_WORD *)(v101 + 1) = 12331;\n                      goto LABEL_258;\n                    case 71:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 )\n                      {\n                        if ( v54 )\n                        {\n                          v145 = v86;\n                          v147 = v49;\n                          v148 = (char *)(v88 + 2);\n                          v151 = v85;\n                          LODWORD(v152) = v67;\n                          v154 = (char *)v54;\n                          *(_QWORD *)&v156 = v54 - 1;\n                          v112 = nl_langinfo(0x10000);\n                          v113 = *(_QWORD *)&v156;\n                          v114 = (__int64)v154;\n                          v115 = *v112;\n                          LOBYTE(v67) = (_BYTE)v152;\n                          v85 = (char *)v151;\n                          v93 = (unsigned __int64)v148;\n                          v49 = v147;\n                          LOWORD(v86) = v145;\n                          if ( !v115 )\n                            v115 = 46;\n                          *(_BYTE *)(v88 + 1) = v115;\n                          if ( v113 )\n                          {\n                            v116 = v88 + v114 + 1;\n                            v117 = v93;\n                            do\n                              *(_BYTE *)(++v117 - 1) = 48;\n                            while ( v117 != v116 );\n                            v93 += v113;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v148) = v86;\n                          v151 = (void *)v49;\n                          v152 = (char *)(v88 + 2);\n                          v154 = v85;\n                          LODWORD(v156) = v67;\n                          v143 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v156);\n                          v85 = v154;\n                          v144 = *v143;\n                          v93 = (unsigned __int64)v152;\n                          v49 = (unsigned __int64)v151;\n                          LOWORD(v86) = (_WORD)v148;\n                          if ( !v144 )\n                            v144 = 46;\n                          *(_BYTE *)(v88 + 1) = v144;\n                        }\n                        goto LABEL_258;\n                      }\nLABEL_257:\n                      v93 = v88 + 1;\n                      goto LABEL_258;\n                  }\n                  if ( v92 != 65 )\n                    goto LABEL_198;\n                  *(_BYTE *)v88 = 48;\n                  *(_QWORD *)&v156 = v88 + 2;\n                  v131 = v11[72];\n                  *(_BYTE *)(v88 + 2) = 48;\n                  *(_BYTE *)(v88 + 1) = v131 + 23;\n                  if ( v67 & 0x10 || (v132 = v88 + 3, v54) )\n                  {\n                    v146 = v86;\n                    v147 = v49;\n                    v148 = v85;\n                    v151 = (void *)v54;\n                    LODWORD(v152) = v67;\n                    v154 = (char *)(v88 + 4);\n                    v139 = nl_langinfo(0x10000);\n                    v140 = v151;\n                    v132 = (__int64)v154;\n                    v141 = *v139;\n                    LOBYTE(v67) = (_BYTE)v152;\n                    v85 = v148;\n                    v49 = v147;\n                    LOWORD(v86) = v146;\n                    if ( !v141 )\n                      v141 = 46;\n                    *(_BYTE *)(v88 + 3) = v141;\n                    if ( v140 )\n                    {\n                      v142 = (char *)v132;\n                      do\n                        *(++v142 - 1) = 48;\n                      while ( v142 != (char *)v140 + v88 + 4 );\n                      v132 += (__int64)v140;\n                    }\n                  }\n                  v133 = v11[72];\n                  v93 = v132 + 3;\n                  *(_WORD *)(v132 + 1) = 12331;\n                  v88 = *(_QWORD *)&v156;\n                  *(_BYTE *)v132 = v133 + 15;\nLABEL_258:\n                  LOWORD(v160) = v86;\n                  v94 = v93 - (_QWORD)v85;\n                  if ( v49 > v93 - (unsigned __int64)v85 )\n                  {\n                    v95 = v49 - v94;\n                    v96 = v93 + v95;\n                    v94 = v93 + v95 - (_QWORD)v85;\n                    if ( v67 & 2 )\n                    {\n                      if ( v95 )\n                      {\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v96 != v93 );\n                      }\n                    }\n                    else if ( v67 & 0x20 && v88 )\n                    {\n                      if ( v88 >= v93 )\n                      {\n                        v88 = v93;\n                      }\n                      else\n                      {\n                        v97 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v96 + v97) = *(_BYTE *)(v93 + v97);\n                          --v97;\n                        }\n                        while ( v97 != v88 - 1 - v93 );\n                      }\n                      if ( v95 )\n                      {\n                        v98 = v88 + v95;\n                        do\n                          *(_BYTE *)(++v88 - 1) = 48;\n                        while ( v88 != v98 );\n                      }\n                    }\n                    else\n                    {\n                      v108 = -1LL;\n                      if ( (unsigned __int64)v85 < v93 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v96 + v108) = *(_BYTE *)(v93 + v108);\n                          --v108;\n                        }\n                        while ( &v85[-v93 - 1] != (char *)v108 );\n                        v93 = (unsigned __int64)v85;\n                      }\n                      if ( v95 )\n                      {\n                        v109 = v93 + v95;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v93 != v109 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v157 <= v94 )\n                    goto LABEL_198;\n                  v99 = v94 + v18;\n                  v14 = v94 + v18;\n                  if ( v10 - v18 <= v94 )\n                  {\n                    if ( __CFADD__(v94, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v99 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v99 )\n                          goto LABEL_368;\n                      }\n                      else\n                      {\n                        if ( v99 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_275;\n                        }\nLABEL_368:\n                        if ( v99 == -1LL )\n                          goto LABEL_88;\n                        v10 = v94 + v18;\n                      }\nLABEL_275:\n                      if ( v13 && v13 != src )\n                      {\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v100 = (char *)realloc(v13, v10);\n                        if ( !v100 )\n                          goto LABEL_88;\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        v13 = v100;\n                      }\n                      else\n                      {\n                        LOBYTE(v154) = v13 == src;\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v110 = (char *)malloc(v10);\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        if ( !v110 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v154 )\n                        {\n                          v111 = (char *)memcpy(v110, v13, v18);\n                          v85 = (char *)v157;\n                          v94 = *(_QWORD *)&v156;\n                          v13 = v111;\n                        }\n                        else\n                        {\n                          v13 = v110;\n                        }\n                      }\n                    }\n                  }\n                  v157 = v85;\n                  memcpy(&v13[v18], v85, v94);\n                  if ( v157 != &v169 )\n                    free(v157);\n                  goto LABEL_110;\n                }\nLABEL_370:\n                v55 = 12LL;\n                goto LABEL_188;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_188;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v155 + 1;\n        *v155 = 37;\n        if ( v30 & 1 )\n        {\n          v32 = v155;\n          v155[1] = 39;\n          v31 = v32 + 2;\n        }\n        if ( v30 & 2 )\n          *v31++ = 45;\n        if ( v30 & 4 )\n          *v31++ = 43;\n        if ( v30 & 8 )\n          *v31++ = 32;\n        if ( v30 & 0x10 )\n          *v31++ = 35;\n        if ( v30 & 0x40 )\n          *v31++ = 73;\n        if ( v30 & 0x20 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        if ( (unsigned int)v157 <= 0x10 )\n        {\n          v37 = 1LL << (char)v157;\n          if ( (1LL << (char)v157) & 0x14180 )\n            goto LABEL_125;\n          if ( v37 & 0x1000 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( !(v37 & 0x600) )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v154) = 1;\n            v160 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_198:\n          abort();\n        }\n        LODWORD(v154) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_198;\n          v43 = (int)v154;\n          *(&v160 + (unsigned int)v154) = *((_DWORD *)v42 + 4);\n          LODWORD(v154) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v156 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v165 != &v168 )\n                    free(v165);\n                  if ( v162 != &v163 )\n                    free(v162);\n                  v13 = 0LL;\n                  **(_DWORD **)&v156 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v156 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v156) = v13 == src;\n            v90 = (char *)malloc(v10);\n            v45 = v90;\n            if ( !v90 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v156) )\n              v45 = (char *)memcpy(v90, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v152 = v45;\n            v46 = __errno_location();\n            v47 = v152;\n            v152 = v31;\n            *(_QWORD *)&v156 = v46;\n            LODWORD(v148) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v159 = -1;\n              **(_DWORD **)&v156 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (_DWORD)v157 )\n              {\n                case 1:\n                  v79 = (unsigned int)*((char *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 2:\n                  v79 = *((unsigned __int8 *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 3:\n                  v79 = (unsigned int)*((__int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 4:\n                  v79 = *((unsigned __int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v79 = *((unsigned int *)v162 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_149:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_208;\n                  if ( (_DWORD)v154 != 2 )\n                    goto LABEL_151;\n                  goto LABEL_207;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v70 = &v47[v18];\n                  v71 = (int *)*((_QWORD *)v162 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                  {\nLABEL_208:\n                    v79 = v160;\nLABEL_151:\n                    v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v79);\n                    v73 = v159;\n                    v47 = (char *)v151;\n                    if ( v159 >= 0 )\n                      goto LABEL_132;\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v154 == 2 )\n                    {\nLABEL_207:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                      v47 = (char *)v151;\n                    }\n                    else\n                    {\nLABEL_130:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v71);\n                      v47 = (char *)v151;\n                    }\nLABEL_131:\n                    v73 = v159;\n                    if ( v159 >= 0 )\n                    {\nLABEL_132:\n                      if ( v73 < v48 && v47[v73 + v18] )\n                        goto LABEL_198;\n                      if ( v73 >= v72 )\n                        goto LABEL_136;\n                      goto LABEL_135;\n                    }\n                  }\n                  if ( v152[1] )\n                  {\n                    v152[1] = 0;\n                    continue;\n                  }\n                  if ( v72 < 0 )\n                  {\n                    v80 = **(_DWORD **)&v156;\n                    if ( !**(_DWORD **)&v156 )\n                    {\n                      v80 = 84;\n                      if ( (v11[72] & 0xEF) != 99 )\n                        v80 = 22;\n                    }\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    **(_DWORD **)&v156 = v80;\n                    return 0LL;\n                  }\nLABEL_135:\n                  v159 = v72;\n                  v73 = v72;\nLABEL_136:\n                  if ( (unsigned int)(v73 + 1) < v48 )\n                  {\n                    v13 = v47;\n                    v14 = v18 + v73;\n                    **(_DWORD **)&v156 = (_DWORD)v148;\n                    goto LABEL_110;\n                  }\n                  if ( v10 - v18 > 0x7FFFFFFE )\n                  {\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    v13 = 0LL;\n                    **(_DWORD **)&v156 = 75;\n                    return v13;\n                  }\n                  v74 = (unsigned int)(v73 + 2);\n                  v75 = __CFADD__(v18, v74);\n                  v76 = v18 + v74;\n                  if ( (v10 & 0x8000000000000000LL) != 0LL )\n                  {\n                    if ( v10 != -1LL )\n                      goto LABEL_200;\n                  }\n                  else\n                  {\n                    if ( v75 )\n                      goto LABEL_200;\n                    if ( 2 * v10 >= v76 )\n                      v76 = 2 * v10;\n                    if ( v10 < v76 )\n                    {\n                      v10 *= 2LL;\n                      if ( v10 < v76 )\n                      {\n                        if ( v76 == -1LL )\n                        {\nLABEL_200:\n                          v56 = v47;\n                          goto LABEL_89;\n                        }\n                        v10 = v76;\n                      }\n                      v77 = v47 == src;\n                      if ( !v47 || v77 )\n                      {\n                        v151 = v47;\n                        v89 = (char *)malloc(v10);\n                        v47 = (char *)v151;\n                        if ( !v89 )\n                          goto LABEL_200;\n                        if ( v18 && v77 )\n                          v47 = (char *)memcpy(v89, v151, v18);\n                        else\n                          v47 = v89;\n                      }\n                      else\n                      {\n                        v151 = v47;\n                        v78 = (char *)realloc(v47, v10);\n                        v47 = (char *)v151;\n                        if ( !v78 )\n                          goto LABEL_200;\n                        v47 = v78;\n                      }\n                    }\n                  }\n                  continue;\n                case 0xB:\n                  v81 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 || (_DWORD)v154 == 2 )\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, v160);\n                    v47 = (char *)v151;\n                  }\n                  else\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, &v159);\n                    v47 = (char *)v151;\n                  }\n                  goto LABEL_131;\n                case 0xC:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_207;\n                  if ( (_DWORD)v154 != 2 )\n                  {\n                    v71 = &v159;\n                    goto LABEL_130;\n                  }\n                  v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                  v47 = (char *)v151;\n                  goto LABEL_131;\n                default:\n                  goto LABEL_403;\n              }\n            }\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_403:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v12 = (char *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v153;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v103 = v18;\n    v104 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v104 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v104 )\n        {\nLABEL_298:\n          v105 = v13 == src;\n          if ( !v13 || v105 )\n          {\n            v138 = (char *)malloc(v10);\n            if ( !v138 )\n              goto LABEL_88;\n            if ( v103 && v105 )\n              v13 = (char *)memcpy(v138, v13, v103);\n            else\n              v13 = v138;\n          }\n          else\n          {\n            v106 = (char *)realloc(v13, v10);\n            if ( !v106 )\n              goto LABEL_126;\n            v13 = v106;\n          }\n          goto LABEL_302;\n        }\n      }\n      else if ( v104 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_298;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_298;\n    }\nLABEL_302:\n    v13[v103] = 0;\n    if ( v10 > v104 && v13 != src )\n    {\n      v107 = (char *)realloc(v13, v104);\n      if ( v107 )\n        v13 = v107;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v165 != &v168 )\n      free(v165);\n    if ( v162 != &v163 )\n      free(v162);\n    *v150 = v103;\n    return v13;\n  }\n  if ( v165 != &v168 )\n    free(v165);\n  if ( v162 != &v163 )\n    free(v162);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n\nchar *__fastcall sub_40E420(void *a1, size_t *a2, char *a3, __int64 a4)\n{\n  char *v4; // r15\n  __int64 v5; // rbx\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  _BYTE *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  char *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  char *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  _BYTE *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  char *result; // rax\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // er11\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  int *v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  __int64 v79; // r9\n  int v80; // ebx\n  char *v81; // rdi\n  unsigned __int64 v82; // rax\n  void *v83; // rax\n  char *v84; // rax\n  char *v85; // rcx\n  int v86; // er8\n  __int16 v87; // ax\n  unsigned __int64 v88; // r15\n  char *v89; // rax\n  char *v90; // rax\n  char *v91; // rax\n  char v92; // al\n  unsigned __int64 v93; // r9\n  size_t v94; // r8\n  unsigned __int64 v95; // r10\n  unsigned __int64 v96; // rdi\n  __int64 v97; // rax\n  unsigned __int64 v98; // r10\n  unsigned __int64 v99; // rax\n  char *v100; // rax\n  __int64 v101; // rsi\n  char v102; // al\n  size_t v103; // r15\n  size_t v104; // r14\n  bool v105; // r13\n  char *v106; // rax\n  char *v107; // rax\n  __int64 v108; // rax\n  unsigned __int64 v109; // r10\n  char *v110; // rax\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rsi\n  __int64 v114; // rdx\n  char v115; // al\n  __int64 v116; // rdx\n  unsigned __int64 v117; // rax\n  char *v118; // rax\n  __int64 v119; // rdx\n  char v120; // al\n  unsigned __int64 v121; // rax\n  __int64 v122; // rsi\n  __int64 v123; // r9\n  __int64 v124; // rdx\n  __int64 v125; // rax\n  char *v126; // rsi\n  char *v127; // rdi\n  __int64 v128; // rax\n  __int64 v129; // rsi\n  unsigned __int64 v130; // rax\n  char v131; // al\n  __int64 v132; // rsi\n  char v133; // al\n  char *v134; // rax\n  __int64 v135; // rdx\n  char v136; // al\n  __int64 v137; // rax\n  char *v138; // rax\n  char *v139; // rax\n  void *v140; // rdx\n  char v141; // al\n  char *v142; // rax\n  char *v143; // rax\n  char v144; // al\n  __int16 v145; // [rsp+24h] [rbp-6ECh]\n  __int16 v146; // [rsp+24h] [rbp-6ECh]\n  unsigned __int64 v147; // [rsp+28h] [rbp-6E8h]\n  char *v148; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v150; // [rsp+40h] [rbp-6D0h]\n  void *v151; // [rsp+48h] [rbp-6C8h]\n  char *v152; // [rsp+50h] [rbp-6C0h]\n  __int64 v153; // [rsp+58h] [rbp-6B8h]\n  char *v154; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v155; // [rsp+68h] [rbp-6A8h]\n  long double v156; // [rsp+70h] [rbp-6A0h]\n  void *v157; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v159; // [rsp+94h] [rbp-67Ch]\n  unsigned int v160; // [rsp+98h] [rbp-678h]\n  char v161; // [rsp+A0h] [rbp-670h]\n  void *v162; // [rsp+A8h] [rbp-668h]\n  __int64 v163; // [rsp+B0h] [rbp-660h]\n  __int64 v164; // [rsp+190h] [rbp-580h]\n  void *v165; // [rsp+198h] [rbp-578h]\n  __int64 v166; // [rsp+1A0h] [rbp-570h]\n  __int64 v167; // [rsp+1A8h] [rbp-568h]\n  __int64 v168; // [rsp+1B0h] [rbp-560h]\n  char v169; // [rsp+420h] [rbp-2F0h]\n\n  v4 = a3;\n  v5 = a4;\n  src = a1;\n  v150 = a2;\n  if ( (int)sub_410160(a3, &v164, &v161) < 0 )\n    return 0LL;\n  if ( (int)sub_40FF40(v5, &v161) >= 0 )\n  {\n    v6 = v166 + 7;\n    if ( (unsigned __int64)(v166 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v167, v6);\n    v7 = v167 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v155 = (_BYTE *)(((unsigned __int64)&v147 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = malloc(v8);\n      v155 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v150;\n    v11 = (char *)v165;\n    v12 = v4;\n    v13 = (char *)src;\n    v153 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v165;\n    if ( *(char **)v165 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (char *)(v15 - v12);\n    v17 = (unsigned __int64)&v16[v14];\n    v18 = (size_t)&v16[v14];\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v154 = v12;\n          LOBYTE(v156) = v19;\n          v157 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = (char *)v157;\n          v12 = v154;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v156) )\n          {\n            *(_QWORD *)&v156 = v154;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = (char *)v157;\n            v12 = *(char **)&v156;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v156 = v12;\n          v157 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = (char *)v157;\n          v12 = *(char **)&v156;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)&v16[v14];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v164 != v153 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_198;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_234;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_234:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v156 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v157) = v13 == src;\n          v91 = (char *)malloc(v10);\n          if ( !v91 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v157 )\n            v13 = (char *)memcpy(v91, v13, v18);\n          else\n            v13 = v91;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_198;\n      v26 = (char *)v162;\n      v27 = (long double *)((char *)v162 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v157) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v157 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v157 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v122 = (__int64)(v65 + 1);\n                  v123 = -1LL;\n                  v124 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v123 = 10 * v49;\n                  v75 = __CFADD__(v123, v124);\n                  v49 = v123 + v124;\n                  v65 = (char *)v122;\n                  if ( v75 )\n                  {\n                    if ( v66 == (char *)v122 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v157;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v65 - 1) != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v162 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_198;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v125 = (__int64)(v50 + 1);\n                v54 = 0LL;\n                if ( v51 != (char *)v125 )\n                {\n                  v126 = (char *)v125;\n                  while ( 1 )\n                  {\n                    v127 = v126 + 1;\n                    v128 = *v126 - 48;\n                    v129 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v129 = 10 * v54;\n                    v75 = __CFADD__(v129, v128);\n                    v130 = v129 + v128;\n                    v126 = v127;\n                    v54 = v130;\n                    if ( v75 )\n                    {\n                      if ( v51 == v127 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v126 = v127 + 1;\n                        if ( *v127 == 48 )\n                          break;\n                        if ( v51 == v126 )\n                          goto LABEL_88;\n                        ++v127;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v126 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_370;\n              }\n              v53 = (char *)v162 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_198;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_188:\n                  v82 = v55;\n                  if ( v49 >= v55 )\n                    v82 = v49;\n                  v75 = __CFADD__(v82, 1LL);\n                  v83 = (void *)(v82 + 1);\n                  v157 = v83;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v83 <= 0x2BC )\n                  {\n                    v85 = &v169;\n                  }\n                  else\n                  {\n                    v151 = (void *)v49;\n                    v152 = (char *)v54;\n                    LODWORD(v154) = v67;\n                    v156 = _FST7;\n                    if ( v83 == (void *)-1LL )\n                      goto LABEL_88;\n                    v84 = (char *)malloc((size_t)v83);\n                    v67 = (int)v154;\n                    _FST7 = v156;\n                    v85 = v84;\n                    v54 = (unsigned __int64)v152;\n                    v49 = (unsigned __int64)v151;\n                    if ( !v84 )\n                      goto LABEL_88;\n                  }\n                  v86 = (unsigned __int16)v160;\n                  LOBYTE(v87) = v160;\n                  HIBYTE(v87) = BYTE1(v160) | 3;\n                  LOWORD(v160) = v87;\n                  __asm { fxam }\n                  if ( v61 & 2 )\n                  {\n                    *v85 = 45;\n                    _FST7 = -_FST7;\n                    v88 = (unsigned __int64)(v85 + 1);\n                  }\n                  else if ( v67 & 4 )\n                  {\n                    v88 = (unsigned __int64)(v85 + 1);\n                    *v85 = 43;\n                  }\n                  else\n                  {\n                    v88 = (unsigned __int64)v85;\n                    if ( v67 & 8 )\n                    {\n                      v88 = (unsigned __int64)(v85 + 1);\n                      *v85 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_198;\n                    v93 = v88 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v88 + 2) = 102;\n                      *(_WORD *)v88 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v88 + 2) = 70;\n                      *(_WORD *)v88 = 20041;\n                    }\n                    v88 = 0LL;\n                    goto LABEL_258;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_198;\n                  v92 = v11[72] & 0xDF;\n                  switch ( v92 )\n                  {\n                    case 70:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || v54 )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v118 = nl_langinfo(0x10000);\n                        v119 = (__int64)v152;\n                        v93 = *(_QWORD *)&v156;\n                        v120 = *v118;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v120 )\n                          v120 = 46;\n                        *(_BYTE *)(v88 + 1) = v120;\n                        if ( v119 )\n                        {\n                          v121 = v93;\n                          do\n                            *(_BYTE *)(++v121 - 1) = 48;\n                          while ( v121 != v88 + v119 + 2 );\n                          v93 += v119;\n                        }\n                        goto LABEL_258;\n                      }\n                      goto LABEL_257;\n                    case 69:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || (v101 = v88 + 1, v54) )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v134 = nl_langinfo(0x10000);\n                        v135 = (__int64)v152;\n                        v101 = *(_QWORD *)&v156;\n                        v136 = *v134;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v136 )\n                          v136 = 46;\n                        *(_BYTE *)(v88 + 1) = v136;\n                        if ( v135 )\n                        {\n                          v137 = v101;\n                          do\n                            *(_BYTE *)(++v137 - 1) = 48;\n                          while ( v137 != v88 + v135 + 2 );\n                          v101 += v135;\n                        }\n                      }\n                      v102 = v11[72];\n                      v93 = v101 + 4;\n                      *(_BYTE *)(v101 + 3) = 48;\n                      *(_BYTE *)v101 = v102;\n                      *(_WORD *)(v101 + 1) = 12331;\n                      goto LABEL_258;\n                    case 71:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 )\n                      {\n                        if ( v54 )\n                        {\n                          v145 = v86;\n                          v147 = v49;\n                          v148 = (char *)(v88 + 2);\n                          v151 = v85;\n                          LODWORD(v152) = v67;\n                          v154 = (char *)v54;\n                          *(_QWORD *)&v156 = v54 - 1;\n                          v112 = nl_langinfo(0x10000);\n                          v113 = *(_QWORD *)&v156;\n                          v114 = (__int64)v154;\n                          v115 = *v112;\n                          LOBYTE(v67) = (_BYTE)v152;\n                          v85 = (char *)v151;\n                          v93 = (unsigned __int64)v148;\n                          v49 = v147;\n                          LOWORD(v86) = v145;\n                          if ( !v115 )\n                            v115 = 46;\n                          *(_BYTE *)(v88 + 1) = v115;\n                          if ( v113 )\n                          {\n                            v116 = v88 + v114 + 1;\n                            v117 = v93;\n                            do\n                              *(_BYTE *)(++v117 - 1) = 48;\n                            while ( v117 != v116 );\n                            v93 += v113;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v148) = v86;\n                          v151 = (void *)v49;\n                          v152 = (char *)(v88 + 2);\n                          v154 = v85;\n                          LODWORD(v156) = v67;\n                          v143 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v156);\n                          v85 = v154;\n                          v144 = *v143;\n                          v93 = (unsigned __int64)v152;\n                          v49 = (unsigned __int64)v151;\n                          LOWORD(v86) = (_WORD)v148;\n                          if ( !v144 )\n                            v144 = 46;\n                          *(_BYTE *)(v88 + 1) = v144;\n                        }\n                        goto LABEL_258;\n                      }\nLABEL_257:\n                      v93 = v88 + 1;\n                      goto LABEL_258;\n                  }\n                  if ( v92 != 65 )\n                    goto LABEL_198;\n                  *(_BYTE *)v88 = 48;\n                  *(_QWORD *)&v156 = v88 + 2;\n                  v131 = v11[72];\n                  *(_BYTE *)(v88 + 2) = 48;\n                  *(_BYTE *)(v88 + 1) = v131 + 23;\n                  if ( v67 & 0x10 || (v132 = v88 + 3, v54) )\n                  {\n                    v146 = v86;\n                    v147 = v49;\n                    v148 = v85;\n                    v151 = (void *)v54;\n                    LODWORD(v152) = v67;\n                    v154 = (char *)(v88 + 4);\n                    v139 = nl_langinfo(0x10000);\n                    v140 = v151;\n                    v132 = (__int64)v154;\n                    v141 = *v139;\n                    LOBYTE(v67) = (_BYTE)v152;\n                    v85 = v148;\n                    v49 = v147;\n                    LOWORD(v86) = v146;\n                    if ( !v141 )\n                      v141 = 46;\n                    *(_BYTE *)(v88 + 3) = v141;\n                    if ( v140 )\n                    {\n                      v142 = (char *)v132;\n                      do\n                        *(++v142 - 1) = 48;\n                      while ( v142 != (char *)v140 + v88 + 4 );\n                      v132 += (__int64)v140;\n                    }\n                  }\n                  v133 = v11[72];\n                  v93 = v132 + 3;\n                  *(_WORD *)(v132 + 1) = 12331;\n                  v88 = *(_QWORD *)&v156;\n                  *(_BYTE *)v132 = v133 + 15;\nLABEL_258:\n                  LOWORD(v160) = v86;\n                  v94 = v93 - (_QWORD)v85;\n                  if ( v49 > v93 - (unsigned __int64)v85 )\n                  {\n                    v95 = v49 - v94;\n                    v96 = v93 + v95;\n                    v94 = v93 + v95 - (_QWORD)v85;\n                    if ( v67 & 2 )\n                    {\n                      if ( v95 )\n                      {\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v96 != v93 );\n                      }\n                    }\n                    else if ( v67 & 0x20 && v88 )\n                    {\n                      if ( v88 >= v93 )\n                      {\n                        v88 = v93;\n                      }\n                      else\n                      {\n                        v97 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v96 + v97) = *(_BYTE *)(v93 + v97);\n                          --v97;\n                        }\n                        while ( v97 != v88 - 1 - v93 );\n                      }\n                      if ( v95 )\n                      {\n                        v98 = v88 + v95;\n                        do\n                          *(_BYTE *)(++v88 - 1) = 48;\n                        while ( v88 != v98 );\n                      }\n                    }\n                    else\n                    {\n                      v108 = -1LL;\n                      if ( (unsigned __int64)v85 < v93 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v96 + v108) = *(_BYTE *)(v93 + v108);\n                          --v108;\n                        }\n                        while ( &v85[-v93 - 1] != (char *)v108 );\n                        v93 = (unsigned __int64)v85;\n                      }\n                      if ( v95 )\n                      {\n                        v109 = v93 + v95;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v93 != v109 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v157 <= v94 )\n                    goto LABEL_198;\n                  v99 = v94 + v18;\n                  v14 = v94 + v18;\n                  if ( v10 - v18 <= v94 )\n                  {\n                    if ( __CFADD__(v94, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v99 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v99 )\n                          goto LABEL_368;\n                      }\n                      else\n                      {\n                        if ( v99 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_275;\n                        }\nLABEL_368:\n                        if ( v99 == -1LL )\n                          goto LABEL_88;\n                        v10 = v94 + v18;\n                      }\nLABEL_275:\n                      if ( v13 && v13 != src )\n                      {\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v100 = (char *)realloc(v13, v10);\n                        if ( !v100 )\n                          goto LABEL_88;\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        v13 = v100;\n                      }\n                      else\n                      {\n                        LOBYTE(v154) = v13 == src;\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v110 = (char *)malloc(v10);\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        if ( !v110 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v154 )\n                        {\n                          v111 = (char *)memcpy(v110, v13, v18);\n                          v85 = (char *)v157;\n                          v94 = *(_QWORD *)&v156;\n                          v13 = v111;\n                        }\n                        else\n                        {\n                          v13 = v110;\n                        }\n                      }\n                    }\n                  }\n                  v157 = v85;\n                  memcpy(&v13[v18], v85, v94);\n                  if ( v157 != &v169 )\n                    free(v157);\n                  goto LABEL_110;\n                }\nLABEL_370:\n                v55 = 12LL;\n                goto LABEL_188;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_188;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v155 + 1;\n        *v155 = 37;\n        if ( v30 & 1 )\n        {\n          v32 = v155;\n          v155[1] = 39;\n          v31 = v32 + 2;\n        }\n        if ( v30 & 2 )\n          *v31++ = 45;\n        if ( v30 & 4 )\n          *v31++ = 43;\n        if ( v30 & 8 )\n          *v31++ = 32;\n        if ( v30 & 0x10 )\n          *v31++ = 35;\n        if ( v30 & 0x40 )\n          *v31++ = 73;\n        if ( v30 & 0x20 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        if ( (unsigned int)v157 <= 0x10 )\n        {\n          v37 = 1LL << (char)v157;\n          if ( (1LL << (char)v157) & 0x14180 )\n            goto LABEL_125;\n          if ( v37 & 0x1000 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( !(v37 & 0x600) )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v154) = 1;\n            v160 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_198:\n          abort();\n        }\n        LODWORD(v154) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_198;\n          v43 = (int)v154;\n          *(&v160 + (unsigned int)v154) = *((_DWORD *)v42 + 4);\n          LODWORD(v154) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v156 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v165 != &v168 )\n                    free(v165);\n                  if ( v162 != &v163 )\n                    free(v162);\n                  v13 = 0LL;\n                  **(_DWORD **)&v156 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v156 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v156) = v13 == src;\n            v90 = (char *)malloc(v10);\n            v45 = v90;\n            if ( !v90 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v156) )\n              v45 = (char *)memcpy(v90, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v152 = v45;\n            v46 = __errno_location();\n            v47 = v152;\n            v152 = v31;\n            *(_QWORD *)&v156 = v46;\n            LODWORD(v148) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v159 = -1;\n              **(_DWORD **)&v156 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (_DWORD)v157 )\n              {\n                case 1:\n                  v79 = (unsigned int)*((char *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 2:\n                  v79 = *((unsigned __int8 *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 3:\n                  v79 = (unsigned int)*((__int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 4:\n                  v79 = *((unsigned __int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v79 = *((unsigned int *)v162 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_149:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_208;\n                  if ( (_DWORD)v154 != 2 )\n                    goto LABEL_151;\n                  goto LABEL_207;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v70 = &v47[v18];\n                  v71 = (int *)*((_QWORD *)v162 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                  {\nLABEL_208:\n                    v79 = v160;\nLABEL_151:\n                    v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v79);\n                    v73 = v159;\n                    v47 = (char *)v151;\n                    if ( v159 >= 0 )\n                      goto LABEL_132;\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v154 == 2 )\n                    {\nLABEL_207:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                      v47 = (char *)v151;\n                    }\n                    else\n                    {\nLABEL_130:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v71);\n                      v47 = (char *)v151;\n                    }\nLABEL_131:\n                    v73 = v159;\n                    if ( v159 >= 0 )\n                    {\nLABEL_132:\n                      if ( v73 < v48 && v47[v73 + v18] )\n                        goto LABEL_198;\n                      if ( v73 >= v72 )\n                        goto LABEL_136;\n                      goto LABEL_135;\n                    }\n                  }\n                  if ( v152[1] )\n                  {\n                    v152[1] = 0;\n                    continue;\n                  }\n                  if ( v72 < 0 )\n                  {\n                    v80 = **(_DWORD **)&v156;\n                    if ( !**(_DWORD **)&v156 )\n                    {\n                      v80 = 84;\n                      if ( (v11[72] & 0xEF) != 99 )\n                        v80 = 22;\n                    }\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    **(_DWORD **)&v156 = v80;\n                    return 0LL;\n                  }\nLABEL_135:\n                  v159 = v72;\n                  v73 = v72;\nLABEL_136:\n                  if ( (unsigned int)(v73 + 1) < v48 )\n                  {\n                    v13 = v47;\n                    v14 = v18 + v73;\n                    **(_DWORD **)&v156 = (_DWORD)v148;\n                    goto LABEL_110;\n                  }\n                  if ( v10 - v18 > 0x7FFFFFFE )\n                  {\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    v13 = 0LL;\n                    **(_DWORD **)&v156 = 75;\n                    return v13;\n                  }\n                  v74 = (unsigned int)(v73 + 2);\n                  v75 = __CFADD__(v18, v74);\n                  v76 = v18 + v74;\n                  if ( (v10 & 0x8000000000000000LL) != 0LL )\n                  {\n                    if ( v10 != -1LL )\n                      goto LABEL_200;\n                  }\n                  else\n                  {\n                    if ( v75 )\n                      goto LABEL_200;\n                    if ( 2 * v10 >= v76 )\n                      v76 = 2 * v10;\n                    if ( v10 < v76 )\n                    {\n                      v10 *= 2LL;\n                      if ( v10 < v76 )\n                      {\n                        if ( v76 == -1LL )\n                        {\nLABEL_200:\n                          v56 = v47;\n                          goto LABEL_89;\n                        }\n                        v10 = v76;\n                      }\n                      v77 = v47 == src;\n                      if ( !v47 || v77 )\n                      {\n                        v151 = v47;\n                        v89 = (char *)malloc(v10);\n                        v47 = (char *)v151;\n                        if ( !v89 )\n                          goto LABEL_200;\n                        if ( v18 && v77 )\n                          v47 = (char *)memcpy(v89, v151, v18);\n                        else\n                          v47 = v89;\n                      }\n                      else\n                      {\n                        v151 = v47;\n                        v78 = (char *)realloc(v47, v10);\n                        v47 = (char *)v151;\n                        if ( !v78 )\n                          goto LABEL_200;\n                        v47 = v78;\n                      }\n                    }\n                  }\n                  continue;\n                case 0xB:\n                  v81 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 || (_DWORD)v154 == 2 )\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, v160);\n                    v47 = (char *)v151;\n                  }\n                  else\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, &v159);\n                    v47 = (char *)v151;\n                  }\n                  goto LABEL_131;\n                case 0xC:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_207;\n                  if ( (_DWORD)v154 != 2 )\n                  {\n                    v71 = &v159;\n                    goto LABEL_130;\n                  }\n                  v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                  v47 = (char *)v151;\n                  goto LABEL_131;\n                default:\n                  goto LABEL_403;\n              }\n            }\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_403:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v12 = (char *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v153;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v103 = v18;\n    v104 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v104 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v104 )\n        {\nLABEL_298:\n          v105 = v13 == src;\n          if ( !v13 || v105 )\n          {\n            v138 = (char *)malloc(v10);\n            if ( !v138 )\n              goto LABEL_88;\n            if ( v103 && v105 )\n              v13 = (char *)memcpy(v138, v13, v103);\n            else\n              v13 = v138;\n          }\n          else\n          {\n            v106 = (char *)realloc(v13, v10);\n            if ( !v106 )\n              goto LABEL_126;\n            v13 = v106;\n          }\n          goto LABEL_302;\n        }\n      }\n      else if ( v104 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_298;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_298;\n    }\nLABEL_302:\n    v13[v103] = 0;\n    if ( v10 > v104 && v13 != src )\n    {\n      v107 = (char *)realloc(v13, v104);\n      if ( v107 )\n        v13 = v107;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v165 != &v168 )\n      free(v165);\n    if ( v162 != &v163 )\n      free(v162);\n    *v150 = v103;\n    return v13;\n  }\n  if ( v165 != &v168 )\n    free(v165);\n  if ( v162 != &v163 )\n    free(v162);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n", 
            "funcStartAddr": "0x401ddeL", 
            "funcEndAddr": "0x401de3L", 
            "funcName": "sub_40E420"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FF40(int *a1, unsigned __int64 *a2)\n{\n  unsigned int *v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  unsigned int *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = (unsigned int *)a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( (unsigned __int64)*v2 )\n      {\n        case 1uLL:\n        case 2uLL:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *((_BYTE *)v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3uLL:\n        case 4uLL:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *((_WORD *)v2 + 8) = *v10;\n          goto LABEL_7;\n        case 5uLL:\n        case 6uLL:\n        case 0xDuLL:\n        case 0xEuLL:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (unsigned int *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (unsigned int *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          v2[4] = *v8;\n          goto LABEL_7;\n        case 7uLL:\n        case 8uLL:\n        case 9uLL:\n        case 0xAuLL:\n        case 0x11uLL:\n        case 0x12uLL:\n        case 0x13uLL:\n        case 0x14uLL:\n        case 0x15uLL:\n        case 0x16uLL:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *((_QWORD *)v2 + 2) = *v5;\n          goto LABEL_7;\n        case 0xBuLL:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *((_QWORD *)v2 + 2) = *v14;\n          goto LABEL_7;\n        case 0xCuLL:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *((long double *)v2 + 1) = *v15;\n          goto LABEL_7;\n        case 0xFuLL:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *((_QWORD *)v2 + 2) = v21;\n          goto LABEL_7;\n        case 0x10uLL:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_4151E0;\n          *((_QWORD *)v2 + 2) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 8;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40ff40L", 
            "funcEndAddr": "0x410159L", 
            "funcName": "sub_40FF40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410160(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 *v5; // r15\n  unsigned __int64 v6; // r9\n  unsigned __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  __int64 v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  void *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  void *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  __int64 v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  void *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  __int64 v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v94; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v95; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v96; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v97; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v5 = a3;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = (__int64)(a2 + 4);\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (__int64)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *(_DWORD *)(v12 + 16) = 0;\n  *(_QWORD *)(v12 + 24) = 0LL;\n  *(_QWORD *)(v12 + 32) = 0LL;\n  *(_QWORD *)(v12 + 40) = -1LL;\n  *(_QWORD *)(v12 + 48) = 0LL;\n  *(_QWORD *)(v12 + 56) = 0LL;\n  *(_QWORD *)(v12 + 64) = -1LL;\n  *(_QWORD *)(v12 + 80) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_17;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_17;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_131;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_131;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_17:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case 39:\n        *(_DWORD *)(v12 + 16) |= 1u;\n        goto LABEL_16;\n      case 45:\n        *(_DWORD *)(v12 + 16) |= 2u;\n        goto LABEL_16;\n      case 43:\n        *(_DWORD *)(v12 + 16) |= 4u;\n        goto LABEL_16;\n      case 32:\n        *(_DWORD *)(v12 + 16) |= 8u;\n        goto LABEL_16;\n      case 35:\n        *(_DWORD *)(v12 + 16) |= 0x10u;\n        goto LABEL_16;\n    }\n    if ( v13 != 48 )\n      break;\n    *(_DWORD *)(v12 + 16) |= 0x20u;\nLABEL_16:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *(_DWORD *)(v12 + 16) |= 0x40u;\n    goto LABEL_16;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *(_QWORD *)(v12 + 24) = v9;\n    *(_QWORD *)(v12 + 32) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_215;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 != 36 )\n    {\nLABEL_215:\n      v18 = *(_QWORD *)(v12 + 40);\n      if ( v18 == -1LL )\n      {\n        *(_QWORD *)(v12 + 40) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v18 = v81++;\n      }\n    }\n    else\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_131;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_131;\n      *(_QWORD *)(v12 + 40) = v18;\n      v14 = v47 + 2;\n    }\n    v19 = (_DWORD *)v5[1];\n    if ( v6 > v18 )\n    {\n      v20 = *v5;\nLABEL_43:\n      if ( v20 <= v18 )\n      {\n        do\n          v19[8 * ++v20 - 8] = 0;\n        while ( v20 <= v18 );\n        *v5 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_26;\n        }\n        goto LABEL_132;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_27;\nLABEL_48:\n      v22 = v9[1] == 42;\n      *(_QWORD *)(v12 + 48) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *(_QWORD *)(v12 + 56) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_27;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *(_QWORD *)(v12 + 56) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_216;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 != 36 )\n      {\nLABEL_216:\n        v26 = *(_QWORD *)(v12 + 64);\n        if ( v26 != -1LL )\n          goto LABEL_53;\n        *(_QWORD *)(v12 + 64) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_53;\n        }\n      }\n      else\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_131;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *(_QWORD *)(v12 + 64) = v26;\n          v24 = v72 + 2;\nLABEL_53:\n          v19 = (_DWORD *)v5[1];\n          if ( v6 > v26 )\n          {\n            v27 = *v5;\n            goto LABEL_55;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_163;\n              v27 = *v5;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)v5[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_161;\n              v27 = *v5;\n              if ( src != v40 )\n                goto LABEL_172;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *v5;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_172:\n            v5[1] = (unsigned __int64)v19;\nLABEL_55:\n            if ( v27 <= v26 )\n            {\n              do\n                v19[8 * ++v27 - 8] = 0;\n              while ( v27 <= v26 );\n              *v5 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_27;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_27;\n            }\n            goto LABEL_132;\n          }\nLABEL_160:\n          v40 = v19;\n          goto LABEL_161;\n        }\n      }\nLABEL_131:\n      v19 = (_DWORD *)v5[1];\nLABEL_132:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (void *)v4[1];\n      if ( (void *)v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_160;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_163;\n      v20 = *v5;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)v5[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_161;\n      v20 = *v5;\n      if ( src != v40 )\n        goto LABEL_94;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *v5;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_94:\n    v5[1] = (unsigned __int64)v19;\n    goto LABEL_43;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *(_QWORD *)(v12 + 24) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = (__int64)(i + 1);\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - (_QWORD)v9;\n      v9 = (char *)v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *(_QWORD *)(v12 + 32) = v9;\n    v13 = *v9;\n  }\nLABEL_26:\n  if ( v13 == 46 )\n    goto LABEL_48;\nLABEL_27:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_34;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_34;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_34:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case 37:\n      goto LABEL_71;\n    case 65:\n    case 69:\n    case 70:\n    case 71:\n    case 97:\n    case 101:\n    case 102:\n    case 103:\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_63;\n    case 67:\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_63;\n    case 83:\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_63;\n    case 88:\n    case 111:\n    case 117:\n    case 120:\n      v29 = 10;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 6 : 4;\n        }\n      }\n      goto LABEL_63;\n    case 99:\n      v29 = (v15 > 7) + 13;\n      goto LABEL_63;\n    case 100:\n    case 105:\n      v29 = 9;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 5 : 3;\n        }\n      }\n      goto LABEL_63;\n    case 110:\n      v29 = 22;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( !(v15 & 2) )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_63;\n    case 112:\n      v29 = 17;\n      goto LABEL_63;\n    case 115:\n      v29 = (v15 > 7) + 15;\nLABEL_63:\n      if ( v11 == -1LL )\n      {\n        *(_QWORD *)(v12 + 80) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v11 = v81++;\n      }\n      else\n      {\n        *(_QWORD *)(v12 + 80) = v11;\n      }\n      v19 = (_DWORD *)v5[1];\n      if ( v6 > v11 )\n        goto LABEL_66;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_160;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_163;\n        goto LABEL_159;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_211;\n      if ( src == (_DWORD *)v5[1] )\n      {\n        v19 = src;\nLABEL_159:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *v5);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      v5[1] = (unsigned __int64)v19;\nLABEL_66:\n      v30 = *v5;\n      if ( *v5 <= v11 )\n      {\n        do\n          v19[8 * ++v30 - 8] = 0;\n        while ( v30 <= v11 );\n        *v5 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_132;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_71:\n      *(_BYTE *)(v12 + 72) = v13;\n      v32 = *v4;\n      *(_QWORD *)(v12 + 8) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > v32 + 1 )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( (v7 & 0x8000000000000000LL) == 0LL )\n      {\n        v33 = 2 * v7;\n        if ( 2 * v7 <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (void *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( (void *)v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)v5[1];\n              if ( src != v40 )\n                goto LABEL_162;\n              goto LABEL_165;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_211;\n            v34 = (void *)v91[1];\n            v8 = *v91;\n            if ( (void *)v82 != v34 )\n              goto LABEL_78;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_78:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_211:\n      v40 = (_DWORD *)v5[1];\nLABEL_161:\n      if ( src != v40 )\n      {\nLABEL_162:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_163:\n      v58 = (void *)v4[1];\n      if ( (void *)v82 != v58 )\n        free(v58);\nLABEL_165:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_131;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x410160L", 
            "funcEndAddr": "0x410e69L", 
            "funcName": "sub_410160"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x410e70L", 
            "funcEndAddr": "0x410ecdL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x410ed0L", 
            "funcEndAddr": "0x410ed1L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_410EE0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_618288 )\n    v1 = (void *)unk_618288;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x410ee0L", 
            "funcEndAddr": "0x410ef8L", 
            "funcName": "sub_410EE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410EF8(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_617E30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x410ef8L", 
            "funcEndAddr": "0x410f18L", 
            "funcName": "sub_410EF8"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_touch.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 108, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}