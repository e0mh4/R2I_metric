{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  int v3; // er14\n  struct lconv *v4; // rax\n  const char *v5; // rdi\n  unsigned int v6; // ebx\n  unsigned __int8 v7; // bp\n  int v8; // er12\n  char *v9; // rax\n  char *v10; // rbx\n  int v11; // eax\n  const char **v12; // rbx\n  char **v13; // r15\n  char v14; // r13\n  char v15; // al\n  const char *v16; // r14\n  bool v17; // zf\n  bool v18; // al\n  void *v19; // rdi\n  __int64 v20; // r14\n  char *v21; // rax\n  char *v22; // r14\n  int *v23; // rax\n  const char *v25; // rsi\n  char *v26; // r14\n  int *v27; // rax\n  __int64 v28; // rbx\n  char *v29; // rax\n  char *v30; // rax\n  void *src; // [rsp+8h] [rbp-E0h]\n  __int64 v32; // [rsp+10h] [rbp-D8h]\n  __int64 v33; // [rsp+18h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+20h] [rbp-C8h]\n\n  v3 = a1;\n  sub_4072F0(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  v4 = localeconv();\n  v5 = v4->decimal_point;\n  if ( !*v4->decimal_point )\n    v5 = \".\";\n  v6 = 0;\n  v7 = 0;\n  qword_617478 = (__int64)v5;\n  qword_617470 = strlen(v5);\n  sub_410340(sub_405530);\n  src = 0LL;\n  while ( 1 )\n  {\n    v8 = sub_40ADD0((unsigned int)v3, a2, \"c:fLt\", &off_410E20, 0LL);\n    if ( v8 == -1 )\n      break;\n    if ( v8 == 99 )\n    {\n      byte_617480 = 0;\n      off_617310 = \"\\n\";\n      src = (void *)qword_617638;\n    }\n    else if ( v8 <= 99 )\n    {\n      if ( v8 == -130 )\n        sub_404870(0);\n      if ( v8 != 76 )\n      {\n        if ( v8 == -131 )\n        {\n          sub_409420((char)stdout);\n          exit(0);\n        }\nLABEL_14:\n        sub_404870(1);\n      }\n      byte_617481 = 1;\n    }\n    else\n    {\n      switch ( v8 )\n      {\n        case 116:\n          v6 = 1;\n          break;\n        case 128:\n          byte_617480 = 1;\n          off_617310 = \"\";\n          src = (void *)qword_617638;\n          break;\n        case 102:\n          v7 = 1;\n          break;\n        default:\n          goto LABEL_14;\n      }\n    }\n  }\n  if ( dword_61739C == v3 )\n  {\n    v30 = dcgettext(0LL, \"missing operand\", 5);\n    error(0, 0, v30);\n    goto LABEL_14;\n  }\n  if ( src )\n  {\n    v32 = (__int64)src;\n    if ( sub_40BD00(src, \"%N\") )\n    {\n      v9 = getenv(\"QUOTING_STYLE\");\n      v10 = v9;\n      if ( v9 )\n      {\n        v11 = sub_405190(v9, off_413240, dword_413200, 4LL);\n        if ( v11 < 0 )\n        {\n          sub_4088B0(0LL, 4LL);\n          v28 = sub_408F10(v10);\n          v29 = dcgettext(0LL, \"ignoring invalid value of environment variable QUOTING_STYLE: %s\", 5);\n          error(0, 0, v29, v28);\n        }\n        else\n        {\n          sub_4088B0(0LL, (unsigned int)dword_413200[v11]);\n        }\n        v32 = (__int64)src;\n      }\n      else\n      {\n        sub_4088B0(0LL, 4LL);\n        v32 = (__int64)src;\n      }\n    }\n  }\n  else\n  {\n    src = (void *)sub_403E80(v7, v6, 0LL);\n    v32 = sub_403E80(v7, v6, 1LL);\n  }\n  if ( v3 > dword_61739C )\n  {\n    v12 = (const char **)&a2[dword_61739C];\n    v13 = &(&a2[dword_61739C + 1])[(unsigned __int64)(unsigned int)(v3 + ~dword_61739C)];\n    v14 = 1;\n    while ( 1 )\n    {\n      v16 = *v12;\n      v17 = strcmp(*v12, \"-\") == 0;\n      if ( v7 )\n      {\n        if ( v17 )\n        {\n          v20 = sub_408CC0(4LL, *v12);\n          v21 = dcgettext(0LL, \"using %s to denote standard input does not work in file system mode\", 5);\n          error(0, 0, v21, v20);\n          v15 = 0;\n        }\n        else\n        {\n          if ( statfs(*v12, (struct statfs *)&stat_buf) )\n          {\n            v25 = \"cannot read file system information for %s\";\n            v33 = sub_408CC0(4LL, v16);\nLABEL_49:\n            v26 = dcgettext(0LL, v25, 5);\n            v27 = __errno_location();\n            error(0, *v27, v26, v33);\n            v15 = 0;\n            goto LABEL_33;\n          }\n          v15 = (unsigned __int64)sub_4037B0(src) ^ 1;\n        }\n      }\n      else\n      {\n        if ( !v17 )\n        {\n          if ( byte_617481 )\n            v18 = __xstat(1, *v12, &stat_buf) != 0;\n          else\n            v18 = __lxstat(1, *v12, &stat_buf) != 0;\n          if ( !v18 )\n          {\nLABEL_39:\n            v19 = (void *)v32;\n            if ( (stat_buf.st_mode & 0xB000) != 0x2000 )\n              v19 = src;\n            v15 = (unsigned __int64)sub_4037B0(v19) ^ 1;\n            goto LABEL_33;\n          }\n          v25 = \"cannot stat %s\";\n          v33 = sub_408CC0(4LL, v16);\n          goto LABEL_49;\n        }\n        if ( !__fxstat(1, 0, &stat_buf) )\n          goto LABEL_39;\n        v22 = dcgettext(0LL, \"cannot stat standard input\", 5);\n        v23 = __errno_location();\n        error(0, *v23, v22);\n        v15 = 0;\n      }\nLABEL_33:\n      ++v12;\n      v14 &= v15;\n      if ( v13 == (char **)v12 )\n        return (unsigned __int8)v14 ^ 1u;\n    }\n  }\n  v14 = 1;\n  return (unsigned __int8)v14 ^ 1u;\n}\n", 
            "funcStartAddr": "0x402390L", 
            "funcEndAddr": "0x4028a0L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x4028a0L", 
            "funcEndAddr": "0x4028cbL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_4028CB()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4028cbL", 
            "funcEndAddr": "0x4028eaL", 
            "funcName": "sub_4028CB"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4028EA()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4028eaL", 
            "funcEndAddr": "0x402921L", 
            "funcName": "sub_4028EA"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_402921()\n{\n  __int64 *result; // rax\n\n  if ( !byte_6173C8 )\n  {\n    while ( qword_6173D0 < (unsigned __int64)(&qword_616E48 - qword_616E40 - 1) )\n      ((void (*)(void))qword_616E40[++qword_6173D0])();\n    result = sub_4028CB();\n    byte_6173C8 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x402921L", 
            "funcEndAddr": "0x402978L", 
            "funcName": "sub_402921"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402978()\n{\n  return sub_4028EA();\n}\n", 
            "funcStartAddr": "0x402978L", 
            "funcEndAddr": "0x40297dL", 
            "funcName": "sub_402978"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_402980(__int64 a1, __int64 a2, const char *a3, char *a4)\n{\n  const char *v4; // r15\n  unsigned __int64 v5; // r13\n  char *v6; // r12\n  unsigned __int64 v7; // rbx\n  int v8; // er14\n  char v9; // bp\n  char *v10; // rax\n  char *v11; // r13\n  char *src; // [rsp+8h] [rbp-40h]\n\n  v4 = a3;\n  v5 = a1 + a2;\n  v6 = (char *)(a1 + 1);\n  v7 = a1 + 1;\n  src = a4;\n  if ( a1 + 1 < (unsigned __int64)(a1 + a2) )\n  {\n    while ( 1 )\n    {\n      v8 = *(char *)v7;\n      v9 = *(_BYTE *)v7;\n      v10 = strchr(\"'-+ #0I\", v8);\n      if ( !v10 )\n        break;\n      if ( strchr(v4, v8) )\n        *v6++ = v9;\n      if ( v5 <= ++v7 )\n        return strcpy(v6, src);\n    }\n    if ( v7 < v5 )\n    {\n      v11 = (char *)(v5 - v7);\n      while ( 1 )\n      {\n        (v10++)[(_QWORD)v6] = v9;\n        if ( v11 == v10 )\n          break;\n        v9 = v10[v7];\n      }\n      v6 = &v6[(_QWORD)v11];\n    }\n  }\n  return strcpy(v6, src);\n}\n", 
            "funcStartAddr": "0x402980L", 
            "funcEndAddr": "0x402a27L", 
            "funcName": "sub_402980"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402A30(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n\n  v3 = a3;\n  sub_402980(a1, a2, (const char *)&unk_4103A7, (char *)&unk_4103A4);\n  return __printf_chk(1LL, a1, v3);\n}\n", 
            "funcStartAddr": "0x402a30L", 
            "funcEndAddr": "0x402a63L", 
            "funcName": "sub_402A30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402A70(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n\n  v3 = a3;\n  sub_402980(a1, a2, \"-\", \"s\");\n  return __printf_chk(1LL, a1, v3);\n}\n", 
            "funcStartAddr": "0x402a70L", 
            "funcEndAddr": "0x402aa3L", 
            "funcName": "sub_402A70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402AB0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n\n  v3 = a3;\n  sub_402980(a1, a2, (const char *)&unk_4103AE, (char *)&unk_4103AB);\n  return __printf_chk(1LL, a1, v3);\n}\n", 
            "funcStartAddr": "0x402ab0L", 
            "funcEndAddr": "0x402ae3L", 
            "funcName": "sub_402AB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402AF0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n\n  v3 = a3;\n  sub_402980(a1, a2, \"'-+ 0\", (char *)&unk_4103B2);\n  return __printf_chk(1LL, a1, v3);\n}\n", 
            "funcStartAddr": "0x402af0L", 
            "funcEndAddr": "0x402b23L", 
            "funcName": "sub_402AF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402B30(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // rdx\n  __int64 v8; // r8\n  char *v9; // rdx\n  char *v10; // rax\n\n  switch ( a3 )\n  {\n    case 83:\n      v6 = *(_QWORD *)(a6 + 72);\n      if ( v6 )\n        goto LABEL_4;\n      goto LABEL_3;\n    case 84:\n      v8 = *(_QWORD *)a6;\n      if ( *(_QWORD *)a6 == 684539205LL )\n      {\n        v9 = (char *)&unk_41044A;\n      }\n      else if ( *(_QWORD *)a6 <= 684539205LL )\n      {\n        if ( v8 == 44533 )\n        {\n          v9 = \"adfs\";\n        }\n        else if ( v8 <= 44533 )\n        {\n          if ( v8 == 16964 )\n          {\n            v9 = \"squashfs\" + 5;\n          }\n          else if ( v8 > 16964 )\n          {\n            if ( v8 == 24053 )\n            {\n              v9 = \"exofs\";\n            }\n            else if ( v8 <= 24053 )\n            {\n              if ( v8 == 19780 )\n              {\n                v9 = \"msdos\";\n              }\n              else if ( v8 <= 19780 )\n              {\n                v9 = \"hfs+\";\n                if ( v8 != 18475 )\n                {\n                  v9 = \"hfsx\";\n                  if ( v8 != 18520 )\n                    goto LABEL_20;\n                }\n              }\n              else\n              {\n                v9 = \"smb\";\n                if ( v8 != 20859 )\n                {\n                  v9 = \"novell\";\n                  if ( v8 != 22092 )\n                  {\n                    v9 = \"minix3\";\n                    if ( v8 != 19802 )\n                      goto LABEL_20;\n                  }\n                }\n              }\n            }\n            else if ( v8 == 38496 )\n            {\n              v9 = \"isofs\";\n            }\n            else if ( v8 > 38496 )\n            {\n              v9 = \"openprom\";\n              if ( v8 != 40865 )\n              {\n                v9 = \"usbdevfs\";\n                if ( v8 != 40866 )\n                {\n                  v9 = \"proc\";\n                  if ( v8 != 40864 )\n                    goto LABEL_20;\n                }\n              }\n            }\n            else\n            {\n              v9 = \"romfs\";\n              if ( v8 != 29301 )\n              {\n                v9 = \"jffs2\";\n                if ( v8 != 29366 )\n                {\n                  v9 = \"nfs\";\n                  if ( v8 != 26985 )\n                    goto LABEL_20;\n                }\n              }\n            }\n          }\n          else if ( v8 == 5007 )\n          {\n            v9 = \"minix (30 char.)\";\n          }\n          else if ( v8 <= 5007 )\n          {\n            if ( v8 == 1984 )\n            {\n              v9 = \"jffs\";\n            }\n            else if ( v8 <= 1984 )\n            {\n              v9 = \"qnx4\";\n              if ( v8 != 47 )\n              {\n                v9 = \"autofs\";\n                if ( v8 != 391 )\n                  goto LABEL_20;\n              }\n            }\n            else\n            {\n              v9 = \"ext\";\n              if ( v8 != 4989 )\n              {\n                v9 = \"minix\";\n                if ( v8 != 4991 )\n                {\n                  v9 = \"usbdevfs\" + 3;\n                  if ( v8 != 4979 )\n                    goto LABEL_20;\n                }\n              }\n            }\n          }\n          else if ( v8 == 13364 )\n          {\n            v9 = \"nilfs\";\n          }\n          else if ( v8 > 13364 )\n          {\n            v9 = \"isofs\";\n            if ( v8 != 16388 )\n            {\n              v9 = \"fat\";\n              if ( v8 != 16390 )\n              {\n                v9 = \"isofs\";\n                if ( v8 != 0x4000 )\n                  goto LABEL_20;\n              }\n            }\n          }\n          else\n          {\n            v9 = \"minix v2\";\n            if ( v8 != 9320 )\n            {\n              v9 = \"minix v2 (30 char.)\";\n              if ( v8 != 9336 )\n              {\n                v9 = \"devpts\";\n                if ( v8 != 7377 )\n                  goto LABEL_20;\n              }\n            }\n          }\n        }\n        else if ( v8 == 19920821 )\n        {\n          v9 = \"sysv4\";\n        }\n        else if ( v8 > 19920821 )\n        {\n          if ( v8 == 198183888 )\n          {\n            v9 = \"lustre\";\n          }\n          else if ( v8 <= 198183888 )\n          {\n            if ( v8 == 19993000 )\n            {\n              v9 = \"ibrix\";\n            }\n            else if ( v8 <= 19993000 )\n            {\n              v9 = \"sysv2\";\n              if ( v8 != 19920822 )\n              {\n                v9 = \"coh\";\n                if ( v8 != 19920823 )\n                  goto LABEL_20;\n              }\n            }\n            else\n            {\n              v9 = \"anon-inode FS\";\n              if ( v8 != 151263540 )\n              {\n                v9 = \"futexfs\";\n                if ( v8 != 195894762 )\n                {\n                  v9 = \"rdt\";\n                  if ( v8 != 124082209 )\n                    goto LABEL_20;\n                }\n              }\n            }\n          }\n          else if ( v8 == 427819522 )\n          {\n            v9 = \"mqueue\";\n          }\n          else if ( v8 > 427819522 )\n          {\n            v9 = \"hugetlbfs\" + 6;\n            if ( v8 != 464386766 )\n            {\n              v9 = \"ubifs\";\n              if ( v8 != 604313861 )\n              {\n                v9 = \"fhgfs\";\n                if ( v8 != 428016422 )\n                  goto LABEL_20;\n              }\n            }\n          }\n          else\n          {\n            v9 = \"balloon-kvm-fs\";\n            if ( v8 != 325456742 )\n            {\n              v9 = \"udf\";\n              if ( v8 != 352400198 )\n              {\n                v9 = \"inodefs\";\n                if ( v8 != 288389204 )\n                  goto LABEL_20;\n              }\n            }\n          }\n        }\n        else if ( (_UNKNOWN *)v8 == &unk_414A53 )\n        {\n          v9 = \"befs\" + 1;\n        }\n        else if ( v8 <= (__int64)&unk_414A53 )\n        {\n          if ( v8 == 61267 )\n          {\n            v9 = \"ext2/ext3\";\n          }\n          else if ( v8 <= 61267 )\n          {\n            v9 = \"affs\";\n            if ( v8 != 44543 )\n            {\n              v9 = \"ext2\";\n              if ( v8 != 61265 )\n                goto LABEL_20;\n            }\n          }\n          else\n          {\n            v9 = \"aufs\" + 1;\n            if ( v8 != 72020 )\n            {\n              v9 = \"cgroupfs\";\n              if ( v8 != 2613483 )\n              {\n                v9 = \"ecryptfs\";\n                if ( v8 != 61791 )\n                  goto LABEL_20;\n              }\n            }\n          }\n        }\n        else if ( v8 == 16914839 )\n        {\n          v9 = \"v9fs\";\n        }\n        else if ( v8 > 16914839 )\n        {\n          v9 = \"xia\";\n          if ( v8 != 19911021 )\n          {\n            v9 = \"xenix\";\n            if ( v8 != 19920820 )\n            {\n              v9 = \"gfs/gfs2\";\n              if ( v8 != 18225520 )\n                goto LABEL_20;\n            }\n          }\n        }\n        else\n        {\n          v9 = \"ceph\";\n          if ( v8 != 12805120 )\n          {\n            v9 = \"tmpfs\";\n            if ( v8 != 16914836 )\n            {\n              v9 = \"hostfs\";\n              if ( v8 != 12648430 )\n                goto LABEL_20;\n            }\n          }\n        }\n      }\n      else if ( v8 == 1702057283 )\n      {\n        v9 = \"fusectl\";\n      }\n      else if ( v8 <= 1702057283 )\n      {\n        if ( v8 == 1397703499 )\n        {\n          v9 = \"sockfs\";\n        }\n        else if ( v8 > 1397703499 )\n        {\n          if ( v8 == 1634035564 )\n          {\n            v9 = \"pstorefs\";\n          }\n          else if ( v8 <= 1634035564 )\n          {\n            if ( v8 == 1479104553 )\n            {\n              v9 = \"zsmallocfs\";\n            }\n            else if ( v8 <= 1479104553 )\n            {\n              v9 = \"aufs\" + 1;\n              if ( v8 != 1410924800 )\n              {\n                v9 = \"vzfs\";\n                if ( v8 != 1448756819 )\n                  goto LABEL_20;\n              }\n            }\n            else\n            {\n              v9 = \"aafs\";\n              if ( v8 != 1513908720 )\n              {\n                v9 = \"acfs\";\n                if ( v8 != 1633904243 )\n                {\n                  v9 = \"daxfs\" + 2;\n                  if ( v8 != 1481003842 )\n                    goto LABEL_20;\n                }\n              }\n            }\n          }\n          else if ( v8 == 1650812274 )\n          {\n            v9 = \"sysfs\";\n          }\n          else if ( v8 > 1650812274 )\n          {\n            v9 = \"debugfs\";\n            if ( v8 != 1684170528 )\n            {\n              v9 = \"daxfs\";\n              if ( v8 != 1684300152 )\n              {\n                v9 = \"cgroup2fs\";\n                if ( v8 != 1667723888 )\n                  goto LABEL_20;\n              }\n            }\n          }\n          else\n          {\n            v9 = \"usbdevfs\" + 2;\n            if ( v8 != 1650746742 )\n            {\n              v9 = \"configfs\";\n              if ( v8 != 1650812272 )\n              {\n                v9 = \"aufs\";\n                if ( v8 != 1635083891 )\n                  goto LABEL_20;\n              }\n            }\n          }\n        }\n        else if ( v8 == 1161678120 )\n        {\n          v9 = \"cramfs-wend\";\n        }\n        else if ( v8 <= 1161678120 )\n        {\n          if ( v8 == 827541066 )\n          {\n            v9 = \"jfs\";\n          }\n          else if ( v8 <= 827541066 )\n          {\n            v9 = \"inotifyfs\";\n            if ( v8 != 732765674 )\n            {\n              v9 = \"zfs\";\n              if ( v8 != 801189825 )\n                goto LABEL_20;\n            }\n          }\n          else\n          {\n            v9 = \"binfmt_misc\";\n            if ( v8 != 1112100429 )\n            {\n              v9 = \"smackfs\";\n              if ( v8 != 1128357203 )\n              {\n                v9 = \"befs\";\n                if ( v8 != 1111905073 )\n                  goto LABEL_20;\n              }\n            }\n          }\n        }\n        else if ( v8 == 1397109069 )\n        {\n          v9 = \"m1fs\";\n        }\n        else if ( v8 > 1397109069 )\n        {\n          v9 = \"wslfs\";\n          if ( v8 != 1397114950 )\n          {\n            v9 = \"ntfs\";\n            if ( v8 != 1397118030 )\n            {\n              v9 = \"afs\";\n              if ( v8 != 1397113167 )\n                goto LABEL_20;\n            }\n          }\n        }\n        else\n        {\n          v9 = \"pipefs\";\n          if ( v8 != 1346981957 )\n          {\n            v9 = \"reiserfs\";\n            if ( v8 != 1382369651 )\n            {\n              v9 = \"gpfs\";\n              if ( v8 != 1196443219 )\n                goto LABEL_20;\n            }\n          }\n        }\n      }\n      else if ( v8 == 2240043254LL )\n      {\n        v9 = \"ramfs\";\n      }\n      else if ( v8 <= 2240043254LL )\n      {\n        if ( v8 == 1935894131 )\n        {\n          v9 = \"securityfs\";\n        }\n        else if ( v8 <= 1935894131 )\n        {\n          if ( v8 == 1746473250 )\n          {\n            v9 = \"qnx6\";\n          }\n          else if ( v8 <= 1746473250 )\n          {\n            v9 = \"fuseblk\";\n            if ( v8 != 1702057286 )\n            {\n              v9 = (char *)&unk_4105FC;\n              if ( v8 != 1733912937 )\n                goto LABEL_20;\n            }\n          }\n          else\n          {\n            v9 = \"nfsd\";\n            if ( v8 != 1852207972 )\n            {\n              v9 = \"nsfs\";\n              if ( v8 != 1853056627 )\n              {\n                v9 = \"k-afs\";\n                if ( v8 != 1799439955 )\n                  goto LABEL_20;\n              }\n            }\n          }\n        }\n        else if ( v8 == 1952539503 )\n        {\n          v9 = \"ocfs2\";\n        }\n        else if ( v8 > 1952539503 )\n        {\n          v9 = \"overlayfs\";\n          if ( v8 != 2035054128 )\n          {\n            v9 = \"prl_fs\";\n            if ( v8 != 2088527475 )\n            {\n              v9 = \"tracefs\";\n              if ( v8 != 1953653091 )\n                goto LABEL_20;\n            }\n          }\n        }\n        else\n        {\n          v9 = \"btrfs_test\";\n          if ( v8 != 1936880249 )\n          {\n            v9 = \"coda\";\n            if ( v8 != 1937076805 )\n            {\n              v9 = \"squashfs\";\n              if ( v8 != 1936814952 )\n                goto LABEL_20;\n            }\n          }\n        }\n      }\n      else if ( v8 == 3380511080LL )\n      {\n        v9 = \"logfs\";\n      }\n      else if ( v8 <= 3380511080LL )\n      {\n        if ( v8 == 2866260714LL )\n        {\n          v9 = \"panfs\";\n        }\n        else if ( v8 > 2866260714LL )\n        {\n          v9 = \"vmhgfs\";\n          if ( v8 != 3133910204LL )\n          {\n            v9 = \"snfs\";\n            if ( v8 != 3203391149LL )\n            {\n              v9 = \"xenfs\";\n              if ( v8 != 2881100148LL )\n                goto LABEL_20;\n            }\n          }\n        }\n        else\n        {\n          v9 = \"hugetlbfs\";\n          if ( v8 != 2508478710LL )\n          {\n            v9 = \"vxfs\";\n            if ( v8 != 2768370933LL )\n            {\n              v9 = \"btrfs\";\n              if ( v8 != 2435016766LL )\n                goto LABEL_20;\n            }\n          }\n        }\n      }\n      else if ( v8 == 4185718668LL )\n      {\n        v9 = \"selinux\";\n      }\n      else if ( v8 > 4185718668LL )\n      {\n        v9 = \"smb2\";\n        if ( v8 != 4266872130LL )\n        {\n          v9 = \"cifs\";\n          if ( v8 != 4283649346LL )\n          {\n            v9 = \"hpfs\";\n            if ( v8 != 4187351113LL )\n              goto LABEL_20;\n          }\n        }\n      }\n      else\n      {\n        v9 = \"efivarfs\";\n        if ( v8 != 3730735588LL )\n        {\n          v9 = \"f2fs\";\n          if ( v8 != 4076150800LL )\n          {\n            v9 = \"bpf_fs\";\n            if ( v8 != 3405662737LL )\n            {\nLABEL_20:\n              __sprintf_chk(&unk_617450, 1LL, 29LL, \"UNKNOWN (0x%lx)\");\n              v9 = (char *)&unk_617450;\n              goto LABEL_21;\n            }\n          }\n        }\n      }\nLABEL_21:\n      sub_402A70(a1, a2, (__int64)v9);\n      return 0LL;\n    case 97:\n      sub_402AF0(a1, a2, *(_QWORD *)(a6 + 32));\n      return 0LL;\n    case 98:\n      sub_402AF0(a1, a2, *(_QWORD *)(a6 + 16));\n      return 0LL;\n    case 99:\n      v6 = *(_QWORD *)(a6 + 40);\n      goto LABEL_4;\n    case 100:\n      sub_402AF0(a1, a2, *(_QWORD *)(a6 + 48));\n      return 0LL;\n    case 102:\n      sub_402AF0(a1, a2, *(_QWORD *)(a6 + 24));\n      return 0LL;\n    case 105:\n      sub_402A30(a1, a2, *(unsigned int *)(a6 + 60) | ((unsigned __int64)*(unsigned int *)(a6 + 56) << 32));\n      return 0LL;\n    case 108:\n      sub_402AB0(a1, a2, *(_QWORD *)(a6 + 64));\n      return 0LL;\n    case 110:\n      sub_402A70(a1, a2, a5);\n      return 0LL;\n    case 115:\nLABEL_3:\n      v6 = *(_QWORD *)(a6 + 8);\nLABEL_4:\n      sub_402AB0(a1, a2, v6);\n      return 0LL;\n    case 116:\n      sub_402A30(a1, a2, *(_QWORD *)a6);\n      return 0LL;\n    default:\n      v10 = stdout->_IO_write_ptr;\n      if ( v10 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 63);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v10 + 1;\n        *v10 = 63;\n      }\n      return 0LL;\n  }\n}\n", 
            "funcStartAddr": "0x402b30L", 
            "funcEndAddr": "0x4037afL", 
            "funcName": "sub_402B30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4037B0(void *src, unsigned int a2, __int64 a3, __int64 (__fastcall *a4)(void *, __int64, _QWORD, _QWORD, __int64, __int64), __int64 a5)\n{\n  const char *v5; // r14\n  size_t v6; // rax\n  __int64 v7; // rax\n  int v8; // esi\n  void *v9; // rbx\n  char *v10; // rax\n  __int64 v11; // rbp\n  __int64 v12; // r12\n  char v13; // bp\n  char *v14; // rax\n  char *v15; // rax\n  char *v16; // rbp\n  size_t v18; // rax\n  char v19; // r15\n  __int64 v20; // r13\n  __int64 v21; // r12\n  char *v22; // rax\n  unsigned int v23; // er13\n  const unsigned __int16 **v24; // rax\n  __int64 v25; // rcx\n  const unsigned __int16 *v26; // rdx\n  char v27; // al\n  char *v28; // rax\n  char *v29; // rax\n  int v30; // er10\n  char *v31; // rax\n  unsigned __int8 v32; // si\n  unsigned __int8 v33; // cl\n  bool v34; // cc\n  unsigned __int8 v35; // al\n  __int64 v36; // rsi\n  char v37; // al\n  char v38; // dl\n  char *v39; // rdx\n  char v40; // si\n  __int64 v41; // rbx\n  char *v42; // rax\n  unsigned __int8 v43; // [rsp+3h] [rbp-55h]\n  unsigned int v44; // [rsp+4h] [rbp-54h]\n  __int64 v45; // [rsp+8h] [rbp-50h]\n  __int64 (__fastcall *v46)(void *, __int64, _QWORD, _QWORD, __int64, __int64); // [rsp+10h] [rbp-48h]\n  __int64 v47; // [rsp+18h] [rbp-40h]\n\n  v5 = (const char *)src;\n  v44 = a2;\n  v45 = a3;\n  v46 = a4;\n  v47 = a5;\n  v6 = strlen((const char *)src);\n  v7 = sub_409560(v6 + 3);\n  v8 = *(unsigned __int8 *)src;\n  v43 = 0;\n  v9 = (void *)v7;\n  if ( !(_BYTE)v8 )\n  {\nLABEL_15:\n    free(v9);\n    fputs_unlocked(off_617310, stdout);\n    return v43;\n  }\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v12 = (__int64)(v5 + 1);\n      if ( (_BYTE)v8 == 37 )\n        break;\n      if ( (_BYTE)v8 != 92 )\n      {\n        v10 = stdout->_IO_write_ptr;\n        if ( v10 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v8);\n          v11 = (__int64)v5++;\n        }\n        else\n        {\n          v11 = (__int64)v5++;\n          stdout->_IO_write_ptr = v10 + 1;\n          *v10 = v8;\n        }\n        goto LABEL_5;\n      }\n      if ( byte_617480 )\n      {\n        v13 = v5[1];\n        if ( (unsigned __int8)(v13 - 48) <= 7u )\n        {\n          v30 = v13 - 48;\n          if ( (unsigned __int8)(v5[2] - 48) > 7u )\n          {\n            v5 += 2;\n          }\n          else\n          {\n            v30 = v5[2] + 8 * v30 - 48;\n            if ( (unsigned __int8)(v5[3] - 48) > 7u )\n            {\n              v5 += 3;\n            }\n            else\n            {\n              v30 = v5[3] + 8 * v30 - 48;\n              v5 += 4;\n            }\n          }\n          v31 = stdout->_IO_write_ptr;\n          if ( v31 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, (unsigned __int8)v30);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v31 + 1;\n            *v31 = v30;\n          }\n          v11 = (__int64)(v5 - 1);\n          goto LABEL_5;\n        }\n        if ( v13 == 120 )\n        {\n          v24 = __ctype_b_loc();\n          v25 = *((unsigned __int8 *)v5 + 2);\n          v26 = *v24;\n          v27 = v5[2];\n          if ( v26[v25] & 0x1000 )\n          {\n            if ( (unsigned __int8)(v27 - 97) <= 5u )\n            {\n              v35 = v25 - 87;\n            }\n            else\n            {\n              v32 = v25 - 55;\n              v33 = v25 - 48;\n              v34 = (unsigned __int8)(v27 - 65) <= 5u;\n              v35 = v32;\n              if ( !v34 )\n                v35 = v33;\n            }\n            v36 = *((unsigned __int8 *)v5 + 3);\n            v11 = (__int64)(v5 + 2);\n            if ( v26[v36] & 0x1000 )\n            {\n              v11 = (__int64)(v5 + 3);\n              v37 = 16 * v35;\n              if ( (unsigned __int8)(v36 - 97) > 5u )\n              {\n                v40 = v36 - 55;\n                v38 = v5[3] - 48;\n                if ( (unsigned __int8)(v5[3] - 65) <= 5u )\n                  v38 = v40;\n              }\n              else\n              {\n                v38 = v36 - 87;\n              }\n              v35 = v38 + v37;\n            }\n            v5 = (const char *)(v11 + 1);\n            v39 = stdout->_IO_write_ptr;\n            if ( v39 >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, v35);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v39 + 1;\n              *v39 = v35;\n            }\n            goto LABEL_5;\n          }\n          v23 = 120;\nLABEL_28:\n          v28 = dcgettext(0LL, \"warning: unrecognized escape '\\\\%c'\", 5);\n          error(0, 0, v28, v23);\n          goto LABEL_29;\n        }\n        if ( v13 )\n        {\n          v23 = v13;\n          switch ( v13 )\n          {\n            case 34:\n            case 92:\n              break;\n            case 97:\n              LOBYTE(v23) = 7;\n              v13 = 7;\n              break;\n            case 98:\n              LOBYTE(v23) = 8;\n              v13 = 8;\n              break;\n            case 101:\n              LOBYTE(v23) = 27;\n              v13 = 27;\n              break;\n            case 102:\n              LOBYTE(v23) = 12;\n              v13 = 12;\n              break;\n            case 110:\n              LOBYTE(v23) = 10;\n              v13 = 10;\n              break;\n            case 114:\n              LOBYTE(v23) = 13;\n              v13 = 13;\n              break;\n            case 116:\n              LOBYTE(v23) = 9;\n              v13 = 9;\n              break;\n            case 118:\n              LOBYTE(v23) = 11;\n              v13 = 11;\n              break;\n            default:\n              goto LABEL_28;\n          }\nLABEL_29:\n          v5 += 2;\n          v29 = stdout->_IO_write_ptr;\n          if ( v29 >= stdout->_IO_write_end )\n          {\n            v11 = v12;\n            __overflow(stdout, (unsigned __int8)v23);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v29 + 1;\n            *v29 = v13;\n            v11 = v12;\n          }\n          goto LABEL_5;\n        }\n        v14 = dcgettext(0LL, \"warning: backslash at end of format\", 5);\n        error(0, 0, v14);\n      }\n      v15 = stdout->_IO_write_ptr;\n      if ( v15 >= stdout->_IO_write_end )\n      {\n        v11 = (__int64)v5++;\n        __overflow(stdout, 92);\n        goto LABEL_5;\n      }\n      v16 = (char *)v5++;\n      stdout->_IO_write_ptr = v15 + 1;\n      *v15 = 92;\n      v8 = (unsigned __int8)v16[1];\n      if ( !(_BYTE)v8 )\n        goto LABEL_15;\n    }\n    v18 = strspn(v5 + 1, \"'-+ #0I\");\n    v11 = (__int64)&v5[v18 + 1 + strspn(&v5[v18 + 1], \"0123456789\")];\n    v19 = *(_BYTE *)v11;\n    if ( *(_BYTE *)v11 == 46 )\n    {\n      v11 += strspn((const char *)(v11 + 1), \"0123456789\") + 1;\n      v19 = *(_BYTE *)v11;\n    }\n    v20 = v11 - (_QWORD)v5;\n    v21 = v11 - v12;\n    memcpy(v9, v5, v11 - (_QWORD)v5);\n    if ( !v19 )\n      break;\n    if ( v19 == 37 )\n      goto LABEL_22;\n    v5 = (const char *)(v11 + 1);\n    v43 |= v46(v9, v20, (unsigned int)v19, v44, v45, v47);\nLABEL_5:\n    v8 = *(unsigned __int8 *)(v11 + 1);\n    if ( !(_BYTE)v8 )\n      goto LABEL_15;\n  }\n  --v11;\nLABEL_22:\n  if ( !v21 )\n  {\n    v5 = (const char *)(v11 + 1);\n    v22 = stdout->_IO_write_ptr;\n    if ( v22 >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, 37);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v22 + 1;\n      *v22 = 37;\n    }\n    goto LABEL_5;\n  }\n  *((_BYTE *)v9 + v20) = v19;\n  *((_BYTE *)v9 + v21 + 2) = 0;\n  v41 = sub_408F10(v9);\n  v42 = dcgettext(0LL, \"%s: invalid directive\", 5);\n  error(1, 0, v42, v41);\n  return sub_403CA0();\n}\n", 
            "funcStartAddr": "0x4037b0L", 
            "funcEndAddr": "0x403ca0L", 
            "funcName": "sub_4037B0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_403CA0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rdi\n  unsigned int v3; // ebx\n  char *v5; // rax\n  __int64 v6; // [rsp+0h] [rbp-78h]\n  __int64 v7; // [rsp+8h] [rbp-70h]\n  char v8; // [rsp+10h] [rbp-68h]\n  char v9; // [rsp+30h] [rbp-48h]\n\n  v6 = a1;\n  v2 = qword_617420;\n  v7 = a2;\n  if ( !qword_617420 )\n  {\n    v5 = getenv(\"TZ\");\n    v2 = sub_40C170(v5);\n    qword_617420 = v2;\n  }\n  v3 = v7;\n  if ( sub_40C450(v2, &v6, &v9) )\n  {\n    sub_4072D0(&unk_6173E0, 61LL, \"%Y-%m-%d %H:%M:%S.%N %z\", &v9, qword_617420, v3);\n  }\n  else\n  {\n    sub_4059C0(v6, &v8);\n    __sprintf_chk(&unk_6173E0, 1LL, 61LL, \"%s.%09d\");\n  }\n  return &unk_6173E0;\n}\n", 
            "funcStartAddr": "0x403ca0L", 
            "funcEndAddr": "0x403d69L", 
            "funcName": "sub_403CA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403D70(char *s2)\n{\n  __int64 v1; // rbx\n  const char *v2; // rbp\n  char *v4; // rbx\n  int *v5; // rax\n  __int64 v6; // [rsp+0h] [rbp-138h]\n  __int64 v7; // [rsp+8h] [rbp-130h]\n  struct stat stat_buf; // [rsp+90h] [rbp-A8h]\n\n  if ( !byte_617430 )\n  {\n    qword_617428 = sub_40B0C0(0LL);\n    if ( !qword_617428 )\n    {\n      v4 = dcgettext(0LL, \"cannot read table of mounted file systems\", 5);\n      v5 = __errno_location();\n      error(0, *v5, \"%s\", v4);\n    }\n    byte_617430 = 1;\n  }\n  if ( __xstat(1, s2, (struct stat *)&v6) )\n    return 0LL;\n  v1 = qword_617428;\n  if ( !qword_617428 )\n    return 0LL;\n  while ( 1 )\n  {\n    if ( *(_BYTE *)(v1 + 40) & 1 )\n    {\n      v2 = *(const char **)v1;\n      if ( **(_BYTE **)v1 == 47\n        && !strcmp(*(const char **)(v1 + 8), s2)\n        && !__xstat(1, v2, &stat_buf)\n        && v7 == stat_buf.st_ino\n        && v6 == stat_buf.st_dev )\n      {\n        break;\n      }\n    }\n    v1 = *(_QWORD *)(v1 + 48);\n    if ( !v1 )\n      return 0LL;\n  }\n  return *(_QWORD *)v1;\n}\n", 
            "funcStartAddr": "0x403d70L", 
            "funcEndAddr": "0x403e7dL", 
            "funcName": "sub_403D70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403E80(char a1, char a2, char a3)\n{\n  __int64 result; // rax\n  char *v4; // rax\n  char v5; // bl\n  char *v6; // rax\n  const char *v7; // rsi\n  void *v8; // r12\n  void *v9; // rbp\n  void *v10; // rbx\n  __int64 v11; // rbp\n\n  if ( a1 )\n  {\n    if ( a2 )\n    {\n      result = sub_409790(\"%n %i %l %t %s %S %b %f %a %c %d\\n\");\n    }\n    else\n    {\n      v4 = dcgettext(\n             0LL,\n             \"  File: \\\"%n\\\"\\n\"\n             \"    ID: %-8i Namelen: %-7l Type: %T\\n\"\n             \"Block size: %-10s Fundamental block size: %S\\n\"\n             \"Blocks: Total: %-10b Free: %-10f Available: %a\\n\"\n             \"Inodes: Total: %-10c Free: %d\\n\",\n             5);\n      result = sub_409790(v4);\n    }\n  }\n  else if ( a2 )\n  {\n    result = sub_409790(\"%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %W %o\\n\");\n  }\n  else\n  {\n    v5 = a3;\n    v6 = dcgettext(0LL, \"  File: %N\\n  Size: %-10s\\tBlocks: %-10b IO Block: %-6o %F\\n\", 5);\n    v7 = \"Device: %Dh/%dd\\tInode: %-10i  Links: %-5h Device type: %t,%T\\n\";\n    v8 = (void *)sub_409790(v6);\n    if ( !v5 )\n      v7 = \"Device: %Dh/%dd\\tInode: %-10i  Links: %h\\n\";\n    dcgettext(0LL, v7, 5);\n    v9 = (void *)sub_409820((unsigned __int64)\"%s%s\");\n    free(v8);\n    dcgettext(0LL, \"Access: (%04a/%10.10A)  Uid: (%5u/%8U)   Gid: (%5g/%8G)\\n\", 5);\n    v10 = (void *)sub_409820((unsigned __int64)\"%s%s\");\n    free(v9);\n    dcgettext(0LL, \"Access: %x\\nModify: %y\\nChange: %z\\n Birth: %w\\n\", 5);\n    v11 = sub_409820((unsigned __int64)\"%s%s\");\n    free(v10);\n    result = v11;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403e80L", 
            "funcEndAddr": "0x403f85L", 
            "funcName": "sub_403E80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403F90(char *a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14\n  __int64 v5; // r13\n  __int64 v6; // r12\n  __int64 v7; // rbp\n  __int64 v8; // rax\n  const char *v9; // r15\n  __int64 v10; // rcx\n  int v11; // ebx\n  __int64 v12; // rax\n  const char *v13; // r15\n  int v14; // eax\n  const char *v15; // rdx\n  char v16; // si\n  __int64 v17; // rax\n  int v18; // esi\n  int v19; // ecx\n  __int64 v20; // rsi\n  __int64 v21; // r15\n  __int64 result; // rax\n  int v23; // ecx\n  __int64 v24; // rbx\n  __int64 v25; // rdx\n  __int64 v26; // [rsp+8h] [rbp-50h]\n  __int64 v27; // [rsp+10h] [rbp-48h]\n  __int64 v28; // [rsp+18h] [rbp-40h]\n\n  v4 = (__int64)a1;\n  v5 = a2;\n  v6 = a3;\n  v7 = a4;\n  v26 = a3;\n  v8 = sub_40AED0(a1, 46LL, a2);\n  if ( v8 )\n  {\n    v9 = (const char *)v8;\n    a1[a2] = 0;\n    v10 = v8 - (_QWORD)a1;\n    if ( (unsigned int)(*(char *)(v8 + 1) - 48) > 9 )\n    {\n      v11 = 9;\n      if ( (unsigned int)(*(char *)(v8 - 1) - 48) > 9 )\n      {\n        v5 = v8 - (_QWORD)a1;\n        LODWORD(v21) = v7;\n        v20 = 1LL;\n        v19 = 1;\n        goto LABEL_27;\n      }\n      goto LABEL_4;\n    }\n    v27 = v8 - (_QWORD)a1;\n    v17 = strtol((const char *)(v8 + 1), 0LL, 10);\n    v10 = v27;\n    if ( v17 > 0x7FFFFFFF )\n      LODWORD(v17) = 0x7FFFFFFF;\n    v11 = v17;\n    if ( (_DWORD)v17 )\n    {\n      if ( (unsigned int)(*(v9 - 1) - 48) > 9 )\n      {\n        v5 = v27;\n        goto LABEL_23;\n      }\nLABEL_4:\n      *v9 = 0;\n      do\n        --v9;\n      while ( (unsigned int)(*(v9 - 1) - 48) <= 9 );\n      v28 = v10;\n      v12 = strtol(v9, 0LL, 10);\n      if ( v12 > 0x7FFFFFFF )\n        LODWORD(v12) = 0x7FFFFFFF;\n      v5 = v28;\n      if ( (int)v12 > 1 )\n      {\n        v13 = &v9[*v9 == 48];\n        v5 = v13 - a1;\n        if ( (int)v12 > (unsigned __int64)qword_617470 )\n        {\n          v14 = v12 - qword_617470;\n          if ( v14 > 1 && v14 - v11 > 1 )\n          {\n            if ( a1 >= v13 )\n            {\n              v5 = 0LL;\nLABEL_41:\n              v5 += (int)__sprintf_chk(a1, 1LL, -1LL, \"%d\");\n              goto LABEL_23;\n            }\n            v15 = a1;\n            v16 = 0;\n            do\n            {\n              if ( *v15 == 45 )\n                v16 = 1;\n              else\n                *a1++ = *v15;\n              ++v15;\n            }\n            while ( v13 != v15 );\n            v5 = (__int64)&a1[-v4];\n            if ( !v16 )\n              goto LABEL_41;\n          }\n        }\n      }\nLABEL_23:\n      if ( v11 > 8 )\n      {\n        LODWORD(v21) = v7;\n        v20 = 1LL;\n        v19 = 1;\n        goto LABEL_27;\n      }\n      goto LABEL_24;\n    }\n    v5 = v27;\n  }\n  else\n  {\n    v11 = 0;\n  }\nLABEL_24:\n  v18 = v11;\n  v19 = 1;\n  do\n  {\n    ++v18;\n    v19 *= 10;\n  }\n  while ( v18 != 9 );\n  v20 = v19;\n  v21 = v7 / v19;\nLABEL_27:\n  if ( v6 >= 0 || !v7 || (v26 = (1000000000 / v19 - (_DWORD)v21 != (v7 % v20 != 0)) + v6) != 0 )\n  {\n    result = sub_402AF0(v4, v5, v26);\n  }\n  else\n  {\n    sub_402980(v4, v5, \"'-+ 0\", \".0f\");\n    result = __printf_chk(1LL, v4, v25);\n  }\n  if ( v11 )\n  {\n    v23 = 9;\n    if ( v11 <= 9 )\n      v23 = v11;\n    v24 = (unsigned int)(v11 - v23);\n    __printf_chk(1LL, \"%s%.*d%-*.*d\", qword_617478);\n    result = v24;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403f90L", 
            "funcEndAddr": "0x4042d8L", 
            "funcName": "sub_403F90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4042E0(char *a1, __int64 a2, int a3, __int64 a4, char *a5, __int64 a6)\n{\n  __int64 v6; // rbx\n  __int64 v7; // r12\n  __int64 v8; // rsi\n  __int64 v9; // rdi\n  void *v10; // rax\n  unsigned int v11; // ebp\n  char *v13; // rdx\n  unsigned int v14; // ecx\n  unsigned __int64 v15; // rdx\n  __int64 v16; // rdx\n  char *v17; // rax\n  char *v18; // r13\n  char *v19; // rdi\n  const char *v20; // r14\n  __int64 v21; // rdx\n  int v22; // ebp\n  __int64 v23; // rdx\n  char **v24; // rax\n  unsigned __int64 v25; // rax\n  unsigned int v26; // eax\n  __int64 v27; // rax\n  __int64 v28; // rdx\n  unsigned int v29; // eax\n  int *v30; // rax\n  int *v31; // rbp\n  __int64 v32; // r13\n  char *v33; // rax\n  int v34; // esi\n  char *v35; // rax\n  char *v36; // rax\n  __int64 v37; // r14\n  char *v38; // rbp\n  int *v39; // rax\n  __int64 v40; // rbp\n  char *v41; // rbx\n  int *v42; // rax\n  __int64 v43; // rcx\n  char *path; // [rsp+0h] [rbp-38h]\n  char *patha; // [rsp+0h] [rbp-38h]\n  char *pathb; // [rsp+0h] [rbp-38h]\n  __int64 v47; // [rsp+8h] [rbp-30h]\n\n  v6 = (__int64)a1;\n  v7 = a2;\n  switch ( a3 )\n  {\n    case 65:\n      v11 = 0;\n      sub_4059B0(a6, &unk_617438);\n      byte_617442 = 0;\n      sub_402A70((__int64)a1, a2, (__int64)&unk_617438);\n      return v11;\n    case 66:\n      v11 = 0;\n      sub_402AB0((__int64)a1, a2, 512LL);\n      return v11;\n    case 67:\n      pathb = a5;\n      v30 = __errno_location();\n      *v30 = 95;\n      v31 = v30;\n      v32 = sub_408CC0(4LL, pathb);\n      v33 = dcgettext(0LL, \"failed to get security context of %s\", 5);\n      v34 = *v31;\n      v11 = 1;\n      error(0, v34, v33, v32);\n      *(_WORD *)&a1[v7] = 115;\n      __printf_chk(1LL, a1, \"?\");\n      return v11;\n    case 68:\n      v11 = 0;\n      sub_402A30((__int64)a1, a2, *(_QWORD *)a6);\n      return v11;\n    case 70:\n      v10 = (void *)sub_405740(a6);\n      goto LABEL_4;\n    case 71:\n      v24 = (char **)getgrgid(*(_DWORD *)(a6 + 32));\n      v13 = \"UNKNOWN\";\n      if ( !v24 )\n        goto LABEL_9;\n      goto LABEL_36;\n    case 78:\n      v47 = a6;\n      v11 = 0;\n      patha = a5;\n      v26 = sub_4088A0(0LL);\n      v27 = sub_408CC0(v26, patha);\n      sub_402A70((__int64)a1, a2, v27);\n      if ( (*(_DWORD *)(v47 + 24) & 0xF000) != 40960 )\n        return v11;\n      v18 = (char *)sub_405090(patha);\n      if ( v18 )\n      {\n        __printf_chk(1LL, \" -> \", v28);\n        v29 = sub_4088A0(0LL);\n        v21 = sub_408CC0(v29, v18);\n        goto LABEL_23;\n      }\n      v40 = sub_408CC0(4LL, patha);\n      v41 = dcgettext(0LL, \"cannot read symbolic link %s\", 5);\n      v42 = __errno_location();\n      v43 = v40;\n      v11 = 1;\n      error(0, *v42, v41, v43);\n      return v11;\n    case 84:\n      v25 = *(_QWORD *)(a6 + 40);\n      v14 = (unsigned __int8)v25;\n      v15 = v25 >> 12;\n      LOBYTE(v15) = 0;\n      goto LABEL_12;\n    case 85:\n      v24 = (char **)getpwuid(*(_DWORD *)(a6 + 28));\n      v13 = \"UNKNOWN\";\n      if ( v24 )\nLABEL_36:\n        v13 = *v24;\n      goto LABEL_9;\n    case 87:\n      v11 = 0;\n      sub_403F90(a1, a2, 0LL, 0LL);\n      return v11;\n    case 88:\n      v11 = 0;\n      sub_403F90(a1, a2, *(_QWORD *)(a6 + 72), *(_QWORD *)(a6 + 80));\n      return v11;\n    case 89:\n      v11 = 0;\n      sub_403F90(a1, a2, *(_QWORD *)(a6 + 88), *(_QWORD *)(a6 + 96));\n      return v11;\n    case 90:\n      v11 = 0;\n      sub_403F90(a1, a2, *(_QWORD *)(a6 + 104), *(_QWORD *)(a6 + 112));\n      return v11;\n    case 97:\n      v22 = *(_DWORD *)(a6 + 24);\n      sub_402980((__int64)a1, a2, (const char *)&unk_4103A7, \"lo\");\n      v23 = v22 & 0xFFF;\n      v11 = 0;\n      __printf_chk(1LL, a1, v23);\n      return v11;\n    case 98:\n      v11 = 0;\n      sub_402AB0((__int64)a1, a2, *(_QWORD *)(a6 + 64));\n      return v11;\n    case 100:\n      v11 = 0;\n      sub_402AB0((__int64)a1, a2, *(_QWORD *)a6);\n      return v11;\n    case 102:\n      v11 = 0;\n      sub_402A30((__int64)a1, a2, *(unsigned int *)(a6 + 24));\n      return v11;\n    case 103:\n      v11 = 0;\n      sub_402AB0((__int64)a1, a2, *(unsigned int *)(a6 + 32));\n      return v11;\n    case 104:\n      v11 = 0;\n      sub_402AB0((__int64)a1, a2, *(_QWORD *)(a6 + 16));\n      return v11;\n    case 105:\n      v11 = 0;\n      sub_402AB0((__int64)a1, a2, *(_QWORD *)(a6 + 8));\n      return v11;\n    case 109:\n      if ( !byte_617481 && (*(_DWORD *)(a6 + 24) & 0xF000) == 40960 )\n        goto LABEL_51;\n      path = a5;\n      v17 = canonicalize_file_name(a5);\n      v18 = v17;\n      if ( !v17 )\n      {\n        v37 = sub_408CC0(4LL, path);\n        v38 = dcgettext(0LL, \"failed to canonicalize %s\", 5);\n        v39 = __errno_location();\n        error(0, *v39, v38, v37);\nLABEL_56:\n        v11 = 1;\n        v20 = \"?\";\n        goto LABEL_22;\n      }\n      v11 = 0;\n      v19 = v17;\n      v18 = 0LL;\n      v20 = (const char *)sub_403D70(v17);\n      free(v19);\n      if ( v20 )\n        goto LABEL_22;\n      a5 = path;\nLABEL_51:\n      v36 = (char *)sub_404D10(a5);\n      v18 = v36;\n      if ( !v36 )\n        goto LABEL_56;\n      v20 = (const char *)sub_403D70(v36);\n      if ( !v20 )\n        v20 = v18;\n      v11 = 0;\nLABEL_22:\n      v21 = (__int64)v20;\nLABEL_23:\n      sub_402A70(v6, a2, v21);\n      free(v18);\n      return v11;\n    case 110:\n      v11 = 0;\n      sub_402A70((__int64)a1, a2, (__int64)a5);\n      return v11;\n    case 111:\n      v16 = *(_QWORD *)(a6 + 56);\n      if ( (unsigned __int64)(v16 - 1) > 0x1FFFFFFFFFFFFFFFLL )\n        v16 = 512LL;\n      v11 = 0;\n      sub_402AB0((__int64)a1, a2, v16);\n      return v11;\n    case 115:\n      v11 = 0;\n      sub_402AF0((__int64)a1, a2, *(_QWORD *)(a6 + 48));\n      return v11;\n    case 116:\n      v14 = ((unsigned int)*(_QWORD *)(a6 + 40) >> 8) & 0xFFF;\n      LODWORD(v15) = (*(_QWORD *)(a6 + 40) >> 32) & 0xFFFFF000;\nLABEL_12:\n      v11 = 0;\n      sub_402A30((__int64)a1, a2, v14 | (unsigned int)v15);\n      return v11;\n    case 117:\n      v11 = 0;\n      sub_402AB0((__int64)a1, a2, *(unsigned int *)(a6 + 28));\n      return v11;\n    case 119:\n      v13 = \"-\";\nLABEL_9:\n      v11 = 0;\n      sub_402A70((__int64)a1, a2, (__int64)v13);\n      return v11;\n    case 120:\n      v8 = *(_QWORD *)(a6 + 80);\n      v9 = *(_QWORD *)(a6 + 72);\n      goto LABEL_3;\n    case 121:\n      v8 = *(_QWORD *)(a6 + 96);\n      v9 = *(_QWORD *)(a6 + 88);\n      goto LABEL_3;\n    case 122:\n      v8 = *(_QWORD *)(a6 + 112);\n      v9 = *(_QWORD *)(a6 + 104);\nLABEL_3:\n      v10 = sub_403CA0(v9, v8);\nLABEL_4:\n      v11 = 0;\n      sub_402A70(v6, v7, (__int64)v10);\n      return v11;\n    default:\n      v35 = stdout->_IO_write_ptr;\n      v11 = 0;\n      if ( v35 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 63);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v35 + 1;\n        *v35 = 63;\n      }\n      return v11;\n  }\n}\n", 
            "funcStartAddr": "0x4042e0L", 
            "funcEndAddr": "0x404867L", 
            "funcName": "sub_4042E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_404870(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  FILE *v24; // rbp\n  char *v25; // rax\n  FILE *v26; // rbp\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  char *v30; // rax\n  const char **v31; // rax\n  const char *v32; // rbp\n  char *v33; // rax\n  char *v34; // rax\n  char *v35; // rax\n  char *v36; // rax\n  char *v37; // rax\n  char *v38; // rax\n  char *v39; // rax\n  char *v40; // rax\n  const char *v41; // [rsp+0h] [rbp-88h]\n  const char *v42; // [rsp+8h] [rbp-80h]\n  const char *v43; // [rsp+10h] [rbp-78h]\n  const char *v44; // [rsp+18h] [rbp-70h]\n  const char *v45; // [rsp+20h] [rbp-68h]\n  const char *v46; // [rsp+28h] [rbp-60h]\n  const char *v47; // [rsp+30h] [rbp-58h]\n  const char *v48; // [rsp+38h] [rbp-50h]\n  const char *v49; // [rsp+40h] [rbp-48h]\n  const char *v50; // [rsp+48h] [rbp-40h]\n  const char *v51; // [rsp+50h] [rbp-38h]\n  const char *v52; // [rsp+58h] [rbp-30h]\n  __int64 v53; // [rsp+60h] [rbp-28h]\n  __int64 v54; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_617498;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... FILE...\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"Display file or file system status.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"  -L, --dereference     follow links\\n\"\n         \"  -f, --file-system     display file system status instead of file status\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"  -c  --format=FORMAT   use the specified FORMAT instead of the default;\\n\"\n          \"                          output a newline after each use of FORMAT\\n\"\n          \"      --printf=FORMAT   like --format, but interpret backslash escapes,\\n\"\n          \"                          and do not output a mandatory trailing newline;\\n\"\n          \"                          if you want a newline, include \\\\n in FORMAT\\n\"\n          \"  -t, --terse           print the information in terse form\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The valid format sequences for files (without --file-system):\\n\"\n          \"\\n\"\n          \"  %a   access rights in octal (note '#' and '0' printf flags)\\n\"\n          \"  %A   access rights in human readable form\\n\"\n          \"  %b   number of blocks allocated (see %B)\\n\"\n          \"  %B   the size in bytes of each block reported by %b\\n\"\n          \"  %C   SELinux security context string\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(\n          0LL,\n          \"  %d   device number in decimal\\n\"\n          \"  %D   device number in hex\\n\"\n          \"  %f   raw mode in hex\\n\"\n          \"  %F   file type\\n\"\n          \"  %g   group ID of owner\\n\"\n          \"  %G   group name of owner\\n\",\n          5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(\n          0LL,\n          \"  %h   number of hard links\\n\"\n          \"  %i   inode number\\n\"\n          \"  %m   mount point\\n\"\n          \"  %n   file name\\n\"\n          \"  %N   quoted file name with dereference if symbolic link\\n\"\n          \"  %o   optimal I/O transfer size hint\\n\"\n          \"  %s   total size, in bytes\\n\"\n          \"  %t   major device type in hex, for character/block device special files\\n\"\n          \"  %T   minor device type in hex, for character/block device special files\\n\",\n          5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(\n          0LL,\n          \"  %u   user ID of owner\\n\"\n          \"  %U   user name of owner\\n\"\n          \"  %w   time of file birth, human-readable; - if unknown\\n\"\n          \"  %W   time of file birth, seconds since Epoch; 0 if unknown\\n\"\n          \"  %x   time of last access, human-readable\\n\"\n          \"  %X   time of last access, seconds since Epoch\\n\"\n          \"  %y   time of last data modification, human-readable\\n\"\n          \"  %Y   time of last data modification, seconds since Epoch\\n\"\n          \"  %z   time of last status change, human-readable\\n\"\n          \"  %Z   time of last status change, seconds since Epoch\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(\n          0LL,\n          \"Valid format sequences for file systems:\\n\"\n          \"\\n\"\n          \"  %a   free blocks available to non-superuser\\n\"\n          \"  %b   total data blocks in file system\\n\"\n          \"  %c   total file nodes in file system\\n\"\n          \"  %d   free file nodes in file system\\n\"\n          \"  %f   free blocks in file system\\n\",\n          5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(\n          0LL,\n          \"  %i   file system ID in hex\\n\"\n          \"  %l   maximum length of filenames\\n\"\n          \"  %n   file name\\n\"\n          \"  %s   block size (for faster transfers)\\n\"\n          \"  %S   fundamental block size (for block counts)\\n\"\n          \"  %t   file system type in hex\\n\"\n          \"  %T   file system type in human readable form\\n\",\n          5);\n  fputs_unlocked(v27, v26);\n  v28 = dcgettext(0LL, \"\\n--terse is equivalent to the following FORMAT:\\n    %s\", 5);\n  __printf_chk(1LL, v28, \"%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %W %o\\n\");\n  v29 = dcgettext(0LL, \"--terse --file-system is equivalent to the following FORMAT:\\n    %s\", 5);\n  __printf_chk(1LL, v29, \"%n %i %l %t %s %S %b %f %a %c %d\\n\");\n  v30 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"NOTE: your shell may have its own version of %s, which usually supersedes\\n\"\n          \"the version described here.  Please refer to your shell's documentation\\n\"\n          \"for details about the options it supports.\\n\",\n          5);\n  __printf_chk(1LL, v30, \"stat\");\n  v41 = \"[\";\n  v31 = &v41;\n  v42 = \"test invocation\";\n  v43 = \"coreutils\";\n  v44 = \"Multi-call invocation\";\n  v45 = \"sha224sum\";\n  v46 = \"sha2 utilities\";\n  v47 = \"sha256sum\";\n  v48 = \"sha2 utilities\";\n  v49 = \"sha384sum\";\n  v50 = \"sha2 utilities\";\n  v51 = \"sha512sum\";\n  v52 = \"sha2 utilities\";\n  v53 = 0LL;\n  v54 = 0LL;\n  do\n    v31 += 2;\n  while ( *v31 && strcmp(\"stat\", *v31) );\n  v32 = v31[1];\n  if ( v32 )\n  {\n    v33 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v33, &unk_4107C3);\n    v34 = setlocale(5, 0LL);\n    if ( !v34 || !strncmp(v34, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v37 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v37, &unk_4107C3);\n    v38 = setlocale(5, 0LL);\n    if ( !v38 || !strncmp(v38, \"en_\", 3uLL) )\n    {\n      v32 = \"stat\";\n      v39 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v39, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v32 = \"stat\";\n  }\n  v40 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v40, \"stat\");\nLABEL_10:\n  v35 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v35, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v36 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v36, v32);\nLABEL_3:\n  exit(status);\n}\n", 
            "funcStartAddr": "0x404870L", 
            "funcEndAddr": "0x404d0dL", 
            "funcName": "sub_404870"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404D10(char *path, const __m128i *a2)\n{\n  int v2; // er13\n  int *v3; // r12\n  const char *v4; // rax\n  char *v5; // rbx\n  size_t v6; // rax\n  void *v7; // rsp\n  const char *v8; // r13\n  __int64 v9; // rbx\n  char *v10; // rax\n  __int64 v11; // rcx\n  __int64 v12; // rbx\n  __m128i v13; // xmm1\n  __m128i v14; // xmm2\n  __m128i v15; // xmm3\n  __m128i v16; // xmm4\n  __m128i v17; // xmm5\n  __m128i v18; // xmm6\n  __m128i v19; // xmm7\n  __m128i v20; // xmm0\n  const char *v21; // rsi\n  __int64 v22; // rbx\n  char *v23; // rax\n  __int64 v24; // rcx\n  int v25; // er13\n  __m128i v27; // xmm2\n  __m128i v28; // xmm3\n  __m128i v29; // xmm4\n  __m128i v30; // xmm5\n  __m128i v31; // xmm6\n  __m128i v32; // xmm7\n  __m128i v33; // xmm1\n  __m128i v34; // xmm2\n  char *v35; // rsi\n  __int64 v36; // rbx\n  char *v37; // rax\n  __int64 v38; // rcx\n  char *v39; // rax\n  char *v40; // rax\n  char v41; // [rsp+0h] [rbp-150h]\n  char v42; // [rsp+Fh] [rbp-141h]\n  struct stat stat_buf; // [rsp+10h] [rbp-140h]\n  struct stat v44; // [rsp+A0h] [rbp-B0h]\n\n  v2 = sub_408F30(&v41);\n  v3 = __errno_location();\n  if ( v2 )\n  {\n    v12 = 0LL;\n    v39 = dcgettext(0LL, \"cannot get current directory\", 5);\n    error(0, *v3, v39);\n    return v12;\n  }\n  if ( (a2[1].m128i_i32[2] & 0xF000) == 0x4000 )\n  {\n    v27 = _mm_loadu_si128(a2 + 1);\n    v28 = _mm_loadu_si128(a2 + 2);\n    v29 = _mm_loadu_si128(a2 + 3);\n    *(__m128i *)&stat_buf.st_dev = _mm_loadu_si128(a2);\n    v30 = _mm_loadu_si128(a2 + 4);\n    v31 = _mm_loadu_si128(a2 + 5);\n    *(__m128i *)&stat_buf.st_nlink = v27;\n    v32 = _mm_loadu_si128(a2 + 6);\n    v33 = _mm_loadu_si128(a2 + 7);\n    v34 = _mm_loadu_si128(a2 + 8);\n    *(__m128i *)&stat_buf.st_gid = v28;\n    *(__m128i *)&stat_buf.st_size = v29;\n    *(__m128i *)&stat_buf.st_blocks = v30;\n    *(__m128i *)&stat_buf.st_atim.tv_nsec = v31;\n    *(__m128i *)&stat_buf.st_mtim.tv_nsec = v32;\n    *(__m128i *)&stat_buf.st_ctim.tv_nsec = v33;\n    *(__m128i *)&stat_buf.__unused[1] = v34;\n    v35 = path;\n    if ( chdir(path) >= 0 )\n    {\nLABEL_10:\n      while ( __xstat(1, \"..\", &v44) >= 0 )\n      {\n        if ( v44.st_dev != stat_buf.st_dev || v44.st_ino == stat_buf.st_ino )\n        {\n          v12 = sub_4097F0();\n          goto LABEL_14;\n        }\n        if ( chdir(\"..\") < 0 )\n        {\n          v21 = \"cannot change to directory %s\";\n          v22 = sub_408CC0(4LL, \"..\");\n          goto LABEL_12;\n        }\n        v13 = _mm_load_si128((const __m128i *)&v44.st_nlink);\n        v14 = _mm_load_si128((const __m128i *)&v44.st_gid);\n        v15 = _mm_load_si128((const __m128i *)&v44.st_size);\n        *(__m128i *)&stat_buf.st_dev = _mm_load_si128((const __m128i *)&v44);\n        v16 = _mm_load_si128((const __m128i *)&v44.st_blocks);\n        v17 = _mm_load_si128((const __m128i *)&v44.st_atim.tv_nsec);\n        v18 = _mm_load_si128((const __m128i *)&v44.st_mtim.tv_nsec);\n        v19 = _mm_load_si128((const __m128i *)&v44.st_ctim.tv_nsec);\n        *(__m128i *)&stat_buf.st_nlink = v13;\n        v20 = _mm_load_si128((const __m128i *)&v44.__unused[1]);\n        *(__m128i *)&stat_buf.st_gid = v14;\n        *(__m128i *)&stat_buf.st_size = v15;\n        *(__m128i *)&stat_buf.st_blocks = v16;\n        *(__m128i *)&stat_buf.st_atim.tv_nsec = v17;\n        *(__m128i *)&stat_buf.st_mtim.tv_nsec = v18;\n        *(__m128i *)&stat_buf.st_ctim.tv_nsec = v19;\n        *(__m128i *)&stat_buf.__unused[1] = v20;\n      }\n      v21 = \"cannot stat %s\";\n      v22 = sub_408CC0(4LL, \"..\");\nLABEL_12:\n      v23 = dcgettext(0LL, v21, 5);\n      v24 = v22;\n      v12 = 0LL;\n      error(0, *v3, v23, v24);\n      goto LABEL_14;\n    }\n    goto LABEL_18;\n  }\n  v4 = (const char *)sub_4055D0(path);\n  v5 = (char *)v4;\n  v6 = strlen(v4);\n  v7 = alloca(v6 + 9);\n  v8 = (const char *)memcpy((void *)((unsigned __int64)&v42 & 0xFFFFFFFFFFFFFFF0LL), v5, v6 + 1);\n  free(v5);\n  if ( chdir(v8) < 0 )\n  {\n    v35 = (char *)v8;\nLABEL_18:\n    v36 = sub_408CC0(4LL, v35);\n    v37 = dcgettext(0LL, \"cannot change to directory %s\", 5);\n    v38 = v36;\n    v12 = 0LL;\n    error(0, *v3, v37, v38);\n    return v12;\n  }\n  if ( __xstat(1, \".\", &stat_buf) >= 0 )\n    goto LABEL_10;\n  v9 = sub_408CC0(4LL, v8);\n  v10 = dcgettext(0LL, \"cannot stat current directory (now %s)\", 5);\n  v11 = v9;\n  v12 = 0LL;\n  error(0, *v3, v10, v11);\nLABEL_14:\n  v25 = *v3;\n  if ( !(unsigned int)sub_408F80(&v41) )\n  {\n    sub_408FA0(&v41);\n    *v3 = v25;\n    return v12;\n  }\n  v40 = dcgettext(0LL, \"failed to return to initial working directory\", 5);\n  error(1, *v3, v40);\n  return sub_405090((char *)1);\n}\n", 
            "funcStartAddr": "0x404d10L", 
            "funcEndAddr": "0x405090L", 
            "funcName": "sub_404D10"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_405090(char *path, unsigned __int64 a2)\n{\n  size_t v2; // rbx\n  char *v3; // rax\n  char *v4; // rbp\n  ssize_t v5; // r12\n  char *v7; // rdi\n\n  v2 = a2 + 1;\n  if ( a2 >= 0x401 )\n    v2 = 1025LL;\n  while ( 2 )\n  {\n    v3 = (char *)malloc(v2);\n    v4 = v3;\n    if ( v3 )\n    {\n      while ( 1 )\n      {\n        v5 = readlink(path, v3, v2);\n        if ( v5 < 0 && *__errno_location() != 34 )\n        {\n          v7 = v4;\n          v4 = 0LL;\n          free(v7);\n          return v4;\n        }\n        if ( v2 > v5 )\n        {\n          v4[v5] = 0;\n          return v4;\n        }\n        free(v4);\n        if ( v2 > 0x3FFFFFFFFFFFFFFFLL )\n          break;\n        v2 *= 2LL;\n        v3 = (char *)malloc(v2);\n        v4 = v3;\n        if ( !v3 )\n          return v4;\n      }\n      if ( v2 <= 0x7FFFFFFFFFFFFFFELL )\n      {\n        v2 = 0x7FFFFFFFFFFFFFFFLL;\n        continue;\n      }\n      v4 = 0LL;\n      *__errno_location() = 12;\n    }\n    break;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x405090L", 
            "funcEndAddr": "0x40517fL", 
            "funcName": "sub_405090"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_405180()\n{\n  sub_404870(1);\n}\n", 
            "funcStartAddr": "0x405180L", 
            "funcEndAddr": "0x40518aL", 
            "funcName": "sub_405180"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405190(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  size_t v4; // r13\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n  char *v16; // [rsp+18h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  v16 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += v4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( v16 )\n      {\n        v10 = memcmp(&v16[v4 * v14], v5, v4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += v4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    v12 = v14;\n  return v12;\n}\n", 
            "funcStartAddr": "0x405190L", 
            "funcEndAddr": "0x4052a6L", 
            "funcName": "sub_405190"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4052B0(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_408EF0(1LL, a1);\n  v5 = sub_408BE0(0LL, 8LL, a2);\n  error(0, 0, v3, v5, v4);\n}\n", 
            "funcStartAddr": "0x4052b0L", 
            "funcEndAddr": "0x405321L", 
            "funcName": "sub_4052B0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405330(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  size_t v4; // r13\n  char *v5; // rbp\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  __int64 v11; // rax\n  __int64 v12; // rax\n  char *v13; // rax\n\n  v3 = 0LL;\n  v4 = a3;\n  v5 = a2;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, v5, v4) )\n    {\n      ++v9;\n      v3 = v5;\n      v5 += v4;\n      v11 = sub_408F10(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    v5 += v4;\n    v12 = sub_408F10(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  v13 = stderr->_IO_write_ptr;\n  if ( v13 >= stderr->_IO_write_end )\n  {\n    LODWORD(v13) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = v13 + 1;\n    *v13 = 10;\n  }\n  return (int)v13;\n}\n", 
            "funcStartAddr": "0x405330L", 
            "funcEndAddr": "0x405448L", 
            "funcName": "sub_405330"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405450(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  size_t v6; // r15\n  void (*v7)(void); // r13\n  char *v8; // rbp\n  __int64 *v9; // rbx\n  __int64 result; // rax\n\n  v6 = a5;\n  v7 = a6;\n  v8 = a4;\n  v9 = (__int64 *)a3;\n  result = sub_405190(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_4052B0(a1, (__int64)a2, result);\n    sub_405330(v9, v8, v6);\n    v7();\n    result = -1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405450L", 
            "funcEndAddr": "0x4054c0L", 
            "funcName": "sub_405450"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4054C0(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  size_t v5; // r12\n  __int64 *v6; // rbx\n  char *v7; // rbp\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v5 = a4;\n    v6 = a2 + 1;\n    v7 = a3;\n    do\n    {\n      if ( !memcmp(s1, v7, v5) )\n        break;\n      v4 = *v6;\n      v7 += v5;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x4054c0L", 
            "funcEndAddr": "0x40550dL", 
            "funcName": "sub_4054C0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405530()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_40C640(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_617488 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_617490 )\n      {\n        v5 = sub_408D60();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_40C640(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x405530L", 
            "funcEndAddr": "0x4055ceL", 
            "funcName": "sub_405530"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4055D0(void *a1)\n{\n  __int64 result; // rax\n\n  result = sub_405650(a1);\n  if ( !result )\n    sub_4097B0();\n  return result;\n}\n", 
            "funcStartAddr": "0x4055d0L", 
            "funcEndAddr": "0x4055e8L", 
            "funcName": "sub_4055D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4055F0(_BYTE *a1)\n{\n  unsigned __int64 v1; // rbp\n  __int64 v2; // rax\n  __int64 v3; // rdx\n\n  v1 = *a1 == 47;\n  v2 = sub_4056B0();\n  if ( v2 - (__int64)a1 <= v1 )\n    return v2 - (_QWORD)a1;\n  v3 = v2 - (_QWORD)a1 - 1;\n  if ( *(_BYTE *)(v2 - 1) != 47 )\n    return v2 - (_QWORD)a1;\n  while ( v1 != v3 && a1[v3 - 1] == 47 )\n    --v3;\n  return v3;\n}\n", 
            "funcStartAddr": "0x4055f0L", 
            "funcEndAddr": "0x40564dL", 
            "funcName": "sub_4055F0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405650(void *src)\n{\n  __int64 v1; // rax\n  size_t v2; // rbx\n  _BYTE *v3; // rax\n  _BYTE *v4; // rcx\n  _BYTE *v5; // rax\n\n  v1 = sub_4055F0(src);\n  v2 = v1;\n  v3 = malloc(v1 + (v1 == 0) + 1);\n  v4 = v3;\n  if ( v3 )\n  {\n    v5 = memcpy(v3, src, v2);\n    v4 = v5;\n    if ( !v2 )\n    {\n      *v5 = 46;\n      v2 = 1LL;\n    }\n    v5[v2] = 0;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x405650L", 
            "funcEndAddr": "0x4056aaL", 
            "funcName": "sub_405650"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4056B0(_BYTE *a1)\n{\n  char v1; // dl\n  _BYTE *result; // rax\n  _BYTE *v3; // rcx\n  char v4; // si\n\n  v1 = *a1;\n  for ( result = a1; *result == 47; v1 = *result )\n    ++result;\n  if ( v1 )\n  {\n    v3 = result;\n    v4 = 0;\n    do\n    {\n      while ( v1 == 47 )\n      {\n        v1 = *++v3;\n        v4 = 1;\n        if ( !*v3 )\n          return result;\n      }\n      if ( v4 )\n      {\n        result = v3;\n        v4 = 0;\n      }\n      v1 = *++v3;\n    }\n    while ( *v3 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4056b0L", 
            "funcEndAddr": "0x40570bL", 
            "funcName": "sub_4056B0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_405740(__int64 a1)\n{\n  int v1; // eax\n  char *result; // rax\n\n  v1 = *(_DWORD *)(a1 + 24) & 0xF000;\n  switch ( v1 )\n  {\n    case 32768:\n      if ( *(_QWORD *)(a1 + 48) )\n        result = dcgettext(0LL, \"regular file\", 5);\n      else\n        result = dcgettext(0LL, \"regular empty file\", 5);\n      break;\n    case 16384:\n      result = dcgettext(0LL, \"directory\", 5);\n      break;\n    case 40960:\n      result = dcgettext(0LL, \"symbolic link\", 5);\n      break;\n    case 24576:\n      result = dcgettext(0LL, \"block special file\", 5);\n      break;\n    case 8192:\n      result = dcgettext(0LL, \"character special file\", 5);\n      break;\n    case 4096:\n      result = dcgettext(0LL, \"fifo\", 5);\n      break;\n    case 49152:\n      result = dcgettext(0LL, \"socket\", 5);\n      break;\n    default:\n      result = dcgettext(0LL, \"weird file\", 5);\n      break;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405740L", 
            "funcEndAddr": "0x405824L", 
            "funcName": "sub_405740"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n", 
            "funcStartAddr": "0x405990L", 
            "funcEndAddr": "0x4059a3L", 
            "funcName": "sub_4059B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n", 
            "funcStartAddr": "0x405990L", 
            "funcEndAddr": "0x4059a3L", 
            "funcName": "sub_4059B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n", 
            "funcStartAddr": "0x405990L", 
            "funcEndAddr": "0x4059a3L", 
            "funcName": "sub_4059B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_4059B0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n", 
            "funcStartAddr": "0x405990L", 
            "funcEndAddr": "0x4059a3L", 
            "funcName": "sub_4059B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4059C0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n  __int64 result; // rax\n  int v4; // eax\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  if ( a1 < 0 )\n  {\n    while ( 1 )\n    {\n      v4 = 10 * (unsigned __int64)(a1 / 10) + 48 - a1;\n      a1 /= 10LL;\n      *(_BYTE *)(v2 - 1) = v4;\n      if ( !a1 )\n        break;\n      --v2;\n    }\n    *(_BYTE *)(v2 - 2) = 45;\n    result = v2 - 2;\n  }\n  else\n  {\n    do\n    {\n      *(_BYTE *)--v2 = a1 % 0xAuLL + 48;\n      a1 /= 0xAuLL;\n    }\n    while ( a1 );\n    result = v2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4059c0L", 
            "funcEndAddr": "0x405a5cL", 
            "funcName": "sub_4059C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405A60(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  const __int32_t **v4; // rax\n\n  if ( a3 )\n  {\n    v3 = a3 - 1;\n    v4 = __ctype_tolower_loc();\n    do\n    {\n      *(_BYTE *)(a1 + v3) = (*v4)[*(unsigned __int8 *)(a2 + v3)];\n      --v3;\n    }\n    while ( v3 != -1 );\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x405a60L", 
            "funcEndAddr": "0x405aa1L", 
            "funcName": "sub_405A60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405AB0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  const __int32_t **v4; // rax\n\n  if ( a3 )\n  {\n    v3 = a3 - 1;\n    v4 = __ctype_toupper_loc();\n    do\n    {\n      *(_BYTE *)(a1 + v3) = (*v4)[*(unsigned __int8 *)(a2 + v3)];\n      --v3;\n    }\n    while ( v3 != -1 );\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x405ab0L", 
            "funcEndAddr": "0x405af1L", 
            "funcName": "sub_405AB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_405B00@<rax>(void *s@<rdi>, unsigned __int64 a2@<rdx>, __int64 a3@<rcx>, __int64 a4@<rsi>, char a5@<r8b>, __int64 a6, int a7)\n{\n  char *v7; // r15\n  char *v8; // rbx\n  char *v9; // r12\n  int v10; // er11\n  char v11; // al\n  __int64 v12; // r14\n  char *v13; // r8\n  char v15; // r11\n  __int64 v16; // r8\n  int i; // er12\n  unsigned int v18; // eax\n  __int64 v19; // rcx\n  __int64 v20; // r9\n  bool v21; // cc\n  int v22; // ebp\n  unsigned int v23; // eax\n  int v24; // edi\n  char *v25; // rax\n  char *v26; // r8\n  char v27; // r13\n  size_t v28; // rax\n  unsigned __int64 v29; // rcx\n  int v30; // eax\n  unsigned __int64 v31; // rbx\n  size_t v32; // rdx\n  char *v33; // rdi\n  char *v34; // rsi\n  size_t v35; // rdx\n  char *v36; // rdi\n  unsigned __int64 v37; // rcx\n  __int64 v38; // r13\n  __m128i v39; // xmm4\n  __m128i v40; // xmm2\n  __int64 v41; // rax\n  __int64 v42; // rax\n  __int64 v43; // rsi\n  __int64 v44; // rcx\n  int v45; // edx\n  unsigned int v46; // eax\n  int v47; // er10\n  char *v48; // rcx\n  unsigned __int64 v49; // rax\n  size_t v50; // r9\n  unsigned __int64 v51; // r9\n  size_t v52; // rdx\n  char *v53; // rdi\n  unsigned __int64 v54; // r10\n  int v55; // eax\n  unsigned __int64 v56; // rsi\n  size_t v57; // rdx\n  char *v58; // rdi\n  __int32 v59; // er10\n  __int32 v60; // er13\n  int v61; // edi\n  int v62; // er8\n  int v63; // eax\n  int v64; // er13\n  int v65; // er13\n  int v66; // edi\n  unsigned int v67; // esi\n  int v68; // edi\n  unsigned int v69; // er8\n  unsigned __int64 v70; // r13\n  int v71; // eax\n  unsigned __int64 v72; // rsi\n  char v73; // r11\n  char v74; // r8\n  size_t v75; // rdx\n  char *v76; // rdi\n  int v77; // esi\n  unsigned __int64 v78; // r13\n  size_t v79; // rdx\n  char *v80; // rdi\n  char *v81; // rcx\n  __int64 v82; // rax\n  unsigned __int64 v83; // rsi\n  size_t v84; // rdx\n  char *v85; // rdi\n  size_t v86; // rdx\n  char *v87; // rdi\n  int v88; // esi\n  int v89; // edi\n  int v90; // edx\n  __int64 v91; // rax\n  char *v92; // r9\n  size_t v93; // rcx\n  size_t v94; // rax\n  size_t v95; // rdx\n  char *v96; // rdi\n  size_t v97; // rcx\n  __int64 j; // r13\n  __int64 v99; // rsi\n  int v100; // eax\n  int v101; // esi\n  char v102; // cl\n  int v103; // esi\n  size_t v104; // rdx\n  char *v105; // rdi\n  int v106; // eax\n  int v107; // eax\n  char v108; // al\n  char v109; // cl\n  unsigned __int64 v110; // r12\n  unsigned __int64 v111; // r8\n  size_t v112; // rdx\n  __int64 v113; // r12\n  char *v114; // rdi\n  int v115; // eax\n  unsigned __int64 v116; // rcx\n  char *v117; // rdi\n  int v118; // esi\n  int v119; // edx\n  int v120; // er10\n  int v121; // esi\n  int k; // edi\n  __int32 v123; // esi\n  bool v124; // sf\n  bool v125; // of\n  int v126; // eax\n  int v127; // eax\n  int v128; // esi\n  int v129; // esi\n  __int64 v130; // [rsp+0h] [rbp-4C8h]\n  const __m128i *tp; // [rsp+8h] [rbp-4C0h]\n  char *v132; // [rsp+20h] [rbp-4A8h]\n  char v133; // [rsp+2Bh] [rbp-49Dh]\n  int v134; // [rsp+2Ch] [rbp-49Ch]\n  char *v135; // [rsp+30h] [rbp-498h]\n  char v136; // [rsp+30h] [rbp-498h]\n  unsigned __int64 v137; // [rsp+30h] [rbp-498h]\n  char v138; // [rsp+30h] [rbp-498h]\n  int v139; // [rsp+30h] [rbp-498h]\n  char v140; // [rsp+30h] [rbp-498h]\n  char v141; // [rsp+30h] [rbp-498h]\n  size_t v142; // [rsp+30h] [rbp-498h]\n  char v143; // [rsp+30h] [rbp-498h]\n  size_t v144; // [rsp+30h] [rbp-498h]\n  int v145; // [rsp+30h] [rbp-498h]\n  char v146; // [rsp+40h] [rbp-488h]\n  char *v147; // [rsp+40h] [rbp-488h]\n  char *v148; // [rsp+40h] [rbp-488h]\n  char v149; // [rsp+40h] [rbp-488h]\n  char *v150; // [rsp+40h] [rbp-488h]\n  char v151; // [rsp+40h] [rbp-488h]\n  char v152; // [rsp+40h] [rbp-488h]\n  char v153; // [rsp+40h] [rbp-488h]\n  char *v154; // [rsp+40h] [rbp-488h]\n  char *v155; // [rsp+40h] [rbp-488h]\n  char v156; // [rsp+40h] [rbp-488h]\n  char *v157; // [rsp+40h] [rbp-488h]\n  char v158; // [rsp+40h] [rbp-488h]\n  int v159; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v160; // [rsp+48h] [rbp-480h]\n  char *v161; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v162; // [rsp+48h] [rbp-480h]\n  char v163; // [rsp+48h] [rbp-480h]\n  char *v164; // [rsp+48h] [rbp-480h]\n  char *v165; // [rsp+48h] [rbp-480h]\n  char v166; // [rsp+48h] [rbp-480h]\n  int v167; // [rsp+48h] [rbp-480h]\n  char v168; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v169; // [rsp+50h] [rbp-478h]\n  int v170; // [rsp+50h] [rbp-478h]\n  size_t v171; // [rsp+50h] [rbp-478h]\n  unsigned __int64 v172; // [rsp+50h] [rbp-478h]\n  int v173; // [rsp+50h] [rbp-478h]\n  size_t v174; // [rsp+58h] [rbp-470h]\n  char *v175; // [rsp+58h] [rbp-470h]\n  char v176; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v177; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v178; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v179; // [rsp+60h] [rbp-468h]\n  char format[2]; // [rsp+70h] [rbp-458h]\n  char v181; // [rsp+72h] [rbp-456h]\n  char v182; // [rsp+73h] [rbp-455h]\n  char v183[9]; // [rsp+87h] [rbp-441h]\n  char sa[16]; // [rsp+90h] [rbp-438h]\n  __m128i v185; // [rsp+A0h] [rbp-428h]\n  __m128i v186; // [rsp+B0h] [rbp-418h]\n  __int64 v187; // [rsp+C0h] [rbp-408h]\n\n  v7 = (char *)s;\n  v8 = (char *)a2;\n  v9 = *(char **)(a3 + 48);\n  v10 = *(_DWORD *)(a3 + 8);\n  v130 = a4;\n  tp = (const __m128i *)a3;\n  if ( !v9 )\n    v9 = \"\";\n  v133 = a5;\n  if ( v10 <= 12 )\n  {\n    if ( !v10 )\n      v10 = 12;\n  }\n  else\n  {\n    v10 -= 12;\n  }\n  v11 = *(_BYTE *)a2;\n  v12 = 0LL;\n  if ( !*(_BYTE *)a2 )\n  {\nLABEL_13:\n    if ( v7 && v130 )\n      *v7 = 0;\n    return v12;\n  }\n  v134 = v10;\n  v132 = v9;\n  while ( v11 != 37 )\n  {\n    a2 = v130 - v12;\n    if ( (unsigned __int64)(v130 - v12) <= 1 )\n      return 0LL;\n    if ( v7 )\n      *v7++ = v11;\n    ++v12;\n    v13 = v8;\nLABEL_12:\n    v11 = v13[1];\n    v8 = v13 + 1;\n    if ( !v11 )\n      goto LABEL_13;\n  }\n  v15 = v133;\n  v16 = 0LL;\nLABEL_22:\n  for ( i = 0; ; i = v18 )\n  {\n    v18 = *++v8;\n    v19 = v18;\n    v20 = v18;\n    v21 = *v8 <= 48;\n    if ( *v8 != 48 )\n      break;\nLABEL_26:\n    ;\n  }\n  while ( 1 )\n  {\n    if ( !v21 )\n    {\n      if ( (_BYTE)v18 == 94 )\n      {\n        v15 = 1;\n        goto LABEL_22;\n      }\n      if ( (_BYTE)v18 != 95 )\n      {\n        v22 = -1;\n        if ( v18 - 48 > 9 )\n          goto LABEL_29;\n        goto LABEL_37;\n      }\n      goto LABEL_26;\n    }\n    if ( (_BYTE)v18 != 35 )\n      break;\n    v18 = *++v8;\n    v16 = 1LL;\n    v19 = v18;\n    v20 = v18;\n    v21 = *v8 <= 48;\n    if ( *v8 == 48 )\n      goto LABEL_26;\n  }\n  if ( (_BYTE)v18 == 45 )\n    goto LABEL_26;\n  v22 = -1;\n  if ( v18 - 48 > 9 )\n    goto LABEL_29;\nLABEL_37:\n  v22 = 0;\n  while ( 1 )\n  {\n    v23 = v8[1];\n    v19 = v23;\n    a2 = v23 - 48;\n    if ( v22 > 214748364 )\n      break;\n    v24 = *v8;\n    if ( v22 == 214748364 && (char)v24 > 55 )\n      break;\n    ++v8;\n    v22 = v24 + 10 * v22 - 48;\nLABEL_41:\n    if ( (unsigned int)a2 > 9 )\n    {\n      v20 = v23;\n      goto LABEL_29;\n    }\n  }\n  if ( (unsigned int)a2 <= 9 )\n  {\n    v23 = v8[2];\n    v22 = 0x7FFFFFFF;\n    v8 += 2;\n    v19 = v23;\n    a2 = v23 - 48;\n    goto LABEL_41;\n  }\n  v20 = v23;\n  ++v8;\n  v22 = 0x7FFFFFFF;\nLABEL_29:\n  if ( (_BYTE)v19 == 69 || (_BYTE)v19 == 79 )\n    v19 = (unsigned __int8)*++v8;\n  else\n    v20 = 0LL;\n  switch ( (_BYTE)v19 )\n  {\n    case 0:\n      v92 = v8 - 1;\n      v102 = *(v8 - 1);\n      goto LABEL_263;\n    case 0x25:\n      LODWORD(v94) = 0;\n      v78 = 1LL;\n      a2 = v130 - v12;\n      if ( v22 >= 0 )\n        LODWORD(v94) = v22;\n      v94 = (int)v94;\n      if ( (_DWORD)v94 )\n        v78 = (int)v94;\n      if ( (_DWORD)v20 )\n      {\n        v13 = v8;\n        v92 = v8;\n        v93 = 1LL;\n        goto LABEL_244;\n      }\n      if ( v78 < a2 )\n      {\n        if ( v7 )\n        {\n          if ( v22 > 1 )\n          {\n            v104 = v22 - 1LL;\n            v105 = v7;\n            v7 += v104;\n            if ( i == 48 )\n              memset(v105, 48, v104);\n            else\n              memset(v105, 32, v104);\n            LOBYTE(v19) = *v8;\n          }\n          *v7++ = v19;\n        }\nLABEL_176:\n        v12 += v78;\n        v13 = v8;\n        goto LABEL_12;\n      }\n      return 0LL;\n    case 0x3A:\n      v108 = v8[1];\n      a2 = (unsigned __int64)(v8 + 1);\n      for ( j = 1LL; v108 == 58; a2 = (unsigned __int64)&v8[j] )\n        v108 = v8[++j];\n      if ( v108 != 122 )\n        goto LABEL_238;\n      v8 = (char *)a2;\n      goto LABEL_254;\n    case 0x41:\n    case 0x42:\n    case 0x61:\n      if ( (_DWORD)v20 )\n        goto LABEL_238;\n      if ( (_BYTE)v16 )\n        v15 = v16;\n      goto LABEL_51;\n    case 0x43:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_336;\n      v140 = 0;\n      v47 = 2;\n      LOBYTE(v69) = tp[1].m128i_i32[1] < -1900;\n      v67 = tp[1].m128i_i32[1] / 100\n          + 19\n          - ((tp[1].m128i_i32[1] / 100 + 19 > 0) & ((unsigned int)(tp[1].m128i_i32[1] % 100) >> 31));\n      v68 = 0;\n      goto LABEL_122;\n    case 0x44:\n      if ( !(_DWORD)v20 )\n        goto LABEL_94;\n      goto LABEL_238;\n    case 0x46:\n      if ( !(_DWORD)v20 )\n        goto LABEL_94;\n      goto LABEL_238;\n    case 0x47:\n    case 0x56:\n    case 0x67:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v59 = tp[1].m128i_i32[3];\n      v60 = tp[1].m128i_i32[2];\n      v139 = tp[1].m128i_i32[1];\n      v61 = v139 + ((v139 >> 31) & 0x190) - 100;\n      v62 = v60 - 382 + 7 * ((v59 - v60 + 382) / 7) + 3;\n      if ( v62 < 0 )\n      {\n        v118 = v139 + ((v139 >> 31) & 0x190) - 101;\n        v119 = 365;\n        if ( !(((_BYTE)v139 + ((v139 >> 31) & 0x90) - 101) & 3) )\n        {\n          v119 = 366;\n          if ( v118 == 100 * (v118 / 100) )\n            v119 = 366 - ((unsigned int)(v118 % 400) >= 1);\n        }\n        v120 = v119 + v59;\n        v121 = v120 - v60;\n        v65 = -1;\n        v62 = v120 - (v121 + 382) + 7 * ((v121 + 382) / 7) + 3;\n      }\n      else\n      {\n        v63 = 365;\n        if ( !(v61 & 3) )\n        {\n          v63 = 366;\n          if ( v61 == 100 * (v61 / 100) )\n            v63 = (v61 == 400 * (v61 / 400)) + 365;\n        }\n        v64 = v60 - 382 + 7 * ((v59 - v63 - v60 + 382) / 7) + 3;\n        if ( v64 >= 0 )\n          v62 = v64;\n        v65 = (v64 >> 31) + 1;\n      }\n      if ( (_BYTE)v19 == 71 )\n      {\n        v123 = tp[1].m128i_i32[1];\n        v140 = 0;\n        v47 = 4;\n        v125 = __OFSUB__(v123, -1900 - v65);\n        v124 = v123 - (-1900 - v65) < 0;\n        v67 = v123 + v65 + 1900;\n        LOBYTE(v69) = v124 ^ v125;\n        v68 = 0;\n        goto LABEL_122;\n      }\n      if ( (_BYTE)v19 == 103 )\n      {\n        v47 = 2;\n        v66 = (v65 + v139 % 100) % 100;\n        v67 = v66;\n        if ( v66 < 0 )\n        {\n          v67 = v66 + 100;\n          if ( v139 < -1900 - v65 )\n            v67 = -v66;\n        }\n      }\n      else\n      {\n        v47 = 2;\n        v67 = v62 / 7 + 1;\n      }\n      goto LABEL_121;\n    case 0x48:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v47 = 2;\n      v67 = tp->m128i_i64[1];\n      goto LABEL_121;\n    case 0x49:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v67 = v134;\n      v47 = 2;\n      goto LABEL_121;\n    case 0x4D:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v47 = 2;\n      v67 = HIDWORD(tp->m128i_i64[0]);\n      goto LABEL_121;\n    case 0x4E:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      if ( v22 == -1 )\n      {\n        v67 = a7;\n        v22 = 9;\n        v47 = 9;\n      }\n      else\n      {\n        if ( v22 > 8 )\n        {\n          v67 = a7;\n        }\n        else\n        {\n          v67 = a7;\n          for ( k = v22; k != 9; ++k )\n            v67 = (int)v67 / 10;\n        }\n        v47 = v22;\n      }\n      goto LABEL_121;\n    case 0x50:\n      v27 = 1;\n      goto LABEL_152;\n    case 0x52:\n    case 0x54:\nLABEL_94:\n      v54 = sub_405B00(0LL, a6, a7);\n      v55 = 0;\n      if ( v22 >= 0 )\n        v55 = v22;\n      v56 = v55;\n      if ( v54 >= v55 )\n        v56 = v54;\n      if ( v130 - v12 <= v56 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( v54 < v55 )\n        {\n          v169 = v54;\n          v57 = v22 - v54;\n          v58 = v7;\n          v7 += v57;\n          if ( i == 48 )\n            memset(v58, 48, v57);\n          else\n            memset(v58, 32, v57);\n          v54 = v169;\n        }\n        v162 = v54;\n        sub_405B00(v7, a6, a7);\n        v7 += v162;\n      }\n      v12 += v56;\n      v13 = v8;\n      goto LABEL_12;\n    case 0x53:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v47 = 2;\n      v67 = tp->m128i_i64[0];\n      goto LABEL_121;\n    case 0x55:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v89 = tp[1].m128i_i32[3] - tp[1].m128i_i32[2] + 7;\n      v90 = (unsigned __int64)(-1840700269LL * v89) >> 32;\n      goto LABEL_228;\n    case 0x57:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v89 = 7 * ((tp[1].m128i_i32[2] + 6) / 7) - (tp[1].m128i_i32[2] + 6) + tp[1].m128i_i32[3] + 7;\n      v90 = (unsigned __int64)(-1840700269LL * v89) >> 32;\nLABEL_228:\n      v47 = 2;\n      v67 = ((v90 + v89) >> 2) - (v89 >> 31);\n      goto LABEL_121;\n    case 0x58:\n    case 0x63:\n    case 0x78:\n      if ( (_DWORD)v20 != 79 )\n        goto LABEL_69;\n      goto LABEL_238;\n    case 0x59:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_336;\n      if ( (_DWORD)v20 == 79 )\n        goto LABEL_238;\n      v140 = 0;\n      v47 = 4;\n      v88 = tp[1].m128i_i32[1];\n      LOBYTE(v69) = v88 < -1900;\n      v67 = v88 + 1900;\n      v68 = 0;\n      goto LABEL_222;\n    case 0x5A:\n      v163 = v16;\n      if ( (_BYTE)v16 )\n        v15 = 0;\n      v151 = v15;\n      v70 = strlen(v132);\n      v71 = 0;\n      if ( v22 >= 0 )\n        v71 = v22;\n      v72 = v71;\n      if ( v70 >= v71 )\n        v72 = v70;\n      a2 = v130 - v12;\n      if ( v130 - v12 <= v72 )\n        return 0LL;\n      if ( v7 )\n      {\n        v73 = v151;\n        v74 = v163;\n        if ( v70 < v71 )\n        {\n          v75 = v22 - v70;\n          v76 = v7;\n          v7 += v75;\n          if ( i == 48 )\n          {\n            memset(v76, 48, v75);\n            v73 = v151;\n            v74 = v163;\n          }\n          else\n          {\n            memset(v76, 32, v75);\n            v74 = v163;\n            v73 = v151;\n          }\n        }\n        if ( v74 )\n        {\n          sub_405A60((__int64)v7, (__int64)v132, v70);\n        }\n        else if ( v73 )\n        {\n          sub_405AB0((__int64)v7, (__int64)v132, v70);\n        }\n        else\n        {\n          memcpy(v7, v132, v70);\n        }\n        v7 += v70;\n      }\n      v12 += v72;\n      v13 = v8;\n      goto LABEL_12;\n    case 0x62:\n    case 0x68:\n      if ( (_BYTE)v16 )\n        v15 = v16;\n      if ( (_DWORD)v20 )\n        goto LABEL_238;\nLABEL_51:\n      v25 = &v181;\n      v26 = v8;\n      v27 = 0;\n      *(_WORD *)format = 9504;\n      LODWORD(v20) = 0;\n      goto LABEL_52;\n    case 0x64:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v47 = 2;\n      v67 = HIDWORD(tp->m128i_i64[1]);\n      goto LABEL_121;\n    case 0x65:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v67 = HIDWORD(tp->m128i_i64[1]);\n      goto LABEL_159;\n    case 0x6A:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v140 = 0;\n      v47 = 3;\n      v103 = tp[1].m128i_i32[3];\n      LOBYTE(v69) = v103 < -1;\n      v67 = v103 + 1;\n      v68 = 0;\n      goto LABEL_122;\n    case 0x6B:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v67 = tp->m128i_i64[1];\n      goto LABEL_159;\n    case 0x6C:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v67 = v134;\nLABEL_159:\n      v47 = 2;\n      if ( i != 48 && i != 45 )\n        i = 95;\n      goto LABEL_121;\n    case 0x6D:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v140 = 0;\n      v47 = 2;\n      v77 = tp[1].m128i_i32[0];\n      LOBYTE(v69) = v77 < -1;\n      v67 = v77 + 1;\n      v68 = 0;\n      goto LABEL_122;\n    case 0x6E:\n      LODWORD(v78) = 0;\n      if ( v22 >= 0 )\n        LODWORD(v78) = v22;\n      v78 = (int)v78;\n      if ( !(_DWORD)v78 )\n        v78 = 1LL;\n      if ( v130 - v12 <= v78 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( v22 > 1 )\n        {\n          v79 = v22 - 1LL;\n          v80 = v7;\n          v7 += v79;\n          if ( i == 48 )\n            memset(v80, 48, v79);\n          else\n            memset(v80, 32, v79);\n        }\n        *v7++ = 10;\n      }\n      goto LABEL_176;\n    case 0x70:\n      v27 = 0;\nLABEL_152:\n      LOBYTE(v19) = 112;\n      if ( (_BYTE)v16 )\n        v27 = v16;\n      if ( (_BYTE)v16 )\n        v15 = 0;\n      goto LABEL_70;\n    case 0x71:\n      v47 = 1;\n      if ( (_DWORD)v20 == 79 )\n        goto LABEL_124;\n      v140 = 0;\n      LOBYTE(v69) = 0;\n      v68 = 0;\n      v67 = ((11 * tp[1].m128i_i32[0]) >> 5) + 1;\n      goto LABEL_179;\n    case 0x72:\nLABEL_69:\n      v27 = 0;\nLABEL_70:\n      *(_WORD *)format = 9504;\n      if ( !(_DWORD)v20 )\n      {\n        v26 = v8;\n        v25 = &v181;\n        goto LABEL_52;\n      }\n      v47 = 0;\n      goto LABEL_125;\n    case 0x73:\n      v149 = v15;\n      v38 = (__int64)v183;\n      v39 = _mm_loadu_si128(tp + 2);\n      v40 = _mm_loadu_si128(tp + 1);\n      v41 = tp[3].m128i_i64[0];\n      *(__m128i *)sa = _mm_loadu_si128(tp);\n      v185 = v40;\n      v186 = v39;\n      v187 = v41;\n      v42 = sub_40C500(a6, sa, a2, v19, v16, v20);\n      v15 = v149;\n      v43 = v42;\n      v44 = v42;\n      do\n      {\n        v45 = v44 % 10;\n        v44 /= 10LL;\n        v46 = 48 - v45;\n        a2 = (unsigned int)(v45 + 48);\n        if ( v43 < 0 )\n          a2 = v46;\n        *(_BYTE *)--v38 = a2;\n      }\n      while ( v44 );\n      v47 = 1;\n      if ( v22 > 0 )\n        v47 = v22;\n      if ( v43 >= 0 )\n        goto LABEL_79;\n      goto LABEL_300;\n    case 0x74:\n      LODWORD(v78) = 0;\n      if ( v22 >= 0 )\n        LODWORD(v78) = v22;\n      v78 = (int)v78;\n      if ( !(_DWORD)v78 )\n        v78 = 1LL;\n      if ( v130 - v12 <= v78 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( v22 > 1 )\n        {\n          v86 = v22 - 1LL;\n          v87 = v7;\n          v7 += v86;\n          if ( i == 48 )\n            memset(v87, 48, v86);\n          else\n            memset(v87, 32, v86);\n        }\n        *v7++ = 9;\n      }\n      goto LABEL_176;\n    case 0x75:\n      v47 = 1;\n      v67 = (tp[1].m128i_i32[2] + 6) % 7 + 1;\n      goto LABEL_121;\n    case 0x77:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v47 = 1;\n      v67 = tp[1].m128i_u32[2];\n      goto LABEL_121;\n    case 0x79:\n      if ( (_DWORD)v20 == 69 )\n      {\nLABEL_336:\n        v47 = 0;\n        goto LABEL_124;\n      }\n      v47 = 2;\n      v106 = tp[1].m128i_i32[1] % 100;\n      v67 = v106;\n      if ( v106 < 0 )\n      {\n        v107 = -v106;\n        v67 += 100;\n        if ( tp[1].m128i_i32[1] <= -1901 )\n          v67 = v107;\n      }\nLABEL_121:\n      v140 = 0;\n      v68 = 0;\n      v69 = v67 >> 31;\nLABEL_122:\n      if ( (_DWORD)v20 == 79 )\n      {\n        if ( (_BYTE)v69 )\n          goto LABEL_223;\nLABEL_124:\n        v27 = 0;\n        *(_WORD *)format = 9504;\nLABEL_125:\n        v181 = v20;\n        v26 = v8;\n        LODWORD(v20) = v47;\n        v25 = &v182;\nLABEL_52:\n        *v25 = v19;\n        v25[1] = 0;\n        v135 = v26;\n        v159 = v20;\n        v146 = v15;\n        v28 = strftime(sa, 0x400uLL, format, (const struct tm *)tp);\n        v13 = v135;\n        if ( v28 )\n        {\n          v29 = v28 - 1;\n          v30 = 0;\n          if ( v22 >= 0 )\n            v30 = v22;\n          v31 = v30;\n          if ( v29 >= v30 )\n            v31 = v29;\n          a2 = v130 - v12;\n          if ( v130 - v12 > v31 )\n          {\n            if ( v7 )\n            {\n              v15 = v146;\n              if ( !v159 && v29 < v30 )\n              {\n                v160 = v29;\n                v32 = v22 - v29;\n                v147 = v135;\n                v136 = v15;\n                v33 = v7;\n                v7 += v32;\n                if ( i == 48 )\n                {\n                  memset(v33, 48, v32);\n                  v15 = v136;\n                  v13 = v147;\n                  v29 = v160;\n                }\n                else\n                {\n                  memset(v33, 32, v32);\n                  v29 = v160;\n                  v13 = v147;\n                  v15 = v136;\n                }\n              }\n              v148 = v13;\n              v34 = &sa[1];\n              v35 = v29;\n              v36 = v7;\n              v137 = v29;\n              if ( !v27 )\n                goto LABEL_64;\n              sub_405A60((__int64)v7, (__int64)&sa[1], v29);\n              v37 = v137;\n              v13 = v148;\n              goto LABEL_66;\n            }\n            goto LABEL_67;\n          }\n          return 0LL;\n        }\n        goto LABEL_12;\n      }\nLABEL_222:\n      if ( (_BYTE)v69 )\nLABEL_223:\n        v67 = -v67;\nLABEL_179:\n      v81 = v183;\n      while ( 1 )\n      {\n        v38 = (__int64)(v81 - 1);\n        if ( v68 & 1 )\n        {\n          v82 = (__int64)(v81 - 2);\n          *--v81 = 58;\n          v38 = v82;\n        }\n        v68 >>= 1;\n        a2 = v67 / 0xA;\n        *(v81 - 1) = v67 % 0xA + 48;\n        v81 = (char *)v38;\n        if ( v67 <= 9 && !v68 )\n          break;\n        v67 /= 0xAu;\n      }\n      if ( v47 < v22 )\n        v47 = v22;\n      if ( (_BYTE)v69 )\n      {\nLABEL_300:\n        v141 = 45;\n        v109 = 45;\n        if ( i == 45 )\n          goto LABEL_301;\nLABEL_191:\n        v48 = &v183[-v38];\n        LODWORD(v50) = v47 - 1 - (unsigned __int64)&v183[-v38];\n        v49 = v130 - v12;\n        if ( (int)v50 <= 0 )\n        {\n          LODWORD(v51) = 0;\n          v111 = 1LL;\n          if ( v22 >= 0 )\n            LODWORD(v51) = v22;\n          v51 = (int)v51;\n          if ( (_DWORD)v51 )\n            v111 = (int)v51;\n          if ( v111 >= v49 )\n            return 0LL;\n          if ( v7 )\n          {\n            if ( !v47 && (unsigned __int64)(int)v51 > 1 )\n            {\n              v112 = v22 - 1LL;\n              v179 = v111;\n              v177 = (int)v51;\n              v157 = &v7[v112];\n              v166 = v15;\n              if ( i == 48 )\n              {\n                memset(v7, 48, v112);\n                v7 = v157;\n                v15 = v166;\n                v47 = 0;\n                v51 = v177;\n                v111 = v179;\n                v48 = &v183[-v38];\n              }\n              else\n              {\n                memset(v7, 32, v112);\n                v7 = v157;\n                v48 = &v183[-v38];\n                v111 = v179;\n                v51 = v177;\n                v47 = 0;\n                v15 = v166;\n              }\n            }\n            *(++v7 - 1) = v141;\n          }\n          v12 += v111;\n          v13 = v8;\n          v49 = v130 - v12;\n          goto LABEL_84;\n        }\n        if ( i != 95 )\n        {\n          if ( v47 >= v49 )\n            return 0LL;\n          LODWORD(a2) = 0;\n          v83 = 1LL;\n          if ( v22 >= 0 )\n            LODWORD(a2) = v22;\n          a2 = (int)a2;\n          if ( (_DWORD)a2 )\n            v83 = (int)a2;\n          if ( v83 >= v49 )\n            return 0LL;\n          v12 += v83;\n          v50 = (int)v50;\n          v13 = v8;\n          if ( !v7 )\n            goto LABEL_207;\n          if ( !v47 && (unsigned __int64)(int)a2 > 1 )\n          {\n            v174 = (int)v50;\n            v84 = v22 - 1LL;\n            v152 = v15;\n            v85 = v7;\n            v7 += v84;\n            if ( i == 48 )\n            {\n              memset(v85, 48, v84);\n              v15 = v152;\n              v47 = 0;\n              v48 = &v183[-v38];\n              v50 = v174;\n            }\n            else\n            {\n              memset(v85, 32, v84);\n              v50 = v174;\n              v48 = &v183[-v38];\n              v47 = 0;\n              v15 = v152;\n            }\n          }\n          ++v7;\n          v13 = v8;\n          *(v7 - 1) = v141;\nLABEL_205:\n          if ( v7 )\n          {\n            v175 = v48;\n            v170 = v47;\n            v164 = v13;\n            v153 = v15;\n            v142 = v50;\n            memset(v7, 48, v50);\n            v50 = v142;\n            v48 = v175;\n            v47 = v170;\n            v13 = v164;\n            v15 = v153;\n            v7 += v142;\n          }\nLABEL_207:\n          v12 += v50;\n          v22 = 0;\n          v51 = 0LL;\n          v49 = v130 - v12;\n          goto LABEL_84;\n        }\nLABEL_328:\n        v113 = (int)v50;\n        if ( (int)v50 >= v49 )\n          return 0LL;\n        if ( v7 )\n        {\n          v114 = v7;\n          v173 = v50;\n          v167 = v47;\n          v7 += (int)v50;\n          v158 = v15;\n          memset(v114, 32, (int)v50);\n          LODWORD(v50) = v173;\n          v47 = v167;\n          v15 = v158;\n        }\n        v12 += v113;\n        v115 = v22 - v50;\n        v21 = (int)v50 < v22;\n        v22 = 0;\n        if ( v21 )\n          v22 = v115;\n        v49 = v130 - v12;\n        if ( v141 )\n        {\n          v51 = v22;\n          v116 = 1LL;\n          if ( v22 )\n            v116 = v22;\n          if ( v116 >= v49 )\n            return 0LL;\n          if ( v7 )\n          {\n            if ( !v47 && (unsigned __int64)v22 > 1 )\n            {\n              v117 = v7;\n              v178 = v116;\n              v7 += v22 - 1;\n              v168 = v15;\n              memset(v117, 32, v22 - 1LL);\n              v116 = v178;\n              v47 = 0;\n              v15 = v168;\n              v51 = v22;\n            }\n            *(++v7 - 1) = v141;\n          }\n          v12 += v116;\n          v13 = v8;\n          i = 95;\n          v48 = &v183[-v38];\n          v49 = v130 - v12;\n        }\n        else\n        {\n          v51 = v22;\n          v13 = v8;\n          i = 95;\n          v48 = &v183[-v38];\n        }\n        goto LABEL_84;\n      }\n      if ( !v140 )\n      {\nLABEL_79:\n        v48 = &v183[-v38];\n        v49 = v130 - v12;\n        if ( i == 45 || (LODWORD(v50) = v47 - (_DWORD)v48, v47 - (int)v48 <= 0) )\n        {\n          LODWORD(v51) = 0;\n          v13 = v8;\n          if ( v22 >= 0 )\n            LODWORD(v51) = v22;\n          v51 = (int)v51;\n          goto LABEL_84;\n        }\n        if ( i != 95 )\n        {\n          a2 = v47;\n          if ( v47 >= v49 )\n            return 0LL;\n          v50 = (int)v50;\n          v13 = v8;\n          goto LABEL_205;\n        }\n        v141 = 0;\n        goto LABEL_328;\n      }\n      if ( i != 45 )\n      {\n        v141 = 43;\n        goto LABEL_191;\n      }\n      v109 = 43;\nLABEL_301:\n      LODWORD(v51) = 0;\n      v110 = 1LL;\n      if ( v22 >= 0 )\n        LODWORD(v51) = v22;\n      v51 = (int)v51;\n      if ( (_DWORD)v51 )\n        v110 = (int)v51;\n      if ( v130 - v12 <= v110 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( !v47 && (unsigned __int64)(int)v51 > 1 )\n        {\n          v176 = v109;\n          v172 = (int)v51;\n          v156 = v15;\n          memset(v7, 32, v22 - 1LL);\n          v109 = v176;\n          v51 = v172;\n          v47 = 0;\n          v15 = v156;\n          v7 += v22 - 1;\n        }\n        *v7++ = v109;\n      }\n      v12 += v110;\n      v13 = v8;\n      i = 45;\n      v48 = &v183[-v38];\n      v49 = v130 - v12;\nLABEL_84:\n      v31 = v51;\n      if ( (unsigned __int64)v48 >= v51 )\n        v31 = (unsigned __int64)v48;\n      if ( v31 < v49 )\n      {\n        if ( v7 )\n        {\n          if ( !v47 && (unsigned __int64)v48 < v51 )\n          {\n            v161 = v48;\n            v52 = v22 - (_QWORD)v48;\n            v150 = v13;\n            v138 = v15;\n            v53 = v7;\n            v7 += v52;\n            if ( i == 48 )\n            {\n              memset(v53, 48, v52);\n              v15 = v138;\n              v13 = v150;\n              v48 = v161;\n            }\n            else\n            {\n              memset(v53, 32, v52);\n              v48 = v161;\n              v13 = v150;\n              v15 = v138;\n            }\n          }\n          v148 = v13;\n          v35 = (size_t)v48;\n          v34 = (char *)v38;\n          v36 = v7;\n          v137 = (unsigned __int64)v48;\nLABEL_64:\n          if ( v15 )\n          {\n            sub_405AB0((__int64)v36, (__int64)v34, v35);\n            v37 = v137;\n            v13 = v148;\n          }\n          else\n          {\n            memcpy(v36, v34, v35);\n            v13 = v148;\n            v37 = v137;\n          }\nLABEL_66:\n          v7 += v37;\n        }\nLABEL_67:\n        v12 += v31;\n        goto LABEL_12;\n      }\n      return 0LL;\n    case 0x7A:\n      j = 0LL;\nLABEL_254:\n      if ( tp[2].m128i_i32[0] < 0 )\n      {\n        v13 = v8;\n        goto LABEL_12;\n      }\n      v99 = tp[2].m128i_i64[1];\n      LOBYTE(v69) = 1;\n      if ( (int)v99 >= 0 )\n      {\n        LOBYTE(v69) = 0;\n        if ( !(_DWORD)v99 )\n          LOBYTE(v69) = *v132 == 45;\n      }\n      v145 = (int)v99 / 3600;\n      v100 = (int)v99 / 60 % 60;\n      v68 = (int)v99 / 60 % 60;\n      v101 = (int)v99 % 60;\n      if ( j == 1 )\n        goto LABEL_364;\n      if ( j )\n      {\n        if ( j == 2 )\n          goto LABEL_383;\n        if ( j != 3 )\n        {\n          v102 = *v8;\n          v92 = v8;\nLABEL_263:\n          LODWORD(v94) = 0;\n          a2 = v130 - v12;\n          if ( v22 >= 0 )\n            LODWORD(v94) = v22;\n          v94 = (int)v94;\n          if ( v102 == 37 )\n          {\n            v78 = 1LL;\n            v13 = v92;\n            v93 = 1LL;\n            if ( (_DWORD)v94 )\n              v78 = (int)v94;\n          }\n          else\n          {\n            v8 = v92;\nLABEL_238:\n            v91 = (__int64)(v8 - 1);\n            do\n            {\n              v92 = (char *)v91;\n              LODWORD(v93) = (_DWORD)v8 - 1 + 2 - v91--;\n            }\n            while ( *(_BYTE *)(v91 + 1) != 37 );\n            LODWORD(v94) = 0;\n            v93 = (int)v93;\n            v13 = v8;\n            a2 = v130 - v12;\n            if ( v22 >= 0 )\n              LODWORD(v94) = v22;\n            v94 = (int)v94;\n            v78 = (int)v94;\n            if ( (int)v93 >= (unsigned __int64)(int)v94 )\n              v78 = (int)v93;\n          }\nLABEL_244:\n          if ( a2 > v78 )\n          {\n            if ( v7 )\n            {\n              if ( v93 < v94 )\n              {\n                v171 = v93;\n                v95 = v22 - v93;\n                v165 = v13;\n                v154 = v92;\n                v143 = v15;\n                v96 = v7;\n                v7 += v95;\n                if ( i == 48 )\n                {\n                  memset(v96, 48, v95);\n                  v15 = v143;\n                  v92 = v154;\n                  v13 = v165;\n                  v93 = v171;\n                }\n                else\n                {\n                  memset(v96, 32, v95);\n                  v93 = v171;\n                  v13 = v165;\n                  v92 = v154;\n                  v15 = v143;\n                }\n              }\n              v155 = v13;\n              v144 = v93;\n              if ( v15 )\n              {\n                sub_405AB0((__int64)v7, (__int64)v92, v93);\n                v97 = v144;\n                v13 = v155;\n              }\n              else\n              {\n                memcpy(v7, v92, v93);\n                v13 = v155;\n                v97 = v144;\n              }\n              v7 += v97;\n            }\n            v12 += v78;\n            goto LABEL_12;\n          }\n          return 0LL;\n        }\n        if ( v101 )\n        {\nLABEL_383:\n          v126 = 10000 * v145;\n          v47 = 9;\n          v140 = 1;\n          v127 = 100 * v68 + v126;\n          v68 = 20;\n          v67 = v127 + v101;\n        }\n        else if ( v100 )\n        {\nLABEL_364:\n          v128 = 100 * v145;\n          v47 = 6;\n          v140 = 1;\n          v67 = v68 + v128;\n          v68 = 4;\n        }\n        else\n        {\n          v67 = v145;\n          v47 = 3;\n          v140 = 1;\n        }\n      }\n      else\n      {\n        v129 = 100 * v145;\n        v68 = 0;\n        v140 = 1;\n        v47 = 5;\n        v67 = v100 + v129;\n      }\n      goto LABEL_122;\n    default:\n      goto LABEL_238;\n  }\n}\n", 
            "funcStartAddr": "0x405b00L", 
            "funcEndAddr": "0x4072c5L", 
            "funcName": "sub_405B00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4072D0(void *a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, int a6)\n{\n  return sub_405B00(a1, a3, a4, a2, 0, a5, a6);\n}\n", 
            "funcStartAddr": "0x4072d0L", 
            "funcEndAddr": "0x4072efL", 
            "funcName": "sub_4072D0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4072F0(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_617498 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x4072f0L", 
            "funcEndAddr": "0x407389L", 
            "funcName": "sub_4072F0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_407390(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40C750();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_412569;\n      if ( !v5 )\n        v2 = (char *)&unk_41255E;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_412565;\n    if ( !v5 )\n      v2 = (char *)&unk_412562;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x407390L", 
            "funcEndAddr": "0x407482L", 
            "funcName": "sub_407390"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407490(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_407490((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_407490((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_407490((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_407490((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_407490((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40AE50((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_407490((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_407490((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_407390(\"`\", v11);\n        v47 = sub_407390(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_407490(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_407490((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_407490((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_407490((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_407490((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_407490((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40AE50((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_407490((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_407490((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_407390(\"`\", v11);\n        v47 = sub_407390(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x402360L", 
            "funcEndAddr": "0x402365L", 
            "funcName": "sub_407490"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407490(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_407490((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_407490((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_407490((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_407490((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_407490((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40AE50((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_407490((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_407490((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_407390(\"`\", v11);\n        v47 = sub_407390(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_407490(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_407490((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_407490((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_407490((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_407490((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407490((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407490((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_407490((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40AE50((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_407490((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_407490((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_407390(\"`\", v11);\n        v47 = sub_407390(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x402360L", 
            "funcEndAddr": "0x402365L", 
            "funcName": "sub_407490"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4086C0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_617378;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_617390 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4097B0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_617378 == &xmmword_617380 )\n    {\n      v7 = (__int128 *)sub_4095C0(0LL, v9);\n      off_617378 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_617380);\n    }\n    else\n    {\n      off_617378 = (__int128 *)sub_4095C0(off_617378, v9);\n      v7 = off_617378;\n    }\n    memset(&v7[dword_617390], 0, 16LL * (a1 + 1 - dword_617390));\n    dword_617390 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407490(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6174A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409560(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407490(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_4086C0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_617378;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_617390 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4097B0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_617378 == &xmmword_617380 )\n    {\n      v7 = (__int128 *)sub_4095C0(0LL, v9);\n      off_617378 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_617380);\n    }\n    else\n    {\n      off_617378 = (__int128 *)sub_4095C0(off_617378, v9);\n      v7 = off_617378;\n    }\n    memset(&v7[dword_617390], 0, 16LL * (a1 + 1 - dword_617390));\n    dword_617390 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407490(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6174A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409560(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407490(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x402365L", 
            "funcEndAddr": "0x40236aL", 
            "funcName": "sub_4086C0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4086C0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_617378;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_617390 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4097B0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_617378 == &xmmword_617380 )\n    {\n      v7 = (__int128 *)sub_4095C0(0LL, v9);\n      off_617378 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_617380);\n    }\n    else\n    {\n      off_617378 = (__int128 *)sub_4095C0(off_617378, v9);\n      v7 = off_617378;\n    }\n    memset(&v7[dword_617390], 0, 16LL * (a1 + 1 - dword_617390));\n    dword_617390 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407490(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6174A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409560(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407490(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_4086C0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_617378;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_617390 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4097B0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_617378 == &xmmword_617380 )\n    {\n      v7 = (__int128 *)sub_4095C0(0LL, v9);\n      off_617378 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_617380);\n    }\n    else\n    {\n      off_617378 = (__int128 *)sub_4095C0(off_617378, v9);\n      v7 = off_617378;\n    }\n    memset(&v7[dword_617390], 0, 16LL * (a1 + 1 - dword_617390));\n    dword_617390 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407490(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6174A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409560(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407490(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x402365L", 
            "funcEndAddr": "0x40236aL", 
            "funcName": "sub_4086C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4088A0(__int128 *a1)\n{\n  if ( !a1 )\n    a1 = &xmmword_6175A0;\n  return *(unsigned int *)a1;\n}\n", 
            "funcStartAddr": "0x4088a0L", 
            "funcEndAddr": "0x4088afL", 
            "funcName": "sub_4088A0"
        }, 
        {
            "decompiledFuncCode": "__int128 *__fastcall sub_4088B0(__int128 *a1, int a2)\n{\n  __int128 *result; // rax\n\n  result = &xmmword_6175A0;\n  if ( !a1 )\n    a1 = &xmmword_6175A0;\n  *(_DWORD *)a1 = a2;\n  return result;\n}\n", 
            "funcStartAddr": "0x4088b0L", 
            "funcEndAddr": "0x4088bfL", 
            "funcName": "sub_4088B0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408BE0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4086C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408BE0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4086C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40236aL", 
            "funcEndAddr": "0x40236fL", 
            "funcName": "sub_408BE0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408BE0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4086C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408BE0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4086C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40236aL", 
            "funcEndAddr": "0x40236fL", 
            "funcName": "sub_408BE0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408C50(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4086C0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_408C50(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4086C0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40236fL", 
            "funcEndAddr": "0x402374L", 
            "funcName": "sub_408C50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408C50(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4086C0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_408C50(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4086C0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40236fL", 
            "funcEndAddr": "0x402374L", 
            "funcName": "sub_408C50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408CC0(int a1, char *a2)\n{\n  return sub_408BE0(0, a1, a2);\n}\n", 
            "funcStartAddr": "0x408cc0L", 
            "funcEndAddr": "0x408cccL", 
            "funcName": "sub_408CC0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408CE0(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_6175D0;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6175A0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_6175B0);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_6175C0);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_4086C0(0, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x408ce0L", 
            "funcEndAddr": "0x408d50L", 
            "funcName": "sub_408CE0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408D60(char *a1)\n{\n  return sub_408CE0(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x408d60L", 
            "funcEndAddr": "0x408d71L", 
            "funcName": "sub_408D60"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408D90(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4086C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408D90(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4086C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402374L", 
            "funcEndAddr": "0x402379L", 
            "funcName": "sub_408D90"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408D90(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4086C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408D90(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4086C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402374L", 
            "funcEndAddr": "0x402379L", 
            "funcName": "sub_408D90"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408E00(int a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_6175A0);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6175B0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_6175C0);\n  v9 = qword_6175D0;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_4086C0(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x408e00L", 
            "funcEndAddr": "0x408e6cL", 
            "funcName": "sub_408E00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408EF0(int a1, char *a2)\n{\n  return sub_4086C0(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_617340);\n}\n", 
            "funcStartAddr": "0x408ef0L", 
            "funcEndAddr": "0x408f01L", 
            "funcName": "sub_408EF0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408F10(char *a1)\n{\n  return sub_4086C0(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_617340);\n}\n", 
            "funcStartAddr": "0x408f10L", 
            "funcEndAddr": "0x408f26L", 
            "funcName": "sub_408F10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408F30(__int64 a1)\n{\n  int v1; // eax\n  int v2; // edx\n  __int64 result; // rax\n  __int64 v4; // rax\n\n  *(_QWORD *)(a1 + 8) = 0LL;\n  v1 = sub_40C6A0(228);\n  v2 = v1;\n  *(_DWORD *)a1 = v1;\n  result = 0LL;\n  if ( v2 < 0 )\n  {\n    v4 = sub_409BB0(0LL, 0LL);\n    *(_QWORD *)(a1 + 8) = v4;\n    result = (unsigned int)-(v4 == 0);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408f30L", 
            "funcEndAddr": "0x408f7aL", 
            "funcName": "sub_408F30"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408F80(__int64 a1)\n{\n  int result; // eax\n\n  if ( *(_DWORD *)a1 < 0 )\n    result = sub_409940(*(void **)(a1 + 8));\n  else\n    result = fchdir(*(_DWORD *)a1);\n  return result;\n}\n", 
            "funcStartAddr": "0x408f80L", 
            "funcEndAddr": "0x408f99L", 
            "funcName": "sub_408F80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_408FA0(int *a1)\n{\n  int *v1; // rbx\n  int v2; // edi\n\n  v1 = a1;\n  v2 = *a1;\n  if ( v2 >= 0 )\n    close(v2);\n  free(*((void **)v1 + 1));\n}\n", 
            "funcStartAddr": "0x408fa0L", 
            "funcEndAddr": "0x408fb9L", 
            "funcName": "sub_408FA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408FC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_408FC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x402379L", 
            "funcEndAddr": "0x40237eL", 
            "funcName": "sub_408FC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408FC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_408FC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x402379L", 
            "funcEndAddr": "0x40237eL", 
            "funcName": "sub_408FC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4093C0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_408FC0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_408FC0(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x4093c0L", 
            "funcEndAddr": "0x409420L", 
            "funcName": "sub_4093C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409420(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_408FC0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_408FC0(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x409420L", 
            "funcEndAddr": "0x4094dcL", 
            "funcName": "sub_409420"
        }, 
        {
            "decompiledFuncCode": "int sub_4094E0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_4107C3);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n", 
            "funcStartAddr": "0x4094e0L", 
            "funcEndAddr": "0x409554L", 
            "funcName": "sub_4094E0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409560(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_4097B0();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409560L", 
            "funcEndAddr": "0x40957aL", 
            "funcName": "sub_409560"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4095C0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_4097B0();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4095c0L", 
            "funcEndAddr": "0x4095f6L", 
            "funcName": "sub_4095C0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409760(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_409560(n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x409760L", 
            "funcEndAddr": "0x409788L", 
            "funcName": "sub_409760"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409790(void *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen((const char *)src);\n  return sub_409760(src, v1 + 1);\n}\n", 
            "funcStartAddr": "0x409790L", 
            "funcEndAddr": "0x4097a3L", 
            "funcName": "sub_409790"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4097B0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x4097b0L", 
            "funcEndAddr": "0x4097e1L", 
            "funcName": "sub_4097B0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4097F0()\n{\n  __int64 v0; // rbx\n\n  v0 = sub_409BB0(0LL, 0LL);\n  if ( !v0 && *__errno_location() == 12 )\n    sub_4097B0();\n  return v0;\n}\n", 
            "funcStartAddr": "0x4097f0L", 
            "funcEndAddr": "0x40981fL", 
            "funcName": "sub_4097F0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_409820(__int64 a1, ...)\n{\n  gcc_va_list va; // [rsp+8h] [rbp-D0h]\n\n  va_start(va, a1);\n  return sub_40CE40(a1, va);\n}\n", 
            "funcStartAddr": "0x409820L", 
            "funcEndAddr": "0x4098b4L", 
            "funcName": "sub_409820"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4098C0(int a1)\n{\n  if ( a1 >= 0 )\n  {\n    if ( close(a1) )\n      __assert_fail(\"! close_fail\", \"lib/chdir-long.c\", 0x40u, \"cdb_free\");\n  }\n}\n", 
            "funcStartAddr": "0x4098c0L", 
            "funcEndAddr": "0x4098f3L", 
            "funcName": "sub_4098C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409900(int *a1, const char *a2)\n{\n  int v2; // eax\n  int v3; // ebp\n\n  v2 = openat(*a1, a2, 67840);\n  if ( v2 < 0 )\n    return 0xFFFFFFFFLL;\n  v3 = v2;\n  sub_4098C0(*a1);\n  *a1 = v3;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x409900L", 
            "funcEndAddr": "0x409937L", 
            "funcName": "sub_409900"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409940(void *s)\n{\n  unsigned int v1; // ebx\n  int *v2; // r12\n  size_t v3; // rax\n  size_t v4; // r14\n  size_t v5; // rax\n  size_t v6; // rbx\n  _BYTE *v7; // rbp\n  char *v8; // r13\n  _BYTE *v9; // rax\n  _BYTE *v10; // rbx\n  int v11; // eax\n  int v12; // ebx\n  _BYTE *v14; // rax\n  _BYTE *v15; // rbx\n  int v16; // eax\n  int fd; // [rsp+Ch] [rbp-2Ch]\n\n  v1 = chdir((const char *)s);\n  if ( v1 )\n  {\n    v2 = __errno_location();\n    if ( *v2 == 36 )\n    {\n      v3 = strlen((const char *)s);\n      fd = -100;\n      v4 = v3;\n      if ( !v3 )\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 0x7Eu, \"chdir_long\");\n      if ( v3 <= 0xFFF )\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 0x7Fu, \"chdir_long\");\n      v5 = strspn((const char *)s, \"/\");\n      v6 = v5;\n      if ( v5 == 2 )\n      {\n        v14 = (_BYTE *)sub_40AED0((char *)s + 3, 47LL, v4 - 3);\n        v15 = v14;\n        if ( !v14 )\n          return (unsigned int)-1;\n        *v14 = 0;\n        v16 = sub_409900(&fd, (const char *)s);\n        *v15 = 47;\n        if ( !v16 )\n        {\n          v7 = &v15[strspn(v15 + 1, \"/\") + 1];\n          goto LABEL_7;\n        }\n      }\n      else\n      {\n        v7 = s;\n        if ( !v5 )\n        {\nLABEL_7:\n          if ( *v7 == 47 )\n            __assert_fail(\"*dir != '/'\", \"lib/chdir-long.c\", 0xA2u, \"chdir_long\");\n          v8 = (char *)s + v4;\n          if ( v7 > (char *)s + v4 )\n            __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 0xA3u, \"chdir_long\");\n          while ( v8 - v7 > 4095 )\n          {\n            v9 = memrchr(v7, 47, 0x1000uLL);\n            v10 = v9;\n            if ( !v9 )\n            {\n              *v2 = 36;\n              return (unsigned int)-1;\n            }\n            *v9 = 0;\n            if ( v9 - v7 > 4095 )\n              __assert_fail(\"slash - dir < 4096\", \"lib/chdir-long.c\", 0xB3u, \"chdir_long\");\n            v11 = sub_409900(&fd, v7);\n            *v10 = 47;\n            if ( v11 )\n              goto LABEL_18;\n            v7 = &v10[strspn(v10 + 1, \"/\") + 1];\n          }\n          if ( v8 <= v7 || !(unsigned int)sub_409900(&fd, v7) )\n          {\n            v1 = fchdir(fd);\n            if ( !v1 )\n            {\n              sub_4098C0(fd);\n              return v1;\n            }\n          }\n          goto LABEL_18;\n        }\n        if ( !(unsigned int)sub_409900(&fd, \"/\") )\n        {\n          v7 = (char *)s + v6;\n          goto LABEL_7;\n        }\n      }\nLABEL_18:\n      v12 = *v2;\n      sub_4098C0(fd);\n      *v2 = v12;\n      return (unsigned int)-1;\n    }\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x409940L", 
            "funcEndAddr": "0x409babL", 
            "funcName": "sub_409940"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_409BB0(char *a1, size_t a2)\n{\n  char *v3; // rbx\n  __dev_t v4; // r15\n  __ino_t v5; // r14\n  DIR *v6; // rbp\n  int v7; // er15\n  int *v8; // r12\n  int v9; // eax\n  bool v10; // r13\n  struct dirent *v11; // rax\n  const char *v12; // rbx\n  signed __int64 v13; // r13\n  size_t v14; // r14\n  char *v15; // rdx\n  char *v16; // rax\n  size_t v17; // rbx\n  char *v18; // rax\n  int v19; // ebx\n  __dev_t v20; // [rsp+8h] [rbp-120h]\n  size_t v21; // [rsp+8h] [rbp-120h]\n  __dev_t v22; // [rsp+10h] [rbp-118h]\n  char *ptr; // [rsp+18h] [rbp-110h]\n  char *v24; // [rsp+20h] [rbp-108h]\n  size_t size; // [rsp+28h] [rbp-100h]\n  bool v26; // [rsp+3Fh] [rbp-E9h]\n  char *src; // [rsp+40h] [rbp-E8h]\n  char *srca; // [rsp+40h] [rbp-E8h]\n  __dev_t v29; // [rsp+48h] [rbp-E0h]\n  __ino_t v30; // [rsp+50h] [rbp-D8h]\n  __ino_t v31; // [rsp+58h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+60h] [rbp-C8h]\n\n  v24 = a1;\n  if ( !a2 )\n  {\n    size = 4096LL;\n    if ( a1 )\n    {\n      ptr = 0LL;\n      *__errno_location() = 22;\n      return ptr;\n    }\nLABEL_3:\n    ptr = (char *)malloc(size);\n    if ( !ptr )\n      return ptr;\n    goto LABEL_7;\n  }\n  size = a2;\n  if ( !a1 )\n    goto LABEL_3;\n  ptr = a1;\nLABEL_7:\n  v3 = &ptr[size];\n  ptr[size - 1] = 0;\n  if ( __lxstat(1, \".\", &stat_buf) < 0\n    || (v4 = stat_buf.st_dev, v5 = stat_buf.st_ino, v20 = stat_buf.st_dev, __lxstat(1, \"/\", &stat_buf) < 0) )\n  {\n    v8 = __errno_location();\nLABEL_58:\n    v19 = *v8;\n    if ( a1 )\n      goto LABEL_56;\n    goto LABEL_59;\n  }\n  src = v3 - 1;\n  v30 = stat_buf.st_ino;\n  v29 = stat_buf.st_dev;\n  v26 = v5 != stat_buf.st_ino || v4 != stat_buf.st_dev;\n  if ( !v26 )\n    goto LABEL_37;\n  v6 = 0LL;\n  v7 = -100;\n  v8 = __errno_location();\n  do\n  {\n    v9 = openat(v7, \"..\", 0);\n    v7 = v9;\n    if ( v9 < 0 )\n    {\n      v19 = *v8;\n      if ( v6 )\nLABEL_54:\n        closedir(v6);\nLABEL_55:\n      if ( a1 )\n      {\nLABEL_56:\n        *v8 = v19;\n        return 0LL;\n      }\nLABEL_59:\n      free(ptr);\n      goto LABEL_56;\n    }\n    if ( __fxstat(1, v9, &stat_buf) )\n    {\n      v19 = *v8;\n      if ( v6 )\n        closedir(v6);\n      goto LABEL_62;\n    }\n    if ( v6 && closedir(v6) || (v22 = stat_buf.st_dev, v31 = stat_buf.st_ino, (v6 = fdopendir(v7)) == 0LL) )\n    {\n      v19 = *v8;\nLABEL_62:\n      close(v7);\n      goto LABEL_55;\n    }\n    v10 = v26;\n    do\n    {\n      while ( 1 )\n      {\n        *v8 = 0;\n        v11 = readdir(v6);\n        if ( v11 )\n        {\n          if ( v11->d_name[0] != 46 )\n            goto LABEL_19;\n          goto LABEL_48;\n        }\n        v19 = *v8;\n        if ( *v8 || !v10 )\n          goto LABEL_52;\n        rewinddir(v6);\n        v11 = readdir(v6);\n        if ( !v11 )\n        {\n          v19 = *v8;\nLABEL_52:\n          if ( !v19 )\n          {\n            *v8 = 2;\n            v19 = 2;\n          }\n          goto LABEL_54;\n        }\n        v10 = 0;\n        if ( v11->d_name[0] != 46 )\n          break;\nLABEL_48:\n        if ( v11->d_name[1] && *(_WORD *)&v11->d_name[1] != 46 )\n        {\nLABEL_19:\n          if ( !v10 )\n            break;\n          if ( v22 != v20 || v11->d_ino == v5 )\n          {\n            v10 = v22 != v20 || v11->d_ino == v5;\n            break;\n          }\n        }\n      }\n      v12 = v11->d_name;\n    }\n    while ( __fxstatat(1, v7, v11->d_name, &stat_buf, 256)\n         || (stat_buf.st_mode & 0xF000) != 0x4000\n         || stat_buf.st_dev != v20\n         || stat_buf.st_ino != v5 );\n    v13 = src - ptr;\n    v14 = strlen(v12);\n    if ( src - ptr <= v14 )\n    {\n      if ( a2 )\n      {\n        *v8 = 34;\n        v19 = 34;\n        goto LABEL_54;\n      }\n      v15 = (char *)size;\n      if ( v14 >= size )\n        v15 = (char *)v14;\n      srca = v15;\n      v21 = (size_t)&v15[size];\n      if ( __CFADD__(v15, size) || (v16 = (char *)realloc(ptr, (size_t)&v15[size])) == 0LL )\n      {\n        *v8 = 12;\n        v19 = 12;\n        goto LABEL_54;\n      }\n      ptr = v16;\n      src = (char *)memcpy(&srca[v13 + (_QWORD)v16], &v16[v13], size - v13);\n      size = v21;\n    }\n    src = (char *)memcpy(&src[-v14], v12, v14) - 1;\n    v5 = v31;\n    *src = 47;\n    v20 = v22;\n  }\n  while ( v29 != v22 || v30 != v31 );\n  if ( closedir(v6) )\n    goto LABEL_58;\n  v3 = &ptr[size];\nLABEL_37:\n  if ( src == &ptr[size - 1] )\n    *--src = 47;\n  v17 = v3 - src;\n  memmove(ptr, src, v17);\n  if ( !a2 )\n    v24 = (char *)realloc(ptr, v17);\n  v18 = v24;\n  if ( !v24 )\n    v18 = ptr;\n  return v18;\n}\n", 
            "funcStartAddr": "0x409bb0L", 
            "funcEndAddr": "0x40a072L", 
            "funcName": "sub_409BB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A080(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x40a080L", 
            "funcEndAddr": "0x40a15fL", 
            "funcName": "sub_40A080"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A160(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a160L", 
            "funcEndAddr": "0x40a77cL", 
            "funcName": "sub_40A160"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A780(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_40A080(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_40A080((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_40A160(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_40A160(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_40A160(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x40a780L", 
            "funcEndAddr": "0x40ad46L", 
            "funcName": "sub_40A780"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AD50(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_6175E0 = dword_61739C;\n  dword_6175E4 = dword_617398;\n  result = sub_40A780(a1, a2, a3, a4, a5, a6, &dword_6175E0, a7);\n  dword_61739C = dword_6175E0;\n  qword_617638 = qword_6175F0;\n  dword_617394 = dword_6175E8;\n  return result;\n}\n", 
            "funcStartAddr": "0x40ad50L", 
            "funcEndAddr": "0x40ada6L", 
            "funcName": "sub_40AD50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40ADB0(int a1, __int64 a2, char *a3)\n{\n  return sub_40AD50(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x40adb0L", 
            "funcEndAddr": "0x40adc8L", 
            "funcName": "sub_40ADB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40ADD0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40AD50(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x40add0L", 
            "funcEndAddr": "0x40ade3L", 
            "funcName": "sub_40ADD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40ADF0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40A780(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x40adf0L", 
            "funcEndAddr": "0x40ae05L", 
            "funcName": "sub_40ADF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AE10(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40AD50(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x40ae10L", 
            "funcEndAddr": "0x40ae26L", 
            "funcName": "sub_40AE10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AE30(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40A780(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x40ae30L", 
            "funcEndAddr": "0x40ae48L", 
            "funcName": "sub_40AE30"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_40AE50(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_40C6F0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40ae50L", 
            "funcEndAddr": "0x40aecaL", 
            "funcName": "sub_40AE50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40AED0(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax\n  __int64 v4; // r9\n  __int64 v5; // rcx\n  _BYTE *v6; // rdi\n\n  if ( !a3 )\n    return 0LL;\n  if ( (unsigned __int8)a1 & 7 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( !((unsigned __int8)a1 & 7) )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && !(((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( ((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = (__int64)(a1 + 1);\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = (_BYTE *)v5;\n      if ( (_BYTE *)v5 == v6 )\n        break;\n      if ( *(_BYTE *)(++v5 - 1) == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x40aed0L", 
            "funcEndAddr": "0x40afd4L", 
            "funcName": "sub_40AED0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40AFE0(const char *a1)\n{\n  const char *v1; // rbx\n  size_t v2; // rax\n  char *v3; // rcx\n  unsigned __int64 v4; // rdx\n  unsigned __int64 result; // rax\n  char v6; // di\n  unsigned __int64 v7; // rsi\n  char v8; // r9\n  char v9; // r10\n  unsigned __int8 v10; // r11\n\n  v1 = a1;\n  v2 = strlen(a1);\n  v3 = (char *)a1;\n  v4 = 0LL;\n  result = v2 + 1;\n  while ( 1 )\n  {\n    v6 = v1[v4];\n    v7 = v4 + 1;\n    if ( v6 != 92 )\n      break;\n    if ( v4 + 4 >= result )\n      break;\n    v8 = v1[v7];\n    if ( (unsigned __int8)(v8 - 48) > 3u )\n      break;\n    v9 = v1[v4 + 2];\n    if ( (unsigned __int8)(v9 - 48) > 7u )\n      break;\n    v10 = v1[v4 + 3] - 48;\n    if ( v10 > 7u )\n      break;\n    ++v3;\n    v7 = v4 + 4;\n    *(v3 - 1) = v10 + 8 * (v9 + 8 * v8) + -128;\nLABEL_3:\n    v4 = v7;\n  }\n  *v3++ = v6;\n  if ( result > v7 )\n    goto LABEL_3;\n  return result;\n}\n", 
            "funcStartAddr": "0x40afe0L", 
            "funcEndAddr": "0x40b06aL", 
            "funcName": "sub_40AFE0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B070(void *ptr)\n{\n  free(*(void **)ptr);\n  free(*((void **)ptr + 1));\n  free(*((void **)ptr + 2));\n  if ( *((_BYTE *)ptr + 40) & 4 )\n    free(*((void **)ptr + 3));\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x40b070L", 
            "funcEndAddr": "0x40b0b2L", 
            "funcName": "sub_40B070"
        }, 
        {
            "decompiledFuncCode": "void *sub_40B0C0()\n{\n  FILE *v0; // rax\n  FILE *v1; // rbp\n  void **v2; // r12\n  const char *v3; // rax\n  const char *v4; // r15\n  bool v5; // r13\n  char *v6; // rbx\n  void *v7; // rax\n  char *v8; // rdi\n  void *v9; // rax\n  char *v10; // rdi\n  void *v11; // rax\n  __int64 v12; // rdi\n  const char *v13; // rax\n  __int64 v14; // rdx\n  const char *v15; // r15\n  __int64 v16; // rax\n  char v17; // al\n  __int64 v18; // r13\n  char *v19; // rax\n  bool v20; // dl\n  FILE *v22; // rax\n  FILE *v23; // r13\n  struct mntent *i; // rbp\n  char *v25; // r15\n  char *v26; // rbx\n  void *v27; // rax\n  char *v28; // rdi\n  void *v29; // rax\n  char *v30; // rdi\n  const char *v31; // rax\n  const char *v32; // rbp\n  bool v33; // dl\n  int v34; // eax\n  __int64 v35; // r15\n  const char *v36; // rdi\n  char *v37; // rax\n  bool v38; // dl\n  char v39; // al\n  int *v40; // rax\n  int v41; // er14\n  int *v42; // r13\n  _QWORD *v43; // rdi\n  void *v44; // rbx\n  int *v45; // rax\n  char v46; // [rsp+1Fh] [rbp-79h]\n  unsigned int v47; // [rsp+20h] [rbp-78h]\n  unsigned int v48; // [rsp+24h] [rbp-74h]\n  int v49; // [rsp+28h] [rbp-70h]\n  int v50; // [rsp+2Ch] [rbp-6Ch]\n  int v51; // [rsp+30h] [rbp-68h]\n  int v52; // [rsp+34h] [rbp-64h]\n  int v53; // [rsp+38h] [rbp-60h]\n  int v54; // [rsp+3Ch] [rbp-5Ch]\n  int v55; // [rsp+40h] [rbp-58h]\n  int v56; // [rsp+44h] [rbp-54h]\n  void *ptr; // [rsp+48h] [rbp-50h]\n  char *lineptr; // [rsp+50h] [rbp-48h]\n  size_t n; // [rsp+58h] [rbp-40h]\n\n  v0 = fopen(\"/proc/self/mountinfo\", \"r\");\n  if ( v0 )\n  {\n    lineptr = 0LL;\n    v1 = v0;\n    v2 = &ptr;\n    n = 0LL;\n    while ( __getdelim(&lineptr, &n, 10, v1) != -1 )\n    {\n      if ( (sscanf(lineptr, \"%*u %*u %u:%u %n%*s%n %n%*s%n%c\", &v47, &v48, &v55, &v56, &v49, &v50, &v46) & 0xFFFFFFFB) == 3 )\n      {\n        v3 = (const char *)sub_40BD00(&lineptr[v50], \" - \");\n        v4 = v3;\n        if ( v3 )\n        {\n          if ( (sscanf(v3, \" - %n%*s%n %n%*s%n %c\", &v51, &v52, &v53, &v54, &v46) & 0xFFFFFFFB) == 1 )\n          {\n            v5 = 1;\n            lineptr[v56] = 0;\n            lineptr[v50] = 0;\n            v4[v52] = 0;\n            v4[v54] = 0;\n            sub_40AFE0(&v4[v53]);\n            sub_40AFE0(&lineptr[v49]);\n            sub_40AFE0(&lineptr[v55]);\n            v6 = (char *)sub_409560(0x38uLL);\n            v7 = sub_409790((void *)&v4[v53]);\n            v8 = &lineptr[v49];\n            *(_QWORD *)v6 = v7;\n            v9 = sub_409790(v8);\n            v10 = &lineptr[v55];\n            *((_QWORD *)v6 + 1) = v9;\n            v11 = sub_409790(v10);\n            v12 = v51;\n            *((_QWORD *)v6 + 2) = v11;\n            v13 = (const char *)sub_409790((void *)&v4[v12]);\n            v14 = v47;\n            v15 = v13;\n            *((_QWORD *)v6 + 3) = v13;\n            v16 = v48;\n            v6[40] |= 4u;\n            *((_QWORD *)v6 + 4) = (unsigned __int8)v16 | ((_DWORD)v14 << 8) & 0xFFF00 | (v14 << 32) & 0xFFFFF00000000000LL | (v16 << 12) & 0xFFFFFF00000LL;\n            if ( strcmp(v15, \"autofs\")\n              && strcmp(v15, \"proc\")\n              && strcmp(v15, \"subfs\")\n              && strcmp(v15, \"debugfs\")\n              && strcmp(v15, \"devpts\")\n              && strcmp(v15, \"fusectl\")\n              && strcmp(v15, \"mqueue\")\n              && strcmp(v15, (const char *)&unk_4105FC)\n              && strcmp(v15, \"sysfs\")\n              && memcmp(v15, \"devfs\", 6uLL)\n              && strcmp(v15, \"kernfs\")\n              && strcmp(v15, \"ignore\") )\n            {\n              v5 = strcmp(v15, \"none\") == 0;\n            }\n            v17 = v5 | v6[40] & 0xFE;\n            v18 = *(_QWORD *)v6;\n            v6[40] = v17;\n            v19 = strchr((const char *)v18, 58);\n            v20 = 1;\n            if ( !v19\n              && (*(_BYTE *)v18 != 47 || *(_BYTE *)(v18 + 1) != 47 || strcmp(v15, \"smbfs\") && strcmp(v15, \"cifs\")) )\n            {\n              v20 = strcmp(\"-hosts\", (const char *)v18) == 0;\n            }\n            v6[40] = (2 * v20) | v6[40] & 0xFD;\n            *v2 = v6;\n            v2 = (void **)(v6 + 48);\n          }\n        }\n      }\n    }\n    free(lineptr);\n    if ( v1->_flags & 0x20 )\n    {\n      v45 = __errno_location();\n      v41 = *v45;\n      v42 = v45;\n      sub_40CED0(v1);\n      *v42 = v41;\n      goto LABEL_47;\n    }\n    if ( (unsigned int)sub_40CED0(v1) != -1 )\n    {\nLABEL_13:\n      *v2 = 0LL;\n      return ptr;\n    }\n  }\n  else\n  {\n    v22 = setmntent(\"/etc/mtab\", \"r\");\n    v23 = v22;\n    if ( !v22 )\n      return 0LL;\n    v2 = &ptr;\n    for ( i = getmntent(v22); i; i = getmntent(v23) )\n    {\n      v25 = hasmntopt(i, \"bind\");\n      v26 = (char *)sub_409560(0x38uLL);\n      v27 = sub_409790(i->mnt_fsname);\n      v28 = i->mnt_dir;\n      *(_QWORD *)v26 = v27;\n      v29 = sub_409790(v28);\n      *((_QWORD *)v26 + 2) = 0LL;\n      v30 = i->mnt_type;\n      *((_QWORD *)v26 + 1) = v29;\n      v31 = (const char *)sub_409790(v30);\n      v26[40] |= 4u;\n      v32 = v31;\n      *((_QWORD *)v26 + 3) = v31;\n      v33 = 1;\n      if ( strcmp(v31, \"autofs\") )\n      {\n        if ( strcmp(v31, \"proc\") )\n        {\n          if ( strcmp(v31, \"subfs\") )\n          {\n            if ( strcmp(v31, \"debugfs\") )\n            {\n              if ( strcmp(v31, \"devpts\") )\n              {\n                if ( strcmp(v31, \"fusectl\") )\n                {\n                  if ( strcmp(v31, \"mqueue\") )\n                  {\n                    if ( strcmp(v31, (const char *)&unk_4105FC) )\n                    {\n                      if ( strcmp(v31, \"sysfs\") )\n                      {\n                        if ( memcmp(v31, \"devfs\", 6uLL) )\n                        {\n                          if ( strcmp(v31, \"kernfs\") )\n                          {\n                            v34 = strcmp(v31, \"ignore\");\n                            v33 = 1;\n                            if ( v34 )\n                              v33 = strcmp(v32, \"none\") == 0 && v25 == 0LL;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      v35 = *(_QWORD *)v26;\n      v36 = *(const char **)v26;\n      v26[40] = v33 | v26[40] & 0xFE;\n      v37 = strchr(v36, 58);\n      v38 = 1;\n      if ( !v37 && (*(_BYTE *)v35 != 47 || *(_BYTE *)(v35 + 1) != 47 || strcmp(v32, \"smbfs\") && strcmp(v32, \"cifs\")) )\n        v38 = strcmp(\"-hosts\", (const char *)v35) == 0;\n      v39 = v26[40];\n      *((_QWORD *)v26 + 4) = -1LL;\n      v26[40] = (2 * v38) | v39 & 0xFD;\n      *v2 = v26;\n      v2 = (void **)(v26 + 48);\n    }\n    if ( endmntent(v23) )\n      goto LABEL_13;\n  }\n  v40 = __errno_location();\n  v41 = *v40;\n  v42 = v40;\nLABEL_47:\n  *v2 = 0LL;\n  v43 = ptr;\n  if ( ptr )\n  {\n    do\n    {\n      v44 = (void *)v43[6];\n      sub_40B070(v43);\n      ptr = v44;\n      v43 = v44;\n    }\n    while ( v44 );\n  }\n  *v42 = v41;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b0c0L", 
            "funcEndAddr": "0x40b87fL", 
            "funcName": "sub_40B0C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40B880(__int64 a1, unsigned __int64 a2, __int64 *a3)\n{\n  __int64 v3; // r11\n  __int64 v4; // r8\n  unsigned __int64 v5; // r9\n  __int64 v6; // rax\n  unsigned __int64 v7; // rcx\n  unsigned __int8 v8; // bl\n  unsigned __int64 v9; // r11\n  __int64 v10; // rbx\n  __int64 v11; // r8\n  unsigned __int64 v12; // r9\n  __int64 v13; // r10\n  unsigned __int64 v14; // rcx\n  unsigned __int8 v15; // r11\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r10\n  unsigned __int64 result; // rax\n\n  v3 = 1LL;\n  v4 = 1LL;\n  v5 = 0LL;\n  v6 = -1LL;\n  while ( 1 )\n  {\n    v7 = v4 + v5;\n    if ( v4 + v5 >= a2 )\n      break;\n    while ( 1 )\n    {\n      v8 = *(_BYTE *)(a1 + v6 + v4);\n      if ( *(_BYTE *)(a1 + v7) >= v8 )\n        break;\n      v5 = v7;\n      v4 = 1LL;\n      v9 = v7++;\n      v3 = v9 - v6;\n      if ( v7 >= a2 )\n        goto LABEL_5;\n    }\n    if ( *(_BYTE *)(a1 + v7) == v8 )\n    {\n      if ( v4 == v3 )\n      {\n        v5 = v7;\n        v4 = 1LL;\n      }\n      else\n      {\n        ++v4;\n      }\n    }\n    else\n    {\n      v6 = v5;\n      v3 = 1LL;\n      ++v5;\n      v4 = 1LL;\n    }\n  }\nLABEL_5:\n  *a3 = v3;\n  v10 = 1LL;\n  v11 = 1LL;\n  v12 = 0LL;\n  v13 = -1LL;\n  while ( 1 )\n  {\n    v14 = v11 + v12;\n    if ( a2 <= v11 + v12 )\n      break;\n    while ( 1 )\n    {\n      v15 = *(_BYTE *)(a1 + v13 + v11);\n      if ( *(_BYTE *)(a1 + v14) <= v15 )\n        break;\n      v12 = v14;\n      v11 = 1LL;\n      v16 = v14++;\n      v10 = v16 - v13;\n      if ( a2 <= v14 )\n        goto LABEL_9;\n    }\n    if ( *(_BYTE *)(a1 + v14) == v15 )\n    {\n      if ( v11 == v10 )\n      {\n        v12 = v14;\n        v11 = 1LL;\n      }\n      else\n      {\n        ++v11;\n      }\n    }\n    else\n    {\n      v13 = v12;\n      v10 = 1LL;\n      ++v12;\n      v11 = 1LL;\n    }\n  }\nLABEL_9:\n  v17 = v13 + 1;\n  result = v6 + 1;\n  if ( v17 >= result )\n  {\n    *a3 = v10;\n    result = v17;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b880L", 
            "funcEndAddr": "0x40b9aeL", 
            "funcName": "sub_40B880"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B9B0(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4)\n{\n  unsigned __int8 *v4; // r12\n  unsigned __int64 v5; // rbp\n  unsigned __int64 v6; // rbx\n  unsigned __int64 v7; // r13\n  char *v8; // rax\n  char *v9; // rsi\n  unsigned __int8 *v10; // rax\n  __int64 v11; // rdx\n  __int64 v12; // rcx\n  unsigned __int64 v13; // r14\n  unsigned __int64 v14; // rax\n  __int64 v15; // r9\n  _BYTE *v16; // rax\n  __int64 v17; // r9\n  __int64 v18; // rax\n  __int64 v19; // rdx\n  __int64 v20; // rax\n  __int64 v22; // r10\n  unsigned __int64 v23; // r11\n  __int64 v24; // r14\n  unsigned __int64 v25; // rax\n  unsigned __int64 v26; // rax\n  unsigned __int64 v27; // rax\n  unsigned __int64 v28; // [rsp+8h] [rbp-880h]\n  unsigned __int64 v29; // [rsp+8h] [rbp-880h]\n  __int64 v30; // [rsp+10h] [rbp-878h]\n  unsigned __int64 v31; // [rsp+10h] [rbp-878h]\n  unsigned __int64 v32; // [rsp+18h] [rbp-870h]\n  unsigned __int64 v33; // [rsp+20h] [rbp-868h]\n  __int64 v34; // [rsp+20h] [rbp-868h]\n  unsigned __int64 v35; // [rsp+48h] [rbp-840h]\n  __int64 v36[256]; // [rsp+50h] [rbp-838h]\n  char v37; // [rsp+850h] [rbp-38h]\n\n  v4 = (unsigned __int8 *)a3;\n  v5 = a2;\n  v6 = a4;\n  if ( a4 <= 2 )\n  {\n    v35 = 1LL;\n    v7 = a4 - 1;\n    v33 = 1LL;\n  }\n  else\n  {\n    v7 = sub_40B880(a3, a4, (__int64 *)&v35);\n    v33 = v35;\n  }\n  v8 = (char *)v36;\n  do\n  {\n    *(_QWORD *)v8 = v6;\n    v8 += 8;\n  }\n  while ( &v37 != v8 );\n  v9 = (char *)&v4[v33];\n  if ( v6 )\n  {\n    v10 = v4;\n    do\n    {\n      v11 = *v10;\n      v12 = &v4[v6 - 1] - v10++;\n      v36[v11] = v12;\n    }\n    while ( &v4[v6] != v10 );\n    if ( memcmp(v4, v9, v7) )\n      goto LABEL_9;\n    v22 = v6 - 1;\n    v23 = 0LL;\n    v24 = 0LL;\n    while ( 1 )\n    {\n      v32 = v22;\n      v31 = v23;\n      v29 = v24 + v6;\n      if ( sub_40AED0((_BYTE *)(a1 + v5), 0, v24 + v6 - v5) )\n        break;\n      v22 = v32;\n      if ( !v29 )\n        break;\n      v25 = v36[*(unsigned __int8 *)(a1 + v29 - 1)];\n      if ( v25 )\n      {\n        if ( v25 < v33 && v31 )\n          v25 = v6 - v33;\n        v24 += v25;\n        v23 = 0LL;\n      }\n      else\n      {\n        v26 = v7;\n        if ( v31 >= v7 )\n          v26 = v31;\n        if ( v26 >= v32 )\n        {\nLABEL_49:\n          v27 = v7 - 1;\n          if ( v31 < v7 && *(_BYTE *)(a1 + v24 + v7 - 1) == v4[v7 - 1] )\n          {\n            while ( v31 != v27 && v4[v27 - 1] == *(_BYTE *)(v27 + a1 + v24 - 1) )\n              --v27;\n          }\n          else\n          {\n            v27 = v7;\n          }\n          if ( v31 + 1 > v27 )\n            return a1 + v24;\n          v24 += v33;\n          v23 = v6 - v33;\n        }\n        else\n        {\n          while ( v4[v26] == *(_BYTE *)(a1 + v24 + v26) )\n          {\n            if ( ++v26 == v32 )\n              goto LABEL_49;\n          }\n          v23 = 0LL;\n          v24 += v26 + 1 - v7;\n        }\n      }\n      v5 = v29;\n    }\n  }\n  else if ( memcmp(v4, v9, v7) )\n  {\nLABEL_9:\n    v13 = v6 - 1;\n    v14 = v6 - v7;\n    if ( v6 - v7 < v7 )\n      v14 = v7;\n    v15 = 0LL;\n    v34 = v14 + 1;\n    v35 = v14 + 1;\n    while ( 1 )\n    {\n      v30 = v15;\n      v28 = v15 + v6;\n      v16 = sub_40AED0((_BYTE *)(a1 + v5), 0, v15 + v6 - v5);\n      if ( !v28 )\n        return 0LL;\n      v17 = v30;\n      if ( v16 )\n        return 0LL;\n      v18 = v36[*(unsigned __int8 *)(a1 + v28 - 1)];\n      if ( v18 )\n        goto LABEL_12;\n      v19 = a1 + v30;\n      if ( v7 < v13 )\n      {\n        v18 = v7;\n        if ( *(_BYTE *)(v19 + v7) != v4[v7] )\n        {\nLABEL_28:\n          v17 = 1 - v7 + v30;\nLABEL_12:\n          v15 = v18 + v17;\n          goto LABEL_13;\n        }\n        while ( ++v18 < v13 )\n        {\n          if ( v4[v18] != *(_BYTE *)(v19 + v18) )\n            goto LABEL_28;\n        }\n      }\n      v20 = v7 - 1;\n      if ( !v7 )\n        return a1 + v30;\n      if ( *(_BYTE *)(v19 + v20) == v4[v7 - 1] )\n      {\n        while ( --v20 != -1 )\n        {\n          if ( v4[v20] != *(_BYTE *)(v19 + v20) )\n            goto LABEL_32;\n        }\n        return a1 + v30;\n      }\nLABEL_32:\n      v15 = v34 + v30;\nLABEL_13:\n      v5 = v28;\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b9b0L", 
            "funcEndAddr": "0x40bcf9L", 
            "funcName": "sub_40B9B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BD00(__int64 a1, char *a2)\n{\n  char v2; // al\n  char v3; // r9\n  char *v4; // rbx\n  char *v5; // rdx\n  char v6; // cl\n  char v7; // r8\n  bool v8; // al\n  char *v9; // r12\n  unsigned __int64 v10; // rbp\n  char *v11; // rax\n  unsigned __int64 v12; // r8\n  unsigned __int64 v14; // rax\n  size_t v15; // r15\n  int v16; // eax\n  unsigned __int64 v17; // r8\n  size_t v18; // r13\n  __int64 v19; // r14\n  _BYTE *v20; // rax\n  unsigned __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  size_t v23; // rax\n  __int64 v24; // r14\n  unsigned __int64 v25; // r13\n  _BYTE *v26; // rax\n  char *v27; // rdx\n  size_t v28; // rax\n  __int64 v29; // rax\n  unsigned __int64 v30; // [rsp+8h] [rbp-70h]\n  unsigned __int64 v31; // [rsp+8h] [rbp-70h]\n  unsigned __int64 v32; // [rsp+8h] [rbp-70h]\n  __int64 v33; // [rsp+18h] [rbp-60h]\n  __int64 v34; // [rsp+18h] [rbp-60h]\n  __int64 v35; // [rsp+38h] [rbp-40h]\n\n  v2 = *(_BYTE *)a1;\n  v3 = *a2;\n  if ( !*(_BYTE *)a1 )\n  {\n    v9 = 0LL;\n    if ( !v3 )\n      v9 = (char *)a1;\n    return (__int64)v9;\n  }\n  if ( !v3 )\n    return a1;\n  v4 = a2;\n  v5 = (char *)a1;\n  v6 = *a2;\n  v7 = 1;\n  while ( 1 )\n  {\n    ++v5;\n    ++v4;\n    v8 = v6 == v2;\n    v6 = *v4;\n    v7 &= v8;\n    v2 = *v5;\n    if ( !*v5 )\n      break;\n    if ( !v6 )\n      goto LABEL_7;\n  }\n  v9 = 0LL;\n  if ( v6 )\n    return (__int64)v9;\nLABEL_7:\n  v9 = (char *)a1;\n  if ( v7 )\n    return (__int64)v9;\n  v10 = v4 - a2;\n  v11 = strchr((const char *)(a1 + 1), v3);\n  v9 = v11;\n  if ( !v11 || v10 == 1 )\n    return (__int64)v9;\n  v12 = a1 + v10 - (_QWORD)v11;\n  if ( a1 + v10 < (unsigned __int64)v11 )\n    v12 = 1LL;\n  if ( v10 > 0x1F )\n    return sub_40B9B0((__int64)v11, v12, (__int64)a2, v10);\n  if ( v10 <= 2 )\n  {\n    v35 = 1LL;\n    v15 = v10 - 1;\n    v33 = 1LL;\n  }\n  else\n  {\n    v30 = v12;\n    v14 = sub_40B880((__int64)a2, v10, &v35);\n    v12 = v30;\n    v15 = v14;\n    v33 = v35;\n  }\n  v31 = v12;\n  v16 = memcmp(a2, &a2[v33], v15);\n  v17 = v31;\n  if ( !v16 )\n  {\n    v18 = 0LL;\n    v19 = 0LL;\n    while ( 1 )\n    {\n      v32 = v10 + v19;\n      v20 = sub_40AED0(&v9[v17], 0, v10 + v19 - v17);\n      if ( !(v10 + v19) || v20 )\n        return 0LL;\n      v21 = v18;\n      if ( v15 >= v18 )\n        v21 = v15;\n      if ( v10 > v21 )\n      {\n        if ( v9[v21 + v19] != a2[v21] )\n        {\nLABEL_37:\n          v18 = 0LL;\n          v19 += v21 + 1 - v15;\n          goto LABEL_36;\n        }\n        while ( v10 != ++v21 )\n        {\n          if ( a2[v21] != v9[v19 + v21] )\n            goto LABEL_37;\n        }\n      }\n      v22 = v15 - 1;\n      if ( v15 > v18 && a2[v15 - 1] == v9[v19 - 1 + v15] )\n      {\n        while ( v18 != v22 && a2[v22 - 1] == v9[v19 - 1 + v22] )\n          --v22;\n      }\n      else\n      {\n        v22 = v15;\n      }\n      if ( v18 + 1 > v22 )\n      {\n        v9 += v19;\n        return (__int64)v9;\n      }\n      v18 = v10 - v33;\n      v19 += v33;\nLABEL_36:\n      v17 = v32;\n    }\n  }\n  v23 = v10 - v15;\n  if ( v10 - v15 < v15 )\n    v23 = v15;\n  v24 = 0LL;\n  v34 = v23 + 1;\n  v35 = v23 + 1;\n  while ( 1 )\n  {\n    v25 = v10 + v24;\n    v26 = sub_40AED0(&v9[v17], 0, v10 + v24 - v17);\n    if ( !(v10 + v24) || v26 )\n      return 0LL;\n    v27 = &v9[v24];\n    if ( v10 > v15 )\n    {\n      v28 = v15;\n      v27 = &v9[v24];\n      if ( v9[v15 + v24] != a2[v15] )\n      {\nLABEL_55:\n        v24 += v28 + 1 - v15;\n        goto LABEL_56;\n      }\n      while ( v10 > ++v28 )\n      {\n        if ( a2[v28] != v27[v28] )\n          goto LABEL_55;\n      }\n    }\n    v29 = v15 - 1;\n    if ( !v15 )\n      return (__int64)v27;\n    if ( v27[v29] == a2[v15 - 1] )\n      break;\nLABEL_57:\n    v24 += v34;\nLABEL_56:\n    v17 = v25;\n  }\n  while ( --v29 != -1 )\n  {\n    if ( a2[v29] != v27[v29] )\n      goto LABEL_57;\n  }\n  return (__int64)v27;\n}\n", 
            "funcStartAddr": "0x40bd00L", 
            "funcEndAddr": "0x40c094L", 
            "funcName": "sub_40BD00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C0A0(__int64 a1)\n{\n  int v1; // eax\n  unsigned int v2; // edx\n\n  if ( *(_BYTE *)(a1 + 8) )\n    v1 = setenv(\"TZ\", (const char *)(a1 + 9), 1);\n  else\n    v1 = unsetenv(\"TZ\");\n  v2 = 0;\n  if ( !v1 )\n  {\n    tzset();\n    v2 = 1;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40c0a0L", 
            "funcEndAddr": "0x40c0e5L", 
            "funcName": "sub_40C0A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C0F0(_QWORD *a1)\n{\n  _QWORD *v1; // rbx\n\n  if ( a1 )\n  {\n    do\n    {\n      v1 = (_QWORD *)*a1;\n      free(a1);\n      a1 = v1;\n    }\n    while ( v1 );\n  }\n}\n", 
            "funcStartAddr": "0x40c0f0L", 
            "funcEndAddr": "0x40c119L", 
            "funcName": "sub_40C0F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C120(_QWORD *a1)\n{\n  int *v1; // rbx\n  int v2; // er13\n  unsigned int v3; // ebp\n\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = sub_40C0A0((__int64)a1);\n  if ( !(_BYTE)v3 )\n    v2 = *v1;\n  sub_40C0F0(a1);\n  *v1 = v2;\n  return v3;\n}\n", 
            "funcStartAddr": "0x40c120L", 
            "funcEndAddr": "0x40c161L", 
            "funcName": "sub_40C120"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_40C170(void *src)\n{\n  void *v1; // r12\n  size_t v2; // rax\n  __int64 v3; // rdi\n  size_t v4; // rbp\n  char *v5; // rax\n  _BYTE *v6; // rbx\n  _QWORD *result; // rax\n\n  if ( src )\n  {\n    v1 = src;\n    v2 = strlen((const char *)src);\n    v3 = 118LL;\n    v4 = v2 + 1;\n    if ( v2 + 1 >= 0x76 )\n      v3 = v2 + 1;\n    v5 = (char *)malloc((v3 + 17) & 0xFFFFFFFFFFFFFFF8LL);\n    v6 = v5;\n    if ( v5 )\n    {\n      *(_QWORD *)v5 = 0LL;\n      *((_WORD *)v5 + 4) = 1;\n      memcpy(v5 + 9, v1, v4);\n      v6[v4 + 9] = 0;\n    }\n    return v6;\n  }\n  result = malloc(0x80uLL);\n  v6 = result;\n  if ( !result )\n    return v6;\n  *result = 0LL;\n  *((_WORD *)result + 4) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x40c170L", 
            "funcEndAddr": "0x40c1ffL", 
            "funcName": "sub_40C170"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C200(__int64 *a1, unsigned __int64 a2)\n{\n  char *v2; // r12\n  __int64 *v3; // rbp\n  __int64 result; // rax\n  char *v5; // rbx\n  __int64 v6; // r14\n  __int64 *v7; // rax\n  size_t v8; // r15\n  char *v9; // rax\n  _QWORD *v10; // rax\n\n  v2 = *(char **)(a2 + 48);\n  if ( !v2 )\n    return 1LL;\n  v3 = a1;\n  if ( a2 > (unsigned __int64)v2 || (result = 1LL, (unsigned __int64)v2 >= a2 + 56) )\n  {\n    v5 = (char *)a1 + 9;\n    if ( !*v2 )\n    {\n      v5 = \"%s: invalid option -- '%c'\\n\" + 27;\n      goto LABEL_12;\n    }\nLABEL_5:\n    if ( !strcmp(v5, v2) )\n      goto LABEL_12;\n    while ( 1 )\n    {\n      if ( !*v5 )\n      {\n        v6 = (__int64)v3 + 9;\n        if ( (char *)v3 + 9 != v5 )\n        {\n          v8 = strlen(v2) + 1;\n          v9 = &v5[-v6];\n          if ( ~(unsigned __int64)&v5[-v6] < v8 )\n          {\n            *__errno_location() = 12;\n            return 0LL;\n          }\nLABEL_19:\n          if ( (unsigned __int64)&v9[v8] <= 0x76 )\n          {\n            memcpy(v5, v2, v8);\n            v5[v8] = 0;\n            goto LABEL_12;\n          }\n          v10 = sub_40C170(v2);\n          *v3 = (__int64)v10;\n          if ( !v10 )\n            return 0LL;\n          *((_BYTE *)v10 + 8) = 0;\n          v5 = (char *)v10 + 9;\nLABEL_12:\n          *(_QWORD *)(a2 + 48) = v5;\n          return 1LL;\n        }\n        if ( !*((_BYTE *)v3 + 8) )\n        {\n          v8 = strlen(v2) + 1;\n          v9 = 0LL;\n          goto LABEL_19;\n        }\n      }\n      v5 += strlen(v5) + 1;\n      if ( *v5 )\n        goto LABEL_5;\n      v7 = (__int64 *)*v3;\n      if ( !*v3 )\n        goto LABEL_5;\n      v5 = (char *)v7 + 9;\n      v3 = (__int64 *)*v3;\n      if ( !strcmp((const char *)v7 + 9, v2) )\n        goto LABEL_12;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c200L", 
            "funcEndAddr": "0x40c375L", 
            "funcName": "sub_40C200"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C380(__int64 a1)\n{\n  char *v1; // rax\n  char *v2; // rbp\n  _QWORD *v3; // rbx\n  int *v5; // rbp\n  int v6; // er12\n\n  v1 = getenv(\"TZ\");\n  v2 = v1;\n  if ( v1 )\n  {\n    if ( *(_BYTE *)(a1 + 8) && !strcmp((const char *)(a1 + 9), v1) )\n      return 1LL;\n  }\n  else if ( !*(_BYTE *)(a1 + 8) )\n  {\n    return 1LL;\n  }\n  v3 = sub_40C170(v2);\n  if ( !v3 || (unsigned __int8)sub_40C0A0(a1) )\n    return (__int64)v3;\n  v5 = __errno_location();\n  v6 = *v5;\n  if ( v3 != (_QWORD *)1 )\n    sub_40C0F0(v3);\n  *v5 = v6;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40c380L", 
            "funcEndAddr": "0x40c42fL", 
            "funcName": "sub_40C380"
        }, 
        {
            "decompiledFuncCode": "struct tm *__fastcall sub_40C450(__int64 *a1, const time_t *a2, struct tm *a3)\n{\n  struct tm *v3; // rbx\n  _QWORD *v4; // r13\n\n  if ( !a1 )\n    return gmtime_r(a2, a3);\n  v3 = a3;\n  v4 = (_QWORD *)sub_40C380((__int64)a1);\n  if ( v4 )\n  {\n    if ( localtime_r(a2, v3) && (unsigned __int8)sub_40C200(a1, (unsigned __int64)v3) )\n    {\n      if ( v4 == (_QWORD *)1 || (unsigned __int8)sub_40C120(v4) )\n        return v3;\n    }\n    else if ( v4 != (_QWORD *)1 )\n    {\n      sub_40C120(v4);\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40c450L", 
            "funcEndAddr": "0x40c4f5L", 
            "funcName": "sub_40C450"
        }, 
        {
            "decompiledFuncCode": "time_t __fastcall sub_40C500(__int64 *a1, _DWORD *a2)\n{\n  _QWORD *v2; // r12\n  time_t result; // rax\n  int v4; // eax\n  time_t timer; // [rsp+8h] [rbp-60h]\n  struct tm tp; // [rsp+10h] [rbp-58h]\n\n  if ( !a1 )\n    return sub_40C620(a2);\n  v2 = (_QWORD *)sub_40C380((__int64)a1);\n  if ( !v2 )\n    goto LABEL_20;\n  timer = sub_40D6B0(a2);\n  if ( timer != -1\n    || localtime_r(&timer, &tp)\n    && ((v4 = a2[8], (v4 == 0) == (tp.tm_isdst == 0)) || v4 < 0 || tp.tm_isdst < 0)\n    && !(tp.tm_sec ^ *a2 | tp.tm_min ^ a2[1] | tp.tm_hour ^ a2[2] | tp.tm_mday ^ a2[3] | tp.tm_year ^ a2[5] | tp.tm_mon ^ a2[4]) )\n  {\n    if ( !(unsigned __int8)sub_40C200(a1, (unsigned __int64)a2) )\n      timer = -1LL;\n  }\n  if ( v2 == (_QWORD *)1 || (unsigned __int8)sub_40C120(v2) )\n    result = timer;\n  else\nLABEL_20:\n    result = -1LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x40c500L", 
            "funcEndAddr": "0x40c61cL", 
            "funcName": "sub_40C500"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C620(__int64 a1)\n{\n  *(_DWORD *)(a1 + 32) = 0;\n  return sub_40D270(a1, gmtime_r, &unk_617618);\n}\n", 
            "funcStartAddr": "0x40c620L", 
            "funcEndAddr": "0x40c636L", 
            "funcName": "sub_40C620"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C640(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_40CED0(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  else\n  {\n    if ( !(_DWORD)result )\n      return result;\n    if ( !v1 )\n      return (unsigned int)-(*__errno_location() != 9);\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x40c640L", 
            "funcEndAddr": "0x40c69dL", 
            "funcName": "sub_40C640"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C6A0(const char *a1, char a2, unsigned int a3)\n{\n  __int64 v3; // rdx\n  int v4; // eax\n  unsigned int v6; // [rsp+30h] [rbp-28h]\n\n  v6 = a3;\n  v3 = 0LL;\n  if ( a2 & 0x40 )\n    v3 = v6;\n  v4 = open(a1, a2, v3);\n  return sub_40CCC0(v4);\n}\n", 
            "funcStartAddr": "0x40c6a0L", 
            "funcEndAddr": "0x40c6eaL", 
            "funcName": "sub_40C6A0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40C6F0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c6f0L", 
            "funcEndAddr": "0x40c74eL", 
            "funcName": "sub_40C6F0"
        }, 
        {
            "decompiledFuncCode": "const char *sub_40C750()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_40CED0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_40CED0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x40c750L", 
            "funcEndAddr": "0x40ccb2L", 
            "funcName": "sub_40C750"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CCC0(int fd)\n{\n  __int64 result; // rax\n  unsigned int v2; // er12\n  int *v3; // rax\n  int v4; // er13\n  int *v5; // rbp\n\n  if ( (unsigned int)fd > 2 )\n    return (unsigned int)fd;\n  v2 = sub_40D730();\n  v3 = __errno_location();\n  v4 = *v3;\n  v5 = v3;\n  close(fd);\n  result = v2;\n  *v5 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x40ccc0L", 
            "funcEndAddr": "0x40cd0eL", 
            "funcName": "sub_40CCC0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40CD10(__int64 a1, __m128i *a2)\n{\n  __int64 v2; // r15\n  __int64 v3; // r13\n  __int64 v4; // rbp\n  unsigned __int64 v5; // rbx\n  const char **v6; // rdx\n  size_t v7; // rax\n  bool v8; // cf\n  unsigned __int32 v9; // eax\n  _BYTE *v10; // rbp\n  _BYTE *v11; // rbx\n  const char **v12; // rdx\n  const char *v13; // r15\n  size_t v14; // r14\n  unsigned int v15; // eax\n  __m128i v17; // [rsp+8h] [rbp-50h]\n\n  v17 = _mm_loadu_si128(a2);\n  v2 = a2[1].m128i_i64[0];\n  if ( a1 )\n  {\n    v3 = a1;\n    v4 = a1;\n    v5 = 0LL;\n    do\n    {\n      v9 = v17.m128i_i32[0];\n      if ( v17.m128i_i32[0] <= 0x2Fu )\n      {\n        v17.m128i_i32[0] += 8;\n        v6 = (const char **)(v2 + v9);\n      }\n      else\n      {\n        v6 = (const char **)v17.m128i_i64[1];\n        v17.m128i_i64[1] += 8LL;\n      }\n      v7 = strlen(*v6);\n      v8 = __CFADD__(v7, v5);\n      v5 += v7;\n      if ( v8 )\n        v5 = -1LL;\n      --v4;\n    }\n    while ( v4 );\n    if ( v5 > 0x7FFFFFFF )\n    {\n      v10 = 0LL;\n      *__errno_location() = 75;\n      return v10;\n    }\n    v10 = sub_409560(v5 + 1);\n    v11 = v10;\n    do\n    {\n      v15 = a2->m128i_i64[0];\n      if ( LODWORD(a2->m128i_i64[0]) <= 0x2F )\n      {\n        v12 = (const char **)(a2[1].m128i_i64[0] + v15);\n        LODWORD(a2->m128i_i64[0]) = v15 + 8;\n      }\n      else\n      {\n        v12 = (const char **)a2->m128i_i64[1];\n        a2->m128i_i64[1] = (__int64)(v12 + 1);\n      }\n      v13 = *v12;\n      v14 = strlen(*v12);\n      memcpy(v11, v13, v14);\n      v11 += v14;\n      --v3;\n    }\n    while ( v3 );\n  }\n  else\n  {\n    v11 = sub_409560(1uLL);\n    v10 = v11;\n  }\n  *v11 = 0;\n  return v10;\n}\n", 
            "funcStartAddr": "0x40cd10L", 
            "funcEndAddr": "0x40ce37L", 
            "funcName": "sub_40CD10"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40CE40(_BYTE *a1, __m128i *a2)\n{\n  __int64 v2; // rax\n  char v3; // cl\n  __int64 v5; // [rsp+8h] [rbp-10h]\n\n  if ( !*a1 )\n  {\n    v2 = 0LL;\n    return sub_40CD10(v2, a2);\n  }\n  if ( *a1 == 37 && a1[1] == 115 )\n  {\n    v2 = 0LL;\n    do\n    {\n      v3 = a1[2 * ++v2];\n      if ( !v3 )\n        return sub_40CD10(v2, a2);\n    }\n    while ( v3 == 37 && a1[2 * v2 + 1] == 115 );\n  }\n  if ( (int)sub_40D6D0(&v5, a1, a2) >= 0 )\n    return (_BYTE *)v5;\n  if ( *__errno_location() == 12 )\n    sub_4097B0();\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40ce40L", 
            "funcEndAddr": "0x40cecaL", 
            "funcName": "sub_40CE40"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40CED0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_40CF50(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ced0L", 
            "funcEndAddr": "0x40cf4bL", 
            "funcName": "sub_40CED0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40CF50(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_40CF90(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x40cf50L", 
            "funcEndAddr": "0x40cf90L", 
            "funcName": "sub_40CF50"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40CF90(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x40cf90L", 
            "funcEndAddr": "0x40cfe7L", 
            "funcName": "sub_40CF90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CFF0(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)\n{\n  int v10; // er10\n  int v11; // er12\n\n  v10 = (unsigned __int64)(a1 >> 2) + 475 - ((a1 & 3) == 0);\n  v11 = (a6 >> 2) + 475 - ((a6 & 3) == 0);\n  return a5\n       + 60\n       * (a4\n        + 60\n        * (a3\n         + 24\n         * ((int)(v10\n                - v11\n                - (v10 / 25\n                 - ((unsigned int)(v10 % 25) >> 31)\n                 - (v11 / 25\n                  - ((unsigned int)(v11 % 25) >> 31)))\n                + ((int)(v10 / 25 - ((unsigned int)(v10 % 25) >> 31)) >> 2)\n                - ((int)(v11 / 25 - ((unsigned int)(v11 % 25) >> 31)) >> 2))\n          + 365 * (a1 - a6)\n          + a2\n          - a7)\n         - a8)\n        - a9)\n       - a10;\n}\n", 
            "funcStartAddr": "0x40cff0L", 
            "funcEndAddr": "0x40d107L", 
            "funcName": "sub_40CFF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D110(__int64 a1, __int64 a2, int a3, int a4, int a5, __int64 a6, int *a7)\n{\n  __int64 v7; // rbx\n  __int64 v8; // rax\n  bool v9; // of\n  __int64 result; // rax\n\n  v7 = a6;\n  if ( !a7\n    || (v8 = sub_40CFF0(a1, a2, a3, a4, a5, a7[5], a7[7], a7[2], a7[1], *a7),\n        v9 = __OFADD__(v7, v8),\n        result = v7 + v8,\n        v9) )\n  {\n    if ( v7 < 0 )\n    {\n      if ( v7 >= -9223372036854775806LL )\n        result = 0x8000000000000000LL;\n      else\n        result = v7 + 1;\n    }\n    else\n    {\n      result = 0x7FFFFFFFFFFFFFFFLL;\n      if ( v7 > 9223372036854775805LL )\n        result = v7 - 1;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40d110L", 
            "funcEndAddr": "0x40d1a1L", 
            "funcName": "sub_40D110"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D1B0(__int64 (__fastcall *a1)(__int64 *, __int64), __int64 *a2, __int64 a3)\n{\n  __int64 v3; // r13\n  __int64 result; // rax\n  __int64 v5; // r14\n  __int64 v6; // rbp\n  __int64 v7; // rdx\n  __int64 v8; // rbx\n  __int64 v9; // [rsp+8h] [rbp-30h]\n\n  v3 = a3;\n  v9 = *a2;\n  result = a1(&v9, a3);\n  if ( !result )\n  {\n    v5 = *a2;\n    v6 = 0LL;\n    if ( *a2 )\n    {\n      while ( 1 )\n      {\n        v7 = (v6 >> 1) + (v5 >> 1);\n        v8 = v7 + (((unsigned __int8)v5 | (unsigned __int8)v6) & 1);\n        if ( v6 != v8 && v5 != v8 )\n          break;\n        v9 = v7 + (((unsigned __int8)v5 | (unsigned __int8)v6) & 1);\n        result = a1(&v9, v3);\n        if ( !result )\n        {\n          v5 = v8;\n          v8 = v6;\n        }\n        v6 = v8;\n      }\n      if ( !result && v6 )\n      {\n        v9 = v6;\n        result = a1(&v9, v3);\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40d1b0L", 
            "funcEndAddr": "0x40d26fL", 
            "funcName": "sub_40D1B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D270(int *a1, __int64 (__fastcall *a2)(__int64 *, __int64), _QWORD *a3)\n{\n  int *v3; // r14\n  __int64 v4; // rsi\n  int v5; // eax\n  int v6; // edi\n  _BOOL4 v7; // edx\n  __int64 v8; // rbx\n  int v9; // er12\n  int v10; // ebp\n  __int64 v11; // rsi\n  int v12; // eax\n  __int64 v13; // r13\n  int v14; // er12\n  __int64 v15; // r14\n  int *v16; // rax\n  __int64 v17; // r15\n  __int64 result; // rax\n  bool v19; // dl\n  __m128i *v20; // r14\n  int v21; // esi\n  __int64 v22; // rdx\n  bool v23; // of\n  __int64 v24; // rax\n  __m128i v25; // xmm1\n  __m128i v26; // xmm2\n  __int64 v27; // rdx\n  int i; // er13\n  int v29; // er12\n  int v30; // er15\n  int v31; // [rsp+Ch] [rbp-10Ch]\n  __int64 (__fastcall *v32)(__int64 *, __int64); // [rsp+10h] [rbp-108h]\n  int v33; // [rsp+18h] [rbp-100h]\n  int v34; // [rsp+1Ch] [rbp-FCh]\n  int v35; // [rsp+28h] [rbp-F0h]\n  _QWORD *v36; // [rsp+30h] [rbp-E8h]\n  __int64 v37; // [rsp+38h] [rbp-E0h]\n  int v38; // [rsp+40h] [rbp-D8h]\n  int v39; // [rsp+44h] [rbp-D4h]\n  __m128i *v40; // [rsp+48h] [rbp-D0h]\n  __int64 v41; // [rsp+50h] [rbp-C8h]\n  __int64 v42; // [rsp+58h] [rbp-C0h]\n  __int128 v43; // [rsp+60h] [rbp-B8h]\n  __int128 v44; // [rsp+70h] [rbp-A8h]\n  __int128 v45; // [rsp+80h] [rbp-98h]\n  __int64 v46; // [rsp+90h] [rbp-88h]\n  __int64 v47; // [rsp+A0h] [rbp-78h]\n  int v48; // [rsp+C0h] [rbp-58h]\n\n  v3 = a1;\n  v32 = a2;\n  v4 = a1[3];\n  v38 = *a1;\n  v36 = a3;\n  v31 = a1[1];\n  v5 = a1[2];\n  v6 = a1[4];\n  v33 = v5;\n  v35 = v3[8];\n  v7 = 0;\n  v8 = v3[5] + (__int64)(int)(v6 / 12 - ((unsigned int)(v6 % 12) >> 31));\n  if ( !(v8 & 3) )\n  {\n    v7 = 1;\n    if ( v8 == 100 * (v8 / 100) )\n      v7 = ((v8 / 100) & 3) == 1;\n  }\n  v9 = 59;\n  v10 = 6;\n  v11 = (unsigned __int16)word_413900[13LL * v7 + (((v6 % 12) >> 31) & 0xC) + v6 % 12] - 1 + v4;\n  if ( v38 <= 59 )\n    v9 = v38;\n  v12 = 0;\n  if ( v9 >= 0 )\n    v12 = v9;\n  v34 = v12;\n  v39 = -(int)*v36;\n  v13 = sub_40CFF0(v8, v11, v33, v31, v12, 70, 0, 0, 0, v39);\n  v37 = v13;\n  v41 = v13;\n  v40 = (__m128i *)v3;\n  v14 = 0;\n  v15 = v13;\n  while ( 1 )\n  {\n    v16 = (int *)sub_40D1B0(v32, &v41, (__int64)&v43);\n    v17 = v41;\n    result = sub_40D110(v8, v11, v33, v31, v34, v41, v16);\n    if ( v17 == result )\n      break;\n    if ( v17 == v13 && v17 != v15 )\n    {\n      if ( (int)v45 < 0 )\n        goto LABEL_17;\n      v19 = (_DWORD)v45 != 0;\n      if ( v35 < 0 )\n      {\n        if ( v19 >= v14 )\n        {\nLABEL_17:\n          v20 = v40;\n          result = v17;\n          goto LABEL_18;\n        }\n      }\n      else if ( (v35 != 0) != v19 )\n      {\n        goto LABEL_17;\n      }\n    }\n    if ( !--v10 )\n      return -1LL;\n    v41 = result;\n    v13 = v15;\n    v15 = v17;\n    v14 = v45 != 0;\n  }\n  v20 = v40;\n  if ( (v35 == 0) != ((_DWORD)v45 == 0) && v35 >= 0 && (int)v45 >= 0 )\n  {\n    for ( i = 601200; i != 269337600; i += 601200 )\n    {\n      v29 = 2;\n      v30 = -i;\n      v42 = result + -i;\n      if ( !__OFADD__(result, -i) )\n      {\nLABEL_35:\n        sub_40D1B0(v32, &v42, (__int64)&v47);\n        if ( (v35 == 0) == (v48 == 0) || v48 < 0 )\n        {\n          v41 = sub_40D110(v8, v11, v33, v31, v34, v42, (int *)&v47);\n          sub_40D1B0(v32, &v41, (__int64)&v43);\n          result = v41;\n          break;\n        }\n        result = v41;\n      }\n      while ( 1 )\n      {\n        v30 += 2 * i;\n        if ( v29 == 1 )\n          break;\n        v29 = 1;\n        v42 = result + v30;\n        if ( !__OFADD__(result, v30) )\n          goto LABEL_35;\n      }\n    }\n  }\nLABEL_18:\n  v21 = v43;\n  *v36 = result - (v37 + v39);\n  if ( v21 == v38 )\n    goto LABEL_22;\n  v22 = ((v38 <= 0) & (unsigned __int8)(v21 == 60)) - (__int64)v34 + v38;\n  v23 = __OFADD__(v22, result);\n  v24 = v22 + result;\n  v41 = v24;\n  if ( !v23 )\n  {\n    v47 = v24;\n    if ( v32(&v47, (__int64)&v43) )\n    {\n      result = v41;\nLABEL_22:\n      v25 = _mm_load_si128((const __m128i *)&v44);\n      v26 = _mm_load_si128((const __m128i *)&v45);\n      v27 = v46;\n      *v20 = _mm_load_si128((const __m128i *)&v43);\n      v20[1] = v25;\n      v20[2] = v26;\n      v20[3].m128i_i64[0] = v27;\n      return result;\n    }\n  }\n  return -1LL;\n}\n", 
            "funcStartAddr": "0x40d270L", 
            "funcEndAddr": "0x40d6aaL", 
            "funcName": "sub_40D270"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D6B0(int *a1)\n{\n  tzset();\n  return sub_40D270(a1, (__int64 (__fastcall *)(__int64 *, __int64))localtime_r, &unk_617628);\n}\n", 
            "funcStartAddr": "0x40d6b0L", 
            "funcEndAddr": "0x40d6ccL", 
            "funcName": "sub_40D6B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D6D0(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  void *v3; // rax\n  unsigned int v4; // edx\n  __int64 result; // rax\n  unsigned __int64 v6; // [rsp+8h] [rbp-10h]\n\n  v3 = (void *)sub_40D880(0LL, &v6, a2, a3);\n  if ( !v3 )\n    return 0xFFFFFFFFLL;\n  v4 = v6;\n  if ( v6 > 0x7FFFFFFF )\n  {\n    free(v3);\n    *__errno_location() = 75;\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    *a1 = v3;\n    result = v4;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40d6d0L", 
            "funcEndAddr": "0x40d729L", 
            "funcName": "sub_40D6D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D730(char a1)\n{\n  return sub_40D740(a1);\n}\n", 
            "funcStartAddr": "0x40d730L", 
            "funcEndAddr": "0x40d73eL", 
            "funcName": "sub_40D730"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D740(char a1, int a2, __int64 a3)\n{\n  int v3; // ebx\n  int v5; // eax\n  int *v6; // rax\n  int v7; // edi\n  int v8; // er12\n  int *v9; // rbp\n\n  if ( a2 == 1030 )\n  {\n    if ( dword_617630 < 0 )\n    {\n      v3 = sub_40D740(a1);\n      if ( v3 >= 0 && dword_617630 == -1 )\n      {\nLABEL_8:\n        v5 = fcntl((unsigned __int8)v3, 1);\n        if ( v5 < 0 || fcntl((unsigned __int8)v3, 2, v5 | 1u) == -1 )\n        {\n          v6 = __errno_location();\n          v7 = v3;\n          v3 = -1;\n          v8 = *v6;\n          v9 = v6;\n          close(v7);\n          *v9 = v8;\n        }\n        return (unsigned int)v3;\n      }\n    }\n    else\n    {\n      v3 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v3 >= 0 || *__errno_location() != 22 )\n      {\n        dword_617630 = 1;\n      }\n      else\n      {\n        v3 = sub_40D740(a1);\n        if ( v3 >= 0 )\n        {\n          dword_617630 = -1;\n          goto LABEL_8;\n        }\n      }\n    }\n    return (unsigned int)v3;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n", 
            "funcStartAddr": "0x40d740L", 
            "funcEndAddr": "0x40d875L", 
            "funcName": "sub_40D740"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40D880(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_40F5C0(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_40F3A0(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_40D880(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_40F5C0(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_40F3A0(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n", 
            "funcStartAddr": "0x40237eL", 
            "funcEndAddr": "0x402383L", 
            "funcName": "sub_40D880"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40D880(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_40F5C0(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_40F3A0(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_40D880(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_40F5C0(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_40F3A0(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n", 
            "funcStartAddr": "0x40237eL", 
            "funcEndAddr": "0x402383L", 
            "funcName": "sub_40D880"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F3A0(int *a1, unsigned __int64 *a2)\n{\n  unsigned int *v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  unsigned int *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = (unsigned int *)a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( (unsigned __int64)*v2 )\n      {\n        case 1uLL:\n        case 2uLL:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *((_BYTE *)v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3uLL:\n        case 4uLL:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *((_WORD *)v2 + 8) = *v10;\n          goto LABEL_7;\n        case 5uLL:\n        case 6uLL:\n        case 0xDuLL:\n        case 0xEuLL:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (unsigned int *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (unsigned int *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          v2[4] = *v8;\n          goto LABEL_7;\n        case 7uLL:\n        case 8uLL:\n        case 9uLL:\n        case 0xAuLL:\n        case 0x11uLL:\n        case 0x12uLL:\n        case 0x13uLL:\n        case 0x14uLL:\n        case 0x15uLL:\n        case 0x16uLL:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *((_QWORD *)v2 + 2) = *v5;\n          goto LABEL_7;\n        case 0xBuLL:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *((_QWORD *)v2 + 2) = *v14;\n          goto LABEL_7;\n        case 0xCuLL:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *((long double *)v2 + 1) = *v15;\n          goto LABEL_7;\n        case 0xFuLL:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *((_QWORD *)v2 + 2) = v21;\n          goto LABEL_7;\n        case 0x10uLL:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_413AC0;\n          *((_QWORD *)v2 + 2) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 8;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40f3a0L", 
            "funcEndAddr": "0x40f5b9L", 
            "funcName": "sub_40F3A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F5C0(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 *v5; // r15\n  unsigned __int64 v6; // r9\n  unsigned __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  __int64 v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  void *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  void *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  __int64 v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  void *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  __int64 v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v94; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v95; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v96; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v97; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v5 = a3;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = (__int64)(a2 + 4);\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (__int64)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *(_DWORD *)(v12 + 16) = 0;\n  *(_QWORD *)(v12 + 24) = 0LL;\n  *(_QWORD *)(v12 + 32) = 0LL;\n  *(_QWORD *)(v12 + 40) = -1LL;\n  *(_QWORD *)(v12 + 48) = 0LL;\n  *(_QWORD *)(v12 + 56) = 0LL;\n  *(_QWORD *)(v12 + 64) = -1LL;\n  *(_QWORD *)(v12 + 80) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_17;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_17;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_131;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_131;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_17:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case 39:\n        *(_DWORD *)(v12 + 16) |= 1u;\n        goto LABEL_16;\n      case 45:\n        *(_DWORD *)(v12 + 16) |= 2u;\n        goto LABEL_16;\n      case 43:\n        *(_DWORD *)(v12 + 16) |= 4u;\n        goto LABEL_16;\n      case 32:\n        *(_DWORD *)(v12 + 16) |= 8u;\n        goto LABEL_16;\n      case 35:\n        *(_DWORD *)(v12 + 16) |= 0x10u;\n        goto LABEL_16;\n    }\n    if ( v13 != 48 )\n      break;\n    *(_DWORD *)(v12 + 16) |= 0x20u;\nLABEL_16:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *(_DWORD *)(v12 + 16) |= 0x40u;\n    goto LABEL_16;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *(_QWORD *)(v12 + 24) = v9;\n    *(_QWORD *)(v12 + 32) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_215;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 != 36 )\n    {\nLABEL_215:\n      v18 = *(_QWORD *)(v12 + 40);\n      if ( v18 == -1LL )\n      {\n        *(_QWORD *)(v12 + 40) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v18 = v81++;\n      }\n    }\n    else\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_131;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_131;\n      *(_QWORD *)(v12 + 40) = v18;\n      v14 = v47 + 2;\n    }\n    v19 = (_DWORD *)v5[1];\n    if ( v6 > v18 )\n    {\n      v20 = *v5;\nLABEL_43:\n      if ( v20 <= v18 )\n      {\n        do\n          v19[8 * ++v20 - 8] = 0;\n        while ( v20 <= v18 );\n        *v5 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_26;\n        }\n        goto LABEL_132;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_27;\nLABEL_48:\n      v22 = v9[1] == 42;\n      *(_QWORD *)(v12 + 48) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *(_QWORD *)(v12 + 56) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_27;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *(_QWORD *)(v12 + 56) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_216;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 != 36 )\n      {\nLABEL_216:\n        v26 = *(_QWORD *)(v12 + 64);\n        if ( v26 != -1LL )\n          goto LABEL_53;\n        *(_QWORD *)(v12 + 64) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_53;\n        }\n      }\n      else\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_131;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *(_QWORD *)(v12 + 64) = v26;\n          v24 = v72 + 2;\nLABEL_53:\n          v19 = (_DWORD *)v5[1];\n          if ( v6 > v26 )\n          {\n            v27 = *v5;\n            goto LABEL_55;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_163;\n              v27 = *v5;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)v5[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_161;\n              v27 = *v5;\n              if ( src != v40 )\n                goto LABEL_172;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *v5;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_172:\n            v5[1] = (unsigned __int64)v19;\nLABEL_55:\n            if ( v27 <= v26 )\n            {\n              do\n                v19[8 * ++v27 - 8] = 0;\n              while ( v27 <= v26 );\n              *v5 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_27;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_27;\n            }\n            goto LABEL_132;\n          }\nLABEL_160:\n          v40 = v19;\n          goto LABEL_161;\n        }\n      }\nLABEL_131:\n      v19 = (_DWORD *)v5[1];\nLABEL_132:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (void *)v4[1];\n      if ( (void *)v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_160;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_163;\n      v20 = *v5;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)v5[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_161;\n      v20 = *v5;\n      if ( src != v40 )\n        goto LABEL_94;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *v5;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_94:\n    v5[1] = (unsigned __int64)v19;\n    goto LABEL_43;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *(_QWORD *)(v12 + 24) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = (__int64)(i + 1);\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - (_QWORD)v9;\n      v9 = (char *)v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *(_QWORD *)(v12 + 32) = v9;\n    v13 = *v9;\n  }\nLABEL_26:\n  if ( v13 == 46 )\n    goto LABEL_48;\nLABEL_27:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_34;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_34;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_34:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case 37:\n      goto LABEL_71;\n    case 65:\n    case 69:\n    case 70:\n    case 71:\n    case 97:\n    case 101:\n    case 102:\n    case 103:\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_63;\n    case 67:\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_63;\n    case 83:\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_63;\n    case 88:\n    case 111:\n    case 117:\n    case 120:\n      v29 = 10;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 6 : 4;\n        }\n      }\n      goto LABEL_63;\n    case 99:\n      v29 = (v15 > 7) + 13;\n      goto LABEL_63;\n    case 100:\n    case 105:\n      v29 = 9;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 5 : 3;\n        }\n      }\n      goto LABEL_63;\n    case 110:\n      v29 = 22;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( !(v15 & 2) )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_63;\n    case 112:\n      v29 = 17;\n      goto LABEL_63;\n    case 115:\n      v29 = (v15 > 7) + 15;\nLABEL_63:\n      if ( v11 == -1LL )\n      {\n        *(_QWORD *)(v12 + 80) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v11 = v81++;\n      }\n      else\n      {\n        *(_QWORD *)(v12 + 80) = v11;\n      }\n      v19 = (_DWORD *)v5[1];\n      if ( v6 > v11 )\n        goto LABEL_66;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_160;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_163;\n        goto LABEL_159;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_211;\n      if ( src == (_DWORD *)v5[1] )\n      {\n        v19 = src;\nLABEL_159:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *v5);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      v5[1] = (unsigned __int64)v19;\nLABEL_66:\n      v30 = *v5;\n      if ( *v5 <= v11 )\n      {\n        do\n          v19[8 * ++v30 - 8] = 0;\n        while ( v30 <= v11 );\n        *v5 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_132;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_71:\n      *(_BYTE *)(v12 + 72) = v13;\n      v32 = *v4;\n      *(_QWORD *)(v12 + 8) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > v32 + 1 )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( (v7 & 0x8000000000000000LL) == 0LL )\n      {\n        v33 = 2 * v7;\n        if ( 2 * v7 <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (void *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( (void *)v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)v5[1];\n              if ( src != v40 )\n                goto LABEL_162;\n              goto LABEL_165;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_211;\n            v34 = (void *)v91[1];\n            v8 = *v91;\n            if ( (void *)v82 != v34 )\n              goto LABEL_78;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_78:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_211:\n      v40 = (_DWORD *)v5[1];\nLABEL_161:\n      if ( src != v40 )\n      {\nLABEL_162:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_163:\n      v58 = (void *)v4[1];\n      if ( (void *)v82 != v58 )\n        free(v58);\nLABEL_165:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_131;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40f5c0L", 
            "funcEndAddr": "0x4102c9L", 
            "funcName": "sub_40F5C0"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x4102d0L", 
            "funcEndAddr": "0x41032dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x410330L", 
            "funcEndAddr": "0x410331L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_410340(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_617308 )\n    v1 = (void *)unk_617308;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x410340L", 
            "funcEndAddr": "0x410358L", 
            "funcName": "sub_410340"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410358(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_616E30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x410358L", 
            "funcEndAddr": "0x410378L", 
            "funcName": "sub_410358"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_stat.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 133, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}