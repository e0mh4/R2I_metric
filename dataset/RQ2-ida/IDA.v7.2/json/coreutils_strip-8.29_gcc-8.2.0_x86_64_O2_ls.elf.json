{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  int v3; // ebp\n  char **v4; // rbx\n  char *v5; // rax\n  char *v6; // r12\n  int v7; // eax\n  char *v8; // rax\n  char *v9; // r12\n  char *v10; // rax\n  char *v11; // r12\n  char v12; // r15\n  char v13; // r14\n  const char *v14; // r12\n  int v15; // eax\n  int v16; // er13\n  bool v17; // al\n  __int64 v18; // rax\n  int v19; // edx\n  bool v20; // al\n  _QWORD *v21; // rax\n  __int64 v22; // rdx\n  int v23; // eax\n  unsigned int v24; // eax\n  char *v25; // rax\n  char **v26; // rax\n  _QWORD *v27; // rax\n  __int64 v28; // rdx\n  _QWORD *v29; // rax\n  __int64 v30; // rdx\n  __int64 v31; // r12\n  char *v32; // rax\n  __int64 v33; // r12\n  char *v34; // rax\n  __int64 v35; // rax\n  __int64 v36; // rax\n  __int64 v37; // rsi\n  char *i; // r13\n  __int64 v39; // rsi\n  __int64 v40; // r12\n  char *v41; // rdi\n  char v42; // al\n  __int64 v43; // rax\n  int v44; // er13\n  char *v45; // rdi\n  void *v46; // rbx\n  void *v47; // rdi\n  __int64 v48; // rdx\n  void *v49; // rcx\n  __int64 v50; // rdx\n  void *v51; // rax\n  void *v52; // rbx\n  __int64 result; // rax\n  __int64 v54; // r12\n  char *v55; // rax\n  char *v56; // r13\n  int k; // ebx\n  int v58; // eax\n  char *v59; // rax\n  char *v60; // rax\n  char v61; // dl\n  __int64 v62; // r13\n  const char *v63; // rsi\n  __int64 v64; // rcx\n  __int64 v65; // r13\n  char *v66; // rax\n  char *v67; // rax\n  _QWORD *j; // rdi\n  _QWORD *v69; // r13\n  char *v70; // rax\n  __int64 v71; // rax\n  __int64 v72; // rdx\n  __int64 v73; // rcx\n  char *v74; // rax\n  int v75; // eax\n  __int64 v76; // rax\n  char *v77; // rax\n  char *v78; // rax\n  char *v79; // rax\n  char *v80; // r14\n  const char *v81; // r15\n  _QWORD *v82; // r13\n  __int64 v83; // rax\n  char *v84; // rax\n  FILE *v85; // rbx\n  char *v86; // rax\n  FILE *v87; // rsi\n  const char **v88; // rbx\n  const char *v89; // rcx\n  FILE *v90; // rbx\n  char *v91; // rax\n  const char *v92; // r12\n  char *v93; // rax\n  char *v94; // r13\n  char *v95; // r14\n  char *v96; // rax\n  __int64 v97; // rbx\n  char *v98; // rax\n  char *v99; // [rsp+8h] [rbp-60h]\n  char s1[2]; // [rsp+15h] [rbp-53h]\n  char *v101; // [rsp+18h] [rbp-50h]\n  void *v102; // [rsp+20h] [rbp-48h]\n  __int64 v103; // [rsp+28h] [rbp-40h]\n\n  v3 = a1;\n  v4 = a2;\n  sub_410670(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  status = 2;\n  sub_418780(sub_40B710);\n  byte_625678 = 1;\n  tp.tv_sec = 0x8000000000000000LL;\n  dword_6255D0 = 0;\n  ptr = 0LL;\n  tp.tv_nsec = -1LL;\n  byte_625698 = 0;\n  if ( dword_6245AC == 2 )\n  {\n    dword_6256F8 = 2;\n    sub_411C30(0LL, 7LL);\n  }\n  else if ( dword_6245AC == 3 )\n  {\n    dword_6256F8 = 0;\n    sub_411C30(0LL, 7LL);\n  }\n  else\n  {\n    if ( dword_6245AC != 1 )\n      abort();\n    if ( isatty(1) )\n    {\n      dword_6256F8 = 2;\n      sub_411C30(0LL, 3LL);\n      byte_625698 = 1;\n    }\n    else\n    {\n      dword_6256F8 = 1;\n    }\n  }\n  byte_6256EF = 0;\n  dword_6256F4 = 0;\n  dword_6256F0 = 0;\n  byte_6256ED = 0;\n  byte_6256EC = 0;\n  dword_6256D4 = 0;\n  byte_6256BC = 0;\n  dword_6256B8 = 1;\n  byte_6256B6 = 0;\n  byte_6256B5 = 0;\n  dword_6256B0 = 0;\n  qword_6256A8 = 0LL;\n  qword_6256A0 = 0LL;\n  byte_625725 = 0;\n  v5 = getenv(\"QUOTING_STYLE\");\n  v6 = v5;\n  if ( v5 )\n  {\n    v7 = sub_40ACF0(v5, off_41EA00, dword_41E9C0, 4LL);\n    if ( v7 < 0 )\n    {\n      v31 = sub_412290(v6);\n      v32 = dcgettext(0LL, \"ignoring invalid value of environment variable QUOTING_STYLE: %s\", 5);\n      error(0, 0, v32, v31);\n    }\n    else\n    {\n      sub_411C30(0LL, (unsigned int)dword_41E9C0[v7]);\n    }\n  }\n  qword_625670 = 80LL;\n  v8 = getenv(\"COLUMNS\");\n  v9 = v8;\n  if ( v8 && *v8 && !(unsigned __int8)sub_404B40(v8) )\n  {\n    v33 = sub_412290(v9);\n    v34 = dcgettext(0LL, \"ignoring invalid width in environment variable COLUMNS: %s\", 5);\n    error(0, 0, v34, v33);\n  }\n  if ( ioctl(1, 0x5413uLL, &v102) != -1 && WORD1(v102) )\n    qword_625670 = WORD1(v102);\n  v10 = getenv(\"TABSIZE\");\n  qword_625680 = 8LL;\n  v11 = v10;\n  if ( v10 )\n  {\n    if ( (unsigned int)sub_412DF0(v10) )\n    {\n      v54 = sub_412290(v11);\n      v55 = dcgettext(0LL, \"ignoring invalid tab size in environment variable TABSIZE: %s\", 5);\n      error(0, 0, v55, v54);\n    }\n    else\n    {\n      qword_625680 = (__int64)v102;\n    }\n  }\n  v12 = 0;\n  v13 = 0;\n  v14 = 0LL;\n  while ( 1 )\n  {\n    LODWORD(v102) = -1;\n    v15 = sub_416E00(a1, v4, \"abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1\", &off_419900, &v102);\n    if ( v15 == -1 )\n      break;\n    switch ( v15 + 131 )\n    {\n      case 0:\n        sub_412840((char)stdout);\n        exit(0);\n        return result;\n      case 1:\n        sub_40A530(0);\n        return result;\n      case 180:\n        dword_6256F8 = dword_6256F8 != 0;\n        continue;\n      case 196:\n        if ( !dword_6256B0 )\n          dword_6256B0 = 1;\n        continue;\n      case 197:\n        v27 = (_QWORD *)sub_412980(16LL);\n        v28 = qword_6256A8;\n        *v27 = \"*~\";\n        v27[1] = v28;\n        qword_6256A8 = (__int64)v27;\n        v29 = (_QWORD *)sub_412980(16LL);\n        v30 = qword_6256A8;\n        *v29 = \".*~\";\n        v29[1] = v30;\n        qword_6256A8 = (__int64)v29;\n        continue;\n      case 198:\n        dword_6256F8 = 2;\n        continue;\n      case 199:\n        byte_6256D8 = 1;\n        continue;\n      case 201:\n        dword_6256D4 = 3;\n        continue;\n      case 202:\n        byte_6245A8 = 0;\n        continue;\n      case 203:\n        dword_6256B8 = 3;\n        continue;\n      case 204:\n        v99 = nptr;\n        v26 = (char **)sub_412980(16LL);\n        *v26 = v99;\n        v26[1] = (char *)qword_6256A8;\n        qword_6256A8 = (__int64)v26;\n        continue;\n      case 207:\n        dword_6256B8 = 5;\n        continue;\n      case 209:\n        sub_411C30(0LL, 0LL);\n        continue;\n      case 212:\n        sub_411C30(0LL, 5LL);\n        continue;\n      case 213:\n        byte_6256B6 = 1;\n        continue;\n      case 214:\n        dword_6256F0 = 2;\n        v13 = 1;\n        continue;\n      case 215:\n        dcgettext(0LL, \"invalid tab size\", 5);\n        qword_625680 = sub_412C10((_DWORD)nptr);\n        continue;\n      case 216:\n        dword_6256F0 = -1;\n        v13 = 1;\n        continue;\n      case 219:\n        dword_6256F0 = 1;\n        v13 = 1;\n        continue;\n      case 221:\n        byte_625725 = 1;\n        continue;\n      case 228:\n        dword_6256B0 = 2;\n        continue;\n      case 229:\n        sub_411C30(0LL, 7LL);\n        continue;\n      case 230:\n        dword_6256F4 = 1;\n        continue;\n      case 231:\n        byte_6256B5 = 1;\n        continue;\n      case 233:\n        dword_6256B0 = 2;\n        dword_6256F0 = -1;\n        if ( !dword_6256F8 )\n          dword_6256F8 = 2 - ((unsigned int)isatty(1) < 1);\n        byte_6256EC = 0;\n        v13 = 1;\n        byte_6256D2 = 0;\n        byte_6256D1 = 0;\n        continue;\n      case 234:\n        dword_6256F8 = 0;\n        byte_6245A9 = 0;\n        continue;\n      case 235:\n        dword_6256E8 = 176;\n        dword_6256DC = 176;\n        qword_6256E0 = 1LL;\n        qword_6245A0 = 1LL;\n        continue;\n      case 236:\n        byte_6256BC = 1;\n        continue;\n      case 238:\n        v12 = 1;\n        continue;\n      case 239:\n        goto LABEL_21;\n      case 240:\n        dword_6256F8 = 4;\n        continue;\n      case 241:\n        byte_6256ED = 1;\nLABEL_21:\n        dword_6256F8 = 0;\n        continue;\n      case 242:\n        dword_6256F8 = 0;\n        byte_6245A8 = 0;\n        continue;\n      case 243:\n        dword_6256D4 = 1;\n        continue;\n      case 244:\n        byte_625698 = 1;\n        continue;\n      case 245:\n        byte_6256EF = 1;\n        continue;\n      case 246:\n        byte_6256EC = 1;\n        continue;\n      case 247:\n        dword_6256F0 = 4;\n        v13 = 1;\n        continue;\n      case 248:\n        dword_6256F4 = 2;\n        continue;\n      case 249:\n        goto LABEL_53;\n      case 250:\n        if ( (unsigned __int8)sub_404B40(nptr) )\n          continue;\n        v4 = (char **)sub_412290(nptr);\n        v25 = dcgettext(0LL, \"invalid line width\", 5);\n        error(2, 0, \"%s: %s\", v25, v4);\nLABEL_53:\n        dword_6256F0 = 3;\n        v13 = 1;\n        break;\n      case 251:\n        dword_6256F8 = 3;\n        continue;\n      case 259:\n        byte_6256EE = 1;\n        continue;\n      case 260:\n        v24 = sub_40DFA0(nptr);\n        if ( v24 )\n          sub_413220(v24, (unsigned int)v102, 0LL, &off_419900, nptr);\n        dword_6256DC = dword_6256E8;\n        qword_6245A0 = qword_6256E0;\n        continue;\n      case 261:\n        if ( nptr\n          && (v23 = dword_419740[sub_40AFB0(\"--color\", nptr, off_419780, dword_419740, 4LL, off_6245B8)], v23 != 1)\n          && (v23 != 2 || !isatty(1)) )\n        {\n          byte_6256D2 = 0;\n        }\n        else\n        {\n          byte_6256D2 = 1;\n          qword_625680 = 0LL;\n        }\n        continue;\n      case 262:\n        dword_6256B8 = 4;\n        continue;\n      case 263:\n        dword_6256D4 = 2;\n        continue;\n      case 264:\n        dword_6256F8 = dword_419890[sub_40AFB0(\"--format\", nptr, off_4198C0, dword_419890, 4LL, off_6245B8)];\n        continue;\n      case 265:\n        dword_6256F8 = 0;\n        v14 = \"full-iso\";\n        continue;\n      case 266:\n        byte_6256B4 = 1;\n        continue;\n      case 267:\n        v21 = (_QWORD *)sub_412980(16LL);\n        *v21 = nptr;\n        v22 = qword_6256A0;\n        qword_6256A0 = (__int64)v21;\n        v21[1] = v22;\n        continue;\n      case 268:\n        if ( nptr\n          && (v19 = dword_419740[sub_40AFB0(\"--hyperlink\", nptr, off_419780, dword_419740, 4LL, off_6245B8)], v19 != 1) )\n        {\n          v20 = 0;\n          if ( v19 == 2 )\n            v20 = isatty(1) != 0;\n        }\n        else\n        {\n          v20 = 1;\n        }\n        byte_6256D1 = v20;\n        continue;\n      case 269:\n        dword_6256D4 = dword_419F50[sub_40AFB0(\"--indicator-style\", nptr, off_419F60, dword_419F50, 4LL, off_6245B8)];\n        continue;\n      case 270:\n        v18 = sub_40AFB0(\"--quoting-style\", nptr, off_41EA00, dword_41E9C0, 4LL, off_6245B8);\n        sub_411C30(0LL, (unsigned int)dword_41E9C0[v18]);\n        continue;\n      case 271:\n        byte_625698 = 0;\n        continue;\n      case 272:\n        dword_6256E8 = 144;\n        dword_6256DC = 144;\n        qword_6256E0 = 1LL;\n        qword_6245A0 = 1LL;\n        continue;\n      case 273:\n        v13 = 1;\n        dword_6256F0 = dword_419830[sub_40AFB0(\"--sort\", nptr, &off_419860, dword_419830, 4LL, off_6245B8)];\n        continue;\n      case 274:\n        dword_6256F4 = dword_4197D0[sub_40AFB0(\"--time\", nptr, off_419800, dword_4197D0, 4LL, off_6245B8)];\n        continue;\n      case 275:\n        v14 = nptr;\n        continue;\n      default:\n        goto LABEL_270;\n    }\n  }\n  if ( !qword_6256E0 )\n  {\n    v56 = getenv(\"LS_BLOCK_SIZE\");\n    sub_40DFA0(v56);\n    if ( v56 || getenv(\"BLOCK_SIZE\") )\n    {\n      dword_6256DC = dword_6256E8;\n      qword_6245A0 = qword_6256E0;\n    }\n    if ( v12 )\n    {\n      dword_6256E8 = 0;\n      qword_6256E0 = 1024LL;\n    }\n  }\n  qword_6255C0 = (qword_625670 % 3uLL != 0) + qword_625670 / 3uLL;\n  v16 = sub_411C20(0LL);\n  if ( dword_6256F8 == 4 || dword_6256F8 == 1 )\n  {\n    v17 = 0;\n  }\n  else if ( qword_625670 || (v17 = 0, !dword_6256F8) )\n  {\n    v17 = v16 == 6 || (v16 & 0xFFFFFFFD) == 1;\n  }\n  byte_625768 = v17;\n  v35 = sub_411BE0(0LL);\n  qword_625690 = v35;\n  if ( v16 == 7 )\n    sub_411C40(v35, 32LL, 1LL);\n  if ( (unsigned int)dword_6256D4 > 1 )\n  {\n    v36 = (unsigned int)(dword_6256D4 - 2);\n    v37 = (unsigned int)byte_41B297[v36];\n    for ( i = &byte_41B297[v36]; *i; v37 = (unsigned int)*i )\n    {\n      ++i;\n      sub_411C40(qword_625690, v37, 1LL);\n    }\n  }\n  v39 = 58LL;\n  qword_625688 = sub_411BE0(0LL);\n  sub_411C40(qword_625688, 58LL, 1LL);\n  if ( byte_6256D8 )\n  {\n    if ( !dword_6256F8 && !byte_6256D1 )\n      goto LABEL_111;\n    byte_6256D8 = 0;\n  }\n  if ( (unsigned int)(dword_6256F4 - 1) > 1 || v13 )\n  {\n    if ( dword_6256F8 )\n      goto LABEL_116;\n  }\n  else if ( dword_6256F8 )\n  {\n    dword_6256F0 = 4;\n    goto LABEL_116;\n  }\nLABEL_111:\n  if ( v14 || (v96 = getenv(\"TIME_STYLE\"), (v14 = v96) != 0LL) )\n  {\n    while ( 1 )\n    {\n      v39 = (__int64)\"posix-\";\n      if ( strncmp(v14, \"posix-\", 6uLL) )\n        break;\n      if ( !(unsigned __int8)sub_40C190(2LL) )\n        goto LABEL_116;\n      v14 += 6;\n    }\n    if ( *v14 == 43 )\n    {\n      v92 = v14 + 1;\n      v39 = 10LL;\n      v93 = strchr(v92, 10);\n      v94 = v93;\n      if ( v93 )\n      {\n        v95 = v93 + 1;\n        v39 = 10LL;\n        if ( strchr(v93 + 1, 10) )\n        {\n          v97 = sub_412290(v92);\n          v98 = dcgettext(0LL, \"invalid time style format %s\", 5);\n          error(2, 0, v98, v97);\nLABEL_284:\n          __assert_fail(\"found\", \"src/ls.c\", 0x638u, \"main\");\n        }\n        *v94 = 0;\n      }\n      else\n      {\n        v95 = (char *)v92;\n      }\n      off_624410 = (char *)v92;\n      off_624418 = v95;\n      goto LABEL_243;\n    }\n  }\n  else\n  {\n    v14 = \"locale\";\n  }\n  v39 = (__int64)off_419FA0;\n  v76 = sub_40ACF0(v14, off_419FA0, &unk_419F90, 4LL);\n  if ( v76 < 0 )\n  {\n    sub_40AE10(\"time style\", v14, v76);\n    v85 = stderr;\n    v86 = dcgettext(0LL, \"Valid arguments are:\\n\", 5);\n    v87 = v85;\n    v88 = (const char **)off_419FA0;\n    fputs_unlocked(v86, v87);\n    v89 = \"full-iso\";\n    do\n    {\n      ++v88;\n      __fprintf_chk(stderr, 1LL, \"  - [posix-]%s\\n\", v89);\n      v89 = *v88;\n    }\n    while ( *v88 );\n    v90 = stderr;\n    v91 = dcgettext(0LL, \"  - +FORMAT (e.g., +%H:%M) for a 'date'-style format\\n\", 5);\n    fputs_unlocked(v91, v90);\nLABEL_270:\n    sub_40A530(2);\n  }\n  if ( v76 == 1 )\n  {\n    off_624418 = (char *)&unk_41B30E;\n    off_624410 = (char *)&unk_41B30E;\n  }\n  else if ( v76 <= 1 )\n  {\n    off_624418 = \"%Y-%m-%d %H:%M:%S.%N %z\";\n    off_624410 = \"%Y-%m-%d %H:%M:%S.%N %z\";\n  }\n  else if ( v76 == 2 )\n  {\n    off_624410 = \"%Y-%m-%d \";\n    off_624418 = \"%m-%d %H:%M\";\n  }\n  else if ( v76 == 3 && (unsigned __int8)sub_40C190(2LL) )\n  {\n    v77 = dcgettext(0LL, off_624410, 2);\n    v39 = (__int64)off_624418;\n    off_624410 = v77;\n    off_624418 = dcgettext(0LL, off_624418, 2);\n  }\nLABEL_243:\n  sub_404BB0();\nLABEL_116:\n  v40 = dword_62463C;\n  if ( byte_6256D2 )\n  {\n    v59 = getenv(\"LS_COLORS\");\n    v101 = v59;\n    if ( v59 && *v59 )\n    {\n      strcpy(s1, \"??\");\n      qword_6256C0 = (void *)sub_412BB0(v59);\n      v102 = qword_6256C0;\n      while ( 1 )\n      {\nLABEL_191:\n        while ( 1 )\n        {\n          v60 = v101;\n          v61 = *v101;\n          if ( *v101 != 42 )\n            break;\n          v82 = (_QWORD *)sub_412980(40LL);\n          v83 = qword_6256C8;\n          ++v101;\n          qword_6256C8 = (__int64)v82;\n          v82[4] = v83;\n          v82[1] = v102;\n          if ( (unsigned __int8)sub_404860(&v102, &v101, 1LL, v82) )\n          {\n            v84 = v101++;\n            if ( *v84 == 61 )\n            {\n              v39 = (__int64)&v101;\n              v82[3] = v102;\n              if ( (unsigned __int8)sub_404860(&v102, &v101, 0LL, v82 + 2) )\n                continue;\n            }\n          }\n          goto LABEL_201;\n        }\n        if ( v61 != 58 )\n          break;\n        ++v101;\n      }\n      if ( !v61 )\n        goto LABEL_205;\n      ++v101;\n      s1[0] = *v60;\n      if ( v60[1] )\n      {\n        v101 = v60 + 2;\n        s1[1] = v60[1];\n        v101 = v60 + 3;\n        if ( v60[2] == 61 )\n        {\n          v62 = 0LL;\n          v63 = \"lc\";\n          while ( strcmp(s1, v63) )\n          {\n            v63 = (&off_419E80)[++v62];\n            if ( !v63 )\n              goto LABEL_200;\n          }\n          v39 = (__int64)&v101;\n          v64 = 16LL * (int)v62 + 6439968;\n          *(_QWORD *)(v64 + 8) = v102;\n          if ( (unsigned __int8)sub_404860(&v102, &v101, 0LL, v64) )\n            goto LABEL_191;\nLABEL_200:\n          v65 = sub_412290(s1);\n          v66 = dcgettext(0LL, \"unrecognized prefix: %s\", 5);\n          error(0, 0, v66, v65);\n        }\n      }\nLABEL_201:\n      v67 = dcgettext(0LL, \"unparsable value for LS_COLORS environment variable\", 5);\n      v39 = 0LL;\n      error(0, 0, v67);\n      free(qword_6256C0);\n      for ( j = (_QWORD *)qword_6256C8; j; j = v69 )\n      {\n        v69 = (_QWORD *)j[4];\n        free(j);\n      }\n      byte_6256D2 = 0;\nLABEL_205:\n      if ( qword_624490 == 6 )\n      {\n        v39 = (__int64)\"target\";\n        if ( !strncmp(off_624498, \"target\", 6uLL) )\n          byte_625750 = 1;\n      }\n    }\n    else\n    {\n      v78 = getenv(\"COLORTERM\");\n      if ( !v78 || !*v78 )\n      {\n        v79 = getenv(\"TERM\");\n        v80 = v79;\n        if ( v79 && *v79 )\n        {\n          v81 = \"# Configuration file for dircolors, a utility to help you set the\";\n          while ( 1 )\n          {\n            v39 = (__int64)\"TERM \";\n            if ( !strncmp(v81, \"TERM \", 5uLL) )\n            {\n              v39 = (__int64)v80;\n              if ( !(unsigned int)sub_4159A0(v81 + 5, v80, 0LL) )\n                break;\n            }\n            v81 += strlen(v81) + 1;\n            if ( (unsigned __int64)(v81 - \"# Configuration file for dircolors, a utility to help you set the\") > 0x104C )\n              goto LABEL_266;\n          }\n        }\n        else\n        {\nLABEL_266:\n          byte_6256D2 = 0;\n        }\n      }\n    }\n    if ( byte_6256D2\n      && ((unsigned __int8)sub_404AE0(13LL)\n       || (unsigned __int8)sub_404AE0(14LL) && byte_625750\n       || (unsigned __int8)sub_404AE0(12LL) && !dword_6256F8) )\n    {\n      byte_6256BD = 1;\n    }\n  }\n  if ( dword_6256B8 == 1 )\n  {\n    v58 = 2;\n    if ( !byte_6256B5 && dword_6256D4 != 3 )\n      v58 = (unsigned int)dword_6256F8 < 1 ? 2 : 4;\n    dword_6256B8 = v58;\n  }\n  if ( byte_6256B6 )\n  {\n    qword_625788 = (void *)sub_40CA80(30LL, 0LL, sub_404800, sub_404810, j__free);\n    if ( !qword_625788 )\n      sub_412BD0();\n    v39 = 0LL;\n    obstack_begin(&unk_6254A0, 0LL, 0LL, malloc, free);\n  }\n  v41 = getenv(\"TZ\");\n  qword_625668 = sub_417410(v41);\n  if ( !((dword_6256F0 - 2) & 0xFFFFFFFD) || !dword_6256F8 || byte_625725 || byte_6256EC )\n  {\n    byte_625661 = 1;\n    v42 = 0;\n  }\n  else\n  {\n    byte_625661 = 0;\n    v42 = 1;\n    if ( !byte_6256B6 && !byte_6256D2 && !dword_6256D4 )\n      v42 = byte_6256B4;\n  }\n  byte_625660 = v42 & 1;\n  if ( byte_6256D8 )\n  {\n    obstack_begin(&unk_625560, 0LL, 0LL, malloc, free);\n    v39 = 0LL;\n    v41 = (char *)&unk_625500;\n    obstack_begin(&unk_625500, 0LL, 0LL, malloc, free);\n  }\n  if ( byte_6256D1 )\n  {\n    v71 = 0LL;\n    while ( 1 )\n    {\n      v73 = (unsigned int)v71;\n      if ( (int)v71 <= 90 )\n      {\n        v72 = 1LL;\n        if ( (int)v71 >= 65 )\n          goto LABEL_227;\n        v39 = (unsigned int)(v71 - 48);\n        if ( (unsigned int)v39 <= 9 )\n          goto LABEL_227;\n        v73 = (unsigned int)(v71 - 45);\n        if ( (unsigned int)v73 <= 1 )\n        {\nLABEL_231:\n          v72 = 1LL;\n          goto LABEL_227;\n        }\n      }\n      else\n      {\n        v39 = (unsigned int)(v71 - 97);\n        v72 = 1LL;\n        if ( (unsigned int)v39 <= 0x19 )\n          goto LABEL_227;\n        v73 = (unsigned int)(v71 - 45);\n        if ( (unsigned int)v73 <= 1 )\n          goto LABEL_231;\n      }\n      if ( (_DWORD)v71 == 126 )\n        goto LABEL_231;\n      LOBYTE(v72) = (_DWORD)v71 == 95;\nLABEL_227:\n      byte_6253A0[v71] |= v72;\n      if ( ++v71 == 256 )\n      {\n        v74 = (char *)sub_412D40(v41, v39, v72, v73);\n        if ( !v74 )\n          v74 = \"\";\n        qword_625748 = (__int64)v74;\n        break;\n      }\n    }\n  }\n  qword_625778 = 100LL;\n  v43 = sub_412980(20000LL);\n  v44 = v3 - v40;\n  qword_625770 = 0LL;\n  qword_625780 = v43;\n  sub_4084B0();\n  if ( v3 - (int)v40 <= 0 )\n  {\n    if ( byte_6256B5 )\n      sub_408580(\".\", 3LL, 1LL, \"\");\n    else\n      sub_404D90(\".\", 0LL);\n    if ( !qword_625770 )\n      goto LABEL_158;\n    goto LABEL_214;\n  }\n  do\n  {\n    v45 = v4[v40++];\n    sub_408580(v45, 0LL, 1LL, \"\");\n  }\n  while ( v3 > (int)v40 );\n  if ( qword_625770 )\n  {\nLABEL_214:\n    sub_404F40();\n    if ( !byte_6256B5 )\n      sub_405140(0LL);\n    if ( qword_625770 )\n    {\n      sub_407CA0();\n      if ( ptr )\n      {\n        v70 = stdout->_IO_write_ptr;\n        if ( stdout->_IO_write_end <= v70 )\n        {\n          __overflow(stdout, 10);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v70 + 1;\n          *v70 = 10;\n        }\n        ++qword_6255B8;\n        v46 = ptr;\n        goto LABEL_134;\n      }\n      goto LABEL_144;\n    }\n  }\n  v46 = ptr;\n  if ( v44 > 1 )\n    goto LABEL_134;\nLABEL_158:\n  v46 = ptr;\n  if ( ptr )\n  {\n    if ( !*((_QWORD *)ptr + 3) )\n      byte_625678 = 0;\nLABEL_134:\n    while ( v46 )\n    {\n      v47 = *(void **)v46;\n      ptr = (void *)*((_QWORD *)v46 + 3);\n      if ( !qword_625788 || v47 )\n      {\n        sub_4092A0(v47);\n        free(*(void **)v46);\n        free(*((void **)v46 + 1));\n        free(v46);\n        byte_625678 = 1;\n      }\n      else\n      {\n        v48 = qword_6254B8;\n        if ( (unsigned __int64)(qword_6254B8 - qword_6254B0) <= 0xF )\n          __assert_fail(\"dev_ino_size <= obstack_object_size (&dev_ino_obstack)\", \"src/ls.c\", 0x402u, \"dev_ino_pop\");\n        qword_6254B8 -= 16LL;\n        v49 = *(void **)(v48 - 16);\n        v50 = *(_QWORD *)(v48 - 8);\n        v102 = v49;\n        v103 = v50;\n        v51 = (void *)sub_40D260(qword_625788, &v102);\n        if ( !v51 )\n          goto LABEL_284;\n        free(v51);\n        free(*(void **)v46);\n        free(*((void **)v46 + 1));\n        free(v46);\n      }\n      v46 = ptr;\n    }\n  }\nLABEL_144:\n  if ( byte_6256D2 && byte_6256D0 )\n  {\n    if ( qword_624420 != 2 || *(_WORD *)off_624428 != 23323 || qword_624430 != 1 || *(_BYTE *)off_624438 != 109 )\n      sub_405D40();\n    fflush_unlocked(stdout);\n    sub_405AF0(0LL);\n    for ( k = dword_6255D4; k; --k )\n      raise(19);\n    if ( sig )\n      raise(sig);\n  }\n  if ( byte_6256D8 )\n  {\n    sub_405390(\"//DIRED//\", &unk_625560);\n    sub_405390(\"//SUBDIRED//\", &unk_625500);\n    v75 = sub_411C20(qword_625690);\n    __printf_chk(1LL, \"//DIRED-OPTIONS// --quoting-style=%s\\n\", off_41EA00[v75]);\n  }\n  v52 = qword_625788;\n  if ( qword_625788 )\n  {\n    if ( sub_40C5F0(qword_625788) )\n      __assert_fail(\"hash_get_n_entries (active_dir_set) == 0\", \"src/ls.c\", 0x66Cu, \"main\");\n    sub_40CCC0(v52);\n  }\n  return (unsigned int)dword_6255D0;\n}\n", 
            "funcStartAddr": "0x402e90L", 
            "funcEndAddr": "0x404719L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x404720L", 
            "funcEndAddr": "0x40474bL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "void *sub_40474B()\n{\n  void *result; // rax\n\n  result = &unk_624648;\n  if ( &unk_624648 != &unk_624648 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x40474bL", 
            "funcEndAddr": "0x40476aL", 
            "funcName": "sub_40474B"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40476A()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40476aL", 
            "funcEndAddr": "0x4047a1L", 
            "funcName": "sub_40476A"
        }, 
        {
            "decompiledFuncCode": "void *sub_4047A1()\n{\n  void *result; // rax\n\n  if ( !byte_624688 )\n  {\n    while ( qword_624690 < (unsigned __int64)(&qword_623E48 - qword_623E40 - 1) )\n      ((void (*)(void))qword_623E40[++qword_624690])();\n    result = sub_40474B();\n    byte_624688 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4047a1L", 
            "funcEndAddr": "0x4047f8L", 
            "funcName": "sub_4047A1"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4047F8()\n{\n  return sub_40476A();\n}\n", 
            "funcStartAddr": "0x4047f8L", 
            "funcEndAddr": "0x4047fdL", 
            "funcName": "sub_4047F8"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404800(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n", 
            "funcStartAddr": "0x404800L", 
            "funcEndAddr": "0x40480cL", 
            "funcName": "sub_404800"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_404810(_QWORD *a1, _QWORD *a2)\n{\n  bool result; // al\n\n  result = 0;\n  if ( *a1 == *a2 )\n    result = a1[1] == a2[1];\n  return result;\n}\n", 
            "funcStartAddr": "0x404810L", 
            "funcEndAddr": "0x40482cL", 
            "funcName": "sub_404810"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404830(int a1)\n{\n  __int64 result; // rax\n\n  result = (unsigned int)sig;\n  if ( !sig )\n    sig = a1;\n  return result;\n}\n", 
            "funcStartAddr": "0x404830L", 
            "funcEndAddr": "0x404841L", 
            "funcName": "sub_404830"
        }, 
        {
            "decompiledFuncCode": "void j__free(void *ptr)\n{\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x404850L", 
            "funcEndAddr": "0x404855L", 
            "funcName": "j_.free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404860(char **a1, char **a2, unsigned int a3, _QWORD *a4)\n{\n  _QWORD *v4; // r11\n  char *v5; // r8\n  __int64 v6; // r10\n  char *v7; // r9\n  int v8; // ecx\n  char v9; // cl\n  bool v10; // cc\n  unsigned __int8 v11; // cl\n  __int64 result; // rax\n  int v13; // er12\n  int v14; // er13\n  int v15; // er12\n  char v16; // cl\n  __int64 v17; // r14\n\n  v4 = a4;\n  v5 = *a2;\n  v6 = 0LL;\n  v7 = *a1;\nLABEL_4:\n  v9 = *v5;\n  v10 = *v5 <= 61;\n  if ( *v5 == 61 )\n  {\nLABEL_17:\n    if ( (_BYTE)a3 )\n    {\n      result = a3;\n      goto LABEL_12;\n    }\n    goto LABEL_16;\n  }\n  while ( !v10 )\n  {\n    if ( v9 == 92 )\n    {\n      v8 = (unsigned __int8)v5[1];\n      v5 += 2;\n      switch ( (_BYTE)v8 )\n      {\n        case 0:\n          goto LABEL_11;\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n          v13 = (unsigned __int8)*v5;\n          for ( v8 -= 48; (unsigned __int8)(v13 - 48) <= 7u; v13 = (unsigned __int8)*v5 )\n          {\n            ++v5;\n            v8 = v13 + 8 * v8 - 48;\n          }\n          goto LABEL_3;\n        case 0x3F:\n          LOBYTE(v8) = 127;\n          goto LABEL_3;\n        case 0x58:\n        case 0x78:\n          v14 = 0;\n          break;\n        case 0x5F:\n          LOBYTE(v8) = 32;\n          goto LABEL_3;\n        case 0x61:\n          LOBYTE(v8) = 7;\n          goto LABEL_3;\n        case 0x62:\n          LOBYTE(v8) = 8;\n          goto LABEL_3;\n        case 0x65:\n          LOBYTE(v8) = 27;\n          goto LABEL_3;\n        case 0x66:\n          LOBYTE(v8) = 12;\n          goto LABEL_3;\n        case 0x6E:\n          LOBYTE(v8) = 10;\n          goto LABEL_3;\n        case 0x72:\n          LOBYTE(v8) = 13;\n          goto LABEL_3;\n        case 0x74:\n          LOBYTE(v8) = 9;\n          goto LABEL_3;\n        case 0x76:\n          LOBYTE(v8) = 11;\n          goto LABEL_3;\n        default:\n          goto LABEL_3;\n      }\nLABEL_25:\n      while ( 1 )\n      {\n        v15 = (unsigned __int8)*v5;\n        v16 = v15 - 48;\n        if ( (unsigned __int8)(v15 - 48) > 0x36u )\n          break;\n        while ( 1 )\n        {\n          v17 = 1LL << v16;\n          if ( (1LL << v16) & 0x7E0000 )\n          {\n            ++v5;\n            v14 = v15 + 16 * v14 - 55;\n            goto LABEL_25;\n          }\n          if ( v17 & 0x7E000000000000LL )\n            break;\n          if ( v17 & 0x3FF )\n          {\n            ++v5;\n            v14 = v15 + 16 * v14 - 48;\n            v15 = (unsigned __int8)*v5;\n            v16 = v15 - 48;\n            if ( (unsigned __int8)(v15 - 48) <= 0x36u )\n              continue;\n          }\n          goto LABEL_30;\n        }\n        ++v5;\n        v14 = v15 + 16 * v14 - 87;\n      }\nLABEL_30:\n      *v7 = v14;\n      ++v6;\n      ++v7;\n      goto LABEL_4;\n    }\n    if ( v9 == 94 )\n    {\n      v11 = v5[1];\n      if ( (unsigned __int8)(v11 - 64) <= 0x3Eu )\n      {\n        v5 += 2;\n        LOBYTE(v8) = v11 & 0x1F;\nLABEL_3:\n        *v7 = v8;\n        ++v6;\n        ++v7;\n      }\n      else\n      {\n        if ( v11 != 63 )\n        {\n          ++v5;\nLABEL_11:\n          result = 0LL;\n          goto LABEL_12;\n        }\n        *v7 = 127;\n        ++v6;\n        ++v7;\n        ++v5;\n      }\n      goto LABEL_4;\n    }\nLABEL_16:\n    ++v5;\n    *v7 = v9;\n    ++v6;\n    ++v7;\n    v9 = *v5;\n    v10 = *v5 <= 61;\n    if ( *v5 == 61 )\n      goto LABEL_17;\n  }\n  if ( v9 && v9 != 58 )\n    goto LABEL_16;\n  result = 1LL;\nLABEL_12:\n  *a1 = v7;\n  *a2 = v5;\n  *v4 = v6;\n  return result;\n}\n", 
            "funcStartAddr": "0x404860L", 
            "funcEndAddr": "0x404adaL", 
            "funcName": "sub_404860"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_404AE0(unsigned int a1)\n{\n  bool result; // al\n  __int64 v2; // rdi\n  __int64 v3; // rdx\n  char *v4; // rsi\n\n  result = 0;\n  v2 = 2LL * a1;\n  v3 = qword_624420[v2];\n  if ( v3 )\n  {\n    v4 = (&off_624428)[v2];\n    if ( v3 == 1 )\n    {\n      result = *v4 != 48;\n    }\n    else\n    {\n      result = 1;\n      if ( v3 == 2 )\n        result = memcmp(v4, \"00\", 2uLL) != 0;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404ae0L", 
            "funcEndAddr": "0x404b37L", 
            "funcName": "sub_404AE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404B40(char *a1)\n{\n  int v1; // eax\n  __int64 result; // rax\n  __int64 v3; // [rsp+8h] [rbp-10h]\n\n  v1 = sub_4132B0(a1);\n  if ( v1 )\n  {\n    if ( v1 == 1 )\n    {\n      qword_625670 = -1LL;\n      result = 1LL;\n    }\n    else\n    {\n      result = 0LL;\n    }\n  }\n  else\n  {\n    qword_625670 = v3;\n    result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404b40L", 
            "funcEndAddr": "0x404ba6L", 
            "funcName": "sub_404B40"
        }, 
        {
            "decompiledFuncCode": "int sub_404BB0()\n{\n  __int64 i; // rsi\n  char *v1; // rax\n  char j; // dl\n  char v3; // cl\n  unsigned __int64 v4; // r15\n  char *v5; // rbx\n  nl_item v6; // er12\n  unsigned __int64 v7; // rbp\n  char *v8; // rax\n  char *v9; // r13\n  __int64 v10; // r12\n  char **v11; // rbx\n  char *v12; // rbp\n  char *v13; // r15\n  char *v14; // r13\n  unsigned __int64 v16; // [rsp+8h] [rbp-650h]\n  __int64 v17; // [rsp+10h] [rbp-648h]\n  __int64 v18; // [rsp+18h] [rbp-640h]\n  char v19; // [rsp+20h] [rbp-638h]\n  char v20; // [rsp+620h] [rbp-38h]\n\n  for ( i = 0LL; i != 2; ++i )\n  {\n    v1 = (&off_624410)[i];\n    for ( j = *v1; j; ++v1 )\n    {\n      v3 = v1[1];\n      if ( j == 37 )\n      {\n        if ( v3 == 37 )\n        {\n          j = (v1++)[2];\n          continue;\n        }\n        if ( v3 == 98 )\n          goto LABEL_9;\n      }\n      j = v1[1];\n    }\n    v1 = 0LL;\nLABEL_9:\n    *(__int64 *)((char *)&v17 + i * 8) = (__int64)v1;\n  }\n  v4 = 5LL;\n  if ( v17 || v18 )\n  {\nLABEL_11:\n    v5 = &v19;\n    v6 = 131086;\n    v7 = 0LL;\n    while ( 1 )\n    {\n      v16 = v4;\n      v8 = nl_langinfo(v6);\n      v9 = v8;\n      v1 = strchr(v8, 37);\n      if ( v1 )\n        break;\n      v1 = (char *)sub_40E570(v9, v5, 128LL, &v16, 0LL, 0LL);\n      if ( (unsigned __int64)v1 > 0x7F )\n        break;\n      if ( v7 < v16 )\n        v7 = v16;\n      v5 += 128;\n      ++v6;\n      if ( v5 == &v20 )\n      {\n        if ( v4 > v7 )\n        {\n          v4 = v7;\n          goto LABEL_11;\n        }\n        v11 = (char **)&v17;\n        v10 = 0LL;\nLABEL_26:\n        v12 = (&off_624410)[v10];\n        v13 = &v19;\n        v14 = (char *)&unk_6247A0 + 24 * v10;\n        while ( 1 )\n        {\n          v1 = *v11;\n          if ( *v11 )\n          {\n            if ( v1 - v12 > 128 )\n              return (int)v1;\n            LODWORD(v1) = __snprintf_chk(v14, 128LL, 1LL, -1LL, \"%.*s%s%s\");\n          }\n          else\n          {\n            LODWORD(v1) = snprintf(v14, 0x80uLL, \"%s\", v12);\n          }\n          if ( (unsigned int)v1 > 0x7F )\n            return (int)v1;\n          v13 += 128;\n          v14 += 128;\n          if ( v13 == &v20 )\n          {\n            ++v10;\n            ++v11;\n            if ( v10 != 2 )\n              goto LABEL_26;\n            byte_624788 = 1;\n            return (int)v1;\n          }\n        }\n      }\n    }\n  }\n  return (int)v1;\n}\n", 
            "funcStartAddr": "0x404bb0L", 
            "funcEndAddr": "0x404d89L", 
            "funcName": "sub_404BB0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_404D90(void *src, void *a2, char a3)\n{\n  char v3; // r13\n  __int64 *v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rax\n  void *result; // rax\n\n  v3 = a3;\n  v4 = (__int64 *)sub_412980(32LL);\n  v5 = 0LL;\n  if ( a2 )\n    v5 = sub_412BB0(a2);\n  v4[1] = v5;\n  v6 = 0LL;\n  if ( src )\n    v6 = sub_412BB0(src);\n  *v4 = v6;\n  result = ptr;\n  *((_BYTE *)v4 + 16) = v3;\n  v4[3] = (__int64)result;\n  ptr = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x404d90L", 
            "funcEndAddr": "0x404df6L", 
            "funcName": "sub_404D90"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_404E00(const char **a1, const char **a2)\n{\n  return strcmp(*a1, *a2);\n}\n", 
            "funcStartAddr": "0x404e00L", 
            "funcEndAddr": "0x404e0bL", 
            "funcName": "sub_404E00"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_404E10(const char **a1, const char **a2)\n{\n  return strcmp(*a2, *a1);\n}\n", 
            "funcStartAddr": "0x404e10L", 
            "funcEndAddr": "0x404e1eL", 
            "funcName": "sub_404E10"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_404E20(char *a1)\n{\n  __int64 v1; // rax\n  bool result; // al\n  __int64 v3; // [rsp+Eh] [rbp-1Ah]\n\n  v1 = sub_411CD0((__int64)&v3, 2LL, a1);\n  if ( *a1 == (_BYTE)v3 )\n    result = strlen(a1) != v1;\n  else\n    result = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x404e20L", 
            "funcEndAddr": "0x404e78L", 
            "funcName": "sub_404E20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404E80(const char *a1, __int64 a2)\n{\n  const char *v2; // rbx\n  size_t v3; // rax\n  __int64 v4; // rcx\n  unsigned __int128 v5; // ax\n  __int64 v6; // r14\n  _BYTE *i; // rbp\n  unsigned __int8 v8; // al\n  _BYTE *v10; // rdi\n\n  v2 = a1;\n  v3 = strlen(a1);\n  v4 = v3 + 1;\n  v5 = (v3 + 1) * (unsigned __int128)3uLL;\n  BYTE8(v5) = *((_QWORD *)&v5 + 1) != 0LL;\n  if ( (v5 & 0x8000000000000000LL) != 0LL || (*((_QWORD *)&v5 + 1) = BYTE8(v5), BYTE8(v5)) )\n    sub_412BD0(a1, a2, *((_QWORD *)&v5 + 1));\n  v6 = sub_412980(3 * v4);\nLABEL_4:\n  for ( i = (_BYTE *)v6; ; ++i )\n  {\n    v8 = *v2;\n    if ( !*v2 )\n      break;\n    while ( 1 )\n    {\n      ++v2;\n      if ( v8 == 47 )\n      {\n        if ( (_BYTE)a2 )\n          break;\n      }\n      if ( !byte_6253A0[v8] )\n      {\n        v10 = i;\n        i += 3;\n        __sprintf_chk(v10, 1LL, -1LL, \"%%%02x\", v8);\n        goto LABEL_4;\n      }\n      *i = v8;\n      v8 = *v2;\n      ++i;\n      if ( !*v2 )\n        goto LABEL_9;\n    }\n    *i = 47;\n  }\nLABEL_9:\n  *i = 0;\n  return v6;\n}\n", 
            "funcStartAddr": "0x404e80L", 
            "funcEndAddr": "0x404f3fL", 
            "funcName": "sub_404E80"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404F40(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  unsigned __int64 result; // rax\n  __int64 v4; // rdx\n  char *v5; // rcx\n  int v6; // eax\n  int v7; // er8\n  __int64 v8; // rsi\n  void *v9; // rdi\n  __int64 v10; // rdx\n  __int64 *v11; // rax\n  __int64 *v12; // rcx\n  int v13; // edx\n  void *v14; // rdi\n  _BOOL8 v15; // rdx\n  void *v16; // rax\n\n  v2 = qword_625770;\n  result = qword_625770 + ((unsigned __int64)qword_625770 >> 1);\n  if ( result > qword_625758 )\n  {\n    v14 = qword_625760;\n    free(qword_625760);\n    v15 = ((unsigned __int64)v2 * (unsigned __int128)0x18uLL) >> 64 != 0;\n    if ( 24 * v2 < 0 )\n      v15 = 1LL;\n    if ( v15 )\n      sub_412BD0(v14, a2, v15);\n    v16 = (void *)sub_412980(24 * v2);\n    v2 = qword_625770;\n    qword_625760 = v16;\n    result = 3 * qword_625770;\n    qword_625758 = 3 * qword_625770;\n  }\n  if ( v2 )\n  {\n    result = (unsigned __int64)qword_625760;\n    v4 = qword_625780;\n    v5 = (char *)qword_625760 + 8 * v2;\n    do\n    {\n      *(_QWORD *)result = v4;\n      result += 8LL;\n      v4 += 200LL;\n    }\n    while ( v5 != (char *)result );\n  }\n  if ( dword_6256F0 != -1 )\n  {\n    v6 = _setjmp(env);\n    v7 = dword_6256F0;\n    if ( v6 )\n    {\n      if ( dword_6256F0 == 3 )\n        __assert_fail(\"sort_type != sort_version\", \"src/ls.c\", 0xEE5u, \"sort_files\");\n      v8 = qword_625770;\n      v9 = qword_625760;\n      if ( qword_625770 )\n      {\n        v10 = qword_625780;\n        v11 = (__int64 *)qword_625760;\n        v12 = (__int64 *)((char *)qword_625760 + 8 * qword_625770);\n        do\n        {\n          *v11 = v10;\n          ++v11;\n          v10 += 200LL;\n        }\n        while ( v11 != v12 );\n      }\n      v6 = 1;\n    }\n    else\n    {\n      v8 = qword_625770;\n      v9 = qword_625760;\n    }\n    v13 = 0;\n    if ( v7 == 4 )\n      v13 = dword_6256F4;\n    result = sub_40EDD0(\n               v9,\n               v8,\n               off_419580[(unsigned __int8)byte_6256B4\n                        + 2 * ((unsigned __int8)byte_6256EF + 2 * (v6 + 2LL * (unsigned int)(v7 + v13)))]);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404f40L", 
            "funcEndAddr": "0x4050c7L", 
            "funcName": "sub_404F40"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4050D0(char *s1, char *s2)\n{\n  *__errno_location() = 0;\n  return strcoll(s1, s2);\n}\n", 
            "funcStartAddr": "0x4050d0L", 
            "funcEndAddr": "0x4050f8L", 
            "funcName": "sub_4050D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405100(char **a1, char **a2)\n{\n  return sub_4050D0(*a1, *a2);\n}\n", 
            "funcStartAddr": "0x405100L", 
            "funcEndAddr": "0x405108L", 
            "funcName": "sub_405100"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405110(char **a1, char **a2)\n{\n  return sub_4050D0(*a2, *a1);\n}\n", 
            "funcStartAddr": "0x405110L", 
            "funcEndAddr": "0x40511bL", 
            "funcName": "sub_405110"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405120(char **a1, char **a2)\n{\n  return sub_40BD40(*a2, *a1);\n}\n", 
            "funcStartAddr": "0x405120L", 
            "funcEndAddr": "0x40512eL", 
            "funcName": "sub_405120"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405130(char **a1, char **a2)\n{\n  return sub_40BD40(*a1, *a2);\n}\n", 
            "funcStartAddr": "0x405130L", 
            "funcEndAddr": "0x40513bL", 
            "funcName": "sub_405130"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405140(void *src, char a2)\n{\n  __int64 v2; // rbx\n  void **v3; // rbp\n  int v4; // eax\n  _BYTE *v5; // r14\n  _BYTE *v6; // rax\n  void *v7; // r14\n  __int64 v8; // rdx\n  _QWORD *v9; // rsi\n  char *v10; // rdi\n  char *v11; // rax\n  bool v12; // zf\n  char v13; // al\n\n  if ( src && qword_625788 )\n    sub_404D90(0LL, src, 0);\n  v2 = qword_625770;\nLABEL_5:\n  while ( --v2 != -1 )\n  {\n    while ( 1 )\n    {\n      v3 = (void **)*((_QWORD *)qword_625760 + v2);\n      v4 = *((_DWORD *)v3 + 42);\n      if ( v4 != 3 && v4 != 9 )\n        break;\n      v5 = *v3;\n      if ( !src )\n        goto LABEL_24;\n      v6 = (_BYTE *)sub_40B870(*v3);\n      if ( *v6 == 46 )\n      {\n        v13 = v6[(v6[1] == 46) + 1];\n        if ( !v13 || v13 == 47 )\n          goto LABEL_5;\n      }\n      if ( *v5 != 47 )\n      {\n        v7 = (void *)sub_40BB70(src, v5, 0LL);\n        sub_404D90(v7, v3[1], a2);\n        free(v7);\n      }\n      else\n      {\nLABEL_24:\n        sub_404D90(v5, v3[1], a2);\n      }\n      if ( *((_DWORD *)v3 + 42) != 9 )\n        goto LABEL_5;\n      --v2;\n      free(*v3);\n      free(v3[1]);\n      free(v3[2]);\n      if ( v2 == -1 )\n        goto LABEL_14;\n    }\n  }\nLABEL_14:\n  v8 = qword_625770;\n  if ( qword_625770 )\n  {\n    v9 = qword_625760;\n    v10 = (char *)qword_625760 + 8 * qword_625770;\n    v11 = (char *)qword_625760;\n    v8 = 0LL;\n    do\n    {\n      v12 = *(_DWORD *)(*(_QWORD *)v11 + 168LL) == 9;\n      v9[v8] = *(_QWORD *)v11;\n      v11 += 8;\n      v8 += !v12;\n    }\n    while ( v10 != v11 );\n  }\n  qword_625770 = v8;\n}\n", 
            "funcStartAddr": "0x405140L", 
            "funcEndAddr": "0x4052bbL", 
            "funcName": "sub_405140"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4052C0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // r12\n  unsigned __int64 v3; // rbx\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // rcx\n  unsigned __int64 v6; // rbp\n  char *v7; // rsi\n  char *v8; // r8\n\n  if ( a1 < a2 )\n  {\n    v2 = a2;\n    v3 = a1;\n    do\n    {\n      while ( 1 )\n      {\n        v5 = qword_625680;\n        v6 = v3 + 1;\n        v7 = stdout->_IO_write_ptr;\n        v8 = stdout->_IO_write_end;\n        if ( !qword_625680 || v2 / qword_625680 <= v6 / qword_625680 )\n          break;\n        if ( v7 >= v8 )\n        {\n          __overflow(stdout, 9);\n          v5 = qword_625680;\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v7 + 1;\n          *v7 = 9;\n        }\n        v4 = v3 / v5;\n        v3 = v3 + v5 - v3 % v5;\n        if ( v3 >= v2 )\n          return v4;\n      }\n      if ( v7 >= v8 )\n      {\n        LODWORD(v4) = __overflow(stdout, 32);\n      }\n      else\n      {\n        LODWORD(v4) = (_DWORD)v7 + 1;\n        stdout->_IO_write_ptr = v7 + 1;\n        *v7 = 32;\n      }\n      ++v3;\n    }\n    while ( v6 < v2 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x4052c0L", 
            "funcEndAddr": "0x405381L", 
            "funcName": "sub_4052C0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405390(const char *a1, __int64 a2)\n{\n  char *v2; // rax\n  char *v3; // rbx\n  unsigned __int64 v4; // rbp\n  unsigned __int64 v5; // rax\n  unsigned __int64 v6; // rbp\n  __int64 v7; // rdx\n\n  v2 = *(char **)(a2 + 24);\n  v3 = *(char **)(a2 + 16);\n  v4 = *(_QWORD *)(a2 + 24) - (_QWORD)v3;\n  if ( v4 > 7 )\n  {\n    if ( v2 == v3 )\n      *(_BYTE *)(a2 + 80) |= 2u;\n    v5 = ~*(_QWORD *)(a2 + 48) & (unsigned __int64)&v2[*(_QWORD *)(a2 + 48)];\n    if ( v5 - *(_QWORD *)(a2 + 8) > *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 8) )\n      v5 = *(_QWORD *)(a2 + 32);\n    v6 = (unsigned __int64)&v3[v4 & 0xFFFFFFFFFFFFFFF8LL];\n    *(_QWORD *)(a2 + 24) = v5;\n    *(_QWORD *)(a2 + 16) = v5;\n    fputs_unlocked(a1, stdout);\n    do\n    {\n      v7 = *(_QWORD *)v3;\n      v3 += 8;\n      __printf_chk(1LL, \" %lu\", v7);\n    }\n    while ( (char *)v6 != v3 );\n    v2 = stdout->_IO_write_ptr;\n    if ( v2 >= stdout->_IO_write_end )\n    {\n      LODWORD(v2) = __overflow(stdout, 10);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v2 + 1;\n      *v2 = 10;\n    }\n  }\n  return (int)v2;\n}\n", 
            "funcStartAddr": "0x405390L", 
            "funcEndAddr": "0x405456L", 
            "funcName": "sub_405390"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_405460(char *s, __int64 a2, __int64 a3)\n{\n  int v3; // ebx\n  int v4; // ebx\n  size_t v5; // rbp\n  char *v6; // rdx\n  size_t result; // rax\n\n  v3 = a3;\n  if ( s )\n  {\n    v4 = a3 - sub_40EB70(s);\n    if ( v4 < 0 )\n      v4 = 0;\n    fputs_unlocked(s, stdout);\n    v5 = strlen(s) + v4;\n    do\n    {\n      v6 = stdout->_IO_write_ptr;\n      if ( v6 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 32);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v6 + 1;\n        *v6 = 32;\n      }\n      --v4;\n    }\n    while ( v4 != -1 );\n  }\n  else\n  {\n    __printf_chk(1LL, \"%*lu \", a3);\n    v5 = v3;\n  }\n  result = v5 + qword_6255B8 + 1;\n  qword_6255B8 += v5 + 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x405460L", 
            "funcEndAddr": "0x405519L", 
            "funcName": "sub_405460"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_405520(unsigned int a1, unsigned int a2, char a3)\n{\n  char *v3; // rax\n\n  v3 = \"?\";\n  if ( a3 )\n  {\n    v3 = 0LL;\n    if ( !byte_6256ED )\n      v3 = (char *)sub_40E160();\n  }\n  return sub_405460(v3, a1, a2);\n}\n", 
            "funcStartAddr": "0x405520L", 
            "funcEndAddr": "0x40555fL", 
            "funcName": "sub_405520"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405560()\n{\n  __int64 result; // rax\n\n  result = (unsigned int)sig;\n  if ( !sig )\n    result = (unsigned int)++dword_6255D4;\n  return result;\n}\n", 
            "funcStartAddr": "0x405560L", 
            "funcEndAddr": "0x40557aL", 
            "funcName": "sub_405560"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405580(char a1, const char *a2, __int64 a3)\n{\n  __int64 v3; // r12\n  int *v4; // rax\n\n  v3 = sub_412040(4LL, a3);\n  v4 = __errno_location();\n  error(0, *v4, a2, v3);\n  if ( a1 )\n  {\n    dword_6255D0 = 2;\n  }\n  else if ( !dword_6255D0 )\n  {\n    dword_6255D0 = 1;\n  }\n}\n", 
            "funcStartAddr": "0x405580L", 
            "funcEndAddr": "0x4055e1L", 
            "funcName": "sub_405580"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4055F0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n\n  v2 = *(_QWORD *)(a2 + 72);\n  if ( *(_QWORD *)(a1 + 72) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a1 + 72) == v2 )\n    return strcmp(*(const char **)a1, *(const char **)a2);\n  return *(_QWORD *)(a1 + 72) < v2;\n}\n", 
            "funcStartAddr": "0x4055f0L", 
            "funcEndAddr": "0x405626L", 
            "funcName": "sub_4055F0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405630(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    return -1;\n  if ( v2 || (result = 1, !v3) )\n    result = sub_4050D0(*(char **)a1, *(char **)a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x405630L", 
            "funcEndAddr": "0x405686L", 
            "funcName": "sub_405630"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405690(__int64 a1, __int64 a2)\n{\n  bool v2; // dl\n  bool v3; // al\n  int v4; // edx\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 9 || *(_DWORD *)(a2 + 168) == 3;\n  if ( !v3 && v2 )\n    return -1;\n  if ( !v2 )\n  {\n    v4 = 1;\n    if ( v3 )\n      return v4;\n  }\n  return strcmp(*(const char **)a1, *(const char **)a2);\n}\n", 
            "funcStartAddr": "0x405690L", 
            "funcEndAddr": "0x4056e7L", 
            "funcName": "sub_405690"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4056F0(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    return -1;\n  if ( v2 || (result = 1, !v3) )\n    result = sub_4050D0(*(char **)a2, *(char **)a1);\n  return result;\n}\n", 
            "funcStartAddr": "0x4056f0L", 
            "funcEndAddr": "0x405746L", 
            "funcName": "sub_4056F0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405750(__int64 a1, __int64 a2)\n{\n  bool v2; // dl\n  bool v3; // al\n  int v4; // edx\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 9 || *(_DWORD *)(a2 + 168) == 3;\n  if ( !v3 && v2 )\n    return -1;\n  if ( !v2 )\n  {\n    v4 = 1;\n    if ( v3 )\n      return v4;\n  }\n  return strcmp(*(const char **)a2, *(const char **)a1);\n}\n", 
            "funcStartAddr": "0x405750L", 
            "funcEndAddr": "0x4057afL", 
            "funcName": "sub_405750"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4057B0(char a1, __int16 a2, int a3)\n{\n  int v3; // eax\n  bool v4; // cl\n  __int64 result; // rax\n  int v6; // esi\n\n  if ( a1 )\n  {\n    v3 = a2 & 0xF000;\n    if ( v3 == 0x8000 )\n    {\n      result = 0LL;\n      if ( dword_6256D4 == 3 )\n        result = (a2 & 0x49u) >= 1 ? 0x2A : 0;\n      return result;\n    }\n    v4 = v3 == 0x4000;\n  }\n  else\n  {\n    result = 0LL;\n    if ( a3 == 5 )\n      return result;\n    v4 = a3 == 9 || a3 == 3;\n  }\n  result = 47LL;\n  if ( !v4 )\n  {\n    result = 0LL;\n    if ( dword_6256D4 != 1 )\n    {\n      if ( a1 )\n      {\n        v6 = a2 & 0xF000;\n        result = 64LL;\n        if ( v6 != 40960 )\n        {\n          result = 124LL;\n          if ( v6 != 4096 )\n          {\n            LOBYTE(result) = v6 == 49152;\n            return -(int)result & 0x3D;\n          }\n        }\n      }\n      else\n      {\n        result = 64LL;\n        if ( a3 != 6 )\n        {\n          result = 124LL;\n          if ( a3 != 1 )\n          {\n            LOBYTE(result) = a3 == 7;\n            return -(int)result & 0x3D;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4057b0L", 
            "funcEndAddr": "0x405899L", 
            "funcName": "sub_4057B0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_4058A0(char a1, __int16 a2, int a3)\n{\n  unsigned __int8 v3; // bl\n  char *v4; // rax\n\n  v3 = sub_4057B0(a1, a2, a3);\n  if ( v3 )\n  {\n    v4 = stdout->_IO_write_ptr;\n    if ( v4 >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, v3);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v4 + 1;\n      *v4 = v3;\n    }\n    ++qword_6255B8;\n  }\n  return v3 != 0;\n}\n", 
            "funcStartAddr": "0x4058a0L", 
            "funcEndAddr": "0x4058eaL", 
            "funcName": "sub_4058A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4058F0(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a2 + 96);\n    if ( *(_QWORD *)(a1 + 96) <= v5 )\n    {\n      if ( *(_QWORD *)(a1 + 96) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a2 + 104) - *(_DWORD *)(a1 + 104);\n      if ( !result )\n        result = strcmp(*(const char **)a1, *(const char **)a2);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4058f0L", 
            "funcEndAddr": "0x405966L", 
            "funcName": "sub_4058F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405970(__int64 a1, __int64 a2)\n{\n  bool v2; // dl\n  bool v3; // al\n  unsigned int v4; // edx\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    return (unsigned int)-1;\n  if ( !v2 )\n  {\n    v4 = 1;\n    if ( v3 )\n      return v4;\n  }\n  return sub_40BD40(*(char **)a2, *(char **)a1);\n}\n", 
            "funcStartAddr": "0x405970L", 
            "funcEndAddr": "0x4059cfL", 
            "funcName": "sub_405970"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4059D0(__int64 a1, __int64 a2)\n{\n  bool v2; // dl\n  bool v3; // al\n  unsigned int v4; // edx\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    return (unsigned int)-1;\n  if ( !v2 )\n  {\n    v4 = 1;\n    if ( v3 )\n      return v4;\n  }\n  return sub_40BD40(*(char **)a1, *(char **)a2);\n}\n", 
            "funcStartAddr": "0x4059d0L", 
            "funcEndAddr": "0x405a27L", 
            "funcName": "sub_4059D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405A30(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  const char *v5; // r12\n  char *v6; // rax\n  const char *v7; // rbx\n  const char *v8; // rbp\n  char *v9; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    return -1;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(const char **)a2;\n    v6 = strrchr(*(const char **)a2, 46);\n    v7 = *(const char **)a1;\n    v8 = v6;\n    v9 = strrchr(*(const char **)a1, 46);\n    if ( v9 )\n    {\n      if ( !v8 )\n        v8 = \"\";\n    }\n    else\n    {\n      v9 = \"\";\n      if ( !v8 )\n        goto LABEL_11;\n    }\n    result = strcmp(v8, v9);\n    if ( result )\n      return result;\nLABEL_11:\n    result = strcmp(v5, v7);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405a30L", 
            "funcEndAddr": "0x405ae6L", 
            "funcName": "sub_405A30"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405AF0(char a1)\n{\n  int *v1; // rbx\n  int v2; // ebp\n  int result; // eax\n  int *v4; // rbx\n  int v5; // er12\n  int *i; // rbp\n  int v7; // ebp\n  void *v8; // rax\n  void *v9; // [rsp+0h] [rbp-B8h]\n  __m128i v10; // [rsp+8h] [rbp-B0h]\n  __m128i v11; // [rsp+18h] [rbp-A0h]\n  __m128i v12; // [rsp+28h] [rbp-90h]\n  __m128i v13; // [rsp+38h] [rbp-80h]\n  __m128i v14; // [rsp+48h] [rbp-70h]\n  __m128i v15; // [rsp+58h] [rbp-60h]\n  __m128i v16; // [rsp+68h] [rbp-50h]\n  __m128i v17; // [rsp+78h] [rbp-40h]\n  int v18; // [rsp+88h] [rbp-30h]\n\n  if ( !a1 )\n  {\n    v1 = (int *)&unk_419504;\n    v2 = 20;\n    while ( 1 )\n    {\n      result = sigismember(&set, v2);\n      if ( result )\n      {\n        result = (unsigned __int64)signal(v2, 0LL);\n        if ( v1 == (int *)&unk_419530 )\n          return result;\n      }\n      else if ( v1 == (int *)&unk_419530 )\n      {\n        return result;\n      }\n      v2 = *v1;\n      ++v1;\n    }\n  }\n  v4 = (int *)&unk_419504;\n  v5 = 20;\n  sigemptyset(&set);\n  for ( i = (int *)&unk_419504; ; ++i )\n  {\n    sigaction(v5, 0LL, (struct sigaction *)&v9);\n    if ( v9 != (void *)1 )\n      sigaddset(&set, v5);\n    if ( i == (int *)&unk_419530 )\n      break;\n    v5 = *i;\n  }\n  v18 = 0x10000000;\n  v7 = 20;\n  v10 = _mm_load_si128((const __m128i *)&set);\n  v11 = _mm_load_si128((const __m128i *)&set.__val[2]);\n  v12 = _mm_load_si128((const __m128i *)&set.__val[4]);\n  v13 = _mm_load_si128((const __m128i *)&set.__val[6]);\n  v14 = _mm_load_si128((const __m128i *)&set.__val[8]);\n  v15 = _mm_load_si128((const __m128i *)&set.__val[10]);\n  v16 = _mm_load_si128((const __m128i *)&set.__val[12]);\n  v17 = _mm_load_si128((const __m128i *)&set.__val[14]);\n  while ( 1 )\n  {\n    result = sigismember(&set, v7);\n    if ( result )\n    {\n      v8 = sub_404830;\n      if ( v7 == 20 )\n        v8 = sub_405560;\n      v9 = v8;\n      result = sigaction(v7, (const struct sigaction *)&v9, 0LL);\n    }\n    if ( v4 == (int *)&unk_419530 )\n      break;\n    v7 = *v4;\n    ++v4;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405af0L", 
            "funcEndAddr": "0x405c6fL", 
            "funcName": "sub_405AF0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405C70()\n{\n  if ( qword_624448 )\n    return sub_405CD0(&unk_624440, &qword_624448);\n  sub_405CD0(qword_624420, &off_624428);\n  sub_405CD0(&unk_624450, &off_624458);\n  return sub_405CD0(&qword_624430, &off_624438);\n}\n", 
            "funcStartAddr": "0x405c70L", 
            "funcEndAddr": "0x405cc2L", 
            "funcName": "sub_405C70"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_405CD0(size_t *a1, const void **a2)\n{\n  if ( !byte_6256D0 )\n  {\n    byte_6256D0 = 1;\n    if ( tcgetpgrp(1) >= 0 )\n      sub_405AF0(1);\n    sub_405C70();\n  }\n  return fwrite_unlocked(*a2, *a1, 1uLL, stdout);\n}\n", 
            "funcStartAddr": "0x405cd0L", 
            "funcEndAddr": "0x405d39L", 
            "funcName": "sub_405CD0"
        }, 
        {
            "decompiledFuncCode": "size_t sub_405D40()\n{\n  sub_405CD0((size_t *)qword_624420, (const void **)&off_624428);\n  return sub_405CD0((size_t *)&qword_624430, (const void **)&off_624438);\n}\n", 
            "funcStartAddr": "0x405d40L", 
            "funcEndAddr": "0x405d66L", 
            "funcName": "sub_405D40"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405D70()\n{\n  __int64 result; // rax\n  int v1; // ebx\n  __int64 v2; // [rsp-88h] [rbp-88h]\n\n  while ( 1 )\n  {\n    if ( !sig )\n    {\n      result = (unsigned int)dword_6255D4;\n      if ( !dword_6255D4 )\n        break;\n    }\n    if ( byte_6256D0 )\n      sub_405D40();\n    fflush_unlocked(stdout);\n    sigprocmask(0, &set, (sigset_t *)&v2);\n    v1 = sig;\n    if ( dword_6255D4 )\n    {\n      v1 = 19;\n      --dword_6255D4;\n    }\n    else\n    {\n      signal(sig, 0LL);\n    }\n    raise(v1);\n    sigprocmask(2, (const sigset_t *)&v2, 0LL);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405d70L", 
            "funcEndAddr": "0x405e21L", 
            "funcName": "sub_405D70"
        }, 
        {
            "decompiledFuncCode": "void sub_405E30()\n{\n  if ( byte_6256D2 )\n  {\n    if ( sub_404AE0(4u) )\n    {\n      sub_405CD0((size_t *)qword_624420, (const void **)&off_624428);\n      sub_405CD0((size_t *)&unk_624460, (const void **)&unk_624468);\n      sub_405CD0((size_t *)&qword_624430, (const void **)&off_624438);\n    }\n  }\n}\n", 
            "funcStartAddr": "0x405e30L", 
            "funcEndAddr": "0x405e91L", 
            "funcName": "sub_405E30"
        }, 
        {
            "decompiledFuncCode": "size_t __usercall sub_405EA0@<rax>(__int64 a1@<rdx>, int a2@<ecx>, size_t a3@<rbx>, char **a4@<rdi>, char *a5@<rsi>, size_t *a6@<r8>, char *a7@<r9>)\n{\n  char *v7; // r13\n  int v8; // er10\n  unsigned __int64 v9; // rax\n  int v10; // er10\n  size_t v11; // r9\n  size_t v12; // rax\n  size_t v13; // rax\n  const unsigned __int16 **v14; // rax\n  const unsigned __int16 *v15; // rcx\n  char *v16; // rax\n  size_t v17; // rax\n  size_t v18; // r12\n  char *v19; // rbp\n  const unsigned __int16 **v20; // rax\n  char *v21; // rdx\n  char v22; // al\n  char *v24; // r15\n  char *v25; // r14\n  char v26; // al\n  int v27; // eax\n  __int64 v28; // rdx\n  __int64 v29; // rax\n  char v30; // cl\n  __int64 v31; // rdx\n  int v32; // eax\n  __int64 v33; // r14\n  int v34; // [rsp+8h] [rbp-70h]\n  int v35; // [rsp+8h] [rbp-70h]\n  int v36; // [rsp+8h] [rbp-70h]\n  size_t v37; // [rsp+8h] [rbp-70h]\n  __int64 v38; // [rsp+8h] [rbp-70h]\n  unsigned __int64 v39; // [rsp+8h] [rbp-70h]\n  size_t *v40; // [rsp+10h] [rbp-68h]\n  char v41; // [rsp+18h] [rbp-60h]\n  size_t v42; // [rsp+18h] [rbp-60h]\n  int v43; // [rsp+18h] [rbp-60h]\n  char *v44; // [rsp+28h] [rbp-50h]\n  wchar_t c; // [rsp+34h] [rbp-44h]\n  mbstate_t ps; // [rsp+38h] [rbp-40h]\n\n  v7 = *a4;\n  v34 = a2;\n  v40 = a6;\n  v44 = a7;\n  v41 = byte_625698 & ((unsigned int)sub_411C20(a1) <= 2);\n  if ( v41 )\n  {\n    if ( !v34 )\n    {\n      v17 = strlen(a5);\n      a3 = v17;\n      v18 = v17 + 1;\n      if ( v17 > 0x1FFF )\n        v7 = (char *)sub_412980(v17 + 1);\n      memcpy(v7, a5, v18);\n      v41 = 0;\nLABEL_23:\n      v19 = &v7[a3];\n      if ( __ctype_get_mb_cur_max() <= 1 )\n      {\n        if ( v19 > v7 )\n        {\n          v20 = __ctype_b_loc();\n          v21 = v7;\n          do\n          {\n            if ( !((*v20)[(unsigned __int8)*v21] & 0x4000) )\n              *v21 = 63;\n            ++v21;\n          }\n          while ( v21 != v19 );\n        }\n        v11 = a3;\nLABEL_30:\n        v22 = byte_625768;\n        if ( !byte_625768 )\n          goto LABEL_32;\n        goto LABEL_31;\n      }\n      if ( v19 <= v7 )\n      {\n        v11 = 0LL;\n        a3 = 0LL;\n        goto LABEL_30;\n      }\n      v24 = v7;\n      v25 = v7;\n      a3 = 0LL;\nLABEL_41:\n      v26 = *v25;\n      if ( *v25 <= 63 )\n      {\n        if ( v26 >= 37 || (unsigned __int8)(v26 - 32) <= 3u )\n        {\nLABEL_39:\n          *v24 = v26;\n          ++v25;\n          ++a3;\n          ++v24;\n          goto LABEL_40;\n        }\n      }\n      else if ( v26 >= 65 && (v26 <= 95 || (unsigned __int8)(v26 - 97) <= 0x1Du) )\n      {\n        goto LABEL_39;\n      }\n      ps = 0LL;\n      while ( 1 )\n      {\n        v29 = sub_416E80(&c, v25);\n        if ( v29 == -1 )\n        {\n          *v24 = 63;\n          ++v25;\n          ++a3;\n          goto LABEL_61;\n        }\n        if ( v29 == -2 )\n        {\n          *v24 = 63;\n          ++a3;\n          v25 = v19;\nLABEL_61:\n          ++v24;\nLABEL_40:\n          if ( v19 <= v25 )\n          {\n            v11 = v24 - v7;\n            goto LABEL_30;\n          }\n          goto LABEL_41;\n        }\n        v38 = v29;\n        if ( v29 )\n        {\n          v27 = wcwidth(c);\n          v28 = (__int64)&v25[v38];\n          if ( v27 >= 0 )\n          {\n            v31 = 0LL;\n            do\n            {\n              v24[v31] = v25[v31];\n              ++v31;\n            }\n            while ( v38 != v31 );\n            v25 += v38;\n            v24 += v38;\n            goto LABEL_54;\n          }\n        }\n        else\n        {\n          v27 = wcwidth(c);\n          v28 = (__int64)(v25 + 1);\n          if ( v27 >= 0 )\n          {\n            v30 = *v25++;\n            *v24++ = v30;\nLABEL_54:\n            a3 += v27;\n            goto LABEL_48;\n          }\n        }\n        *v24 = 63;\n        ++a3;\n        ++v24;\n        v25 = (char *)v28;\nLABEL_48:\n        if ( mbsinit(&ps) )\n          goto LABEL_40;\n      }\n    }\n    v8 = 1;\n  }\n  else\n  {\n    v8 = 0;\n    if ( !v34 )\n    {\n      v7 = a5;\n      v11 = strlen(a5);\n      goto LABEL_10;\n    }\n  }\n  v35 = v8;\n  v9 = sub_411CD0((__int64)v7, 0x2000LL, a5);\n  v10 = v35;\n  v11 = v9;\n  if ( v9 > 0x1FFF )\n  {\n    v33 = v9 + 1;\n    v43 = v35;\n    v39 = v9;\n    v7 = (char *)sub_412980(v9 + 1);\n    sub_411CD0((__int64)v7, v33, a5);\n    v10 = v43;\n    v11 = v39;\n  }\n  v41 = 1;\n  if ( *a5 == *v7 )\n  {\n    v42 = v11;\n    v36 = v10;\n    v12 = strlen(a5);\n    v11 = v42;\n    v10 = v36;\n    v41 = v42 != v12;\n  }\n  if ( v10 )\n  {\n    a3 = v11;\n    goto LABEL_23;\n  }\nLABEL_10:\n  if ( v40 )\n  {\n    v37 = v11;\n    v13 = __ctype_get_mb_cur_max();\n    v11 = v37;\n    if ( v13 > 1 )\n    {\n      v32 = sub_40E9B0(v7);\n      v11 = v37;\n      a3 = v32;\n    }\n    else if ( &v7[v37] <= v7 )\n    {\n      a3 = 0LL;\n    }\n    else\n    {\n      a3 = 0LL;\n      v14 = __ctype_b_loc();\n      v11 = v37;\n      v15 = *v14;\n      v16 = v7;\n      do\n        a3 -= ((v15[(unsigned __int8)*v16++] & 0x4000u) < 1) - 1LL;\n      while ( &v7[v37] != v16 );\n    }\n    if ( !byte_625768 )\n    {\n      *v44 = 0;\nLABEL_33:\n      *v40 = a3;\n      goto LABEL_34;\n    }\n  }\n  else if ( !byte_625768 )\n  {\n    *v44 = 0;\n    goto LABEL_34;\n  }\nLABEL_31:\n  v22 = (v41 | byte_625769 ^ 1) ^ 1;\nLABEL_32:\n  *v44 = v22;\n  if ( v40 )\n    goto LABEL_33;\nLABEL_34:\n  *a4 = v7;\n  return v11;\n}\n", 
            "funcStartAddr": "0x405ea0L", 
            "funcEndAddr": "0x4062c9L", 
            "funcName": "sub_405EA0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_4062D0(char *a1, __int64 a2, int a3, __int64 a4, char a5, size_t a6, const char *a7)\n{\n  char v7; // r15\n  __int64 v8; // r12\n  size_t v9; // rbx\n  size_t v10; // rbp\n  char v11; // r12\n  __int64 v12; // r10\n  __int64 v13; // r9\n  void *v14; // r15\n  void *v15; // r9\n  size_t v16; // r10\n  _QWORD *v17; // rdx\n  __int64 v18; // rax\n  __int64 *v19; // rcx\n  unsigned __int8 v20; // dl\n  char *v21; // rax\n  unsigned __int8 v23; // dl\n  char *v24; // rax\n  char *v25; // rax\n  void *ptr; // [rsp+8h] [rbp-2060h]\n  void *ptra; // [rsp+8h] [rbp-2060h]\n  __int64 v28; // [rsp+10h] [rbp-2058h]\n  size_t v29; // [rsp+10h] [rbp-2058h]\n  size_t n; // [rsp+18h] [rbp-2050h]\n  unsigned __int8 v31; // [rsp+27h] [rbp-2041h]\n  void *v32; // [rsp+28h] [rbp-2040h]\n  char v33; // [rsp+30h] [rbp-2038h]\n\n  v7 = a5;\n  v8 = a4;\n  v9 = a6;\n  v32 = &v33;\n  v10 = sub_405EA0(a2, a3, a6, (char **)&v32, a1, 0LL, (char *)&v31);\n  if ( v31 && v7 )\n  {\n    v25 = stdout->_IO_write_ptr;\n    if ( v25 >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, 32);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v25 + 1;\n      *v25 = 32;\n    }\n    ++qword_6255B8;\n  }\n  if ( v8 )\n  {\n    if ( sub_404AE0(4u) )\n      sub_405D40();\n    sub_405CD0((size_t *)qword_624420, (const void **)&off_624428);\n    sub_405CD0((size_t *)v8, (const void **)(v8 + 8));\n    sub_405CD0((size_t *)&qword_624430, (const void **)&off_624438);\n  }\n  if ( a7 )\n  {\n    v11 = byte_625768;\n    if ( byte_625768 && (v11 = byte_625769) != 0 )\n    {\n      if ( v31 )\n      {\n        v12 = v10;\n        v13 = 0LL;\n        v11 = 0;\n      }\n      else\n      {\n        v12 = v10 - 2;\n        v23 = *(_BYTE *)v32;\n        v24 = stdout->_IO_write_ptr;\n        if ( v24 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v23);\n          v13 = 1LL;\n          v12 = v10 - 2;\n        }\n        else\n        {\n          v13 = 1LL;\n          stdout->_IO_write_ptr = v24 + 1;\n          *v24 = v23;\n        }\n      }\n    }\n    else\n    {\n      v12 = v10;\n      v13 = 0LL;\n    }\n    n = v12;\n    v28 = v13;\n    v14 = (void *)sub_404E80((const char *)qword_625748, 0LL);\n    ptr = (void *)sub_404E80(a7, 1LL);\n    __printf_chk(1LL, \"\\x1B]8;;file://%s%s%s\\a\", v14);\n    free(v14);\n    free(ptr);\n    v15 = (void *)v28;\n    v16 = n;\n    if ( v9 )\n      goto LABEL_11;\nLABEL_35:\n    fwrite_unlocked((char *)v32 + (_QWORD)v15, 1uLL, v16, stdout);\n    qword_6255B8 += v10;\n    goto LABEL_19;\n  }\n  v16 = v10;\n  v15 = 0LL;\n  v11 = 0;\n  if ( !v9 )\n    goto LABEL_35;\nLABEL_11:\n  if ( byte_6256D8 )\n  {\n    v17 = *(_QWORD **)(v9 + 24);\n    if ( *(_QWORD *)(v9 + 32) - (_QWORD)v17 <= 7uLL )\n    {\n      v29 = v16;\n      ptra = v15;\n      obstack_newchunk(v9, 8LL);\n      v17 = *(_QWORD **)(v9 + 24);\n      v16 = v29;\n      v15 = ptra;\n    }\n    *v17 = qword_6255B8;\n    *(_QWORD *)(v9 + 24) += 8LL;\n  }\n  fwrite_unlocked((char *)v32 + (_QWORD)v15, 1uLL, v16, stdout);\n  v18 = v10 + qword_6255B8;\n  qword_6255B8 += v10;\n  if ( byte_6256D8 )\n  {\n    v19 = *(__int64 **)(v9 + 24);\n    if ( *(_QWORD *)(v9 + 32) - (_QWORD)v19 <= 7uLL )\n    {\n      obstack_newchunk(v9, 8LL);\n      v19 = *(__int64 **)(v9 + 24);\n      v18 = qword_6255B8;\n    }\n    *v19 = v18;\n    *(_QWORD *)(v9 + 24) += 8LL;\n  }\nLABEL_19:\n  if ( a7 )\n  {\n    fwrite_unlocked(\"\\x1B]8;;\\a\", 1uLL, 6uLL, stdout);\n    if ( v11 )\n    {\n      v20 = *((char *)v32 + v10 - 1);\n      v21 = stdout->_IO_write_ptr;\n      if ( v21 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, v20);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v21 + 1;\n        *v21 = v20;\n      }\n    }\n  }\n  if ( v32 != &v33 && v32 != a1 )\n    free(v32);\n  return v10 + v31;\n}\n", 
            "funcStartAddr": "0x4062d0L", 
            "funcEndAddr": "0x406687L", 
            "funcName": "sub_4062D0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_406690(__int64 a1, char a2, size_t a3, unsigned __int64 a4)\n{\n  unsigned __int64 v4; // r13\n  size_t v5; // r12\n  char *v6; // rbp\n  size_t v7; // rbx\n  int v9; // er8\n  bool v10; // al\n  int v11; // edx\n  __int64 v12; // rcx\n  char v13; // cl\n  __int64 v14; // rax\n  __int64 v15; // rcx\n  int v16; // eax\n  size_t v17; // rax\n  __int64 v18; // rbx\n  size_t v19; // rcx\n  int v20; // eax\n  char v21; // r8\n  bool v22; // al\n  __int64 v23; // rcx\n  bool v24; // al\n  size_t v25; // [rsp+8h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  if ( !a2 )\n  {\n    v6 = *(char **)a1;\n    if ( !byte_6256D2 )\n      goto LABEL_3;\n    v11 = *(unsigned __int8 *)(a1 + 185);\n    if ( byte_625750 && (_BYTE)v11 )\n      v9 = *(_DWORD *)(a1 + 172);\n    else\n      v9 = *(_DWORD *)(a1 + 48);\n    goto LABEL_11;\n  }\n  v6 = *(char **)(a1 + 8);\n  if ( !byte_6256D2 )\n  {\nLABEL_3:\n    v7 = sub_4062D0(v6, qword_625690, *(_DWORD *)(a1 + 196), 0LL, a2 ^ 1u, v5, *(const char **)(a1 + 16));\n    sub_405D70();\n    return v7;\n  }\n  v9 = *(_DWORD *)(a1 + 172);\n  if ( !*(_BYTE *)(a1 + 185) )\n  {\n    v10 = sub_404AE0(0xCu);\n    v11 = -1;\n    if ( v10 )\n    {\n      v12 = 192LL;\nLABEL_17:\n      v15 = v12 + 6439968;\n      goto LABEL_18;\n    }\nLABEL_11:\n    v13 = *(_BYTE *)(a1 + 184);\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_25;\n  }\n  v13 = *(_BYTE *)(a1 + 184);\n  v11 = 0;\n  if ( !v13 )\n  {\nLABEL_12:\n    v14 = (unsigned int)dword_419540[*(unsigned int *)(a1 + 168)];\n    v13 = (_DWORD)v14 == 7;\n    if ( (_DWORD)v14 != 5 )\n    {\nLABEL_13:\n      if ( v11 || !v13 )\n      {\n        v12 = 16 * v14;\n      }\n      else\n      {\n        v12 = 208LL;\n        if ( !byte_625750 )\n          v12 = (-(__int64)((unsigned __int8)sub_404AE0(0xDu) < 1u) & 0xFFFFFFFFFFFFFFA0LL) + 208;\n      }\n      goto LABEL_17;\n    }\n    goto LABEL_36;\n  }\nLABEL_25:\n  v16 = v9 & 0xF000;\n  if ( v16 != 0x8000 )\n  {\n    if ( v16 == 0x4000 )\n    {\n      if ( (v9 & 0x202) != 514 || (v24 = sub_404AE0(0x14u), v12 = 320LL, !v24) )\n      {\n        if ( !(v9 & 2) || (v22 = sub_404AE0(0x13u), v12 = 304LL, !v22) )\n        {\n          v12 = 96LL;\n          if ( v9 & 0x200 )\n          {\n            v23 = -(__int64)((unsigned __int8)sub_404AE0(0x12u) < 1u);\n            LOBYTE(v23) = v23 & 0x40;\n            v12 = v23 + 288;\n          }\n        }\n      }\n      goto LABEL_17;\n    }\n    if ( v16 != 40960 )\n    {\n      v12 = 128LL;\n      if ( v16 != 4096 )\n      {\n        v12 = 144LL;\n        if ( v16 != 49152 )\n        {\n          v12 = 160LL;\n          if ( v16 != 24576 )\n          {\n            v12 = 176LL;\n            if ( v16 != 0x2000 )\n              v12 = 208LL;\n          }\n        }\n      }\n      goto LABEL_17;\n    }\n    v14 = 7LL;\n    goto LABEL_13;\n  }\n  if ( v9 & 0x800 && sub_404AE0(0x10u) )\n  {\n    v12 = 256LL;\n    goto LABEL_17;\n  }\n  if ( v9 & 0x400 && sub_404AE0(0x11u) )\n  {\n    v12 = 272LL;\n    goto LABEL_17;\n  }\n  if ( sub_404AE0(0x15u) && *(_BYTE *)(a1 + 192) )\n  {\n    v12 = 336LL;\n    goto LABEL_17;\n  }\n  if ( v21 & 0x49 && sub_404AE0(0xEu) )\n  {\n    v12 = 224LL;\n    goto LABEL_17;\n  }\n  if ( *(_QWORD *)(a1 + 40) > 1uLL && sub_404AE0(0x16u) )\n  {\n    v12 = 352LL;\n    goto LABEL_17;\n  }\nLABEL_36:\n  v17 = strlen(v6);\n  v18 = qword_6256C8;\n  v19 = v17;\n  if ( !qword_6256C8 )\n  {\nLABEL_40:\n    v12 = 80LL;\n    goto LABEL_17;\n  }\n  while ( 1 )\n  {\n    if ( v19 >= *(_QWORD *)v18 )\n    {\n      v25 = v19;\n      v20 = strncmp(&v6[v19 - *(_QWORD *)v18], *(const char **)(v18 + 8), *(_QWORD *)v18);\n      v19 = v25;\n      if ( !v20 )\n        break;\n    }\n    v18 = *(_QWORD *)(v18 + 32);\n    if ( !v18 )\n      goto LABEL_40;\n  }\n  v15 = v18 + 16;\nLABEL_18:\n  if ( !*(_QWORD *)(v15 + 8) )\n  {\n    if ( !sub_404AE0(4u) )\n      goto LABEL_3;\n    v15 = 0LL;\n  }\n  v7 = sub_4062D0(v6, qword_625690, *(_DWORD *)(a1 + 196), v15, a2 ^ 1u, v5, *(const char **)(a1 + 16));\n  sub_405D70();\n  sub_405C70();\n  if ( qword_625670 && v4 / qword_625670 != (v7 + v4 - 1) / qword_625670 )\n    sub_405CD0((size_t *)&unk_624590, (const void **)&off_624598);\n  return v7;\n}\n", 
            "funcStartAddr": "0x406690L", 
            "funcEndAddr": "0x406ae8L", 
            "funcName": "sub_406690"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_406AF0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rdx\n  __int64 v4; // rdi\n  __int64 v5; // rdx\n  __int64 v6; // rdx\n  __int64 v7; // rdx\n  size_t v8; // rbp\n  size_t result; // rax\n  __int64 v10; // [rsp+0h] [rbp-2A8h]\n\n  v2 = a1;\n  sub_405E30();\n  if ( byte_6256BC )\n  {\n    if ( *(_BYTE *)(a1 + 184) )\n    {\n      v4 = *(_QWORD *)(a1 + 32);\n      if ( v4 )\n        sub_40E520(v4, &v10, v3, \"?\");\n    }\n    v5 = 0LL;\n    if ( dword_6256F8 != 4 )\n      v5 = (unsigned int)dword_625720;\n    __printf_chk(1LL, \"%*s \", v5);\n  }\n  if ( byte_6256EC )\n  {\n    if ( *(_BYTE *)(v2 + 184) )\n      sub_40D5D0(*(_QWORD *)(v2 + 88), &v10, (unsigned int)dword_6256E8, 512LL, qword_6256E0);\n    v6 = 0LL;\n    if ( dword_6256F8 != 4 )\n      v6 = (unsigned int)dword_62571C;\n    __printf_chk(1LL, \"%*s \", v6);\n  }\n  if ( byte_625725 )\n  {\n    v7 = 0LL;\n    if ( dword_6256F8 != 4 )\n      v7 = (unsigned int)dword_625714;\n    __printf_chk(1LL, \"%*s \", v7);\n  }\n  v8 = sub_406690(v2, 0, 0LL, a2);\n  if ( dword_6256D4 )\n    result = sub_4058A0(*(_BYTE *)(v2 + 184), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 168)) + v8;\n  else\n    result = v8;\n  return result;\n}\n", 
            "funcStartAddr": "0x406af0L", 
            "funcEndAddr": "0x406c60L", 
            "funcName": "sub_406AF0"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_406C60(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbp\n  int v5; // eax\n  __int64 v6; // rax\n  __int64 v7; // rdx\n  char *v8; // rbx\n  char *v9; // r15\n  int v10; // er14\n  int v11; // eax\n  unsigned int v12; // eax\n  unsigned int v13; // edx\n  char *v14; // rax\n  char v15; // al\n  __int64 v16; // rcx\n  char *v17; // rbx\n  char *v18; // r14\n  int v19; // er13\n  int v20; // eax\n  unsigned int v21; // eax\n  unsigned int v22; // edx\n  __int64 v23; // rcx\n  char *v24; // rax\n  char v25; // al\n  __int64 v26; // r8\n  __int64 v27; // r13\n  unsigned __int64 v28; // r13\n  size_t v29; // rax\n  int v30; // edx\n  size_t v31; // r12\n  __int64 v32; // rax\n  int v33; // eax\n  __int64 v34; // rax\n  __int64 v35; // rdi\n  char *v36; // rbx\n  int v37; // eax\n  unsigned int v38; // edx\n  bool v39; // cf\n  __time_t v40; // rdx\n  __time_t v41; // rcx\n  int v42; // esi\n  __int64 v43; // r9\n  int v44; // edi\n  int v45; // eax\n  __int64 v46; // rax\n  char *v47; // rdx\n  __int64 v48; // rax\n  __int64 v49; // rdx\n  char *v50; // rdi\n  __int64 v51; // rsi\n  __int64 v52; // rax\n  __time_t v53; // rdi\n  int v54; // er13\n  unsigned __int64 v55; // rax\n  unsigned int v56; // edi\n  __int64 v57; // rcx\n  int v58; // er8\n  char *v59; // rdx\n  unsigned int v60; // eax\n  unsigned int v62; // [rsp+4h] [rbp-1344h]\n  __int64 v63; // [rsp+8h] [rbp-1340h]\n  __int64 v64; // [rsp+18h] [rbp-1330h]\n  char v65; // [rsp+24h] [rbp-1324h]\n  __int64 v66; // [rsp+25h] [rbp-1323h]\n  char v67; // [rsp+2Eh] [rbp-131Ah]\n  __time_t v68; // [rsp+30h] [rbp-1318h]\n  __int64 v69; // [rsp+38h] [rbp-1310h]\n  char v70; // [rsp+40h] [rbp-1308h]\n  char v71; // [rsp+60h] [rbp-12E8h]\n  int v72; // [rsp+70h] [rbp-12D8h]\n  char v73; // [rsp+A0h] [rbp-12A8h]\n  int v74; // [rsp+B0h] [rbp-1298h]\n  char v75; // [rsp+E0h] [rbp-1268h]\n  char s; // [rsp+4D0h] [rbp-E78h]\n\n  v4 = a1;\n  if ( *(_BYTE *)(a1 + 184) )\n  {\n    sub_40BB60(a1 + 24, &v65);\n  }\n  else\n  {\n    v65 = byte_419FC8[*(unsigned int *)(a1 + 168)];\n    strcpy((char *)&v66, \"??????????\");\n  }\n  if ( !byte_625724 )\n  {\n    v67 = 0;\n    goto LABEL_5;\n  }\n  v33 = *(_DWORD *)(a1 + 188);\n  if ( v33 == 1 )\n  {\n    v67 = 46;\nLABEL_5:\n    v5 = dword_6256F4;\n    if ( dword_6256F4 != 1 )\n      goto LABEL_6;\nLABEL_54:\n    v34 = *(_QWORD *)(a1 + 136);\n    v68 = *(_QWORD *)(a1 + 128);\n    v7 = *(unsigned __int8 *)(a1 + 184);\n    v69 = v34;\n    if ( !byte_6256BC )\n      goto LABEL_8;\n    goto LABEL_57;\n  }\n  if ( v33 != 2 )\n    goto LABEL_5;\n  v5 = dword_6256F4;\n  v67 = 43;\n  if ( dword_6256F4 == 1 )\n    goto LABEL_54;\nLABEL_6:\n  if ( v5 )\n  {\n    if ( v5 != 2 )\n      abort();\n    v32 = *(_QWORD *)(a1 + 104);\n    v68 = *(_QWORD *)(a1 + 96);\n    v7 = *(unsigned __int8 *)(a1 + 184);\n    v69 = v32;\n    if ( !byte_6256BC )\n      goto LABEL_8;\n  }\n  else\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v68 = *(_QWORD *)(a1 + 112);\n    v7 = *(unsigned __int8 *)(a1 + 184);\n    v69 = v6;\n    if ( !byte_6256BC )\n    {\nLABEL_8:\n      v8 = &s;\n      goto LABEL_9;\n    }\n  }\nLABEL_57:\n  if ( (_BYTE)v7 )\n  {\n    v35 = *(_QWORD *)(a1 + 32);\n    if ( v35 )\n      sub_40E520(v35, &v75, v7, a4);\n  }\n  v36 = &s;\n  __sprintf_chk(&s, 1LL, 3643LL, \"%*s \", (unsigned int)dword_625720);\n  do\n  {\n    v37 = *(_DWORD *)v36;\n    v36 += 4;\n    v38 = ~v37 & (v37 - 16843009) & 0x80808080;\n  }\n  while ( !v38 );\n  if ( !(~v37 & (v37 - 16843009) & 0x8080) )\n    LOBYTE(v38) = (~v37 & (v37 - 16843009) & 0x80808080) >> 16;\n  if ( !(~v37 & (v37 - 16843009) & 0x8080) )\n    v36 += 2;\n  v39 = __CFADD__((_BYTE)v38, (_BYTE)v38);\n  v7 = *(unsigned __int8 *)(v4 + 184);\n  v8 = &v36[-v39 - 3];\nLABEL_9:\n  if ( byte_6256EC )\n  {\n    v9 = \"?\";\n    if ( (_BYTE)v7 )\n      v9 = (char *)sub_40D5D0(*(_QWORD *)(v4 + 88), &v75, (unsigned int)dword_6256E8, 512LL, qword_6256E0);\n    v10 = dword_62571C;\n    v11 = v10 - (unsigned __int64)sub_40EB70(v9);\n    if ( v11 > 0 )\n    {\n      v12 = v11 - 1;\n      v13 = v12;\n      a4 = (__int64)&v8[v12 + 1];\n      v14 = v8;\n      do\n        *(++v14 - 1) = 32;\n      while ( v14 != (char *)a4 );\n      v8 += (int)v13 + 1;\n    }\n    do\n    {\n      v15 = *(++v9 - 1);\n      *(++v8 - 1) = v15;\n    }\n    while ( v15 );\n    *(v8 - 1) = 32;\n    v7 = *(unsigned __int8 *)(v4 + 184);\n  }\n  if ( (_BYTE)v7 )\n    sub_40E520(*(_QWORD *)(v4 + 40), &v75, v7, a4);\n  __sprintf_chk(v8, 1LL, -1LL, \"%s %*s \", &v65);\n  v17 = &v8[strlen(v8)];\n  if ( byte_6256D8 )\n  {\n    fwrite_unlocked(\"  \", 1uLL, 2uLL, stdout);\n    qword_6255B8 += 2LL;\n  }\n  if ( byte_6245A9 || byte_6245A8 || byte_6256EE || byte_625725 )\n  {\n    fputs_unlocked(&s, stdout);\n    qword_6255B8 += v17 - &s;\n    if ( byte_6245A9 )\n      sub_405520(*(_DWORD *)(v4 + 52), dword_625710, *(_BYTE *)(v4 + 184));\n    if ( byte_6245A8 )\n    {\n      v49 = (unsigned int)dword_62570C;\n      v50 = \"?\";\n      v51 = *(unsigned int *)(v4 + 56);\n      if ( *(_BYTE *)(v4 + 184) )\n      {\n        v50 = 0LL;\n        if ( !byte_6256ED )\n        {\n          v63 = *(unsigned int *)(v4 + 56);\n          v62 = dword_62570C;\n          v52 = sub_40E2F0((unsigned int)v51);\n          v51 = v63;\n          v49 = v62;\n          v50 = (char *)v52;\n        }\n      }\n      sub_405460(v50, v51, v49);\n    }\n    if ( byte_6256EE )\n      sub_405520(*(_DWORD *)(v4 + 52), dword_625708, *(_BYTE *)(v4 + 184));\n    v17 = &s;\n    if ( byte_625725 )\n      sub_405460(*(char **)(v4 + 176), 0LL, (unsigned int)dword_625714);\n  }\n  if ( !*(_BYTE *)(v4 + 184) )\n  {\n    v18 = \"?\";\n    goto LABEL_35;\n  }\n  if ( (*(_DWORD *)(v4 + 48) & 0xB000) != 0x2000 )\n  {\n    v18 = (char *)sub_40D5D0(*(_QWORD *)(v4 + 72), &v75, (unsigned int)dword_6256DC, 1LL, qword_6245A0);\nLABEL_35:\n    v19 = dword_6256FC;\n    v20 = v19 - (unsigned __int64)sub_40EB70(v18);\n    if ( v20 > 0 )\n    {\n      v21 = v20 - 1;\n      v22 = v21;\n      v23 = (__int64)&v17[v21 + 1];\n      v24 = v17;\n      do\n        *(++v24 - 1) = 32;\n      while ( v24 != (char *)v23 );\n      v17 += (int)v22 + 1;\n    }\n    do\n    {\n      v25 = *(++v18 - 1);\n      *(++v17 - 1) = v25;\n    }\n    while ( v25 );\n    *(v17 - 1) = 32;\n    goto LABEL_41;\n  }\n  v54 = dword_6256FC - (dword_625704 + dword_625700 + 2);\n  v55 = *(_QWORD *)(v4 + 64);\n  v56 = v55 >> 12;\n  LOBYTE(v56) = 0;\n  sub_40E520((unsigned __int8)v55 | v56, &v75, (unsigned __int8)v55, v16);\n  sub_40E520(\n    ((unsigned int)*(_QWORD *)(v4 + 64) >> 8) & 0xFFF | (*(_QWORD *)(v4 + 64) >> 32) & 0xFFFFF000,\n    &v73,\n    ((unsigned int)*(_QWORD *)(v4 + 64) >> 8) & 0xFFF,\n    v57);\n  v58 = 0;\n  if ( v54 >= 0 )\n    v58 = v54;\n  __sprintf_chk(v17, 1LL, -1LL, &unk_41B096, (unsigned int)(dword_625704 + v58));\n  v17 += dword_6256FC + 1;\nLABEL_41:\n  *v17 = 1;\n  if ( !*(_BYTE *)(v4 + 184) )\n    goto LABEL_42;\n  if ( !sub_4176F0(qword_625668, &v68, &v71) )\n    goto LABEL_81;\n  v40 = tp.tv_sec;\n  v41 = v68;\n  v42 = tp.tv_nsec;\n  v43 = v69;\n  if ( tp.tv_sec < v68 )\n    goto LABEL_110;\n  if ( tp.tv_sec <= v68 )\n  {\n    v44 = tp.tv_nsec;\n    v45 = v69;\n    if ( LODWORD(tp.tv_nsec) - (int)v69 >= 0 )\n    {\n      if ( tp.tv_sec - 15778476 >= v68 )\n      {\n        v46 = 0LL;\n        goto LABEL_77;\n      }\nLABEL_96:\n      v46 = (unsigned int)(v45 - v44) >> 31;\n      goto LABEL_77;\n    }\nLABEL_110:\n    sub_40C150(&tp);\n    v41 = v68;\n    v43 = v69;\n    v40 = tp.tv_sec;\n    v42 = tp.tv_nsec;\n    v53 = tp.tv_sec - 15778476;\n    if ( tp.tv_sec - 15778476 < v68 )\n      goto LABEL_93;\n    goto LABEL_91;\n  }\n  v53 = tp.tv_sec - 15778476;\n  if ( tp.tv_sec - 15778476 < v68 )\n    goto LABEL_113;\nLABEL_91:\n  v46 = 0LL;\n  if ( v53 > v41 || v42 - (int)v43 >= 0 )\n    goto LABEL_77;\nLABEL_93:\n  if ( v41 >= v40 )\n  {\n    v46 = 0LL;\n    if ( v41 > v40 )\n      goto LABEL_77;\n    v45 = v43;\n    v44 = v42;\n    goto LABEL_96;\n  }\nLABEL_113:\n  v46 = 1LL;\nLABEL_77:\n  if ( byte_624788 )\n    v47 = (char *)(((v72 + 12 * v46) << 7) + 6440864);\n  else\n    v47 = (&off_624410)[v46];\n  v48 = sub_410650(v17, 1001LL, v47, &v71, qword_625668, v43);\n  if ( v48 )\n  {\n    v17 += v48;\n    goto LABEL_82;\n  }\nLABEL_81:\n  if ( *v17 )\n  {\n    if ( *(_BYTE *)(v4 + 184) )\n    {\n      sub_40E480(v68, &v70);\n      v26 = (unsigned int)dword_624404;\n      if ( dword_624404 >= 0 )\n        goto LABEL_43;\n      goto LABEL_102;\n    }\nLABEL_42:\n    v26 = (unsigned int)dword_624404;\n    if ( dword_624404 >= 0 )\n    {\nLABEL_43:\n      __sprintf_chk(v17, 1LL, -1LL, \"%*s \", v26);\n      v27 = (__int64)&v17[strlen(v17)];\n      goto LABEL_44;\n    }\nLABEL_102:\n    v64 = 0LL;\n    if ( !sub_4176F0(qword_625668, &v64, &v73) )\n      goto LABEL_119;\n    v59 = off_624410;\n    if ( byte_624788 )\n      v59 = (char *)(((__int64)v74 << 7) + 6440864);\n    if ( sub_410650(&v75, 1001LL, v59, &v73, qword_625668, 0LL) )\n    {\n      v60 = sub_40E9B0(&v75);\n      v26 = v60;\n      dword_624404 = v60;\n    }\n    else\n    {\nLABEL_119:\n      v26 = (unsigned int)dword_624404;\n    }\n    if ( (int)v26 < 0 )\n    {\n      dword_624404 = 0;\n      v26 = 0LL;\n    }\n    goto LABEL_43;\n  }\nLABEL_82:\n  v27 = (__int64)(v17 + 1);\n  *(_WORD *)v17 = 32;\nLABEL_44:\n  v28 = v27 - (_QWORD)&s;\n  fputs_unlocked(&s, stdout);\n  qword_6255B8 += v28;\n  v29 = sub_406690(v4, 0, (size_t)&unk_625560, v28);\n  v30 = *(_DWORD *)(v4 + 168);\n  v31 = v29;\n  if ( v30 == 6 )\n  {\n    if ( *(_QWORD *)(v4 + 8) )\n    {\n      fwrite_unlocked(\" -> \", 1uLL, 4uLL, stdout);\n      qword_6255B8 += 4LL;\n      LOBYTE(v29) = sub_406690(v4, 1, 0LL, v28 + v31 + 4);\n      if ( dword_6256D4 )\n        LOBYTE(v29) = sub_4058A0(1, *(_DWORD *)(v4 + 172), 0);\n    }\n  }\n  else\n  {\n    LOBYTE(v29) = dword_6256D4;\n    if ( dword_6256D4 )\n      LOBYTE(v29) = sub_4058A0(*(_BYTE *)(v4 + 184), *(_DWORD *)(v4 + 48), v30);\n  }\n  return v29;\n}\n", 
            "funcStartAddr": "0x406c60L", 
            "funcEndAddr": "0x407622L", 
            "funcName": "sub_406C60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407630(char *a1, __int64 a2, int a3)\n{\n  unsigned __int8 v4; // [rsp+Fh] [rbp-2029h]\n  void *ptr; // [rsp+10h] [rbp-2028h]\n  __int64 v6; // [rsp+18h] [rbp-2020h]\n  char v7; // [rsp+20h] [rbp-2018h]\n\n  ptr = &v7;\n  sub_405EA0(a2, a3, (size_t)&v7, (char **)&ptr, a1, (size_t *)&v6, (char *)&v4);\n  if ( ptr != &v7 && ptr != a1 )\n    free(ptr);\n  return v6 + v4;\n}\n", 
            "funcStartAddr": "0x407630L", 
            "funcEndAddr": "0x40768aL", 
            "funcName": "sub_407630"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407690(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rax\n  __int64 v7; // rbx\n  const char *v9; // rax\n  const char *v10; // rax\n  __int64 v11; // [rsp+0h] [rbp-2A8h]\n\n  if ( !byte_6256BC )\n  {\n    v4 = 0LL;\n    goto LABEL_14;\n  }\n  if ( dword_6256F8 == 4 )\n  {\n    v10 = (const char *)sub_40E520(*(_QWORD *)(a1 + 32), &v11, a3, a4);\n    v4 = strlen(v10) + 1;\nLABEL_14:\n    if ( !byte_6256EC )\n    {\nLABEL_6:\n      if ( !byte_625725 )\n        goto LABEL_10;\n      if ( dword_6256F8 == 4 )\n      {\n        v6 = strlen(*(const char **)(a1 + 176)) + 1;\n        goto LABEL_9;\n      }\nLABEL_8:\n      v6 = dword_625714 + 1LL;\nLABEL_9:\n      v4 += v6;\n      goto LABEL_10;\n    }\n    if ( dword_6256F8 == 4 )\n    {\n      v5 = 2LL;\n      if ( *(_BYTE *)(a1 + 184) )\n      {\n        v9 = (const char *)sub_40D5D0(*(_QWORD *)(a1 + 88), &v11, (unsigned int)dword_6256E8, 512LL, qword_6256E0);\n        v5 = strlen(v9) + 1;\n      }\n      goto LABEL_5;\n    }\nLABEL_4:\n    v5 = dword_62571C + 1LL;\nLABEL_5:\n    v4 += v5;\n    goto LABEL_6;\n  }\n  v4 = dword_625720 + 1LL;\n  if ( byte_6256EC )\n    goto LABEL_4;\n  if ( byte_625725 )\n    goto LABEL_8;\nLABEL_10:\n  v7 = sub_407630(*(char **)a1, qword_625690, *(_DWORD *)(a1 + 196)) + v4;\n  if ( dword_6256D4 )\n    v7 += (unsigned __int8)sub_4057B0(*(_BYTE *)(a1 + 184), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 168)) != 0;\n  return v7;\n}\n", 
            "funcStartAddr": "0x407690L", 
            "funcEndAddr": "0x4077fdL", 
            "funcName": "sub_407690"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407800(char a1, unsigned __int64 a2, __int64 a3)\n{\n  char v3; // r12\n  __int64 v4; // r9\n  __int64 v5; // rcx\n  unsigned __int64 v6; // rbx\n  unsigned __int64 v7; // rdi\n  unsigned __int64 v8; // rdx\n  __int64 v9; // rax\n  unsigned __int64 v10; // rbp\n  __int64 v11; // rcx\n  unsigned __int64 v12; // rdi\n  __int64 v13; // rax\n  __int64 v14; // rdi\n  __int64 v15; // rdi\n  _QWORD *v16; // rax\n  unsigned __int64 v17; // rbp\n  __int64 v18; // rax\n  unsigned __int64 v19; // r10\n  __int64 v20; // r9\n  unsigned __int64 v21; // r11\n  __int64 v22; // rdi\n  unsigned __int64 v23; // r13\n  unsigned __int64 v24; // rax\n  __int64 *v25; // rsi\n  unsigned __int64 v26; // r8\n  __int64 v27; // rax\n\n  v3 = a1;\n  v4 = qword_625770;\n  v5 = qword_6255C0;\n  v6 = qword_6255C0;\n  if ( qword_625770 <= (unsigned __int64)qword_6255C0 )\n    v6 = qword_625770;\n  if ( v6 > qword_6246A0 )\n  {\n    v7 = qword_6255C8;\n    if ( v6 < (unsigned __int64)qword_6255C0 >> 1 )\n    {\n      v8 = (v6 * (unsigned __int128)0x30uLL) >> 64 != 0;\n      if ( ((48 * v6) & 0x8000000000000000LL) != 0LL || (v6 * (unsigned __int128)0x30uLL) >> 64 != 0 )\n        goto LABEL_43;\n      v10 = 2 * v6;\n      qword_6255C8 = sub_4129E0(qword_6255C8, 48 * v6);\n    }\n    else\n    {\n      v8 = ((unsigned __int64)qword_6255C0 * (unsigned __int128)0x18uLL) >> 64 != 0;\n      if ( 24 * qword_6255C0 < 0 || ((unsigned __int64)qword_6255C0 * (unsigned __int128)0x18uLL) >> 64 != 0 )\n        goto LABEL_43;\n      v9 = sub_4129E0(qword_6255C8, 24 * qword_6255C0);\n      v10 = qword_6255C0;\n      qword_6255C8 = v9;\n    }\n    v7 = v10 - qword_6246A0;\n    v11 = v10 + qword_6246A0 + 1;\n    a2 = v11 * (v10 - qword_6246A0);\n    if ( !__CFADD__(v10, qword_6246A0 + 1) )\n    {\n      v8 = a2 % v7;\n      if ( v11 == a2 / v7 )\n      {\n        v12 = a2 >> 1;\n        a2 >>= 62;\n        v7 = 8 * v12;\n        if ( (v7 & 0x8000000000000000LL) == 0LL && a2 == 0 )\n        {\n          v13 = sub_412980(v7);\n          a3 = qword_6246A0;\n          if ( v10 > qword_6246A0 )\n          {\n            v14 = qword_6255C8;\n            a3 = 8 * qword_6246A0 + 8;\n            a2 = 8 * v10 + 8;\n            do\n            {\n              v5 = 3 * a3;\n              *(_QWORD *)(v14 + 3 * a3 - 8) = v13;\n              v13 += a3;\n              a3 += 8LL;\n            }\n            while ( a2 != a3 );\n          }\n          qword_6246A0 = v10;\n          v4 = qword_625770;\n          goto LABEL_16;\n        }\n      }\n    }\nLABEL_43:\n    sub_412BD0(v7, a2, v8);\n  }\nLABEL_16:\n  if ( v6 )\n  {\n    v15 = qword_6255C8;\n    a2 = 0LL;\n    v5 = 3LL;\n    do\n    {\n      v16 = *(_QWORD **)(v15 + 8 * v5 - 8);\n      *(_BYTE *)(v15 + 8 * v5 - 24) = 1;\n      a2 += 8LL;\n      *(_QWORD *)(v15 + 8 * v5 - 16) = v5;\n      a3 = (__int64)v16 + a2;\n      do\n      {\n        *v16 = 3LL;\n        ++v16;\n      }\n      while ( (_QWORD *)a3 != v16 );\n      v5 += 3LL;\n    }\n    while ( v5 != 3 * v6 + 3 );\n  }\n  v17 = 0LL;\n  if ( v4 )\n  {\n    do\n    {\n      v18 = sub_407690(*((_QWORD *)qword_625760 + v17), a2, a3, v5);\n      v19 = qword_625770;\n      v20 = v18;\n      if ( v6 )\n      {\n        v21 = qword_625670;\n        v5 = qword_6255C8;\n        a2 = 0LL;\n        v22 = v18 + 2;\n        do\n        {\n          v26 = a2 + 1;\n          if ( *(_BYTE *)v5 )\n          {\n            if ( v3 )\n              v23 = v17 / ((v19 + a2) / (a2 + 1));\n            else\n              v23 = v17 % v26;\n            v24 = v20;\n            if ( v23 != a2 )\n              v24 = v22;\n            v25 = (__int64 *)(*(_QWORD *)(v5 + 16) + 8 * v23);\n            a3 = *v25;\n            if ( *v25 < v24 )\n            {\n              a3 = v24 + *(_QWORD *)(v5 + 8) - a3;\n              *(_QWORD *)(v5 + 8) = a3;\n              *v25 = v24;\n              *(_BYTE *)v5 = *(_QWORD *)(v5 + 8) < v21;\n            }\n          }\n          v5 += 24LL;\n          a2 = v26;\n        }\n        while ( v6 != v26 );\n      }\n      ++v17;\n    }\n    while ( v17 < v19 );\n  }\n  if ( v6 > 1 && !*(_BYTE *)(qword_6255C8 + 24 * v6 - 24) )\n  {\n    v27 = qword_6255C8 + 24 * v6 - 48;\n    do\n    {\n      if ( --v6 == 1 )\n        break;\n      v27 -= 24LL;\n    }\n    while ( !*(_BYTE *)(v27 + 24) );\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x407800L", 
            "funcEndAddr": "0x407ae0L", 
            "funcName": "sub_407800"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_407AE0(char a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r13\n  unsigned __int64 i; // rbx\n  unsigned __int64 v6; // rbp\n  __int64 v7; // r12\n  __int64 v8; // rax\n  int v9; // ecx\n  char v10; // dl\n  char *v11; // rax\n  char *v12; // rax\n  char *v13; // rax\n  char v15; // [rsp+Bh] [rbp-3Dh]\n  int v16; // [rsp+Ch] [rbp-3Ch]\n\n  if ( qword_625770 )\n  {\n    v4 = 0LL;\n    for ( i = 0LL; qword_625770 > i; ++i )\n    {\n      v7 = *((_QWORD *)qword_625760 + i);\n      if ( qword_625670 )\n      {\n        v8 = sub_407690(*((_QWORD *)qword_625760 + i), a2, a3, a4);\n        if ( i )\n        {\n          v6 = v4 + 2;\n          if ( !qword_625670 || qword_625670 > v8 + v4 + 2 && -3 - v8 >= v4 )\n          {\n            v4 += v8 + 2;\n            goto LABEL_11;\n          }\n          v4 = v8;\n          v9 = 10;\n          v10 = 10;\n          v6 = 0LL;\nLABEL_12:\n          v11 = stdout->_IO_write_ptr;\n          if ( v11 >= stdout->_IO_write_end )\n          {\n            v16 = v9;\n            v15 = v10;\n            __overflow(stdout, a1);\n            v10 = v15;\n            v9 = v16;\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v11 + 1;\n            *v11 = a1;\n          }\n          v12 = stdout->_IO_write_ptr;\n          if ( v12 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, v9);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v12 + 1;\n            *v12 = v10;\n          }\n          goto LABEL_4;\n        }\n        v6 = v4;\n        v4 += v8;\n      }\n      else\n      {\n        v6 = v4;\n        if ( i )\n        {\n          v6 = v4 + 2;\n          v4 += 2LL;\nLABEL_11:\n          v9 = 32;\n          v10 = 32;\n          goto LABEL_12;\n        }\n      }\nLABEL_4:\n      a2 = v6;\n      sub_406AF0(v7, v6);\n    }\n  }\n  v13 = stdout->_IO_write_ptr;\n  if ( v13 >= stdout->_IO_write_end )\n  {\n    LODWORD(v13) = __overflow(stdout, 10);\n  }\n  else\n  {\n    stdout->_IO_write_ptr = v13 + 1;\n    *v13 = 10;\n  }\n  return (int)v13;\n}\n", 
            "funcStartAddr": "0x407ae0L", 
            "funcEndAddr": "0x407c98L", 
            "funcName": "sub_407AE0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_407CA0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // r14\n  __int64 v6; // r15\n  __int64 v7; // rbx\n  __int64 v8; // rcx\n  __int64 v9; // r12\n  unsigned __int64 v10; // r13\n  unsigned __int64 v11; // rbx\n  __int64 v12; // rcx\n  char *v13; // rax\n  __int64 v14; // r12\n  __int64 v15; // rdx\n  __int64 v16; // rcx\n  unsigned __int64 v17; // rbp\n  unsigned __int64 v18; // rdi\n  char v19; // di\n  unsigned __int64 i; // rbx\n  __int64 v21; // rdx\n  __int64 v22; // rcx\n  unsigned __int64 j; // rbx\n  unsigned __int64 v24; // rax\n  __int64 v25; // rcx\n  __int64 v26; // r15\n  unsigned __int64 v27; // rt2\n  _BOOL8 v28; // rdx\n  bool v29; // zf\n  __int64 v30; // rdx\n  unsigned __int64 v31; // r14\n  __int64 v32; // r13\n  unsigned __int64 v33; // rbp\n  unsigned __int64 v34; // rdi\n  __int64 v35; // r12\n  __int64 v36; // rax\n  __int64 v37; // rbx\n  char *v38; // rax\n  __int64 v40; // [rsp+0h] [rbp-50h]\n  __int64 v41; // [rsp+0h] [rbp-50h]\n  unsigned __int64 v42; // [rsp+8h] [rbp-48h]\n  __int64 v43; // [rsp+10h] [rbp-40h]\n\n  LODWORD(v4) = dword_6256F8;\n  switch ( (unsigned __int64)(unsigned int)dword_6256F8 )\n  {\n    case 0uLL:\n      for ( i = 0LL; qword_625770 > i; ++i )\n      {\n        sub_405E30();\n        sub_406C60(*((_QWORD *)qword_625760 + i), a2, v21, v22);\n        v4 = (unsigned __int64)stdout->_IO_write_ptr;\n        if ( (char *)v4 >= stdout->_IO_write_end )\n        {\n          a2 = 10LL;\n          LODWORD(v4) = __overflow(stdout, 10);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = (char *)(v4 + 1);\n          *(_BYTE *)v4 = 10;\n        }\n        ++qword_6255B8;\n      }\n      break;\n    case 1uLL:\n      for ( j = 0LL; qword_625770 > j; ++j )\n      {\n        sub_406AF0(*((_QWORD *)qword_625760 + j), 0LL);\n        v4 = (unsigned __int64)stdout->_IO_write_ptr;\n        if ( (char *)v4 >= stdout->_IO_write_end )\n        {\n          LODWORD(v4) = __overflow(stdout, 10);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = (char *)(v4 + 1);\n          *(_BYTE *)v4 = 10;\n        }\n      }\n      break;\n    case 2uLL:\n      if ( !qword_625670 )\n        goto LABEL_31;\n      v24 = sub_407800(1, a2, a3);\n      v42 = 0LL;\n      v25 = v24;\n      v26 = qword_6255C8 + 24 * v24 - 24;\n      v27 = qword_625770 % v24;\n      v4 = qword_625770 / v24;\n      v28 = v27 != 0;\n      v29 = v4 + v28 == 0;\n      v30 = v4 + v28;\n      v43 = v30;\n      if ( !v29 )\n      {\n        do\n        {\n          v31 = v42;\n          v32 = 0LL;\n          v33 = 0LL;\n          while ( 1 )\n          {\n            v35 = *((_QWORD *)qword_625760 + v31);\n            v36 = sub_407690(*((_QWORD *)qword_625760 + v31), a2, v30, v25);\n            a2 = v33;\n            v41 = v36;\n            v37 = *(_QWORD *)(*(_QWORD *)(v26 + 16) + v32);\n            v32 += 8LL;\n            sub_406AF0(v35, v33);\n            v31 += v43;\n            if ( v31 >= qword_625770 )\n              break;\n            a2 = v33 + v37;\n            v34 = v33 + v41;\n            v33 = a2;\n            sub_4052C0(v34, a2);\n          }\n          v38 = stdout->_IO_write_ptr;\n          if ( v38 >= stdout->_IO_write_end )\n          {\n            a2 = 10LL;\n            __overflow(stdout, 10);\n          }\n          else\n          {\n            v30 = (__int64)(v38 + 1);\n            stdout->_IO_write_ptr = v38 + 1;\n            *v38 = 10;\n          }\n          LODWORD(v4) = ++v42;\n        }\n        while ( v43 != v42 );\n      }\n      break;\n    case 3uLL:\n      if ( !qword_625670 )\n      {\nLABEL_31:\n        v19 = 32;\n        goto LABEL_11;\n      }\n      v5 = sub_407800(0, a2, a3);\n      v6 = qword_6255C8 + 24 * v5 - 24;\n      v7 = *(_QWORD *)qword_625760;\n      v40 = sub_407690(*(_QWORD *)qword_625760, a2, 3 * v5, v8);\n      v9 = **(_QWORD **)(v6 + 16);\n      sub_406AF0(v7, 0LL);\n      if ( (unsigned __int64)qword_625770 > 1 )\n      {\n        v10 = 0LL;\n        v11 = 1LL;\n        v12 = v40;\n        do\n        {\n          v17 = v11 % v5;\n          if ( v11 % v5 )\n          {\n            v18 = v10 + v12;\n            v10 += v9;\n            sub_4052C0(v18, v10);\n          }\n          else\n          {\n            v13 = stdout->_IO_write_ptr;\n            v10 = 0LL;\n            if ( v13 >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, 10);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v13 + 1;\n              *v13 = 10;\n            }\n          }\n          v14 = *((_QWORD *)qword_625760 + v11++);\n          sub_406AF0(v14, v10);\n          v12 = sub_407690(v14, v10, v15, v16);\n          v9 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v17);\n        }\n        while ( v11 < qword_625770 );\n      }\n      v4 = (unsigned __int64)stdout->_IO_write_ptr;\n      if ( (char *)v4 >= stdout->_IO_write_end )\n      {\n        LODWORD(v4) = __overflow(stdout, 10);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = (char *)(v4 + 1);\n        *(_BYTE *)v4 = 10;\n      }\n      break;\n    case 4uLL:\n      v19 = 44;\nLABEL_11:\n      LODWORD(v4) = sub_407AE0(v19, a2, a3, a4);\n      break;\n    default:\n      return v4;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x407ca0L", 
            "funcEndAddr": "0x40803aL", 
            "funcName": "sub_407CA0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408040(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_9;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a1 + 72);\n    if ( *(_QWORD *)(a2 + 72) <= v5 )\n    {\n      if ( *(_QWORD *)(a2 + 72) == v5 )\n        result = strcmp(*(const char **)a2, *(const char **)a1);\n      else\n        result = *(_QWORD *)(a2 + 72) < v5;\n      return result;\n    }\nLABEL_9:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408040L", 
            "funcEndAddr": "0x4080b6L", 
            "funcName": "sub_408040"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4080C0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n\n  v2 = *(_QWORD *)(a2 + 72);\n  if ( *(_QWORD *)(a1 + 72) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a1 + 72) == v2 )\n    return sub_4050D0(*(char **)a1, *(char **)a2);\n  return *(_QWORD *)(a1 + 72) < v2;\n}\n", 
            "funcStartAddr": "0x4080c0L", 
            "funcEndAddr": "0x4080f6L", 
            "funcName": "sub_4080C0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408100(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_9;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a2 + 72);\n    if ( *(_QWORD *)(a1 + 72) <= v5 )\n    {\n      if ( *(_QWORD *)(a1 + 72) == v5 )\n        result = sub_4050D0(*(char **)a1, *(char **)a2);\n      else\n        result = *(_QWORD *)(a1 + 72) < v5;\n      return result;\n    }\nLABEL_9:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408100L", 
            "funcEndAddr": "0x408176L", 
            "funcName": "sub_408100"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408180(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_9;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a2 + 72);\n    if ( *(_QWORD *)(a1 + 72) <= v5 )\n    {\n      if ( *(_QWORD *)(a1 + 72) == v5 )\n        result = strcmp(*(const char **)a1, *(const char **)a2);\n      else\n        result = *(_QWORD *)(a1 + 72) < v5;\n      return result;\n    }\nLABEL_9:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408180L", 
            "funcEndAddr": "0x4081f6L", 
            "funcName": "sub_408180"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408200(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_9;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a1 + 72);\n    if ( *(_QWORD *)(a2 + 72) <= v5 )\n    {\n      if ( *(_QWORD *)(a2 + 72) == v5 )\n        result = sub_4050D0(*(char **)a2, *(char **)a1);\n      else\n        result = *(_QWORD *)(a2 + 72) < v5;\n      return result;\n    }\nLABEL_9:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408200L", 
            "funcEndAddr": "0x408276L", 
            "funcName": "sub_408200"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408280(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rdx\n\n  v2 = *(_QWORD *)(a1 + 72);\n  if ( *(_QWORD *)(a2 + 72) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a2 + 72) == v2 )\n    return sub_4050D0(*(char **)a2, *(char **)a1);\n  return *(_QWORD *)(a2 + 72) < v2;\n}\n", 
            "funcStartAddr": "0x408280L", 
            "funcEndAddr": "0x4082b6L", 
            "funcName": "sub_408280"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4082C0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rdx\n\n  v2 = *(_QWORD *)(a1 + 72);\n  if ( *(_QWORD *)(a2 + 72) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a2 + 72) == v2 )\n    return strcmp(*(const char **)a2, *(const char **)a1);\n  return *(_QWORD *)(a2 + 72) < v2;\n}\n", 
            "funcStartAddr": "0x4082c0L", 
            "funcEndAddr": "0x4082f6L", 
            "funcName": "sub_4082C0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408300(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a2 + 128);\n    if ( *(_QWORD *)(a1 + 128) <= v5 )\n    {\n      if ( *(_QWORD *)(a1 + 128) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a2 + 136) - *(_DWORD *)(a1 + 136);\n      if ( !result )\n        result = strcmp(*(const char **)a1, *(const char **)a2);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408300L", 
            "funcEndAddr": "0x408386L", 
            "funcName": "sub_408300"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408390(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a2 + 112);\n    if ( *(_QWORD *)(a1 + 112) <= v5 )\n    {\n      if ( *(_QWORD *)(a1 + 112) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a2 + 120) - *(_DWORD *)(a1 + 120);\n      if ( !result )\n        result = strcmp(*(const char **)a1, *(const char **)a2);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408390L", 
            "funcEndAddr": "0x408406L", 
            "funcName": "sub_408390"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408410(unsigned int a1)\n{\n  unsigned int v1; // ebp\n  int *v2; // rax\n  int v3; // ecx\n  unsigned int v4; // edx\n  __int64 result; // rax\n  char *v6; // rdi\n  __int64 v7; // [rsp+0h] [rbp-38h]\n\n  v1 = a1;\n  if ( byte_6256ED || (v6 = (char *)sub_40E160()) == 0LL )\n  {\n    __sprintf_chk(&v7, 1LL, 21LL, 4304996LL, v1);\n    v2 = (int *)&v7;\n    do\n    {\n      v3 = *v2;\n      ++v2;\n      v4 = ~v3 & (v3 - 16843009) & 0x80808080;\n    }\n    while ( !v4 );\n    if ( !(~v3 & (v3 - 16843009) & 0x8080) )\n      v4 >>= 16;\n    if ( !(~v3 & (v3 - 16843009) & 0x8080) )\n      LODWORD(v2) = (_DWORD)v2 + 2;\n    result = (_DWORD)v2 - (__CFADD__((_BYTE)v4, (_BYTE)v4) + 3) - (unsigned int)&v7;\n  }\n  else\n  {\n    result = sub_40EB70(v6);\n    if ( (int)result < 0 )\n      result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408410L", 
            "funcEndAddr": "0x4084adL", 
            "funcName": "sub_408410"
        }, 
        {
            "decompiledFuncCode": "void sub_4084B0()\n{\n  void ***v0; // rbx\n  void ***v1; // r12\n  void **v2; // rbp\n\n  v0 = (void ***)qword_625760;\n  v1 = (void ***)((char *)qword_625760 + 8 * qword_625770);\n  if ( qword_625770 )\n  {\n    do\n    {\n      v2 = *v0;\n      ++v0;\n      free(*v2);\n      free(v2[1]);\n      free(v2[2]);\n    }\n    while ( v0 != v1 );\n  }\n  byte_625769 = 0;\n  qword_625770 = 0LL;\n  byte_625724 = 0;\n  dword_625720 = 0;\n  dword_62571C = 0;\n  dword_625718 = 0;\n  dword_625710 = 0;\n  dword_62570C = 0;\n  dword_625708 = 0;\n  dword_625714 = 0;\n  dword_625704 = 0;\n  dword_625700 = 0;\n  dword_6256FC = 0;\n}\n", 
            "funcStartAddr": "0x4084b0L", 
            "funcEndAddr": "0x408579L", 
            "funcName": "sub_4084B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408580(char *a1, __int64 a2, char a3, char *a4)\n{\n  char *v4; // r15\n  int v5; // er14\n  char v6; // r13\n  __int64 v7; // rcx\n  __int64 v8; // rdi\n  __int64 v9; // rax\n  __int64 v10; // rbx\n  char v11; // r8\n  char v12; // dl\n  void *v13; // r12\n  char v14; // cl\n  struct stat *v15; // r15\n  __int64 v16; // rdx\n  int *v17; // rax\n  __int64 v18; // r14\n  int v19; // er9\n  int v20; // eax\n  __int64 v21; // rcx\n  __int64 v22; // r12\n  __int64 v23; // rax\n  bool v25; // dl\n  bool v26; // al\n  bool v27; // al\n  bool v28; // al\n  bool v29; // al\n  char *v30; // rax\n  __int64 v31; // rdx\n  char *v32; // rax\n  int v33; // eax\n  int v34; // eax\n  const char *v35; // rax\n  int v36; // eax\n  __int64 v37; // rcx\n  const char *v38; // rax\n  int v39; // eax\n  __int64 v40; // rcx\n  unsigned __int64 v41; // rax\n  unsigned int v42; // edi\n  const char *v43; // rax\n  int v44; // eax\n  int v45; // eax\n  int *v46; // rax\n  __int64 v47; // r14\n  __int64 v48; // rax\n  char *v49; // rax\n  int v50; // eax\n  const char *v51; // rax\n  int v52; // eax\n  size_t v53; // r12\n  size_t v54; // rax\n  char v55; // cl\n  char v56; // r10\n  char v57; // dl\n  void *v58; // rsp\n  _BYTE *v59; // rdi\n  char *v60; // rsi\n  _BYTE *v61; // rax\n  char *v62; // rcx\n  bool v63; // al\n  char *v64; // rax\n  int v65; // eax\n  char *v66; // rsi\n  char *v67; // r14\n  int *v68; // rax\n  size_t v69; // rax\n  char *v70; // rax\n  size_t v71; // rdx\n  char *v72; // r15\n  char *v73; // rax\n  int v74; // eax\n  int v75; // eax\n  unsigned int v76; // er14\n  struct stat *v77; // rax\n  int v78; // ecx\n  bool v79; // zf\n  int v80; // eax\n  char *v81; // rax\n  __int64 v82; // rdx\n  int *v83; // r8\n  __int64 v84; // rcx\n  __int64 v85; // rax\n  bool v86; // al\n  bool v87; // al\n  bool v88; // al\n  char *v89; // rdi\n  int v90; // eax\n  char v91; // [rsp+Eh] [rbp-2F2h]\n  char v92; // [rsp+Fh] [rbp-2F1h]\n  int *v93; // [rsp+10h] [rbp-2F0h]\n  char *filename; // [rsp+18h] [rbp-2E8h]\n  char v95; // [rsp+20h] [rbp-2E0h]\n  struct stat stat_buf; // [rsp+40h] [rbp-2C0h]\n\n  v4 = a4;\n  v5 = a2;\n  v6 = a3;\n  v7 = qword_625770;\n  filename = a1;\n  v8 = qword_625780;\n  if ( qword_625770 == qword_625778 )\n  {\n    if ( 400 * qword_625770 < 0 || ((unsigned __int64)qword_625770 * (unsigned __int128)0x190uLL) >> 64 != 0 )\n      sub_412BD0(qword_625780, a2, ((unsigned __int64)qword_625770 * (unsigned __int128)0x190uLL) >> 64 != 0);\n    v9 = sub_4129E0(qword_625780, 400 * qword_625770);\n    v7 = qword_625770;\n    qword_625778 *= 2LL;\n    qword_625780 = v9;\n    v8 = v9;\n  }\n  v10 = v8 + 200 * v7;\n  *(_QWORD *)v10 = 0LL;\n  *(_QWORD *)(v10 + 188) = 0LL;\n  memset(\n    (void *)((v10 + 8) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v10 - (((_DWORD)v10 + 8) & 0xFFFFFFF8) + 196) >> 3));\n  *(_QWORD *)(v10 + 32) = 0LL;\n  *(_DWORD *)(v10 + 168) = a2;\n  v79 = byte_625769 == 0;\n  *(_DWORD *)(v10 + 196) = -1;\n  if ( v79 )\n  {\n    if ( byte_625768 )\n    {\n      v63 = sub_404E20(filename);\n      *(_DWORD *)(v10 + 196) = v63;\n      if ( v63 )\n        byte_625769 = 1;\n    }\n  }\n  v11 = byte_6256D1;\n  if ( v6 )\n  {\n    v12 = *filename;\n    v13 = filename;\n    if ( *filename == 47 )\n      goto LABEL_10;\n    v14 = *v4;\n    if ( !*v4 )\n      goto LABEL_10;\n    goto LABEL_92;\n  }\n  if ( byte_6256D1 )\n  {\n    v12 = *filename;\n    if ( *filename == 47 )\n    {\n      v13 = filename;\n      goto LABEL_81;\n    }\n    v14 = *v4;\n    v13 = filename;\n    if ( !*v4 )\n    {\nLABEL_81:\n      v48 = sub_40B070(v13);\n      *(_QWORD *)(v10 + 16) = v48;\n      if ( !v48 )\n      {\n        v49 = dcgettext(0LL, \"error canonicalizing %s\", 5);\n        sub_405580(v6, v49, (__int64)v13);\n      }\n      goto LABEL_11;\n    }\n    goto LABEL_92;\n  }\n  if ( byte_625661 )\n    goto LABEL_47;\n  if ( (_DWORD)a2 == 3 )\n  {\n    if ( byte_6256D2 )\n    {\n      LOBYTE(v93) = byte_6256D1;\n      v86 = sub_404AE0(0x13u);\n      v11 = (char)v93;\n      if ( v86 )\n        goto LABEL_47;\n      v87 = sub_404AE0(0x12u);\n      v11 = (char)v93;\n      if ( v87 )\n        goto LABEL_47;\n      v88 = sub_404AE0(0x14u);\n      v11 = (char)v93;\n      if ( v88 )\n        goto LABEL_47;\n    }\n  }\n  if ( byte_6256BC )\n  {\n    v25 = (_DWORD)a2 == 0;\n    if ( (_DWORD)a2 == 6 || v25 )\n      goto LABEL_153;\nLABEL_47:\n    v12 = *filename;\n    if ( *filename == 47 || (v14 = *v4) == 0 )\n    {\n      v15 = (struct stat *)(v10 + 24);\n      v13 = filename;\n      if ( (unsigned int)dword_6256B8 >= 3 && (unsigned int)dword_6256B8 > 4 && dword_6256B8 == 5 )\n      {\nLABEL_14:\n        if ( !__xstat(1, (const char *)v13, v15) )\n          goto LABEL_15;\nLABEL_53:\n        v30 = dcgettext(0LL, \"cannot access %s\", 5);\n        v31 = (__int64)v13;\n        v22 = 0LL;\n        sub_405580(v6, v30, v31);\n        if ( v6 )\n          return v22;\n        goto LABEL_30;\n      }\n      goto LABEL_52;\n    }\nLABEL_92:\n    v91 = v11;\n    v92 = v12;\n    LOBYTE(v93) = v14;\n    v53 = strlen(filename);\n    v54 = strlen(v4);\n    v55 = (char)v93;\n    v56 = v4[1];\n    v57 = v92;\n    v11 = v91;\n    v58 = alloca(v53 + v54 + 10);\n    v59 = (_BYTE *)((unsigned __int64)&v92 & 0xFFFFFFFFFFFFFFF0LL);\n    v13 = (void *)((unsigned __int64)&v92 & 0xFFFFFFFFFFFFFFF0LL);\n    if ( (_BYTE)v93 != 46 || (v61 = (_BYTE *)((unsigned __int64)&v92 & 0xFFFFFFFFFFFFFFF0LL), v56) )\n    {\n      v60 = v4;\n      while ( 1 )\n      {\n        v61 = v59 + 1;\n        ++v60;\n        *v59 = v55;\n        if ( !v56 )\n          break;\n        v55 = v56;\n        v56 = v60[1];\n        ++v59;\n      }\n      if ( v4 < v60 && *(v60 - 1) != 47 )\n      {\n        *v61 = 47;\n        v61 = v59 + 2;\n      }\n    }\n    if ( v57 )\n    {\n      v62 = filename;\n      do\n      {\n        ++v62;\n        *(++v61 - 1) = v57;\n        v57 = *v62;\n      }\n      while ( *v62 );\n    }\n    *v61 = 0;\nLABEL_10:\n    if ( !v11 )\n    {\nLABEL_11:\n      v15 = (struct stat *)(v10 + 24);\n      if ( (unsigned int)dword_6256B8 >= 3 )\n      {\n        if ( (unsigned int)dword_6256B8 > 4 )\n        {\n          if ( dword_6256B8 == 5 )\n            goto LABEL_14;\n          goto LABEL_52;\n        }\n        if ( v6 )\n        {\n          LODWORD(v93) = dword_6256B8;\n          v50 = __xstat(1, (const char *)v13, (struct stat *)(v10 + 24));\n          if ( (_DWORD)v93 == 3 )\n            goto LABEL_87;\n          if ( v50 < 0 )\n          {\n            if ( *__errno_location() != 2 )\n              goto LABEL_161;\n          }\n          else\n          {\n            v16 = *(_DWORD *)(v10 + 48) & 0xF000;\n            if ( (_DWORD)v16 == 0x4000 )\n            {\nLABEL_87:\n              if ( !v50 )\n                goto LABEL_15;\nLABEL_161:\n              v81 = dcgettext(0LL, \"cannot access %s\", 5);\n              v82 = (__int64)v13;\n              v22 = 0LL;\n              sub_405580(1, v81, v82);\n              return v22;\n            }\n          }\n        }\n      }\nLABEL_52:\n      if ( __lxstat(1, (const char *)v13, v15) )\n        goto LABEL_53;\nLABEL_15:\n      *(_BYTE *)(v10 + 184) = 1;\n      if ( (v5 == 5 || (*(_DWORD *)(v10 + 48) & 0xF000) == 0x8000) && byte_6256D2 && sub_404AE0(0x15u) )\n      {\n        v46 = __errno_location();\n        v47 = *(_QWORD *)(v10 + 24);\n        v79 = v47 == qword_6246B8;\n        *v46 = 95;\n        if ( !v79 )\n          qword_6246B8 = v47;\n        *(_BYTE *)(v10 + 192) = 0;\n      }\n      if ( !dword_6256F8 || byte_625725 )\n      {\n        v17 = __errno_location();\n        v18 = *(_QWORD *)(v10 + 24);\n        v79 = v18 == qword_6246B0;\n        *v17 = 95;\n        if ( !v79 )\n          qword_6246B0 = v18;\n        v19 = dword_6256F8;\n        *(_QWORD *)(v10 + 176) = &unk_6245AA;\n        if ( !v19 )\n        {\n          if ( v18 == qword_6246A8 )\n          {\n            *v17 = 95;\n            v90 = *(_DWORD *)(v10 + 48);\n            *(_DWORD *)(v10 + 188) = 0;\n            v20 = v90 & 0xF000;\n            if ( v20 != 40960 )\n            {\nLABEL_24:\n              if ( v20 == 0x4000 )\n              {\n                if ( !v6 || byte_6256B5 )\n                  *(_DWORD *)(v10 + 168) = 3;\n                else\n                  *(_DWORD *)(v10 + 168) = 9;\n              }\n              else\n              {\n                *(_DWORD *)(v10 + 168) = 5;\n              }\n              goto LABEL_26;\n            }\n          }\n          else\n          {\n            *v17 = 0;\n            v93 = v17;\n            v65 = sub_40B900(v13, v15);\n            if ( v65 <= 0 )\n            {\n              v83 = v93;\n              v16 = (unsigned int)*v93;\n              v84 = ((_DWORD)v16 - 22) & 0xFFFFFFEF;\n              if ( !(((_DWORD)v16 - 22) & 0xFFFFFFEF) || (_DWORD)v16 == 95 )\n              {\n                v16 = *(_QWORD *)(v10 + 24);\n                qword_6246A8 = *(_QWORD *)(v10 + 24);\n              }\n              *(_DWORD *)(v10 + 188) = 0;\n              if ( v65 < 0 )\n              {\n                v93 = v83;\n                v85 = sub_412110(0LL, 3LL, v13, v84);\n                error(0, *v93, \"%s\", v85);\n              }\n            }\n            else\n            {\n              *(_DWORD *)(v10 + 188) = 2;\n              byte_625724 = 1;\n            }\n            v20 = *(_DWORD *)(v10 + 48) & 0xF000;\n            if ( v20 != 40960 )\n              goto LABEL_24;\n            if ( dword_6256F8 )\n              goto LABEL_114;\n          }\nLABEL_115:\n          v66 = *(char **)(v10 + 72);\n          v67 = (char *)sub_40ABF0((char *)v13);\n          *(_QWORD *)(v10 + 8) = v67;\n          if ( !v67 )\n          {\n            v66 = dcgettext(0LL, \"cannot read symbolic link %s\", 5);\n            sub_405580(v6, v66, (__int64)v13);\n            v67 = *(char **)(v10 + 8);\n            if ( !v67 )\n              goto LABEL_186;\n          }\n          if ( *v67 != 47 && (v68 = (int *)sub_40B7B0(v13, v66)) != 0LL )\n          {\n            v93 = v68;\n            v69 = strlen(v67);\n            v70 = (char *)sub_412980((char *)v93 + v69 + 2);\n            v71 = (size_t)v93;\n            v72 = v70;\n            if ( *((_BYTE *)v93 + (_QWORD)v13 - 1) != 47 )\n              v71 = (size_t)v93 + 1;\n            v73 = stpncpy(v70, (const char *)v13, v71);\n            strcpy(v73, v67);\n          }\n          else\n          {\n            v72 = (char *)sub_412BB0(v67);\n          }\n          if ( v72 )\n          {\n            if ( !*(_DWORD *)(v10 + 196) && sub_404E20(*(char **)(v10 + 8)) )\n              *(_DWORD *)(v10 + 196) = -1;\n            if ( ((unsigned int)dword_6256D4 > 1 || byte_6256BD) && !__xstat(1, v72, &stat_buf) )\n            {\n              *(_BYTE *)(v10 + 185) = 1;\n              if ( !v6 || !dword_6256F8 || (stat_buf.st_mode & 0xF000) != 0x4000 )\n                *(_DWORD *)(v10 + 172) = stat_buf.st_mode;\n            }\n          }\n          else\n          {\nLABEL_186:\n            v72 = 0LL;\n          }\n          free(v72);\n          v20 = *(_DWORD *)(v10 + 48) & 0xF000;\n          if ( v20 != 40960 )\n            goto LABEL_24;\nLABEL_126:\n          *(_DWORD *)(v10 + 168) = 6;\nLABEL_26:\n          v21 = (unsigned int)dword_6256F8;\n          v22 = *(_QWORD *)(v10 + 88);\n          if ( dword_6256F8 && !byte_6256EC )\n            goto LABEL_187;\n          v32 = (char *)sub_40D5D0(*(_QWORD *)(v10 + 88), &stat_buf, (unsigned int)dword_6256E8, 512LL, qword_6256E0);\n          v33 = sub_40EB70(v32);\n          if ( v33 > dword_62571C )\n            dword_62571C = v33;\n          v16 = (unsigned int)dword_6256F8;\n          if ( dword_6256F8 )\n          {\nLABEL_187:\n            if ( !byte_625725 )\n              goto LABEL_29;\n          }\n          else\n          {\n            if ( byte_6245A9 )\n            {\n              v74 = sub_408410(*(_DWORD *)(v10 + 52));\n              if ( v74 > dword_625710 )\n                dword_625710 = v74;\n            }\n            if ( byte_6245A8 )\n            {\n              v76 = *(_DWORD *)(v10 + 56);\n              if ( byte_6256ED || (v89 = (char *)sub_40E2F0(v76)) == 0LL )\n              {\n                __sprintf_chk(&stat_buf, 1LL, 21LL, 4304996LL, v76);\n                v77 = &stat_buf;\n                do\n                {\n                  v78 = v77->st_dev;\n                  v77 = (struct stat *)((char *)v77 + 4);\n                  v16 = ~v78 & (v78 - 16843009) & 0x80808080;\n                }\n                while ( !(_DWORD)v16 );\n                v79 = (~v78 & (v78 - 16843009) & 0x8080) == 0;\n                if ( !(~v78 & (v78 - 16843009) & 0x8080) )\n                  v16 = (unsigned int)v16 >> 16;\n                v21 = (__int64)&v77->st_dev + 2;\n                if ( v79 )\n                  LODWORD(v77) = (_DWORD)v77 + 2;\n                v80 = (_DWORD)v77 - (__CFADD__((_BYTE)v16, (_BYTE)v16) + 3) - (unsigned __int64)&stat_buf;\n              }\n              else\n              {\n                v80 = sub_40EB70(v89);\n                v16 = 0LL;\n                if ( v80 < 0 )\n                  v80 = 0;\n              }\n              if ( dword_62570C < v80 )\n                dword_62570C = v80;\n            }\n            if ( byte_6256EE )\n            {\n              v75 = sub_408410(*(_DWORD *)(v10 + 52));\n              if ( v75 > dword_625708 )\n                dword_625708 = v75;\n            }\n            if ( !byte_625725 )\n            {\nLABEL_64:\n              if ( !dword_6256F8 )\n              {\n                v35 = (const char *)sub_40E520(*(_QWORD *)(v10 + 40), &v95, v16, v21);\n                v36 = strlen(v35);\n                if ( v36 > dword_625718 )\n                  dword_625718 = v36;\n                if ( (*(_DWORD *)(v10 + 48) & 0xB000) == 0x2000 )\n                {\n                  v38 = (const char *)sub_40E520(\n                                        ((unsigned int)*(_QWORD *)(v10 + 64) >> 8) & 0xFFF | (*(_QWORD *)(v10 + 64) >> 32) & 0xFFFFF000,\n                                        &stat_buf,\n                                        ((unsigned int)*(_QWORD *)(v10 + 64) >> 8) & 0xFFF,\n                                        v37);\n                  v39 = strlen(v38);\n                  if ( v39 > dword_625704 )\n                    dword_625704 = v39;\n                  v41 = *(_QWORD *)(v10 + 64);\n                  v42 = v41 >> 12;\n                  LOBYTE(v42) = 0;\n                  v43 = (const char *)sub_40E520((unsigned __int8)v41 | v42, &stat_buf, (unsigned __int8)v41, v40);\n                  v44 = strlen(v43);\n                  v16 = (unsigned int)dword_625700;\n                  if ( v44 > dword_625700 )\n                  {\n                    dword_625700 = v44;\n                    v16 = (unsigned int)v44;\n                  }\n                  v45 = v16 + dword_625704 + 2;\n                  if ( v45 <= dword_6256FC )\n                    goto LABEL_29;\n                  goto LABEL_106;\n                }\n                v64 = (char *)sub_40D5D0(\n                                *(_QWORD *)(v10 + 72),\n                                &stat_buf,\n                                (unsigned int)dword_6256DC,\n                                1LL,\n                                qword_6245A0);\n                v45 = sub_40EB70(v64);\n                if ( v45 > dword_6256FC )\n                {\nLABEL_106:\n                  dword_6256FC = v45;\n                  goto LABEL_29;\n                }\n              }\nLABEL_29:\n              if ( byte_6256BC )\n              {\n                v51 = (const char *)sub_40E520(*(_QWORD *)(v10 + 32), &stat_buf, v16, v21);\n                v52 = strlen(v51);\n                if ( v52 > dword_625720 )\n                  dword_625720 = v52;\n              }\n              goto LABEL_30;\n            }\n          }\n          v34 = strlen(*(const char **)(v10 + 176));\n          if ( v34 > dword_625714 )\n            dword_625714 = v34;\n          goto LABEL_64;\n        }\n        *(_DWORD *)(v10 + 188) = 0;\n      }\n      v20 = *(_DWORD *)(v10 + 48) & 0xF000;\n      if ( v20 != 40960 )\n        goto LABEL_24;\nLABEL_114:\n      if ( !byte_6256BD )\n        goto LABEL_126;\n      goto LABEL_115;\n    }\n    goto LABEL_81;\n  }\n  if ( !byte_625660 )\n    goto LABEL_162;\n  v25 = (_DWORD)a2 == 0;\n  if ( (_DWORD)a2 != 6 && (_DWORD)a2 != 0 )\n  {\n    if ( byte_625660 )\n      goto LABEL_40;\nLABEL_162:\n    v22 = 0LL;\n    goto LABEL_30;\n  }\nLABEL_153:\n  if ( dword_6256B8 == 5 || byte_625750 || byte_6256BD || byte_6256BC )\n    goto LABEL_47;\n  if ( !byte_625660 )\n    goto LABEL_162;\n  if ( v25 )\n    goto LABEL_47;\nLABEL_40:\n  v22 = 0LL;\n  if ( (_DWORD)a2 == 5 )\n  {\n    if ( dword_6256D4 == 3 )\n      goto LABEL_47;\n    LOBYTE(v93) = v11;\n    if ( byte_6256D2 )\n    {\n      v26 = sub_404AE0(0xEu);\n      v11 = (char)v93;\n      if ( v26 )\n        goto LABEL_47;\n      v27 = sub_404AE0(0x10u);\n      v11 = (char)v93;\n      if ( v27 )\n        goto LABEL_47;\n      v28 = sub_404AE0(0x11u);\n      v11 = (char)v93;\n      if ( v28 )\n        goto LABEL_47;\n      v29 = sub_404AE0(0x15u);\n      v11 = (char)v93;\n      if ( v29 )\n        goto LABEL_47;\n    }\n  }\nLABEL_30:\n  v23 = sub_412BB0(filename);\n  ++qword_625770;\n  *(_QWORD *)v10 = v23;\n  return v22;\n}\n", 
            "funcStartAddr": "0x408580L", 
            "funcEndAddr": "0x40929eL", 
            "funcName": "sub_408580"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4092A0(void *src, __int64 a2, unsigned __int8 a3)\n{\n  char *v3; // r14\n  char *v4; // rbp\n  char v5; // bl\n  int *v6; // rax\n  int *v7; // r12\n  DIR *v8; // rax\n  DIR *v9; // r13\n  int v10; // eax\n  __ino_t *v11; // rax\n  void *v12; // rdi\n  __ino_t *v13; // r15\n  __int64 v14; // rax\n  __int64 v15; // rdx\n  __int64 v16; // rcx\n  __int64 v17; // rbx\n  char *v18; // rax\n  __ino_t *v19; // rax\n  __ino_t v20; // r15\n  __dev_t v21; // rcx\n  char *v22; // rax\n  char *v23; // r15\n  struct dirent *v24; // rax\n  struct dirent *v25; // rbx\n  char *v26; // rbp\n  _QWORD *v27; // r15\n  char *v28; // rax\n  __int64 v29; // rdi\n  __int64 v30; // rdx\n  __int64 v31; // rcx\n  char *v32; // rbx\n  char *v33; // rax\n  const char *v34; // rax\n  const char *v35; // rbx\n  size_t v36; // rax\n  char *v37; // rax\n  _QWORD *v38; // r15\n  __int64 v39; // rdx\n  __int64 v40; // rcx\n  char *v41; // rax\n  char *v42; // rax\n  __int64 v43; // [rsp-8h] [rbp-2F0h]\n  __dev_t v44; // [rsp+8h] [rbp-2E0h]\n  __dev_t v45; // [rsp+8h] [rbp-2E0h]\n  char v46; // [rsp+8h] [rbp-2E0h]\n  __ino_t v47; // [rsp+10h] [rbp-2D8h]\n  __int64 v48; // [rsp+10h] [rbp-2D8h]\n  unsigned __int8 v49; // [rsp+1Ch] [rbp-2CCh]\n  struct stat stat_buf; // [rsp+20h] [rbp-2C8h]\n\n  v3 = (char *)src;\n  v4 = (char *)a2;\n  v5 = a3;\n  v49 = a3;\n  v6 = __errno_location();\n  *v6 = 0;\n  v7 = v6;\n  v8 = opendir((const char *)src);\n  if ( !v8 )\n  {\n    v42 = dcgettext(0LL, \"cannot open directory %s\", 5);\n    sub_405580(v49, v42, (__int64)src);\n    return;\n  }\n  v9 = v8;\n  if ( qword_625788 )\n  {\n    v10 = dirfd(v8);\n    if ( v10 < 0 )\n    {\n      if ( __xstat(1, (const char *)src, &stat_buf) >= 0 )\n        goto LABEL_5;\n    }\n    else if ( __fxstat(1, v10, &stat_buf) >= 0 )\n    {\nLABEL_5:\n      v47 = stat_buf.st_ino;\n      v44 = stat_buf.st_dev;\n      v11 = (__ino_t *)sub_412980(16LL);\n      v12 = qword_625788;\n      a2 = (__int64)v11;\n      v13 = v11;\n      *v11 = v47;\n      v11[1] = v44;\n      v14 = sub_40D220(v12, v11);\n      if ( !v14 )\n        sub_412BD0(v12, a2, v15);\n      if ( v13 != (__ino_t *)v14 )\n      {\n        free(v13);\n        v17 = sub_412110(0LL, 3LL, v3, v16);\n        v18 = dcgettext(0LL, \"%s: not listing already-listed directory\", 5);\n        error(0, 0, v18, v17);\n        closedir(v9);\n        dword_6255D0 = 2;\n        return;\n      }\n      v19 = (__ino_t *)qword_6254B8;\n      v20 = stat_buf.st_ino;\n      v21 = stat_buf.st_dev;\n      if ( (unsigned __int64)(qword_6254C0 - qword_6254B8) <= 0xF )\n      {\n        a2 = 16LL;\n        v45 = stat_buf.st_dev;\n        obstack_newchunk(&unk_6254A0, 16LL);\n        v19 = (__ino_t *)qword_6254B8;\n        v21 = v45;\n      }\n      qword_6254B8 = (__int64)(v19 + 2);\n      v19[1] = v21;\n      *v19 = v20;\n      goto LABEL_12;\n    }\n    v28 = dcgettext(0LL, \"cannot determine device and inode of %s\", 5);\n    sub_405580(v49, v28, (__int64)src);\n    closedir(v9);\n    return;\n  }\nLABEL_12:\n  sub_4084B0();\n  if ( byte_6256B6 || byte_625678 )\n  {\n    if ( !byte_624400 )\n    {\n      v22 = stdout->_IO_write_ptr;\n      if ( v22 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 10);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v22 + 1;\n        *v22 = 10;\n      }\n      ++qword_6255B8;\n    }\n    byte_624400 = 0;\n    if ( byte_6256D8 )\n    {\n      v23 = 0LL;\n      fwrite_unlocked(\"  \", 1uLL, 2uLL, stdout);\n      qword_6255B8 += 2LL;\n      if ( !byte_6256D1 )\n        goto LABEL_19;\n    }\n    else\n    {\n      v23 = 0LL;\n      if ( !byte_6256D1 )\n      {\nLABEL_19:\n        if ( !v4 )\n          v4 = v3;\n        sub_4062D0(v4, qword_625688, -1, 0LL, 1, (size_t)&unk_625500, v23);\n        free(v23);\n        fwrite_unlocked(\":\\n\", 1uLL, 2uLL, stdout);\n        qword_6255B8 += 2LL;\n        a2 = v43;\n        goto LABEL_22;\n      }\n    }\n    v23 = (char *)sub_40B070(v3);\n    if ( !v23 )\n    {\n      v41 = dcgettext(0LL, \"error canonicalizing %s\", 5);\n      sub_405580(v49, v41, (__int64)v3);\n    }\n    goto LABEL_19;\n  }\nLABEL_22:\n  v48 = 0LL;\n  v46 = v5;\n  while ( 1 )\n  {\n    *v7 = 0;\n    v24 = readdir(v9);\n    v25 = v24;\n    if ( !v24 )\n      break;\n    v26 = v24->d_name;\n    if ( dword_6256B0 == 2 )\n      goto LABEL_55;\n    if ( v24->d_name[0] == 46 )\n    {\n      if ( !dword_6256B0 || !v24->d_name[(v24->d_name[1] == 46) + 1] )\n        goto LABEL_31;\nLABEL_55:\n      v38 = (_QWORD *)qword_6256A8;\n      if ( qword_6256A8 )\n      {\n        while ( 1 )\n        {\n          a2 = (__int64)v26;\n          if ( !(unsigned int)sub_4159A0(*v38, v26, 4LL) )\n            break;\n          v38 = (_QWORD *)v38[1];\n          if ( !v38 )\n            goto LABEL_60;\n        }\n      }\n      else\n      {\nLABEL_60:\n        a2 = 0LL;\n        if ( (unsigned __int8)(v25->d_type - 1) <= 0xDu )\n          a2 = (unsigned int)dword_4194A0[(unsigned __int8)(v25->d_type - 1)];\n        v48 += sub_408580(v26, a2, 0, v3);\n        if ( dword_6256F8 == 1 && dword_6256F0 == -1 && !byte_6256EC && !byte_6256B6 )\n        {\n          sub_404F40((__int64)v26, a2);\n          sub_407CA0((__int64)v26, a2, v39, v40);\n          sub_4084B0();\n        }\n      }\n      goto LABEL_31;\n    }\n    if ( dword_6256B0 )\n      goto LABEL_55;\n    v27 = (_QWORD *)qword_6256A0;\n    if ( !qword_6256A0 )\n      goto LABEL_55;\n    while ( 1 )\n    {\n      a2 = (__int64)v26;\n      if ( !(unsigned int)sub_4159A0(*v27, v26, 4LL) )\n        break;\n      v27 = (_QWORD *)v27[1];\n      if ( !v27 )\n        goto LABEL_55;\n    }\nLABEL_31:\n    sub_405D70();\n  }\n  if ( *v7 )\n  {\n    a2 = (__int64)dcgettext(0LL, \"reading directory %s\", 5);\n    sub_405580(v46, (const char *)a2, (__int64)v3);\n    if ( *v7 == 75 )\n      goto LABEL_31;\n  }\n  v29 = (__int64)v9;\n  if ( closedir(v9) )\n  {\n    v29 = v49;\n    a2 = (__int64)dcgettext(0LL, \"closing directory %s\", 5);\n    sub_405580(v49, (const char *)a2, (__int64)v3);\n  }\n  sub_404F40(v29, a2);\n  if ( byte_6256B6 )\n  {\n    a2 = 0LL;\n    v29 = (__int64)v3;\n    sub_405140(v3, 0);\n  }\n  if ( !dword_6256F8 || byte_6256EC )\n  {\n    if ( byte_6256D8 )\n    {\n      fwrite_unlocked(\"  \", 1uLL, 2uLL, stdout);\n      qword_6255B8 += 2LL;\n    }\n    v32 = dcgettext(0LL, \"total\", 5);\n    fputs_unlocked(v32, stdout);\n    qword_6255B8 += strlen(v32);\n    v33 = stdout->_IO_write_ptr;\n    if ( v33 >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, 32);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v33 + 1;\n      *v33 = 32;\n    }\n    ++qword_6255B8;\n    v34 = (const char *)sub_40D5D0(v48, &stat_buf, (unsigned int)dword_6256E8, 512LL, qword_6256E0);\n    a2 = (__int64)stdout;\n    v35 = v34;\n    fputs_unlocked(v34, stdout);\n    v36 = strlen(v35);\n    v29 = (__int64)stdout;\n    qword_6255B8 += v36;\n    v37 = stdout->_IO_write_ptr;\n    if ( v37 >= stdout->_IO_write_end )\n    {\n      a2 = 10LL;\n      __overflow(stdout, 10);\n    }\n    else\n    {\n      v30 = (__int64)(v37 + 1);\n      stdout->_IO_write_ptr = v37 + 1;\n      *v37 = 10;\n    }\n    ++qword_6255B8;\n  }\n  if ( qword_625770 )\n    sub_407CA0(v29, a2, v30, v31);\n}\n", 
            "funcStartAddr": "0x4092a0L", 
            "funcEndAddr": "0x40995aL", 
            "funcName": "sub_4092A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409960(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a2 + 128);\n  if ( *(_QWORD *)(a1 + 128) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a1 + 128) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a2 + 136) - *(_DWORD *)(a1 + 136);\n  if ( !result )\n    result = sub_4050D0(*(char **)a1, *(char **)a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x409960L", 
            "funcEndAddr": "0x4099a6L", 
            "funcName": "sub_409960"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4099B0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a2 + 112);\n  if ( *(_QWORD *)(a1 + 112) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a1 + 112) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a2 + 120) - *(_DWORD *)(a1 + 120);\n  if ( !result )\n    result = sub_4050D0(*(char **)a1, *(char **)a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x4099b0L", 
            "funcEndAddr": "0x4099e6L", 
            "funcName": "sub_4099B0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4099F0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a2 + 96);\n  if ( *(_QWORD *)(a1 + 96) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a1 + 96) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a2 + 104) - *(_DWORD *)(a1 + 104);\n  if ( !result )\n    result = sub_4050D0(*(char **)a1, *(char **)a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x4099f0L", 
            "funcEndAddr": "0x409a26L", 
            "funcName": "sub_4099F0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409A30(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a1 + 128);\n  if ( *(_QWORD *)(a2 + 128) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a2 + 128) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a1 + 136) - *(_DWORD *)(a2 + 136);\n  if ( !result )\n    result = sub_4050D0(*(char **)a2, *(char **)a1);\n  return result;\n}\n", 
            "funcStartAddr": "0x409a30L", 
            "funcEndAddr": "0x409a76L", 
            "funcName": "sub_409A30"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409A80(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a1 + 112);\n  if ( *(_QWORD *)(a2 + 112) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a2 + 112) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a1 + 120) - *(_DWORD *)(a2 + 120);\n  if ( !result )\n    result = sub_4050D0(*(char **)a2, *(char **)a1);\n  return result;\n}\n", 
            "funcStartAddr": "0x409a80L", 
            "funcEndAddr": "0x409ab6L", 
            "funcName": "sub_409A80"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409AC0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a1 + 96);\n  if ( *(_QWORD *)(a2 + 96) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a2 + 96) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a1 + 104) - *(_DWORD *)(a2 + 104);\n  if ( !result )\n    result = sub_4050D0(*(char **)a2, *(char **)a1);\n  return result;\n}\n", 
            "funcStartAddr": "0x409ac0L", 
            "funcEndAddr": "0x409af6L", 
            "funcName": "sub_409AC0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409B00(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a2 + 96);\n    if ( *(_QWORD *)(a1 + 96) <= v5 )\n    {\n      if ( *(_QWORD *)(a1 + 96) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a2 + 104) - *(_DWORD *)(a1 + 104);\n      if ( !result )\n        result = sub_4050D0(*(char **)a1, *(char **)a2);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409b00L", 
            "funcEndAddr": "0x409b76L", 
            "funcName": "sub_409B00"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409B80(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a1 + 112);\n    if ( *(_QWORD *)(a2 + 112) <= v5 )\n    {\n      if ( *(_QWORD *)(a2 + 112) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a1 + 120) - *(_DWORD *)(a2 + 120);\n      if ( !result )\n        result = sub_4050D0(*(char **)a2, *(char **)a1);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409b80L", 
            "funcEndAddr": "0x409bf6L", 
            "funcName": "sub_409B80"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409C00(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a1 + 96);\n    if ( *(_QWORD *)(a2 + 96) <= v5 )\n    {\n      if ( *(_QWORD *)(a2 + 96) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a1 + 104) - *(_DWORD *)(a2 + 104);\n      if ( !result )\n        result = sub_4050D0(*(char **)a2, *(char **)a1);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409c00L", 
            "funcEndAddr": "0x409c76L", 
            "funcName": "sub_409C00"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409C80(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a2 + 112);\n    if ( *(_QWORD *)(a1 + 112) <= v5 )\n    {\n      if ( *(_QWORD *)(a1 + 112) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a2 + 120) - *(_DWORD *)(a1 + 120);\n      if ( !result )\n        result = sub_4050D0(*(char **)a1, *(char **)a2);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409c80L", 
            "funcEndAddr": "0x409cf6L", 
            "funcName": "sub_409C80"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409D00(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a1 + 128);\n    if ( *(_QWORD *)(a2 + 128) <= v5 )\n    {\n      if ( *(_QWORD *)(a2 + 128) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a1 + 136) - *(_DWORD *)(a2 + 136);\n      if ( !result )\n        result = sub_4050D0(*(char **)a2, *(char **)a1);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409d00L", 
            "funcEndAddr": "0x409d86L", 
            "funcName": "sub_409D00"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409D90(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a2 + 128);\n    if ( *(_QWORD *)(a1 + 128) <= v5 )\n    {\n      if ( *(_QWORD *)(a1 + 128) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a2 + 136) - *(_DWORD *)(a1 + 136);\n      if ( !result )\n        result = sub_4050D0(*(char **)a1, *(char **)a2);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409d90L", 
            "funcEndAddr": "0x409e16L", 
            "funcName": "sub_409D90"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409E20(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a1 + 96);\n  if ( *(_QWORD *)(a2 + 96) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a2 + 96) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a1 + 104) - *(_DWORD *)(a2 + 104);\n  if ( !result )\n    result = strcmp(*(const char **)a2, *(const char **)a1);\n  return result;\n}\n", 
            "funcStartAddr": "0x409e20L", 
            "funcEndAddr": "0x409e56L", 
            "funcName": "sub_409E20"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409E60(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a1 + 128);\n  if ( *(_QWORD *)(a2 + 128) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a2 + 128) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a1 + 136) - *(_DWORD *)(a2 + 136);\n  if ( !result )\n    result = strcmp(*(const char **)a2, *(const char **)a1);\n  return result;\n}\n", 
            "funcStartAddr": "0x409e60L", 
            "funcEndAddr": "0x409ea6L", 
            "funcName": "sub_409E60"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409EB0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a1 + 112);\n  if ( *(_QWORD *)(a2 + 112) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a2 + 112) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a1 + 120) - *(_DWORD *)(a2 + 120);\n  if ( !result )\n    result = strcmp(*(const char **)a2, *(const char **)a1);\n  return result;\n}\n", 
            "funcStartAddr": "0x409eb0L", 
            "funcEndAddr": "0x409ee6L", 
            "funcName": "sub_409EB0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409EF0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a2 + 96);\n  if ( *(_QWORD *)(a1 + 96) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a1 + 96) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a2 + 104) - *(_DWORD *)(a1 + 104);\n  if ( !result )\n    result = strcmp(*(const char **)a1, *(const char **)a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x409ef0L", 
            "funcEndAddr": "0x409f26L", 
            "funcName": "sub_409EF0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409F30(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a2 + 128);\n  if ( *(_QWORD *)(a1 + 128) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a1 + 128) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a2 + 136) - *(_DWORD *)(a1 + 136);\n  if ( !result )\n    result = strcmp(*(const char **)a1, *(const char **)a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x409f30L", 
            "funcEndAddr": "0x409f76L", 
            "funcName": "sub_409F30"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409F80(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  int result; // eax\n\n  v2 = *(_QWORD *)(a2 + 112);\n  if ( *(_QWORD *)(a1 + 112) > v2 )\n    return -1;\n  if ( *(_QWORD *)(a1 + 112) < v2 )\n    return 1;\n  result = *(unsigned __int64 *)(a2 + 120) - *(_DWORD *)(a1 + 120);\n  if ( !result )\n    result = strcmp(*(const char **)a1, *(const char **)a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x409f80L", 
            "funcEndAddr": "0x409fb6L", 
            "funcName": "sub_409F80"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409FC0(const char **a1, const char **a2)\n{\n  char *v2; // rbx\n  char *v3; // rax\n  int result; // eax\n\n  v2 = strrchr(*a1, 46);\n  v3 = strrchr(*a2, 46);\n  if ( !v3 )\n    v3 = \"\";\n  if ( !v2 )\n    v2 = \"\";\n  result = sub_4050D0(v2, v3);\n  if ( !result )\n    result = sub_4050D0((char *)*a1, (char *)*a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x409fc0L", 
            "funcEndAddr": "0x40a025L", 
            "funcName": "sub_409FC0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40A030(const char **a1, const char **a2)\n{\n  char *v2; // rbx\n  char *v3; // rax\n  int result; // eax\n\n  v2 = strrchr(*a2, 46);\n  v3 = strrchr(*a1, 46);\n  if ( !v3 )\n    v3 = \"\";\n  if ( !v2 )\n    v2 = \"\";\n  result = sub_4050D0(v2, v3);\n  if ( !result )\n    result = sub_4050D0((char *)*a2, (char *)*a1);\n  return result;\n}\n", 
            "funcStartAddr": "0x40a030L", 
            "funcEndAddr": "0x40a095L", 
            "funcName": "sub_40A030"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40A0A0(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  char *v5; // r12\n  char *v6; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    return -1;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = strrchr(*(const char **)a2, 46);\n    v6 = strrchr(*(const char **)a1, 46);\n    if ( !v6 )\n      v6 = \"\";\n    if ( !v5 )\n      v5 = \"\";\n    result = sub_4050D0(v5, v6);\n    if ( !result )\n      result = sub_4050D0(*(char **)a2, *(char **)a1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a0a0L", 
            "funcEndAddr": "0x40a146L", 
            "funcName": "sub_40A0A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40A150(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  char *v5; // r12\n  char *v6; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    return -1;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = strrchr(*(const char **)a1, 46);\n    v6 = strrchr(*(const char **)a2, 46);\n    if ( !v6 )\n      v6 = \"\";\n    if ( !v5 )\n      v5 = \"\";\n    result = sub_4050D0(v5, v6);\n    if ( !result )\n      result = sub_4050D0(*(char **)a1, *(char **)a2);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a150L", 
            "funcEndAddr": "0x40a1f6L", 
            "funcName": "sub_40A150"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40A200(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a1 + 112);\n    if ( *(_QWORD *)(a2 + 112) <= v5 )\n    {\n      if ( *(_QWORD *)(a2 + 112) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a1 + 120) - *(_DWORD *)(a2 + 120);\n      if ( !result )\n        result = strcmp(*(const char **)a2, *(const char **)a1);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a200L", 
            "funcEndAddr": "0x40a276L", 
            "funcName": "sub_40A200"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40A280(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a1 + 128);\n    if ( *(_QWORD *)(a2 + 128) <= v5 )\n    {\n      if ( *(_QWORD *)(a2 + 128) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a1 + 136) - *(_DWORD *)(a2 + 136);\n      if ( !result )\n        result = strcmp(*(const char **)a2, *(const char **)a1);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a280L", 
            "funcEndAddr": "0x40a306L", 
            "funcName": "sub_40A280"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40A310(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  __int64 v5; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    goto LABEL_11;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(_QWORD *)(a1 + 96);\n    if ( *(_QWORD *)(a2 + 96) <= v5 )\n    {\n      if ( *(_QWORD *)(a2 + 96) < v5 )\n        return 1;\n      result = *(unsigned __int64 *)(a1 + 104) - *(_DWORD *)(a2 + 104);\n      if ( !result )\n        result = strcmp(*(const char **)a2, *(const char **)a1);\n      return result;\n    }\nLABEL_11:\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a310L", 
            "funcEndAddr": "0x40a386L", 
            "funcName": "sub_40A310"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40A390(const char **a1, const char **a2)\n{\n  const char *v2; // rbp\n  char *v3; // rax\n  const char *v4; // r12\n  const char *v5; // rbx\n  char *v6; // rax\n  int result; // eax\n\n  v2 = *a2;\n  v3 = strrchr(*a2, 46);\n  v4 = *a1;\n  v5 = v3;\n  v6 = strrchr(*a1, 46);\n  if ( v6 )\n  {\n    if ( !v5 )\n      v5 = \"\";\n  }\n  else\n  {\n    v6 = \"\\x1B]8;;\\a\" + 6;\n    if ( !v5 )\n      return strcmp(v2, v4);\n  }\n  result = strcmp(v5, v6);\n  if ( !result )\n    return strcmp(v2, v4);\n  return result;\n}\n", 
            "funcStartAddr": "0x40a390L", 
            "funcEndAddr": "0x40a3f9L", 
            "funcName": "sub_40A390"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40A400(const char **a1, const char **a2)\n{\n  const char *v2; // rbp\n  char *v3; // rax\n  const char *v4; // r12\n  const char *v5; // rbx\n  char *v6; // rax\n  int result; // eax\n\n  v2 = *a1;\n  v3 = strrchr(*a1, 46);\n  v4 = *a2;\n  v5 = v3;\n  v6 = strrchr(*a2, 46);\n  if ( v6 )\n  {\n    if ( !v5 )\n      v5 = \"\";\n  }\n  else\n  {\n    v6 = \"\\x1B]8;;\\a\" + 6;\n    if ( !v5 )\n      return strcmp(v2, v4);\n  }\n  result = strcmp(v5, v6);\n  if ( !result )\n    return strcmp(v2, v4);\n  return result;\n}\n", 
            "funcStartAddr": "0x40a400L", 
            "funcEndAddr": "0x40a469L", 
            "funcName": "sub_40A400"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40A470(__int64 a1, __int64 a2)\n{\n  bool v2; // cl\n  bool v3; // dl\n  int result; // eax\n  const char *v5; // r12\n  char *v6; // rax\n  const char *v7; // rbx\n  const char *v8; // rbp\n  char *v9; // rax\n\n  v2 = *(_DWORD *)(a1 + 168) == 9 || *(_DWORD *)(a1 + 168) == 3;\n  v3 = *(_DWORD *)(a2 + 168) == 3 || *(_DWORD *)(a2 + 168) == 9;\n  if ( !v3 && v2 )\n    return -1;\n  if ( v2 || (result = 1, !v3) )\n  {\n    v5 = *(const char **)a1;\n    v6 = strrchr(*(const char **)a1, 46);\n    v7 = *(const char **)a2;\n    v8 = v6;\n    v9 = strrchr(*(const char **)a2, 46);\n    if ( v9 )\n    {\n      if ( !v8 )\n        v8 = \"\";\n    }\n    else\n    {\n      v9 = \"\\x1B]8;;\\a\" + 6;\n      if ( !v8 )\n        goto LABEL_11;\n    }\n    result = strcmp(v8, v9);\n    if ( result )\n      return result;\nLABEL_11:\n    result = strcmp(v5, v7);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a470L", 
            "funcEndAddr": "0x40a526L", 
            "funcName": "sub_40A470"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_40A530(int status)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbx\n  char *v5; // rax\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rbx\n  char *v9; // rax\n  FILE *v10; // rbx\n  char *v11; // rax\n  FILE *v12; // rbx\n  char *v13; // rax\n  FILE *v14; // rbx\n  char *v15; // rax\n  FILE *v16; // rbx\n  char *v17; // rax\n  FILE *v18; // rbx\n  char *v19; // rax\n  FILE *v20; // rbx\n  char *v21; // rax\n  FILE *v22; // rbx\n  char *v23; // rax\n  FILE *v24; // rbx\n  char *v25; // rax\n  FILE *v26; // rbx\n  char *v27; // rax\n  FILE *v28; // rbx\n  char *v29; // rax\n  FILE *v30; // rbx\n  char *v31; // rax\n  FILE *v32; // rbx\n  char *v33; // rax\n  FILE *v34; // rbx\n  char *v35; // rax\n  FILE *v36; // rbx\n  char *v37; // rax\n  FILE *v38; // rbx\n  char *v39; // rax\n  FILE *v40; // rbx\n  char *v41; // rax\n  FILE *v42; // rbx\n  char *v43; // rax\n  FILE *v44; // rbx\n  char *v45; // rax\n  FILE *v46; // rbx\n  char *v47; // rax\n  FILE *v48; // rbx\n  char *v49; // rax\n  FILE *v50; // rbx\n  char *v51; // rax\n  FILE *v52; // rbx\n  char *v53; // rax\n  FILE *v54; // rbx\n  char *v55; // rax\n  FILE *v56; // rbx\n  char *v57; // rax\n  FILE *v58; // rbx\n  char *v59; // rax\n  FILE *v60; // rbx\n  char *v61; // rax\n  FILE *v62; // rbx\n  char *v63; // rax\n  const char *v64; // rbp\n  const char *v65; // rsi\n  char **v66; // rbx\n  const char *v67; // rbx\n  char *v68; // rax\n  char *v69; // rax\n  char *v70; // rax\n  char *v71; // rax\n  char *v72; // rax\n  char *v73; // rax\n  char *v74; // rax\n  char *v75; // rax\n  char *v76; // [rsp+0h] [rbp-88h]\n  const char *v77; // [rsp+8h] [rbp-80h]\n  const char *v78; // [rsp+10h] [rbp-78h]\n  const char *v79; // [rsp+18h] [rbp-70h]\n  const char *v80; // [rsp+20h] [rbp-68h]\n  const char *v81; // [rsp+28h] [rbp-60h]\n  const char *v82; // [rsp+30h] [rbp-58h]\n  const char *v83; // [rsp+38h] [rbp-50h]\n  const char *v84; // [rsp+40h] [rbp-48h]\n  const char *v85; // [rsp+48h] [rbp-40h]\n  const char *v86; // [rsp+50h] [rbp-38h]\n  const char *v87; // [rsp+58h] [rbp-30h]\n  __int64 v88; // [rsp+60h] [rbp-28h]\n  __int64 v89; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_6257C0;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"List information about the FILEs (the current directory by default).\\n\"\n         \"Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"  -a, --all                  do not ignore entries starting with .\\n\"\n         \"  -A, --almost-all           do not list implied . and ..\\n\"\n         \"      --author               with -l, print the author of each file\\n\"\n         \"  -b, --escape               print C-style escapes for nongraphic characters\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"      --block-size=SIZE      with -l, scale sizes by SIZE when printing them;\\n\"\n          \"                               e.g., '--block-size=M'; see SIZE format below\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  -B, --ignore-backups       do not list implied entries ending with ~\\n\"\n          \"  -c                         with -lt: sort by, and show, ctime (time of last\\n\"\n          \"                               modification of file status information);\\n\"\n          \"                               with -l: show ctime and sort by name;\\n\"\n          \"                               otherwise: sort by ctime, newest first\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"  -C                         list entries by columns\\n\"\n          \"      --color[=WHEN]         colorize the output; WHEN can be 'always' (default\\n\"\n          \"                               if omitted), 'auto', or 'never'; more info below\\n\"\n          \"  -d, --directory            list directories themselves, not their contents\\n\"\n          \"  -D, --dired                generate output designed for Emacs' dired mode\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"  -f                         do not sort, enable -aU, disable -ls --color\\n\"\n          \"  -F, --classify             append indicator (one of */=>@|) to entries\\n\"\n          \"      --file-type            likewise, except do not append '*'\\n\"\n          \"      --format=WORD          across -x, commas -m, horizontal -x, long -l,\\n\"\n          \"                               single-column -1, verbose -l, vertical -C\\n\"\n          \"      --full-time            like -l --time-style=full-iso\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \"  -g                         like -l, but do not list owner\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(\n          0LL,\n          \"      --group-directories-first\\n\"\n          \"                             group directories before files;\\n\"\n          \"                               can be augmented with a --sort option, but any\\n\"\n          \"                               use of --sort=none (-U) disables grouping\\n\",\n          5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(0LL, \"  -G, --no-group             in a long listing, don't print group names\\n\", 5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(\n          0LL,\n          \"  -h, --human-readable       with -l and -s, print sizes like 1K 234M 2G etc.\\n\"\n          \"      --si                   likewise, but use powers of 1000 not 1024\\n\",\n          5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(\n          0LL,\n          \"  -H, --dereference-command-line\\n\"\n          \"                             follow symbolic links listed on the command line\\n\"\n          \"      --dereference-command-line-symlink-to-dir\\n\"\n          \"                             follow each command line symbolic link\\n\"\n          \"                               that points to a directory\\n\"\n          \"      --hide=PATTERN         do not list implied entries matching shell PATTERN\\n\"\n          \"                               (overridden by -a or -A)\\n\",\n          5);\n  fputs_unlocked(v27, v26);\n  v28 = stdout;\n  v29 = dcgettext(\n          0LL,\n          \"      --hyperlink[=WHEN]     hyperlink file names; WHEN can be 'always'\\n\"\n          \"                               (default if omitted), 'auto', or 'never'\\n\",\n          5);\n  fputs_unlocked(v29, v28);\n  v30 = stdout;\n  v31 = dcgettext(\n          0LL,\n          \"      --indicator-style=WORD  append indicator with style WORD to entry names:\\n\"\n          \"                               none (default), slash (-p),\\n\"\n          \"                               file-type (--file-type), classify (-F)\\n\"\n          \"  -i, --inode                print the index number of each file\\n\"\n          \"  -I, --ignore=PATTERN       do not list implied entries matching shell PATTERN\\n\",\n          5);\n  fputs_unlocked(v31, v30);\n  v32 = stdout;\n  v33 = dcgettext(\n          0LL,\n          \"  -k, --kibibytes            default to 1024-byte blocks for disk usage;\\n\"\n          \"                               used only with -s and per directory totals\\n\",\n          5);\n  fputs_unlocked(v33, v32);\n  v34 = stdout;\n  v35 = dcgettext(\n          0LL,\n          \"  -l                         use a long listing format\\n\"\n          \"  -L, --dereference          when showing file information for a symbolic\\n\"\n          \"                               link, show information for the file the link\\n\"\n          \"                               references rather than for the link itself\\n\"\n          \"  -m                         fill width with a comma separated list of entries\\n\",\n          5);\n  fputs_unlocked(v35, v34);\n  v36 = stdout;\n  v37 = dcgettext(\n          0LL,\n          \"  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\\n\"\n          \"  -N, --literal              print entry names without quoting\\n\"\n          \"  -o                         like -l, but do not list group information\\n\"\n          \"  -p, --indicator-style=slash\\n\"\n          \"                             append / indicator to directories\\n\",\n          5);\n  fputs_unlocked(v37, v36);\n  v38 = stdout;\n  v39 = dcgettext(\n          0LL,\n          \"  -q, --hide-control-chars   print ? instead of nongraphic characters\\n\"\n          \"      --show-control-chars   show nongraphic characters as-is (the default,\\n\"\n          \"                               unless program is 'ls' and output is a terminal)\\n\"\n          \"  -Q, --quote-name           enclose entry names in double quotes\\n\"\n          \"      --quoting-style=WORD   use quoting style WORD for entry names:\\n\"\n          \"                               literal, locale, shell, shell-always,\\n\"\n          \"                               shell-escape, shell-escape-always, c, escape\\n\"\n          \"                               (overrides QUOTING_STYLE environment variable)\\n\",\n          5);\n  fputs_unlocked(v39, v38);\n  v40 = stdout;\n  v41 = dcgettext(\n          0LL,\n          \"  -r, --reverse              reverse order while sorting\\n\"\n          \"  -R, --recursive            list subdirectories recursively\\n\"\n          \"  -s, --size                 print the allocated size of each file, in blocks\\n\",\n          5);\n  fputs_unlocked(v41, v40);\n  v42 = stdout;\n  v43 = dcgettext(\n          0LL,\n          \"  -S                         sort by file size, largest first\\n\"\n          \"      --sort=WORD            sort by WORD instead of name: none (-U), size (-S),\\n\"\n          \"                               time (-t), version (-v), extension (-X)\\n\"\n          \"      --time=WORD            with -l, show time as WORD instead of default\\n\"\n          \"                               modification time: atime or access or use (-u);\\n\"\n          \"                               ctime or status (-c); also use specified time\\n\"\n          \"                               as sort key if --sort=time (newest first)\\n\",\n          5);\n  fputs_unlocked(v43, v42);\n  v44 = stdout;\n  v45 = dcgettext(0LL, \"      --time-style=TIME_STYLE  time/date format with -l; see TIME_STYLE below\\n\", 5);\n  fputs_unlocked(v45, v44);\n  v46 = stdout;\n  v47 = dcgettext(\n          0LL,\n          \"  -t                         sort by modification time, newest first\\n\"\n          \"  -T, --tabsize=COLS         assume tab stops at each COLS instead of 8\\n\",\n          5);\n  fputs_unlocked(v47, v46);\n  v48 = stdout;\n  v49 = dcgettext(\n          0LL,\n          \"  -u                         with -lt: sort by, and show, access time;\\n\"\n          \"                               with -l: show access time and sort by name;\\n\"\n          \"                               otherwise: sort by access time, newest first\\n\"\n          \"  -U                         do not sort; list entries in directory order\\n\"\n          \"  -v                         natural sort of (version) numbers within text\\n\",\n          5);\n  fputs_unlocked(v49, v48);\n  v50 = stdout;\n  v51 = dcgettext(\n          0LL,\n          \"  -w, --width=COLS           set output width to COLS.  0 means no limit\\n\"\n          \"  -x                         list entries by lines instead of by columns\\n\"\n          \"  -X                         sort alphabetically by entry extension\\n\"\n          \"  -Z, --context              print any security context of each file\\n\"\n          \"  -1                         list one file per line.  Avoid '\\\\n' with -q or -b\\n\",\n          5);\n  fputs_unlocked(v51, v50);\n  v52 = stdout;\n  v53 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v53, v52);\n  v54 = stdout;\n  v55 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v55, v54);\n  v56 = stdout;\n  v57 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The SIZE argument is an integer and optional unit (example: 10K is 10*1024).\\n\"\n          \"Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\\n\",\n          5);\n  fputs_unlocked(v57, v56);\n  v58 = stdout;\n  v59 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT.\\n\"\n          \"FORMAT is interpreted like in date(1).  If FORMAT is FORMAT1<newline>FORMAT2,\\n\"\n          \"then FORMAT1 applies to non-recent files and FORMAT2 to recent files.\\n\"\n          \"TIME_STYLE prefixed with 'posix-' takes effect only outside the POSIX locale.\\n\"\n          \"Also the TIME_STYLE environment variable sets the default style to use.\\n\",\n          5);\n  fputs_unlocked(v59, v58);\n  v60 = stdout;\n  v61 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Using color to distinguish file types is disabled both by default and\\n\"\n          \"with --color=never.  With --color=auto, ls emits color codes only when\\n\"\n          \"standard output is connected to a terminal.  The LS_COLORS environment\\n\"\n          \"variable can change the settings.  Use the dircolors command to set it.\\n\",\n          5);\n  fputs_unlocked(v61, v60);\n  v62 = stdout;\n  v63 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Exit status:\\n\"\n          \" 0  if OK,\\n\"\n          \" 1  if minor problems (e.g., cannot access subdirectory),\\n\"\n          \" 2  if serious trouble (e.g., cannot access command-line argument).\\n\",\n          5);\n  fputs_unlocked(v63, v62);\n  if ( dword_6245AC == 1 )\n  {\n    v64 = \"coreutils\" + 7;\n  }\n  else\n  {\n    v64 = \"vdir\" + 1;\n    if ( dword_6245AC != 2 )\n      v64 = \"vdir\";\n  }\n  v76 = \"[\";\n  v65 = \"[\";\n  v66 = &v76;\n  v77 = \"test invocation\";\n  v78 = \"coreutils\";\n  v79 = \"Multi-call invocation\";\n  v80 = \"sha224sum\";\n  v81 = \"sha2 utilities\";\n  v82 = \"sha256sum\";\n  v83 = \"sha2 utilities\";\n  v84 = \"sha384sum\";\n  v85 = \"sha2 utilities\";\n  v86 = \"sha512sum\";\n  v87 = \"sha2 utilities\";\n  v88 = 0LL;\n  v89 = 0LL;\n  do\n  {\n    if ( !strcmp(v64, v65) )\n      break;\n    v66 += 2;\n    v65 = *v66;\n  }\n  while ( *v66 );\n  v67 = v66[1];\n  if ( v67 )\n  {\n    v68 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v68, &unk_41B1AD);\n    v69 = setlocale(5, 0LL);\n    if ( !v69 || !strncmp(v69, \"en_\", 3uLL) )\n      goto LABEL_13;\n  }\n  else\n  {\n    v73 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v73, &unk_41B1AD);\n    v74 = setlocale(5, 0LL);\n    if ( !v74 || !strncmp(v74, \"en_\", 3uLL) )\n    {\n      v67 = v64;\n      v75 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v75, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_14;\n    }\n    v67 = v64;\n  }\n  v72 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v72, v64);\nLABEL_13:\n  v70 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v70, \"https://www.gnu.org/software/coreutils/\");\nLABEL_14:\n  v71 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v71, v67);\nLABEL_3:\n  exit(status);\n}\n", 
            "funcStartAddr": "0x40a530L", 
            "funcEndAddr": "0x40abe9L", 
            "funcName": "sub_40A530"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40ABF0(char *path, unsigned __int64 a2)\n{\n  size_t v2; // rbx\n  char *v3; // rax\n  char *v4; // rbp\n  ssize_t v5; // r12\n  char *v7; // rdi\n\n  v2 = a2 + 1;\n  if ( a2 >= 0x401 )\n    v2 = 1025LL;\n  while ( 2 )\n  {\n    v3 = (char *)malloc(v2);\n    v4 = v3;\n    if ( v3 )\n    {\n      while ( 1 )\n      {\n        v5 = readlink(path, v3, v2);\n        if ( v5 < 0 && *__errno_location() != 34 )\n        {\n          v7 = v4;\n          v4 = 0LL;\n          free(v7);\n          return v4;\n        }\n        if ( v2 > v5 )\n        {\n          v4[v5] = 0;\n          return v4;\n        }\n        free(v4);\n        if ( v2 > 0x3FFFFFFFFFFFFFFFLL )\n          break;\n        v2 *= 2LL;\n        v3 = (char *)malloc(v2);\n        v4 = v3;\n        if ( !v3 )\n          return v4;\n      }\n      if ( v2 <= 0x7FFFFFFFFFFFFFFELL )\n      {\n        v2 = 0x7FFFFFFFFFFFFFFFLL;\n        continue;\n      }\n      v4 = 0LL;\n      *__errno_location() = 12;\n    }\n    break;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40abf0L", 
            "funcEndAddr": "0x40acdfL", 
            "funcName": "sub_40ABF0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_40ACE0()\n{\n  sub_40A530(1);\n}\n", 
            "funcStartAddr": "0x40ace0L", 
            "funcEndAddr": "0x40aceaL", 
            "funcName": "sub_40ACE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40ACF0(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  size_t v4; // r13\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n  char *v16; // [rsp+18h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  v16 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += v4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( v16 )\n      {\n        v10 = memcmp(&v16[v4 * v14], v5, v4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += v4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    v12 = v14;\n  return v12;\n}\n", 
            "funcStartAddr": "0x40acf0L", 
            "funcEndAddr": "0x40ae06L", 
            "funcName": "sub_40ACF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40AE10(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_412270(1LL, a1);\n  v5 = sub_411F60(0LL, 8LL, a2);\n  error(0, 0, v3, v5, v4);\n}\n", 
            "funcStartAddr": "0x40ae10L", 
            "funcEndAddr": "0x40ae81L", 
            "funcName": "sub_40AE10"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40AE90(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  size_t v4; // r13\n  char *v5; // rbp\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  __int64 v11; // rax\n  __int64 v12; // rax\n  char *v13; // rax\n\n  v3 = 0LL;\n  v4 = a3;\n  v5 = a2;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, v5, v4) )\n    {\n      ++v9;\n      v3 = v5;\n      v5 += v4;\n      v11 = sub_412290(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    v5 += v4;\n    v12 = sub_412290(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  v13 = stderr->_IO_write_ptr;\n  if ( v13 >= stderr->_IO_write_end )\n  {\n    LODWORD(v13) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = v13 + 1;\n    *v13 = 10;\n  }\n  return (int)v13;\n}\n", 
            "funcStartAddr": "0x40ae90L", 
            "funcEndAddr": "0x40afa8L", 
            "funcName": "sub_40AE90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AFB0(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  size_t v6; // r15\n  void (*v7)(void); // r13\n  char *v8; // rbp\n  __int64 *v9; // rbx\n  __int64 result; // rax\n\n  v6 = a5;\n  v7 = a6;\n  v8 = a4;\n  v9 = (__int64 *)a3;\n  result = sub_40ACF0(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_40AE10(a1, (__int64)a2, result);\n    sub_40AE90(v9, v8, v6);\n    v7();\n    result = -1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40afb0L", 
            "funcEndAddr": "0x40b020L", 
            "funcName": "sub_40AFB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B020(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  size_t v5; // r12\n  __int64 *v6; // rbx\n  char *v7; // rbp\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v5 = a4;\n    v6 = a2 + 1;\n    v7 = a3;\n    do\n    {\n      if ( !memcmp(s1, v7, v5) )\n        break;\n      v4 = *v6;\n      v7 += v5;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40b020L", 
            "funcEndAddr": "0x40b06dL", 
            "funcName": "sub_40B020"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B070(void *src, char a2)\n{\n  _BYTE *v2; // r15\n  const char *v3; // rax\n  _BYTE *v4; // r12\n  size_t v5; // rax\n  size_t v6; // rbx\n  _BYTE *v7; // rbx\n  unsigned __int64 v8; // rbp\n  char v9; // al\n  char v10; // dl\n  _BYTE *i; // r13\n  _BYTE *v12; // r14\n  signed __int64 v13; // r8\n  unsigned __int64 v14; // rbp\n  signed __int64 v15; // rbx\n  __int64 v16; // rax\n  __int64 v17; // rbp\n  __int64 v18; // rax\n  bool v19; // al\n  int *v20; // rdx\n  int v21; // ecx\n  size_t v22; // rax\n  int v23; // eax\n  __int64 v24; // rax\n  char *v26; // rax\n  char *v27; // r15\n  const char *v28; // rdi\n  size_t v29; // r13\n  size_t v30; // rax\n  size_t v31; // rdx\n  unsigned __int64 v32; // r8\n  int *v33; // rax\n  int v34; // ecx\n  int *v35; // rdx\n  int *v36; // rdx\n  int v37; // ecx\n  __int64 v38; // rdx\n  __int64 v39; // rdx\n  int *v40; // rax\n  __int64 v41; // rax\n  __int64 v42; // rax\n  __int64 v43; // rax\n  bool v44; // zf\n  signed __int64 v45; // [rsp+8h] [rbp-100h]\n  int *v46; // [rsp+8h] [rbp-100h]\n  int *v47; // [rsp+8h] [rbp-100h]\n  int *v48; // [rsp+8h] [rbp-100h]\n  int *v49; // [rsp+8h] [rbp-100h]\n  size_t v50; // [rsp+8h] [rbp-100h]\n  __int64 v51; // [rsp+8h] [rbp-100h]\n  int v52; // [rsp+14h] [rbp-F4h]\n  int v53; // [rsp+14h] [rbp-F4h]\n  int v54; // [rsp+14h] [rbp-F4h]\n  int v55; // [rsp+14h] [rbp-F4h]\n  void *v56; // [rsp+18h] [rbp-F0h]\n  void *v57; // [rsp+20h] [rbp-E8h]\n  size_t v58; // [rsp+20h] [rbp-E8h]\n  char *ptr; // [rsp+28h] [rbp-E0h]\n  unsigned __int64 v60; // [rsp+30h] [rbp-D8h]\n  int v61; // [rsp+3Ch] [rbp-CCh]\n  struct stat stat_buf; // [rsp+40h] [rbp-C8h]\n\n  v52 = a2 & 3;\n  if ( (v52 - 1) & (unsigned __int8)v52 || (v2 = src) == 0LL )\n  {\n    v4 = 0LL;\n    *__errno_location() = 22;\n    return v4;\n  }\n  if ( !*(_BYTE *)src )\n  {\n    v4 = 0LL;\n    *__errno_location() = 2;\n    return v4;\n  }\n  if ( *(_BYTE *)src == 47 )\n  {\n    v4 = (_BYTE *)sub_412980(4096LL);\n    v8 = (unsigned __int64)(v4 + 4096);\n    v7 = v4 + 1;\n    *v4 = 47;\n  }\n  else\n  {\n    v3 = (const char *)sub_412D10();\n    v4 = v3;\n    if ( !v3 )\n      return v4;\n    v5 = strlen(v3);\n    v6 = v5;\n    if ( v5 <= 0xFFF )\n    {\n      v4 = (_BYTE *)sub_4129E0(v4, 4096LL);\n      v7 = &v4[v6];\n      v8 = (unsigned __int64)(v4 + 4096);\n    }\n    else\n    {\n      v7 = &v4[v5];\n      v8 = (unsigned __int64)&v4[v5];\n    }\n  }\n  v57 = src;\n  v9 = *(_BYTE *)src;\n  v56 = 0LL;\n  v60 = 0LL;\n  ptr = 0LL;\n  while ( v9 )\n  {\n    v10 = v9;\n    if ( v9 == 47 )\n    {\n      do\n        v10 = *++v2;\n      while ( *v2 == 47 );\n      if ( !v10 )\n        break;\n    }\n    for ( i = v2; ; ++i )\n    {\n      v9 = i[1];\n      v12 = i + 1;\n      if ( !v9 || v9 == 47 )\n        break;\n    }\n    if ( v12 == v2 )\n      break;\n    v13 = v12 - v2;\n    if ( v12 - v2 == 1 )\n    {\n      if ( v10 == 46 )\n        goto LABEL_46;\n      goto LABEL_21;\n    }\n    if ( v10 != 46 || v13 != 2 || v2[1] != 46 )\n    {\nLABEL_21:\n      if ( *(v7 - 1) != 47 )\n        *v7++ = 47;\n      if ( v8 <= (unsigned __int64)&v7[v13] )\n      {\n        v14 = v8 - (_QWORD)v4;\n        v15 = v7 - v4;\n        v16 = v13 + v14 + 1;\n        v17 = v14 + 4096;\n        if ( v13 >= 4096 )\n          v17 = v16;\n        v18 = sub_4129E0(v4, v17);\n        v13 = v12 - v2;\n        v4 = (_BYTE *)v18;\n        v8 = v18 + v17;\n        v7 = (_BYTE *)(v18 + v15);\n      }\n      v45 = v13;\n      memcpy(v7, v2, v13);\n      v7 += v45;\n      *v7 = 0;\n      if ( v52 == 2 && a2 & 4 )\n      {\nLABEL_29:\n        stat_buf.st_mode = 0;\nLABEL_30:\n        if ( *v12 && v52 != 2 )\n        {\n          v40 = __errno_location();\n          v21 = 20;\n          v20 = v40;\nLABEL_79:\n          v55 = v21;\n          v49 = v20;\n          free(ptr);\n          free(v4);\n          v36 = v49;\n          v37 = v55;\n          if ( v56 )\n            goto LABEL_68;\n          goto LABEL_69;\n        }\nLABEL_32:\n        v9 = *v12;\n        v2 = v12;\n      }\n      else\n      {\n        if ( a2 & 4 )\n          v19 = __xstat(1, v4, &stat_buf) != 0;\n        else\n          v19 = __lxstat(1, v4, &stat_buf) != 0;\n        if ( v19 )\n        {\n          v20 = __errno_location();\n          v21 = *v20;\n          if ( !(a2 & 3) )\n            goto LABEL_79;\n          if ( v52 != 1 )\n            goto LABEL_29;\n          v61 = *v20;\n          v46 = v20;\n          v22 = strspn(i + 1, \"/\");\n          v20 = v46;\n          v21 = v61;\n          if ( v12[v22] || v61 != 2 )\n            goto LABEL_79;\n        }\n        else\n        {\n          v23 = stat_buf.st_mode & 0xF000;\n          if ( v23 != 40960 )\n          {\n            if ( v23 == 0x4000 )\n              goto LABEL_32;\n            goto LABEL_30;\n          }\n          if ( !v56 )\n          {\n            v56 = (void *)sub_40CA80(7LL, 0LL, sub_40D440, sub_40D4B0, sub_40D4F0);\n            if ( !v56 )\n              sub_412BD0(7LL, 0LL, v39);\n          }\n          if ( (unsigned __int8)sub_40B9A0(v56, v57, &stat_buf) )\n          {\n            if ( v52 != 2 )\n            {\n              v33 = __errno_location();\n              v34 = 40;\n              v35 = v33;\nLABEL_67:\n              v53 = v34;\n              v47 = v35;\n              free(ptr);\n              free(v4);\n              v36 = v47;\n              v37 = v53;\nLABEL_68:\n              v54 = v37;\n              v48 = v36;\n              sub_40CCC0(v56);\n              v37 = v54;\n              v36 = v48;\nLABEL_69:\n              *v36 = v37;\n              return 0LL;\n            }\n          }\n          else\n          {\n            sub_40B910(v56, v57, &stat_buf);\n            v26 = sub_40ABF0(v4, stat_buf.st_size);\n            v27 = v26;\n            if ( v26 )\n            {\n              v28 = i + 1;\n              v29 = strlen(v26);\n              v30 = strlen(v28);\n              v31 = v30;\n              v32 = v29 + v30 + 1;\n              if ( v60 )\n              {\n                if ( v32 > v60 )\n                {\n                  v51 = v29 + v30 + 1;\n                  v58 = v30;\n                  v43 = sub_4129E0(ptr, v51);\n                  v31 = v58;\n                  ptr = (char *)v43;\n                  v60 = v51;\n                }\n              }\n              else\n              {\n                v50 = v30;\n                v41 = 4096LL;\n                if ( v32 >= 0x1000 )\n                  v41 = v32;\n                v60 = v41;\n                v42 = sub_412980(v41);\n                v31 = v50;\n                ptr = (char *)v42;\n              }\n              memmove(&ptr[v29], v12, v31 + 1);\n              v12 = memcpy(ptr, v27, v29);\n              v57 = v12;\n              if ( *v27 == 47 )\n              {\n                *v4 = 47;\n                v7 = v4 + 1;\n              }\n              else if ( v7 > v4 + 1 )\n              {\n                if ( v4 >= v7 - 1 )\n                {\n                  --v7;\n                }\n                else\n                {\n                  v44 = *(v7-- - 2) == 47;\n                  if ( !v44 )\n                  {\n                    do\n                      --v7;\n                    while ( v4 != v7 && *(v7 - 1) != 47 );\n                  }\n                }\n              }\n              free(v27);\n              goto LABEL_32;\n            }\n            v35 = __errno_location();\n            v34 = *v35;\n            if ( v52 != 2 || v34 == 12 )\n              goto LABEL_67;\n          }\n        }\n        v9 = i[1];\n        v2 = i + 1;\n      }\n    }\n    else\n    {\n      v2 = i + 1;\n      if ( v7 > v4 + 1 )\n      {\n        v38 = (__int64)(v7 - 1);\n        if ( v4 < v7 - 1 && *(v7 - 2) != 47 )\n        {\n          v7 -= 2;\n          if ( v4 != (_BYTE *)(v38 - 1) )\n          {\n            do\n            {\n              if ( *(v7 - 1) == 47 )\n                break;\n              --v7;\n            }\n            while ( v4 != v7 );\n          }\nLABEL_46:\n          v2 = i + 1;\n        }\n        else\n        {\n          --v7;\n        }\n      }\n    }\n  }\n  if ( v7 > v4 + 1 && *(v7 - 1) == 47 )\n    v24 = (__int64)v7--;\n  else\n    v24 = (__int64)(v7 + 1);\n  *v7 = 0;\n  if ( v8 != v24 )\n    v4 = (_BYTE *)sub_4129E0(v4, v7 - v4 + 1);\n  free(ptr);\n  if ( v56 )\n    sub_40CCC0(v56);\n  return v4;\n}\n", 
            "funcStartAddr": "0x40b070L", 
            "funcEndAddr": "0x40b6e3L", 
            "funcName": "sub_40B070"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40B710()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_4178E0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_625790 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_625798 )\n      {\n        v5 = sub_4120E0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_4178E0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x40b710L", 
            "funcEndAddr": "0x40b7aeL", 
            "funcName": "sub_40B710"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B7B0(_BYTE *a1)\n{\n  unsigned __int64 v1; // rbp\n  __int64 v2; // rax\n  __int64 v3; // rdx\n\n  v1 = *a1 == 47;\n  v2 = sub_40B870(a1);\n  if ( v2 - (__int64)a1 <= v1 )\n    return v2 - (_QWORD)a1;\n  v3 = v2 - (_QWORD)a1 - 1;\n  if ( *(_BYTE *)(v2 - 1) != 47 )\n    return v2 - (_QWORD)a1;\n  while ( v1 != v3 && a1[v3 - 1] == 47 )\n    --v3;\n  return v3;\n}\n", 
            "funcStartAddr": "0x40b7b0L", 
            "funcEndAddr": "0x40b80dL", 
            "funcName": "sub_40B7B0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B810(void *src)\n{\n  __int64 v1; // rax\n  size_t v2; // rbx\n  _BYTE *v3; // rax\n  _BYTE *v4; // rcx\n  _BYTE *v5; // rax\n\n  v1 = sub_40B7B0(src);\n  v2 = v1;\n  v3 = malloc(v1 + (v1 == 0) + 1);\n  v4 = v3;\n  if ( v3 )\n  {\n    v5 = memcpy(v3, src, v2);\n    v4 = v5;\n    if ( !v2 )\n    {\n      *v5 = 46;\n      v2 = 1LL;\n    }\n    v5[v2] = 0;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40b810L", 
            "funcEndAddr": "0x40b86aL", 
            "funcName": "sub_40B810"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B870(_BYTE *a1)\n{\n  char v1; // dl\n  _BYTE *result; // rax\n  _BYTE *v3; // rcx\n  char v4; // si\n\n  v1 = *a1;\n  for ( result = a1; *result == 47; v1 = *result )\n    ++result;\n  if ( v1 )\n  {\n    v3 = result;\n    v4 = 0;\n    do\n    {\n      while ( v1 == 47 )\n      {\n        v1 = *++v3;\n        v4 = 1;\n        if ( !*v3 )\n          return result;\n      }\n      if ( v4 )\n      {\n        result = v3;\n        v4 = 0;\n      }\n      v1 = *++v3;\n    }\n    while ( *v3 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b870L", 
            "funcEndAddr": "0x40b8cbL", 
            "funcName": "sub_40B870"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_40B8D0(const char *a1)\n{\n  size_t result; // rax\n  __int64 v2; // rdx\n\n  result = strlen(a1);\n  if ( result > 1 )\n  {\n    do\n    {\n      v2 = result - 1;\n      if ( a1[result - 1] != 47 )\n        break;\n      --result;\n    }\n    while ( v2 != 1 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b8d0L", 
            "funcEndAddr": "0x40b8fbL", 
            "funcName": "sub_40B8D0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40B900()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b900L", 
            "funcEndAddr": "0x40b903L", 
            "funcName": "sub_40B900"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B910(__int64 a1, void *a2, _QWORD *a3)\n{\n  _QWORD *v3; // rbp\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rdx\n\n  if ( a1 )\n  {\n    v3 = a3;\n    v4 = (_QWORD *)sub_412980(24LL);\n    *v4 = sub_412BB0(a2);\n    v4[1] = v3[1];\n    v4[2] = *v3;\n    v5 = sub_40D220(a1, v4);\n    if ( !v5 )\n      sub_412BD0(a1, v4, v6);\n    if ( v4 != (_QWORD *)v5 )\n      sub_40D4F0(v4);\n  }\n}\n", 
            "funcStartAddr": "0x40b910L", 
            "funcEndAddr": "0x40b996L", 
            "funcName": "sub_40B910"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40B9A0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v3; // rax\n  __int64 v5; // [rsp+0h] [rbp-28h]\n  __int64 v6; // [rsp+8h] [rbp-20h]\n  __int64 v7; // [rsp+10h] [rbp-18h]\n\n  if ( !a1 )\n    return 0;\n  v3 = a3[1];\n  v5 = a2;\n  v6 = v3;\n  v7 = *a3;\n  return sub_40C810(a1, &v5) != 0;\n}\n", 
            "funcStartAddr": "0x40b9a0L", 
            "funcEndAddr": "0x40b9dbL", 
            "funcName": "sub_40B9A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n", 
            "funcStartAddr": "0x40bb40L", 
            "funcEndAddr": "0x40bb53L", 
            "funcName": "sub_40BB60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n", 
            "funcStartAddr": "0x40bb40L", 
            "funcEndAddr": "0x40bb53L", 
            "funcName": "sub_40BB60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n", 
            "funcStartAddr": "0x40bb40L", 
            "funcEndAddr": "0x40bb53L", 
            "funcName": "sub_40BB60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n\n__int64 __fastcall sub_40BB60(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n  int v10; // edi\n\n  v10 = *(_DWORD *)(a1 + 24);\n  v2 = 45;\n  v3 = v10 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (v10 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (v10 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((v10 & 0x40u) < 1);\n  if ( v10 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (v10 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (v10 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((v10 & 8u) < 1);\n  if ( v10 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (v10 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (v10 & 2u) < 1 ? 45 : 119;\n  v8 = -((v10 & 1u) < 1);\n  if ( v10 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n", 
            "funcStartAddr": "0x40bb40L", 
            "funcEndAddr": "0x40bb53L", 
            "funcName": "sub_40BB60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BB70(void *a1, void *a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n\n  result = sub_40BB90(a1, a2);\n  if ( !result )\n    sub_412BD0(a1, a2, v3);\n  return result;\n}\n", 
            "funcStartAddr": "0x40bb70L", 
            "funcEndAddr": "0x40bb88L", 
            "funcName": "sub_40BB70"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_40BB90(void *src, void *a2, _QWORD *a3)\n{\n  const char *v3; // r12\n  const char *v4; // rax\n  const char *v5; // r14\n  size_t v6; // rax\n  _BOOL8 v7; // rbx\n  size_t v8; // rbp\n  size_t v9; // rax\n  size_t v10; // r14\n  void *v11; // rax\n  void *v12; // r15\n  _BYTE *v13; // rax\n  char *v14; // rdi\n  _QWORD *v16; // [rsp+0h] [rbp-48h]\n  char v17; // [rsp+Fh] [rbp-39h]\n\n  v3 = (const char *)a2;\n  v16 = a3;\n  v4 = sub_40B870(src);\n  v5 = v4;\n  v6 = sub_40B8D0(v4);\n  v7 = v6;\n  v8 = v6 + v5 - (_BYTE *)src;\n  if ( v6 )\n    v7 = v5[v6 - 1] != 47;\n  v17 = *(_BYTE *)a2;\n  if ( *(_BYTE *)a2 == 47 )\n  {\n    do\n      ++v3;\n    while ( *v3 == 47 );\n  }\n  v9 = strlen(v3);\n  v10 = v9;\n  v11 = malloc(v9 + v7 + v8 + 1);\n  v12 = v11;\n  if ( v11 )\n  {\n    v13 = mempcpy(v11, src, v8);\n    *v13 = 47;\n    v14 = &v13[v7];\n    if ( v16 )\n      *v16 = &v14[-(v17 == 47)];\n    *(_BYTE *)mempcpy(v14, v3, v10) = 0;\n  }\n  return v12;\n}\n", 
            "funcStartAddr": "0x40bb90L", 
            "funcEndAddr": "0x40bc69L", 
            "funcName": "sub_40BB90"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40BC70(char **a1)\n{\n  char *v1; // rsi\n  char v2; // dl\n  char v3; // cl\n  char *result; // rax\n  unsigned int v5; // ecx\n  __int64 v6; // r8\n\n  v1 = *a1;\n  v2 = **a1;\n  if ( v2 )\n  {\n    v3 = 0;\n    result = 0LL;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        if ( v3 )\n        {\n          v5 = v2 - 65;\n          if ( v5 > 0x39 || (v6 = 1LL << v5, v3 = 0, !(v6 & 0x3FFFFFF03FFFFFFLL)) )\n          {\n            v3 = 0;\n            if ( v2 != 126 )\n              result = 0LL;\n          }\n          goto LABEL_7;\n        }\n        if ( v2 == 46 )\n        {\n          v3 = 1;\n          if ( !result )\n            result = v1;\n          goto LABEL_7;\n        }\n        if ( v2 <= 90 )\n          break;\n        if ( (unsigned __int8)(v2 - 97) > 0x19u )\n          goto LABEL_13;\nLABEL_7:\n        *a1 = ++v1;\n        v2 = *v1;\n        if ( !*v1 )\n          return result;\n      }\n      if ( v2 >= 65 || (unsigned __int8)(v2 - 48) <= 9u )\n        goto LABEL_7;\nLABEL_13:\n      if ( v2 != 126 )\n        result = 0LL;\n      *a1 = ++v1;\n      v2 = *v1;\n      if ( !*v1 )\n        return result;\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40bc70L", 
            "funcEndAddr": "0x40bd33L", 
            "funcName": "sub_40BC70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BD40(char *s1, char *s2)\n{\n  char *v2; // rbp\n  char *v3; // rbx\n  unsigned int v4; // er12\n  char v5; // r8\n  char v6; // r9\n  char *v7; // r13\n  char *v8; // rax\n  size_t v9; // r13\n  unsigned __int64 v10; // r14\n  unsigned __int64 v11; // rsi\n  size_t v12; // rdx\n  unsigned __int64 v13; // r9\n  unsigned __int8 v14; // al\n  unsigned int v15; // er10\n  int v16; // ecx\n  unsigned int v17; // ecx\n  unsigned __int8 v18; // di\n  int v19; // eax\n  int v20; // ecx\n  unsigned int v21; // ecx\n  int v22; // eax\n  unsigned int v23; // er9\n  size_t v25; // rdi\n  unsigned int v26; // er9\n  int v27; // eax\n  unsigned int v28; // [rsp+4h] [rbp-54h]\n  char *v29; // [rsp+10h] [rbp-48h]\n  char *v30; // [rsp+18h] [rbp-40h]\n\n  v2 = s2;\n  v3 = s1;\n  v4 = strcmp(s1, s2);\n  if ( v4 )\n  {\n    v5 = *s1;\n    if ( *s1 )\n    {\n      v6 = *s2;\n      if ( !*s2 )\n        return 1;\n      if ( !strcmp(\".\", s1) )\n        goto LABEL_50;\n      if ( !strcmp(\".\", s2) )\n        return 1;\n      if ( !strcmp(\"..\", s1) )\n        goto LABEL_50;\n      if ( !strcmp(\"..\", s2) )\n        return 1;\n      if ( v6 == 46 || v5 != 46 )\n      {\n        if ( v5 == 46 )\n        {\n          if ( v6 == 46 )\n          {\n            v3 = s1 + 1;\n            v2 = s2 + 1;\n          }\nLABEL_12:\n          v29 = v3;\n          v30 = v2;\n          v7 = sub_40BC70(&v29);\n          v8 = sub_40BC70(&v30);\n          if ( v7 )\n          {\n            v9 = v7 - v3;\n            if ( !v8 )\n            {\n              v10 = v30 - v2;\nLABEL_15:\n              if ( v9 != v10 || strncmp(v3, v2, v9) )\n                goto LABEL_16;\n              v9 = v29 - v3;\nLABEL_65:\n              v10 = v30 - v2;\nLABEL_16:\n              v11 = 0LL;\n              v12 = 0LL;\n              while ( 1 )\n              {\n                if ( v9 <= v12 && v10 <= v11 )\n                  return v4;\n                v13 = v11 - v12;\n                if ( v9 > v12 )\n                  break;\nLABEL_32:\n                while ( 1 )\n                {\n                  v18 = v2[v11];\n                  v20 = (char)v18;\n                  if ( v10 <= v11 || (unsigned int)((char)v18 - 48) <= 9 )\n                    break;\n                  if ( v9 != v12 )\n                  {\n                    v16 = (unsigned __int8)v3[v12];\n                    v14 = v3[v12];\n                    v15 = (unsigned __int8)v3[v12];\n                    if ( (unsigned int)(v16 - 48) > 9 )\n                      goto LABEL_23;\n                  }\nLABEL_36:\n                  v19 = v18;\n                  v15 = 0;\n                  if ( (unsigned int)v18 - 48 > 9 )\n                    goto LABEL_37;\nLABEL_31:\n                  ++v12;\n                  ++v11;\n                  if ( v9 > v12 )\n                    goto LABEL_20;\n                }\n                while ( 1 )\n                {\n                  v22 = v3[v12];\n                  if ( v3[v12] != 48 )\n                    break;\n                  ++v12;\n                }\n                if ( v18 == 48 )\n                {\n                  do\n                    v20 = v2[++v11];\n                  while ( v2[v11] == 48 );\n                }\n                v23 = v20 - 48;\n                if ( (unsigned int)(v22 - 48) > 9 )\n                {\n                  if ( v23 <= 9 )\n                    goto LABEL_50;\n                }\n                else\n                {\n                  if ( v23 > 9 )\n                    return 1;\n                  v25 = v12;\n                  v26 = 0;\n                  while ( 1 )\n                  {\n                    v27 = v22 - v20;\n                    if ( !v26 )\n                      v26 = v27;\n                    v20 = v2[v11 - v12 + ++v25];\n                    v22 = v3[v25];\n                    v28 = v20 - 48;\n                    if ( (unsigned int)(v22 - 48) > 9 )\n                      break;\n                    if ( v28 > 9 )\n                      return 1;\n                  }\n                  if ( v28 <= 9 )\n                    goto LABEL_50;\n                  if ( v26 )\n                    return v26;\n                  v11 += v25 - v12;\n                  v12 = v25;\n                }\n              }\nLABEL_20:\n              v14 = v3[v12];\n              if ( (unsigned int)((char)v14 - 48) <= 9 )\n                goto LABEL_32;\n              v15 = v14;\n              if ( (unsigned int)v14 - 48 <= 9 )\n              {\n                if ( v10 != v11 )\n                {\n                  v18 = v2[v11];\n                  goto LABEL_36;\n                }\n                goto LABEL_31;\n              }\n              v16 = v14;\nLABEL_23:\n              v17 = v16 - 65;\n              if ( v17 <= 0x39 && (1LL << v17) & 0x3FFFFFF03FFFFFFLL )\n              {\n                v19 = 0;\n                if ( v10 == v12 + v13 )\n                {\nLABEL_30:\n                  if ( v19 == v15 )\n                    goto LABEL_31;\n                  return v15 - v19;\n                }\n              }\n              else\n              {\n                if ( v14 == 126 )\n                  v15 = -1;\n                else\n                  v15 += 256;\n                if ( v10 == v12 + v13 )\n                  return v15;\n              }\n              v18 = v2[v11];\n              v19 = v18;\n              if ( (unsigned int)v18 - 48 > 9 )\n              {\nLABEL_37:\n                v21 = v18 - 65;\n                if ( v21 > 0x39 || !((1LL << v21) & 0x3FFFFFF03FFFFFFLL) )\n                {\n                  if ( v18 == 126 )\n                    v19 = -1;\n                  else\n                    v19 += 256;\n                }\n              }\n              else\n              {\n                v19 = 0;\n              }\n              goto LABEL_30;\n            }\n          }\n          else\n          {\n            v9 = v29 - v3;\n            if ( !v8 )\n              goto LABEL_65;\n          }\n          v10 = v8 - v2;\n          goto LABEL_15;\n        }\n        if ( v6 != 46 )\n          goto LABEL_12;\n        return 1;\n      }\n    }\nLABEL_50:\n    v4 = -1;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40bd40L", 
            "funcEndAddr": "0x40c14dL", 
            "funcName": "sub_40BD40"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40C150(struct timespec *tp)\n{\n  int result; // eax\n  __time_t v2; // [rsp+0h] [rbp-18h]\n  __int64 v3; // [rsp+8h] [rbp-10h]\n\n  result = clock_gettime(0, tp);\n  if ( result )\n  {\n    gettimeofday((struct timeval *)&v2, 0LL);\n    tp->tv_sec = v2;\n    result = 1000 * v3;\n    tp->tv_nsec = 1000 * v3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c150L", 
            "funcEndAddr": "0x40c18aL", 
            "funcName": "sub_40C150"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40C190(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c190L", 
            "funcEndAddr": "0x40c1eeL", 
            "funcName": "sub_40C190"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C1F0(unsigned __int64 a1)\n{\n  __int64 v1; // rsi\n  unsigned __int64 v2; // rsi\n  unsigned __int64 v3; // rax\n  __int64 v4; // r8\n  unsigned __int64 v5; // rdi\n  unsigned __int64 v6; // rcx\n\n  v1 = 10LL;\n  if ( a1 >= 0xA )\n    v1 = a1;\n  v2 = v1 | 1;\n  if ( v2 != -1LL )\n  {\n    while ( 1 )\n    {\n      v3 = v2 % 3;\n      if ( v2 <= 9 )\n        goto LABEL_9;\n      if ( v2 % 3 )\n        break;\nLABEL_10:\n      v2 += 2LL;\n      if ( v2 == -1LL )\n        return v2;\n    }\n    v4 = 16LL;\n    v5 = 9LL;\n    v6 = 3LL;\n    while ( 1 )\n    {\n      v6 += 2LL;\n      v5 += v4;\n      v3 = v2 % v6;\n      if ( v5 >= v2 )\n        break;\n      v4 += 8LL;\n      if ( !(v2 % v6) )\n        goto LABEL_10;\n    }\nLABEL_9:\n    if ( v3 )\n      return v2;\n    goto LABEL_10;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40c1f0L", 
            "funcEndAddr": "0x40c283L", 
            "funcName": "sub_40C1F0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C290(__int64 a1, unsigned __int64 a2)\n{\n  return __ROR8__(a1, 3) % a2;\n}\n", 
            "funcStartAddr": "0x40c290L", 
            "funcEndAddr": "0x40c2a0L", 
            "funcName": "sub_40C290"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40C2A0(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n", 
            "funcStartAddr": "0x40c2a0L", 
            "funcEndAddr": "0x40c2a7L", 
            "funcName": "sub_40C2A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C2B0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_40C2B0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n", 
            "funcStartAddr": "0x402e50L", 
            "funcEndAddr": "0x402e55L", 
            "funcName": "sub_40C2B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C2B0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_40C2B0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n", 
            "funcStartAddr": "0x402e50L", 
            "funcEndAddr": "0x402e55L", 
            "funcName": "sub_40C2B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C2E0(__int64 a1, __int64 a2, __m128i **a3, char a4)\n{\n  __m128i **v4; // r14\n  char v5; // r13\n  __int64 v6; // rbp\n  __m128i *v7; // rax\n  __int64 v8; // rsi\n  __m128i *v9; // rbx\n  __int64 *v10; // rax\n  const __m128i *v12; // rax\n\n  v4 = a3;\n  v5 = a4;\n  v6 = a2;\n  v7 = (__m128i *)sub_40C2B0(a1, a2);\n  *v4 = v7;\n  v8 = v7->m128i_i64[0];\n  if ( v7->m128i_i64[0] )\n  {\n    v9 = v7;\n    if ( v8 != v6 )\n    {\n      if ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v6) )\n      {\n        v10 = (__int64 *)v9->m128i_i64[1];\n        if ( v10 )\n        {\n          v8 = *v10;\n          if ( v6 != *v10 )\n          {\n            while ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v6) )\n            {\n              v9 = (__m128i *)v9->m128i_i64[1];\n              v10 = (__int64 *)v9->m128i_i64[1];\n              if ( !v10 )\n                return 0LL;\n              v8 = *v10;\n              if ( *v10 == v6 )\n                goto LABEL_11;\n            }\n            v10 = (__int64 *)v9->m128i_i64[1];\n            v8 = *v10;\n          }\nLABEL_11:\n          if ( v5 )\n          {\n            v9->m128i_i64[1] = v10[1];\n            *v10 = 0LL;\n            v10[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v10;\n          }\n          return v8;\n        }\n        return 0LL;\n      }\n      v8 = v9->m128i_i64[0];\n    }\n    if ( v5 )\n    {\n      v12 = (const __m128i *)v9->m128i_i64[1];\n      if ( v12 )\n      {\n        *v9 = _mm_loadu_si128(v12);\n        v12->m128i_i64[0] = 0LL;\n        v12->m128i_i64[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = v12;\n        return v8;\n      }\n      v9->m128i_i64[0] = 0LL;\n    }\n    return v8;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40c2e0L", 
            "funcEndAddr": "0x40c3f9L", 
            "funcName": "sub_40C2E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C400(float **a1)\n{\n  float *v1; // rax\n  float v2; // xmm0_4\n  float v3; // xmm1_4\n  float v4; // xmm2_4\n  __int64 result; // rax\n\n  v1 = *a1;\n  if ( *a1 == (float *)&unk_41D810 )\n    return 1LL;\n  v2 = v1[2];\n  if ( v2 <= 0.1\n    || v2 >= 0.89999998\n    || v1[3] <= 1.1\n    || *v1 < 0.0\n    || (v3 = *v1 + 0.1, v4 = v1[1], v4 <= v3)\n    || v4 > 1.0\n    || (result = 1LL, v2 <= v3) )\n  {\n    *a1 = (float *)&unk_41D810;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c400L", 
            "funcEndAddr": "0x40c47eL", 
            "funcName": "sub_40C400"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C480(__int64 a1, __int64 a2, char a3)\n{\n  char v3; // r14\n  __int64 *v4; // r12\n  __int64 v5; // r15\n  __int64 *v6; // rbx\n  __int64 v7; // r15\n  _QWORD *v8; // rax\n  __int64 *v9; // rdx\n  _QWORD *v10; // rax\n  _QWORD *v11; // rbx\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n\n  v3 = a3;\n  v4 = *(__int64 **)a2;\n  if ( *(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) )\n    return 1LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v5 = *v4;\n      if ( *v4 )\n      {\n        v6 = (__int64 *)v4[1];\n        if ( v6 )\n        {\n          do\n          {\n            while ( 1 )\n            {\n              v7 = *v6;\n              v8 = (_QWORD *)sub_40C2B0(a1, *v6);\n              v9 = (__int64 *)v6[1];\n              if ( !*v8 )\n                break;\n              v6[1] = v8[1];\n              v8[1] = v6;\n              v6 = v9;\n              if ( !v9 )\n                goto LABEL_10;\n            }\n            *v8 = v7;\n            ++*(_QWORD *)(a1 + 24);\n            *v6 = 0LL;\n            v6[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v6;\n            v6 = v9;\n          }\n          while ( v9 );\nLABEL_10:\n          v5 = *v4;\n        }\n        v4[1] = 0LL;\n        if ( !v3 )\n          break;\n      }\n      v4 += 2;\n      if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n        return 1LL;\n    }\n    v10 = (_QWORD *)sub_40C2B0(a1, v5);\n    v11 = v10;\n    if ( !*v10 )\n    {\n      *v10 = v5;\n      ++*(_QWORD *)(a1 + 24);\n      goto LABEL_16;\n    }\n    v12 = *(_QWORD **)(a1 + 72);\n    if ( !v12 )\n      break;\n    *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_15:\n    v13 = v11[1];\n    *v12 = v5;\n    v12[1] = v13;\n    v11[1] = v12;\nLABEL_16:\n    *v4 = 0LL;\n    v4 += 2;\n    --*(_QWORD *)(a2 + 24);\n    if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n      return 1LL;\n  }\n  v12 = malloc(0x10uLL);\n  if ( v12 )\n    goto LABEL_15;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40c480L", 
            "funcEndAddr": "0x40c5caL", 
            "funcName": "sub_40C480"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C5F0(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 32);\n}\n", 
            "funcStartAddr": "0x40c5f0L", 
            "funcEndAddr": "0x40c5f5L", 
            "funcName": "sub_40C5F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C810(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  _QWORD *v3; // rax\n  __int64 v4; // rsi\n  _QWORD *v5; // rbx\n\n  v2 = a2;\n  v3 = (_QWORD *)sub_40C2B0(a1, a2);\n  v4 = *v3;\n  if ( !*v3 )\n    return 0LL;\n  v5 = v3;\n  while ( v4 != v2 )\n  {\n    if ( (*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v2) )\n      return *v5;\n    v5 = (_QWORD *)v5[1];\n    if ( !v5 )\n      return 0LL;\n    v4 = *v5;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40c810L", 
            "funcEndAddr": "0x40c863L", 
            "funcName": "sub_40C810"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C8C0(__int64 a1, __int64 a2)\n{\n  _QWORD *v2; // rcx\n  _QWORD *v3; // rdx\n  __int64 v4; // rax\n  __int64 result; // rax\n\n  v2 = (_QWORD *)sub_40C2B0(a1, a2);\n  v3 = v2;\n  while ( 1 )\n  {\n    v4 = *v3;\n    v3 = (_QWORD *)v3[1];\n    if ( v4 == a2 )\n      break;\n    if ( !v3 )\n      goto LABEL_7;\n  }\n  if ( v3 )\n    return *v3;\nLABEL_7:\n  while ( 1 )\n  {\n    v2 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v2 )\n      break;\n    result = *v2;\n    if ( *v2 )\n      return result;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40c8c0L", 
            "funcEndAddr": "0x40c92aL", 
            "funcName": "sub_40C8C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C9A0(__int64 a1, unsigned __int8 (__fastcall *a2)(__int64, __int64), __int64 a3)\n{\n  __int64 *v3; // r14\n  __int64 v4; // r13\n  __int64 v5; // r15\n  __int64 v6; // rbp\n  __int64 v7; // rdi\n  __int64 *v9; // rbx\n\n  v3 = *(__int64 **)a1;\n  if ( *(_QWORD *)(a1 + 8) <= *(_QWORD *)a1 )\n    return 0LL;\n  v4 = a3;\n  v5 = a1;\n  v6 = 0LL;\n  while ( 1 )\n  {\n    v7 = *v3;\n    if ( *v3 )\n      break;\nLABEL_4:\n    v3 += 2;\n    if ( *(_QWORD *)(v5 + 8) <= (unsigned __int64)v3 )\n      return v6;\n  }\n  v9 = v3;\n  while ( a2(v7, v4) )\n  {\n    v9 = (__int64 *)v9[1];\n    ++v6;\n    if ( !v9 )\n      goto LABEL_4;\n    v7 = *v9;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x40c9a0L", 
            "funcEndAddr": "0x40ca18L", 
            "funcName": "sub_40C9A0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_40CA80(unsigned __int64 a1, __int64 a2, unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2), bool (__fastcall *a4)(__int64 a1, __int64 a2), __int64 a5)\n{\n  __int64 v5; // r14\n  bool (__fastcall *v6)(__int64, __int64); // r13\n  unsigned __int64 (__fastcall *v7)(__int64, unsigned __int64); // r12\n  unsigned __int64 v8; // rbp\n  char *v9; // rax\n  _QWORD *v10; // rbx\n  float **v11; // rdi\n  unsigned __int64 v12; // rbp\n  char *v13; // rax\n  void *v14; // rdi\n  float v16; // xmm1_4\n  float v17; // xmm0_4\n  float v18; // xmm0_4\n\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  v8 = a1;\n  if ( !a3 )\n    v7 = sub_40C290;\n  if ( !a4 )\n    v6 = sub_40C2A0;\n  v9 = (char *)malloc(0x50uLL);\n  v10 = v9;\n  if ( v9 )\n  {\n    v11 = (float **)(v9 + 40);\n    if ( a2 )\n    {\n      *((_QWORD *)v9 + 5) = a2;\n      if ( !(unsigned __int8)sub_40C400(v11) )\n        goto LABEL_14;\n      if ( *(_BYTE *)(a2 + 16) )\n      {\nLABEL_9:\n        v12 = sub_40C1F0(v8);\n        if ( !_bittest64((const __int64 *)&v12, 0x3Cu) && v12 >> 61 == 0 )\n        {\n          v10[2] = v12;\n          if ( v12 )\n          {\n            v13 = (char *)calloc(v12, 0x10uLL);\n            *v10 = v13;\n            if ( v13 )\n            {\n              v10[3] = 0LL;\n              v10[4] = 0LL;\n              v10[1] = &v13[16 * v12];\n              v10[6] = v7;\n              v10[7] = v6;\n              v10[8] = v5;\n              v10[9] = 0LL;\n              return v10;\n            }\n          }\n        }\nLABEL_14:\n        v14 = v10;\n        v10 = 0LL;\n        free(v14);\n        return v10;\n      }\n      v16 = *(float *)(a2 + 8);\n      if ( (v8 & 0x8000000000000000LL) != 0LL )\n        goto LABEL_23;\n    }\n    else\n    {\n      *((_QWORD *)v9 + 5) = &unk_41D810;\n      v16 = 0.80000001;\n      if ( !(unsigned __int8)sub_40C400(v11) )\n        goto LABEL_14;\n      if ( (v8 & 0x8000000000000000LL) != 0LL )\n      {\nLABEL_23:\n        v17 = (float)(int)(v8 & 1 | (v8 >> 1)) + (float)(int)(v8 & 1 | (v8 >> 1));\n        goto LABEL_19;\n      }\n    }\n    v17 = (float)(int)v8;\nLABEL_19:\n    v18 = v17 / v16;\n    if ( v18 >= 1.8446744e19 )\n      goto LABEL_14;\n    if ( v18 < 9.223372e18 )\n      v8 = (unsigned int)(int)v18;\n    else\n      v8 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n    goto LABEL_9;\n  }\n  return v10;\n}\n", 
            "funcStartAddr": "0x40ca80L", 
            "funcEndAddr": "0x40cc0aL", 
            "funcName": "sub_40CA80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40CCC0(void *ptr)\n{\n  void **v1; // r12\n  _QWORD *v2; // rbp\n  unsigned __int64 v3; // rax\n  _QWORD *v4; // rbx\n  _QWORD *v5; // rdi\n  _QWORD *v6; // rbx\n  _QWORD *v7; // rdi\n  _QWORD *v8; // rbx\n\n  v1 = (void **)ptr;\n  v2 = *(_QWORD **)ptr;\n  v3 = *((_QWORD *)ptr + 1);\n  if ( *((_QWORD *)ptr + 8) && *((_QWORD *)ptr + 4) )\n  {\n    if ( (unsigned __int64)v2 >= v3 )\n      goto LABEL_15;\n    do\n    {\n      while ( !*v2 )\n      {\n        v2 += 2;\n        if ( v3 <= (unsigned __int64)v2 )\n          goto LABEL_10;\n      }\n      v4 = v2;\n      do\n      {\n        (*((void (**)(void))ptr + 8))();\n        v4 = (_QWORD *)v4[1];\n      }\n      while ( v4 );\n      v3 = *((_QWORD *)ptr + 1);\n      v2 += 2;\n    }\n    while ( v3 > (unsigned __int64)v2 );\nLABEL_10:\n    v2 = *(_QWORD **)ptr;\n  }\n  if ( (unsigned __int64)v2 < v3 )\n  {\n    do\n    {\n      v5 = (_QWORD *)v2[1];\n      if ( v5 )\n      {\n        do\n        {\n          v6 = (_QWORD *)v5[1];\n          free(v5);\n          v5 = v6;\n        }\n        while ( v6 );\n      }\n      v2 += 2;\n    }\n    while ( v1[1] > v2 );\n  }\nLABEL_15:\n  v7 = v1[9];\n  if ( v7 )\n  {\n    do\n    {\n      v8 = (_QWORD *)v7[1];\n      free(v7);\n      v7 = v8;\n    }\n    while ( v8 );\n  }\n  free(*v1);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x40ccc0L", 
            "funcEndAddr": "0x40cd96L", 
            "funcName": "sub_40CCC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CDA0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40C1F0(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40C480((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40C480(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40C480(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n\n__int64 __fastcall sub_40CDA0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40C1F0(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40C480((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40C480(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40C480(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n", 
            "funcStartAddr": "0x402e5aL", 
            "funcEndAddr": "0x402e5fL", 
            "funcName": "sub_40CDA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CDA0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40C1F0(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40C480((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40C480(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40C480(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n\n__int64 __fastcall sub_40CDA0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40C1F0(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40C480((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40C480(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40C480(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n", 
            "funcStartAddr": "0x402e5aL", 
            "funcEndAddr": "0x402e5fL", 
            "funcName": "sub_40CDA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CFA0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40C2E0(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40C400((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40CDA0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40C2E0(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40CFA0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40C2E0(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40C400((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40CDA0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40C2E0(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x402e5fL", 
            "funcEndAddr": "0x402e64L", 
            "funcName": "sub_40CFA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CFA0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40C2E0(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40C400((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40CDA0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40C2E0(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40CFA0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40C2E0(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40C400((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40CDA0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40C2E0(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x402e5fL", 
            "funcEndAddr": "0x402e64L", 
            "funcName": "sub_40CFA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D220(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  int v3; // eax\n  __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v2 = a2;\n  v3 = sub_40CFA0(a1, a2, &v5);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( !v3 )\n    v2 = v5;\n  return v2;\n}\n", 
            "funcStartAddr": "0x40d220L", 
            "funcEndAddr": "0x40d25bL", 
            "funcName": "sub_40D220"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D260(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rbp\n  _QWORD *v4; // rax\n  __int64 v6; // rax\n  float *v7; // rdx\n  float v8; // xmm0_4\n  unsigned __int64 v9; // rax\n  float v10; // xmm1_4\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  float v13; // xmm0_4\n  __int64 v14; // rax\n  float v15; // xmm1_4\n  float v16; // xmm0_4\n  unsigned __int64 v17; // rsi\n  _QWORD *v18; // rdi\n  _QWORD *v19; // r12\n  int v20; // edx\n  float v21; // xmm0_4\n  __int64 v22; // rcx\n  __int64 v23; // rcx\n  _QWORD *v24; // [rsp+8h] [rbp-20h]\n\n  v2 = a1;\n  v3 = sub_40C2E0(a1, a2, (__m128i **)&v24, 1);\n  if ( !v3 )\n    return v3;\n  v4 = v24;\n  --*(_QWORD *)(a1 + 32);\n  if ( *v4 )\n    return v3;\n  v6 = *(_QWORD *)(a1 + 24) - 1LL;\n  *(_QWORD *)(a1 + 24) = v6;\n  if ( v6 < 0 )\n  {\n    v20 = v6 & 1 | ((unsigned __int64)v6 >> 1);\n    v9 = *(_QWORD *)(a1 + 16);\n    v21 = (float)v20;\n    v7 = *(float **)(a1 + 40);\n    v8 = v21 + v21;\n    if ( (v9 & 0x8000000000000000LL) == 0LL )\n      goto LABEL_6;\nLABEL_22:\n    v10 = (float)(int)(v9 & 1 | (v9 >> 1)) + (float)(int)(v9 & 1 | (v9 >> 1));\n    goto LABEL_7;\n  }\n  v7 = *(float **)(a1 + 40);\n  v8 = (float)(int)v6;\n  v9 = *(_QWORD *)(a1 + 16);\n  if ( (v9 & 0x8000000000000000LL) != 0LL )\n    goto LABEL_22;\nLABEL_6:\n  v10 = (float)(int)v9;\nLABEL_7:\n  if ( (float)(v10 * *v7) > v8 )\n  {\n    sub_40C400((float **)(a1 + 40));\n    v11 = *(_QWORD *)(a1 + 16);\n    v12 = *(_QWORD *)(a1 + 40);\n    if ( v11 < 0 )\n    {\n      v23 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n      v13 = (float)(int)v23 + (float)(int)v23;\n    }\n    else\n    {\n      v13 = (float)(int)v11;\n    }\n    v14 = *(_QWORD *)(a1 + 24);\n    if ( v14 < 0 )\n    {\n      v22 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n      v15 = (float)(int)v22 + (float)(int)v22;\n    }\n    else\n    {\n      v15 = (float)(int)v14;\n    }\n    if ( (float)(*(float *)v12 * v13) > v15 )\n    {\n      v16 = v13 * *(float *)(v12 + 4);\n      if ( !*(_BYTE *)(v12 + 16) )\n        v16 = v16 * *(float *)(v12 + 8);\n      if ( v16 >= 9.223372e18 )\n        v17 = (unsigned int)(int)(float)(v16 - 9.223372e18) ^ 0x8000000000000000LL;\n      else\n        v17 = (unsigned int)(int)v16;\n      if ( !(unsigned __int8)sub_40CDA0(a1, v17) )\n      {\n        v18 = *(_QWORD **)(a1 + 72);\n        if ( v18 )\n        {\n          do\n          {\n            v19 = (_QWORD *)v18[1];\n            free(v18);\n            v18 = v19;\n          }\n          while ( v19 );\n        }\n        *(_QWORD *)(v2 + 72) = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x40d260L", 
            "funcEndAddr": "0x40d437L", 
            "funcName": "sub_40D260"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40D440(_QWORD *a1, unsigned __int64 a2)\n{\n  return (a1[1] ^ (unsigned __int64)sub_417960(*a1)) % a2;\n}\n", 
            "funcStartAddr": "0x40d440L", 
            "funcEndAddr": "0x40d467L", 
            "funcName": "sub_40D440"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40D4B0(__int64 a1, __int64 a2)\n{\n  bool result; // al\n\n  result = 0;\n  if ( *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) )\n    result = strcmp(*(const char **)a1, *(const char **)a2) == 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x40d4b0L", 
            "funcEndAddr": "0x40d4e3L", 
            "funcName": "sub_40D4B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40D4F0(void *ptr)\n{\n  free(*(void **)ptr);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x40d4f0L", 
            "funcEndAddr": "0x40d505L", 
            "funcName": "sub_40D4F0"
        }, 
        {
            "decompiledFuncCode": "long double __fastcall sub_40D510(int a1, long double a15)\n{\n  unsigned __int64 v7; // rax\n  long double v8; // fst6\n  long double result; // fst7\n\n  if ( a15 >= 9.223372e18 )\n    v7 = (__int64)(a15 - 9.223372e18) ^ 0x8000000000000000LL;\n  else\n    v7 = (__int64)a15;\n  v8 = (long double)v7;\n  if ( a1 )\n    return v8;\n  result = v8;\n  if ( a15 != v8 )\n  {\n    result = (long double)(__int64)(v7 + 1);\n    if ( (__int64)(v7 + 1) < 0 )\n      result = result + 1.8446744e19;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40d510L", 
            "funcEndAddr": "0x40d5c7L", 
            "funcName": "sub_40D510"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D5D0(__int64 a1, char *a2, __int16 a3, unsigned __int64 a4, unsigned __int64 a5)\n{\n  unsigned __int64 v5; // r14\n  unsigned __int64 v6; // rbp\n  struct lconv *v7; // rax\n  const char *v8; // r15\n  struct lconv *v9; // r12\n  size_t v10; // r8\n  char *v11; // rax\n  const char *v12; // r12\n  size_t v13; // rax\n  size_t v14; // r8\n  unsigned __int64 v15; // rax\n  unsigned __int64 v16; // rsi\n  long double v17; // fst7\n  long double v18; // fst6\n  long double v19; // fst7\n  long double v20; // fst6\n  long double v21; // fst7\n  long double v22; // fst6\n  int v23; // ebx\n  long double v24; // fst5\n  long double v25; // fst4\n  long double v26; // fst7\n  long double v27; // fst6\n  long double v28; // fst7\n  __int64 v29; // r14\n  long double v30; // fst7\n  unsigned __int64 v31; // r15\n  long double v32; // fst6\n  size_t v33; // rax\n  __int64 v34; // r8\n  long double v35; // fst7\n  size_t v36; // r14\n  __int64 v37; // r15\n  char *v38; // r14\n  int v39; // eax\n  unsigned __int64 v41; // rcx\n  unsigned __int64 v42; // rtt\n  unsigned __int64 v43; // rdx\n  int v44; // er9\n  int v45; // edi\n  int v46; // ecx\n  char *v47; // rbp\n  unsigned __int8 *v48; // r15\n  size_t v49; // rbx\n  size_t v50; // rbp\n  unsigned __int8 v51; // dl\n  size_t v52; // rax\n  size_t v53; // rbp\n  char *v54; // r14\n  unsigned __int64 v55; // rax\n  char *v56; // rdx\n  unsigned __int64 v57; // r11\n  int v58; // eax\n  unsigned int v59; // ett\n  unsigned int v60; // edx\n  unsigned int v61; // edi\n  bool v62; // dl\n  char v63; // al\n  unsigned __int64 v64; // r9\n  unsigned int v65; // edx\n  __int64 v66; // rdi\n  unsigned __int64 v67; // rcx\n  signed __int64 v68; // r15\n  unsigned int v69; // edx\n  __int64 v70; // rsi\n  size_t v71; // [rsp+0h] [rbp-B8h]\n  char *v72; // [rsp+10h] [rbp-A8h]\n  char *s; // [rsp+18h] [rbp-A0h]\n  __int16 v74; // [rsp+20h] [rbp-98h]\n  int v75; // [rsp+24h] [rbp-94h]\n  int v76; // [rsp+24h] [rbp-94h]\n  unsigned __int64 v77; // [rsp+28h] [rbp-90h]\n  size_t v78; // [rsp+30h] [rbp-88h]\n  size_t v79; // [rsp+30h] [rbp-88h]\n  long double v80; // [rsp+30h] [rbp-88h]\n  unsigned int v81; // [rsp+40h] [rbp-78h]\n  unsigned int v82; // [rsp+44h] [rbp-74h]\n  char *v83; // [rsp+48h] [rbp-70h]\n  char src[104]; // [rsp+50h] [rbp-68h]\n\n  v5 = a4;\n  v6 = a5;\n  v81 = a3 & 0x20;\n  s = a2;\n  v74 = a3;\n  v77 = a5;\n  v75 = a3 & 3;\n  v82 = v81 < 1 ? 1000 : 1024;\n  v7 = localeconv();\n  v8 = v7->decimal_point;\n  v9 = v7;\n  v10 = strlen(v7->decimal_point);\n  if ( v10 - 1 >= 0x10 )\n    v8 = \"..\" + 1;\n  v11 = v9->grouping;\n  v12 = v9->thousands_sep;\n  if ( v10 - 1 >= 0x10 )\n    v10 = 1LL;\n  v78 = v10;\n  v83 = v11;\n  v13 = strlen(v12);\n  v14 = v78;\n  if ( v13 >= 0x11 )\n    v12 = \"\";\n  v72 = a2 + 647;\n  if ( v6 > v5 )\n  {\n    if ( !v5 || (v41 = v77 / v5, v77 % v5) )\n    {\nLABEL_10:\n      v17 = (long double)v5;\n      v18 = (long double)(__int64)v77;\n      if ( (v77 & 0x8000000000000000LL) != 0LL )\n      {\n        v19 = v17 / (v18 + 1.8446744e19);\n        v20 = (long double)a1;\n        if ( a1 >= 0 )\n        {\nLABEL_12:\n          v21 = v19 * v20;\n          if ( v74 & 0x10 )\n          {\nLABEL_13:\n            v22 = (long double)(int)v82;\n            v23 = 0;\n            v24 = v22;\n            while ( 1 )\n            {\n              ++v23;\n              v25 = v21;\n              v26 = v24 * v22;\n              if ( v25 < v26 )\n                break;\n              if ( v23 == 8 )\n              {\n                v27 = v25;\n                v28 = v24;\n                goto LABEL_19;\n              }\n              v24 = v26;\n              v21 = v25;\n            }\n            v27 = v25;\n            v28 = v24;\nLABEL_19:\n            v29 = v78 + 1;\n            v30 = v27 / v28;\n            v31 = v78 + 1 + (v81 == 0) + 1;\n            if ( v75 == 1 )\n            {\n              __sprintf_chk(s, 1LL, -1LL, \"%.1Lf\", v78);\n              v33 = strlen(s);\n              if ( v33 > v31 )\n                goto LABEL_26;\n            }\n            else\n            {\n              if ( v30 < 1.8446744073709551615e19 )\n              {\n                v80 = v30;\n                sub_40D510(v75, v30);\n                v32 = v80;\n              }\n              else\n              {\n                v32 = v30;\n              }\n              __sprintf_chk(s, 1LL, -1LL, \"%.1Lf\", v14);\n              v33 = strlen(s);\n              v30 = v32;\n              if ( v33 > v31 )\n              {\n                v35 = v32 * 10.0;\nLABEL_24:\n                if ( v35 < 1.8446744073709551615e19 )\n                  sub_40D510(v75, v35);\n                goto LABEL_26;\n              }\n            }\n            if ( !(v74 & 8) || s[v33 - 1] != 48 )\n            {\n              v36 = v33 - v29;\n              goto LABEL_31;\n            }\n            v35 = v30 * 10.0;\n            if ( v75 != 1 )\n              goto LABEL_24;\nLABEL_26:\n            __sprintf_chk(s, 1LL, -1LL, \"%.0Lf\", v34);\n            v33 = strlen(s);\n            v36 = v33;\nLABEL_31:\n            v37 = (__int64)&v72[-v33];\n            v38 = &v72[v36 - v33];\n            memmove(&v72[-v33], s, v33);\n            goto LABEL_32;\n          }\nLABEL_27:\n          if ( v75 != 1 && v21 < 1.8446744073709551615e19 )\n          {\n            sub_40D510(v75, v21);\n            v14 = v71;\n          }\n          __sprintf_chk(s, 1LL, -1LL, \"%.0Lf\", v14);\n          v23 = -1;\n          v33 = strlen(s);\n          v36 = v33;\n          goto LABEL_31;\n        }\n      }\n      else\n      {\n        v19 = v17 / v18;\n        v20 = (long double)a1;\n        if ( a1 >= 0 )\n          goto LABEL_12;\n      }\n      v21 = v19 * (v20 + 1.8446744e19);\n      if ( v74 & 0x10 )\n        goto LABEL_13;\n      goto LABEL_27;\n    }\n    v16 = a1 / v41;\n    v42 = 10 * (a1 % v41);\n    v43 = 2 * (v42 % v41);\n    v44 = v42 / v41;\n    if ( v41 <= v43 )\n      v45 = (v41 < v43) + 2;\n    else\n      v45 = v43 != 0;\n    v46 = v74 & 0x10;\n    if ( !(v74 & 0x10) )\n      goto LABEL_85;\n  }\n  else\n  {\n    v15 = v5 / v6;\n    if ( v5 % v6 )\n      goto LABEL_10;\n    v16 = a1 * v15;\n    if ( a1 * v15 / (v5 / v6) != a1 )\n      goto LABEL_10;\n    v45 = 0;\n    v44 = 0;\n    v46 = v74 & 0x10;\n    if ( !(v74 & 0x10) )\n    {\nLABEL_85:\n      v23 = -1;\n      goto LABEL_47;\n    }\n  }\n  v23 = 0;\n  if ( v82 <= v16 )\n  {\n    while ( 1 )\n    {\n      v57 = v16 / v82;\n      v59 = v44 + 10 * (v16 % v82);\n      v58 = (v44 + 10 * (v16 % v82)) / v82;\n      v60 = (v45 >> 1) + 2 * (v59 % v82);\n      v44 = v59 / v82;\n      v16 /= v82;\n      v61 = v60 + v45;\n      v45 = v82 > v60 ? v61 != 0 : (v82 < v61) + 2;\n      ++v23;\n      if ( v82 > v57 )\n        break;\n      if ( v23 == 8 )\n        goto LABEL_47;\n    }\n    if ( v57 <= 9 )\n    {\n      if ( v75 == 1 )\n        v62 = v45 + (v58 & 1) > 2;\n      else\n        v62 = v45 > 0 && v75 == 0;\n      if ( v62 )\n      {\n        if ( ++v58 == 10 )\n        {\n          v16 = v57 + 1;\n          if ( v57 == 9 )\n          {\n            v38 = v72;\nLABEL_114:\n            v45 = 0;\n            goto LABEL_115;\n          }\n          v45 = 0;\n          goto LABEL_107;\n        }\n      }\n      else if ( !v58 )\n      {\nLABEL_107:\n        v38 = v72;\n        if ( v74 & 8 )\n        {\nLABEL_115:\n          if ( v75 == 1 )\n            goto LABEL_52;\n          v44 = 0;\n          goto LABEL_48;\n        }\n        v63 = 48;\n        goto LABEL_109;\n      }\n      v63 = v58 + 48;\nLABEL_109:\n      s[646] = v63;\n      v38 = &s[-v78 + 646];\n      if ( (unsigned int)v78 >= 8 )\n      {\n        v64 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n        *(_QWORD *)v38 = *(_QWORD *)v8;\n        *(_QWORD *)&v38[(unsigned int)v78 - 8] = *(_QWORD *)&v8[(unsigned int)v78 - 8];\n        if ( (((_DWORD)s + 646 - (_DWORD)v64) & 0xFFFFFFF8) >= 8 )\n        {\n          v65 = 0;\n          do\n          {\n            v66 = v65;\n            v65 += 8;\n            *(_QWORD *)(v64 + v66) = *(_QWORD *)(v8 - &v38[-v64] + v66);\n          }\n          while ( v65 < (((_DWORD)s + 646 - (_DWORD)v64) & 0xFFFFFFF8) );\n        }\n      }\n      else if ( v78 & 4 )\n      {\n        *(_DWORD *)v38 = *(_DWORD *)v8;\n        *(_DWORD *)&v38[(unsigned int)v78 - 4] = *(_DWORD *)&v8[(unsigned int)v78 - 4];\n      }\n      else if ( (_DWORD)v78 )\n      {\n        *v38 = *v8;\n        if ( v78 & 2 )\n          *(_WORD *)&v38[(unsigned int)v78 - 2] = *(_WORD *)&v8[(unsigned int)v78 - 2];\n      }\n      goto LABEL_114;\n    }\n  }\nLABEL_47:\n  v38 = v72;\n  if ( v75 == 1 )\n  {\n    if ( (v45 + (v16 & 1) != 0) + v44 <= 5 )\n      goto LABEL_52;\n    v38 = v72;\n    goto LABEL_50;\n  }\nLABEL_48:\n  if ( v75 || v44 + v45 <= 0 )\n  {\nLABEL_52:\n    v37 = (__int64)v38;\n    while ( 1 )\n    {\n      *(_BYTE *)--v37 = v16 % 0xA + 48;\n      if ( v16 <= 9 )\n        break;\n      v16 /= 0xAuLL;\n    }\n    if ( !(v74 & 4) )\n      goto LABEL_33;\n    goto LABEL_56;\n  }\nLABEL_50:\n  ++v16;\n  if ( !v46 || v82 != v16 || v23 == 8 )\n    goto LABEL_52;\n  ++v23;\n  if ( !(v74 & 8) )\n  {\n    *(v38 - 1) = 48;\n    v38 += ~v78;\n    if ( (unsigned int)v78 >= 8 )\n    {\n      v67 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n      *(_QWORD *)v38 = *(_QWORD *)v8;\n      *(_QWORD *)&v38[(unsigned int)v78 - 8] = *(_QWORD *)&v8[(unsigned int)v78 - 8];\n      v68 = v8 - &v38[-v67];\n      if ( (((_DWORD)v78 + (_DWORD)v38 - (_DWORD)v67) & 0xFFFFFFF8) >= 8 )\n      {\n        v69 = 0;\n        do\n        {\n          v70 = v69;\n          v69 += 8;\n          *(_QWORD *)(v67 + v70) = *(_QWORD *)(v68 + v70);\n        }\n        while ( v69 < (((_DWORD)v78 + (_DWORD)v38 - (_DWORD)v67) & 0xFFFFFFF8) );\n      }\n    }\n    else if ( v78 & 4 )\n    {\n      *(_DWORD *)v38 = *(_DWORD *)v8;\n      *(_DWORD *)&v38[(unsigned int)v78 - 4] = *(_DWORD *)&v8[(unsigned int)v78 - 4];\n    }\n    else if ( (_DWORD)v78 )\n    {\n      *v38 = *v8;\n      if ( v78 & 2 )\n        *(_WORD *)&v38[(unsigned int)v78 - 2] = *(_WORD *)&v8[(unsigned int)v78 - 2];\n    }\n  }\n  v37 = (__int64)(v38 - 1);\n  *(v38 - 1) = 49;\nLABEL_32:\n  if ( !(v74 & 4) )\n    goto LABEL_33;\nLABEL_56:\n  v47 = &v38[-v37];\n  v79 = strlen(v12);\n  __memcpy_chk(src, v37, &v38[-v37], 41LL);\n  v76 = v23;\n  v48 = (unsigned __int8 *)v83;\n  v49 = (size_t)v47;\n  v50 = -1LL;\n  while ( 1 )\n  {\n    v51 = *v48;\n    if ( *v48 )\n    {\n      v52 = v51;\n      if ( v51 >= 0x7Fu )\n        v52 = v49;\n      ++v48;\n      v50 = v52;\n    }\n    if ( v50 > v49 )\n    {\n      v53 = v49;\n      v23 = v76;\n      v37 = (__int64)&v38[-v53];\n      memcpy(&v38[-v53], src, v53);\n      goto LABEL_33;\n    }\n    v54 = &v38[-v50];\n    v49 -= v50;\n    memcpy(v54, &src[v49], v50);\n    if ( !v49 )\n      break;\n    v38 = &v54[-v79];\n    memcpy(v38, v12, v79);\n  }\n  v23 = v76;\n  v37 = (__int64)v54;\nLABEL_33:\n  if ( (v74 & 0x80u) != 0 )\n  {\n    if ( v23 == -1 )\n    {\n      if ( v77 > 1 )\n      {\n        v23 = 1;\n        v55 = 1LL;\n        do\n        {\n          v55 *= v82;\n          if ( v77 <= v55 )\n            break;\n          ++v23;\n        }\n        while ( v23 != 8 );\n        v39 = v74 & 0x100;\n        if ( !(v74 & 0x40) )\n          goto LABEL_72;\n        goto LABEL_70;\n      }\n      v23 = 0;\n    }\n    v39 = v74 & 0x100;\n    if ( !(v23 | v39) )\n      goto LABEL_36;\n    if ( !(v74 & 0x40) )\n    {\nLABEL_71:\n      if ( !v23 )\n      {\n        v56 = v72;\n        if ( !v39 )\n          goto LABEL_36;\n        goto LABEL_77;\n      }\nLABEL_72:\n      if ( v81 || v23 != 1 )\n      {\n        v56 = v72 + 1;\n        *v72 = byte_41D8B8[v23];\n        if ( v39 )\n        {\n          if ( v81 )\n          {\n            v56 = v72 + 2;\n            v72[1] = 105;\n          }\n          goto LABEL_77;\n        }\n      }\n      else\n      {\n        v56 = v72 + 1;\n        *v72 = 107;\n        if ( v39 )\n        {\nLABEL_77:\n          *v56 = 66;\n          v72 = v56 + 1;\n          goto LABEL_36;\n        }\n      }\n      v72 = v56;\n      goto LABEL_36;\n    }\nLABEL_70:\n    s[647] = 32;\n    v72 = s + 648;\n    goto LABEL_71;\n  }\nLABEL_36:\n  *v72 = 0;\n  return v37;\n}\n", 
            "funcStartAddr": "0x40d5d0L", 
            "funcEndAddr": "0x40df9eL", 
            "funcName": "sub_40D5D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40DFA0(char *nptr, int *a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  char *v4; // rbx\n  int v5; // ebp\n  int v6; // eax\n  int v7; // ebp\n  __int64 result; // rax\n  __int64 v9; // rdx\n  char *v10; // [rsp+8h] [rbp-30h]\n\n  v3 = a3;\n  v4 = nptr;\n  if ( nptr || (v4 = getenv(\"BLOCK_SIZE\")) != 0LL || (v4 = getenv(\"BLOCKSIZE\")) != 0LL )\n  {\n    v5 = 0;\n    if ( *v4 == 39 )\n    {\n      ++v4;\n      v5 = 4;\n    }\n    v6 = sub_40ACF0(v4, (const char **)off_41D8A0, (char *)dword_41D890, 4uLL);\n    if ( v6 >= 0 )\n    {\n      *v3 = 1LL;\n      v7 = dword_41D890[v6] | v5;\n      result = 0LL;\n      *a2 = v7;\n      return result;\n    }\n    result = sub_4132B0(v4);\n    if ( (_DWORD)result )\n    {\n      *a2 = 0;\n      v9 = *v3;\nLABEL_15:\n      if ( !v9 )\n      {\n        *v3 = (unsigned __int64)getenv(\"POSIXLY_CORRECT\") < 1 ? 1024LL : 512LL;\n        result = 4LL;\n      }\n      return result;\n    }\n    if ( (unsigned __int8)(*v4 - 48) > 9u )\n    {\n      if ( v4 != v10 )\n      {\n        while ( (unsigned __int8)(*++v4 - 48) > 9u )\n        {\n          if ( v4 == v10 )\n            goto LABEL_22;\n        }\n        goto LABEL_13;\n      }\nLABEL_22:\n      if ( *(v10 - 1) == 66 )\n      {\n        v5 |= 0x180u;\n        if ( *(v10 - 2) != 105 )\n          goto LABEL_13;\n      }\n      else\n      {\n        LOBYTE(v5) = v5 | 0x80;\n      }\n      v5 |= 0x20u;\n    }\nLABEL_13:\n    v9 = *v3;\n    *a2 = v5;\n    goto LABEL_15;\n  }\n  result = (__int64)getenv(\"POSIXLY_CORRECT\");\n  if ( result )\n  {\n    *v3 = 512LL;\n    result = 0LL;\n  }\n  else\n  {\n    *v3 = 1024LL;\n  }\n  *a2 = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x40dfa0L", 
            "funcEndAddr": "0x40e157L", 
            "funcName": "sub_40DFA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E160(__uid_t a1)\n{\n  __int64 v1; // rbx\n  __uid_t v2; // ebp\n  char *v3; // r12\n  struct passwd *v4; // rax\n  size_t v5; // rdi\n  __int64 v6; // rax\n  __int64 v7; // rax\n  __int64 result; // rax\n\n  v1 = qword_6257B8;\n  if ( qword_6257B8 )\n  {\n    if ( a1 == *(_DWORD *)qword_6257B8 )\n      goto LABEL_9;\n    while ( 1 )\n    {\n      v1 = *(_QWORD *)(v1 + 8);\n      if ( !v1 )\n        break;\n      if ( *(_DWORD *)v1 == a1 )\n        goto LABEL_9;\n    }\n  }\n  v2 = a1;\n  v3 = \"\";\n  v4 = getpwuid(a1);\n  v5 = 24LL;\n  if ( v4 )\n  {\n    v3 = v4->pw_name;\n    v5 = (strlen(v4->pw_name) + 24) & 0xFFFFFFFFFFFFFFF8LL;\n  }\n  v6 = sub_412980(v5);\n  *(_DWORD *)v6 = v2;\n  v1 = v6;\n  strcpy((char *)(v6 + 16), v3);\n  v7 = qword_6257B8;\n  qword_6257B8 = v1;\n  *(_QWORD *)(v1 + 8) = v7;\nLABEL_9:\n  result = 0LL;\n  if ( *(_BYTE *)(v1 + 16) )\n    result = v1 + 16;\n  return result;\n}\n", 
            "funcStartAddr": "0x40e160L", 
            "funcEndAddr": "0x40e1f0L", 
            "funcName": "sub_40E160"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E2F0(__gid_t a1)\n{\n  __int64 v1; // rbx\n  __gid_t v2; // ebp\n  char *v3; // r12\n  struct group *v4; // rax\n  size_t v5; // rdi\n  __int64 v6; // rax\n  __int64 v7; // rax\n  __int64 result; // rax\n\n  v1 = qword_6257A8;\n  if ( qword_6257A8 )\n  {\n    if ( a1 == *(_DWORD *)qword_6257A8 )\n      goto LABEL_9;\n    while ( 1 )\n    {\n      v1 = *(_QWORD *)(v1 + 8);\n      if ( !v1 )\n        break;\n      if ( *(_DWORD *)v1 == a1 )\n        goto LABEL_9;\n    }\n  }\n  v2 = a1;\n  v3 = \"\";\n  v4 = getgrgid(a1);\n  v5 = 24LL;\n  if ( v4 )\n  {\n    v3 = v4->gr_name;\n    v5 = (strlen(v4->gr_name) + 24) & 0xFFFFFFFFFFFFFFF8LL;\n  }\n  v6 = sub_412980(v5);\n  *(_DWORD *)v6 = v2;\n  v1 = v6;\n  strcpy((char *)(v6 + 16), v3);\n  v7 = qword_6257A8;\n  qword_6257A8 = v1;\n  *(_QWORD *)(v1 + 8) = v7;\nLABEL_9:\n  result = 0LL;\n  if ( *(_BYTE *)(v1 + 16) )\n    result = v1 + 16;\n  return result;\n}\n", 
            "funcStartAddr": "0x40e2f0L", 
            "funcEndAddr": "0x40e380L", 
            "funcName": "sub_40E2F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E480(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n  __int64 result; // rax\n  int v4; // eax\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  if ( a1 < 0 )\n  {\n    while ( 1 )\n    {\n      v4 = 10 * (unsigned __int64)(a1 / 10) + 48 - a1;\n      a1 /= 10LL;\n      *(_BYTE *)(v2 - 1) = v4;\n      if ( !a1 )\n        break;\n      --v2;\n    }\n    *(_BYTE *)(v2 - 2) = 45;\n    result = v2 - 2;\n  }\n  else\n  {\n    do\n    {\n      *(_BYTE *)--v2 = a1 % 0xAuLL + 48;\n      a1 /= 0xAuLL;\n    }\n    while ( a1 );\n    result = v2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40e480L", 
            "funcEndAddr": "0x40e51cL", 
            "funcName": "sub_40E480"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E520(unsigned __int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  while ( 1 )\n  {\n    *(_BYTE *)--v2 = a1 % 0xA + 48;\n    if ( a1 <= 9 )\n      break;\n    a1 /= 0xAuLL;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40e520L", 
            "funcEndAddr": "0x40e568L", 
            "funcName": "sub_40E520"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E570(const char *a1, _BYTE *a2, __int64 a3, size_t *a4, int a5, char a6)\n{\n  size_t *v6; // r13\n  char v7; // bp\n  _BYTE *v8; // rbx\n  size_t v9; // rax\n  size_t v10; // r14\n  size_t v11; // r15\n  char *v12; // r12\n  size_t v13; // rdx\n  size_t v14; // rax\n  int v15; // esi\n  size_t v16; // r13\n  size_t v17; // r15\n  unsigned __int64 v18; // rbp\n  _BYTE *v19; // rdi\n  size_t v20; // rdx\n  _BYTE *v21; // rax\n  _BYTE *v22; // rdx\n  __int64 v23; // r13\n  size_t v25; // r12\n  size_t v26; // rax\n  size_t v27; // r15\n  wint_t v28; // edi\n  __int64 v29; // rdx\n  char *v30; // rax\n  wchar_t *v31; // r14\n  wchar_t v32; // edi\n  __int64 v33; // rax\n  unsigned __int64 v34; // rax\n  wchar_t *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v36; // [rsp+8h] [rbp-60h]\n  int v37; // [rsp+14h] [rbp-54h]\n  void *src; // [rsp+18h] [rbp-50h]\n  void *srca; // [rsp+18h] [rbp-50h]\n  __int64 size; // [rsp+20h] [rbp-48h]\n  char sizea; // [rsp+20h] [rbp-48h]\n  __int64 sizeb; // [rsp+20h] [rbp-48h]\n  _DWORD *v43; // [rsp+28h] [rbp-40h]\n\n  v6 = a4;\n  v7 = a6;\n  v8 = a2;\n  src = (void *)a1;\n  v36 = a3;\n  v37 = a5;\n  v9 = strlen(a1);\n  v10 = v9;\n  if ( v7 & 2 || (v25 = v9, __ctype_get_mb_cur_max() <= 1) )\n  {\nLABEL_2:\n    ptr = 0LL;\n    v11 = v10;\n    v12 = 0LL;\n    goto LABEL_3;\n  }\n  v26 = mbstowcs(0LL, a1, 0LL);\n  if ( v26 == -1LL )\n  {\n    if ( !(v7 & 1) )\n    {\nLABEL_36:\n      v12 = 0LL;\n      v23 = -1LL;\n      free(0LL);\n      goto LABEL_28;\n    }\n    goto LABEL_2;\n  }\n  v27 = v26 + 1;\n  size = v26 + 1;\n  ptr = (wchar_t *)malloc(size * 4);\n  if ( !ptr )\n  {\n    v11 = v10;\n    v12 = 0LL;\n    if ( !(v7 & 1) )\n      goto LABEL_36;\nLABEL_3:\n    v13 = *v6;\n    if ( *v6 < v11 )\n    {\n      v10 = *v6;\n      v14 = 0LL;\n      goto LABEL_5;\n    }\nLABEL_30:\n    if ( v11 < v13 )\n    {\n      v15 = v37;\n      v14 = v13 - v11;\n      *v6 = v11;\n      if ( v37 )\n      {\nLABEL_6:\n        v16 = 0LL;\n        if ( v15 != 1 )\n        {\n          v16 = v14 >> 1;\n          v14 = (v14 >> 1) + (v14 & 1);\n        }\n        goto LABEL_8;\n      }\nLABEL_32:\n      v16 = v14;\n      v14 = 0LL;\nLABEL_8:\n      v17 = v14 + v10;\n      if ( v7 & 4 )\n      {\n        v17 = v10;\n        v14 = 0LL;\n      }\n      if ( v7 & 8 )\n        v16 = 0LL;\n      if ( v36 )\n      {\n        v18 = (unsigned __int64)&v8[v36 - 1];\n        v19 = v8;\n        if ( (unsigned __int64)v8 < v18 && v14 )\n        {\n          do\n            *(++v19 - 1) = 32;\n          while ( v14 + v8 - v19 && v18 > (unsigned __int64)v19 );\n        }\n        *v19 = 0;\n        v20 = v18 - (_QWORD)v19;\n        if ( v18 - (unsigned __int64)v19 > v10 )\n          v20 = v10;\n        v21 = mempcpy(v19, src, v20);\n        v22 = v21;\n        if ( v18 > (unsigned __int64)v21 && v16 )\n        {\n          do\n            *(++v22 - 1) = 32;\n          while ( &v21[v16 - (_QWORD)v22] && v18 > (unsigned __int64)v22 );\n        }\n        *v22 = 0;\n      }\n      v23 = v17 + v16;\n      goto LABEL_27;\n    }\n    v13 = v11;\n    v14 = 0LL;\nLABEL_5:\n    v15 = v37;\n    *v6 = v13;\n    if ( v37 )\n      goto LABEL_6;\n    goto LABEL_32;\n  }\n  if ( !mbstowcs(ptr, a1, v27) )\n  {\n    v11 = v10;\n    v12 = 0LL;\n    goto LABEL_3;\n  }\n  ptr[size - 1] = 0;\n  v28 = *ptr;\n  v29 = (__int64)ptr;\n  if ( *ptr )\n  {\n    sizea = 0;\n    do\n    {\n      v43 = (_DWORD *)v29;\n      if ( !iswprint(v28) )\n      {\n        *v43 = 65533;\n        sizea = 1;\n      }\n      v29 = (__int64)(v43 + 1);\n      v28 = v43[1];\n    }\n    while ( v43[1] );\n    v11 = wcswidth(ptr, v27);\n    if ( sizea )\n    {\n      sizeb = wcstombs(0LL, ptr, 0LL) + 1;\n      v30 = (char *)malloc(sizeb);\n      goto LABEL_46;\n    }\n  }\n  else\n  {\n    v11 = wcswidth(ptr, v27);\n  }\n  v13 = *v6;\n  if ( *v6 >= v11 )\n  {\n    v12 = 0LL;\n    goto LABEL_30;\n  }\n  sizeb = v25 + 1;\n  v30 = (char *)malloc(v25 + 1);\nLABEL_46:\n  v12 = v30;\n  if ( v30 )\n  {\n    v31 = ptr;\n    v32 = *ptr;\n    srca = (void *)*v6;\n    if ( *ptr )\n    {\n      v11 = 0LL;\n      do\n      {\n        LODWORD(v33) = wcwidth(v32);\n        if ( (_DWORD)v33 == -1 )\n        {\n          *v31 = 65533;\n          v33 = 1LL;\n        }\n        else\n        {\n          v33 = (int)v33;\n        }\n        v34 = v11 + v33;\n        if ( (unsigned __int64)srca < v34 )\n          break;\n        ++v31;\n        v32 = *v31;\n        v11 = v34;\n      }\n      while ( *v31 );\n    }\n    else\n    {\n      v31 = ptr;\n      v11 = 0LL;\n    }\n    *v31 = 0;\n    src = v12;\n    v10 = wcstombs(v12, ptr, sizeb);\n    goto LABEL_3;\n  }\n  if ( v7 & 1 )\n    goto LABEL_3;\n  v23 = -1LL;\nLABEL_27:\n  free(ptr);\nLABEL_28:\n  free(v12);\n  return v23;\n}\n", 
            "funcStartAddr": "0x40e570L", 
            "funcEndAddr": "0x40e90bL", 
            "funcName": "sub_40E570"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E9B0(char *s, __int64 a2, char a3)\n{\n  char v3; // r15\n  char *v4; // r13\n  char *v5; // rbx\n  unsigned int v6; // er12\n  char v7; // al\n  __int64 v8; // rax\n  __int64 v9; // rbp\n  int v10; // eax\n  int v12; // er15\n  const unsigned __int16 *v13; // rdx\n  unsigned __int16 v14; // ax\n  wchar_t c; // [rsp+4h] [rbp-44h]\n  mbstate_t ps; // [rsp+8h] [rbp-40h]\n\n  v3 = a3;\n  v4 = &s[a2];\n  v5 = s;\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    v6 = 0;\n    if ( s >= v4 )\n      return v6;\n    v6 = 0;\n    v12 = v3 & 2;\n    v13 = *__ctype_b_loc();\n    while ( 1 )\n    {\n      v14 = v13[(unsigned __int8)*(++v5 - 1)];\n      if ( v14 & 0x4000 )\n        goto LABEL_42;\n      if ( v12 )\n        return (unsigned int)-1;\n      if ( !(v14 & 2) )\n      {\nLABEL_42:\n        if ( v6 == 0x7FFFFFFF )\n          return v6;\n        ++v6;\n      }\n      if ( v4 == v5 )\n        return v6;\n    }\n  }\n  v6 = 0;\n  if ( s < v4 )\n  {\n    do\n    {\n      v7 = *v5;\n      if ( *v5 <= 63 )\n      {\n        if ( v7 < 37 && (unsigned __int8)(v7 - 32) > 3u )\n        {\nLABEL_12:\n          ps = 0LL;\n          while ( 1 )\n          {\n            v8 = sub_416E80(&c, v5);\n            v9 = v8;\n            if ( v8 == -1 )\n            {\n              if ( !(v3 & 1) )\n                goto LABEL_6;\n              return (unsigned int)-1;\n            }\n            if ( v8 == -2 )\n              break;\n            if ( !v8 )\n              v9 = 1LL;\n            v10 = wcwidth(c);\n            if ( v10 >= 0 )\n            {\n              if ( (int)(0x7FFFFFFF - v6) < v10 )\n                return 0x7FFFFFFF;\n              v6 += v10;\n            }\n            else\n            {\n              if ( v3 & 2 )\n                return (unsigned int)-1;\n              if ( !iswcntrl(c) )\n              {\n                if ( v6 == 0x7FFFFFFF )\n                  return 0x7FFFFFFF;\n                ++v6;\n              }\n            }\n            v5 += v9;\n            if ( mbsinit(&ps) )\n              goto LABEL_7;\n          }\n          if ( v3 & 1 )\n            return (unsigned int)-1;\n          ++v6;\n          v5 = &s[a2];\n          continue;\n        }\n      }\n      else if ( v7 < 65 || v7 > 95 && (unsigned __int8)(v7 - 97) > 0x1Du )\n      {\n        goto LABEL_12;\n      }\nLABEL_6:\n      ++v5;\n      ++v6;\nLABEL_7:\n      ;\n    }\n    while ( v5 < v4 );\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x40e9b0L", 
            "funcEndAddr": "0x40eb63L", 
            "funcName": "sub_40E9B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40EB70(char *s, char a2)\n{\n  __int64 v2; // rax\n\n  v2 = strlen(s);\n  return sub_40E9B0(s, v2, a2);\n}\n", 
            "funcStartAddr": "0x40eb70L", 
            "funcEndAddr": "0x40eb93L", 
            "funcName": "sub_40EB70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40EBA0(__int64 *a1, unsigned __int64 a2, __int64 *a3, int (__fastcall *a4)(__int64, __int64))\n{\n  int (__fastcall *v4)(__int64, __int64); // r13\n  __int64 v5; // r12\n  __int64 v6; // rbp\n  __int64 v7; // rbp\n  __int64 v8; // r15\n  unsigned __int64 v9; // r14\n  __int64 i; // r12\n  __int64 *v11; // r15\n  unsigned __int64 v12; // r14\n  __int64 v13; // rbp\n  __int64 v14; // r12\n  __int64 v15; // [rsp+0h] [rbp-68h]\n  unsigned __int64 v16; // [rsp+0h] [rbp-68h]\n  unsigned __int64 v17; // [rsp+10h] [rbp-58h]\n  __int64 *v18; // [rsp+18h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+20h] [rbp-48h]\n  __int64 *v20; // [rsp+28h] [rbp-40h]\n\n  v4 = a4;\n  v18 = a3;\n  if ( a2 > 2 )\n  {\n    v17 = a2 >> 1;\n    v20 = &a1[a2 >> 1];\n    sub_40EBA0(v20, a2 - (a2 >> 1), a3, a4);\n    if ( a2 == 3 )\n    {\n      v7 = *a1;\n      *v18 = *a1;\n    }\n    else\n    {\n      v11 = v18;\n      v12 = a2 >> 2;\n      v19 = a2 >> 2;\n      sub_40EBA0(&a1[a2 >> 2], v17 - (a2 >> 2), v18, v4);\n      sub_40EBA0(a1, a2 >> 2, v18, v4);\n      v16 = 0LL;\n      v13 = *a1;\n      v14 = a1[a2 >> 2];\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          ++v11;\n          if ( v4(v13, v14) <= 0 )\n            break;\n          *(v11 - 1) = v14;\n          if ( v17 == ++v12 )\n            goto LABEL_22;\n          v14 = a1[v12];\n        }\n        ++v16;\n        *(v11 - 1) = v13;\n        if ( v19 == v16 )\n          break;\n        v13 = a1[v16];\n      }\n      v16 = v12;\n      v19 = a2 >> 1;\nLABEL_22:\n      memcpy(v11, &a1[v16], 8 * (v19 - v16));\n      v7 = *v18;\n    }\n    v15 = 0LL;\n    v8 = 0LL;\n    v9 = a2 >> 1;\n    for ( i = *v20; ; i = a1[v9] )\n    {\n      while ( 1 )\n      {\n        ++v8;\n        if ( v4(v7, i) > 0 )\n          break;\n        ++v15;\n        a1[v8 - 1] = v7;\n        if ( v17 == v15 )\n          return;\n        v7 = v18[v15];\n      }\n      a1[v8 - 1] = i;\n      if ( a2 == ++v9 )\n        break;\n    }\n    memcpy(&a1[v8], &v18[v15], 8 * (v17 - v15));\n  }\n  else if ( a2 == 2 )\n  {\n    v5 = a1[1];\n    v6 = *a1;\n    if ( a4(*a1, a1[1]) > 0 )\n    {\n      *a1 = v5;\n      a1[1] = v6;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x40eba0L", 
            "funcEndAddr": "0x40edc1L", 
            "funcName": "sub_40EBA0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40EDD0(__int64 *a1, unsigned __int64 a2, int (__fastcall *a3)(__int64, __int64))\n{\n  sub_40EBA0(a1, a2, &a1[a2], a3);\n}\n", 
            "funcStartAddr": "0x40edd0L", 
            "funcEndAddr": "0x40eddfL", 
            "funcName": "sub_40EDD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40EDE0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  const __int32_t **v4; // rax\n\n  if ( a3 )\n  {\n    v3 = a3 - 1;\n    v4 = __ctype_tolower_loc();\n    do\n    {\n      *(_BYTE *)(a1 + v3) = (*v4)[*(unsigned __int8 *)(a2 + v3)];\n      --v3;\n    }\n    while ( v3 != -1 );\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x40ede0L", 
            "funcEndAddr": "0x40ee21L", 
            "funcName": "sub_40EDE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40EE30(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  const __int32_t **v4; // rax\n\n  if ( a3 )\n  {\n    v3 = a3 - 1;\n    v4 = __ctype_toupper_loc();\n    do\n    {\n      *(_BYTE *)(a1 + v3) = (*v4)[*(unsigned __int8 *)(a2 + v3)];\n      --v3;\n    }\n    while ( v3 != -1 );\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x40ee30L", 
            "funcEndAddr": "0x40ee71L", 
            "funcName": "sub_40EE30"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_40EE80@<rax>(void *s@<rdi>, unsigned __int64 a2@<rdx>, const __m128i *a3@<rcx>, __int64 a4@<rsi>, char a5@<r8b>, __int64 a6, int a7)\n{\n  char *v7; // r15\n  char *v8; // rbx\n  __int64 v9; // r12\n  int v10; // er11\n  char v11; // al\n  __int64 v12; // r14\n  char *v13; // r8\n  char v15; // r11\n  __int64 v16; // r8\n  int i; // er12\n  unsigned int v18; // eax\n  __int64 v19; // rcx\n  __int64 v20; // r9\n  bool v21; // cc\n  int v22; // ebp\n  unsigned int v23; // eax\n  int v24; // edi\n  char *v25; // rax\n  char *v26; // r8\n  char v27; // r13\n  size_t v28; // rax\n  unsigned __int64 v29; // rcx\n  int v30; // eax\n  unsigned __int64 v31; // rbx\n  size_t v32; // rdx\n  char *v33; // rdi\n  char *v34; // rsi\n  size_t v35; // rdx\n  char *v36; // rdi\n  unsigned __int64 v37; // rcx\n  __int64 v38; // r13\n  __m128i v39; // xmm4\n  __m128i v40; // xmm2\n  __int64 v41; // rax\n  __int64 v42; // rax\n  __int64 v43; // rsi\n  __int64 v44; // rcx\n  int v45; // edx\n  unsigned int v46; // eax\n  int v47; // er10\n  char *v48; // rcx\n  unsigned __int64 v49; // rax\n  size_t v50; // r9\n  unsigned __int64 v51; // r9\n  size_t v52; // rdx\n  char *v53; // rdi\n  unsigned __int64 v54; // r10\n  int v55; // eax\n  unsigned __int64 v56; // rsi\n  size_t v57; // rdx\n  char *v58; // rdi\n  __int32 v59; // er10\n  __int32 v60; // er13\n  int v61; // edi\n  int v62; // er8\n  int v63; // eax\n  int v64; // er13\n  int v65; // er13\n  int v66; // edi\n  unsigned int v67; // esi\n  int v68; // edi\n  unsigned int v69; // er8\n  unsigned __int64 v70; // r13\n  int v71; // eax\n  unsigned __int64 v72; // rsi\n  char v73; // r11\n  char v74; // r8\n  size_t v75; // rdx\n  char *v76; // rdi\n  int v77; // esi\n  unsigned __int64 v78; // r13\n  size_t v79; // rdx\n  char *v80; // rdi\n  char *v81; // rcx\n  __int64 v82; // rax\n  unsigned __int64 v83; // rsi\n  size_t v84; // rdx\n  char *v85; // rdi\n  size_t v86; // rdx\n  char *v87; // rdi\n  int v88; // esi\n  int v89; // edi\n  int v90; // edx\n  __int64 v91; // rax\n  char *v92; // r9\n  size_t v93; // rcx\n  size_t v94; // rax\n  size_t v95; // rdx\n  char *v96; // rdi\n  size_t v97; // rcx\n  __int64 j; // r13\n  __int64 v99; // rsi\n  int v100; // eax\n  int v101; // esi\n  char v102; // cl\n  int v103; // esi\n  size_t v104; // rdx\n  char *v105; // rdi\n  int v106; // eax\n  int v107; // eax\n  char v108; // al\n  char v109; // cl\n  unsigned __int64 v110; // r12\n  unsigned __int64 v111; // r8\n  size_t v112; // rdx\n  __int64 v113; // r12\n  char *v114; // rdi\n  int v115; // eax\n  unsigned __int64 v116; // rcx\n  char *v117; // rdi\n  int v118; // esi\n  int v119; // edx\n  int v120; // er10\n  int v121; // esi\n  int k; // edi\n  __int32 v123; // esi\n  bool v124; // sf\n  bool v125; // of\n  int v126; // eax\n  int v127; // eax\n  int v128; // esi\n  int v129; // esi\n  __int64 v130; // [rsp+0h] [rbp-4C8h]\n  const __m128i *tp; // [rsp+8h] [rbp-4C0h]\n  char *v132; // [rsp+20h] [rbp-4A8h]\n  char v133; // [rsp+2Bh] [rbp-49Dh]\n  int v134; // [rsp+2Ch] [rbp-49Ch]\n  char *v135; // [rsp+30h] [rbp-498h]\n  char v136; // [rsp+30h] [rbp-498h]\n  unsigned __int64 v137; // [rsp+30h] [rbp-498h]\n  char v138; // [rsp+30h] [rbp-498h]\n  int v139; // [rsp+30h] [rbp-498h]\n  char v140; // [rsp+30h] [rbp-498h]\n  char v141; // [rsp+30h] [rbp-498h]\n  size_t v142; // [rsp+30h] [rbp-498h]\n  char v143; // [rsp+30h] [rbp-498h]\n  size_t v144; // [rsp+30h] [rbp-498h]\n  int v145; // [rsp+30h] [rbp-498h]\n  char v146; // [rsp+40h] [rbp-488h]\n  char *v147; // [rsp+40h] [rbp-488h]\n  char *v148; // [rsp+40h] [rbp-488h]\n  char v149; // [rsp+40h] [rbp-488h]\n  char *v150; // [rsp+40h] [rbp-488h]\n  char v151; // [rsp+40h] [rbp-488h]\n  char v152; // [rsp+40h] [rbp-488h]\n  char v153; // [rsp+40h] [rbp-488h]\n  char *v154; // [rsp+40h] [rbp-488h]\n  char *v155; // [rsp+40h] [rbp-488h]\n  char v156; // [rsp+40h] [rbp-488h]\n  char *v157; // [rsp+40h] [rbp-488h]\n  char v158; // [rsp+40h] [rbp-488h]\n  int v159; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v160; // [rsp+48h] [rbp-480h]\n  char *v161; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v162; // [rsp+48h] [rbp-480h]\n  char v163; // [rsp+48h] [rbp-480h]\n  char *v164; // [rsp+48h] [rbp-480h]\n  char *v165; // [rsp+48h] [rbp-480h]\n  char v166; // [rsp+48h] [rbp-480h]\n  int v167; // [rsp+48h] [rbp-480h]\n  char v168; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v169; // [rsp+50h] [rbp-478h]\n  int v170; // [rsp+50h] [rbp-478h]\n  size_t v171; // [rsp+50h] [rbp-478h]\n  unsigned __int64 v172; // [rsp+50h] [rbp-478h]\n  int v173; // [rsp+50h] [rbp-478h]\n  size_t v174; // [rsp+58h] [rbp-470h]\n  char *v175; // [rsp+58h] [rbp-470h]\n  char v176; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v177; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v178; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v179; // [rsp+60h] [rbp-468h]\n  char format[2]; // [rsp+70h] [rbp-458h]\n  char v181; // [rsp+72h] [rbp-456h]\n  char v182; // [rsp+73h] [rbp-455h]\n  char v183[9]; // [rsp+87h] [rbp-441h]\n  char sa[16]; // [rsp+90h] [rbp-438h]\n  __m128i v185; // [rsp+A0h] [rbp-428h]\n  __m128i v186; // [rsp+B0h] [rbp-418h]\n  __int64 v187; // [rsp+C0h] [rbp-408h]\n\n  v7 = (char *)s;\n  v8 = (char *)a2;\n  v9 = a3[3].m128i_i64[0];\n  v10 = a3->m128i_i64[1];\n  v130 = a4;\n  tp = a3;\n  if ( !v9 )\n    v9 = 4305034LL;\n  v133 = a5;\n  if ( v10 <= 12 )\n  {\n    if ( !v10 )\n      v10 = 12;\n  }\n  else\n  {\n    v10 -= 12;\n  }\n  v11 = *(_BYTE *)a2;\n  v12 = 0LL;\n  if ( !*(_BYTE *)a2 )\n  {\nLABEL_13:\n    if ( v7 && v130 )\n      *v7 = 0;\n    return v12;\n  }\n  v134 = v10;\n  v132 = (char *)v9;\n  while ( v11 != 37 )\n  {\n    a2 = v130 - v12;\n    if ( (unsigned __int64)(v130 - v12) <= 1 )\n      return 0LL;\n    if ( v7 )\n      *v7++ = v11;\n    ++v12;\n    v13 = v8;\nLABEL_12:\n    v11 = v13[1];\n    v8 = v13 + 1;\n    if ( !v11 )\n      goto LABEL_13;\n  }\n  v15 = v133;\n  v16 = 0LL;\nLABEL_22:\n  for ( i = 0; ; i = v18 )\n  {\n    v18 = *++v8;\n    v19 = v18;\n    v20 = v18;\n    v21 = *v8 <= 48;\n    if ( *v8 != 48 )\n      break;\nLABEL_26:\n    ;\n  }\n  while ( 1 )\n  {\n    if ( !v21 )\n    {\n      if ( (_BYTE)v18 == 94 )\n      {\n        v15 = 1;\n        goto LABEL_22;\n      }\n      if ( (_BYTE)v18 != 95 )\n      {\n        v22 = -1;\n        if ( v18 - 48 > 9 )\n          goto LABEL_29;\n        goto LABEL_37;\n      }\n      goto LABEL_26;\n    }\n    if ( (_BYTE)v18 != 35 )\n      break;\n    v18 = *++v8;\n    v16 = 1LL;\n    v19 = v18;\n    v20 = v18;\n    v21 = *v8 <= 48;\n    if ( *v8 == 48 )\n      goto LABEL_26;\n  }\n  if ( (_BYTE)v18 == 45 )\n    goto LABEL_26;\n  v22 = -1;\n  if ( v18 - 48 > 9 )\n    goto LABEL_29;\nLABEL_37:\n  v22 = 0;\n  while ( 1 )\n  {\n    v23 = v8[1];\n    v19 = v23;\n    a2 = v23 - 48;\n    if ( v22 > 214748364 )\n      break;\n    v24 = *v8;\n    if ( v22 == 214748364 && (char)v24 > 55 )\n      break;\n    ++v8;\n    v22 = v24 + 10 * v22 - 48;\nLABEL_41:\n    if ( (unsigned int)a2 > 9 )\n    {\n      v20 = v23;\n      goto LABEL_29;\n    }\n  }\n  if ( (unsigned int)a2 <= 9 )\n  {\n    v23 = v8[2];\n    v22 = 0x7FFFFFFF;\n    v8 += 2;\n    v19 = v23;\n    a2 = v23 - 48;\n    goto LABEL_41;\n  }\n  v20 = v23;\n  ++v8;\n  v22 = 0x7FFFFFFF;\nLABEL_29:\n  if ( (_BYTE)v19 == 69 || (_BYTE)v19 == 79 )\n    v19 = (unsigned __int8)*++v8;\n  else\n    v20 = 0LL;\n  switch ( (_BYTE)v19 )\n  {\n    case 0:\n      v92 = v8 - 1;\n      v102 = *(v8 - 1);\n      goto LABEL_263;\n    case 0x25:\n      LODWORD(v94) = 0;\n      v78 = 1LL;\n      a2 = v130 - v12;\n      if ( v22 >= 0 )\n        LODWORD(v94) = v22;\n      v94 = (int)v94;\n      if ( (_DWORD)v94 )\n        v78 = (int)v94;\n      if ( (_DWORD)v20 )\n      {\n        v13 = v8;\n        v92 = v8;\n        v93 = 1LL;\n        goto LABEL_244;\n      }\n      if ( v78 < a2 )\n      {\n        if ( v7 )\n        {\n          if ( v22 > 1 )\n          {\n            v104 = v22 - 1LL;\n            v105 = v7;\n            v7 += v104;\n            if ( i == 48 )\n              memset(v105, 48, v104);\n            else\n              memset(v105, 32, v104);\n            LOBYTE(v19) = *v8;\n          }\n          *v7++ = v19;\n        }\nLABEL_176:\n        v12 += v78;\n        v13 = v8;\n        goto LABEL_12;\n      }\n      return 0LL;\n    case 0x3A:\n      v108 = v8[1];\n      a2 = (unsigned __int64)(v8 + 1);\n      for ( j = 1LL; v108 == 58; a2 = (unsigned __int64)&v8[j] )\n        v108 = v8[++j];\n      if ( v108 != 122 )\n        goto LABEL_238;\n      v8 = (char *)a2;\n      goto LABEL_254;\n    case 0x41:\n    case 0x42:\n    case 0x61:\n      if ( (_DWORD)v20 )\n        goto LABEL_238;\n      if ( (_BYTE)v16 )\n        v15 = v16;\n      goto LABEL_51;\n    case 0x43:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_336;\n      v140 = 0;\n      v47 = 2;\n      LOBYTE(v69) = tp[1].m128i_i32[1] < -1900;\n      v67 = tp[1].m128i_i32[1] / 100\n          + 19\n          - ((tp[1].m128i_i32[1] / 100 + 19 > 0) & ((unsigned int)(tp[1].m128i_i32[1] % 100) >> 31));\n      v68 = 0;\n      goto LABEL_122;\n    case 0x44:\n      if ( !(_DWORD)v20 )\n        goto LABEL_94;\n      goto LABEL_238;\n    case 0x46:\n      if ( !(_DWORD)v20 )\n        goto LABEL_94;\n      goto LABEL_238;\n    case 0x47:\n    case 0x56:\n    case 0x67:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v59 = tp[1].m128i_i32[3];\n      v60 = tp[1].m128i_i32[2];\n      v139 = tp[1].m128i_i32[1];\n      v61 = v139 + ((v139 >> 31) & 0x190) - 100;\n      v62 = v60 - 382 + 7 * ((v59 - v60 + 382) / 7) + 3;\n      if ( v62 < 0 )\n      {\n        v118 = v139 + ((v139 >> 31) & 0x190) - 101;\n        v119 = 365;\n        if ( !(((_BYTE)v139 + ((v139 >> 31) & 0x90) - 101) & 3) )\n        {\n          v119 = 366;\n          if ( v118 == 100 * (v118 / 100) )\n            v119 = 366 - ((unsigned int)(v118 % 400) >= 1);\n        }\n        v120 = v119 + v59;\n        v121 = v120 - v60;\n        v65 = -1;\n        v62 = v120 - (v121 + 382) + 7 * ((v121 + 382) / 7) + 3;\n      }\n      else\n      {\n        v63 = 365;\n        if ( !(v61 & 3) )\n        {\n          v63 = 366;\n          if ( v61 == 100 * (v61 / 100) )\n            v63 = (v61 == 400 * (v61 / 400)) + 365;\n        }\n        v64 = v60 - 382 + 7 * ((v59 - v63 - v60 + 382) / 7) + 3;\n        if ( v64 >= 0 )\n          v62 = v64;\n        v65 = (v64 >> 31) + 1;\n      }\n      if ( (_BYTE)v19 == 71 )\n      {\n        v123 = tp[1].m128i_i32[1];\n        v140 = 0;\n        v47 = 4;\n        v125 = __OFSUB__(v123, -1900 - v65);\n        v124 = v123 - (-1900 - v65) < 0;\n        v67 = v123 + v65 + 1900;\n        LOBYTE(v69) = v124 ^ v125;\n        v68 = 0;\n        goto LABEL_122;\n      }\n      if ( (_BYTE)v19 == 103 )\n      {\n        v47 = 2;\n        v66 = (v65 + v139 % 100) % 100;\n        v67 = v66;\n        if ( v66 < 0 )\n        {\n          v67 = v66 + 100;\n          if ( v139 < -1900 - v65 )\n            v67 = -v66;\n        }\n      }\n      else\n      {\n        v47 = 2;\n        v67 = v62 / 7 + 1;\n      }\n      goto LABEL_121;\n    case 0x48:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v47 = 2;\n      v67 = tp->m128i_i64[1];\n      goto LABEL_121;\n    case 0x49:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v67 = v134;\n      v47 = 2;\n      goto LABEL_121;\n    case 0x4D:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v47 = 2;\n      v67 = HIDWORD(tp->m128i_i64[0]);\n      goto LABEL_121;\n    case 0x4E:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      if ( v22 == -1 )\n      {\n        v67 = a7;\n        v22 = 9;\n        v47 = 9;\n      }\n      else\n      {\n        if ( v22 > 8 )\n        {\n          v67 = a7;\n        }\n        else\n        {\n          v67 = a7;\n          for ( k = v22; k != 9; ++k )\n            v67 = (int)v67 / 10;\n        }\n        v47 = v22;\n      }\n      goto LABEL_121;\n    case 0x50:\n      v27 = 1;\n      goto LABEL_152;\n    case 0x52:\n    case 0x54:\nLABEL_94:\n      v54 = sub_40EE80(0LL, a6, a7);\n      v55 = 0;\n      if ( v22 >= 0 )\n        v55 = v22;\n      v56 = v55;\n      if ( v54 >= v55 )\n        v56 = v54;\n      if ( v130 - v12 <= v56 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( v54 < v55 )\n        {\n          v169 = v54;\n          v57 = v22 - v54;\n          v58 = v7;\n          v7 += v57;\n          if ( i == 48 )\n            memset(v58, 48, v57);\n          else\n            memset(v58, 32, v57);\n          v54 = v169;\n        }\n        v162 = v54;\n        sub_40EE80(v7, a6, a7);\n        v7 += v162;\n      }\n      v12 += v56;\n      v13 = v8;\n      goto LABEL_12;\n    case 0x53:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v47 = 2;\n      v67 = tp->m128i_i64[0];\n      goto LABEL_121;\n    case 0x55:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v89 = tp[1].m128i_i32[3] - tp[1].m128i_i32[2] + 7;\n      v90 = (unsigned __int64)(-1840700269LL * v89) >> 32;\n      goto LABEL_228;\n    case 0x57:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v89 = 7 * ((tp[1].m128i_i32[2] + 6) / 7) - (tp[1].m128i_i32[2] + 6) + tp[1].m128i_i32[3] + 7;\n      v90 = (unsigned __int64)(-1840700269LL * v89) >> 32;\nLABEL_228:\n      v47 = 2;\n      v67 = ((v90 + v89) >> 2) - (v89 >> 31);\n      goto LABEL_121;\n    case 0x58:\n    case 0x63:\n    case 0x78:\n      if ( (_DWORD)v20 != 79 )\n        goto LABEL_69;\n      goto LABEL_238;\n    case 0x59:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_336;\n      if ( (_DWORD)v20 == 79 )\n        goto LABEL_238;\n      v140 = 0;\n      v47 = 4;\n      v88 = tp[1].m128i_i32[1];\n      LOBYTE(v69) = v88 < -1900;\n      v67 = v88 + 1900;\n      v68 = 0;\n      goto LABEL_222;\n    case 0x5A:\n      v163 = v16;\n      if ( (_BYTE)v16 )\n        v15 = 0;\n      v151 = v15;\n      v70 = strlen(v132);\n      v71 = 0;\n      if ( v22 >= 0 )\n        v71 = v22;\n      v72 = v71;\n      if ( v70 >= v71 )\n        v72 = v70;\n      a2 = v130 - v12;\n      if ( v130 - v12 <= v72 )\n        return 0LL;\n      if ( v7 )\n      {\n        v73 = v151;\n        v74 = v163;\n        if ( v70 < v71 )\n        {\n          v75 = v22 - v70;\n          v76 = v7;\n          v7 += v75;\n          if ( i == 48 )\n          {\n            memset(v76, 48, v75);\n            v73 = v151;\n            v74 = v163;\n          }\n          else\n          {\n            memset(v76, 32, v75);\n            v74 = v163;\n            v73 = v151;\n          }\n        }\n        if ( v74 )\n        {\n          sub_40EDE0((__int64)v7, (__int64)v132, v70);\n        }\n        else if ( v73 )\n        {\n          sub_40EE30((__int64)v7, (__int64)v132, v70);\n        }\n        else\n        {\n          memcpy(v7, v132, v70);\n        }\n        v7 += v70;\n      }\n      v12 += v72;\n      v13 = v8;\n      goto LABEL_12;\n    case 0x62:\n    case 0x68:\n      if ( (_BYTE)v16 )\n        v15 = v16;\n      if ( (_DWORD)v20 )\n        goto LABEL_238;\nLABEL_51:\n      v25 = &v181;\n      v26 = v8;\n      v27 = 0;\n      *(_WORD *)format = 9504;\n      LODWORD(v20) = 0;\n      goto LABEL_52;\n    case 0x64:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v47 = 2;\n      v67 = HIDWORD(tp->m128i_i64[1]);\n      goto LABEL_121;\n    case 0x65:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v67 = HIDWORD(tp->m128i_i64[1]);\n      goto LABEL_159;\n    case 0x6A:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v140 = 0;\n      v47 = 3;\n      v103 = tp[1].m128i_i32[3];\n      LOBYTE(v69) = v103 < -1;\n      v67 = v103 + 1;\n      v68 = 0;\n      goto LABEL_122;\n    case 0x6B:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v67 = tp->m128i_i64[1];\n      goto LABEL_159;\n    case 0x6C:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v67 = v134;\nLABEL_159:\n      v47 = 2;\n      if ( i != 48 && i != 45 )\n        i = 95;\n      goto LABEL_121;\n    case 0x6D:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v140 = 0;\n      v47 = 2;\n      v77 = tp[1].m128i_i32[0];\n      LOBYTE(v69) = v77 < -1;\n      v67 = v77 + 1;\n      v68 = 0;\n      goto LABEL_122;\n    case 0x6E:\n      LODWORD(v78) = 0;\n      if ( v22 >= 0 )\n        LODWORD(v78) = v22;\n      v78 = (int)v78;\n      if ( !(_DWORD)v78 )\n        v78 = 1LL;\n      if ( v130 - v12 <= v78 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( v22 > 1 )\n        {\n          v79 = v22 - 1LL;\n          v80 = v7;\n          v7 += v79;\n          if ( i == 48 )\n            memset(v80, 48, v79);\n          else\n            memset(v80, 32, v79);\n        }\n        *v7++ = 10;\n      }\n      goto LABEL_176;\n    case 0x70:\n      v27 = 0;\nLABEL_152:\n      LOBYTE(v19) = 112;\n      if ( (_BYTE)v16 )\n        v27 = v16;\n      if ( (_BYTE)v16 )\n        v15 = 0;\n      goto LABEL_70;\n    case 0x71:\n      v47 = 1;\n      if ( (_DWORD)v20 == 79 )\n        goto LABEL_124;\n      v140 = 0;\n      LOBYTE(v69) = 0;\n      v68 = 0;\n      v67 = ((11 * tp[1].m128i_i32[0]) >> 5) + 1;\n      goto LABEL_179;\n    case 0x72:\nLABEL_69:\n      v27 = 0;\nLABEL_70:\n      *(_WORD *)format = 9504;\n      if ( !(_DWORD)v20 )\n      {\n        v26 = v8;\n        v25 = &v181;\n        goto LABEL_52;\n      }\n      v47 = 0;\n      goto LABEL_125;\n    case 0x73:\n      v149 = v15;\n      v38 = (__int64)v183;\n      v39 = _mm_loadu_si128(tp + 2);\n      v40 = _mm_loadu_si128(tp + 1);\n      v41 = tp[3].m128i_i64[0];\n      *(__m128i *)sa = _mm_loadu_si128(tp);\n      v185 = v40;\n      v186 = v39;\n      v187 = v41;\n      v42 = sub_4177A0(a6, sa, a2, v19, v16, v20);\n      v15 = v149;\n      v43 = v42;\n      v44 = v42;\n      do\n      {\n        v45 = v44 % 10;\n        v44 /= 10LL;\n        v46 = 48 - v45;\n        a2 = (unsigned int)(v45 + 48);\n        if ( v43 < 0 )\n          a2 = v46;\n        *(_BYTE *)--v38 = a2;\n      }\n      while ( v44 );\n      v47 = 1;\n      if ( v22 > 0 )\n        v47 = v22;\n      if ( v43 >= 0 )\n        goto LABEL_79;\n      goto LABEL_300;\n    case 0x74:\n      LODWORD(v78) = 0;\n      if ( v22 >= 0 )\n        LODWORD(v78) = v22;\n      v78 = (int)v78;\n      if ( !(_DWORD)v78 )\n        v78 = 1LL;\n      if ( v130 - v12 <= v78 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( v22 > 1 )\n        {\n          v86 = v22 - 1LL;\n          v87 = v7;\n          v7 += v86;\n          if ( i == 48 )\n            memset(v87, 48, v86);\n          else\n            memset(v87, 32, v86);\n        }\n        *v7++ = 9;\n      }\n      goto LABEL_176;\n    case 0x75:\n      v47 = 1;\n      v67 = (tp[1].m128i_i32[2] + 6) % 7 + 1;\n      goto LABEL_121;\n    case 0x77:\n      if ( (_DWORD)v20 == 69 )\n        goto LABEL_238;\n      v47 = 1;\n      v67 = tp[1].m128i_u32[2];\n      goto LABEL_121;\n    case 0x79:\n      if ( (_DWORD)v20 == 69 )\n      {\nLABEL_336:\n        v47 = 0;\n        goto LABEL_124;\n      }\n      v47 = 2;\n      v106 = tp[1].m128i_i32[1] % 100;\n      v67 = v106;\n      if ( v106 < 0 )\n      {\n        v107 = -v106;\n        v67 += 100;\n        if ( tp[1].m128i_i32[1] <= -1901 )\n          v67 = v107;\n      }\nLABEL_121:\n      v140 = 0;\n      v68 = 0;\n      v69 = v67 >> 31;\nLABEL_122:\n      if ( (_DWORD)v20 == 79 )\n      {\n        if ( (_BYTE)v69 )\n          goto LABEL_223;\nLABEL_124:\n        v27 = 0;\n        *(_WORD *)format = 9504;\nLABEL_125:\n        v181 = v20;\n        v26 = v8;\n        LODWORD(v20) = v47;\n        v25 = &v182;\nLABEL_52:\n        *v25 = v19;\n        v25[1] = 0;\n        v135 = v26;\n        v159 = v20;\n        v146 = v15;\n        v28 = strftime(sa, 0x400uLL, format, (const struct tm *)tp);\n        v13 = v135;\n        if ( v28 )\n        {\n          v29 = v28 - 1;\n          v30 = 0;\n          if ( v22 >= 0 )\n            v30 = v22;\n          v31 = v30;\n          if ( v29 >= v30 )\n            v31 = v29;\n          a2 = v130 - v12;\n          if ( v130 - v12 > v31 )\n          {\n            if ( v7 )\n            {\n              v15 = v146;\n              if ( !v159 && v29 < v30 )\n              {\n                v160 = v29;\n                v32 = v22 - v29;\n                v147 = v135;\n                v136 = v15;\n                v33 = v7;\n                v7 += v32;\n                if ( i == 48 )\n                {\n                  memset(v33, 48, v32);\n                  v15 = v136;\n                  v13 = v147;\n                  v29 = v160;\n                }\n                else\n                {\n                  memset(v33, 32, v32);\n                  v29 = v160;\n                  v13 = v147;\n                  v15 = v136;\n                }\n              }\n              v148 = v13;\n              v34 = &sa[1];\n              v35 = v29;\n              v36 = v7;\n              v137 = v29;\n              if ( !v27 )\n                goto LABEL_64;\n              sub_40EDE0((__int64)v7, (__int64)&sa[1], v29);\n              v37 = v137;\n              v13 = v148;\n              goto LABEL_66;\n            }\n            goto LABEL_67;\n          }\n          return 0LL;\n        }\n        goto LABEL_12;\n      }\nLABEL_222:\n      if ( (_BYTE)v69 )\nLABEL_223:\n        v67 = -v67;\nLABEL_179:\n      v81 = v183;\n      while ( 1 )\n      {\n        v38 = (__int64)(v81 - 1);\n        if ( v68 & 1 )\n        {\n          v82 = (__int64)(v81 - 2);\n          *--v81 = 58;\n          v38 = v82;\n        }\n        v68 >>= 1;\n        a2 = v67 / 0xA;\n        *(v81 - 1) = v67 % 0xA + 48;\n        v81 = (char *)v38;\n        if ( v67 <= 9 && !v68 )\n          break;\n        v67 /= 0xAu;\n      }\n      if ( v47 < v22 )\n        v47 = v22;\n      if ( (_BYTE)v69 )\n      {\nLABEL_300:\n        v141 = 45;\n        v109 = 45;\n        if ( i == 45 )\n          goto LABEL_301;\nLABEL_191:\n        v48 = &v183[-v38];\n        LODWORD(v50) = v47 - 1 - (unsigned __int64)&v183[-v38];\n        v49 = v130 - v12;\n        if ( (int)v50 <= 0 )\n        {\n          LODWORD(v51) = 0;\n          v111 = 1LL;\n          if ( v22 >= 0 )\n            LODWORD(v51) = v22;\n          v51 = (int)v51;\n          if ( (_DWORD)v51 )\n            v111 = (int)v51;\n          if ( v111 >= v49 )\n            return 0LL;\n          if ( v7 )\n          {\n            if ( !v47 && (unsigned __int64)(int)v51 > 1 )\n            {\n              v112 = v22 - 1LL;\n              v179 = v111;\n              v177 = (int)v51;\n              v157 = &v7[v112];\n              v166 = v15;\n              if ( i == 48 )\n              {\n                memset(v7, 48, v112);\n                v7 = v157;\n                v15 = v166;\n                v47 = 0;\n                v51 = v177;\n                v111 = v179;\n                v48 = &v183[-v38];\n              }\n              else\n              {\n                memset(v7, 32, v112);\n                v7 = v157;\n                v48 = &v183[-v38];\n                v111 = v179;\n                v51 = v177;\n                v47 = 0;\n                v15 = v166;\n              }\n            }\n            *(++v7 - 1) = v141;\n          }\n          v12 += v111;\n          v13 = v8;\n          v49 = v130 - v12;\n          goto LABEL_84;\n        }\n        if ( i != 95 )\n        {\n          if ( v47 >= v49 )\n            return 0LL;\n          LODWORD(a2) = 0;\n          v83 = 1LL;\n          if ( v22 >= 0 )\n            LODWORD(a2) = v22;\n          a2 = (int)a2;\n          if ( (_DWORD)a2 )\n            v83 = (int)a2;\n          if ( v83 >= v49 )\n            return 0LL;\n          v12 += v83;\n          v50 = (int)v50;\n          v13 = v8;\n          if ( !v7 )\n            goto LABEL_207;\n          if ( !v47 && (unsigned __int64)(int)a2 > 1 )\n          {\n            v174 = (int)v50;\n            v84 = v22 - 1LL;\n            v152 = v15;\n            v85 = v7;\n            v7 += v84;\n            if ( i == 48 )\n            {\n              memset(v85, 48, v84);\n              v15 = v152;\n              v47 = 0;\n              v48 = &v183[-v38];\n              v50 = v174;\n            }\n            else\n            {\n              memset(v85, 32, v84);\n              v50 = v174;\n              v48 = &v183[-v38];\n              v47 = 0;\n              v15 = v152;\n            }\n          }\n          ++v7;\n          v13 = v8;\n          *(v7 - 1) = v141;\nLABEL_205:\n          if ( v7 )\n          {\n            v175 = v48;\n            v170 = v47;\n            v164 = v13;\n            v153 = v15;\n            v142 = v50;\n            memset(v7, 48, v50);\n            v50 = v142;\n            v48 = v175;\n            v47 = v170;\n            v13 = v164;\n            v15 = v153;\n            v7 += v142;\n          }\nLABEL_207:\n          v12 += v50;\n          v22 = 0;\n          v51 = 0LL;\n          v49 = v130 - v12;\n          goto LABEL_84;\n        }\nLABEL_328:\n        v113 = (int)v50;\n        if ( (int)v50 >= v49 )\n          return 0LL;\n        if ( v7 )\n        {\n          v114 = v7;\n          v173 = v50;\n          v167 = v47;\n          v7 += (int)v50;\n          v158 = v15;\n          memset(v114, 32, (int)v50);\n          LODWORD(v50) = v173;\n          v47 = v167;\n          v15 = v158;\n        }\n        v12 += v113;\n        v115 = v22 - v50;\n        v21 = (int)v50 < v22;\n        v22 = 0;\n        if ( v21 )\n          v22 = v115;\n        v49 = v130 - v12;\n        if ( v141 )\n        {\n          v51 = v22;\n          v116 = 1LL;\n          if ( v22 )\n            v116 = v22;\n          if ( v116 >= v49 )\n            return 0LL;\n          if ( v7 )\n          {\n            if ( !v47 && (unsigned __int64)v22 > 1 )\n            {\n              v117 = v7;\n              v178 = v116;\n              v7 += v22 - 1;\n              v168 = v15;\n              memset(v117, 32, v22 - 1LL);\n              v116 = v178;\n              v47 = 0;\n              v15 = v168;\n              v51 = v22;\n            }\n            *(++v7 - 1) = v141;\n          }\n          v12 += v116;\n          v13 = v8;\n          i = 95;\n          v48 = &v183[-v38];\n          v49 = v130 - v12;\n        }\n        else\n        {\n          v51 = v22;\n          v13 = v8;\n          i = 95;\n          v48 = &v183[-v38];\n        }\n        goto LABEL_84;\n      }\n      if ( !v140 )\n      {\nLABEL_79:\n        v48 = &v183[-v38];\n        v49 = v130 - v12;\n        if ( i == 45 || (LODWORD(v50) = v47 - (_DWORD)v48, v47 - (int)v48 <= 0) )\n        {\n          LODWORD(v51) = 0;\n          v13 = v8;\n          if ( v22 >= 0 )\n            LODWORD(v51) = v22;\n          v51 = (int)v51;\n          goto LABEL_84;\n        }\n        if ( i != 95 )\n        {\n          a2 = v47;\n          if ( v47 >= v49 )\n            return 0LL;\n          v50 = (int)v50;\n          v13 = v8;\n          goto LABEL_205;\n        }\n        v141 = 0;\n        goto LABEL_328;\n      }\n      if ( i != 45 )\n      {\n        v141 = 43;\n        goto LABEL_191;\n      }\n      v109 = 43;\nLABEL_301:\n      LODWORD(v51) = 0;\n      v110 = 1LL;\n      if ( v22 >= 0 )\n        LODWORD(v51) = v22;\n      v51 = (int)v51;\n      if ( (_DWORD)v51 )\n        v110 = (int)v51;\n      if ( v130 - v12 <= v110 )\n        return 0LL;\n      if ( v7 )\n      {\n        if ( !v47 && (unsigned __int64)(int)v51 > 1 )\n        {\n          v176 = v109;\n          v172 = (int)v51;\n          v156 = v15;\n          memset(v7, 32, v22 - 1LL);\n          v109 = v176;\n          v51 = v172;\n          v47 = 0;\n          v15 = v156;\n          v7 += v22 - 1;\n        }\n        *v7++ = v109;\n      }\n      v12 += v110;\n      v13 = v8;\n      i = 45;\n      v48 = &v183[-v38];\n      v49 = v130 - v12;\nLABEL_84:\n      v31 = v51;\n      if ( (unsigned __int64)v48 >= v51 )\n        v31 = (unsigned __int64)v48;\n      if ( v31 < v49 )\n      {\n        if ( v7 )\n        {\n          if ( !v47 && (unsigned __int64)v48 < v51 )\n          {\n            v161 = v48;\n            v52 = v22 - (_QWORD)v48;\n            v150 = v13;\n            v138 = v15;\n            v53 = v7;\n            v7 += v52;\n            if ( i == 48 )\n            {\n              memset(v53, 48, v52);\n              v15 = v138;\n              v13 = v150;\n              v48 = v161;\n            }\n            else\n            {\n              memset(v53, 32, v52);\n              v48 = v161;\n              v13 = v150;\n              v15 = v138;\n            }\n          }\n          v148 = v13;\n          v35 = (size_t)v48;\n          v34 = (char *)v38;\n          v36 = v7;\n          v137 = (unsigned __int64)v48;\nLABEL_64:\n          if ( v15 )\n          {\n            sub_40EE30((__int64)v36, (__int64)v34, v35);\n            v37 = v137;\n            v13 = v148;\n          }\n          else\n          {\n            memcpy(v36, v34, v35);\n            v13 = v148;\n            v37 = v137;\n          }\nLABEL_66:\n          v7 += v37;\n        }\nLABEL_67:\n        v12 += v31;\n        goto LABEL_12;\n      }\n      return 0LL;\n    case 0x7A:\n      j = 0LL;\nLABEL_254:\n      if ( tp[2].m128i_i32[0] < 0 )\n      {\n        v13 = v8;\n        goto LABEL_12;\n      }\n      v99 = tp[2].m128i_i64[1];\n      LOBYTE(v69) = 1;\n      if ( (int)v99 >= 0 )\n      {\n        LOBYTE(v69) = 0;\n        if ( !(_DWORD)v99 )\n          LOBYTE(v69) = *v132 == 45;\n      }\n      v145 = (int)v99 / 3600;\n      v100 = (int)v99 / 60 % 60;\n      v68 = (int)v99 / 60 % 60;\n      v101 = (int)v99 % 60;\n      if ( j == 1 )\n        goto LABEL_364;\n      if ( j )\n      {\n        if ( j == 2 )\n          goto LABEL_383;\n        if ( j != 3 )\n        {\n          v102 = *v8;\n          v92 = v8;\nLABEL_263:\n          LODWORD(v94) = 0;\n          a2 = v130 - v12;\n          if ( v22 >= 0 )\n            LODWORD(v94) = v22;\n          v94 = (int)v94;\n          if ( v102 == 37 )\n          {\n            v78 = 1LL;\n            v13 = v92;\n            v93 = 1LL;\n            if ( (_DWORD)v94 )\n              v78 = (int)v94;\n          }\n          else\n          {\n            v8 = v92;\nLABEL_238:\n            v91 = (__int64)(v8 - 1);\n            do\n            {\n              v92 = (char *)v91;\n              LODWORD(v93) = (_DWORD)v8 - 1 + 2 - v91--;\n            }\n            while ( *(_BYTE *)(v91 + 1) != 37 );\n            LODWORD(v94) = 0;\n            v93 = (int)v93;\n            v13 = v8;\n            a2 = v130 - v12;\n            if ( v22 >= 0 )\n              LODWORD(v94) = v22;\n            v94 = (int)v94;\n            v78 = (int)v94;\n            if ( (int)v93 >= (unsigned __int64)(int)v94 )\n              v78 = (int)v93;\n          }\nLABEL_244:\n          if ( a2 > v78 )\n          {\n            if ( v7 )\n            {\n              if ( v93 < v94 )\n              {\n                v171 = v93;\n                v95 = v22 - v93;\n                v165 = v13;\n                v154 = v92;\n                v143 = v15;\n                v96 = v7;\n                v7 += v95;\n                if ( i == 48 )\n                {\n                  memset(v96, 48, v95);\n                  v15 = v143;\n                  v92 = v154;\n                  v13 = v165;\n                  v93 = v171;\n                }\n                else\n                {\n                  memset(v96, 32, v95);\n                  v93 = v171;\n                  v13 = v165;\n                  v92 = v154;\n                  v15 = v143;\n                }\n              }\n              v155 = v13;\n              v144 = v93;\n              if ( v15 )\n              {\n                sub_40EE30((__int64)v7, (__int64)v92, v93);\n                v97 = v144;\n                v13 = v155;\n              }\n              else\n              {\n                memcpy(v7, v92, v93);\n                v13 = v155;\n                v97 = v144;\n              }\n              v7 += v97;\n            }\n            v12 += v78;\n            goto LABEL_12;\n          }\n          return 0LL;\n        }\n        if ( v101 )\n        {\nLABEL_383:\n          v126 = 10000 * v145;\n          v47 = 9;\n          v140 = 1;\n          v127 = 100 * v68 + v126;\n          v68 = 20;\n          v67 = v127 + v101;\n        }\n        else if ( v100 )\n        {\nLABEL_364:\n          v128 = 100 * v145;\n          v47 = 6;\n          v140 = 1;\n          v67 = v68 + v128;\n          v68 = 4;\n        }\n        else\n        {\n          v67 = v145;\n          v47 = 3;\n          v140 = 1;\n        }\n      }\n      else\n      {\n        v129 = 100 * v145;\n        v68 = 0;\n        v140 = 1;\n        v47 = 5;\n        v67 = v100 + v129;\n      }\n      goto LABEL_122;\n    default:\n      goto LABEL_238;\n  }\n}\n", 
            "funcStartAddr": "0x40ee80L", 
            "funcEndAddr": "0x410645L", 
            "funcName": "sub_40EE80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410650(void *a1, __int64 a2, unsigned __int64 a3, const __m128i *a4, __int64 a5, int a6)\n{\n  return sub_40EE80(a1, a3, a4, a2, 0, a5, a6);\n}\n", 
            "funcStartAddr": "0x410650L", 
            "funcEndAddr": "0x41066fL", 
            "funcName": "sub_410650"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_410670(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_6257C0 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x410670L", 
            "funcEndAddr": "0x410709L", 
            "funcName": "sub_410670"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_410710(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_4179A0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_41DD29;\n      if ( !v5 )\n        v2 = (char *)&unk_41DD1E;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_41DD25;\n    if ( !v5 )\n      v2 = (char *)&unk_41DD22;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x410710L", 
            "funcEndAddr": "0x410802L", 
            "funcName": "sub_410710"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_410810(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_410810((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_410810((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_410810((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_410810((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_410810((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_416E80((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_410810((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_410810((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_410710(\"`\", v11);\n        v47 = sub_410710(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_410810(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_410810((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_410810((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_410810((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_410810((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_410810((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_416E80((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_410810((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_410810((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_410710(\"`\", v11);\n        v47 = sub_410710(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x402e64L", 
            "funcEndAddr": "0x402e69L", 
            "funcName": "sub_410810"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_410810(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_410810((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_410810((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_410810((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_410810((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_410810((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_416E80((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_410810((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_410810((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_410710(\"`\", v11);\n        v47 = sub_410710(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_410810(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_410810((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_410810((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_410810((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_410810((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_410810((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_410810((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_410810((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_416E80((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_410810((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_410810((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_410710(\"`\", v11);\n        v47 = sub_410710(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x402e64L", 
            "funcEndAddr": "0x402e69L", 
            "funcName": "sub_410810"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_411A40(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_624618;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_624630 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_412BD0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_624618 == &xmmword_624620 )\n    {\n      v8 = (__int128 *)sub_4129E0(0LL, v10);\n      off_624618 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_624620);\n    }\n    else\n    {\n      off_624618 = (__int128 *)sub_4129E0(off_624618, v10);\n      v8 = off_624618;\n    }\n    memset(&v8[dword_624630], 0, 16LL * ((int)a1 + 1 - dword_624630));\n    dword_624630 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_410810(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6257E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_412980(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_410810(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_411A40(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_624618;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_624630 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_412BD0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_624618 == &xmmword_624620 )\n    {\n      v8 = (__int128 *)sub_4129E0(0LL, v10);\n      off_624618 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_624620);\n    }\n    else\n    {\n      off_624618 = (__int128 *)sub_4129E0(off_624618, v10);\n      v8 = off_624618;\n    }\n    memset(&v8[dword_624630], 0, 16LL * ((int)a1 + 1 - dword_624630));\n    dword_624630 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_410810(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6257E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_412980(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_410810(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x402e69L", 
            "funcEndAddr": "0x402e6eL", 
            "funcName": "sub_411A40"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_411A40(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_624618;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_624630 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_412BD0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_624618 == &xmmword_624620 )\n    {\n      v8 = (__int128 *)sub_4129E0(0LL, v10);\n      off_624618 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_624620);\n    }\n    else\n    {\n      off_624618 = (__int128 *)sub_4129E0(off_624618, v10);\n      v8 = off_624618;\n    }\n    memset(&v8[dword_624630], 0, 16LL * ((int)a1 + 1 - dword_624630));\n    dword_624630 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_410810(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6257E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_412980(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_410810(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_411A40(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_624618;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_624630 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_412BD0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_624618 == &xmmword_624620 )\n    {\n      v8 = (__int128 *)sub_4129E0(0LL, v10);\n      off_624618 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_624620);\n    }\n    else\n    {\n      off_624618 = (__int128 *)sub_4129E0(off_624618, v10);\n      v8 = off_624618;\n    }\n    memset(&v8[dword_624630], 0, 16LL * ((int)a1 + 1 - dword_624630));\n    dword_624630 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_410810(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6257E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_412980(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_410810(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x402e69L", 
            "funcEndAddr": "0x402e6eL", 
            "funcName": "sub_411A40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411BE0(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // er12\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_6258E0;\n  result = sub_412B80(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x411be0L", 
            "funcEndAddr": "0x411c14L", 
            "funcName": "sub_411BE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411C20(__int128 *a1)\n{\n  if ( !a1 )\n    a1 = &xmmword_6258E0;\n  return *(unsigned int *)a1;\n}\n", 
            "funcStartAddr": "0x411c20L", 
            "funcEndAddr": "0x411c2fL", 
            "funcName": "sub_411C20"
        }, 
        {
            "decompiledFuncCode": "__int128 *__fastcall sub_411C30(__int128 *a1, int a2)\n{\n  __int128 *result; // rax\n\n  result = &xmmword_6258E0;\n  if ( !a1 )\n    a1 = &xmmword_6258E0;\n  *(_DWORD *)a1 = a2;\n  return result;\n}\n", 
            "funcStartAddr": "0x411c30L", 
            "funcEndAddr": "0x411c3fL", 
            "funcName": "sub_411C30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411C40(__int128 *a1, unsigned __int8 a2, char a3)\n{\n  _DWORD *v3; // rdi\n  int v4; // eax\n  char v5; // dl\n  __int64 result; // rax\n\n  if ( !a1 )\n    a1 = &xmmword_6258E0;\n  v3 = (_DWORD *)((char *)a1 + 4 * (a2 >> 5) + 8);\n  v4 = *v3 >> (a2 & 0x1F);\n  v5 = v4 ^ a3;\n  result = v4 & 1;\n  *v3 ^= (v5 & 1) << (a2 & 0x1F);\n  return result;\n}\n", 
            "funcStartAddr": "0x411c40L", 
            "funcEndAddr": "0x411c73L", 
            "funcName": "sub_411C40"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_411CD0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, __int128 *a5)\n{\n  char *v5; // r15\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // er12\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n  unsigned __int64 v11; // [rsp+8h] [rbp-40h]\n\n  v5 = a3;\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_6258E0;\n  v11 = a4;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_410810(\n             a1,\n             a2,\n             v5,\n             v11,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n", 
            "funcStartAddr": "0x411cd0L", 
            "funcEndAddr": "0x411d42L", 
            "funcName": "sub_411CD0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_411F60(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_411A40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_411F60(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_411A40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402e6eL", 
            "funcEndAddr": "0x402e73L", 
            "funcName": "sub_411F60"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_411F60(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_411A40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_411F60(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_411A40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402e6eL", 
            "funcEndAddr": "0x402e73L", 
            "funcName": "sub_411F60"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_411FD0(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_411A40(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_411FD0(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_411A40(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x402e73L", 
            "funcEndAddr": "0x402e78L", 
            "funcName": "sub_411FD0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_411FD0(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_411A40(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_411FD0(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_411A40(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x402e73L", 
            "funcEndAddr": "0x402e78L", 
            "funcName": "sub_411FD0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_412040(int a1, char *a2)\n{\n  return sub_411F60(0LL, a1, a2);\n}\n", 
            "funcStartAddr": "0x412040L", 
            "funcEndAddr": "0x41204cL", 
            "funcName": "sub_412040"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_412060(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_625910;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6258E0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_6258F0);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_625900);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_411A40(0LL, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x412060L", 
            "funcEndAddr": "0x4120d0L", 
            "funcName": "sub_412060"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4120E0(char *a1)\n{\n  return sub_412060(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x4120e0L", 
            "funcEndAddr": "0x4120f1L", 
            "funcName": "sub_4120E0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_412110(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_411A40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_412110(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_411A40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402e78L", 
            "funcEndAddr": "0x402e7dL", 
            "funcName": "sub_412110"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_412110(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_411A40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_412110(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_411A40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402e78L", 
            "funcEndAddr": "0x402e7dL", 
            "funcName": "sub_412110"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_412180(__int64 a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_6258E0);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6258F0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_625900);\n  v9 = qword_625910;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_411A40(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x412180L", 
            "funcEndAddr": "0x4121ecL", 
            "funcName": "sub_412180"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_412270(__int64 a1, char *a2)\n{\n  return sub_411A40(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6245E0);\n}\n", 
            "funcStartAddr": "0x412270L", 
            "funcEndAddr": "0x412281L", 
            "funcName": "sub_412270"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_412290(char *a1)\n{\n  return sub_411A40(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6245E0);\n}\n", 
            "funcStartAddr": "0x412290L", 
            "funcEndAddr": "0x4122a6L", 
            "funcName": "sub_412290"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4122B0(_BYTE *a1, _BYTE *a2)\n{\n  unsigned int v2; // ebx\n  const char *v3; // rbp\n  const char *v4; // r12\n  size_t v5; // r13\n  char *v7; // rbp\n  char *v8; // r12\n  int *v9; // rax\n  int *v10; // rax\n  __int64 v11; // [rsp+0h] [rbp-158h]\n  __int64 v12; // [rsp+8h] [rbp-150h]\n  struct stat stat_buf; // [rsp+90h] [rbp-C8h]\n\n  v2 = 0;\n  v3 = sub_40B870(a1);\n  v4 = sub_40B870(a2);\n  v5 = sub_40B8D0(v3);\n  if ( v5 == sub_40B8D0(v4) && !memcmp(v3, v4, v5) )\n  {\n    v7 = (char *)sub_417940(a1);\n    v8 = (char *)sub_417940(a2);\n    if ( __xstat(1, v7, (struct stat *)&v11) )\n    {\n      v10 = __errno_location();\n      error(1, *v10, \"%s\", v7);\n    }\n    if ( __xstat(1, v8, &stat_buf) )\n    {\n      v9 = __errno_location();\n      error(1, *v9, \"%s\", v8);\n    }\n    v2 = 0;\n    if ( v12 == stat_buf.st_ino )\n      LOBYTE(v2) = v11 == stat_buf.st_dev;\n    free(v7);\n    free(v8);\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x4122b0L", 
            "funcEndAddr": "0x4123e0L", 
            "funcName": "sub_4122B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4123E0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_4123E0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x402e7dL", 
            "funcEndAddr": "0x402e82L", 
            "funcName": "sub_4123E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4123E0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_4123E0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x402e7dL", 
            "funcEndAddr": "0x402e82L", 
            "funcName": "sub_4123E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4127E0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_4123E0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_4123E0(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x4127e0L", 
            "funcEndAddr": "0x412840L", 
            "funcName": "sub_4127E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412840(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_4123E0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_4123E0(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x412840L", 
            "funcEndAddr": "0x4128fcL", 
            "funcName": "sub_412840"
        }, 
        {
            "decompiledFuncCode": "int sub_412900()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_41B1AD);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n", 
            "funcStartAddr": "0x412900L", 
            "funcEndAddr": "0x412974L", 
            "funcName": "sub_412900"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_412980(size_t a1, __int64 a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_412BD0(a1, a2, v3);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x412980L", 
            "funcEndAddr": "0x41299aL", 
            "funcName": "sub_412980"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4129E0(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_412BD0(a1, a2, v3);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4129e0L", 
            "funcEndAddr": "0x412a16L", 
            "funcName": "sub_4129E0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_412AE0(void *a1, size_t *a2, __int64 a3)\n{\n  size_t v3; // rax\n\n  v3 = *a2;\n  if ( a1 )\n  {\n    a3 = 6148914691236517203LL;\n    if ( v3 <= 0x5555555555555553LL )\n    {\n      v3 += (v3 >> 1) + 1;\nLABEL_4:\n      *a2 = v3;\n      return sub_4129E0(a1, v3);\n    }\nLABEL_8:\n    sub_412BD0(a1, a2, a3);\n  }\n  if ( v3 )\n  {\n    if ( (v3 & 0x8000000000000000LL) == 0LL )\n      goto LABEL_4;\n    goto LABEL_8;\n  }\n  *a2 = 128LL;\n  return sub_4129E0(0LL, 0x80uLL);\n}\n", 
            "funcStartAddr": "0x412ae0L", 
            "funcEndAddr": "0x412b30L", 
            "funcName": "sub_412AE0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_412B80(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_412980(n, n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x412b80L", 
            "funcEndAddr": "0x412ba8L", 
            "funcName": "sub_412B80"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_412BB0(void *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen((const char *)src);\n  return sub_412B80(src, v1 + 1);\n}\n", 
            "funcStartAddr": "0x412bb0L", 
            "funcEndAddr": "0x412bc3L", 
            "funcName": "sub_412BB0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_412BD0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x412bd0L", 
            "funcEndAddr": "0x412c01L", 
            "funcName": "sub_412BD0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_412C10(char *a1, __int64 a2, unsigned __int64 a3, unsigned __int64 a4, __int64 a5, __int64 a6, int a7)\n{\n  unsigned __int64 v7; // r15\n  unsigned __int64 v8; // r14\n  __int64 v9; // r13\n  int v10; // ebx\n  int v11; // eax\n  unsigned __int64 v12; // rbp\n  int *v13; // r14\n  _BYTE *v14; // rax\n  int v15; // esi\n  int v17; // ebp\n  int *v18; // rax\n  unsigned __int64 v19; // [rsp+8h] [rbp-40h]\n\n  v7 = a4;\n  v8 = a3;\n  v9 = a6;\n  v10 = a7;\n  v11 = sub_4132B0(a1);\n  if ( v11 )\n  {\n    v17 = v11;\n    v18 = __errno_location();\n    v13 = v18;\n    if ( v17 == 1 )\n    {\n      *v18 = 75;\n    }\n    else if ( v17 == 3 )\n    {\n      *v18 = 0;\n    }\n  }\n  else\n  {\n    v12 = v19;\n    if ( v19 >= v8 && v19 <= v7 )\n      return v12;\n    v13 = __errno_location();\n    *v13 = v19 < 0x40000000 ? 34 : 75;\n  }\n  v14 = sub_412290(a1);\n  v15 = *v13;\n  if ( *v13 == 22 )\n    v15 = 0;\n  if ( !a7 )\n    v10 = 1;\n  error(v10, v15, \"%s: %s\", v9, v14);\n  return v19;\n}\n", 
            "funcStartAddr": "0x412c10L", 
            "funcEndAddr": "0x412ce0L", 
            "funcName": "sub_412C10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_412CE0(char *a1, unsigned __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5, int a6)\n{\n  return sub_412C10(a1, 10LL, a2, a3, a4, a5, a6);\n}\n", 
            "funcStartAddr": "0x412ce0L", 
            "funcEndAddr": "0x412d01L", 
            "funcName": "sub_412CE0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_412D10()\n{\n  __int64 v0; // rbx\n\n  v0 = sub_415BE0(0LL, 0LL);\n  if ( !v0 && *__errno_location() == 12 )\n    sub_412BD0();\n  return v0;\n}\n", 
            "funcStartAddr": "0x412d10L", 
            "funcEndAddr": "0x412d3fL", 
            "funcName": "sub_412D10"
        }, 
        {
            "decompiledFuncCode": "char *sub_412D40()\n{\n  __int64 v0; // r13\n  char *v1; // rbx\n  __int64 v2; // rdx\n  int *v3; // r12\n  char *v4; // rbp\n  size_t v5; // rsi\n  unsigned __int64 v7; // rbp\n  __int64 v8; // [rsp+8h] [rbp-30h]\n\n  v0 = 68723675137LL;\n  v1 = 0LL;\n  v8 = 34LL;\n  v3 = __errno_location();\n  do\n  {\n    while ( 1 )\n    {\n      v1 = (char *)sub_412AE0(v1, (size_t *)&v8, v2);\n      v4 = &v1[v8 - 2];\n      v5 = v8 - 1;\n      *v4 = 0;\n      *v3 = 0;\n      if ( gethostname(v1, v5) )\n        break;\n      if ( !*v4 )\n        return v1;\n    }\n    v7 = (unsigned int)*v3;\n  }\n  while ( (unsigned int)v7 <= 0x24 && _bittest64(&v0, v7) );\n  free(v1);\n  *v3 = v7;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x412d40L", 
            "funcEndAddr": "0x412df0L", 
            "funcName": "sub_412D40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412DF0(char *nptr, char **a2, unsigned int a3, unsigned __int64 *a4, const char *a5)\n{\n  char **v5; // r15\n  unsigned __int64 *v6; // r14\n  const char *v7; // r13\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  unsigned __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // er12\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // er9\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  int base; // [rsp+0h] [rbp-58h]\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h]\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoul\");\n  v5 = a2;\n  base = a3;\n  v6 = a4;\n  v7 = a5;\n  if ( !a2 )\n    v5 = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( v11[v10] & 0x2000 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = strtoul(nptr, v5, base);\n  if ( *v5 == nptr )\n  {\n    basea = *v5;\n    if ( v7 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(v7, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( v7 )\n  {\n    v15 = (unsigned __int8)**v5;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *v5;\n      v26 = strchr(v7, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_39:\n        *v6 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      v19 = 142129060940101LL;\n      if ( !_bittest64(&v19, (unsigned int)(v15 - 69)) || (v37 = v18, v20 = strchr(v7, 48), v18 = v37, !v20) )\n      {\nLABEL_26:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_27;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_27:\n          switch ( (_BYTE)v15 )\n          {\n            case 0x42:\n              if ( v13 >> 54 )\n                goto LABEL_37;\n              v13 <<= 10;\n              break;\n            case 0x45:\n              goto LABEL_70;\n            case 0x47:\n            case 0x67:\n              goto LABEL_76;\n            case 0x4B:\n            case 0x6B:\n              goto LABEL_36;\n            case 0x4D:\n            case 0x6D:\n              goto LABEL_29;\n            case 0x50:\n              goto LABEL_64;\n            case 0x54:\n            case 0x74:\n              goto LABEL_58;\n            case 0x59:\n              goto LABEL_52;\n            case 0x5A:\n              goto LABEL_46;\n            case 0x62:\n              goto LABEL_43;\n            case 0x63:\n              break;\n            case 0x77:\n              if ( (v13 & 0x8000000000000000LL) != 0LL )\n                goto LABEL_37;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_39;\n          }\nLABEL_32:\n          v24 = &v18[v22];\n          *v5 = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (_BYTE)v15 )\n          {\n            case 0x45:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_70:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_50;\n            case 0x46:\n            case 0x48:\n            case 0x49:\n            case 0x4A:\n            case 0x4C:\n            case 0x4E:\n            case 0x4F:\n            case 0x51:\n            case 0x52:\n            case 0x53:\n            case 0x55:\n            case 0x56:\n            case 0x57:\n            case 0x58:\n            case 0x5B:\n            case 0x5C:\n            case 0x5D:\n            case 0x5E:\n            case 0x5F:\n            case 0x60:\n            case 0x61:\n            case 0x64:\n            case 0x65:\n            case 0x66:\n            case 0x68:\n            case 0x69:\n            case 0x6A:\n            case 0x6C:\n            case 0x6E:\n            case 0x6F:\n            case 0x70:\n            case 0x71:\n            case 0x72:\n            case 0x73:\n              goto LABEL_39;\n            case 0x47:\n            case 0x67:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_76:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_32;\n            case 0x4B:\n            case 0x6B:\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_36:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_32;\n              goto LABEL_37;\n            case 0x4D:\n            case 0x6D:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_29:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_37;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 0x50:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_64:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_50;\n            case 0x54:\n            case 0x74:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_58:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_50;\n            case 0x59:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_52:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_50;\n            case 0x5A:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_46:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_50:\n              v14 |= v28;\n              break;\n            case 0x62:\n              v22 = 1;\nLABEL_43:\n              if ( v13 >> 55 )\n              {\nLABEL_37:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 0x63:\n              v22 = 1;\n              goto LABEL_32;\n            default:\n              goto LABEL_26;\n          }\n          goto LABEL_32;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_27;\n    }\n  }\nLABEL_13:\n  *v6 = v13;\n  return v14;\n}\n", 
            "funcStartAddr": "0x412df0L", 
            "funcEndAddr": "0x413214L", 
            "funcName": "sub_412DF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_413220(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  int v7; // er10\n  __int64 v8; // rbp\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13; // [rsp+Eh] [rbp-2Ah]\n  char v14; // [rsp+Fh] [rbp-29h]\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v7 = a2;\n    v8 = a5;\n    v9 = (&off_41F1E0)[v5];\n    if ( v7 < 0 )\n    {\n      v13 = a3;\n      v11 = &v13;\n      v10 = &asc_41F171[-v7];\n      v14 = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * v7);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, v8);\n    abort();\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_413220(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  int v7; // er10\n  __int64 v8; // rbp\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13; // [rsp+Eh] [rbp-2Ah]\n  char v14; // [rsp+Fh] [rbp-29h]\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v7 = a2;\n    v8 = a5;\n    v9 = (&off_41F1E0)[v5];\n    if ( v7 < 0 )\n    {\n      v13 = a3;\n      v11 = &v13;\n      v10 = &asc_41F171[-v7];\n      v14 = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * v7);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, v8);\n    abort();\n  }\n  abort();\n}\n", 
            "funcStartAddr": "0x402e82L", 
            "funcEndAddr": "0x402e87L", 
            "funcName": "sub_413220"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_413220(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  int v7; // er10\n  __int64 v8; // rbp\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13; // [rsp+Eh] [rbp-2Ah]\n  char v14; // [rsp+Fh] [rbp-29h]\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v7 = a2;\n    v8 = a5;\n    v9 = (&off_41F1E0)[v5];\n    if ( v7 < 0 )\n    {\n      v13 = a3;\n      v11 = &v13;\n      v10 = &asc_41F171[-v7];\n      v14 = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * v7);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, v8);\n    abort();\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_413220(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  int v7; // er10\n  __int64 v8; // rbp\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13; // [rsp+Eh] [rbp-2Ah]\n  char v14; // [rsp+Fh] [rbp-29h]\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v7 = a2;\n    v8 = a5;\n    v9 = (&off_41F1E0)[v5];\n    if ( v7 < 0 )\n    {\n      v13 = a3;\n      v11 = &v13;\n      v10 = &asc_41F171[-v7];\n      v14 = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * v7);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, v8);\n    abort();\n  }\n  abort();\n}\n", 
            "funcStartAddr": "0x402e82L", 
            "funcEndAddr": "0x402e87L", 
            "funcName": "sub_413220"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4132B0(char *nptr, char **a2, unsigned int a3, unsigned __int64 *a4, const char *a5)\n{\n  char **v5; // r15\n  unsigned __int64 *v6; // r14\n  const char *v7; // r13\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  unsigned __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // er12\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // er9\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  int base; // [rsp+0h] [rbp-58h]\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h]\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  v5 = a2;\n  base = a3;\n  v6 = a4;\n  v7 = a5;\n  if ( !a2 )\n    v5 = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( v11[v10] & 0x2000 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, v5, base, 0);\n  if ( *v5 == nptr )\n  {\n    basea = *v5;\n    if ( v7 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(v7, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( v7 )\n  {\n    v15 = (unsigned __int8)**v5;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *v5;\n      v26 = strchr(v7, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_39:\n        *v6 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      v19 = 142129060940101LL;\n      if ( !_bittest64(&v19, (unsigned int)(v15 - 69)) || (v37 = v18, v20 = strchr(v7, 48), v18 = v37, !v20) )\n      {\nLABEL_26:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_27;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_27:\n          switch ( (_BYTE)v15 )\n          {\n            case 0x42:\n              if ( v13 >> 54 )\n                goto LABEL_37;\n              v13 <<= 10;\n              break;\n            case 0x45:\n              goto LABEL_70;\n            case 0x47:\n            case 0x67:\n              goto LABEL_76;\n            case 0x4B:\n            case 0x6B:\n              goto LABEL_36;\n            case 0x4D:\n            case 0x6D:\n              goto LABEL_29;\n            case 0x50:\n              goto LABEL_64;\n            case 0x54:\n            case 0x74:\n              goto LABEL_58;\n            case 0x59:\n              goto LABEL_52;\n            case 0x5A:\n              goto LABEL_46;\n            case 0x62:\n              goto LABEL_43;\n            case 0x63:\n              break;\n            case 0x77:\n              if ( (v13 & 0x8000000000000000LL) != 0LL )\n                goto LABEL_37;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_39;\n          }\nLABEL_32:\n          v24 = &v18[v22];\n          *v5 = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (_BYTE)v15 )\n          {\n            case 0x45:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_70:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_50;\n            case 0x46:\n            case 0x48:\n            case 0x49:\n            case 0x4A:\n            case 0x4C:\n            case 0x4E:\n            case 0x4F:\n            case 0x51:\n            case 0x52:\n            case 0x53:\n            case 0x55:\n            case 0x56:\n            case 0x57:\n            case 0x58:\n            case 0x5B:\n            case 0x5C:\n            case 0x5D:\n            case 0x5E:\n            case 0x5F:\n            case 0x60:\n            case 0x61:\n            case 0x64:\n            case 0x65:\n            case 0x66:\n            case 0x68:\n            case 0x69:\n            case 0x6A:\n            case 0x6C:\n            case 0x6E:\n            case 0x6F:\n            case 0x70:\n            case 0x71:\n            case 0x72:\n            case 0x73:\n              goto LABEL_39;\n            case 0x47:\n            case 0x67:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_76:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_32;\n            case 0x4B:\n            case 0x6B:\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_36:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_32;\n              goto LABEL_37;\n            case 0x4D:\n            case 0x6D:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_29:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_37;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 0x50:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_64:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_50;\n            case 0x54:\n            case 0x74:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_58:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_50;\n            case 0x59:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_52:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_50;\n            case 0x5A:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_46:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_50:\n              v14 |= v28;\n              break;\n            case 0x62:\n              v22 = 1;\nLABEL_43:\n              if ( v13 >> 55 )\n              {\nLABEL_37:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 0x63:\n              v22 = 1;\n              goto LABEL_32;\n            default:\n              goto LABEL_26;\n          }\n          goto LABEL_32;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_27;\n    }\n  }\nLABEL_13:\n  *v6 = v13;\n  return v14;\n}\n", 
            "funcStartAddr": "0x4132b0L", 
            "funcEndAddr": "0x4136e4L", 
            "funcName": "sub_4132B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4136F0(_DWORD *a1)\n{\n  __int64 v1; // r12\n  _DWORD *v2; // rbx\n  int v3; // edx\n  unsigned __int64 v4; // rcx\n  int v6; // edx\n\n  v1 = 3221227009LL;\n  v2 = a1;\nLABEL_2:\n  while ( 1 )\n  {\n    v3 = v2[1];\n    if ( !v3 )\n      return (__int64)a1;\n    while ( v3 != 91 )\n    {\n      v4 = (unsigned int)(v3 - 33);\n      if ( (unsigned int)v4 <= 0x1F )\n      {\n        if ( _bittest64(&v1, v4) && v2[2] == 40 )\n        {\n          v2 = (_DWORD *)sub_4136F0(v2 + 2);\n          goto LABEL_2;\n        }\n        if ( v3 == 41 )\n          return (__int64)(v2 + 2);\n      }\n      ++v2;\n      v3 = v2[1];\n      if ( !v3 )\n        return (__int64)a1;\n    }\n    if ( !dword_625918 )\n      dword_625918 = (unsigned __int64)getenv(\"POSIXLY_CORRECT\") < 1 ? -1 : 1;\n    v6 = v2[2];\n    if ( v6 == 33 || dword_625918 < 0 && v6 == 94 )\n    {\n      v6 = v2[3];\n      v2 += 3;\n    }\n    else\n    {\n      v2 += 2;\n    }\n    if ( v6 == 93 )\n    {\n      v6 = v2[1];\n      ++v2;\n    }\n    while ( v6 != 93 )\n    {\n      if ( !v6 )\n        return (__int64)a1;\n      v6 = v2[1];\n      ++v2;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x4136f0L", 
            "funcEndAddr": "0x4137e9L", 
            "funcName": "sub_4136F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4137F0(unsigned __int8 *a1)\n{\n  __int64 v1; // r12\n  unsigned __int8 *v2; // rbx\n  int v3; // edx\n  unsigned __int8 v5; // dl\n\n  v1 = 3221227009LL;\n  v2 = a1;\nLABEL_2:\n  while ( 1 )\n  {\n    v3 = v2[1];\n    if ( !(_BYTE)v3 )\n      return (__int64)a1;\n    while ( (_BYTE)v3 != 91 )\n    {\n      if ( (unsigned __int8)(v3 - 33) <= 0x1Fu )\n      {\n        if ( _bittest64(&v1, (unsigned int)(v3 - 33)) && v2[2] == 40 )\n        {\n          v2 = (unsigned __int8 *)sub_4137F0(v2 + 2);\n          goto LABEL_2;\n        }\n        if ( (_BYTE)v3 == 41 )\n          return (__int64)(v2 + 2);\n      }\n      v3 = (++v2)[1];\n      if ( !(_BYTE)v3 )\n        return (__int64)a1;\n    }\n    if ( !dword_625918 )\n      dword_625918 = (unsigned __int64)getenv(\"POSIXLY_CORRECT\") < 1 ? -1 : 1;\n    v5 = v2[2];\n    if ( v5 == 33 || dword_625918 < 0 && v5 == 94 )\n    {\n      v5 = v2[3];\n      v2 += 3;\n    }\n    else\n    {\n      v2 += 2;\n    }\n    if ( v5 == 93 )\n      v5 = *++v2;\n    while ( v5 != 93 )\n    {\n      if ( !v5 )\n        return (__int64)a1;\n      v5 = *++v2;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x4137f0L", 
            "funcEndAddr": "0x4138e9L", 
            "funcName": "sub_4137F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4138F0(int a1, __int64 a2, unsigned __int64 a3, unsigned __int64 a4, unsigned __int8 a5, unsigned int a6)\n{\n  unsigned int v6; // er12\n  int v7; // eax\n  __int64 v8; // r14\n  const wchar_t *v9; // rsi\n  __int64 *v10; // rbx\n  __int64 v11; // r15\n  __int64 v12; // r13\n  unsigned __int64 v13; // rdx\n  __int64 result; // rax\n  wchar_t v15; // eax\n  __int64 v16; // rdx\n  unsigned __int64 v17; // rdx\n  unsigned __int64 v18; // rax\n  void *v19; // rsp\n  wchar_t *v20; // rax\n  char *v21; // rax\n  _QWORD *v22; // r13\n  __int64 v23; // rbx\n  unsigned __int64 v24; // rax\n  void *v25; // rsp\n  __int64 v26; // r13\n  unsigned __int64 v27; // r14\n  unsigned int v28; // er12\n  __int64 v29; // rax\n  unsigned __int64 v30; // rbx\n  unsigned __int64 v31; // r15\n  _BOOL8 v32; // rcx\n  _BOOL8 v33; // rcx\n  unsigned __int64 v34; // r15\n  unsigned __int64 v35; // r14\n  unsigned int v36; // ebx\n  _QWORD *v37; // r13\n  __int64 v38; // rcx\n  unsigned __int64 v39; // r15\n  unsigned int v40; // ebx\n  wchar_t *v41; // rax\n  const wchar_t *v42; // [rsp+8h] [rbp-78h]\n  __int64 v43; // [rsp+10h] [rbp-70h]\n  unsigned __int64 v44; // [rsp+18h] [rbp-68h]\n  unsigned __int8 v45; // [rsp+23h] [rbp-5Dh]\n  unsigned int v46; // [rsp+24h] [rbp-5Ch]\n  unsigned __int64 v47; // [rsp+28h] [rbp-58h]\n  __int64 v48; // [rsp+30h] [rbp-50h]\n  size_t v49; // [rsp+38h] [rbp-48h]\n  __int64 v50; // [rsp+48h] [rbp-38h]\n\n  LOBYTE(v6) = a5;\n  LODWORD(v48) = a1;\n  v44 = a3;\n  v47 = a4;\n  v46 = a6;\n  v45 = a5;\n  v50 = 0LL;\n  v49 = wcslen((const wchar_t *)a2);\n  v7 = *(_DWORD *)(a2 + 4);\n  if ( !v7 )\n    return 0xFFFFFFFFLL;\n  v8 = a2 + 4;\n  v43 = a2;\n  v9 = (const wchar_t *)(a2 + 4);\n  v10 = &v50;\n  v11 = 3221227009LL;\n  v12 = 0LL;\n  while ( 2 )\n  {\n    while ( v7 == 91 )\n    {\n      if ( !dword_625918 )\n      {\n        v42 = v9;\n        v21 = getenv(\"POSIXLY_CORRECT\");\n        v9 = v42;\n        dword_625918 = (unsigned __int64)v21 < 1 ? -1 : 1;\n      }\n      v15 = *(_DWORD *)(v8 + 4);\n      if ( v15 == 33 || dword_625918 < 0 && v15 == 94 )\n      {\n        v16 = v8 + 8;\n        v15 = *(_DWORD *)(v8 + 8);\n      }\n      else\n      {\n        v16 = v8 + 4;\n      }\n      if ( v15 == 93 )\n      {\n        v15 = *(_DWORD *)(v16 + 4);\n        v16 += 4LL;\n      }\n      while ( 1 )\n      {\n        v8 = v16 + 4;\n        if ( v15 == 93 )\n          break;\n        if ( !v15 )\n          return 0xFFFFFFFFLL;\n        v15 = *(_DWORD *)v8;\n        v16 += 4LL;\n      }\n      v7 = *(_DWORD *)(v16 + 4);\nLABEL_6:\n      if ( !v7 )\n        return 0xFFFFFFFFLL;\n    }\n    while ( 1 )\n    {\n      v13 = (unsigned int)(v7 - 33);\n      if ( (unsigned int)v13 > 0x1F )\n      {\n        if ( v7 != 124 || v12 )\n        {\nLABEL_5:\n          v7 = *(_DWORD *)(v8 + 4);\n          v8 += 4LL;\n        }\n        else\n        {\n          v17 = v49;\n          if ( (unsigned int)(v48 - 63) > 1 )\n            v17 = ((v8 - (__int64)v9) >> 2) + 1;\n          v18 = (4 * v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;\n          if ( v18 - 8 > 0x1F37 || v17 > 0x3FFFFFFFFFFFFFFFLL )\n            return 0xFFFFFFFFLL;\n          v19 = alloca(v18 + 8);\n          v20 = wmempcpy(\n                  (wchar_t *)((((unsigned __int64)&v42 + 7) & 0xFFFFFFFFFFFFFFF0LL) + 8),\n                  v9,\n                  (v8 - (__int64)v9) >> 2);\n          v9 = (const wchar_t *)(v8 + 4);\n          *v20 = 0;\n          v7 = *(_DWORD *)(v8 + 4);\n          v8 += 4LL;\n          *(_QWORD *)(((unsigned __int64)&v42 + 7) & 0xFFFFFFFFFFFFFFF0LL) = 0LL;\n          *v10 = ((unsigned __int64)&v42 + 7) & 0xFFFFFFFFFFFFFFF0LL;\n          v10 = (__int64 *)(((unsigned __int64)&v42 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n          v12 = 0LL;\n        }\n        goto LABEL_6;\n      }\n      if ( !_bittest64(&v11, v13) || *(_DWORD *)(v8 + 4) != 40 )\n        break;\n      ++v12;\n      v8 += 4LL;\n      v7 = 40;\n    }\n    if ( v7 != 41 )\n      goto LABEL_5;\n    if ( v12 )\n    {\n      v7 = *(_DWORD *)(v8 + 4);\n      --v12;\n      v8 += 4LL;\n      if ( !v7 )\n        return 0xFFFFFFFFLL;\n      continue;\n    }\n    break;\n  }\n  v22 = v10;\n  v23 = v43;\n  if ( (unsigned int)(v48 - 63) > 1 )\n    v49 = ((v8 - (__int64)v9) >> 2) + 1;\n  v24 = (4 * v49 + 15) & 0xFFFFFFFFFFFFFFF8LL;\n  if ( v24 - 8 > 0x1F37 || v49 > 0x3FFFFFFFFFFFFFFFLL )\n    return 0xFFFFFFFFLL;\n  v25 = alloca(v24 + 8);\n  *wmempcpy((wchar_t *)((((unsigned __int64)&v42 + 7) & 0xFFFFFFFFFFFFFFF0LL) + 8), v9, (v8 - (__int64)v9) >> 2) = 0;\n  *v22 = ((unsigned __int64)&v42 + 7) & 0xFFFFFFFFFFFFFFF0LL;\n  v26 = v50;\n  *(_QWORD *)(((unsigned __int64)&v42 + 7) & 0xFFFFFFFFFFFFFFF0LL) = 0LL;\n  if ( !v26 )\n    __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 0x454u, \"ext_wmatch\");\n  if ( *(_DWORD *)(v8 - 4) != 41 )\n    __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 0x455u, \"ext_wmatch\");\n  switch ( (_DWORD)v48 )\n  {\n    case 0x21:\n      if ( v44 > v47 )\n        return 1LL;\n      v34 = v44;\n      v49 = v26;\n      v48 = v8;\n      v35 = v44;\n      v36 = v46 & 0xFFFFFFFB;\n      if ( v46 & 1 )\n        v36 = v46;\n      while ( 2 )\n      {\n        v37 = (_QWORD *)v49;\n        while ( (unsigned int)sub_413E80(v37 + 1, v34, v35, (unsigned __int8)v6, v36) )\n        {\n          v37 = (_QWORD *)*v37;\n          if ( !v37 )\n          {\n            if ( v34 == v35 )\n            {\n              v38 = (unsigned __int8)v6;\n            }\n            else\n            {\n              v38 = 0LL;\n              if ( *(_DWORD *)(v35 - 4) == 47 )\n                v38 = (v46 & 5) == 5;\n            }\n            if ( !(unsigned int)sub_413E80(v48, v35, v47, v38, v36) )\n              return 0LL;\n            break;\n          }\n        }\n        v35 += 4LL;\n        if ( v47 >= v35 )\n          continue;\n        break;\n      }\n      return 1LL;\n    case 0x2A:\n      if ( (unsigned int)sub_413E80(v8, v44, v47, (unsigned __int8)v6, v46) )\n        goto LABEL_43;\n      return 0LL;\n    case 0x2B:\nLABEL_43:\n      v43 = v8;\n      v27 = v44;\n      v28 = v46 & 0xFFFFFFFB;\n      if ( v46 & 1 )\n        v28 = v46;\n      v29 = v23 - 4;\n      LODWORD(v48) = v46 & 1;\n      v30 = v47;\n      v42 = (const wchar_t *)v29;\n      do\n      {\n        if ( v27 <= v30 )\n        {\n          v31 = v27;\n          LODWORD(v49) = v45;\n          do\n          {\n            if ( !(unsigned int)sub_413E80(v26 + 8, v27, v31, (unsigned int)v49, v28) )\n            {\n              if ( v27 == v31 )\n              {\n                if ( !(unsigned int)sub_413E80(v43, v27, v30, (unsigned int)v49, v28) )\n                  return 0LL;\n              }\n              else\n              {\n                v32 = 0LL;\n                if ( *(_DWORD *)(v31 - 4) == 47 )\n                  v32 = (v46 & 5) == 5;\n                if ( !(unsigned int)sub_413E80(v43, v31, v30, v32, v28) )\n                  return 0LL;\n                v33 = 0LL;\n                if ( *(_DWORD *)(v31 - 4) == 47 )\n                  v33 = (v46 & 5) == 5;\n                if ( !(unsigned int)sub_413E80(v42, v31, v30, v33, v28) )\n                  return 0LL;\n              }\n              v26 = v50;\n            }\n            v31 += 4LL;\n          }\n          while ( v30 >= v31 );\n        }\n        v26 = *(_QWORD *)v26;\n        v50 = v26;\n      }\n      while ( v26 );\n      return 1LL;\n    case 0x3F:\n      v6 = (unsigned __int8)v6;\n      if ( (unsigned int)sub_413E80(v8, v44, v47, (unsigned __int8)v6, v46) )\n        goto LABEL_73;\n      return 0LL;\n    case 0x40:\n      v6 = (unsigned __int8)v6;\nLABEL_73:\n      v39 = v44;\n      v40 = v46 & 0xFFFFFFFB;\n      if ( v46 & 1 )\n        v40 = v46;\n      break;\n    default:\n      __assert_fail(\"! \\\"Invalid extended matching operator\\\"\", \"lib/fnmatch_loop.c\", 0x4ADu, \"ext_wmatch\");\n      return result;\n  }\n  while ( 1 )\n  {\n    v41 = wcscat((wchar_t *)(v26 + 8), (const wchar_t *)v8);\n    if ( !(unsigned int)sub_413E80(v41, v39, v47, v6, v40) )\n      break;\n    v26 = *(_QWORD *)v26;\n    v50 = v26;\n    if ( !v26 )\n      return 1LL;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4138f0L", 
            "funcEndAddr": "0x413e73L", 
            "funcName": "sub_4138F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413E80(wint_t *a1, const wchar_t *a2, unsigned __int64 a3, unsigned __int8 a4, unsigned int a5)\n{\n  const wchar_t *v5; // r14\n  const wchar_t *v6; // rbx\n  wint_t v7; // er15\n  unsigned __int8 v8; // r10\n  int v9; // er12\n  int v10; // er13\n  wint_t *v11; // rbp\n  wint_t v12; // eax\n  wint_t v13; // eax\n  wint_t v14; // er8\n  wint_t v15; // eax\n  wint_t *v16; // r14\n  wint_t *v17; // r15\n  wint_t v18; // eax\n  wint_t v19; // ebx\n  int v20; // er14\n  __int64 i; // rsi\n  wint_t v22; // edx\n  _DWORD *v23; // rsi\n  bool v24; // di\n  wint_t v25; // eax\n  __int64 result; // rax\n  wint_t *v27; // rax\n  int v28; // ebp\n  const wchar_t *v29; // r14\n  wint_t *v30; // r13\n  wint_t v31; // er11\n  wint_t *v32; // r15\n  bool v33; // dl\n  wint_t *v34; // rax\n  wchar_t *v35; // rax\n  wint_t v36; // er11\n  wchar_t *v37; // r9\n  unsigned __int8 v38; // r10\n  wint_t v39; // eax\n  __int64 v40; // r15\n  wint_t v41; // er12\n  unsigned int v42; // er14\n  wint_t *v43; // r13\n  unsigned __int64 v44; // rbx\n  wint_t v45; // eax\n  wint_t *v46; // r14\n  __int64 v47; // rdx\n  int v48; // eax\n  char *v49; // rax\n  unsigned __int64 v50; // rax\n  __int64 v51; // rdx\n  unsigned int v52; // eax\n  __int64 v53; // r15\n  unsigned int v54; // ebp\n  unsigned __int64 v55; // r12\n  unsigned __int64 v56; // rcx\n  int *v57; // r8\n  int v58; // edx\n  _DWORD *v59; // rbp\n  int v60; // eax\n  int *v61; // rax\n  __int64 v62; // rbp\n  char *v63; // rsi\n  int *v64; // rdx\n  int v65; // eax\n  wctype_t v66; // rax\n  wint_t *v67; // r9\n  __int64 v68; // [rsp+8h] [rbp-580h]\n  wchar_t *v69; // [rsp+8h] [rbp-580h]\n  const wchar_t *v70; // [rsp+8h] [rbp-580h]\n  bool v71; // [rsp+8h] [rbp-580h]\n  unsigned __int64 wc; // [rsp+10h] [rbp-578h]\n  wint_t wca; // [rsp+10h] [rbp-578h]\n  unsigned __int8 wcc; // [rsp+10h] [rbp-578h]\n  unsigned __int8 wcb; // [rsp+10h] [rbp-578h]\n  unsigned int v76; // [rsp+18h] [rbp-570h]\n  unsigned __int8 v77; // [rsp+1Ch] [rbp-56Ch]\n  int v78; // [rsp+1Ch] [rbp-56Ch]\n  unsigned __int8 v79; // [rsp+1Ch] [rbp-56Ch]\n  wint_t v80; // [rsp+1Ch] [rbp-56Ch]\n  unsigned __int8 v81; // [rsp+1Ch] [rbp-56Ch]\n  unsigned __int8 v82; // [rsp+1Ch] [rbp-56Ch]\n  int v83; // [rsp+20h] [rbp-568h]\n  wint_t v84; // [rsp+24h] [rbp-564h]\n  char property; // [rsp+30h] [rbp-558h]\n  int v86; // [rsp+13Ch] [rbp-44Ch]\n  int v87[274]; // [rsp+140h] [rbp-448h]\n  int _540[274]; // [rsp+540h] [rbp-48h]\n\n  v5 = (const wchar_t *)a3;\n  v6 = a2;\n  v7 = *a1;\n  v76 = a5;\n  v68 = (__int64)(a1 + 1);\n  if ( !*a1 )\n    goto LABEL_56;\n  wc = a3;\n  v83 = a5 & 5;\n  v8 = a4;\n  v9 = a5 & 2;\n  v10 = a5 & 0x10;\n  v11 = a1;\n  while ( 2 )\n  {\n    if ( v10 )\n    {\n      v77 = v8;\n      v12 = towlower(v7);\n      v8 = v77;\n      v7 = v12;\n    }\n    switch ( v7 )\n    {\n      case 0x21u:\n      case 0x2Bu:\n      case 0x40u:\n        if ( !(v76 & 0x20) )\n          goto LABEL_49;\n        if ( v11[1] != 40 )\n          goto LABEL_49;\n        result = sub_4138F0(v7, v68, (unsigned __int64)v6, wc, v8, v76);\n        if ( (_DWORD)result == -1 )\n          goto LABEL_49;\n        return result;\n      case 0x2Au:\n        v27 = v11;\n        v28 = v10;\n        v29 = (const wchar_t *)wc;\n        v30 = v27;\n        if ( !(v76 & 0x20) || v27[1] != 40 )\n          goto LABEL_65;\n        v56 = wc;\n        wcb = v8;\n        result = sub_4138F0(42, v68, (unsigned __int64)v6, v56, v8, v76);\n        if ( (_DWORD)result != -1 )\n          return result;\n        v8 = wcb;\nLABEL_65:\n        if ( v29 != v6 && *v6 == 46 && v8 )\n          return 1LL;\n        v31 = v30[1];\n        v32 = v30 + 2;\n        if ( v31 != 42 && v31 != 63 )\n          goto LABEL_77;\n        v33 = (v76 & 0x20) != 0;\n        do\n        {\n          if ( *v32 == 40 && v33 )\n          {\n            wcc = v8;\n            v71 = v33;\n            v80 = v31;\n            v34 = (wint_t *)sub_4136F0(v32);\n            v33 = v71;\n            v8 = wcc;\n            if ( v34 != v32 )\n              goto LABEL_75;\n            v31 = v80;\n          }\n          if ( v31 == 63 )\n          {\n            if ( v6 == v29 || *v6 == 47 && v76 & 1 )\n              return 1LL;\n            ++v6;\n          }\n          v34 = v32;\nLABEL_75:\n          v31 = *v34;\n          v32 = v34 + 1;\n        }\n        while ( *v34 == 63 || v31 == 42 );\nLABEL_77:\n        if ( v31 )\n        {\n          v79 = v8;\n          wca = v31;\n          v35 = wmemchr(v6, -(v76 & 1) & 0x2F, v29 - v6);\n          v36 = wca;\n          v37 = v35;\n          v38 = v79;\n          if ( !v35 )\n            v37 = (wchar_t *)v29;\n          if ( wca == 91\n            || v76 & 0x20\n            && (v50 = wca - 33, (unsigned int)v50 <= 0x1F)\n            && (v51 = 2147484673LL, _bittest64(&v51, v50))\n            && *v32 == 40 )\n          {\n            v52 = v76 & 0xFFFFFFFB;\n            if ( v76 & 1 )\n              v52 = v76;\n            v53 = (__int64)(v32 - 1);\n            v54 = v52;\n            if ( v37 > v6 )\n            {\n              v55 = (unsigned __int64)v37;\n              do\n              {\n                if ( !(unsigned int)sub_413E80(v53, v6, v29, v38, v54) )\n                  return 0LL;\n                ++v6;\n                v38 = 0;\n              }\n              while ( v55 > (unsigned __int64)v6 );\n            }\n            return 1LL;\n          }\n          if ( wca != 47 )\n          {\n            if ( v76 & 1 )\n              goto LABEL_84;\n            goto LABEL_192;\n          }\n          if ( !(v76 & 1) )\n          {\nLABEL_192:\n            v76 &= 0xFFFFFFFB;\nLABEL_84:\n            if ( wca == 92 && !v9 )\n              v36 = *v32;\n            if ( v28 )\n            {\n              v69 = v37;\n              v39 = towlower(v36);\n              v37 = v69;\n              v36 = v39;\n            }\n            v40 = (__int64)(v32 - 1);\n            if ( v37 <= v6 )\n              return 1LL;\n            v70 = v29;\n            v41 = v36;\n            v42 = v79;\n            v43 = (wint_t *)v6;\n            v44 = (unsigned __int64)v37;\n            while ( 1 )\n            {\n              v45 = *v43;\n              if ( v28 )\n                v45 = towlower(v45);\n              if ( v41 == v45 && !(unsigned int)sub_413E80(v40, v43, v70, v42, v76) )\n                break;\n              ++v43;\n              v42 = 0;\n              if ( v44 <= (unsigned __int64)v43 )\n                return 1LL;\n            }\n            return 0LL;\n          }\n          if ( v29 <= v6 )\n            return 1LL;\n          while ( *v6 != 47 )\n          {\n            ++v6;\n            if ( v29 <= v6 )\n              return 1LL;\n          }\n          result = (unsigned int)sub_413E80(v32, v6 + 1, v29, (v76 >> 2) & 1, v76) != 0;\n        }\n        else\n        {\n          if ( !(v76 & 1) || v76 & 8 )\n            return 0LL;\n          result = wmemchr(v6, 47, v29 - v6) != 0LL;\n        }\n        return result;\n      case 0x2Fu:\n        if ( v83 != 5 )\n          goto LABEL_49;\n        if ( (const wchar_t *)wc == v6 || *v6 != 47 )\n          return 1LL;\n        v11 = (wint_t *)v68;\n        v8 = 1;\n        goto LABEL_54;\n      case 0x3Fu:\n        if ( v76 & 0x20 )\n        {\n          if ( v11[1] == 40 )\n          {\n            v82 = v8;\n            result = sub_4138F0(63, v68, (unsigned __int64)v6, wc, v8, v76);\n            v8 = v82;\n            if ( (_DWORD)result != -1 )\n              return result;\n          }\n        }\n        if ( (const wchar_t *)wc == v6 )\n          return 1LL;\n        if ( *v6 != 47 )\n        {\n          v8 &= *v6 == 46;\n          if ( !v8 )\n          {\n            v11 = (wint_t *)v68;\n            goto LABEL_54;\n          }\n          return 1LL;\n        }\n        if ( v76 & 1 )\n          return 1LL;\n        goto LABEL_53;\n      case 0x5Bu:\n        if ( !dword_625918 )\n        {\n          v81 = v8;\n          v49 = getenv(\"POSIXLY_CORRECT\");\n          v8 = v81;\n          dword_625918 = (unsigned __int64)v49 < 1 ? -1 : 1;\n        }\n        if ( (const wchar_t *)wc == v6 )\n          return 1LL;\n        v14 = *v6;\n        if ( *v6 == 46 )\n        {\n          if ( v8 )\n            return 1LL;\n        }\n        else if ( v14 == 47 && v76 & 1 )\n        {\n          return 1LL;\n        }\n        v15 = v11[1];\n        if ( v15 == 33 || dword_625918 < 0 && v15 == 94 )\n        {\n          v16 = v11 + 2;\n          v78 = 1;\n        }\n        else\n        {\n          v78 = 0;\n          v16 = (wint_t *)v68;\n        }\n        if ( v10 )\n          v14 = towlower(v14);\n        v84 = v7;\n        v11 = v16 + 1;\n        v17 = (wint_t *)v6;\n        v18 = *v16;\n        v19 = v14;\n        while ( 2 )\n        {\n          while ( 2 )\n          {\n            if ( !v9 && v18 == 92 )\n            {\n              v18 = *v11;\n              if ( !*v11 )\n                return 1LL;\n              if ( v10 )\n                v18 = towlower(v18);\n              v20 = v11[1];\n              ++v11;\n              goto LABEL_34;\n            }\n            if ( v18 != 91 )\n            {\n              if ( v18 )\n              {\n                v20 = *v11;\n                goto LABEL_32;\n              }\n              v6 = (const wchar_t *)v17;\n              v7 = v84;\nLABEL_50:\n              v25 = *v6;\n              if ( v10 )\n                v25 = towlower(v25);\n              if ( v25 != v7 )\n                return 1LL;\nLABEL_53:\n              v11 = (wint_t *)v68;\n              v8 = 0;\n              goto LABEL_54;\n            }\n            v20 = *v11;\n            if ( *v11 != 58 )\n            {\n              while ( 1 )\n              {\nLABEL_32:\n                if ( v10 )\n                  v18 = towlower(v18);\nLABEL_34:\n                i = (__int64)(v11 + 1);\n                if ( v20 != 45 )\n                  break;\n                v22 = v11[1];\n                if ( v22 != 93 && v22 )\n                  goto LABEL_213;\n                if ( v18 == v19 )\n                {\n                  v6 = (const wchar_t *)v17;\n                  goto LABEL_152;\n                }\n                if ( v22 != 93 )\n                {\nLABEL_213:\n                  v23 = v11 + 2;\n                  if ( v22 == 92 && !v9 )\n                  {\n                    v23 = v11 + 3;\n                    v22 = v11[2];\n                  }\n                  if ( !v22 )\n                    return 1LL;\n                  v20 = *v23;\n                  v11 = v23 + 1;\n                  v24 = v18 <= v19;\n                  v18 = *v23;\n                  if ( v22 >= v19 && v24 )\n                  {\n                    v11 = v23;\n                    v6 = (const wchar_t *)v17;\n                    i = (__int64)(v23 + 1);\n                    goto LABEL_152;\n                  }\n                  goto LABEL_26;\n                }\n                v20 = 93;\n                ++v11;\n                v18 = 45;\n              }\n              if ( v18 == v19 )\n                goto LABEL_148;\n              v18 = v20;\n              ++v11;\nLABEL_26:\n              if ( v18 == 93 )\n              {\n                v6 = (const wchar_t *)v17;\n                if ( !v78 )\n                  return 1LL;\n                goto LABEL_99;\n              }\n              continue;\n            }\n            break;\n          }\n          v46 = v11;\n          v47 = 0LL;\n          while ( 1 )\n          {\n            v48 = v46[1];\n            if ( v48 == 58 )\n              break;\n            if ( (unsigned int)(v48 - 97) > 0x18 )\n              goto LABEL_109;\n            ++v47;\n            ++v46;\n            *(&v86 + v47) = v48;\n            if ( v47 == 256 )\n              return 1LL;\n          }\n          if ( v46[2] != 93 )\n          {\nLABEL_109:\n            i = (__int64)(v11 + 1);\n            if ( v19 != 91 )\n            {\n              ++v11;\n              v18 = 58;\n              continue;\n            }\nLABEL_148:\n            v6 = (const wchar_t *)v17;\n            v20 = *v11;\n            goto LABEL_152;\n          }\n          break;\n        }\n        v87[v47] = 0;\n        v63 = &property;\n        v64 = v87;\n        v65 = v87[0];\n        do\n        {\n          if ( v65 <= 63 )\n          {\n            if ( v65 < 37 && (unsigned int)(v65 - 32) > 3 )\n              return 1LL;\n          }\n          else if ( v65 < 65 || v65 > 95 && (unsigned int)(v65 - 97) > 0x1D )\n          {\n            return 1LL;\n          }\n          if ( v64 == _540 )\n            return 1LL;\n          ++v64;\n          *(++v63 - 1) = v65;\n          v65 = *v64;\n        }\n        while ( *v64 );\n        *v63 = 0;\n        v66 = wctype(&property);\n        if ( !v66 )\n          return 1LL;\n        if ( !iswctype(*v17, v66) )\n        {\n          v11 = v46 + 4;\n          v18 = v46[3];\n          goto LABEL_26;\n        }\n        v67 = v46;\n        v11 = v46 + 3;\n        v6 = (const wchar_t *)v17;\n        v20 = v46[3];\n        for ( i = (__int64)(v67 + 4); ; i = (__int64)(v11 + 1) )\n        {\nLABEL_152:\n          v57 = (int *)i;\n          v58 = v20;\n          if ( !v20 )\n            return 1LL;\n          v8 = v9 == 0 && v20 == 92;\n          if ( v8 )\n          {\n            if ( v11[1] )\n            {\n              v20 = v11[2];\n              v11 += 2;\n              continue;\n            }\n            return 1LL;\n          }\n          if ( v20 != 91 )\n            goto LABEL_149;\n          v20 = v11[1];\n          if ( v20 != 58 )\n            break;\n          v61 = (int *)(v11 + 2);\n          v20 = v11[2];\n          v62 = (__int64)(v11 + 257);\n          while ( 1 )\n          {\n            if ( v20 == 58 )\n            {\n              if ( v61[1] != 93 )\n                goto LABEL_158;\n              v57 = v61 + 3;\n              v58 = v61[2];\n              goto LABEL_149;\n            }\n            if ( (unsigned int)(v20 - 97) > 0x18 )\n              break;\n            ++v61;\n            v20 = *v61;\n            if ( (int *)v62 == v61 )\n              return 1LL;\n          }\n          v20 = 58;\n          v11 = (wint_t *)i;\nLABEL_151:\n          ;\n        }\n        if ( v20 == 61 )\n        {\n          if ( v11[2] && v11[3] == 61 && v11[4] == 93 )\n          {\n            v57 = (int *)(v11 + 6);\n            v58 = v11[5];\n            goto LABEL_149;\n          }\n          return 1LL;\n        }\n        v59 = v11 + 2;\n        if ( v20 != 46 )\n        {\nLABEL_158:\n          v11 = (wint_t *)i;\n          goto LABEL_151;\n        }\n        while ( 1 )\n        {\n          v60 = v59[1];\n          if ( !v60 )\n            return 1LL;\n          if ( v60 == 46 && v59[2] == 93 )\n            break;\n          ++v59;\n        }\n        v57 = v59 + 4;\n        v58 = v59[3];\nLABEL_149:\n        if ( v58 != 93 )\n        {\n          v20 = *v57;\n          v11 = (wint_t *)v57;\n          goto LABEL_151;\n        }\n        if ( v78 )\n          return 1LL;\n        v11 = (wint_t *)v57;\nLABEL_54:\n        v7 = *v11;\n        ++v6;\n        v68 = (__int64)(v11 + 1);\n        if ( !*v11 )\n        {\n          v5 = (const wchar_t *)wc;\nLABEL_56:\n          if ( v6 == v5 )\n            return 0LL;\n          if ( v76 & 8 )\n            return *v6 != 47;\n          return 1LL;\n        }\n        continue;\n      case 0x5Cu:\n        if ( v9 )\n        {\n          if ( (const wchar_t *)wc == v6 )\n            return 1LL;\n          if ( v10 )\n          {\nLABEL_10:\n            v13 = towlower(*v6);\n            v11 = (wint_t *)v68;\n            goto LABEL_98;\n          }\n        }\n        else\n        {\n          v7 = v11[1];\n          v68 = (__int64)(v11 + 2);\n          if ( !v7 )\n            return 1LL;\n          if ( v10 )\n          {\n            v7 = towlower(v7);\n            if ( (const wchar_t *)wc == v6 )\n              return 1LL;\n            goto LABEL_10;\n          }\n          if ( (const wchar_t *)wc == v6 )\n            return 1LL;\n        }\n        v13 = *v6;\n        v11 = (wint_t *)v68;\nLABEL_98:\n        if ( v13 != v7 )\n          return 1LL;\nLABEL_99:\n        v8 = 0;\n        goto LABEL_54;\n      default:\nLABEL_49:\n        if ( (const wchar_t *)wc != v6 )\n          goto LABEL_50;\n        return 1LL;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x413e80L", 
            "funcEndAddr": "0x41495cL", 
            "funcName": "sub_413E80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_414960(int a1, __int64 a2, unsigned __int64 a3, unsigned __int64 a4, unsigned __int8 a5, unsigned int a6)\n{\n  unsigned int v6; // er12\n  int v7; // eax\n  __int64 i; // r14\n  const void *v9; // rsi\n  __int64 *v10; // rbx\n  __int64 v11; // r13\n  __int64 v12; // r15\n  __int64 result; // rax\n  char v14; // al\n  __int64 v15; // rcx\n  __int64 v16; // rax\n  unsigned __int64 v17; // rax\n  void *v18; // rsp\n  _BYTE *v19; // rax\n  _QWORD *v20; // r15\n  __int64 v21; // rbx\n  __int64 v22; // rax\n  unsigned __int64 v23; // rax\n  void *v24; // rsp\n  _BYTE *v25; // rax\n  __int64 v26; // rax\n  unsigned __int64 v27; // r15\n  _QWORD *v28; // r14\n  unsigned int v29; // er12\n  __int64 v30; // rax\n  unsigned __int64 v31; // rbx\n  unsigned __int64 v32; // r13\n  _BOOL8 v33; // rcx\n  _BOOL8 v34; // rcx\n  unsigned __int64 v35; // r15\n  unsigned __int64 v36; // r13\n  unsigned int v37; // ebx\n  _QWORD *v38; // r14\n  __int64 v39; // rcx\n  __int64 v40; // r13\n  unsigned __int64 v41; // r15\n  unsigned int v42; // ebx\n  char *v43; // rax\n  __int64 v44; // [rsp+8h] [rbp-78h]\n  unsigned __int8 v45; // [rsp+13h] [rbp-6Dh]\n  unsigned int v46; // [rsp+14h] [rbp-6Ch]\n  unsigned __int64 v47; // [rsp+18h] [rbp-68h]\n  unsigned __int64 v48; // [rsp+20h] [rbp-60h]\n  __int64 v49; // [rsp+28h] [rbp-58h]\n  size_t v50; // [rsp+30h] [rbp-50h]\n  __int64 v51; // [rsp+38h] [rbp-48h]\n  _QWORD *v52; // [rsp+48h] [rbp-38h]\n\n  LOBYTE(v6) = a5;\n  LODWORD(v51) = a1;\n  v48 = a3;\n  v47 = a4;\n  v46 = a6;\n  v45 = a5;\n  v52 = 0LL;\n  v50 = strlen((const char *)a2);\n  v7 = *(unsigned __int8 *)(a2 + 1);\n  if ( !(_BYTE)v7 )\n    return 0xFFFFFFFFLL;\n  i = a2 + 1;\n  v44 = a2;\n  v9 = (const void *)(a2 + 1);\n  v10 = (__int64 *)&v52;\n  v11 = 3221227009LL;\n  v12 = 0LL;\n  LODWORD(v49) = v51 - 63;\n  while ( 2 )\n  {\n    while ( (_BYTE)v7 == 91 )\n    {\n      if ( !dword_625918 )\n        dword_625918 = (unsigned __int64)getenv(\"POSIXLY_CORRECT\") < 1 ? -1 : 1;\n      v14 = *(_BYTE *)(i + 1);\n      if ( v14 == 33 || dword_625918 < 0 && v14 == 94 )\n      {\n        v15 = i + 2;\n        v14 = *(_BYTE *)(i + 2);\n      }\n      else\n      {\n        v15 = i + 1;\n      }\n      if ( v14 != 93 )\n        goto LABEL_27;\n      v14 = *(_BYTE *)++v15;\n      for ( i = v15 + 1; v14 != 93; i = v15 + 1 )\n      {\n        if ( !v14 )\n          return 0xFFFFFFFFLL;\n        v14 = *(_BYTE *)i;\n        v15 = i;\nLABEL_27:\n        ;\n      }\n      v7 = *(unsigned __int8 *)(v15 + 1);\nLABEL_6:\n      if ( !(_BYTE)v7 )\n        return 0xFFFFFFFFLL;\n    }\n    while ( 1 )\n    {\n      if ( (unsigned __int8)(v7 - 33) > 0x1Fu )\n      {\n        if ( (_BYTE)v7 != 124 || v12 )\n        {\nLABEL_5:\n          v7 = *(unsigned __int8 *)++i;\n        }\n        else\n        {\n          v16 = i - (_QWORD)v9 + 1;\n          if ( (unsigned int)v49 <= 1 )\n            v16 = v50;\n          v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;\n          if ( v17 - 8 > 0x1F37 )\n            return 0xFFFFFFFFLL;\n          v18 = alloca(v17 + 8);\n          v19 = mempcpy((void *)((((unsigned __int64)&v44 + 7) & 0xFFFFFFFFFFFFFFF0LL) + 8), v9, i - (_QWORD)v9);\n          v9 = (const void *)(i + 1);\n          *v19 = 0;\n          v7 = *(unsigned __int8 *)++i;\n          *(_QWORD *)(((unsigned __int64)&v44 + 7) & 0xFFFFFFFFFFFFFFF0LL) = 0LL;\n          *v10 = ((unsigned __int64)&v44 + 7) & 0xFFFFFFFFFFFFFFF0LL;\n          v10 = (__int64 *)(((unsigned __int64)&v44 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n          v12 = 0LL;\n        }\n        goto LABEL_6;\n      }\n      if ( !_bittest64(&v11, (unsigned int)(v7 - 33)) || *(_BYTE *)(i + 1) != 40 )\n        break;\n      ++v12;\n      ++i;\n      v7 = 40;\n    }\n    if ( (_BYTE)v7 != 41 )\n      goto LABEL_5;\n    if ( v12 )\n    {\n      v7 = *(unsigned __int8 *)(i + 1);\n      --v12;\n      ++i;\n      if ( !(_BYTE)v7 )\n        return 0xFFFFFFFFLL;\n      continue;\n    }\n    break;\n  }\n  v20 = v10;\n  v21 = v44;\n  v22 = i - (_QWORD)v9 + 1;\n  if ( (unsigned int)(v51 - 63) <= 1 )\n    v22 = v50;\n  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8LL;\n  if ( v23 - 8 > 0x1F37 )\n    return 0xFFFFFFFFLL;\n  v24 = alloca(v23 + 8);\n  v25 = mempcpy((void *)((((unsigned __int64)&v44 + 7) & 0xFFFFFFFFFFFFFFF0LL) + 8), v9, i - (_QWORD)v9);\n  *v20 = ((unsigned __int64)&v44 + 7) & 0xFFFFFFFFFFFFFFF0LL;\n  *v25 = 0;\n  v26 = (__int64)v52;\n  *(_QWORD *)(((unsigned __int64)&v44 + 7) & 0xFFFFFFFFFFFFFFF0LL) = 0LL;\n  v50 = v26;\n  if ( !v26 )\n    __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 0x454u, \"ext_match\");\n  if ( *(_BYTE *)(i - 1) != 41 )\n    __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 0x455u, \"ext_match\");\n  switch ( (_DWORD)v51 )\n  {\n    case 0x21:\n      if ( v48 > v47 )\n        return 1LL;\n      v35 = v48;\n      v51 = i;\n      v36 = v48;\n      v37 = v46 & 0xFFFFFFFB;\n      if ( v46 & 1 )\n        v37 = v46;\n      while ( 2 )\n      {\n        v38 = (_QWORD *)v50;\n        while ( (unsigned int)sub_414EB0(v38 + 1, v35, v36, (unsigned __int8)v6, v37) )\n        {\n          v38 = (_QWORD *)*v38;\n          if ( !v38 )\n          {\n            if ( v35 == v36 )\n            {\n              v39 = (unsigned __int8)v6;\n            }\n            else\n            {\n              v39 = 0LL;\n              if ( *(_BYTE *)(v36 - 1) == 47 )\n                v39 = (v46 & 5) == 5;\n            }\n            if ( !(unsigned int)sub_414EB0(v51, v36, v47, v39, v37) )\n              return 0LL;\n            break;\n          }\n        }\n        if ( v47 >= ++v36 )\n          continue;\n        break;\n      }\n      return 1LL;\n    case 0x2A:\n      if ( (unsigned int)sub_414EB0(i, v48, v47, (unsigned __int8)v6, v46) )\n        goto LABEL_41;\n      return 0LL;\n    case 0x2B:\nLABEL_41:\n      v27 = v48;\n      v49 = i;\n      v28 = (_QWORD *)v50;\n      v29 = v46 & 0xFFFFFFFB;\n      if ( v46 & 1 )\n        v29 = v46;\n      v30 = v21 - 1;\n      LODWORD(v50) = v46 & 1;\n      v31 = v47;\n      v44 = v30;\n      do\n      {\n        if ( v27 <= v31 )\n        {\n          v32 = v27;\n          LODWORD(v51) = v45;\n          do\n          {\n            if ( !(unsigned int)sub_414EB0(v28 + 1, v27, v32, (unsigned int)v51, v29) )\n            {\n              if ( v27 == v32 )\n              {\n                if ( !(unsigned int)sub_414EB0(v49, v27, v31, (unsigned int)v51, v29) )\n                  return 0LL;\n              }\n              else\n              {\n                v33 = 0LL;\n                if ( *(_BYTE *)(v32 - 1) == 47 )\n                  v33 = (v46 & 5) == 5;\n                if ( !(unsigned int)sub_414EB0(v49, v32, v31, v33, v29) )\n                  return 0LL;\n                v34 = 0LL;\n                if ( *(_BYTE *)(v32 - 1) == 47 )\n                  v34 = (v46 & 5) == 5;\n                if ( !(unsigned int)sub_414EB0(v44, v32, v31, v34, v29) )\n                  return 0LL;\n              }\n              v28 = v52;\n            }\n            ++v32;\n          }\n          while ( v31 >= v32 );\n        }\n        v28 = (_QWORD *)*v28;\n        v52 = v28;\n      }\n      while ( v28 );\n      return 1LL;\n    case 0x3F:\n      v6 = (unsigned __int8)v6;\n      if ( (unsigned int)sub_414EB0(i, v48, v47, (unsigned __int8)v6, v46) )\n        goto LABEL_71;\n      return 0LL;\n    case 0x40:\n      v6 = (unsigned __int8)v6;\nLABEL_71:\n      v40 = v50;\n      v41 = v47;\n      v42 = v46 & 0xFFFFFFFB;\n      if ( v46 & 1 )\n        v42 = v46;\n      break;\n    default:\n      __assert_fail(\"! \\\"Invalid extended matching operator\\\"\", \"lib/fnmatch_loop.c\", 0x4ADu, \"ext_match\");\n      return result;\n  }\n  while ( 1 )\n  {\n    v43 = strcat((char *)(v40 + 8), (const char *)i);\n    if ( !(unsigned int)sub_414EB0(v43, v48, v41, v6, v42) )\n      break;\n    v40 = *(_QWORD *)v40;\n    v52 = (_QWORD *)v40;\n    if ( !v40 )\n      return 1LL;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x414960L", 
            "funcEndAddr": "0x414ea3L", 
            "funcName": "sub_414960"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_414EB0(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int64 a3, unsigned __int8 a4, unsigned int a5)\n{\n  unsigned __int8 *v5; // r14\n  __int64 v6; // r12\n  unsigned __int8 *v7; // r13\n  unsigned __int8 v8; // r15\n  int v9; // ebp\n  int v10; // ebx\n  unsigned __int8 v11; // r12\n  int v12; // eax\n  __int32_t v13; // edx\n  __int64 v14; // r12\n  unsigned __int8 v15; // al\n  unsigned __int8 *v16; // r15\n  __int64 v17; // r15\n  unsigned __int8 v18; // si\n  unsigned __int8 *j; // rax\n  unsigned __int8 v20; // dl\n  int v21; // ecx\n  unsigned __int8 *v22; // r8\n  unsigned __int8 v23; // cl\n  __int32_t v24; // eax\n  __int64 v25; // r13\n  __int64 result; // rax\n  __int64 v27; // r8\n  unsigned __int8 *v28; // r9\n  unsigned __int8 *v29; // rax\n  __int64 v30; // rcx\n  __int64 v31; // rax\n  unsigned __int8 v32; // r8\n  unsigned __int8 *v33; // r12\n  unsigned __int8 *v34; // r9\n  const __int32_t **v35; // rax\n  int v36; // ebp\n  unsigned int i; // er13\n  __int32_t v38; // eax\n  unsigned __int8 v39; // r15\n  const __int32_t *v40; // rdx\n  unsigned __int8 *v41; // r15\n  __int64 v42; // rdx\n  unsigned __int8 v43; // al\n  _BYTE *v44; // r13\n  char v45; // al\n  const __int32_t **v46; // rax\n  __int64 v47; // rdx\n  unsigned int v48; // eax\n  unsigned int v49; // er13\n  __int64 v50; // rdx\n  __int64 v51; // r13\n  wctype_t v52; // r13\n  wint_t v53; // eax\n  unsigned __int64 v54; // [rsp+8h] [rbp-170h]\n  __int64 v55; // [rsp+10h] [rbp-168h]\n  unsigned __int8 *v56; // [rsp+10h] [rbp-168h]\n  __int64 v57; // [rsp+10h] [rbp-168h]\n  unsigned __int8 *v58; // [rsp+10h] [rbp-168h]\n  unsigned __int8 *v59; // [rsp+18h] [rbp-160h]\n  unsigned __int8 v60; // [rsp+18h] [rbp-160h]\n  char v61; // [rsp+18h] [rbp-160h]\n  unsigned int v62; // [rsp+20h] [rbp-158h]\n  int v63; // [rsp+28h] [rbp-150h]\n  unsigned __int8 v64; // [rsp+28h] [rbp-150h]\n  int v65; // [rsp+2Ch] [rbp-14Ch]\n  char property[328]; // [rsp+30h] [rbp-148h]\n\n  v5 = a2;\n  v6 = *a1;\n  v54 = a3;\n  v62 = a5;\n  v55 = (__int64)(a1 + 1);\n  if ( !(_BYTE)v6 )\n    goto LABEL_66;\n  v7 = a1;\n  v63 = a5 & 5;\n  v8 = a4;\n  v9 = a5 & 2;\n  v10 = a5 & 0x10;\n  while ( 2 )\n  {\n    if ( v10 )\n      LODWORD(v6) = LOBYTE((*__ctype_tolower_loc())[v6]);\n    switch ( (_BYTE)v6 )\n    {\n      case 0x21:\n      case 0x2B:\n      case 0x40:\n        if ( !(v62 & 0x20) )\n          goto LABEL_60;\n        if ( v7[1] != 40 )\n          goto LABEL_60;\n        result = sub_414960((unsigned __int8)v6, v55, (unsigned __int64)v5, v54, v8, v62);\n        if ( (_DWORD)result == -1 )\n          goto LABEL_60;\n        return result;\n      case 0x2A:\n        if ( v62 & 0x20 )\n        {\n          if ( v7[1] == 40 )\n          {\n            result = sub_414960(42, v55, (unsigned __int64)v5, v54, v8, v62);\n            if ( (_DWORD)result != -1 )\n              return result;\n          }\n        }\n        if ( v5 != (unsigned __int8 *)v54 && *v5 == 46 && v8 )\n          return 1LL;\n        v27 = v7[1];\n        v28 = v7 + 2;\n        if ( (_BYTE)v27 != 42 && (_BYTE)v27 != 63 )\n          goto LABEL_86;\n        do\n        {\n          if ( *v28 == 40 && (v62 & 0x20) != 0 )\n          {\n            v58 = v28;\n            v61 = v27;\n            v29 = (unsigned __int8 *)sub_4137F0(v28);\n            v28 = v58;\n            if ( v29 != v58 )\n              goto LABEL_84;\n            LOBYTE(v27) = v61;\n          }\n          if ( (_BYTE)v27 == 63 )\n          {\n            if ( v5 == (unsigned __int8 *)v54 || *v5 == 47 && v62 & 1 )\n              return 1LL;\n            ++v5;\n          }\n          v29 = v28;\nLABEL_84:\n          v27 = *v29;\n          v28 = v29 + 1;\n        }\n        while ( (_BYTE)v27 == 63 || (_BYTE)v27 == 42 );\nLABEL_86:\n        v30 = v62 & 1;\n        if ( (_BYTE)v27 )\n        {\n          v64 = v27;\n          v59 = v28;\n          v31 = sub_416F00(v5, -(int)v30 & 0x2F, v54 - (_QWORD)v5, v30, v27, v28);\n          v32 = v64;\n          v33 = (unsigned __int8 *)v31;\n          v34 = v59;\n          if ( !v31 )\n            v33 = (unsigned __int8 *)v54;\n          if ( v64 == 91\n            || v62 & 0x20\n            && (unsigned __int8)(v64 - 33) <= 0x1Fu\n            && (v47 = 2147484673LL, _bittest64(&v47, (unsigned int)v64 - 33))\n            && *v59 == 40 )\n          {\n            v48 = v62 & 0xFFFFFFFB;\n            if ( v62 & 1 )\n              v48 = v62;\n            v49 = v48;\n            if ( v33 > v5 )\n            {\n              do\n              {\n                if ( !(unsigned int)sub_414EB0(v59 - 1, v5, v54, v8, v49) )\n                  return 0LL;\n                ++v5;\n                v8 = 0;\n              }\n              while ( v33 != v5 );\n            }\n            return 1LL;\n          }\n          if ( v64 != 47 )\n          {\n            if ( v62 & 1 )\n              goto LABEL_93;\n            goto LABEL_187;\n          }\n          if ( !(v62 & 1) )\n          {\nLABEL_187:\n            v62 &= 0xFFFFFFFB;\nLABEL_93:\n            if ( v64 == 92 && !v9 )\n              v32 = *v59;\n            if ( v10 )\n            {\n              v60 = v32;\n              v56 = v34;\n              v35 = __ctype_tolower_loc();\n              v34 = v56;\n              v32 = (*v35)[v60];\n            }\n            v57 = (__int64)(v34 - 1);\n            if ( v33 <= v5 )\n              return 1LL;\n            v36 = v32;\n            for ( i = v8; ; i = 0 )\n            {\n              v38 = *v5;\n              if ( v10 )\n              {\n                v39 = *v5;\n                v38 = (*__ctype_tolower_loc())[v39];\n              }\n              if ( v38 == v36 && !(unsigned int)sub_414EB0(v57, v5, v54, i, v62) )\n                break;\n              if ( v33 == ++v5 )\n                return 1LL;\n            }\n            return 0LL;\n          }\n          if ( v54 <= (unsigned __int64)v5 )\n            return 1LL;\n          while ( *v5 != 47 )\n          {\n            if ( (unsigned __int8 *)v54 == ++v5 )\n              return 1LL;\n          }\n          result = (unsigned int)sub_414EB0(v59, v5 + 1, v54, (v62 >> 2) & 1, v62) != 0;\n        }\n        else\n        {\n          if ( !(v62 & 1) || v62 & 8 )\n            return 0LL;\n          result = sub_416F00(v5, 47LL, v54 - (_QWORD)v5, v30, v27, v28) != 0;\n        }\n        return result;\n      case 0x2F:\n        if ( v63 != 5 )\n          goto LABEL_60;\n        if ( v5 == (unsigned __int8 *)v54 || *v5 != 47 )\n          return 1LL;\n        v7 = (unsigned __int8 *)v55;\n        v8 = 1;\n        goto LABEL_65;\n      case 0x3F:\n        if ( v62 & 0x20 )\n        {\n          if ( v7[1] == 40 )\n          {\n            result = sub_414960(63, v55, (unsigned __int64)v5, v54, v8, v62);\n            if ( (_DWORD)result != -1 )\n              return result;\n          }\n        }\n        if ( v5 == (unsigned __int8 *)v54 )\n          return 1LL;\n        if ( *v5 != 47 )\n        {\n          v8 &= *v5 == 46;\n          if ( !v8 )\n          {\n            v7 = (unsigned __int8 *)v55;\n            goto LABEL_65;\n          }\n          return 1LL;\n        }\n        if ( v62 & 1 )\n          return 1LL;\n        goto LABEL_64;\n      case 0x5B:\n        if ( !dword_625918 )\n          dword_625918 = (unsigned __int64)getenv(\"POSIXLY_CORRECT\") < 1 ? -1 : 1;\n        if ( v5 == (unsigned __int8 *)v54 )\n          return 1LL;\n        v14 = *v5;\n        if ( (_BYTE)v14 == 46 )\n        {\n          if ( v8 )\n            return 1LL;\n        }\n        else if ( (_BYTE)v14 == 47 && v62 & 1 )\n        {\n          return 1LL;\n        }\n        v15 = v7[1];\n        if ( v15 == 33 || dword_625918 < 0 && v15 == 94 )\n        {\n          v16 = v7 + 2;\n          v65 = 1;\n        }\n        else\n        {\n          v65 = 0;\n          v16 = (unsigned __int8 *)v55;\n        }\n        if ( v10 )\n          LOBYTE(v14) = (*__ctype_tolower_loc())[v14];\n        v7 = v16 + 1;\n        v17 = *v16;\nLABEL_30:\n        while ( 2 )\n        {\n          if ( !v9 && (_BYTE)v17 == 92 )\n          {\n            v17 = *v7;\n            if ( !(_BYTE)v17 )\n              return 1LL;\n            if ( v10 )\n              LOBYTE(v17) = (*__ctype_tolower_loc())[v17];\n            v18 = *++v7;\n            goto LABEL_37;\n          }\n          if ( (_BYTE)v17 != 91 )\n          {\n            if ( (_BYTE)v17 )\n            {\n              v18 = *v7;\n              goto LABEL_35;\n            }\n            LODWORD(v6) = 91;\nLABEL_61:\n            v24 = *v5;\n            if ( v10 )\n            {\n              v25 = *v5;\n              v24 = (*__ctype_tolower_loc())[v25];\n            }\n            if ( v24 != (_DWORD)v6 )\n              return 1LL;\nLABEL_64:\n            v7 = (unsigned __int8 *)v55;\n            v8 = 0;\n            goto LABEL_65;\n          }\n          v18 = *v7;\n          if ( *v7 != 58 )\n          {\n            while ( 1 )\n            {\nLABEL_35:\n              if ( v10 )\n                LOBYTE(v17) = (*__ctype_tolower_loc())[v17];\nLABEL_37:\n              j = v7 + 1;\n              if ( v18 != 45 )\n                break;\n              v20 = v7[1];\n              if ( v20 != 93 && v20 )\n              {\n                v21 = (char)v17;\nLABEL_41:\n                j = v7 + 2;\n                if ( !v9 && v20 == 92 )\n                {\n                  j = v7 + 3;\n                  v20 = v7[2];\n                }\n                if ( !v20 )\n                  return 1LL;\n                v18 = *j;\n                v7 = j + 1;\n                v17 = *j;\n                if ( v21 <= (unsigned __int8)v14 && (unsigned __int8)v14 <= v20 )\n                  goto LABEL_47;\nLABEL_29:\n                if ( (_BYTE)v17 == 93 )\n                {\n                  if ( !v65 )\n                    return 1LL;\n                  goto LABEL_13;\n                }\n                goto LABEL_30;\n              }\n              if ( (_BYTE)v14 == (_BYTE)v17 )\n                goto LABEL_49;\n              v21 = (char)v17;\n              if ( v20 != 93 )\n                goto LABEL_41;\n              v18 = 93;\n              ++v7;\n              v17 = 45LL;\n            }\n            if ( (_BYTE)v14 == (_BYTE)v17 )\n              goto LABEL_177;\n            v17 = v18;\n            ++v7;\n            goto LABEL_29;\n          }\n          v41 = v7;\n          v42 = 0LL;\n          while ( 1 )\n          {\n            v43 = v41[1];\n            if ( v43 == 58 )\n              break;\n            if ( (unsigned __int8)(v43 - 97) > 0x18u )\n              goto LABEL_117;\n            ++v42;\n            ++v41;\n            *((_BYTE *)&v65 + v42 + 3) = v43;\n            if ( v42 == 256 )\n              return 1LL;\n          }\n          if ( v41[2] != 93 )\n          {\nLABEL_117:\n            j = v7 + 1;\n            if ( (_BYTE)v14 != 91 )\n            {\n              ++v7;\n              v17 = 58LL;\n              continue;\n            }\nLABEL_177:\n            v18 = *v7;\n            goto LABEL_49;\n          }\n          break;\n        }\n        property[v42] = 0;\n        v52 = wctype(property);\n        if ( !v52 )\n          return 1LL;\n        v53 = btowc(*v5);\n        if ( !iswctype(v53, v52) )\n        {\n          v7 = v41 + 4;\n          v17 = v41[3];\n          goto LABEL_29;\n        }\n        v7 = v41 + 3;\n        v18 = v41[3];\n        for ( j = v41 + 4; ; j = v7 + 1 )\n        {\nLABEL_49:\n          v22 = j;\n          v23 = v18;\n          if ( !v18 )\n            return 1LL;\n          v8 = v9 == 0 && v18 == 92;\n          if ( v8 )\n          {\n            if ( v7[1] )\n            {\n              v18 = v7[2];\n              v7 += 2;\n              continue;\n            }\n            return 1LL;\n          }\n          if ( v18 != 91 )\n            goto LABEL_52;\n          v18 = v7[1];\n          if ( v18 != 58 )\n            break;\n          v50 = (__int64)(v7 + 2);\n          v18 = v7[2];\n          v51 = (__int64)(v7 + 257);\n          while ( 1 )\n          {\n            if ( v18 == 58 )\n            {\n              if ( *(_BYTE *)(v50 + 1) == 93 )\n              {\n                v22 = (unsigned __int8 *)(v50 + 3);\n                v23 = *(_BYTE *)(v50 + 2);\n                goto LABEL_52;\n              }\nLABEL_47:\n              v7 = j;\n              goto LABEL_48;\n            }\n            if ( (unsigned __int8)(v18 - 97) > 0x18u )\n              break;\n            v18 = *(_BYTE *)++v50;\n            if ( v51 == v50 )\n              return 1LL;\n          }\n          v18 = 58;\n          v7 = j;\nLABEL_48:\n          ;\n        }\n        if ( v18 == 61 )\n        {\n          if ( v7[2] && v7[3] == 61 && v7[4] == 93 )\n          {\n            v22 = v7 + 6;\n            v23 = v7[5];\n            goto LABEL_52;\n          }\n          return 1LL;\n        }\n        v44 = v7 + 2;\n        if ( v18 != 46 )\n          goto LABEL_47;\n        while ( 1 )\n        {\n          v45 = v44[1];\n          if ( !v45 )\n            return 1LL;\n          if ( v45 == 46 && v44[2] == 93 )\n            break;\n          ++v44;\n        }\n        v22 = v44 + 4;\n        v23 = v44[3];\nLABEL_52:\n        if ( v23 != 93 )\n        {\n          v7 = v22;\n          v18 = *v22;\n          j = v22 + 1;\n          goto LABEL_49;\n        }\n        if ( v65 )\n          return 1LL;\n        v7 = v22;\nLABEL_65:\n        v6 = *v7;\n        ++v5;\n        v55 = (__int64)(v7 + 1);\n        if ( !(_BYTE)v6 )\n        {\nLABEL_66:\n          if ( (unsigned __int8 *)v54 == v5 )\n            return 0LL;\n          if ( v62 & 8 )\n            return *v5 != 47;\n          return 1LL;\n        }\n        continue;\n      case 0x5C:\n        if ( v9 )\n        {\n          if ( v5 == (unsigned __int8 *)v54 )\n            return 1LL;\n          if ( !v10 )\n          {\n            v12 = 92;\nLABEL_11:\n            v13 = *v5;\n            v7 = (unsigned __int8 *)v55;\n            goto LABEL_12;\n          }\n          v7 = (unsigned __int8 *)v55;\n          v40 = *__ctype_tolower_loc();\n          v12 = 92;\n        }\n        else\n        {\n          v11 = v7[1];\n          v55 = (__int64)(v7 + 2);\n          if ( !v11 )\n            return 1LL;\n          if ( !v10 )\n          {\n            if ( v5 == (unsigned __int8 *)v54 )\n              return 1LL;\n            v12 = v11;\n            goto LABEL_11;\n          }\n          v46 = __ctype_tolower_loc();\n          v40 = *v46;\n          v12 = (*v46)[v11];\n          if ( v5 == (unsigned __int8 *)v54 )\n            return 1LL;\n          v12 = (unsigned __int8)v12;\n          v7 += 2;\n        }\n        v13 = v40[*v5];\nLABEL_12:\n        if ( v13 != v12 )\n          return 1LL;\nLABEL_13:\n        v8 = 0;\n        goto LABEL_65;\n      default:\nLABEL_60:\n        if ( v5 != (unsigned __int8 *)v54 )\n          goto LABEL_61;\n        return 1LL;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x414eb0L", 
            "funcEndAddr": "0x415993L", 
            "funcName": "sub_414EB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4159A0(char *a1, char *a2, unsigned int a3)\n{\n  unsigned int v3; // er12\n  unsigned __int8 *v4; // rbx\n  size_t v5; // rax\n  __int64 result; // rax\n  size_t v7; // rax\n  size_t v8; // rbx\n  size_t v9; // rax\n  size_t v10; // r13\n  unsigned __int64 v11; // rax\n  size_t v12; // rdi\n  void *v13; // rsp\n  wchar_t *v14; // rax\n  wint_t *v15; // r14\n  wchar_t *v16; // r15\n  unsigned int v17; // [rsp+Ch] [rbp-54h]\n  char *s; // [rsp+10h] [rbp-50h]\n  char *src; // [rsp+18h] [rbp-48h]\n  mbstate_t ps; // [rsp+28h] [rbp-38h]\n\n  v3 = a3;\n  src = a1;\n  s = a2;\n  if ( __ctype_get_mb_cur_max() == 1 )\n    goto LABEL_22;\n  ps = 0LL;\n  v7 = mbsrtowcs(0LL, (const char **)&src, 0LL, &ps);\n  v8 = v7 + 1;\n  if ( v7 == -1LL )\n    goto LABEL_22;\n  if ( !mbsinit(&ps) )\n    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 0x129u, \"gnu_fnmatch\");\n  v9 = mbsrtowcs(0LL, (const char **)&s, 0LL, &ps);\n  v10 = v9 + 1;\n  if ( v9 == -1LL )\n  {\nLABEL_22:\n    v4 = (unsigned __int8 *)s;\n    v5 = strlen(s);\n    return sub_414EB0((unsigned __int8 *)src, v4, (unsigned __int64)&v4[v5], (v3 >> 2) & 1, v3);\n  }\n  if ( !mbsinit(&ps) )\n    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 0x12Du, \"gnu_fnmatch\");\n  v11 = v10 + v8;\n  if ( __CFADD__(v10, v8) || v11 > 0x3FFFFFFFFFFFFFFFLL )\n    goto LABEL_23;\n  v12 = 4 * v11;\n  if ( v11 <= 0x7CF )\n  {\n    v13 = alloca(v12 + 8);\n    mbsrtowcs((wchar_t *)(((unsigned __int64)&v17 + 3) & 0xFFFFFFFFFFFFFFF0LL), (const char **)&src, v8, &ps);\n    if ( mbsinit(&ps) )\n    {\n      mbsrtowcs(\n        (wchar_t *)((((unsigned __int64)&v17 + 3) & 0xFFFFFFFFFFFFFFF0LL) + 4 * v8),\n        (const char **)&s,\n        v10,\n        &ps);\n      return sub_413E80(\n               (wint_t *)(((unsigned __int64)&v17 + 3) & 0xFFFFFFFFFFFFFFF0LL),\n               (const wchar_t *)((((unsigned __int64)&v17 + 3) & 0xFFFFFFFFFFFFFFF0LL) + 4 * v8),\n               (((unsigned __int64)&v17 + 3) & 0xFFFFFFFFFFFFFFF0LL) + 4 * v8 + 4 * v10 - 4,\n               (v3 >> 2) & 1,\n               v3);\n    }\nLABEL_17:\n    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 0x147u, \"gnu_fnmatch\");\n  }\n  v14 = (wchar_t *)malloc(v12);\n  v15 = (wint_t *)v14;\n  if ( !v14 )\n  {\nLABEL_23:\n    *__errno_location() = 12;\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    v16 = &v14[v8];\n    mbsrtowcs(v14, (const char **)&src, v8, &ps);\n    if ( !mbsinit(&ps) )\n      goto LABEL_17;\n    mbsrtowcs(v16, (const char **)&s, v10, &ps);\n    v17 = sub_413E80(v15, v16, (unsigned __int64)&v16[v10 - 1], (v3 >> 2) & 1, v3);\n    free(v15);\n    result = v17;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4159a0L", 
            "funcEndAddr": "0x415bd8L", 
            "funcName": "sub_4159A0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_415BE0(char *a1, size_t a2)\n{\n  char *v3; // rbx\n  __dev_t v4; // r15\n  __ino_t v5; // r14\n  DIR *v6; // rbp\n  int v7; // er15\n  int *v8; // r12\n  int v9; // eax\n  bool v10; // r13\n  struct dirent *v11; // rax\n  const char *v12; // rbx\n  signed __int64 v13; // r13\n  size_t v14; // r14\n  char *v15; // rdx\n  char *v16; // rax\n  size_t v17; // rbx\n  char *v18; // rax\n  int v19; // ebx\n  __dev_t v20; // [rsp+8h] [rbp-120h]\n  size_t v21; // [rsp+8h] [rbp-120h]\n  __dev_t v22; // [rsp+10h] [rbp-118h]\n  char *ptr; // [rsp+18h] [rbp-110h]\n  char *v24; // [rsp+20h] [rbp-108h]\n  size_t size; // [rsp+28h] [rbp-100h]\n  bool v26; // [rsp+3Fh] [rbp-E9h]\n  char *src; // [rsp+40h] [rbp-E8h]\n  char *srca; // [rsp+40h] [rbp-E8h]\n  __dev_t v29; // [rsp+48h] [rbp-E0h]\n  __ino_t v30; // [rsp+50h] [rbp-D8h]\n  __ino_t v31; // [rsp+58h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+60h] [rbp-C8h]\n\n  v24 = a1;\n  if ( !a2 )\n  {\n    size = 4096LL;\n    if ( a1 )\n    {\n      ptr = 0LL;\n      *__errno_location() = 22;\n      return ptr;\n    }\nLABEL_3:\n    ptr = (char *)malloc(size);\n    if ( !ptr )\n      return ptr;\n    goto LABEL_7;\n  }\n  size = a2;\n  if ( !a1 )\n    goto LABEL_3;\n  ptr = a1;\nLABEL_7:\n  v3 = &ptr[size];\n  ptr[size - 1] = 0;\n  if ( __lxstat(1, \".\", &stat_buf) < 0\n    || (v4 = stat_buf.st_dev, v5 = stat_buf.st_ino, v20 = stat_buf.st_dev, __lxstat(1, \"/\", &stat_buf) < 0) )\n  {\n    v8 = __errno_location();\nLABEL_58:\n    v19 = *v8;\n    if ( a1 )\n      goto LABEL_56;\n    goto LABEL_59;\n  }\n  src = v3 - 1;\n  v30 = stat_buf.st_ino;\n  v29 = stat_buf.st_dev;\n  v26 = v5 != stat_buf.st_ino || v4 != stat_buf.st_dev;\n  if ( !v26 )\n    goto LABEL_37;\n  v6 = 0LL;\n  v7 = -100;\n  v8 = __errno_location();\n  do\n  {\n    v9 = openat(v7, \"..\", 0);\n    v7 = v9;\n    if ( v9 < 0 )\n    {\n      v19 = *v8;\n      if ( v6 )\nLABEL_54:\n        closedir(v6);\nLABEL_55:\n      if ( a1 )\n      {\nLABEL_56:\n        *v8 = v19;\n        return 0LL;\n      }\nLABEL_59:\n      free(ptr);\n      goto LABEL_56;\n    }\n    if ( __fxstat(1, v9, &stat_buf) )\n    {\n      v19 = *v8;\n      if ( v6 )\n        closedir(v6);\n      goto LABEL_62;\n    }\n    if ( v6 && closedir(v6) || (v22 = stat_buf.st_dev, v31 = stat_buf.st_ino, (v6 = fdopendir(v7)) == 0LL) )\n    {\n      v19 = *v8;\nLABEL_62:\n      close(v7);\n      goto LABEL_55;\n    }\n    v10 = v26;\n    do\n    {\n      while ( 1 )\n      {\n        *v8 = 0;\n        v11 = readdir(v6);\n        if ( v11 )\n        {\n          if ( v11->d_name[0] != 46 )\n            goto LABEL_19;\n          goto LABEL_48;\n        }\n        v19 = *v8;\n        if ( *v8 || !v10 )\n          goto LABEL_52;\n        rewinddir(v6);\n        v11 = readdir(v6);\n        if ( !v11 )\n        {\n          v19 = *v8;\nLABEL_52:\n          if ( !v19 )\n          {\n            *v8 = 2;\n            v19 = 2;\n          }\n          goto LABEL_54;\n        }\n        v10 = 0;\n        if ( v11->d_name[0] != 46 )\n          break;\nLABEL_48:\n        if ( v11->d_name[1] && *(_WORD *)&v11->d_name[1] != 46 )\n        {\nLABEL_19:\n          if ( !v10 )\n            break;\n          if ( v22 != v20 || v11->d_ino == v5 )\n          {\n            v10 = v22 != v20 || v11->d_ino == v5;\n            break;\n          }\n        }\n      }\n      v12 = v11->d_name;\n    }\n    while ( __fxstatat(1, v7, v11->d_name, &stat_buf, 256)\n         || (stat_buf.st_mode & 0xF000) != 0x4000\n         || stat_buf.st_dev != v20\n         || stat_buf.st_ino != v5 );\n    v13 = src - ptr;\n    v14 = strlen(v12);\n    if ( src - ptr <= v14 )\n    {\n      if ( a2 )\n      {\n        *v8 = 34;\n        v19 = 34;\n        goto LABEL_54;\n      }\n      v15 = (char *)size;\n      if ( v14 >= size )\n        v15 = (char *)v14;\n      srca = v15;\n      v21 = (size_t)&v15[size];\n      if ( __CFADD__(v15, size) || (v16 = (char *)realloc(ptr, (size_t)&v15[size])) == 0LL )\n      {\n        *v8 = 12;\n        v19 = 12;\n        goto LABEL_54;\n      }\n      ptr = v16;\n      src = (char *)memcpy(&srca[v13 + (_QWORD)v16], &v16[v13], size - v13);\n      size = v21;\n    }\n    src = (char *)memcpy(&src[-v14], v12, v14) - 1;\n    v5 = v31;\n    *src = 47;\n    v20 = v22;\n  }\n  while ( v29 != v22 || v30 != v31 );\n  if ( closedir(v6) )\n    goto LABEL_58;\n  v3 = &ptr[size];\nLABEL_37:\n  if ( src == &ptr[size - 1] )\n    *--src = 47;\n  v17 = v3 - src;\n  memmove(ptr, src, v17);\n  if ( !a2 )\n    v24 = (char *)realloc(ptr, v17);\n  v18 = v24;\n  if ( !v24 )\n    v18 = ptr;\n  return v18;\n}\n", 
            "funcStartAddr": "0x415be0L", 
            "funcEndAddr": "0x4160a2L", 
            "funcName": "sub_415BE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4160B0(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x4160b0L", 
            "funcEndAddr": "0x41618fL", 
            "funcName": "sub_4160B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416190(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x416190L", 
            "funcEndAddr": "0x4167acL", 
            "funcName": "sub_416190"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4167B0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_4160B0(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_4160B0((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_416190(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_416190(a1, v11, v12, v45, v46, a6, a7, v8, 4321650LL);\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_416190(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x4167b0L", 
            "funcEndAddr": "0x416d76L", 
            "funcName": "sub_4167B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416D80(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_625920 = dword_62463C;\n  dword_625924 = dword_624638;\n  result = sub_4167B0(a1, a2, a3, a4, a5, a6, &dword_625920, a7);\n  dword_62463C = dword_625920;\n  nptr = (char *)qword_625930;\n  dword_624634 = dword_625928;\n  return result;\n}\n", 
            "funcStartAddr": "0x416d80L", 
            "funcEndAddr": "0x416dd6L", 
            "funcName": "sub_416D80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416DE0(int a1, __int64 a2, char *a3)\n{\n  return sub_416D80(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x416de0L", 
            "funcEndAddr": "0x416df8L", 
            "funcName": "sub_416DE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416E00(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_416D80(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x416e00L", 
            "funcEndAddr": "0x416e13L", 
            "funcName": "sub_416E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416E20(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_4167B0(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x416e20L", 
            "funcEndAddr": "0x416e35L", 
            "funcName": "sub_416E20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416E40(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_416D80(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x416e40L", 
            "funcEndAddr": "0x416e56L", 
            "funcName": "sub_416E40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416E60(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_4167B0(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x416e60L", 
            "funcEndAddr": "0x416e78L", 
            "funcName": "sub_416E60"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_416E80(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"\\x1B]8;;\\a\" + 6;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !sub_40C190(0) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x416e80L", 
            "funcEndAddr": "0x416efaL", 
            "funcName": "sub_416E80"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_416F00(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax\n  __int64 v4; // r9\n  __int64 v5; // rcx\n  _BYTE *v6; // rdi\n\n  if ( !a3 )\n    return 0LL;\n  if ( (unsigned __int8)a1 & 7 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( !((unsigned __int8)a1 & 7) )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && !(((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( ((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = (__int64)(a1 + 1);\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = (_BYTE *)v5;\n      if ( (_BYTE *)v5 == v6 )\n        break;\n      if ( *(_BYTE *)(++v5 - 1) == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x416f00L", 
            "funcEndAddr": "0x417004L", 
            "funcName": "sub_416F00"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_417010()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  __fprintf_chk(stderr, 1LL, 4319840LL, v0);\n  exit(status);\n}\n", 
            "funcStartAddr": "0x417010L", 
            "funcEndAddr": "0x41704bL", 
            "funcName": "sub_417010"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_417050(__int64 a1, __int64 a2)\n{\n  __int64 (__fastcall *v2)(__int64); // rax\n  __int64 result; // rax\n\n  v2 = *(__int64 (__fastcall **)(__int64))(a1 + 56);\n  if ( *(_BYTE *)(a1 + 80) & 1 )\n    result = v2(*(_QWORD *)(a1 + 72));\n  else\n    result = v2(a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x417050L", 
            "funcEndAddr": "0x417065L", 
            "funcName": "sub_417050"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_417070(__int64 a1, __int64 a2)\n{\n  __int64 (__fastcall *v2)(__int64); // rax\n  __int64 result; // rax\n\n  v2 = *(__int64 (__fastcall **)(__int64))(a1 + 64);\n  if ( *(_BYTE *)(a1 + 80) & 1 )\n    result = v2(*(_QWORD *)(a1 + 72));\n  else\n    result = v2(a2);\n  return result;\n}\n", 
            "funcStartAddr": "0x417070L", 
            "funcEndAddr": "0x417085L", 
            "funcName": "sub_417070"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n", 
            "funcStartAddr": "0x417100L", 
            "funcEndAddr": "0x417113L", 
            "funcName": "_obstack_begin"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n", 
            "funcStartAddr": "0x417100L", 
            "funcEndAddr": "0x417113L", 
            "funcName": "_obstack_begin"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n", 
            "funcStartAddr": "0x417100L", 
            "funcEndAddr": "0x417113L", 
            "funcName": "_obstack_begin"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_begin_1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // rbp\n  __int64 v7; // r12\n  _QWORD *v8; // rax\n  __int64 v9; // rbp\n  __int64 v10; // rdx\n  char *v11; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) |= 1u;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  *(_QWORD *)(a1 + 72) = a6;\n  if ( !a3 )\n    JUMPOUT(0x417100LL);\n  v6 = a3;\n  v7 = a3 - 1;\n  *(_QWORD *)(a1 + 48) = a3 - 1;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v8 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v8;\n  if ( !v8 )\n    JUMPOUT(0x41710DLL);\n  v9 = ((unsigned __int64)v8 + v7 + 16) & -v6;\n  v10 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v9;\n  v11 = (char *)v8 + v10;\n  *(_QWORD *)(a1 + 24) = v9;\n  *v8 = v11;\n  *(_QWORD *)(a1 + 32) = v11;\n  v8[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n", 
            "funcStartAddr": "0x417090L", 
            "funcEndAddr": "0x4170fdL", 
            "funcName": "_obstack_begin_1"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_begin_1(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // rbp\n  __int64 v7; // r12\n  _QWORD *v8; // rax\n  __int64 v9; // rbp\n  __int64 v10; // rdx\n  char *v11; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) |= 1u;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  *(_QWORD *)(a1 + 72) = a6;\n  if ( !a3 )\n    JUMPOUT(0x417100LL);\n  v6 = a3;\n  v7 = a3 - 1;\n  *(_QWORD *)(a1 + 48) = a3 - 1;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v8 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v8;\n  if ( !v8 )\n    JUMPOUT(0x41710DLL);\n  v9 = ((unsigned __int64)v8 + v7 + 16) & -v6;\n  v10 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v9;\n  v11 = (char *)v8 + v10;\n  *(_QWORD *)(a1 + 24) = v9;\n  *v8 = v11;\n  *(_QWORD *)(a1 + 32) = v11;\n  v8[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n\n__int64 __fastcall obstack_begin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  __int64 v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbp\n  __int64 v9; // rdx\n  char *v10; // rdx\n  __int64 result; // rax\n\n  *(_BYTE *)(a1 + 80) &= 0xFEu;\n  *(_QWORD *)(a1 + 56) = a4;\n  *(_QWORD *)(a1 + 64) = a5;\n  if ( a3 )\n  {\n    v5 = a3;\n    v6 = a3 - 1;\n  }\n  else\n  {\n    v6 = 15LL;\n    v5 = 16LL;\n  }\n  *(_QWORD *)(a1 + 48) = v6;\n  if ( !a2 )\n    a2 = 4064LL;\n  *(_QWORD *)a1 = a2;\n  v7 = (_QWORD *)sub_417050(a1, a2);\n  *(_QWORD *)(a1 + 8) = v7;\n  if ( !v7 )\n    obstack_alloc_failed_handler();\n  v8 = ((unsigned __int64)v7 + v6 + 16) & -v5;\n  v9 = *(_QWORD *)a1;\n  *(_QWORD *)(a1 + 16) = v8;\n  v10 = (char *)v7 + v9;\n  *(_QWORD *)(a1 + 24) = v8;\n  *v7 = v10;\n  *(_QWORD *)(a1 + 32) = v10;\n  v7[1] = 0LL;\n  result = 1LL;\n  *(_BYTE *)(a1 + 80) &= 0xF9u;\n  return result;\n}\n", 
            "funcStartAddr": "0x417090L", 
            "funcEndAddr": "0x4170fdL", 
            "funcName": "_obstack_begin_1"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_newchunk(__int64 a1, __int64 a2, __int64 a3, _BOOL8 a4)\n{\n  size_t v4; // r13\n  __int64 v5; // rbp\n  size_t v6; // rsi\n  _BOOL8 v7; // rax\n  bool v8; // cf\n  unsigned __int64 v9; // rsi\n  size_t v10; // rdx\n  unsigned __int64 v11; // rbx\n  _QWORD *v12; // rax\n  _QWORD *v13; // r14\n  char *v14; // rbx\n  __int64 result; // rax\n\n  v4 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);\n  v5 = *(_QWORD *)(a1 + 8);\n  v8 = __CFADD__(v4, a2);\n  v6 = v4 + a2;\n  v7 = v8;\n  v8 = __CFADD__(*(_QWORD *)(a1 + 48), v6);\n  v9 = *(_QWORD *)(a1 + 48) + v6;\n  LOBYTE(a4) = v8;\n  v10 = v4 >> 3;\n  v11 = v9 + (v4 >> 3) + 100;\n  if ( *(_QWORD *)a1 >= v9 )\n    v9 = *(_QWORD *)a1;\n  if ( v9 >= v11 )\n    v11 = v9;\n  if ( v7 || (a4 = v8) || (v9 = v11, v12 = (_QWORD *)sub_417050(a1, v11), (v13 = v12) == 0LL) )\n    obstack_alloc_failed_handler(a1, v9, v10, a4);\n  *(_QWORD *)(a1 + 8) = v12;\n  v12[1] = v5;\n  *(_QWORD *)(a1 + 32) = (char *)v12 + v11;\n  *v12 = (char *)v12 + v11;\n  v14 = (char *)(~*(_QWORD *)(a1 + 48) & ((unsigned __int64)v12 + *(_QWORD *)(a1 + 48) + 16));\n  result = (__int64)memcpy(v14, *(const void **)(a1 + 16), v4);\n  if ( !(*(_BYTE *)(a1 + 80) & 2) )\n  {\n    result = (v5 + *(_QWORD *)(a1 + 48) + 16) & ~*(_QWORD *)(a1 + 48);\n    if ( *(_QWORD *)(a1 + 16) == result )\n    {\n      v13[1] = *(_QWORD *)(v5 + 8);\n      result = sub_417070(a1, v5);\n    }\n  }\n  *(_QWORD *)(a1 + 16) = v14;\n  *(_QWORD *)(a1 + 24) = &v14[v4];\n  *(_BYTE *)(a1 + 80) &= 0xFDu;\n  return result;\n}\n", 
            "funcStartAddr": "0x417160L", 
            "funcEndAddr": "0x41725bL", 
            "funcName": "_obstack_newchunk"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall obstack_allocated_p(__int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n\n  result = *(_QWORD *)(a1 + 8);\n  if ( result )\n  {\n    while ( a2 <= result || *(_QWORD *)result < a2 )\n    {\n      result = *(_QWORD *)(result + 8);\n      if ( !result )\n        return 0LL;\n    }\n    result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x417260L", 
            "funcEndAddr": "0x417297L", 
            "funcName": "_obstack_allocated_p"
        }, 
        {
            "decompiledFuncCode": "void obstack_free(struct obstack *obstack, void *block)\n{\n  char *v2; // rbp\n  struct _obstack_chunk *v3; // rsi\n  char *v4; // rax\n  struct _obstack_chunk *v5; // r12\n\n  v2 = (char *)block;\n  v3 = obstack->chunk;\n  if ( v3 )\n  {\n    while ( 1 )\n    {\n      if ( v3 < (struct _obstack_chunk *)v2 )\n      {\n        v4 = v3->limit;\n        if ( v3->limit >= v2 )\n          break;\n      }\n      v5 = v3->prev;\n      sub_417070((__int64)obstack, (__int64)v3);\n      *((_BYTE *)obstack + 80) |= 2u;\n      v3 = v5;\n      if ( !v5 )\n        goto LABEL_5;\n    }\n    obstack->next_free = v2;\n    obstack->object_base = v2;\n    obstack->chunk_limit = v4;\n    obstack->chunk = v3;\n  }\n  else\n  {\nLABEL_5:\n    if ( v2 )\n      abort();\n  }\n}\n\nvoid obstack_free(struct obstack *obstack, void *block)\n{\n  char *v2; // rbp\n  struct _obstack_chunk *v3; // rsi\n  char *v4; // rax\n  struct _obstack_chunk *v5; // r12\n\n  v2 = (char *)block;\n  v3 = obstack->chunk;\n  if ( v3 )\n  {\n    while ( 1 )\n    {\n      if ( v3 < (struct _obstack_chunk *)v2 )\n      {\n        v4 = v3->limit;\n        if ( v3->limit >= v2 )\n          break;\n      }\n      v5 = v3->prev;\n      sub_417070((__int64)obstack, (__int64)v3);\n      *((_BYTE *)obstack + 80) |= 2u;\n      v3 = v5;\n      if ( !v5 )\n        goto LABEL_5;\n    }\n    obstack->next_free = v2;\n    obstack->object_base = v2;\n    obstack->chunk_limit = v4;\n    obstack->chunk = v3;\n  }\n  else\n  {\nLABEL_5:\n    if ( v2 )\n      abort();\n  }\n}\n", 
            "funcStartAddr": "0x402e87L", 
            "funcEndAddr": "0x402e8cL", 
            "funcName": "_obstack_free"
        }, 
        {
            "decompiledFuncCode": "void obstack_free(struct obstack *obstack, void *block)\n{\n  char *v2; // rbp\n  struct _obstack_chunk *v3; // rsi\n  char *v4; // rax\n  struct _obstack_chunk *v5; // r12\n\n  v2 = (char *)block;\n  v3 = obstack->chunk;\n  if ( v3 )\n  {\n    while ( 1 )\n    {\n      if ( v3 < (struct _obstack_chunk *)v2 )\n      {\n        v4 = v3->limit;\n        if ( v3->limit >= v2 )\n          break;\n      }\n      v5 = v3->prev;\n      sub_417070((__int64)obstack, (__int64)v3);\n      *((_BYTE *)obstack + 80) |= 2u;\n      v3 = v5;\n      if ( !v5 )\n        goto LABEL_5;\n    }\n    obstack->next_free = v2;\n    obstack->object_base = v2;\n    obstack->chunk_limit = v4;\n    obstack->chunk = v3;\n  }\n  else\n  {\nLABEL_5:\n    if ( v2 )\n      abort();\n  }\n}\n\nvoid obstack_free(struct obstack *obstack, void *block)\n{\n  char *v2; // rbp\n  struct _obstack_chunk *v3; // rsi\n  char *v4; // rax\n  struct _obstack_chunk *v5; // r12\n\n  v2 = (char *)block;\n  v3 = obstack->chunk;\n  if ( v3 )\n  {\n    while ( 1 )\n    {\n      if ( v3 < (struct _obstack_chunk *)v2 )\n      {\n        v4 = v3->limit;\n        if ( v3->limit >= v2 )\n          break;\n      }\n      v5 = v3->prev;\n      sub_417070((__int64)obstack, (__int64)v3);\n      *((_BYTE *)obstack + 80) |= 2u;\n      v3 = v5;\n      if ( !v5 )\n        goto LABEL_5;\n    }\n    obstack->next_free = v2;\n    obstack->object_base = v2;\n    obstack->chunk_limit = v4;\n    obstack->chunk = v3;\n  }\n  else\n  {\nLABEL_5:\n    if ( v2 )\n      abort();\n  }\n}\n", 
            "funcStartAddr": "0x402e87L", 
            "funcEndAddr": "0x402e8cL", 
            "funcName": "_obstack_free"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall obstack_memory_used(__int64 a1)\n{\n  _QWORD *v1; // rdx\n  __int64 result; // rax\n  __int64 v3; // rcx\n\n  v1 = *(_QWORD **)(a1 + 8);\n  for ( result = 0LL; v1; result += v3 )\n  {\n    v3 = *v1 - (_QWORD)v1;\n    v1 = (_QWORD *)v1[1];\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x417310L", 
            "funcEndAddr": "0x417339L", 
            "funcName": "_obstack_memory_used"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_417340(__int64 a1)\n{\n  int v1; // eax\n  unsigned int v2; // edx\n\n  if ( *(_BYTE *)(a1 + 8) )\n    v1 = setenv(\"TZ\", (const char *)(a1 + 9), 1);\n  else\n    v1 = unsetenv(\"TZ\");\n  v2 = 0;\n  if ( !v1 )\n  {\n    tzset();\n    v2 = 1;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x417340L", 
            "funcEndAddr": "0x417385L", 
            "funcName": "sub_417340"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_417390(_QWORD *a1)\n{\n  _QWORD *v1; // rbx\n\n  if ( a1 )\n  {\n    do\n    {\n      v1 = (_QWORD *)*a1;\n      free(a1);\n      a1 = v1;\n    }\n    while ( v1 );\n  }\n}\n", 
            "funcStartAddr": "0x417390L", 
            "funcEndAddr": "0x4173b9L", 
            "funcName": "sub_417390"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4173C0(_QWORD *a1)\n{\n  int *v1; // rbx\n  int v2; // er13\n  unsigned int v3; // ebp\n\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = sub_417340((__int64)a1);\n  if ( !(_BYTE)v3 )\n    v2 = *v1;\n  sub_417390(a1);\n  *v1 = v2;\n  return v3;\n}\n", 
            "funcStartAddr": "0x4173c0L", 
            "funcEndAddr": "0x417401L", 
            "funcName": "sub_4173C0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_417410(void *src)\n{\n  void *v1; // r12\n  size_t v2; // rax\n  __int64 v3; // rdi\n  size_t v4; // rbp\n  char *v5; // rax\n  _BYTE *v6; // rbx\n  _QWORD *result; // rax\n\n  if ( src )\n  {\n    v1 = src;\n    v2 = strlen((const char *)src);\n    v3 = 118LL;\n    v4 = v2 + 1;\n    if ( v2 + 1 >= 0x76 )\n      v3 = v2 + 1;\n    v5 = (char *)malloc((v3 + 17) & 0xFFFFFFFFFFFFFFF8LL);\n    v6 = v5;\n    if ( v5 )\n    {\n      *(_QWORD *)v5 = 0LL;\n      *((_WORD *)v5 + 4) = 1;\n      memcpy(v5 + 9, v1, v4);\n      v6[v4 + 9] = 0;\n    }\n    return v6;\n  }\n  result = malloc(0x80uLL);\n  v6 = result;\n  if ( !result )\n    return v6;\n  *result = 0LL;\n  *((_WORD *)result + 4) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x417410L", 
            "funcEndAddr": "0x41749fL", 
            "funcName": "sub_417410"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4174A0(__int64 *a1, unsigned __int64 a2)\n{\n  char *v2; // r12\n  __int64 *v3; // rbp\n  __int64 result; // rax\n  char *v5; // rbx\n  __int64 v6; // r14\n  __int64 *v7; // rax\n  size_t v8; // r15\n  char *v9; // rax\n  _QWORD *v10; // rax\n\n  v2 = *(char **)(a2 + 48);\n  if ( !v2 )\n    return 1LL;\n  v3 = a1;\n  if ( a2 > (unsigned __int64)v2 || (result = 1LL, (unsigned __int64)v2 >= a2 + 56) )\n  {\n    v5 = (char *)a1 + 9;\n    if ( !*v2 )\n    {\n      v5 = \"\\x1B]8;;\\a\" + 6;\n      goto LABEL_12;\n    }\nLABEL_5:\n    if ( !strcmp(v5, v2) )\n      goto LABEL_12;\n    while ( 1 )\n    {\n      if ( !*v5 )\n      {\n        v6 = (__int64)v3 + 9;\n        if ( (char *)v3 + 9 != v5 )\n        {\n          v8 = strlen(v2) + 1;\n          v9 = &v5[-v6];\n          if ( ~(unsigned __int64)&v5[-v6] < v8 )\n          {\n            *__errno_location() = 12;\n            return 0LL;\n          }\nLABEL_19:\n          if ( (unsigned __int64)&v9[v8] <= 0x76 )\n          {\n            memcpy(v5, v2, v8);\n            v5[v8] = 0;\n            goto LABEL_12;\n          }\n          v10 = sub_417410(v2);\n          *v3 = (__int64)v10;\n          if ( !v10 )\n            return 0LL;\n          *((_BYTE *)v10 + 8) = 0;\n          v5 = (char *)v10 + 9;\nLABEL_12:\n          *(_QWORD *)(a2 + 48) = v5;\n          return 1LL;\n        }\n        if ( !*((_BYTE *)v3 + 8) )\n        {\n          v8 = strlen(v2) + 1;\n          v9 = 0LL;\n          goto LABEL_19;\n        }\n      }\n      v5 += strlen(v5) + 1;\n      if ( *v5 )\n        goto LABEL_5;\n      v7 = (__int64 *)*v3;\n      if ( !*v3 )\n        goto LABEL_5;\n      v5 = (char *)v7 + 9;\n      v3 = (__int64 *)*v3;\n      if ( !strcmp((const char *)v7 + 9, v2) )\n        goto LABEL_12;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4174a0L", 
            "funcEndAddr": "0x417615L", 
            "funcName": "sub_4174A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_417620(__int64 a1)\n{\n  char *v1; // rax\n  char *v2; // rbp\n  _QWORD *v3; // rbx\n  int *v5; // rbp\n  int v6; // er12\n\n  v1 = getenv(\"TZ\");\n  v2 = v1;\n  if ( v1 )\n  {\n    if ( *(_BYTE *)(a1 + 8) && !strcmp((const char *)(a1 + 9), v1) )\n      return 1LL;\n  }\n  else if ( !*(_BYTE *)(a1 + 8) )\n  {\n    return 1LL;\n  }\n  v3 = sub_417410(v2);\n  if ( !v3 || (unsigned __int8)sub_417340(a1) )\n    return (__int64)v3;\n  v5 = __errno_location();\n  v6 = *v5;\n  if ( v3 != (_QWORD *)1 )\n    sub_417390(v3);\n  *v5 = v6;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x417620L", 
            "funcEndAddr": "0x4176cfL", 
            "funcName": "sub_417620"
        }, 
        {
            "decompiledFuncCode": "struct tm *__fastcall sub_4176F0(__int64 *a1, const time_t *a2, struct tm *a3)\n{\n  struct tm *v3; // rbx\n  _QWORD *v4; // r13\n\n  if ( !a1 )\n    return gmtime_r(a2, a3);\n  v3 = a3;\n  v4 = (_QWORD *)sub_417620((__int64)a1);\n  if ( v4 )\n  {\n    if ( localtime_r(a2, v3) && (unsigned __int8)sub_4174A0(a1, (unsigned __int64)v3) )\n    {\n      if ( v4 == (_QWORD *)1 || (unsigned __int8)sub_4173C0(v4) )\n        return v3;\n    }\n    else if ( v4 != (_QWORD *)1 )\n    {\n      sub_4173C0(v4);\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4176f0L", 
            "funcEndAddr": "0x417795L", 
            "funcName": "sub_4176F0"
        }, 
        {
            "decompiledFuncCode": "time_t __fastcall sub_4177A0(__int64 *a1, _DWORD *a2)\n{\n  _QWORD *v2; // r12\n  time_t result; // rax\n  int v4; // eax\n  time_t timer; // [rsp+8h] [rbp-60h]\n  struct tm tp; // [rsp+10h] [rbp-58h]\n\n  if ( !a1 )\n    return sub_4178C0(a2);\n  v2 = (_QWORD *)sub_417620((__int64)a1);\n  if ( !v2 )\n    goto LABEL_20;\n  timer = sub_4186F0(a2);\n  if ( timer != -1\n    || localtime_r(&timer, &tp)\n    && ((v4 = a2[8], (v4 == 0) == (tp.tm_isdst == 0)) || v4 < 0 || tp.tm_isdst < 0)\n    && !(tp.tm_sec ^ *a2 | tp.tm_min ^ a2[1] | tp.tm_hour ^ a2[2] | tp.tm_mday ^ a2[3] | tp.tm_year ^ a2[5] | tp.tm_mon ^ a2[4]) )\n  {\n    if ( !(unsigned __int8)sub_4174A0(a1, (unsigned __int64)a2) )\n      timer = -1LL;\n  }\n  if ( v2 == (_QWORD *)1 || (unsigned __int8)sub_4173C0(v2) )\n    result = timer;\n  else\nLABEL_20:\n    result = -1LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4177a0L", 
            "funcEndAddr": "0x4178bcL", 
            "funcName": "sub_4177A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4178C0(__int64 a1)\n{\n  *(_DWORD *)(a1 + 32) = 0;\n  return sub_4182B0(a1, gmtime_r, &unk_625958);\n}\n", 
            "funcStartAddr": "0x4178c0L", 
            "funcEndAddr": "0x4178d6L", 
            "funcName": "sub_4178C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4178E0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_417F10(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  else\n  {\n    if ( !(_DWORD)result )\n      return result;\n    if ( !v1 )\n      return (unsigned int)-(*__errno_location() != 9);\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x4178e0L", 
            "funcEndAddr": "0x41793dL", 
            "funcName": "sub_4178E0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_417940(void *a1)\n{\n  _BYTE *result; // rax\n\n  result = sub_40B810(a1);\n  if ( !result )\n    sub_412BD0();\n  return result;\n}\n", 
            "funcStartAddr": "0x417940L", 
            "funcEndAddr": "0x417958L", 
            "funcName": "sub_417940"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_417960(char *a1, unsigned __int64 a2)\n{\n  __int64 v2; // rcx\n  unsigned __int64 v3; // rax\n\n  v2 = *a1;\n  if ( !(_BYTE)v2 )\n    return 0LL;\n  v3 = 0LL;\n  do\n  {\n    ++a1;\n    v3 = v2 + __ROL8__(v3, 9);\n    v2 = *a1;\n  }\n  while ( (_BYTE)v2 );\n  return v3 % a2;\n}\n", 
            "funcStartAddr": "0x417960L", 
            "funcEndAddr": "0x417996L", 
            "funcName": "sub_417960"
        }, 
        {
            "decompiledFuncCode": "const char *sub_4179A0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"\\x1B]8;;\\a\" + 6;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"\\x1B]8;;\\a\" + 6;\n                v2 = v58;\n                free(v59);\n                sub_417F10(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_417F10(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"\\x1B]8;;\\a\" + 6;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x4179a0L", 
            "funcEndAddr": "0x417f02L", 
            "funcName": "sub_4179A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_417F10(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_417F90(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x417f10L", 
            "funcEndAddr": "0x417f8bL", 
            "funcName": "sub_417F10"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_417F90(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_417FD0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x417f90L", 
            "funcEndAddr": "0x417fd0L", 
            "funcName": "sub_417F90"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_417FD0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x417fd0L", 
            "funcEndAddr": "0x418027L", 
            "funcName": "sub_417FD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_418030(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)\n{\n  int v10; // er10\n  int v11; // er12\n\n  v10 = (unsigned __int64)(a1 >> 2) + 475 - ((a1 & 3) == 0);\n  v11 = (a6 >> 2) + 475 - ((a6 & 3) == 0);\n  return a5\n       + 60\n       * (a4\n        + 60\n        * (a3\n         + 24\n         * ((int)(v10\n                - v11\n                - (v10 / 25\n                 - ((unsigned int)(v10 % 25) >> 31)\n                 - (v11 / 25\n                  - ((unsigned int)(v11 % 25) >> 31)))\n                + ((int)(v10 / 25 - ((unsigned int)(v10 % 25) >> 31)) >> 2)\n                - ((int)(v11 / 25 - ((unsigned int)(v11 % 25) >> 31)) >> 2))\n          + 365 * (a1 - a6)\n          + a2\n          - a7)\n         - a8)\n        - a9)\n       - a10;\n}\n", 
            "funcStartAddr": "0x418030L", 
            "funcEndAddr": "0x418147L", 
            "funcName": "sub_418030"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_418150(__int64 a1, __int64 a2, int a3, int a4, int a5, __int64 a6, int *a7)\n{\n  __int64 v7; // rbx\n  __int64 v8; // rax\n  bool v9; // of\n  __int64 result; // rax\n\n  v7 = a6;\n  if ( !a7\n    || (v8 = sub_418030(a1, a2, a3, a4, a5, a7[5], a7[7], a7[2], a7[1], *a7),\n        v9 = __OFADD__(v7, v8),\n        result = v7 + v8,\n        v9) )\n  {\n    if ( v7 < 0 )\n    {\n      if ( v7 >= -9223372036854775806LL )\n        result = 0x8000000000000000LL;\n      else\n        result = v7 + 1;\n    }\n    else\n    {\n      result = 0x7FFFFFFFFFFFFFFFLL;\n      if ( v7 > 9223372036854775805LL )\n        result = v7 - 1;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x418150L", 
            "funcEndAddr": "0x4181e1L", 
            "funcName": "sub_418150"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4181F0(__int64 (__fastcall *a1)(__int64 *, __int64), __int64 *a2, __int64 a3)\n{\n  __int64 v3; // r13\n  __int64 result; // rax\n  __int64 v5; // r14\n  __int64 v6; // rbp\n  __int64 v7; // rdx\n  __int64 v8; // rbx\n  __int64 v9; // [rsp+8h] [rbp-30h]\n\n  v3 = a3;\n  v9 = *a2;\n  result = a1(&v9, a3);\n  if ( !result )\n  {\n    v5 = *a2;\n    v6 = 0LL;\n    if ( *a2 )\n    {\n      while ( 1 )\n      {\n        v7 = (v6 >> 1) + (v5 >> 1);\n        v8 = v7 + (((unsigned __int8)v5 | (unsigned __int8)v6) & 1);\n        if ( v6 != v8 && v5 != v8 )\n          break;\n        v9 = v7 + (((unsigned __int8)v5 | (unsigned __int8)v6) & 1);\n        result = a1(&v9, v3);\n        if ( !result )\n        {\n          v5 = v8;\n          v8 = v6;\n        }\n        v6 = v8;\n      }\n      if ( !result && v6 )\n      {\n        v9 = v6;\n        result = a1(&v9, v3);\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4181f0L", 
            "funcEndAddr": "0x4182afL", 
            "funcName": "sub_4181F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4182B0(int *a1, __int64 (__fastcall *a2)(__int64 *, __int64), _QWORD *a3)\n{\n  int *v3; // r14\n  __int64 v4; // rsi\n  int v5; // eax\n  int v6; // edi\n  _BOOL4 v7; // edx\n  __int64 v8; // rbx\n  int v9; // er12\n  int v10; // ebp\n  __int64 v11; // rsi\n  int v12; // eax\n  __int64 v13; // r13\n  int v14; // er12\n  __int64 v15; // r14\n  int *v16; // rax\n  __int64 v17; // r15\n  __int64 result; // rax\n  bool v19; // dl\n  __m128i *v20; // r14\n  int v21; // esi\n  __int64 v22; // rdx\n  bool v23; // of\n  __int64 v24; // rax\n  __m128i v25; // xmm1\n  __m128i v26; // xmm2\n  __int64 v27; // rdx\n  int i; // er13\n  int v29; // er12\n  int v30; // er15\n  int v31; // [rsp+Ch] [rbp-10Ch]\n  __int64 (__fastcall *v32)(__int64 *, __int64); // [rsp+10h] [rbp-108h]\n  int v33; // [rsp+18h] [rbp-100h]\n  int v34; // [rsp+1Ch] [rbp-FCh]\n  int v35; // [rsp+28h] [rbp-F0h]\n  _QWORD *v36; // [rsp+30h] [rbp-E8h]\n  __int64 v37; // [rsp+38h] [rbp-E0h]\n  int v38; // [rsp+40h] [rbp-D8h]\n  int v39; // [rsp+44h] [rbp-D4h]\n  __m128i *v40; // [rsp+48h] [rbp-D0h]\n  __int64 v41; // [rsp+50h] [rbp-C8h]\n  __int64 v42; // [rsp+58h] [rbp-C0h]\n  __int128 v43; // [rsp+60h] [rbp-B8h]\n  __int128 v44; // [rsp+70h] [rbp-A8h]\n  __int128 v45; // [rsp+80h] [rbp-98h]\n  __int64 v46; // [rsp+90h] [rbp-88h]\n  __int64 v47; // [rsp+A0h] [rbp-78h]\n  int v48; // [rsp+C0h] [rbp-58h]\n\n  v3 = a1;\n  v32 = a2;\n  v4 = a1[3];\n  v38 = *a1;\n  v36 = a3;\n  v31 = a1[1];\n  v5 = a1[2];\n  v6 = a1[4];\n  v33 = v5;\n  v35 = v3[8];\n  v7 = 0;\n  v8 = v3[5] + (__int64)(int)(v6 / 12 - ((unsigned int)(v6 % 12) >> 31));\n  if ( !(v8 & 3) )\n  {\n    v7 = 1;\n    if ( v8 == 100 * (v8 / 100) )\n      v7 = ((v8 / 100) & 3) == 1;\n  }\n  v9 = 59;\n  v10 = 6;\n  v11 = (unsigned __int16)word_41FD60[13LL * v7 + (((v6 % 12) >> 31) & 0xC) + v6 % 12] - 1 + v4;\n  if ( v38 <= 59 )\n    v9 = v38;\n  v12 = 0;\n  if ( v9 >= 0 )\n    v12 = v9;\n  v34 = v12;\n  v39 = -(int)*v36;\n  v13 = sub_418030(v8, v11, v33, v31, v12, 70, 0, 0, 0, v39);\n  v37 = v13;\n  v41 = v13;\n  v40 = (__m128i *)v3;\n  v14 = 0;\n  v15 = v13;\n  while ( 1 )\n  {\n    v16 = (int *)sub_4181F0(v32, &v41, (__int64)&v43);\n    v17 = v41;\n    result = sub_418150(v8, v11, v33, v31, v34, v41, v16);\n    if ( v17 == result )\n      break;\n    if ( v17 == v13 && v17 != v15 )\n    {\n      if ( (int)v45 < 0 )\n        goto LABEL_17;\n      v19 = (_DWORD)v45 != 0;\n      if ( v35 < 0 )\n      {\n        if ( v19 >= v14 )\n        {\nLABEL_17:\n          v20 = v40;\n          result = v17;\n          goto LABEL_18;\n        }\n      }\n      else if ( (v35 != 0) != v19 )\n      {\n        goto LABEL_17;\n      }\n    }\n    if ( !--v10 )\n      return -1LL;\n    v41 = result;\n    v13 = v15;\n    v15 = v17;\n    v14 = v45 != 0;\n  }\n  v20 = v40;\n  if ( (v35 == 0) != ((_DWORD)v45 == 0) && v35 >= 0 && (int)v45 >= 0 )\n  {\n    for ( i = 601200; i != 269337600; i += 601200 )\n    {\n      v29 = 2;\n      v30 = -i;\n      v42 = result + -i;\n      if ( !__OFADD__(result, -i) )\n      {\nLABEL_35:\n        sub_4181F0(v32, &v42, (__int64)&v47);\n        if ( (v35 == 0) == (v48 == 0) || v48 < 0 )\n        {\n          v41 = sub_418150(v8, v11, v33, v31, v34, v42, (int *)&v47);\n          sub_4181F0(v32, &v41, (__int64)&v43);\n          result = v41;\n          break;\n        }\n        result = v41;\n      }\n      while ( 1 )\n      {\n        v30 += 2 * i;\n        if ( v29 == 1 )\n          break;\n        v29 = 1;\n        v42 = result + v30;\n        if ( !__OFADD__(result, v30) )\n          goto LABEL_35;\n      }\n    }\n  }\nLABEL_18:\n  v21 = v43;\n  *v36 = result - (v37 + v39);\n  if ( v21 == v38 )\n    goto LABEL_22;\n  v22 = ((v38 <= 0) & (unsigned __int8)(v21 == 60)) - (__int64)v34 + v38;\n  v23 = __OFADD__(v22, result);\n  v24 = v22 + result;\n  v41 = v24;\n  if ( !v23 )\n  {\n    v47 = v24;\n    if ( v32(&v47, (__int64)&v43) )\n    {\n      result = v41;\nLABEL_22:\n      v25 = _mm_load_si128((const __m128i *)&v44);\n      v26 = _mm_load_si128((const __m128i *)&v45);\n      v27 = v46;\n      *v20 = _mm_load_si128((const __m128i *)&v43);\n      v20[1] = v25;\n      v20[2] = v26;\n      v20[3].m128i_i64[0] = v27;\n      return result;\n    }\n  }\n  return -1LL;\n}\n", 
            "funcStartAddr": "0x4182b0L", 
            "funcEndAddr": "0x4186eaL", 
            "funcName": "sub_4182B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4186F0(int *a1)\n{\n  tzset();\n  return sub_4182B0(a1, (__int64 (__fastcall *)(__int64 *, __int64))localtime_r, &unk_625968);\n}\n", 
            "funcStartAddr": "0x4186f0L", 
            "funcEndAddr": "0x41870cL", 
            "funcName": "sub_4186F0"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x418710L", 
            "funcEndAddr": "0x41876dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x418770L", 
            "funcEndAddr": "0x418771L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_418780(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_6243E8 )\n    v1 = (void *)unk_6243E8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x418780L", 
            "funcEndAddr": "0x418798L", 
            "funcName": "sub_418780"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_418798(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_623E30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x418798L", 
            "funcEndAddr": "0x4187b8L", 
            "funcName": "sub_418798"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_ls.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 266, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}