{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __usercall main@<rax>(char **a1@<rsi>, char **a2@<rdx>, int a3@<edi>, __int64 a4@<r13>)\n{\n  int v4; // er12\n  unsigned __int64 v5; // rbp\n  const char *v6; // rbx\n  int i; // er15\n  char *v8; // rax\n  int v9; // eax\n  int v10; // eax\n  __int64 v11; // rdx\n  __int64 v12; // rax\n  __int64 v13; // rcx\n  char v14; // cl\n  __int64 v15; // r14\n  const char *v16; // rdi\n  char *v17; // rsi\n  __int64 v18; // rcx\n  __int64 v19; // r8\n  __int64 v20; // r9\n  unsigned __int64 v21; // rdx\n  bool v22; // r12\n  __int64 v23; // rbp\n  unsigned __int64 v24; // rdx\n  void *v25; // rdi\n  const char *v26; // rsi\n  long double v27; // kr10_16\n  int v28; // eax\n  FILE *v29; // rsi\n  const char *v30; // rdi\n  int v31; // eax\n  size_t v32; // r13\n  size_t v33; // r15\n  size_t v34; // r13\n  int v35; // eax\n  __int64 v36; // rdi\n  __int64 v37; // rax\n  char v38; // al\n  void *v39; // rax\n  const char *v40; // rax\n  __int64 v41; // rsi\n  int v42; // ecx\n  unsigned int v43; // er9\n  char *v44; // rax\n  __int64 v45; // rsi\n  __int64 v46; // rdi\n  bool v47; // zf\n  __int64 v48; // rsi\n  char *v50; // rax\n  const char *v51; // rsi\n  __int64 v52; // rbx\n  char *v53; // rax\n  int v54; // eax\n  __int64 v55; // rbx\n  char *v56; // rax\n  char *v57; // rax\n  int v58; // eax\n  void *v59; // rax\n  void *v60; // rdi\n  char *v61; // rax\n  __int64 v62; // rbx\n  char *v63; // rax\n  char *v64; // rax\n  __int64 v65; // [rsp-10h] [rbp-108h]\n  __int64 v66; // [rsp-8h] [rbp-100h]\n  unsigned int v67; // [rsp+0h] [rbp-F8h]\n  long double v68; // [rsp+0h] [rbp-F8h]\n  __int64 v69; // [rsp+0h] [rbp-F8h]\n  unsigned int v70; // [rsp+0h] [rbp-F8h]\n  unsigned __int64 v71; // [rsp+0h] [rbp-F8h]\n  unsigned __int64 v72; // [rsp+0h] [rbp-F8h]\n  unsigned __int64 v73; // [rsp+0h] [rbp-F8h]\n  __int64 v74; // [rsp+10h] [rbp-E8h]\n  long double v75; // [rsp+10h] [rbp-E8h]\n  unsigned int v76; // [rsp+10h] [rbp-E8h]\n  const char *v77; // [rsp+10h] [rbp-E8h]\n  unsigned __int64 v78; // [rsp+10h] [rbp-E8h]\n  char *v79; // [rsp+20h] [rbp-D8h]\n  long double v80; // [rsp+20h] [rbp-D8h]\n  const char *v81; // [rsp+20h] [rbp-D8h]\n  const char *v82; // [rsp+30h] [rbp-C8h]\n  long double v83; // [rsp+30h] [rbp-C8h]\n  long double v84; // [rsp+40h] [rbp-B8h]\n  long double v85; // [rsp+60h] [rbp-98h]\n  void *ptr; // [rsp+70h] [rbp-88h]\n  void *v87; // [rsp+78h] [rbp-80h]\n  char *s2; // [rsp+80h] [rbp-78h]\n  char *s1; // [rsp+88h] [rbp-70h]\n  _TBYTE v90; // [rsp+90h] [rbp-68h]\n  _TBYTE v91; // [rsp+A0h] [rbp-58h]\n  unsigned __int64 v92; // [rsp+B0h] [rbp-48h]\n  unsigned int v93; // [rsp+B8h] [rbp-40h]\n\n  v4 = a3;\n  v5 = (unsigned __int64)a1;\n  v6 = 0LL;\n  sub_403220(*a1);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_409880(sub_403180);\n  byte_60D2E8 = 0;\n  s = \"\\n\";\nLABEL_2:\n  for ( i = dword_60D27C; dword_60D27C < a3; s = (char *)qword_60D4A0 )\n  {\n    v8 = a1[i];\n    if ( *v8 == 45 )\n    {\n      v9 = v8[1];\n      if ( (_BYTE)v9 == 46 || (unsigned int)(v9 - 48) <= 9 )\n        break;\n    }\n    v10 = sub_406510((unsigned int)a3, a1, \"+f:s:w\", &off_40A1E0, 0LL);\n    if ( v10 == -1 )\n    {\n      i = dword_60D27C;\n      break;\n    }\n    if ( v10 == 102 )\n    {\n      v6 = (const char *)qword_60D4A0;\n      goto LABEL_2;\n    }\n    if ( v10 <= 102 )\n    {\n      if ( v10 == -131 )\n      {\n        sub_4052C0((char)stdout);\n        exit(0);\n      }\n      if ( v10 == -130 )\n        sub_402A40(0);\n      goto LABEL_120;\n    }\n    if ( v10 != 115 )\n    {\n      if ( v10 != 119 )\n        goto LABEL_120;\n      byte_60D2E8 = 1;\n      goto LABEL_2;\n    }\n    i = dword_60D27C;\n  }\n  v67 = a3 - i;\n  if ( a3 == i )\n    goto LABEL_124;\n  if ( v67 > 3 )\n  {\n    v51 = \"extra operand %s\";\n    v52 = sub_404E40(*(_QWORD *)(v5 + 8LL * i + 24));\nLABEL_119:\n    v53 = dcgettext(0LL, v51, 5);\n    error(0, 0, v53, v52);\n    goto LABEL_120;\n  }\n  if ( v6 )\n  {\n    v11 = 1LL;\n    v12 = 0LL;\n    while ( 1 )\n    {\n      v14 = v6[v12];\n      v15 = v11 - 1;\n      if ( v14 == 37 )\n      {\n        a4 = v12 + 1;\n        v16 = &v6[v12 + 1];\n        if ( *v16 != 37 )\n        {\n          v32 = strspn(v16, \"-+#0 '\") + a4;\n          v33 = v32 + strspn(&v6[v32], \"0123456789\");\n          if ( v6[v33] == 46 )\n            v33 += strspn(&v6[v33 + 1], \"0123456789\") + 1;\n          v34 = v33 + (v6[v33] == 76);\n          v81 = &v6[v34];\n          v35 = v6[v34];\n          if ( v6[v34] )\n          {\n            v76 = v6[v34];\n            v36 = v34 + 1;\n            a4 = 0LL;\n            if ( strchr(\"efgaEFGA\", v35) )\n            {\n              while ( 1 )\n              {\n                v38 = v6[v36];\n                if ( v38 == 37 )\n                {\n                  if ( v6[v36 + 1] != 37 )\n                  {\n                    v55 = sub_404E40(v6);\n                    v56 = dcgettext(0LL, \"format %s has too many %% directives\", 5);\n                    error(1, 0, v56, v55);\nLABEL_124:\n                    v57 = dcgettext(0LL, \"missing operand\", 5);\n                    error(0, 0, v57);\nLABEL_120:\n                    sub_402A40(1);\n                  }\n                  v37 = 2LL;\n                }\n                else\n                {\n                  if ( !v38 )\n                  {\n                    v39 = (void *)sub_405400(v36 + 2);\n                    v40 = (const char *)memcpy(v39, v6, v33);\n                    v40[v33] = 76;\n                    v77 = v40;\n                    strcpy((char *)&v40[v33 + 1], v81);\n                    if ( !byte_60D2E8 )\n                    {\n                      i = dword_60D27C;\n                      v6 = v77;\n                      goto LABEL_30;\n                    }\nLABEL_135:\n                    v64 = dcgettext(0LL, \"format string may not be specified when printing equal width strings\", 5);\n                    error(0, 0, v64);\n                    sub_402A40(1);\n                  }\n                  v37 = 1LL;\n                }\n                v36 += v37;\n                ++a4;\n              }\n            }\n            v6 = (const char *)sub_404E40(v6);\n            v61 = dcgettext(0LL, \"format %s has unknown %%%c directive\", 5);\n            error(1, 0, v61, v6, v76);\n          }\n          v62 = sub_404E40(v6);\n          v63 = dcgettext(0LL, \"format %s ends in %%\", 5);\n          error(1, 0, v63, v62);\n          goto LABEL_135;\n        }\n        v13 = 2LL;\n      }\n      else\n      {\n        if ( !v14 )\n          goto LABEL_116;\n        v13 = 1LL;\n      }\n      v12 += v13;\n      ++v11;\n    }\n  }\n  a4 = 0LL;\n  v15 = 0LL;\nLABEL_30:\n  v74 = i;\n  v79 = a1[i];\n  if ( (unsigned __int8)sub_402600(a1[i]) )\n  {\n    if ( v67 == 1\n      || (v82 = a1[v74 + 1], (unsigned __int8)sub_402600(a1[v74 + 1]))\n      && (v67 != 3 || !strcmp(\"1\", v82) && (unsigned __int8)sub_402600(a1[v74 + 2])) )\n    {\n      if ( byte_60D2E8 != 1 && !v6 && ~(strlen(s) + 1) == -3LL )\n      {\n        v44 = \"1\";\n        if ( v67 != 1 )\n          v44 = v79;\n        if ( (unsigned __int8)sub_402680(v44) )\n          return 0LL;\n        i = dword_60D27C;\n      }\n    }\n  }\n  v17 = a1[i];\n  dword_60D27C = i + 1;\n  sub_402DC0(&v91, v17);\n  i = v93;\n  v84 = *(long double *)&v91;\n  if ( dword_60D27C < v4 )\n  {\n    v41 = *(_QWORD *)(v5 + 8LL * dword_60D27C);\n    v69 = v92;\n    ++dword_60D27C;\n    sub_402DC0(&v91, v41);\n    v42 = dword_60D27C;\n    v43 = v93;\n    v21 = v69;\n    v85 = *(long double *)&v91;\n    if ( dword_60D27C >= v4 )\n    {\n      v5 = v92;\n      v18 = v93;\n      v20 = 0LL;\n      v83 = *(long double *)&v91;\n      v85 = 1.0;\n      goto LABEL_73;\n    }\n    v45 = dword_60D27C;\n    v46 = 8LL * dword_60D27C;\n    v47 = *(long double *)&v91 == 0.0;\n    goto LABEL_117;\n  }\n  if ( !v93 )\n  {\n    v5 = v92;\n    v21 = 1LL;\n    v83 = *(long double *)&v91;\n    v85 = 1.0;\n    v84 = 1.0;\n    goto LABEL_100;\n  }\n  v18 = v93;\n  v5 = v92;\n  v20 = 0LL;\n  i = 0;\n  v21 = 1LL;\n  v83 = *(long double *)&v91;\n  v85 = 1.0;\n  v84 = 1.0;\n  while ( 2 )\n  {\n    if ( !v6 )\n    {\n      if ( i >= (int)v20 )\n        v20 = (unsigned int)i;\n      if ( (_DWORD)v18 != 0x7FFFFFFF && (_DWORD)v20 != 0x7FFFFFFF )\n      {\nLABEL_79:\n        if ( byte_60D2E8 )\n        {\n          v21 += (int)v20 - i;\n          v5 += (int)v20 - (int)v18;\n          if ( !(_DWORD)v20 && (_DWORD)v18 )\n          {\n            --v5;\n          }\n          else\n          {\n            if ( !(_DWORD)v18 )\n              v5 -= ((_DWORD)v20 == 0) - 1LL;\n            if ( !i )\n              v21 -= ((_DWORD)v20 == 0) - 1LL;\n          }\n          v6 = \"%Lg\";\n          if ( v5 < v21 )\n            v5 = v21;\n          if ( v5 <= 0x7FFFFFFF )\n          {\n            v6 = (const char *)&unk_60D2C0;\n            __sprintf_chk(&unk_60D2C0, 1LL, 28LL, \"%%0%d.%dLf\", (unsigned int)v5);\n          }\n        }\n        else\n        {\nLABEL_104:\n          v6 = (const char *)&unk_60D2C0;\n          __sprintf_chk(&unk_60D2C0, 1LL, 28LL, \"%%.%dLf\", (unsigned int)v20);\n        }\n      }\n      else\n      {\n        v6 = \"%Lg\";\n      }\n    }\nLABEL_40:\n    if ( v85 < 0.0 )\n      v22 = v83 > v84;\n    else\n      v22 = v84 > v83;\n    if ( v22 )\n      return 0LL;\n    v80 = v84;\n    v75 = 1.0;\n    while ( 1 )\n    {\n      v29 = (FILE *)v6;\n      v30 = (const char *)1;\n      v31 = __printf_chk(1LL, v6, v21, v18, v19, v20, *(_QWORD *)&v80, *((_QWORD *)&v80 + 1));\n      v20 = v66;\n      v19 = v65;\n      if ( v31 < 0 )\n        goto LABEL_115;\n      if ( v22 )\n        goto LABEL_106;\n      v68 = v75 * v85 + v84;\n      v22 = v85 >= 0.0 ? v68 > v83 : v83 > v68;\n      if ( v22 )\n        break;\nLABEL_51:\n      v29 = stdout;\n      v30 = s;\n      if ( fputs_unlocked(s, stdout) == -1 )\n        goto LABEL_115;\n      v75 = v75 + 1.0;\n      v80 = v68;\n    }\n    setlocale(1, \"C\");\n    v23 = (int)sub_405730((unsigned __int64)&s2);\n    setlocale(1, \"\");\n    v27 = v75 * v85 + v84;\n    v25 = (void *)*((_QWORD *)&v27 + 1);\n    v26 = *(const char **)&v27;\n    if ( (int)v23 < 0 )\n      goto LABEL_122;\n    v5 = v23 - a4;\n    s2[v5] = 0;\n    if ( (unsigned __int8)sub_405690(&s2[v15], 0LL, &v90, sub_4030E0) && *(long double *)&v90 == v83 )\n    {\n      s1 = 0LL;\n      v26 = v6;\n      v25 = &s1;\n      v28 = sub_405730((unsigned __int64)&s1);\n      v24 = *(_QWORD *)&v80;\n      if ( v28 < 0 )\n        goto LABEL_122;\n      v5 = (unsigned __int64)s1;\n      i = strcmp(s1, s2);\n      free((void *)v5);\n      free(s2);\n      if ( !i )\n        goto LABEL_106;\n      goto LABEL_51;\n    }\n    free(s2);\nLABEL_106:\n    v29 = stdout;\n    v30 = \"\\n\";\n    if ( fputs_unlocked(\"\\n\", stdout) == -1 )\n    {\nLABEL_115:\n      sub_402640(v30, v29, v21, v18, v19, v20);\nLABEL_116:\n      v6 = (const char *)sub_404E40(v6);\n      v50 = dcgettext(0LL, \"format %s has no %% directive\", 5);\n      v45 = 0LL;\n      v46 = 1LL;\n      error(1, 0, v50, v6);\nLABEL_117:\n      if ( !v47 )\n      {\n        v48 = *(_QWORD *)(v5 + 8 * v45);\n        v78 = v21;\n        v70 = v43;\n        dword_60D27C = v42 + 1;\n        sub_402DC0(&v91, v48);\n        v21 = v78;\n        v5 = v92;\n        v18 = v93;\n        v20 = v70;\n        v83 = *(long double *)&v91;\nLABEL_73:\n        if ( v84 * 0.0 != 0.0 || i | (unsigned int)v20 | (unsigned int)v18 )\n          continue;\n        v18 = 0LL;\n        if ( v85 != 1.0 || v84 < 0.0 )\n        {\nLABEL_77:\n          if ( v6 )\n            goto LABEL_40;\n          i = 0;\n          v18 = 0LL;\n          v20 = 0LL;\n          goto LABEL_79;\n        }\nLABEL_100:\n        if ( v83 < 0.0 || byte_60D2E8 )\n          goto LABEL_77;\n        if ( v6 )\n          goto LABEL_40;\n        LODWORD(v20) = 0;\n        if ( ~(strlen(s) + 1) == -3LL )\n        {\n          v71 = v21;\n          v26 = \"%0.Lf\";\n          v25 = &ptr;\n          v58 = sub_405730((unsigned __int64)&ptr);\n          v24 = v71;\n          if ( v58 >= 0 )\n          {\n            if ( v83 * 0.0 != 0.0 )\n            {\n              v59 = (void *)sub_405630(\"inf\");\n              v24 = v71;\n              v87 = v59;\nLABEL_129:\n              v60 = ptr;\n              if ( *(_BYTE *)ptr != 45 && *(_BYTE *)v87 != 45 )\n              {\n                v72 = v24;\n                if ( (unsigned __int8)sub_402680(ptr) )\n                  return 0LL;\n                v60 = ptr;\n                v24 = v72;\n              }\n              v73 = v24;\n              i = 0;\n              free(v60);\n              free(v87);\n              v18 = 0LL;\n              v20 = 0LL;\n              v21 = v73;\n              goto LABEL_79;\n            }\n            v26 = \"%0.Lf\";\n            v25 = &v87;\n            v54 = sub_405730((unsigned __int64)&v87);\n            v24 = v71;\n            if ( v54 >= 0 )\n              goto LABEL_129;\n          }\nLABEL_122:\n          sub_405650(v25, v26, v24);\n        }\n        goto LABEL_104;\n      }\n      v51 = \"invalid Zero increment value: %s\";\n      v52 = sub_404E40(*(_QWORD *)(v5 + v46 - 8));\n      goto LABEL_119;\n    }\n    return 0LL;\n  }\n}\n", 
            "funcStartAddr": "0x4019b0L", 
            "funcEndAddr": "0x402517L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x402520L", 
            "funcEndAddr": "0x40254bL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_40254B()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x40254bL", 
            "funcEndAddr": "0x40256aL", 
            "funcName": "sub_40254B"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40256A()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40256aL", 
            "funcEndAddr": "0x4025a1L", 
            "funcName": "sub_40256A"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_4025A1()\n{\n  __int64 *result; // rax\n\n  if ( !byte_60D2A8 )\n  {\n    while ( qword_60D2B0 < (unsigned __int64)(&qword_60CE48 - qword_60CE40 - 1) )\n      ((void (*)(void))qword_60CE40[++qword_60D2B0])();\n    result = sub_40254B();\n    byte_60D2A8 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4025a1L", 
            "funcEndAddr": "0x4025f8L", 
            "funcName": "sub_4025A1"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4025F8()\n{\n  return sub_40256A();\n}\n", 
            "funcStartAddr": "0x4025f8L", 
            "funcEndAddr": "0x4025fdL", 
            "funcName": "sub_4025F8"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_402600(char *s)\n{\n  bool result; // al\n\n  result = 0;\n  if ( (unsigned int)(*s - 48) <= 9 )\n    result = strspn(s, \"0123456789\") == strlen(s);\n  return result;\n}\n", 
            "funcStartAddr": "0x402600L", 
            "funcEndAddr": "0x402637L", 
            "funcName": "sub_402600"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402640()\n{\n  char *v0; // rbx\n  int *v1; // rax\n\n  clearerr_unlocked(stdout);\n  v0 = dcgettext(0LL, \"write error\", 5);\n  v1 = __errno_location();\n  error(1, *v1, v0);\n  return sub_402680((void *)1);\n}\n", 
            "funcStartAddr": "0x402640L", 
            "funcEndAddr": "0x402680L", 
            "funcName": "sub_402640"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402680(void *src, const char *a2)\n{\n  const char *v2; // r15\n  _BOOL4 v3; // er13\n  char v4; // al\n  const char *v5; // r10\n  char v6; // al\n  unsigned __int64 v7; // rbx\n  size_t v8; // rax\n  size_t v9; // r14\n  size_t v10; // rbp\n  unsigned __int64 v11; // rcx\n  __int64 v12; // r12\n  __int64 v13; // rax\n  char *v14; // rax\n  char *v15; // r15\n  __int64 v16; // rax\n  const char *v17; // rax\n  unsigned int v18; // ebx\n  __int64 v20; // rax\n  char *v21; // rax\n  unsigned __int64 v22; // r12\n  __int64 v23; // rax\n  char *v24; // r12\n  char *v25; // rdx\n  bool v26; // r13\n  int v27; // eax\n  char *v28; // r14\n  char *v29; // rax\n  int v30; // edi\n  signed __int64 v31; // r14\n  const char *v32; // [rsp+8h] [rbp-70h]\n  size_t v33; // [rsp+8h] [rbp-70h]\n  __int64 v34; // [rsp+8h] [rbp-70h]\n  size_t v35; // [rsp+10h] [rbp-68h]\n  size_t v36; // [rsp+10h] [rbp-68h]\n  char *ptr; // [rsp+18h] [rbp-60h]\n  __int64 n; // [rsp+20h] [rbp-58h]\n  void *na; // [rsp+20h] [rbp-58h]\n  const char *srca; // [rsp+28h] [rbp-50h]\n  const char *srcb; // [rsp+28h] [rbp-50h]\n  char *s1; // [rsp+30h] [rbp-48h]\n  char *s1b; // [rsp+30h] [rbp-48h]\n  char *s1a; // [rsp+30h] [rbp-48h]\n  unsigned __int64 v45; // [rsp+38h] [rbp-40h]\n\n  v2 = (const char *)src;\n  v3 = strcmp(a2, \"inf\") != 0;\n  if ( *(_BYTE *)src == 48 )\n  {\n    while ( 1 )\n    {\n      v4 = v2[1];\n      if ( v4 != 48 )\n        break;\n      ++v2;\n    }\n    if ( v4 || src == v2 + 1 )\n      ++v2;\n  }\n  v5 = a2;\n  if ( *a2 == 48 )\n  {\n    while ( 1 )\n    {\n      v6 = v5[1];\n      if ( v6 != 48 )\n        break;\n      ++v5;\n    }\n    if ( a2 == v5 + 1 || v6 )\n      ++v5;\n  }\n  v32 = v5;\n  v7 = 31LL;\n  v8 = strlen(v2);\n  v9 = v8;\n  v10 = v8;\n  if ( v8 + 1 >= 0x1F )\n    v7 = v8 + 1;\n  if ( v3 )\n  {\n    n = v8 + 1;\n    srca = v32;\n    v11 = strlen(v32) + 1;\n    v35 = v11;\n    v33 = v11 - 1;\n    if ( v7 < v11 - 1 )\n      v7 = v11 - 1;\n    v12 = v7 + 1;\n    v13 = sub_405400(v7 + 1);\n    ptr = (char *)v13;\n    v14 = (char *)memcpy((void *)(v13 + v7 - v9), v2, n);\n    v15 = v14;\n    s1 = v14;\n    v16 = sub_405400(v7 + 1);\n    na = (void *)v16;\n    v17 = (const char *)memcpy((void *)(v16 + v7 - v33), srca, v35);\n    srcb = v17;\n    if ( v9 >= v33 && (v9 > v33 || strcmp(s1, v17) > 0) )\n    {\n      v18 = 0;\n      goto LABEL_22;\n    }\n  }\n  else\n  {\n    v12 = v7 + 1;\n    v34 = v8 + 1;\n    v20 = sub_405400(v7 + 1);\n    ptr = (char *)v20;\n    v21 = (char *)memcpy((void *)(v20 + v7 - v9), v2, v34);\n    v33 = 0LL;\n    na = 0LL;\n    v15 = v21;\n    srcb = 0LL;\n  }\n  v22 = 2 * v12;\n  v23 = 0x2000LL;\n  if ( v22 >= 0x2000 )\n    v23 = v22;\n  v45 = v23;\n  v24 = (char *)sub_405400(v23);\n  v36 = (size_t)&v24[v45];\n  v25 = (char *)mempcpy(v24, v15, v9);\n  v26 = !v3;\n  while ( 1 )\n  {\n    if ( v10 >= v33 && !v26 )\n    {\n      if ( v10 > v33 )\n        break;\n      s1b = v25;\n      v27 = strcmp(v15, srcb);\n      v25 = s1b;\n      if ( v27 >= 0 )\n        break;\n    }\n    v28 = v25 + 1;\n    *v25 = *s;\n    v29 = &v15[v10 - 1];\n    do\n    {\n      if ( *v29 <= 56 )\n      {\n        ++*v29;\n        if ( v7 != v10 )\n          goto LABEL_37;\n        goto LABEL_41;\n      }\n      (--v29)[1] = 48;\n    }\n    while ( v29 >= v15 );\n    ++v10;\n    *--v15 = 49;\n    if ( v7 != v10 )\n      goto LABEL_37;\nLABEL_41:\n    v7 *= 2LL;\n    s1a = (char *)(v7 + 1);\n    ptr = (char *)sub_405460(ptr, v7 + 1);\n    v15 = (char *)memmove(&ptr[v10], ptr, v10 + 1);\n    if ( 2 * (v7 + 1) > v45 )\n    {\n      v31 = v28 - v24;\n      v24 = (char *)sub_405460(v24, 2LL * (_QWORD)s1a);\n      v28 = &v24[v31];\n      v45 = 2LL * (_QWORD)s1a;\n      v36 = (size_t)&v24[2 * (_QWORD)s1a];\n    }\nLABEL_37:\n    v25 = (char *)mempcpy(v28, v15, v10);\n    if ( (unsigned __int64)v25 > v36 + ~v10 )\n    {\n      v30 = (int)v24;\n      if ( fwrite_unlocked(v24, v25 - v24, 1uLL, stdout) != 1 )\n        goto LABEL_45;\n      v25 = v24;\n    }\n  }\n  *v25 = 10;\n  v30 = (int)v24;\n  if ( fwrite_unlocked(v24, v25 + 1 - v24, 1uLL, stdout) != 1 )\n  {\nLABEL_45:\n    sub_402640();\n    sub_402A40(v30);\n  }\n  v18 = 1;\nLABEL_22:\n  free(ptr);\n  free(na);\n  return v18;\n}\n", 
            "funcStartAddr": "0x402680L", 
            "funcEndAddr": "0x402a40L", 
            "funcName": "sub_402680"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_402A40(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  __int64 v4; // r9\n  FILE *v5; // rbp\n  char *v6; // rax\n  FILE *v7; // rbp\n  char *v8; // rax\n  FILE *v9; // rbp\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  FILE *v13; // rbp\n  char *v14; // rax\n  FILE *v15; // rbp\n  char *v16; // rax\n  FILE *v17; // rbp\n  char *v18; // rax\n  const char **v19; // rax\n  char *v20; // rbp\n  char *v21; // rax\n  __int64 v22; // r8\n  __int64 v23; // r9\n  char *v24; // rax\n  char *v25; // r12\n  char *v26; // rax\n  __int64 v27; // r8\n  __int64 v28; // r9\n  char *v29; // rax\n  __int64 v30; // r8\n  __int64 v31; // r9\n  char *v32; // rax\n  __int64 v33; // r8\n  __int64 v34; // r9\n  char *v35; // rax\n  char *v36; // rax\n  __int64 v37; // r8\n  __int64 v38; // r9\n  char *v39; // rax\n  __int64 v40; // rcx\n  __int64 v41; // r8\n  __int64 v42; // r9\n  const char *v43; // [rsp+0h] [rbp-88h]\n  const char *v44; // [rsp+8h] [rbp-80h]\n  const char *v45; // [rsp+10h] [rbp-78h]\n  const char *v46; // [rsp+18h] [rbp-70h]\n  const char *v47; // [rsp+20h] [rbp-68h]\n  const char *v48; // [rsp+28h] [rbp-60h]\n  const char *v49; // [rsp+30h] [rbp-58h]\n  const char *v50; // [rsp+38h] [rbp-50h]\n  const char *v51; // [rsp+40h] [rbp-48h]\n  const char *v52; // [rsp+48h] [rbp-40h]\n  const char *v53; // [rsp+50h] [rbp-38h]\n  const char *v54; // [rsp+58h] [rbp-30h]\n  __int64 v55; // [rsp+60h] [rbp-28h]\n  __int64 v56; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_60D308;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(\n         0LL,\n         \"Usage: %s [OPTION]... LAST\\n  or:  %s [OPTION]... FIRST LAST\\n  or:  %s [OPTION]... FIRST INCREMENT LAST\\n\",\n         5);\n  __printf_chk(1LL, v3, v1, v1, v1, v4, v43, v44);\n  v5 = stdout;\n  v6 = dcgettext(0LL, \"Print numbers from FIRST to LAST, in steps of INCREMENT.\\n\", 5);\n  fputs_unlocked(v6, v5);\n  v7 = stdout;\n  v8 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v8, v7);\n  v9 = stdout;\n  v10 = dcgettext(\n          0LL,\n          \"  -f, --format=FORMAT      use printf style floating-point FORMAT\\n\"\n          \"  -s, --separator=STRING   use STRING to separate numbers (default: \\\\n)\\n\"\n          \"  -w, --equal-width        equalize width by padding with leading zeroes\\n\",\n          5);\n  fputs_unlocked(v10, v9);\n  v11 = stdout;\n  v12 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v12, v11);\n  v13 = stdout;\n  v14 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v14, v13);\n  v15 = stdout;\n  v16 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"If FIRST or INCREMENT is omitted, it defaults to 1.  That is, an\\n\"\n          \"omitted INCREMENT defaults to 1 even when LAST is smaller than FIRST.\\n\"\n          \"The sequence of numbers ends when the sum of the current number and\\n\"\n          \"INCREMENT would become greater than LAST.\\n\"\n          \"FIRST, INCREMENT, and LAST are interpreted as floating point values.\\n\"\n          \"INCREMENT is usually positive if FIRST is smaller than LAST, and\\n\"\n          \"INCREMENT is usually negative if FIRST is greater than LAST.\\n\"\n          \"INCREMENT must not be 0; none of FIRST, INCREMENT and LAST may be NaN.\\n\",\n          5);\n  fputs_unlocked(v16, v15);\n  v17 = stdout;\n  v18 = dcgettext(\n          0LL,\n          \"FORMAT must be suitable for printing one argument of type 'double';\\n\"\n          \"it defaults to %.PRECf if FIRST, INCREMENT, and LAST are all fixed point\\n\"\n          \"decimal numbers with maximum precision PREC, and to %g otherwise.\\n\",\n          5);\n  fputs_unlocked(v18, v17);\n  v43 = \"[\";\n  v19 = &v43;\n  v44 = \"test invocation\";\n  v45 = \"coreutils\";\n  v46 = \"Multi-call invocation\";\n  v47 = \"sha224sum\";\n  v48 = \"sha2 utilities\";\n  v49 = \"sha256sum\";\n  v50 = \"sha2 utilities\";\n  v51 = \"sha384sum\";\n  v52 = \"sha2 utilities\";\n  v53 = \"sha512sum\";\n  v54 = \"sha2 utilities\";\n  v55 = 0LL;\n  v56 = 0LL;\n  do\n    v19 += 2;\n  while ( *v19 && strcmp(\"seq\", *v19) );\n  v20 = (char *)v19[1];\n  if ( v20 )\n  {\n    v21 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v21, &unk_409979, \"https://www.gnu.org/software/coreutils/\", v22, v23, v43, v44);\n    v24 = setlocale(5, 0LL);\n    if ( !v24 || !strncmp(v24, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v32 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v32, &unk_409979, \"https://www.gnu.org/software/coreutils/\", v33, v34, v43, v44);\n    v35 = setlocale(5, 0LL);\n    if ( !v35 || !strncmp(v35, \"en_\", 3uLL) )\n    {\n      v20 = \"seq\";\n      v36 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v25 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v36, \"https://www.gnu.org/software/coreutils/\", \"seq\", v37, v38, v43, v44);\nLABEL_12:\n      v29 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v29, v20, v25, v30, v31, v43, v44);\nLABEL_3:\n      exit(status);\n    }\n    v20 = \"seq\";\n  }\n  v39 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v39, \"seq\", v40, v41, v42, v43, v44);\nLABEL_10:\n  v25 = \"Multi-call invocation\" + 10;\n  v26 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v26, \"https://www.gnu.org/software/coreutils/\", \"seq\", v27, v28, v43, v44);\n  if ( v20 != \"seq\" )\n    v25 = \"\";\n  goto LABEL_12;\n}\n", 
            "funcStartAddr": "0x402a40L", 
            "funcEndAddr": "0x402dbdL", 
            "funcName": "sub_402A40"
        }, 
        {
            "decompiledFuncCode": "__m128i *__fastcall sub_402DC0(__m128i *a1, const char *a2)\n{\n  const char *v2; // rbx\n  const unsigned __int16 *v3; // rcx\n  __int64 v4; // rdx\n  char *v5; // r12\n  __int64 v6; // r15\n  unsigned __int64 v7; // kr08_8\n  size_t v8; // rax\n  unsigned __int64 v9; // r14\n  unsigned int v10; // eax\n  char *v11; // r13\n  __int64 v12; // rdx\n  signed __int64 v13; // r8\n  int v14; // eax\n  int v15; // ecx\n  __int64 v16; // r8\n  int v17; // esi\n  unsigned __int64 v18; // kr10_8\n  __int64 v19; // rdx\n  __m128i v20; // xmm1\n  __m128i *result; // rax\n  __int64 v22; // r8\n  unsigned __int64 v23; // kr18_8\n  __int64 v24; // rax\n  __int64 v25; // rbx\n  char *v26; // rax\n  long double v27; // [rsp+0h] [rbp-68h]\n  long double v28; // [rsp+10h] [rbp-58h]\n  __m128i v29; // [rsp+20h] [rbp-48h]\n\n  v2 = a2;\n  if ( !(unsigned __int8)sub_405690(a2, 0LL, &v28, sub_4030E0) )\n  {\n    v25 = sub_404E40(a2);\n    v26 = dcgettext(0LL, \"invalid floating point argument: %s\", 5);\n    error(0, 0, v26, v25);\n    sub_402A40(1);\n  }\n  v27 = v28;\n  v3 = *__ctype_b_loc();\n  while ( 1 )\n  {\n    v4 = *(unsigned __int8 *)v2;\n    if ( !(v3[v4] & 0x2000) && (_BYTE)v4 != 43 )\n      break;\n    ++v2;\n  }\n  v29.m128i_i64[0] = 0LL;\n  v29.m128i_i32[2] = 0x7FFFFFFF;\n  v5 = strchr(v2, 46);\n  if ( !v5 && !strchr(v2, 112) )\n    v29.m128i_i32[2] = 0;\n  if ( !v2[strcspn(v2, \"xX\")] && v27 * 0.0 == 0.0 )\n  {\n    v6 = -1LL;\n    v7 = strlen(v2) + 1;\n    v29.m128i_i64[0] = v7 - 1;\n    if ( v5 )\n    {\n      v8 = strcspn(v5 + 1, \"eE\");\n      v9 = v8;\n      if ( v8 > 0x7FFFFFFF || (v29.m128i_i32[2] = v8, v8) )\n      {\n        if ( v2 == v5 )\n        {\n          v6 = 1LL;\n        }\n        else\n        {\n          v10 = *(v5 - 1) - 48;\n          v6 = v10 <= 9;\n          LOBYTE(v6) = v10 > 9;\n        }\n      }\n      v29.m128i_i64[0] = v6 + v7 - 1;\n    }\n    else\n    {\n      v9 = 0LL;\n    }\n    v11 = strchr(v2, 101);\n    if ( v11 || (v11 = strchr(v2, 69)) != 0LL )\n    {\n      v12 = strtol(v11 + 1, 0LL, 10);\n      v13 = v11 - v2;\n      v14 = v29.m128i_i32[2];\n      if ( v12 < 0 )\n      {\n        v22 = v29.m128i_i64[0] + v13;\n        v29.m128i_i32[2] -= v12;\n        v23 = strlen(v2) + 1;\n        v24 = ~v23 + v22 + 2;\n        if ( v5 )\n        {\n          if ( v11 == v5 + 1 )\n            v24 = ~v23 + v22 + 3;\n          v29.m128i_i64[0] = v24;\n        }\n        else\n        {\n          v29.m128i_i64[0] = ~v23 + v22 + 3;\n        }\n        v19 = -v12;\n      }\n      else\n      {\n        v15 = v29.m128i_i32[2];\n        if ( v29.m128i_i32[2] > v12 )\n          v15 = v12;\n        v16 = v29.m128i_i64[0] + v13;\n        v29.m128i_i32[2] -= v15;\n        v17 = v14 - v15;\n        v18 = strlen(v2) + 1;\n        v29.m128i_i64[0] = ~v18 + v16 + 2;\n        if ( v9 != 0 && v5 != 0LL && !v17 )\n          v29.m128i_i64[0] = ~v18 + v16 + 1;\n        if ( v12 <= v9 )\n          v9 = v12;\n        v19 = v12 - v9;\n      }\n      v29.m128i_i64[0] += v19;\n    }\n  }\n  v20 = _mm_load_si128(&v29);\n  result = a1;\n  *a1 = _mm_load_si128((const __m128i *)&v28);\n  a1[1] = v20;\n  return result;\n}\n", 
            "funcStartAddr": "0x402dc0L", 
            "funcEndAddr": "0x4030d8L", 
            "funcName": "sub_402DC0"
        }, 
        {
            "decompiledFuncCode": "long double __fastcall sub_4030E0(char *nptr, char **endptr)\n{\n  if ( !loc )\n    loc = newlocale(8127, \"C\", 0LL);\n  if ( loc )\n    return strtold_l(nptr, endptr, loc);\n  if ( endptr )\n    *endptr = nptr;\n  return 0.0;\n}\n", 
            "funcStartAddr": "0x4030e0L", 
            "funcEndAddr": "0x403154L", 
            "funcName": "sub_4030E0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403180()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_406670(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60D2F8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60D300 )\n      {\n        v5 = sub_404C90();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_406670(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x403180L", 
            "funcEndAddr": "0x40321eL", 
            "funcName": "sub_403180"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_403220(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60D308 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x403220L", 
            "funcEndAddr": "0x4032b9L", 
            "funcName": "sub_403220"
        }, 
        {
            "decompiledFuncCode": "const char *__fastcall sub_4032C0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_406730();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40A301;\n      if ( !v5 )\n        v2 = (char *)&unk_40A2F6;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40A2FD;\n    if ( !v5 )\n      v2 = (char *)&unk_40A2FA;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"-+#0 '\" + 5;\n  return v6;\n}\n", 
            "funcStartAddr": "0x4032c0L", 
            "funcEndAddr": "0x4033b2L", 
            "funcName": "sub_4032C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4033C0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  const char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  const char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"-+#0 '\" + 5;\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4033C0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"-+#0 '\" + 5;\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4033C0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4033C0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4033C0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_406590((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4033C0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4033C0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4032C0(\"`\", v11);\n        v47 = sub_4032C0(\"'\", v11);\n        v14 = v55;\n        a9 = (char *)v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_4033C0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  const char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  const char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"-+#0 '\" + 5;\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4033C0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"-+#0 '\" + 5;\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4033C0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4033C0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4033C0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_406590((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4033C0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4033C0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4032C0(\"`\", v11);\n        v47 = sub_4032C0(\"'\", v11);\n        v14 = v55;\n        a9 = (char *)v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401980L", 
            "funcEndAddr": "0x401985L", 
            "funcName": "sub_4033C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4033C0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  const char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  const char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"-+#0 '\" + 5;\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4033C0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"-+#0 '\" + 5;\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4033C0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4033C0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4033C0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_406590((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4033C0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4033C0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4032C0(\"`\", v11);\n        v47 = sub_4032C0(\"'\", v11);\n        v14 = v55;\n        a9 = (char *)v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_4033C0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  const char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  const char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"-+#0 '\" + 5;\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"-+#0 '\" + 5;\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4033C0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"-+#0 '\" + 5;\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4033C0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4033C0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4033C0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4033C0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4033C0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_406590((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4033C0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4033C0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4032C0(\"`\", v11);\n        v47 = sub_4032C0(\"'\", v11);\n        v14 = v55;\n        a9 = (char *)v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401980L", 
            "funcEndAddr": "0x401985L", 
            "funcName": "sub_4033C0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4045F0(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_60D258;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60D270 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_405650(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60D258 == &xmmword_60D260 )\n    {\n      v8 = (__int128 *)sub_405460(0LL, v10);\n      off_60D258 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D260);\n    }\n    else\n    {\n      off_60D258 = (__int128 *)sub_405460(off_60D258, v10);\n      v8 = off_60D258;\n    }\n    memset(&v8[dword_60D270], 0, 16LL * ((int)a1 + 1 - dword_60D270));\n    dword_60D270 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4033C0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60D320 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_405400(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4033C0(v15, v14, v18, v4, v16, v22, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_4045F0(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_60D258;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60D270 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_405650(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60D258 == &xmmword_60D260 )\n    {\n      v8 = (__int128 *)sub_405460(0LL, v10);\n      off_60D258 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D260);\n    }\n    else\n    {\n      off_60D258 = (__int128 *)sub_405460(off_60D258, v10);\n      v8 = off_60D258;\n    }\n    memset(&v8[dword_60D270], 0, 16LL * ((int)a1 + 1 - dword_60D270));\n    dword_60D270 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4033C0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60D320 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_405400(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4033C0(v15, v14, v18, v4, v16, v22, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x401985L", 
            "funcEndAddr": "0x40198aL", 
            "funcName": "sub_4045F0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4045F0(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_60D258;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60D270 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_405650(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60D258 == &xmmword_60D260 )\n    {\n      v8 = (__int128 *)sub_405460(0LL, v10);\n      off_60D258 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D260);\n    }\n    else\n    {\n      off_60D258 = (__int128 *)sub_405460(off_60D258, v10);\n      v8 = off_60D258;\n    }\n    memset(&v8[dword_60D270], 0, 16LL * ((int)a1 + 1 - dword_60D270));\n    dword_60D270 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4033C0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60D320 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_405400(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4033C0(v15, v14, v18, v4, v16, v22, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_4045F0(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_60D258;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60D270 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_405650(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60D258 == &xmmword_60D260 )\n    {\n      v8 = (__int128 *)sub_405460(0LL, v10);\n      off_60D258 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D260);\n    }\n    else\n    {\n      off_60D258 = (__int128 *)sub_405460(off_60D258, v10);\n      v8 = off_60D258;\n    }\n    memset(&v8[dword_60D270], 0, 16LL * ((int)a1 + 1 - dword_60D270));\n    dword_60D270 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4033C0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60D320 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_405400(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4033C0(v15, v14, v18, v4, v16, v22, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x401985L", 
            "funcEndAddr": "0x40198aL", 
            "funcName": "sub_4045F0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404B10(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4045F0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_404B10(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4045F0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40198aL", 
            "funcEndAddr": "0x40198fL", 
            "funcName": "sub_404B10"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404B10(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4045F0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_404B10(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4045F0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40198aL", 
            "funcEndAddr": "0x40198fL", 
            "funcName": "sub_404B10"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404B80(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4045F0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_404B80(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4045F0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40198fL", 
            "funcEndAddr": "0x401994L", 
            "funcName": "sub_404B80"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404B80(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4045F0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_404B80(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4045F0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40198fL", 
            "funcEndAddr": "0x401994L", 
            "funcName": "sub_404B80"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404C10(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_60D450;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60D420);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60D430);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_60D440);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_4045F0(0LL, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x404c10L", 
            "funcEndAddr": "0x404c80L", 
            "funcName": "sub_404C10"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404C90(char *a1)\n{\n  return sub_404C10(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x404c90L", 
            "funcEndAddr": "0x404ca1L", 
            "funcName": "sub_404C90"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404CC0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4045F0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_404CC0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4045F0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401994L", 
            "funcEndAddr": "0x401999L", 
            "funcName": "sub_404CC0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404CC0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4045F0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_404CC0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4045F0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401994L", 
            "funcEndAddr": "0x401999L", 
            "funcName": "sub_404CC0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404D30(__int64 a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_60D420);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60D430);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60D440);\n  v9 = qword_60D450;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_4045F0(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x404d30L", 
            "funcEndAddr": "0x404d9cL", 
            "funcName": "sub_404D30"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404E20(__int64 a1, char *a2)\n{\n  return sub_4045F0(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_60D220);\n}\n", 
            "funcStartAddr": "0x404e20L", 
            "funcEndAddr": "0x404e31L", 
            "funcName": "sub_404E20"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404E40(char *a1)\n{\n  return sub_4045F0(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_60D220);\n}\n", 
            "funcStartAddr": "0x404e40L", 
            "funcEndAddr": "0x404e56L", 
            "funcName": "sub_404E40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404E60(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_404E60(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401999L", 
            "funcEndAddr": "0x40199eL", 
            "funcName": "sub_404E60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404E60(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_404E60(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401999L", 
            "funcEndAddr": "0x40199eL", 
            "funcName": "sub_404E60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405260(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_404E60(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_404E60(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x405260L", 
            "funcEndAddr": "0x4052c0L", 
            "funcName": "sub_405260"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4052C0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_404E60(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_404E60(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x4052c0L", 
            "funcEndAddr": "0x40537cL", 
            "funcName": "sub_4052C0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_405400(size_t a1, __int64 a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_405650(a1, a2, v3);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405400L", 
            "funcEndAddr": "0x40541aL", 
            "funcName": "sub_405400"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_405460(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_405650(a1, a2, v3);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405460L", 
            "funcEndAddr": "0x405496L", 
            "funcName": "sub_405460"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_405600(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_405400(n, n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x405600L", 
            "funcEndAddr": "0x405628L", 
            "funcName": "sub_405600"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_405630(void *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen((const char *)src);\n  return sub_405600(src, v1 + 1);\n}\n", 
            "funcStartAddr": "0x405630L", 
            "funcEndAddr": "0x405643L", 
            "funcName": "sub_405630"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_405650()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x405650L", 
            "funcEndAddr": "0x405681L", 
            "funcName": "sub_405650"
        }, 
        {
            "decompiledFuncCode": "bool __usercall sub_405690@<al>(long double *a1@<rdx>, void (__fastcall *a2)(_BYTE *, _BYTE **)@<rcx>, _BYTE *a3@<rdi>, _QWORD *a4@<rsi>, long double a5@<st0>)\n{\n  void (__fastcall *v5)(_BYTE *, _BYTE **); // r14\n  long double *v6; // r13\n  int *v7; // r12\n  bool result; // al\n  _BYTE *v9; // [rsp+8h] [rbp-30h]\n\n  v5 = a2;\n  v6 = a1;\n  v7 = __errno_location();\n  *v7 = 0;\n  v5(a3, &v9);\n  if ( v9 == a3 )\n  {\n    result = 0;\n  }\n  else\n  {\n    if ( a4 )\n    {\n      result = 1;\n      if ( a5 == 0.0 )\n      {\nLABEL_6:\n        *a4 = v9;\n        goto LABEL_7;\n      }\n    }\n    else\n    {\n      result = 0;\n      if ( *v9 )\n        goto LABEL_7;\n      if ( a5 == 0.0 )\n      {\n        result = 1;\n        goto LABEL_7;\n      }\n    }\n    result = *v7 != 34;\n  }\n  if ( a4 )\n    goto LABEL_6;\nLABEL_7:\n  *v6 = a5;\n  return result;\n}\n", 
            "funcStartAddr": "0x405690L", 
            "funcEndAddr": "0x40572cL", 
            "funcName": "sub_405690"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405730(__int64 a1, __int64 a2, ...)\n{\n  gcc_va_list va; // [rsp+8h] [rbp-D0h]\n\n  va_start(va, a2);\n  return sub_406610(a1, a2, va);\n}\n", 
            "funcStartAddr": "0x405730L", 
            "funcEndAddr": "0x4057bfL", 
            "funcName": "sub_405730"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4057C0(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x4057c0L", 
            "funcEndAddr": "0x40589fL", 
            "funcName": "sub_4057C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4058A0(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4058a0L", 
            "funcEndAddr": "0x405ebcL", 
            "funcName": "sub_4058A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405EC0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_4057C0(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_4057C0((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_4058A0(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_4058A0(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_4058A0(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x405ec0L", 
            "funcEndAddr": "0x406486L", 
            "funcName": "sub_405EC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406490(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_60D460 = dword_60D27C;\n  dword_60D464 = dword_60D278;\n  result = sub_405EC0(a1, a2, a3, a4, a5, a6, &dword_60D460, a7);\n  dword_60D27C = dword_60D460;\n  qword_60D4A0 = qword_60D470;\n  dword_60D274 = dword_60D468;\n  return result;\n}\n", 
            "funcStartAddr": "0x406490L", 
            "funcEndAddr": "0x4064e6L", 
            "funcName": "sub_406490"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4064F0(int a1, __int64 a2, char *a3)\n{\n  return sub_406490(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x4064f0L", 
            "funcEndAddr": "0x406508L", 
            "funcName": "sub_4064F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406510(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_406490(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x406510L", 
            "funcEndAddr": "0x406523L", 
            "funcName": "sub_406510"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406530(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_405EC0(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x406530L", 
            "funcEndAddr": "0x406545L", 
            "funcName": "sub_406530"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406550(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_406490(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x406550L", 
            "funcEndAddr": "0x406566L", 
            "funcName": "sub_406550"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406570(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_405EC0(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x406570L", 
            "funcEndAddr": "0x406588L", 
            "funcName": "sub_406570"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_406590(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_4066D0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x406590L", 
            "funcEndAddr": "0x40660aL", 
            "funcName": "sub_406590"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406610(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  void *v3; // rax\n  unsigned int v4; // edx\n  __int64 result; // rax\n  unsigned __int64 v6; // [rsp+8h] [rbp-10h]\n\n  v3 = (void *)sub_406DC0(0LL, &v6, a2, a3);\n  if ( !v3 )\n    return 0xFFFFFFFFLL;\n  v4 = v6;\n  if ( v6 > 0x7FFFFFFF )\n  {\n    free(v3);\n    *__errno_location() = 75;\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    *a1 = v3;\n    result = v4;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406610L", 
            "funcEndAddr": "0x406669L", 
            "funcName": "sub_406610"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406670(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_406CA0(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  else\n  {\n    if ( !(_DWORD)result )\n      return result;\n    if ( !v1 )\n      return (unsigned int)-(*__errno_location() != 9);\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x406670L", 
            "funcEndAddr": "0x4066cdL", 
            "funcName": "sub_406670"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_4066D0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4066d0L", 
            "funcEndAddr": "0x40672eL", 
            "funcName": "sub_4066D0"
        }, 
        {
            "decompiledFuncCode": "const char *sub_406730()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = qword_60D498;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_60D498 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          qword_60D498 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_406CA0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_406CA0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x406730L", 
            "funcEndAddr": "0x406c92L", 
            "funcName": "sub_406730"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_406CA0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_406D20(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406ca0L", 
            "funcEndAddr": "0x406d1bL", 
            "funcName": "sub_406CA0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_406D20(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_406D60(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x406d20L", 
            "funcEndAddr": "0x406d60L", 
            "funcName": "sub_406D20"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_406D60(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x406d60L", 
            "funcEndAddr": "0x406db7L", 
            "funcName": "sub_406D60"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_406DC0(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_408B00(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_4088E0(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_406DC0(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_408B00(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_4088E0(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n", 
            "funcStartAddr": "0x40199eL", 
            "funcEndAddr": "0x4019a3L", 
            "funcName": "sub_406DC0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_406DC0(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_408B00(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_4088E0(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_406DC0(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_408B00(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_4088E0(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n", 
            "funcStartAddr": "0x40199eL", 
            "funcEndAddr": "0x4019a3L", 
            "funcName": "sub_406DC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4088E0(int *a1, unsigned __int64 *a2)\n{\n  unsigned int *v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  unsigned int *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = (unsigned int *)a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( (unsigned __int64)*v2 )\n      {\n        case 1uLL:\n        case 2uLL:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *((_BYTE *)v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3uLL:\n        case 4uLL:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *((_WORD *)v2 + 8) = *v10;\n          goto LABEL_7;\n        case 5uLL:\n        case 6uLL:\n        case 0xDuLL:\n        case 0xEuLL:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (unsigned int *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (unsigned int *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          v2[4] = *v8;\n          goto LABEL_7;\n        case 7uLL:\n        case 8uLL:\n        case 9uLL:\n        case 0xAuLL:\n        case 0x11uLL:\n        case 0x12uLL:\n        case 0x13uLL:\n        case 0x14uLL:\n        case 0x15uLL:\n        case 0x16uLL:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *((_QWORD *)v2 + 2) = *v5;\n          goto LABEL_7;\n        case 0xBuLL:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *((_QWORD *)v2 + 2) = *v14;\n          goto LABEL_7;\n        case 0xCuLL:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *((long double *)v2 + 1) = *v15;\n          goto LABEL_7;\n        case 0xFuLL:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *((_QWORD *)v2 + 2) = v21;\n          goto LABEL_7;\n        case 0x10uLL:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_40B720;\n          *((_QWORD *)v2 + 2) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 8;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4088e0L", 
            "funcEndAddr": "0x408af9L", 
            "funcName": "sub_4088E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408B00(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 *v5; // r15\n  unsigned __int64 v6; // r9\n  unsigned __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  __int64 v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  void *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  void *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  __int64 v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  void *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  __int64 v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v94; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v95; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v96; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v97; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v5 = a3;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = (__int64)(a2 + 4);\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (__int64)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *(_DWORD *)(v12 + 16) = 0;\n  *(_QWORD *)(v12 + 24) = 0LL;\n  *(_QWORD *)(v12 + 32) = 0LL;\n  *(_QWORD *)(v12 + 40) = -1LL;\n  *(_QWORD *)(v12 + 48) = 0LL;\n  *(_QWORD *)(v12 + 56) = 0LL;\n  *(_QWORD *)(v12 + 64) = -1LL;\n  *(_QWORD *)(v12 + 80) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_17;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_17;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_131;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_131;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_17:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case 39:\n        *(_DWORD *)(v12 + 16) |= 1u;\n        goto LABEL_16;\n      case 45:\n        *(_DWORD *)(v12 + 16) |= 2u;\n        goto LABEL_16;\n      case 43:\n        *(_DWORD *)(v12 + 16) |= 4u;\n        goto LABEL_16;\n      case 32:\n        *(_DWORD *)(v12 + 16) |= 8u;\n        goto LABEL_16;\n      case 35:\n        *(_DWORD *)(v12 + 16) |= 0x10u;\n        goto LABEL_16;\n    }\n    if ( v13 != 48 )\n      break;\n    *(_DWORD *)(v12 + 16) |= 0x20u;\nLABEL_16:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *(_DWORD *)(v12 + 16) |= 0x40u;\n    goto LABEL_16;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *(_QWORD *)(v12 + 24) = v9;\n    *(_QWORD *)(v12 + 32) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_215;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 != 36 )\n    {\nLABEL_215:\n      v18 = *(_QWORD *)(v12 + 40);\n      if ( v18 == -1LL )\n      {\n        *(_QWORD *)(v12 + 40) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v18 = v81++;\n      }\n    }\n    else\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_131;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_131;\n      *(_QWORD *)(v12 + 40) = v18;\n      v14 = v47 + 2;\n    }\n    v19 = (_DWORD *)v5[1];\n    if ( v6 > v18 )\n    {\n      v20 = *v5;\nLABEL_43:\n      if ( v20 <= v18 )\n      {\n        do\n          v19[8 * ++v20 - 8] = 0;\n        while ( v20 <= v18 );\n        *v5 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_26;\n        }\n        goto LABEL_132;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_27;\nLABEL_48:\n      v22 = v9[1] == 42;\n      *(_QWORD *)(v12 + 48) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *(_QWORD *)(v12 + 56) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_27;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *(_QWORD *)(v12 + 56) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_216;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 != 36 )\n      {\nLABEL_216:\n        v26 = *(_QWORD *)(v12 + 64);\n        if ( v26 != -1LL )\n          goto LABEL_53;\n        *(_QWORD *)(v12 + 64) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_53;\n        }\n      }\n      else\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_131;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *(_QWORD *)(v12 + 64) = v26;\n          v24 = v72 + 2;\nLABEL_53:\n          v19 = (_DWORD *)v5[1];\n          if ( v6 > v26 )\n          {\n            v27 = *v5;\n            goto LABEL_55;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_163;\n              v27 = *v5;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)v5[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_161;\n              v27 = *v5;\n              if ( src != v40 )\n                goto LABEL_172;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *v5;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_172:\n            v5[1] = (unsigned __int64)v19;\nLABEL_55:\n            if ( v27 <= v26 )\n            {\n              do\n                v19[8 * ++v27 - 8] = 0;\n              while ( v27 <= v26 );\n              *v5 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_27;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_27;\n            }\n            goto LABEL_132;\n          }\nLABEL_160:\n          v40 = v19;\n          goto LABEL_161;\n        }\n      }\nLABEL_131:\n      v19 = (_DWORD *)v5[1];\nLABEL_132:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (void *)v4[1];\n      if ( (void *)v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_160;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_163;\n      v20 = *v5;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)v5[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_161;\n      v20 = *v5;\n      if ( src != v40 )\n        goto LABEL_94;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *v5;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_94:\n    v5[1] = (unsigned __int64)v19;\n    goto LABEL_43;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *(_QWORD *)(v12 + 24) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = (__int64)(i + 1);\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - (_QWORD)v9;\n      v9 = (char *)v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *(_QWORD *)(v12 + 32) = v9;\n    v13 = *v9;\n  }\nLABEL_26:\n  if ( v13 == 46 )\n    goto LABEL_48;\nLABEL_27:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_34;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_34;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_34:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case 37:\n      goto LABEL_71;\n    case 65:\n    case 69:\n    case 70:\n    case 71:\n    case 97:\n    case 101:\n    case 102:\n    case 103:\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_63;\n    case 67:\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_63;\n    case 83:\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_63;\n    case 88:\n    case 111:\n    case 117:\n    case 120:\n      v29 = 10;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 6 : 4;\n        }\n      }\n      goto LABEL_63;\n    case 99:\n      v29 = (v15 > 7) + 13;\n      goto LABEL_63;\n    case 100:\n    case 105:\n      v29 = 9;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 5 : 3;\n        }\n      }\n      goto LABEL_63;\n    case 110:\n      v29 = 22;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( !(v15 & 2) )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_63;\n    case 112:\n      v29 = 17;\n      goto LABEL_63;\n    case 115:\n      v29 = (v15 > 7) + 15;\nLABEL_63:\n      if ( v11 == -1LL )\n      {\n        *(_QWORD *)(v12 + 80) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v11 = v81++;\n      }\n      else\n      {\n        *(_QWORD *)(v12 + 80) = v11;\n      }\n      v19 = (_DWORD *)v5[1];\n      if ( v6 > v11 )\n        goto LABEL_66;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_160;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_163;\n        goto LABEL_159;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_211;\n      if ( src == (_DWORD *)v5[1] )\n      {\n        v19 = src;\nLABEL_159:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *v5);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      v5[1] = (unsigned __int64)v19;\nLABEL_66:\n      v30 = *v5;\n      if ( *v5 <= v11 )\n      {\n        do\n          v19[8 * ++v30 - 8] = 0;\n        while ( v30 <= v11 );\n        *v5 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_132;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_71:\n      *(_BYTE *)(v12 + 72) = v13;\n      v32 = *v4;\n      *(_QWORD *)(v12 + 8) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > v32 + 1 )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( (v7 & 0x8000000000000000LL) == 0LL )\n      {\n        v33 = 2 * v7;\n        if ( 2 * v7 <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (void *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( (void *)v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)v5[1];\n              if ( src != v40 )\n                goto LABEL_162;\n              goto LABEL_165;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_211;\n            v34 = (void *)v91[1];\n            v8 = *v91;\n            if ( (void *)v82 != v34 )\n              goto LABEL_78;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_78:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_211:\n      v40 = (_DWORD *)v5[1];\nLABEL_161:\n      if ( src != v40 )\n      {\nLABEL_162:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_163:\n      v58 = (void *)v4[1];\n      if ( (void *)v82 != v58 )\n        free(v58);\nLABEL_165:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_131;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408b00L", 
            "funcEndAddr": "0x409809L", 
            "funcName": "sub_408B00"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x409810L", 
            "funcEndAddr": "0x40986dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x409870L", 
            "funcEndAddr": "0x409871L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409880(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_60D208 )\n    v1 = (void *)unk_60D208;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x409880L", 
            "funcEndAddr": "0x409898L", 
            "funcName": "sub_409880"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409898(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_60CE30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x409898L", 
            "funcEndAddr": "0x4098b8L", 
            "funcName": "sub_409898"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_seq.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 66, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}