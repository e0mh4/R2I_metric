{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  int v3; // ebp\n  char **v4; // rbx\n  char *v5; // rdi\n  __pid_t v6; // eax\n  char *v7; // r12\n  int *v8; // rax\n  void (*v9)(void); // r14\n  int v10; // er13\n  __int64 (__fastcall *v11)(); // r12\n  const char *v12; // r15\n  int v13; // eax\n  __int64 v14; // rax\n  const char *v15; // rax\n  char *v16; // rax\n  int *v17; // rax\n  unsigned __int64 v19; // rax\n  __int64 v20; // rcx\n  __int64 v21; // rax\n  __int64 v22; // r12\n  __int64 v23; // rax\n  unsigned __int64 v24; // rax\n  int *v25; // rax\n  const unsigned __int16 **v26; // rax\n  char *v27; // r9\n  int *v28; // r8\n  const char *v29; // rdi\n  unsigned __int64 v30; // rax\n  char *v31; // r9\n  const char *v32; // rsi\n  char *v33; // rax\n  char *v34; // rax\n  char *v35; // rax\n  char *v36; // rax\n  __int64 *v37; // rsi\n  __int64 v38; // rax\n  __int64 v39; // rdx\n  __int64 v40; // rsi\n  __int64 v41; // r15\n  int *v42; // rdi\n  unsigned __int64 v43; // kr18_8\n  int v44; // eax\n  __int64 v45; // r14\n  __int64 v46; // r14\n  __int64 v47; // r13\n  __int64 v48; // rcx\n  char *v49; // rdx\n  __int64 v50; // r13\n  char *v51; // rax\n  __int64 v52; // r13\n  char *v53; // rax\n  __int64 v54; // r13\n  char *v55; // rax\n  __int64 v56; // r13\n  __int64 v57; // r14\n  char *v58; // rax\n  __int64 v59; // r13\n  char *v60; // rax\n  char *v61; // rax\n  char *v62; // rax\n  char *v63; // r13\n  char *v64; // rax\n  __int64 v65; // r14\n  char *v66; // r13\n  int *v67; // rax\n  char *v68; // r13\n  int *v69; // rax\n  char *v70; // r13\n  int *v71; // rax\n  char *v72; // rax\n  unsigned __int64 v73; // rax\n  char *v74; // rax\n  __int64 *v75; // [rsp-8h] [rbp-120h]\n  int v76; // [rsp+8h] [rbp-110h]\n  int v77; // [rsp+Ch] [rbp-10Ch]\n  char *formatb; // [rsp+10h] [rbp-108h]\n  char *format; // [rsp+10h] [rbp-108h]\n  const char *formatc; // [rsp+10h] [rbp-108h]\n  char *formata; // [rsp+10h] [rbp-108h]\n  char *formate; // [rsp+10h] [rbp-108h]\n  char *formatd; // [rsp+10h] [rbp-108h]\n  char *formatf; // [rsp+10h] [rbp-108h]\n  char *v85; // [rsp+18h] [rbp-100h]\n  int *v86; // [rsp+18h] [rbp-100h]\n  char *v87; // [rsp+18h] [rbp-100h]\n  unsigned __int64 v88; // [rsp+18h] [rbp-100h]\n  int v89; // [rsp+2Ch] [rbp-ECh]\n  int v90; // [rsp+33h] [rbp-E5h]\n  int *v91; // [rsp+38h] [rbp-E0h]\n  char *endptr; // [rsp+40h] [rbp-D8h]\n  sigset_t set; // [rsp+48h] [rbp-D0h]\n  int v94; // [rsp+C8h] [rbp-50h]\n\n  v3 = a1;\n  v4 = a2;\n  v5 = *a2;\n  strcpy((char *)&v90, \"echo\");\n  if ( !*a2 )\n    v5 = \"xargs\";\n  sub_4075C0(v5, a2, a3);\n  sub_4053A0();\n  v6 = getpid();\n  dword_6123C4 = 0;\n  dword_6123D0 = v6;\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"findutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"findutils\");\n  if ( (unsigned int)sub_40BC80(sub_4058E0) || (unsigned int)sub_40BC80(sub_403EC0) )\n  {\n    v7 = dcgettext(0LL, \"The atexit library function failed\", 5);\n    v8 = __errno_location();\n    error(1, *v8, v7);\n  }\n  v9 = (void (*)(void))sub_402F00;\n  v10 = sub_404EA0(&dword_612420, 2048LL);\n  if ( (unsigned int)(v10 - 1) > 1 )\n  {\n    v23 = sysconf(0);\n    if ( v23 > 0 )\n    {\n      if ( v23 <= 2048 )\n        __assert_fail(\"val > XARGS_POSIX_HEADROOM\", \"xargs.c\", 0x1D8u, \"main\");\n      v24 = v23 - 2048;\n      if ( v24 > qword_612438 )\n        v24 = qword_612438;\n      qword_612438 = v24;\n    }\n    if ( (unsigned __int64)qword_612438 <= 0x7FF )\n      __assert_fail(\"bc_ctl.arg_max >= LINE_MAX\", \"xargs.c\", 0x1F4u, \"main\");\n    v9 = (void (*)(void))nullsub_1;\n    qword_612460 = (__int64)&sub_404120;\n    sub_404F80(&dword_612420);\n  }\n  v77 = 1;\n  v11 = (__int64 (__fastcall *)())sub_4038B0;\n  v12 = \"-\";\n  v76 = 0;\n  while ( 1 )\n  {\n    v13 = sub_40B0F0((unsigned int)v3, v4, \"+0a:E:e::i::I:l::L:n:prs:txP:d:\", off_40D6E0, &v89);\n    if ( v13 == -1 )\n      break;\n    switch ( v13 )\n    {\n      case 48:\n        byte_6123C0 = 0;\n        v11 = sub_403790;\n        continue;\n      case 69:\n      case 101:\n        if ( name && *name )\n          s1 = name;\n        else\n          s1 = 0LL;\n        continue;\n      case 73:\n      case 105:\n        v15 = name;\n        if ( !name )\n          v15 = \"{}\";\n        qword_612450 = (__int64)v15;\n        qword_612470 = 0LL;\n        qword_612468 = 0LL;\n        continue;\n      case 76:\n        v14 = sub_403570(name, 76LL, 1LL, -1LL, 1LL);\n        qword_612470 = 0LL;\n        qword_612468 = v14;\n        qword_612450 = 0LL;\n        continue;\n      case 80:\n        dword_6122B0 = sub_403570(name, 80LL, 0LL, 0x7FFFFFFFLL, 1LL);\n        continue;\n      case 83:\n        v76 = 1;\n        continue;\n      case 97:\n        v12 = name;\n        continue;\n      case 100:\n        LOBYTE(v22) = *name;\n        if ( ~(strlen(name) + 1) == -3LL )\n          goto LABEL_60;\n        if ( (_BYTE)v22 != 92 )\n        {\n          LOBYTE(v22) = 0;\n          formatf = name;\n          v36 = dcgettext(\n                  0LL,\n                  \"Invalid input delimiter specification %s: the delimiter must be either a single character or an escape\"\n                  \" sequence starting with \\\\.\",\n                  5);\n          error(1, 0, v36, formatf);\n          goto LABEL_60;\n        }\n        break;\n      case 104:\n        sub_4032B0(stdout);\n        return 0LL;\n      case 108:\n        if ( name )\n          qword_612468 = sub_403570(name, 108LL, 1LL, -1LL, 1LL);\n        else\n          qword_612468 = 1LL;\n        qword_612470 = 0LL;\n        qword_612450 = 0LL;\n        continue;\n      case 110:\n        v21 = sub_403570(name, 110LL, 1LL, -1LL, 1LL);\n        qword_612468 = 0LL;\n        qword_612470 = v21;\n        if ( v21 == 1 && qword_612450 )\n          qword_612470 = 0LL;\n        else\n          qword_612450 = 0LL;\n        continue;\n      case 112:\n        byte_6123C1 = 1;\n        goto LABEL_12;\n      case 114:\n        v77 = 0;\n        continue;\n      case 115:\n        v9();\n        v19 = sub_403570(name, 115LL, 1LL, qword_612428, 0LL);\n        v20 = v19;\n        if ( qword_612428 < v19 )\n        {\n          formatd = (char *)qword_612428;\n          v88 = v19;\n          v35 = dcgettext(0LL, \"warning: value %ld for -s option is too large, using %ld instead\", 5);\n          error(0, 0, v35, v88, formatd);\n          v20 = qword_612428;\n        }\n        qword_612438 = v20;\n        continue;\n      case 116:\nLABEL_12:\n        byte_6123C2 = 1;\n        continue;\n      case 118:\n        sub_404580(\"xargs\");\n        return 0LL;\n      case 120:\n        dword_612420 = 1;\n        continue;\n      case 128:\n        if ( strchr(name, 61) )\n        {\n          formatb = off_40D6E0[4 * v89];\n          v16 = dcgettext(0LL, \"option --%s may not be set to a value which includes `='\", 5);\n          error(1, 0, v16, formatb);\n        }\n        qword_6123B8 = name;\n        format = name;\n        if ( unsetenv(name) )\n        {\n          v85 = format;\n          formatc = dcgettext(0LL, \"failed to unset environment variable %s\", 5);\n          v17 = __errno_location();\n          error(1, *v17, formatc, v85);\n        }\n        continue;\n      default:\n        sub_4032B0(stderr);\n        return 1LL;\n    }\n    v22 = (unsigned __int8)name[1];\n    switch ( (_BYTE)v22 )\n    {\n      case 0x5C:\n        goto LABEL_60;\n      case 0x61:\n        LOBYTE(v22) = 7;\n        goto LABEL_60;\n      case 0x62:\n        LOBYTE(v22) = 8;\n        goto LABEL_60;\n      case 0x66:\n        LOBYTE(v22) = 12;\n        goto LABEL_60;\n      case 0x6E:\n        LOBYTE(v22) = 10;\n        goto LABEL_60;\n      case 0x72:\n        LOBYTE(v22) = 13;\n        goto LABEL_60;\n      case 0x74:\n        LOBYTE(v22) = 9;\n        goto LABEL_60;\n      case 0x76:\n        LOBYTE(v22) = 11;\n        goto LABEL_60;\n      default:\n        formata = name;\n        v25 = __errno_location();\n        if ( (_BYTE)v22 == 120 )\n        {\n          *v25 = 0;\n          endptr = 0LL;\n          v73 = strtoul(formata + 2, &endptr, 16);\n          v31 = formata;\n          LOBYTE(v22) = v73;\n          if ( v73 > 0xFF )\n          {\n            v32 = \"Invalid escape sequence %s in input delimiter specification; character values must not exceed %lx.\";\n            goto LABEL_57;\n          }\n        }\n        else\n        {\n          v86 = v25;\n          v26 = __ctype_b_loc();\n          v27 = formata;\n          v28 = v86;\n          if ( (*v26)[v22] & 0x800 )\n          {\n            v29 = formata + 1;\n          }\n          else\n          {\n            v74 = dcgettext(0LL, \"Invalid escape sequence %s in input delimiter specification.\", 5);\n            error(1, 0, v74, formata);\n            v29 = 0LL;\n            v27 = formata;\n            v28 = v86;\n          }\n          formata = v27;\n          *v28 = 0;\n          endptr = 0LL;\n          v30 = strtoul(v29, &endptr, 8);\n          v31 = formata;\n          LOBYTE(v22) = v30;\n          if ( v30 > 0xFF )\n          {\n            v32 = \"Invalid escape sequence %s in input delimiter specification; character values must not exceed %lo.\";\nLABEL_57:\n            v33 = dcgettext(0LL, v32, 5);\n            error(1, 0, v33, formata, 255LL);\n            v31 = formata;\n            goto LABEL_58;\n          }\n        }\nLABEL_58:\n        if ( *endptr )\n        {\n          v87 = endptr;\n          formate = v31;\n          v34 = dcgettext(\n                  0LL,\n                  \"Invalid escape sequence %s in input delimiter specification; trailing characters %s not recognised.\",\n                  5);\n          error(1, 0, v34, formate, v87);\n        }\nLABEL_60:\n        byte_6123C0 = v22;\n        v11 = sub_403790;\n        break;\n    }\n  }\n  if ( s1 && v11 == sub_403790 )\n  {\n    v72 = dcgettext(0LL, \"warning: the -E option has no effect if -0 or -d is used.\\n\", 5);\n    error(0, 0, v72);\n  }\n  v9();\n  if ( v10 )\n    __assert_fail(\"BC_INIT_OK == bcstatus\", \"xargs.c\", 0x2A2u, \"main\");\n  endptr = (char *)sub_402ED0;\n  sigemptyset(&set);\n  v94 = 0;\n  if ( sigaction(10, (const struct sigaction *)&endptr, 0LL) )\n  {\n    v70 = dcgettext(0LL, \"Cannot set SIGUSR1 signal handler\", 5);\n    v71 = __errno_location();\n    error(0, *v71, v70);\n  }\n  endptr = (char *)sub_403720;\n  sigemptyset(&set);\n  v94 = 0;\n  if ( sigaction(12, (const struct sigaction *)&endptr, 0LL) )\n  {\n    v68 = dcgettext(0LL, \"Cannot set SIGUSR2 signal handler\", 5);\n    v69 = __errno_location();\n    error(0, *v69, v68);\n  }\n  if ( !strcmp(v12, \"-\") )\n  {\n    fp = stdin;\n  }\n  else\n  {\n    dword_6124D8 = 1;\n    fp = (_IO_FILE *)sub_4036C0(v12);\n    if ( !fp )\n    {\n      v65 = sub_408C90(0LL, 8LL, v12);\n      v66 = dcgettext(0LL, \"Cannot open input file %s\", 5);\n      v67 = __errno_location();\n      error(1, *v67, v66, v65);\n    }\n  }\n  if ( qword_612450 || qword_612468 )\n    dword_612420 = 1;\n  if ( dword_61233C == v3 )\n  {\n    v4 = (char **)&v91;\n    v3 = 1;\n    dword_61233C = 0;\n    v91 = &v90;\n  }\n  if ( v76 )\n  {\n    v50 = sub_404E60();\n    v51 = dcgettext(0LL, \"Your environment variables take up %lu bytes\\n\", 5);\n    fprintf(stderr, v51, v50);\n    v52 = qword_612428;\n    v53 = dcgettext(0LL, \"POSIX upper limit on argument length (this system): %lu\\n\", 5);\n    fprintf(stderr, v53, v52);\n    v54 = qword_612430;\n    v55 = dcgettext(0LL, \"POSIX smallest allowable upper limit on argument length (all systems): %lu\\n\", 5);\n    fprintf(stderr, v55, v54);\n    v56 = qword_612428;\n    v57 = sub_404E60();\n    v58 = dcgettext(0LL, \"Maximum length of command we could actually use: %lu\\n\", 5);\n    fprintf(stderr, v58, v56 - v57);\n    v59 = qword_612438;\n    v60 = dcgettext(0LL, \"Size of command buffer we are actually using: %lu\\n\", 5);\n    fprintf(stderr, v60, v59);\n    v61 = dcgettext(0LL, \"Maximum parallelism (--max-procs must be no greater): %lu\\n\", 5);\n    fprintf(stderr, v61, 0x7FFFFFFFLL);\n    if ( isatty(0) )\n    {\n      v62 = dcgettext(\n              0LL,\n              \"\\n\"\n              \"Execution of xargs will continue now, and it will try to read its input and run commands; if this is not w\"\n              \"hat you wanted to happen, please type the end-of-file keystroke.\\n\",\n              5);\n      fprintf(stderr, v62);\n      if ( v77 )\n      {\n        v63 = v4[dword_61233C];\n        v64 = dcgettext(\n                0LL,\n                \"Warning: %s will be run at least once.  If you do not want that to happen, then press the interrupt keystroke.\\n\",\n                5);\n        fprintf(stderr, v64, v63);\n      }\n    }\n  }\n  qword_6124E0 = (char *)sub_409680(qword_612438 + 1);\n  v37 = 0LL;\n  qword_612498 = sub_409680(qword_612438 + 1);\n  signal(17, 0LL);\n  if ( qword_612450 )\n  {\n    v38 = sub_409680(8LL * v3);\n    v39 = dword_61233C;\n    v40 = -1LL;\n    v41 = v38;\n    if ( v3 > dword_61233C )\n    {\n      do\n      {\n        *(_QWORD *)(v38 + 8 * v39) = strlen(v4[v39]);\n        ++v39;\n      }\n      while ( v3 > (int)v39 );\n    }\n    v43 = strlen((const char *)qword_612450) + 1;\n    v42 = (int *)(qword_612450 + v43);\n    qword_612448 = v43 - 1;\n    while ( 1 )\n    {\n      v44 = ((__int64 (__fastcall *)(int *, __int64))v11)(v42, v40);\n      if ( v44 == -1 )\n        break;\n      v45 = v44;\n      sub_405050(&dword_612420, &qword_612480);\n      v46 = v45 - 1;\n      qword_6124A0 = 0LL;\n      sub_4047A0(\n        &dword_612420,\n        &qword_612480,\n        v4[dword_61233C],\n        *(_QWORD *)(v41 + 8LL * dword_61233C) + 1LL,\n        0LL,\n        0LL,\n        (unsigned __int8)byte_6122B4,\n        dword_61233C);\n      byte_6122B4 = 0;\n      v47 = dword_61233C + 1;\n      if ( v3 > dword_61233C + 1 )\n      {\n        do\n        {\n          v48 = *(_QWORD *)(v41 + 8 * v47);\n          v49 = v4[v47++];\n          sub_404A40(&dword_612420, &qword_612480, v49, v48, 0LL, 0LL, qword_6124E0, v46, (unsigned __int8)byte_6122B4);\n        }\n        while ( v3 > (int)v47 );\n      }\n      v40 = (__int64)&qword_612480;\n      v42 = &dword_612420;\n      sub_404C00(&dword_612420, &qword_612480);\n    }\n  }\n  else\n  {\n    while ( dword_61233C < v3 )\n    {\n      v75 = v37;\n      v37 = &qword_612480;\n      sub_4047A0(\n        &dword_612420,\n        &qword_612480,\n        v4[dword_61233C],\n        strlen(v4[dword_61233C]) + 1,\n        0LL,\n        0LL,\n        (unsigned __int8)byte_6122B4,\n        v75);\n      ++dword_61233C;\n    }\n    byte_6122B4 = 0;\n    qword_612458 = qword_612480;\n    qword_6124A8 = qword_6124A0;\n    while ( (unsigned int)v11() != -1 )\n    {\n      if ( qword_612468 && qword_612468 <= (unsigned __int64)qword_6124D0 )\n      {\n        sub_404C00(&dword_612420, &qword_612480);\n        qword_6124D0 = 0LL;\n      }\n    }\n    if ( qword_612480 != qword_612458 || v77 && !byte_6123F0 )\n      sub_404C00(&dword_612420, &qword_612480);\n  }\n  dword_6123C4 = status;\n  return (unsigned int)status;\n}\n", 
            "funcStartAddr": "0x402030L", 
            "funcEndAddr": "0x402dd4L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x402de0L", 
            "funcEndAddr": "0x402e0bL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_402E0B()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x402e0bL", 
            "funcEndAddr": "0x402e2aL", 
            "funcName": "sub_402E0B"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402E2A()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x402e2aL", 
            "funcEndAddr": "0x402e61L", 
            "funcName": "sub_402E2A"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_402E61()\n{\n  __int64 *result; // rax\n\n  if ( !byte_612388 )\n  {\n    while ( qword_612390 < (unsigned __int64)(&qword_611E48 - qword_611E40 - 1) )\n      ((void (*)(void))qword_611E40[++qword_612390])();\n    result = sub_402E0B();\n    byte_612388 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x402e61L", 
            "funcEndAddr": "0x402eb8L", 
            "funcName": "sub_402E61"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402EB8()\n{\n  return sub_402E2A();\n}\n", 
            "funcStartAddr": "0x402eb8L", 
            "funcEndAddr": "0x402ebdL", 
            "funcName": "sub_402EB8"
        }, 
        {
            "decompiledFuncCode": "void nullsub_1()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x402ec0L", 
            "funcEndAddr": "0x402ec1L", 
            "funcName": "nullsub_1"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402ED0()\n{\n  __int64 result; // rax\n\n  result = (unsigned int)dword_6122B0;\n  if ( dword_6122B0 != 0x7FFFFFFF )\n    result = (unsigned int)++dword_6122B0;\n  dword_6123CC = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x402ed0L", 
            "funcEndAddr": "0x402ef7L", 
            "funcName": "sub_402ED0"
        }, 
        {
            "decompiledFuncCode": "void sub_402F00()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"environment is too large for exec\", 5);\n  error(1, 0, v0);\n}\n", 
            "funcStartAddr": "0x402f00L", 
            "funcEndAddr": "0x402f2aL", 
            "funcName": "sub_402F00"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_402F30(unsigned __int8 a1, unsigned int a2)\n{\n  unsigned int v2; // er13\n  int v3; // ebx\n  __pid_t v4; // eax\n  int *v5; // r14\n  char *v6; // rax\n  unsigned int v7; // edx\n  __int64 v8; // rcx\n  __int16 v9; // bx\n  char *v10; // rax\n  char *v11; // rax\n  __int64 v12; // rbx\n  char *v13; // rax\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // [rsp+4h] [rbp-50h]\n  __int64 v17; // [rsp+4h] [rbp-50h]\n  int stat_loc; // [rsp+18h] [rbp-3Ch]\n\n  if ( qword_6123E8 )\n  {\n    v2 = 0;\n    do\n    {\n      dword_6123CC = 0;\n      v3 = (a1 ^ 1) & (a2 <= v2);\n      while ( 1 )\n      {\n        do\n        {\n          while ( 1 )\n          {\n            v4 = waitpid(-1, &stat_loc, v3);\n            if ( v4 != -1 )\n              break;\n            v5 = __errno_location();\n            if ( *v5 != 4 )\n            {\n              v6 = dcgettext(0LL, \"error waiting for child process\", 5);\n              error(1, *v5, v6);\n            }\n            if ( dword_6123CC && !a1 )\n              v3 = 1;\n          }\n          if ( !v4 )\n          {\n            if ( !v3 )\n            {\n              v14 = qword_6123E8;\n              v15 = dcgettext(0LL, \"WARNING: Lost track of %lu child processes\", 5);\n              error(0, 0, v15, v14);\n            }\n            return;\n          }\n        }\n        while ( !qword_6123D8 );\n        if ( v4 == *(_DWORD *)qword_6123E0 )\n          break;\n        v7 = 0;\n        while ( 1 )\n        {\n          v8 = ++v7;\n          if ( v7 >= (unsigned __int64)qword_6123D8 )\n            break;\n          if ( *(_DWORD *)(qword_6123E0 + 4LL * v7) == v4 )\n            goto LABEL_20;\n        }\n        if ( v7 != qword_6123D8 )\n          goto LABEL_20;\n      }\n      v8 = 0LL;\nLABEL_20:\n      *(_DWORD *)(qword_6123E0 + 4 * v8) = 0;\n      v9 = stat_loc;\n      ++v2;\n      --qword_6123E8;\n      if ( BYTE1(stat_loc) == 255 )\n      {\n        v12 = *(_QWORD *)qword_612488;\n        v13 = dcgettext(0LL, \"%s: exited with status 255; aborting\", 5);\n        error(124, 0, v13, v12);\n        v9 = stat_loc;\n      }\n      if ( (_BYTE)v9 == 127 )\n      {\n        v17 = *(_QWORD *)qword_612488;\n        v11 = dcgettext(0LL, \"%s: stopped by signal %d\", 5);\n        error(125, 0, v11, v17, HIBYTE(v9));\n        v9 = stat_loc;\n      }\n      if ( (char)((v9 & 0x7F) + 1) > 1 )\n      {\n        v16 = *(_QWORD *)qword_612488;\n        v10 = dcgettext(0LL, \"%s: terminated by signal %d\", 5);\n        error(125, 0, v10, v16, v9 & 0x7F);\n        HIBYTE(v9) = BYTE1(stat_loc);\n      }\n      if ( HIBYTE(v9) )\n        status = 123;\n    }\n    while ( qword_6123E8 );\n  }\n}\n", 
            "funcStartAddr": "0x402f30L", 
            "funcEndAddr": "0x40319fL", 
            "funcName": "sub_402F30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4031A0(int a1)\n{\n  unsigned __int64 v1; // r12\n  __int64 v2; // rax\n  unsigned int v3; // ebp\n  _DWORD *v4; // rdx\n  __int64 v5; // rbx\n  __int64 result; // rax\n  unsigned __int64 v7; // rdx\n  __int64 v8; // rsi\n  unsigned __int64 v9; // rcx\n  unsigned int v10; // edx\n\n  v1 = qword_6123D8;\n  v2 = qword_6123E0;\n  if ( !qword_6123D8 )\n  {\n    v5 = 0LL;\n    v3 = 0;\n    if ( !qword_6123E0 )\n    {\n      v8 = 128LL;\n      v7 = 32LL;\nLABEL_11:\n      qword_6123D8 = v7;\n      v2 = sub_4096D0(qword_6123E0, v8);\n      v9 = qword_6123D8;\n      qword_6123E0 = v2;\n      if ( v1 < qword_6123D8 )\n      {\n        v10 = v3;\n        do\n        {\n          *(_DWORD *)(v2 + 4 * v1) = 0;\n          v1 = ++v10;\n        }\n        while ( v10 < v9 );\n      }\n      goto LABEL_7;\n    }\nLABEL_10:\n    v7 = qword_6123D8 + ((unsigned __int64)qword_6123D8 >> 1) + 1;\n    v8 = 4 * v7;\n    goto LABEL_11;\n  }\n  if ( !*(_DWORD *)qword_6123E0 )\n  {\n    v4 = (_DWORD *)qword_6123E0;\n    v3 = 0;\n    goto LABEL_8;\n  }\n  v3 = 0;\n  while ( 1 )\n  {\n    v5 = 4LL * ++v3;\n    if ( v3 >= (unsigned __int64)qword_6123D8 )\n      break;\n    v4 = (_DWORD *)(qword_6123E0 + v5);\n    if ( !*(_DWORD *)(qword_6123E0 + 4LL * v3) )\n      goto LABEL_8;\n  }\n  if ( v3 == qword_6123D8 )\n    goto LABEL_10;\nLABEL_7:\n  v4 = (_DWORD *)(v2 + v5);\n  if ( *(_DWORD *)(v2 + v5) )\n    __assert_fail(\"0 == pids[i]\", \"xargs.c\", 0x58Cu, \"add_proc\");\nLABEL_8:\n  *v4 = a1;\n  result = v3;\n  ++qword_6123E8;\n  byte_6123F0 = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x4031a0L", 
            "funcEndAddr": "0x4032a8L", 
            "funcName": "sub_4031A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4032B0(FILE *stream)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  char *v4; // rax\n  char *v5; // rax\n  char *v6; // rax\n  char *v7; // rax\n  char *v8; // rax\n  char *v9; // rax\n  char *v10; // rax\n  char *v11; // rax\n  char *v12; // rax\n  char *v13; // rax\n  char *v14; // rax\n  char *v15; // rax\n  char *v16; // rax\n  char *v17; // rax\n  char *v18; // rax\n  char *v19; // rax\n  char *v20; // rax\n  char *v21; // rax\n  char *v22; // rax\n  char *v23; // rax\n  char *v24; // rax\n  char *v25; // rax\n\n  v1 = qword_612528;\n  v2 = dcgettext(0LL, \"Usage: %s [OPTION]... COMMAND [INITIAL-ARGS]...\\n\", 5);\n  fprintf(stream, v2, v1);\n  v3 = dcgettext(0LL, \"Run COMMAND with arguments INITIAL-ARGS and more arguments read from input.\\n\\n\", 5);\n  fputs(v3, stream);\n  v4 = dcgettext(\n         0LL,\n         \"Mandatory and optional arguments to long options are also\\n\"\n         \"mandatory or optional for the corresponding short option.\\n\",\n         5);\n  fputs(v4, stream);\n  v5 = dcgettext(\n         0LL,\n         \"  -0, --null                   items are separated by a null, not whitespace;\\n\"\n         \"                                 disables quote and backslash processing and\\n\"\n         \"                                 logical EOF processing\\n\",\n         5);\n  fputs(v5, stream);\n  v6 = dcgettext(0LL, \"  -a, --arg-file=FILE          read arguments from FILE, not standard input\\n\", 5);\n  fputs(v6, stream);\n  v7 = dcgettext(\n         0LL,\n         \"  -d, --delimiter=CHARACTER    items in input stream are separated by CHARACTER,\\n\"\n         \"                                 not by whitespace; disables quote and backslash\\n\"\n         \"                                 processing and logical EOF processing\\n\",\n         5);\n  fputs(v7, stream);\n  v8 = dcgettext(\n         0LL,\n         \"  -E END                       set logical EOF string; if END occurs as a line\\n\"\n         \"                                 of input, the rest of the input is ignored\\n\"\n         \"                                 (ignored if -0 or -d was specified)\\n\",\n         5);\n  fputs(v8, stream);\n  v9 = dcgettext(\n         0LL,\n         \"  -e, --eof[=END]              equivalent to -E END if END is specified;\\n\"\n         \"                                 otherwise, there is no end-of-file string\\n\",\n         5);\n  fputs(v9, stream);\n  v10 = dcgettext(0LL, \"  -I R                         same as --replace=R\\n\", 5);\n  fputs(v10, stream);\n  v11 = dcgettext(\n          0LL,\n          \"  -i, --replace[=R]            replace R in INITIAL-ARGS with names read\\n\"\n          \"                                 from standard input; if R is unspecified,\\n\"\n          \"                                 assume {}\\n\",\n          5);\n  fputs(v11, stream);\n  v12 = dcgettext(\n          0LL,\n          \"  -L, --max-lines=MAX-LINES    use at most MAX-LINES non-blank input lines per\\n\"\n          \"                                 command line\\n\",\n          5);\n  fputs(v12, stream);\n  v13 = dcgettext(\n          0LL,\n          \"  -l[MAX-LINES]                similar to -L but defaults to at most one non-\\n\"\n          \"                                 blank input line if MAX-LINES is not specified\\n\",\n          5);\n  fputs(v13, stream);\n  v14 = dcgettext(0LL, \"  -n, --max-args=MAX-ARGS      use at most MAX-ARGS arguments per command line\\n\", 5);\n  fputs(v14, stream);\n  v15 = dcgettext(0LL, \"  -P, --max-procs=MAX-PROCS    run at most MAX-PROCS processes at a time\\n\", 5);\n  fputs(v15, stream);\n  v16 = dcgettext(0LL, \"  -p, --interactive            prompt before running commands\\n\", 5);\n  fputs(v16, stream);\n  v17 = dcgettext(0LL, \"      --process-slot-var=VAR   set environment variable VAR in child processes\\n\", 5);\n  fputs(v17, stream);\n  v18 = dcgettext(\n          0LL,\n          \"  -r, --no-run-if-empty        if there are no arguments, then do not run COMMAND;\\n\"\n          \"                                 if this option is not given, COMMAND will be\\n\"\n          \"                                 run at least once\\n\",\n          5);\n  fputs(v18, stream);\n  v19 = dcgettext(0LL, \"  -s, --max-chars=MAX-CHARS    limit length of command line to MAX-CHARS\\n\", 5);\n  fputs(v19, stream);\n  v20 = dcgettext(0LL, \"      --show-limits            show limits on command-line length\\n\", 5);\n  fputs(v20, stream);\n  v21 = dcgettext(0LL, \"  -t, --verbose                print commands before executing them\\n\", 5);\n  fputs(v21, stream);\n  v22 = dcgettext(0LL, \"  -x, --exit                   exit if the size (see -s) is exceeded\\n\", 5);\n  fputs(v22, stream);\n  v23 = dcgettext(0LL, \"      --help                   display this help and exit\\n\", 5);\n  fputs(v23, stream);\n  v24 = dcgettext(0LL, \"      --version                output version information and exit\\n\", 5);\n  fputs(v24, stream);\n  v25 = dcgettext(0LL, \"\\nReport bugs to <bug-findutils@gnu.org>.\\n\", 5);\n  return fputs(v25, stream);\n}\n", 
            "funcStartAddr": "0x4032b0L", 
            "funcEndAddr": "0x40356bL", 
            "funcName": "sub_4032B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403570(const char *a1, unsigned int a2, __int64 a3, __int64 a4, int a5)\n{\n  int v5; // er14\n  __int64 v6; // r12\n  __int64 v7; // rbp\n  __int64 result; // rax\n  __int64 v9; // rbx\n  char *v10; // rax\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // rbx\n  char *v14; // rax\n  char *endptr; // [rsp+8h] [rbp-30h]\n\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  result = strtol(a1, &endptr, 10);\n  if ( endptr == a1 || *endptr )\n  {\n    v13 = qword_612528;\n    v14 = dcgettext(0LL, \"%s: invalid number for -%c option\\n\", 5);\n    fprintf(stderr, v14, v13, a2);\n    sub_4032B0(stderr);\n    exit(1);\n  }\n  if ( result < v7 )\n  {\n    v11 = qword_612528;\n    v12 = dcgettext(0LL, \"%s: value for -%c option should be >= %ld\\n\", 5);\n    fprintf(stderr, v12, v11, a2, v7);\n    if ( !v5 )\n      return v7;\n    goto LABEL_13;\n  }\n  if ( v6 >= 0 && result > v6 )\n  {\n    v9 = qword_612528;\n    v10 = dcgettext(0LL, \"%s: value for -%c option should be <= %ld\\n\", 5);\n    fprintf(stderr, v10, v9, a2, v6);\n    if ( !v5 )\n      return v6;\nLABEL_13:\n    sub_4032B0(stderr);\n    exit(1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403570L", 
            "funcEndAddr": "0x4036b2L", 
            "funcName": "sub_403570"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_4036C0(char a1)\n{\n  FILE *v1; // rbx\n  int v2; // eax\n  int v3; // ebp\n  int *v5; // rax\n  int v6; // er13\n  int *v7; // r12\n\n  v1 = 0LL;\n  v2 = sub_405410(a1);\n  if ( v2 >= 0 )\n  {\n    v3 = v2;\n    v1 = fdopen(v2, \"r\");\n    if ( !v1 )\n    {\n      v5 = __errno_location();\n      v6 = *v5;\n      v7 = v5;\n      close(v3);\n      *v7 = v6;\n    }\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x4036c0L", 
            "funcEndAddr": "0x403718L", 
            "funcName": "sub_4036C0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403720()\n{\n  __int64 result; // rax\n\n  result = (unsigned int)dword_6122B0;\n  if ( dword_6122B0 > 1 )\n    result = (unsigned int)--dword_6122B0;\n  return result;\n}\n", 
            "funcStartAddr": "0x403720L", 
            "funcEndAddr": "0x40373bL", 
            "funcName": "sub_403720"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403740()\n{\n  __int64 result; // rax\n\n  if ( !qword_612450 && !byte_6122B4 )\n  {\n    result = qword_612458;\n    if ( qword_612480 != qword_612458 )\n    {\n      result = (unsigned int)dword_612420;\n      if ( !dword_612420 )\n        result = sub_404C00(&dword_612420, &qword_612480);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403740L", 
            "funcEndAddr": "0x403782L", 
            "funcName": "sub_403740"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403790()\n{\n  char *v0; // rbx\n  char *v1; // r12\n  int v2; // ebp\n  char *v3; // rax\n  char *v4; // rdx\n  __int64 v5; // rbx\n  __int64 result; // rax\n\n  v0 = qword_6124E0;\n  v1 = &qword_6124E0[qword_612438 - 1 - qword_6124A8];\n  if ( byte_6123B0 )\n    return 0xFFFFFFFFLL;\n  while ( 1 )\n  {\n    v2 = _IO_getc(fp);\n    if ( v2 == -1 )\n      break;\n    if ( byte_6123C0 == v2 )\n    {\n      ++qword_6124D0;\n      v4 = qword_6124E0;\n      *v0 = 0;\n      goto LABEL_10;\n    }\n    if ( v0 >= v1 )\n    {\n      sub_403740();\n      v3 = dcgettext(0LL, \"argument line too long\", 5);\n      error(1, 0, v3);\n    }\n    *(++v0 - 1) = v2;\n  }\n  v4 = qword_6124E0;\n  byte_6123B0 = 1;\n  if ( qword_6124E0 == v0 )\n    return 0xFFFFFFFFLL;\n  *v0 = 0;\nLABEL_10:\n  v5 = v0 + 1 - v4;\n  result = (unsigned int)v5;\n  if ( !qword_612450 )\n  {\n    sub_4047A0(&dword_612420, &qword_612480, v4, (int)v5, 0LL, 0LL, (unsigned __int8)byte_6122B4);\n    result = (unsigned int)v5;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403790L", 
            "funcEndAddr": "0x4038aeL", 
            "funcName": "sub_403790"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4038B0()\n{\n  char *v0; // rbx\n  char *v1; // r13\n  char v2; // r14\n  __int64 v3; // rbp\n  int v4; // er12\n  char *v5; // r15\n  int v6; // er15\n  char *v7; // rax\n  char *v8; // rax\n  int v9; // eax\n  int v10; // eax\n  char *v11; // rbp\n  __int64 v12; // rbx\n  unsigned int v13; // er14\n  int v15; // eax\n  int v16; // eax\n  int v17; // eax\n  char *v18; // rbp\n  char *v19; // rax\n  char *v20; // rbp\n  __int64 v21; // rbx\n  int v22; // eax\n  int v23; // eax\n  int v24; // eax\n  char *v25; // rbp\n  char *v26; // rax\n  char *v27; // rcx\n  int v28; // eax\n  char *v29; // rbx\n  char *v30; // rax\n  int v31; // [rsp+8h] [rbp-40h]\n  char v32; // [rsp+Fh] [rbp-39h]\n\n  v0 = qword_6124E0;\n  v1 = &qword_6124E0[qword_612438 - 1 - qword_6124A8];\n  if ( byte_6123A0 )\n    return (unsigned int)-1;\n  v2 = 0;\n  v32 = 1;\n  v3 = -1LL;\n  v4 = 1;\n  v31 = 0;\n  while ( 2 )\n  {\n    v6 = _IO_getc(fp);\n    if ( v6 == -1 )\n    {\n      v24 = (int)qword_6124E0;\n      byte_6123A0 = 1;\n      if ( qword_6124E0 != v0 )\n      {\n        *v0 = 0;\n        v13 = (_DWORD)v0 + 1 - v24;\n        if ( v4 == 2 )\n          goto LABEL_71;\n        goto LABEL_62;\n      }\n      return (unsigned int)-1;\n    }\n    if ( v4 != 1 )\n    {\n      if ( v4 == 2 )\n      {\n        if ( v6 == 10 )\n          goto LABEL_46;\n        goto LABEL_16;\n      }\n      goto LABEL_3;\n    }\nLABEL_22:\n    if ( v6 & 0xFFFFFF80 )\n      goto LABEL_28;\nLABEL_23:\n    if ( !((*__ctype_b_loc())[v6] & 1) && v6 != 10 && v6 != 13 )\n      goto LABEL_28;\n    do\n    {\n      v10 = _IO_getc(fp);\n      if ( v10 == -1 )\n      {\nLABEL_42:\n        v16 = (int)qword_6124E0;\n        byte_6123A0 = 1;\n        if ( v0 == qword_6124E0 )\n          return (unsigned int)-1;\n        *v0 = 0;\n        v13 = (_DWORD)v0 + 1 - v16;\n        goto LABEL_62;\n      }\n      v3 = v6;\n      v6 = v10;\n      if ( !(v10 & 0xFFFFFF80) )\n        goto LABEL_23;\nLABEL_28:\n      ;\n    }\n    while ( (unsigned int)(v6 - 11) <= 1 );\n    if ( v6 != 10 )\n    {\n      while ( 1 )\n      {\n        if ( !qword_612450 && !(v6 & 0xFFFFFF80) && (*__ctype_b_loc())[v6] & 1 )\n        {\n          v20 = qword_6124E0;\n          *v0 = 0;\n          v21 = v0 + 1 - v20;\n          v13 = v21;\n          if ( s1 && *s1 == *v20 && !strcmp(s1, v20) )\n            goto LABEL_36;\n          sub_4047A0(&dword_612420, &qword_612480, v20, (int)v21, 0LL, 0LL, (unsigned __int8)byte_6122B4);\n          v0 = qword_6124E0;\n          v22 = _IO_getc(fp);\n          v32 = 0;\n          if ( v22 == -1 )\n            goto LABEL_42;\n          v3 = v6;\n          v2 = 1;\n          v6 = v22;\n          goto LABEL_22;\n        }\n        if ( v6 != 39 )\n        {\n          if ( v6 == 92 )\n          {\n            v15 = _IO_getc(fp);\n            v3 = v15;\n            if ( v15 == -1 )\n              goto LABEL_42;\nLABEL_9:\n            v4 = 0;\n            v5 = v0;\n            v2 = 1;\n            if ( !(dword_612400 | (unsigned int)v3) )\n              goto LABEL_18;\n            goto LABEL_10;\n          }\n          if ( v6 != 34 )\n          {\n            v3 = v6;\n            goto LABEL_9;\n          }\n        }\n        v17 = _IO_getc(fp);\n        if ( v17 == -1 )\n        {\n          v28 = (int)qword_6124E0;\n          byte_6123A0 = 1;\n          if ( v0 != qword_6124E0 )\n          {\n            *v0 = 0;\n            v31 = v6;\n            v13 = (_DWORD)v0 + 1 - v28;\nLABEL_71:\n            sub_403740();\n            if ( v31 == 34 )\n              v29 = dcgettext(0LL, \"double\", 5);\n            else\n              v29 = dcgettext(0LL, \"single\", 5);\n            v30 = dcgettext(\n                    0LL,\n                    \"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\",\n                    5);\n            error(1, 0, v30, v29);\nLABEL_62:\n            if ( !v32 || !s1 || *s1 != *qword_6124E0 || strcmp(s1, qword_6124E0) )\n            {\n              if ( !qword_612450 )\n                sub_4047A0(&dword_612420, &qword_612480, qword_6124E0, (int)v13, 0LL, 0LL, (unsigned __int8)byte_6122B4);\n              return v13;\n            }\n          }\n          return (unsigned int)-1;\n        }\n        v31 = v6;\n        v6 = v17;\n        v2 = 1;\n        if ( v17 == 10 )\n        {\nLABEL_46:\n          sub_403740();\n          if ( v31 == 34 )\n          {\n            v5 = v0;\n            v4 = 2;\n            v25 = dcgettext(0LL, \"double\", 5);\n            v26 = dcgettext(\n                    0LL,\n                    \"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\",\n                    5);\n            v27 = v25;\n            v3 = 10LL;\n            error(1, 0, v26, v27);\n          }\n          else\n          {\n            v18 = dcgettext(0LL, \"single\", 5);\n            v19 = dcgettext(\n                    0LL,\n                    \"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\",\n                    5);\n            error(1, 0, v19, v18);\n            v3 = 10LL;\n            v5 = v0;\n            v4 = 2;\n          }\n          goto LABEL_10;\n        }\nLABEL_16:\n        if ( v31 != v6 )\n          break;\n        v2 = 1;\n        v23 = _IO_getc(fp);\n        if ( v23 == -1 )\n          goto LABEL_42;\n        v3 = v6;\n        v6 = v23;\nLABEL_3:\n        if ( v6 == 10 )\n          goto LABEL_30;\n      }\n      v3 = v6;\n      v4 = 2;\n      v5 = v0;\n      if ( !(dword_612400 | (unsigned int)v3) )\n      {\nLABEL_18:\n        v3 = 0LL;\n        v7 = dcgettext(\n               0LL,\n               \"WARNING: a NUL character occurred in the input.  It cannot be passed through in the argument list.  Did y\"\n               \"ou mean to use the --null option?\",\n               5);\n        error(0, 0, v7);\n        dword_612400 = 1;\n        if ( v1 > v0 )\n          goto LABEL_11;\n        goto LABEL_19;\n      }\nLABEL_10:\n      if ( v1 > v0 )\n        goto LABEL_11;\nLABEL_19:\n      sub_403740();\n      v8 = dcgettext(0LL, \"argument line too long\", 5);\n      error(1, 0, v8);\nLABEL_11:\n      *v5 = v3;\n      ++v0;\n      continue;\n    }\n    break;\n  }\nLABEL_30:\n  if ( v3 & 0xFFFFFF80 || !((*__ctype_b_loc())[v3] & 1) )\n    ++qword_6124D0;\n  v11 = qword_6124E0;\n  v2 |= qword_6124E0 != v0;\n  if ( !v2 )\n  {\n    v9 = _IO_getc(fp);\n    if ( v9 == -1 )\n      goto LABEL_42;\n    v3 = 10LL;\n    v6 = v9;\n    goto LABEL_22;\n  }\n  *v0 = 0;\n  v12 = v0 + 1 - v11;\n  v13 = v12;\n  if ( s1 && *s1 == *v11 && !strcmp(s1, v11) )\n  {\nLABEL_36:\n    byte_6123A0 = 1;\n    if ( v32 )\n      return (unsigned int)-1;\n  }\n  else if ( !qword_612450 )\n  {\n    sub_4047A0(&dword_612420, &qword_612480, v11, (int)v12, 0LL, 0LL, (unsigned __int8)byte_6122B4);\n  }\n  return v13;\n}\n", 
            "funcStartAddr": "0x4038b0L", 
            "funcEndAddr": "0x403ebbL", 
            "funcName": "sub_4038B0"
        }, 
        {
            "decompiledFuncCode": "__pid_t sub_403EC0()\n{\n  __pid_t result; // eax\n\n  result = getpid();\n  if ( result != dword_6123D0 )\n    __assert_fail(\"getpid () == parent\", \"xargs.c\", 0x60Cu, \"wait_for_proc_all\");\n  if ( !byte_6123A1 )\n  {\n    byte_6123A1 = 1;\n    sub_402F30(1u, 0);\n    result = status;\n    byte_6123A1 = 0;\n    if ( dword_6123C4 != status )\n      _exit(status);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403ec0L", 
            "funcEndAddr": "0x403f2eL", 
            "funcName": "sub_403EC0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_403F30(char a1)\n{\n  unsigned __int64 v1; // rbx\n  char *v2; // r12\n  int *v3; // rax\n  int v4; // eax\n  int v5; // ebx\n  bool result; // al\n  char *v7; // rbx\n  int *v8; // rax\n  char *v9; // rbp\n  int *v10; // rax\n  char *v11; // rbx\n  int *v12; // rax\n\n  if ( qword_612480 != 1 )\n  {\n    v1 = 0LL;\n    do\n    {\n      if ( fprintf(stderr, \"%s \", *(_QWORD *)(qword_612488 + 8 * v1)) < 0 )\n      {\n        v2 = dcgettext(0LL, \"Failed to write to stderr\", 5);\n        v3 = __errno_location();\n        error(1, *v3, v2);\n      }\n      ++v1;\n    }\n    while ( qword_612480 - 1 > v1 );\n  }\n  if ( a1 )\n  {\n    if ( !qword_6123A8 )\n    {\n      qword_6123A8 = sub_4036C0((unsigned __int64)\"/dev/tty\");\n      if ( !qword_6123A8 )\n      {\n        v11 = dcgettext(0LL, \"failed to open /dev/tty for reading\", 5);\n        v12 = __errno_location();\n        error(1, *v12, v11);\n      }\n    }\n    fwrite(\"?...\", 1uLL, 4uLL, stderr);\n    if ( (unsigned int)sub_409E80(stderr) )\n    {\n      v7 = dcgettext(0LL, \"Failed to write to stderr\", 5);\n      v8 = __errno_location();\n      error(1, *v8, v7);\n    }\n    v4 = _IO_getc(qword_6123A8);\n    v5 = v4;\n    if ( v4 != 10 && v4 != -1 )\n    {\n      do\n        v4 = _IO_getc(qword_6123A8);\n      while ( v4 != -1 && v4 != 10 );\n    }\n    if ( v4 == -1 )\n    {\n      v9 = dcgettext(0LL, \"Failed to read from stdin\", 5);\n      v10 = __errno_location();\n      error(1, *v10, v9);\n    }\n    result = (v5 & 0xFFFFFFDF) == 89;\n  }\n  else\n  {\n    _IO_putc(10, stderr);\n    result = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403f30L", 
            "funcEndAddr": "0x404120L", 
            "funcName": "sub_403F30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404120(__int64 a1, __int64 a2, __int64 a3, const char **a4)\n{\n  const char **v4; // rbp\n  __int64 v5; // rsi\n  __pid_t v6; // ebx\n  __int64 v7; // rax\n  __int64 v8; // rbp\n  char *v9; // rbx\n  int *v10; // rax\n  __int64 result; // rax\n  char *v12; // rbx\n  int *v13; // rax\n  char *v14; // rbx\n  int *v15; // rax\n  char *v16; // rbx\n  __int64 v17; // rdi\n  __int64 v18; // r13\n  int v19; // esi\n  char *v20; // r12\n  int *v21; // rbx\n  char *v22; // r13\n  int v23; // edi\n  __int64 v24; // rax\n  char *v25; // rax\n  char *v26; // rax\n  int buf; // [rsp+8h] [rbp-40h]\n  int pipedes[2]; // [rsp+Ch] [rbp-3Ch]\n  int stat_loc[2]; // [rsp+14h] [rbp-34h]\n  __int16 v30; // [rsp+1Ch] [rbp-2Ch]\n\n  v4 = a4;\n  if ( dword_6122B0 && qword_6123E8 >= (unsigned __int64)dword_6122B0 )\n  {\n    do\n      sub_402F30(0, 1u);\n    while ( dword_6122B0 <= (unsigned __int64)qword_6123E8 );\n  }\n  if ( !byte_6123C1 )\n    goto LABEL_55;\n  if ( !sub_403F30(1) )\n    return 1LL;\n  if ( !byte_6123C1 )\n  {\nLABEL_55:\n    if ( byte_6123C2 )\n      sub_403F30(0);\n  }\n  sub_402F30(0, 0);\n  if ( pipe(pipedes) )\n  {\n    v12 = dcgettext(0LL, \"could not create pipe before fork\", 5);\n    v13 = __errno_location();\n    error(1, *v13, v12);\n  }\n  v5 = 2LL;\n  sub_409D40(pipedes[1]);\n  while ( 1 )\n  {\n    v6 = fork();\n    if ( v6 >= 0 || *__errno_location() != 11 || !qword_6123E8 )\n      break;\n    v5 = 1LL;\n    sub_402F30(0, 1u);\n  }\n  if ( v6 == -1 )\n  {\n    v16 = dcgettext(0LL, \"cannot fork\", 5);\n    v5 = (unsigned int)*__errno_location();\n    error(1, v5, v16);\nLABEL_34:\n    v17 = (unsigned int)pipedes[0];\n    close(pipedes[0]);\n    status = 0;\n    sub_405550(v17, v5);\n    v18 = (unsigned int)sub_4031A0(0);\n    v19 = snprintf(0LL, 0LL, \"%u\", v18) + 1;\n    v20 = (char *)malloc(v19);\n    v21 = __errno_location();\n    if ( v20 )\n    {\n      snprintf(v20, v19, \"%u\", (unsigned int)v18);\n      v22 = qword_6123B8;\n      if ( qword_6123B8 && setenv(qword_6123B8, v20, 1) < 0 )\n      {\n        v26 = dcgettext(0LL, \"failed to set environment variable %s\", 5);\n        error(0, *v21, v26, v22);\n      }\n      free(v20);\n    }\n    else\n    {\n      v25 = dcgettext(0LL, \"unable to allocate memory\", 5);\n      error(0, *v21, v25);\n    }\n    if ( !dword_6124D8 )\n    {\n      v30 = 108;\n      *(_QWORD *)stat_loc = 7815273878500238383LL;\n      close(0);\n      if ( open((const char *)stat_loc, 0) < 0 )\n      {\n        v24 = sub_408C90(0LL, 8LL, stat_loc);\n        error(0, *v21, \"%s\", v24);\n      }\n    }\n    if ( (unsigned __int8)sub_405070(v4) )\n    {\n      *v21 = 7;\n    }\n    else\n    {\n      execvp(*v4, (char *const *)v4);\n      if ( !*v21 )\n        goto LABEL_43;\n    }\n    write(pipedes[1], v21, 4uLL);\nLABEL_43:\n    close(pipedes[1]);\n    if ( *v21 == 7 || (error(0, *v21, \"%s\", *v4), *v21 != 2) )\n      v23 = 126;\n    else\n      v23 = 127;\n    _exit(v23);\n  }\n  if ( !v6 )\n    goto LABEL_34;\n  close(pipedes[1]);\n  v7 = sub_408FE0(pipedes[0], &buf, 4uLL);\n  v8 = v7;\n  if ( v7 == 4 )\n  {\n    close(pipedes[0]);\n    waitpid(v6, stat_loc, 0);\n    if ( buf != 7 )\n    {\n      if ( buf != 2 )\n        exit(126);\n      exit(127);\n    }\n    result = 0LL;\n  }\n  else\n  {\n    if ( v7 == -1 )\n    {\n      close(pipedes[0]);\n      v14 = dcgettext(\n              0LL,\n              \"errno-buffer safe_read failed in xargs_do_exec (this is probably a bug, please report it)\",\n              5);\n      v15 = __errno_location();\n      error(0, *v15, v14);\n    }\n    else if ( v7 )\n    {\n      v9 = dcgettext(0LL, \"read returned unexpected value %zu; this is probably a bug, please report it\", 5);\n      v10 = __errno_location();\n      error(1, *v10, v9, v8);\n    }\n    else\n    {\n      sub_4031A0(v6);\n    }\n    close(pipedes[0]);\n    result = 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404120L", 
            "funcEndAddr": "0x404572L", 
            "funcName": "sub_404120"
        }, 
        {
            "decompiledFuncCode": "char *sub_404580()\n{\n  char *v0; // r12\n\n  sub_409E80(stderr);\n  v0 = dcgettext(0LL, \"Kevin Dalley\", 5);\n  dcgettext(0LL, \"James Youngman\", 5);\n  dcgettext(0LL, \"Eric B. Decker\", 5);\n  sub_409550((char)stdout);\n  return v0;\n}\n", 
            "funcStartAddr": "0x404580L", 
            "funcEndAddr": "0x4045faL", 
            "funcName": "sub_404580"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404600(__int64 a1, __int64 a2, char a3, unsigned __int64 a4)\n{\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // rdx\n  __int64 v6; // rdx\n  unsigned __int64 result; // rax\n  unsigned __int64 v8; // rdx\n  unsigned __int64 v9; // rdx\n  unsigned __int64 v10; // rdx\n  __int64 v11; // rsi\n  unsigned __int64 v12; // rdx\n  unsigned __int64 v13; // rsi\n  __int64 v14; // rcx\n\n  v4 = *(_QWORD *)(a2 + 64);\n  if ( a3 )\n  {\n    if ( a4 > v4 )\n    {\n      *(_QWORD *)(a2 + 64) = a4;\n      v4 = a4;\n    }\n    if ( !v4 || (v5 = *(_QWORD *)(a2 + 72), v4 >= v5) )\n    {\n      v6 = *(_QWORD *)(a1 + 56);\n      result = a4 + 1;\n      if ( a4 == -1LL )\n        result = -1LL;\n      if ( v6 )\n        goto LABEL_9;\n      return result;\n    }\n    v11 = v5 - v4;\n    result = ((v5 - v4) >> 1) + a4;\n    if ( v11 == 1 )\n      result = a4 + 1;\n  }\n  else\n  {\n    v9 = *(_QWORD *)(a2 + 72);\n    if ( v9 > a4 || !v9 )\n      *(_QWORD *)(a2 + 72) = a4;\n    if ( v4 && (v10 = *(_QWORD *)(a2 + 72), v10 > v4) )\n    {\n      v12 = v10 - v4;\n      v13 = a4;\n      v14 = a4 - 1;\n      result = v13 - (v12 >> 1);\n      if ( v12 == 1 )\n        result = v14;\n    }\n    else\n    {\n      result = a4 >> 1;\n    }\n  }\n  v6 = *(_QWORD *)(a1 + 56);\n  if ( v6 )\n  {\nLABEL_9:\n    v8 = v6 + 1;\n    if ( v8 >= result )\n    {\n      result = v8;\n      if ( !v8 )\n        result = 1LL;\n    }\n    return result;\n  }\n  if ( !result )\n    result = 1LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x404600L", 
            "funcEndAddr": "0x404700L", 
            "funcName": "sub_404600"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_404700()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x404700L", 
            "funcEndAddr": "0x404703L", 
            "funcName": "sub_404700"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404710(const char *a1, unsigned __int64 a2)\n{\n  unsigned int v2; // ebx\n  char *v3; // rax\n  char *v5; // r12\n  int *v6; // rax\n  unsigned __int64 v7; // [rsp+8h] [rbp-20h]\n\n  v2 = 0;\n  v3 = getenv(a1);\n  if ( !v3 )\n    return v2;\n  if ( !(unsigned int)sub_4098E0(v3) )\n    return v7 < a2;\n  v5 = dcgettext(0LL, \"Environment variable %s is not set to a valid decimal number\", 5);\n  v6 = __errno_location();\n  error(1, *v6, v5, a1);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x404710L", 
            "funcEndAddr": "0x404798L", 
            "funcName": "sub_404710"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4047A0(__int64 a1, __int64 a2, char *a3, __int64 a4, char *a5, __int64 a6, __int64 a7)\n{\n  unsigned __int64 *v7; // rbx\n  char *v8; // r13\n  __int64 v9; // rbp\n  __int64 v10; // r15\n  char *v11; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  unsigned __int64 result; // rax\n  unsigned __int64 v16; // rcx\n  unsigned __int64 v17; // rbp\n  __int64 v18; // rdx\n  char *v19; // rax\n  char *src; // [rsp+8h] [rbp-40h]\n\n  src = a5;\n  if ( !a3 )\n    __assert_fail(\"arg != NULL\", \"buildcmd.c\", 0x165u, \"bc_push_arg\");\n  v7 = (unsigned __int64 *)a2;\n  v8 = a3;\n  v9 = a4;\n  v10 = a6;\n  if ( (_DWORD)a7 )\n  {\n    if ( a3 != \"do_not_care\" )\n      goto LABEL_4;\nLABEL_31:\n    v12 = *(_QWORD *)a2;\n    v14 = *(_QWORD *)(a2 + 16);\n    result = v7[1];\n    if ( *v7 < v14 )\n      goto LABEL_32;\n    goto LABEL_16;\n  }\n  *(_DWORD *)(a2 + 56) = 1;\n  if ( a3 == \"do_not_care\" )\n    goto LABEL_31;\nLABEL_4:\n  if ( (unsigned __int64)(*(_QWORD *)(a2 + 32) + a4 + a6) <= *(_QWORD *)(a1 + 24) )\n    goto LABEL_10;\n  if ( (_DWORD)a7 || *(_QWORD *)a2 == *(_QWORD *)(a1 + 56) )\n  {\n    v19 = dcgettext(0LL, \"cannot fit single argument within argument list size limit\", 5);\n    error(1, 0, v19);\n    if ( *(_QWORD *)(a1 + 48) )\n      goto LABEL_8;\nLABEL_35:\n    if ( !*(_DWORD *)a1 || !*(_QWORD *)(a1 + 72) && !*(_QWORD *)(a1 + 80) )\n      goto LABEL_9;\n    goto LABEL_8;\n  }\n  if ( !*(_QWORD *)(a1 + 48) )\n    goto LABEL_35;\nLABEL_8:\n  v11 = dcgettext(0LL, \"argument list too long\", 5);\n  error(1, 0, v11);\nLABEL_9:\n  sub_404C00(a1, a2);\nLABEL_10:\n  v12 = *(_QWORD *)a2;\n  if ( !(_DWORD)a7 && (v13 = *(_QWORD *)(a1 + 80)) != 0 && v13 == v12 - *(_QWORD *)(a1 + 56)\n    || v12 == *(_QWORD *)(a1 + 32) )\n  {\n    sub_404C00(a1, a2);\n    v12 = *(_QWORD *)a2;\n  }\n  v14 = *(_QWORD *)(a2 + 16);\n  result = v7[1];\n  if ( v12 >= v14 )\n  {\nLABEL_16:\n    if ( result )\n    {\n      v7[2] = 2 * v14;\n      result = sub_4096D0(result, 16 * v14);\n    }\n    else\n    {\n      v7[2] = 64LL;\n      result = sub_409680(512LL);\n    }\n    v7[1] = result;\n    v12 = *v7;\n    if ( v8 != \"do_not_care\" )\n      goto LABEL_19;\nLABEL_32:\n    *v7 = v12 + 1;\n    *(_QWORD *)(result + 8 * v12) = 0LL;\n    goto LABEL_26;\n  }\nLABEL_19:\n  v16 = v7[4];\n  *v7 = v12 + 1;\n  *(_QWORD *)(result + 8 * v12) = v16 + v7[3];\n  if ( src )\n  {\n    strcpy((char *)(v16 + v7[3]), src);\n    v16 = v10 + v7[4];\n    v7[4] = v16;\n  }\n  strcpy((char *)(v7[3] + v16), v8);\n  v17 = v7[4] + v9;\n  result = *v7;\n  v7[4] = v17;\n  if ( (_DWORD)a7 )\n  {\n    if ( result != *(_QWORD *)(a1 + 32) )\n    {\nLABEL_28:\n      v7[5] = v17;\n      return result;\n    }\n    goto LABEL_25;\n  }\n  v18 = *(_QWORD *)(a1 + 80);\n  if ( v18 && v18 == result - *(_QWORD *)(a1 + 56) || result == *(_QWORD *)(a1 + 32) )\n  {\nLABEL_25:\n    result = sub_404C00(a1, v7);\nLABEL_26:\n    if ( !(_DWORD)a7 )\n      return result;\n    v17 = v7[4];\n    goto LABEL_28;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4047a0L", 
            "funcEndAddr": "0x404a34L", 
            "funcName": "sub_4047A0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404A40(__int64 a1, __int64 a2, const char *a3, size_t a4, char *a5, __int64 a6, const char *a7, __int64 a8, int a9)\n{\n  const char *v9; // r15\n  __int64 v10; // r14\n  size_t v11; // r12\n  __int64 v12; // rdi\n  char *v13; // rbx\n  unsigned __int64 v14; // rbp\n  __int64 v15; // r13\n  unsigned __int64 v16; // rbp\n  __int64 v17; // rax\n  __int64 v18; // rax\n  const char *v19; // rsi\n  char *v21; // rax\n  const char *v22; // [rsp+8h] [rbp-70h]\n  __int64 v23; // [rsp+18h] [rbp-60h]\n  char *src; // [rsp+20h] [rbp-58h]\n  __int64 v25; // [rsp+30h] [rbp-48h]\n\n  v9 = a3;\n  v10 = a1;\n  v11 = a4;\n  v12 = *(_QWORD *)(a1 + 24);\n  v13 = dest;\n  v25 = a2;\n  src = a5;\n  v14 = v12 - 1;\n  v23 = a6;\n  if ( !dest )\n  {\n    v13 = (char *)sub_409680(v12 + 1);\n    dest = v13;\n  }\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v18 = sub_4066F0(v9, *(_QWORD *)(v10 + 48));\n      v22 = (const char *)v18;\n      if ( v18 )\n        break;\n      if ( v11 >= v14 )\n        goto LABEL_13;\n      v19 = v9;\n      v9 += v11;\n      strncpy(v13, v19, v11);\n      v14 -= v11;\n      v13 += v11;\n      v11 = 0LL;\n      if ( !*v9 )\n        goto LABEL_11;\n    }\n    v15 = v18 - (_QWORD)v9;\n    if ( v14 <= v18 - (__int64)v9 )\n      goto LABEL_13;\n    v16 = v14 - v15;\n    strncpy(v13, v9, v18 - (_QWORD)v9);\n    v13 += v15;\n    if ( v23 + a8 >= v16 )\n      break;\n    v14 = v16 - (v23 + a8);\n    if ( src )\n    {\n      strcpy(v13, src);\n      v13 += v23;\n    }\n    strcpy(v13, a7);\n    v17 = *(_QWORD *)(v10 + 40);\n    v13 += a8;\n    v9 = &v22[v17];\n    v11 = v11 - v17 - v15;\n    if ( !v22[v17] )\n      goto LABEL_11;\n  }\n  v9 = v22;\nLABEL_13:\n  if ( *v9 )\n  {\n    v21 = dcgettext(0LL, \"command too long\", 5);\n    error(1, 0, v21);\n  }\nLABEL_11:\n  *v13 = 0;\n  LODWORD(a7) = a9;\n  return sub_4047A0(v10, v25, dest, v13 + 1 - dest, 0LL, 0LL, (__int64)a7);\n}\n", 
            "funcStartAddr": "0x404a40L", 
            "funcEndAddr": "0x404bf8L", 
            "funcName": "sub_404A40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404C00(__int64 a1, unsigned __int64 *a2)\n{\n  unsigned __int64 *v2; // r12\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // r13\n  __int64 v5; // rax\n  unsigned __int64 v6; // r8\n  unsigned __int64 v7; // rbp\n  _QWORD *v8; // r15\n  unsigned __int64 v9; // rdx\n  unsigned __int64 v10; // rsi\n  __int64 i; // rax\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rbx\n  unsigned __int64 v14; // rsi\n  unsigned __int64 v15; // rsi\n  char *v16; // rax\n  unsigned __int64 v17; // rax\n  __int64 result; // rax\n  unsigned __int64 v19; // rax\n  unsigned __int64 v20; // rax\n  unsigned __int64 v21; // [rsp+10h] [rbp-40h]\n\n  v2 = a2;\n  sub_4047A0(a1, (__int64)a2, \"do_not_care\", 0LL, 0LL, 0LL, 0LL);\n  v3 = *a2;\n  if ( !*a2 )\n    __assert_fail(\"state->cmd_argc > 0\", \"buildcmd.c\", 0x115u, \"bc_do_exec\");\n  if ( *(_QWORD *)(a2[1] + 8 * v3 - 8) )\n    __assert_fail(\"state->cmd_argv[state->cmd_argc-1] == NULL\", \"buildcmd.c\", 0x116u, \"bc_do_exec\");\n  v4 = 0LL;\n  v5 = sub_409680(8 * v3 + 8);\n  v6 = *a2;\n  v7 = *(_QWORD *)(a1 + 56);\n  v8 = (_QWORD *)v5;\n  v9 = *a2;\n  do\n  {\n    if ( v7 )\n    {\n      v10 = v2[1];\n      for ( i = 0LL; i != v7; v8[i - 1] = *(_QWORD *)(v10 + 8 * i - 8) )\n        ++i;\n      v12 = v4 + v7;\n      v13 = v7;\n    }\n    else\n    {\n      v12 = v4;\n      v13 = 0LL;\n    }\n    if ( v6 > v13 && v12 < v9 )\n    {\n      v14 = v2[1];\n      do\n        v8[++v13 - 1] = *(_QWORD *)(v14 + 8 * ++v12 - 8);\n      while ( v6 > v13 && v12 < v9 );\n      if ( v13 < v7 )\n        __assert_fail(\"dst_pos >= ctl->initial_argc\", \"buildcmd.c\", 0x102u, \"copy_args\");\n    }\n    v21 = v6;\n    v15 = v2[6];\n    v8[v13] = 0LL;\n    if ( (*(unsigned int (__fastcall **)(__int64, unsigned __int64, _QWORD, _QWORD *))(a1 + 64))(\n           a1,\n           v15,\n           (unsigned int)v13,\n           v8) )\n    {\n      v20 = sub_404600(a1, (__int64)v2, 1, v21);\n      v7 = *(_QWORD *)(a1 + 56);\n      v6 = v20;\n      v4 = v13 + v4 - v7;\n    }\n    else if ( *(_QWORD *)(a1 + 56) + 1LL < v21 )\n    {\n      v19 = sub_404600(a1, (__int64)v2, 0, v21);\n      v7 = *(_QWORD *)(a1 + 56);\n      v6 = v19;\n    }\n    else\n    {\n      v16 = dcgettext(0LL, \"can't call exec() due to argument size restrictions\", 5);\n      error(1, 0, v16);\n      v7 = *(_QWORD *)(a1 + 56);\n      v6 = v21;\n    }\n    v9 = *v2;\n  }\n  while ( v4 + 1 < *v2 - v7 );\n  free(v8);\n  v17 = v2[5];\n  *v2 = v7;\n  v2[4] = v17;\n  result = -4294967296LL;\n  v2[7] = -4294967296LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x404c00L", 
            "funcEndAddr": "0x404e2dL", 
            "funcName": "sub_404C00"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_404E30()\n{\n  __int64 result; // rax\n\n  result = sysconf(0);\n  if ( result <= 0 )\n    result = 0x7FFFFFFFFFFFFFFFLL;\n  return result;\n}\n", 
            "funcStartAddr": "0x404e30L", 
            "funcEndAddr": "0x404e51L", 
            "funcName": "sub_404E30"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_404E60()\n{\n  __int64 v0; // rbp\n  char **v1; // rbx\n  char *i; // rdi\n  size_t v3; // rax\n\n  v0 = 0LL;\n  v1 = environ;\n  for ( i = *environ; *v1; v0 += v3 + 1 )\n  {\n    v3 = strlen(i);\n    ++v1;\n    i = *v1;\n  }\n  return v0;\n}\n", 
            "funcStartAddr": "0x404e60L", 
            "funcEndAddr": "0x404ea0L", 
            "funcName": "sub_404E60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404EA0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  unsigned __int64 v3; // rbp\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // rax\n  __int64 result; // rax\n\n  v2 = sub_404E60();\n  *(_QWORD *)(a1 + 16) = 4096LL;\n  v3 = v2;\n  v4 = sysconf(0);\n  *(_DWORD *)a1 = 0;\n  if ( (__int64)v4 <= 0 )\n    v4 = 0x7FFFFFFFFFFFFFFFLL;\n  *(_QWORD *)(a1 + 8) = v4;\n  if ( v3 > v4 )\n    return 1LL;\n  if ( v3 + a2 >= v4 )\n    return 2LL;\n  v5 = v4 - (v3 + a2);\n  *(_QWORD *)(a1 + 8) = v5;\n  *(_QWORD *)(a1 + 32) = (v5 >> 3) - 2;\n  if ( v5 >> 3 == 2 )\n    __assert_fail(\"ctl->max_arg_count > 0\", \"buildcmd.c\", 0x216u, \"bc_init_controlinfo\");\n  *(_QWORD *)(a1 + 24) = v5;\n  result = 0LL;\n  *(_QWORD *)(a1 + 40) = 0LL;\n  *(_QWORD *)(a1 + 48) = 0LL;\n  *(_QWORD *)(a1 + 56) = 0LL;\n  *(_QWORD *)(a1 + 64) = sub_404700;\n  *(_QWORD *)(a1 + 72) = 0LL;\n  *(_QWORD *)(a1 + 80) = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x404ea0L", 
            "funcEndAddr": "0x404f73L", 
            "funcName": "sub_404EA0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404F80(_QWORD *a1)\n{\n  unsigned __int64 result; // rax\n\n  result = a1[1];\n  if ( result > 0x1FFFF )\n  {\n    result = a1[2];\n    if ( result < 0x20001 )\n      result = 0x20000LL;\n  }\n  a1[3] = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x404f80L", 
            "funcEndAddr": "0x404fa4L", 
            "funcName": "sub_404F80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405050(__int64 a1, _QWORD *a2)\n{\n  __int64 result; // rax\n\n  *a2 = *(_QWORD *)(a1 + 56);\n  a2[4] = a2[5];\n  result = -4294967296LL;\n  a2[7] = -4294967296LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x405050L", 
            "funcEndAddr": "0x40506eL", 
            "funcName": "sub_405050"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405070(const char **a1)\n{\n  const char **v1; // r12\n  unsigned __int64 v2; // rbp\n  const char *v3; // rdi\n  unsigned __int64 i; // rbx\n  size_t v5; // rax\n  unsigned int v7; // edx\n\n  v1 = a1;\n  v2 = 0LL;\n  v3 = *a1;\n  for ( i = 0LL; v3; v2 += v5 )\n  {\n    v5 = strlen(v3);\n    v3 = v1[++i];\n  }\n  if ( (unsigned int)sub_404710(\"__GNU_FINDUTILS_EXEC_ARG_COUNT_LIMIT\", i) )\n    return 1LL;\n  LOBYTE(v7) = (unsigned int)sub_404710(\"__GNU_FINDUTILS_EXEC_ARG_LENGTH_LIMIT\", v2) != 0;\n  return v7;\n}\n", 
            "funcStartAddr": "0x405070L", 
            "funcEndAddr": "0x4050d9L", 
            "funcName": "sub_405070"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4050E0()\n{\n  __int64 v0; // rax\n  DIR *v1; // rbp\n  int v2; // er12\n  int v3; // ebx\n  struct dirent *v4; // rax\n  char v5; // dl\n  int v6; // eax\n\n  v0 = sub_405AA0(\"/proc/self/fd\");\n  if ( !v0 )\n    goto LABEL_15;\n  v1 = (DIR *)v0;\n  v2 = 0;\n  v3 = -1;\n  while ( 1 )\n  {\n    v4 = readdir(v1);\n    if ( !v4 )\n      break;\n    while ( 1 )\n    {\n      if ( v4->d_name[0] == 46 )\n      {\n        v5 = v4->d_name[1];\n        if ( v5 == 46 || !v5 )\n          break;\n      }\n      v2 = 1;\n      v6 = sub_4055F0(v4->d_name);\n      if ( v3 < v6 )\n        v3 = v6;\n      v4 = readdir(v1);\n      if ( !v4 )\n        goto LABEL_10;\n    }\n  }\nLABEL_10:\n  closedir(v1);\n  if ( !v2 )\nLABEL_15:\n    v3 = -1;\n  return (unsigned int)v3;\n}\n", 
            "funcStartAddr": "0x4050e0L", 
            "funcEndAddr": "0x40515cL", 
            "funcName": "sub_4050E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405160(int a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 v4; // rax\n  __int64 v5; // rdx\n\n  if ( sub_409D40(a1) & 1 )\n    return 0;\n  v4 = sub_405740(*(void **)a2);\n  if ( !v4 )\n    return (unsigned int)-1;\n  v5 = *(_QWORD *)(a2 + 8);\n  *(_QWORD *)a2 = v4;\n  *(_DWORD *)(v4 + 4 * v5) = a1;\n  result = 0LL;\n  *(_QWORD *)(a2 + 8) = v5 + 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x405160L", 
            "funcEndAddr": "0x4051caL", 
            "funcName": "sub_405160"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4051D0(int a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rsi\n  int v5; // ecx\n  __int64 i; // rax\n\n  v2 = a2;\n  if ( sub_409D40(a1) & 1 )\n    return 0LL;\n  v3 = *(_QWORD *)(a2 + 16);\n  v4 = *(_QWORD *)(a2 + 8);\n  if ( v3 < v4 )\n  {\n    v5 = *(_DWORD *)(*(_QWORD *)v2 + 4 * v3);\n    if ( v5 < a1 )\n    {\n      for ( i = v3 + 1; ; ++i )\n      {\n        if ( v4 == i )\n        {\n          *(_QWORD *)(v2 + 16) = v4;\n          goto LABEL_9;\n        }\n        v5 = *(_DWORD *)(*(_QWORD *)v2 + 4 * (i + 1) - 4);\n        if ( a1 <= v5 )\n          break;\n      }\n      *(_QWORD *)(v2 + 16) = i;\n    }\n    if ( a1 == v5 )\n      return 0LL;\n  }\nLABEL_9:\n  *(_DWORD *)(v2 + 24) = a1;\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x4051d0L", 
            "funcEndAddr": "0x405251L", 
            "funcName": "sub_4051D0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405260()\n{\n  __int64 v0; // rax\n  int v1; // ebx\n  int v2; // eax\n  unsigned int v3; // edx\n  struct rlimit v5; // [rsp+0h] [rbp-18h]\n\n  v0 = sysconf(4);\n  v1 = v0;\n  if ( v0 == -1 )\n    v1 = 20;\n  v2 = getrlimit(RLIMIT_NOFILE, &v5);\n  v3 = v1;\n  if ( !v2 )\n  {\n    v3 = v5.rlim_cur;\n    if ( v5.rlim_cur == -1LL )\n      v3 = v1;\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x405260L", 
            "funcEndAddr": "0x4052a5L", 
            "funcName": "sub_405260"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4052B0(int a1, __int64 (__fastcall *a2)(_QWORD, __int64), __int64 a3)\n{\n  int v3; // er14\n  __int64 v4; // r12\n  int v5; // ebp\n  int v6; // er15\n  int *v7; // rax\n  int v8; // edx\n  int v9; // edi\n  __int64 v10; // rbx\n  __int64 result; // rax\n  int v12; // [rsp+0h] [rbp-238h]\n  __int16 v13[281]; // [rsp+6h] [rbp-232h]\n\n  if ( a1 <= 0 )\n    return 0LL;\n  v3 = a1;\n  v4 = a3;\n  v5 = 0;\n  while ( 1 )\n  {\n    v6 = 64;\n    if ( v3 - v5 <= 64 )\n      v6 = v3 - v5;\n    if ( v3 - v5 > 0 )\n      break;\n    if ( poll((struct pollfd *)&v12, v6, 0) == -1 )\n      return 0xFFFFFFFFLL;\nLABEL_13:\n    v5 += v6;\n    if ( v3 <= v5 )\n      return 0LL;\n  }\n  v7 = &v12;\n  v8 = 0;\n  do\n  {\n    v7 += 2;\n    *((_WORD *)v7 - 1) = 0;\n    v9 = v5 + v8++;\n    *((_WORD *)v7 - 2) = 5;\n    *(v7 - 2) = v9;\n  }\n  while ( v8 < v6 );\n  if ( poll((struct pollfd *)&v12, v6, 0) == -1 )\n    return 0xFFFFFFFFLL;\n  v10 = 0LL;\n  while ( 1 )\n  {\n    if ( v13[4 * v10] != 32 )\n    {\n      result = a2((unsigned int)*(&v12 + 2 * v10), v4);\n      if ( (_DWORD)result )\n        return result;\n    }\n    if ( v6 <= (int)++v10 )\n      goto LABEL_13;\n  }\n}\n", 
            "funcStartAddr": "0x4052b0L", 
            "funcEndAddr": "0x405399L", 
            "funcName": "sub_4052B0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4053A0()\n{\n  int v0; // eax\n  __int64 result; // rax\n  void *v2; // [rsp+0h] [rbp-28h]\n  __int64 v3; // [rsp+8h] [rbp-20h]\n  __int64 v4; // [rsp+10h] [rbp-18h]\n\n  v0 = sub_4050E0();\n  if ( v0 < 0 )\n    v0 = sub_405260();\n  v2 = 0LL;\n  v4 = 0LL;\n  v3 = 0LL;\n  sub_4052B0((v0 != 0x7FFFFFFF) + v0, (__int64 (__fastcall *)(_QWORD, __int64))sub_405160, (__int64)&v2);\n  ptr = v2;\n  result = v3;\n  qword_612500 = v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x4053a0L", 
            "funcEndAddr": "0x405403L", 
            "funcName": "sub_4053A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405410(char a1)\n{\n  char v1; // bp\n  __int64 result; // rax\n  unsigned int v3; // ebx\n  int v4; // eax\n  int v5; // er14\n  char v6; // bp\n\n  v1 = byte_6124F9;\n  if ( !byte_6124F9 )\n  {\n    v4 = sub_405B30((unsigned __int64)\"/\");\n    v5 = v4;\n    if ( v4 >= 0 )\n    {\n      v6 = sub_409D40(v4);\n      close(v5);\n      byte_6124F9 = 1;\n      byte_6124F8 = v6 & 1;\n    }\n    else\n    {\n      byte_6124F8 = v1;\n      byte_6124F9 = 1;\n    }\n  }\n  LODWORD(result) = sub_405B30(a1);\n  v3 = result;\n  if ( (int)result < 0 || byte_6124F8 )\n    return (unsigned int)result;\n  sub_405860((unsigned int)result, 1LL);\n  return v3;\n}\n", 
            "funcStartAddr": "0x405410L", 
            "funcEndAddr": "0x40551eL", 
            "funcName": "sub_405410"
        }, 
        {
            "decompiledFuncCode": "void sub_405520()\n{\n  free(ptr);\n  ptr = 0LL;\n  qword_612500 = 0LL;\n}\n", 
            "funcStartAddr": "0x405520L", 
            "funcEndAddr": "0x40554bL", 
            "funcName": "sub_405520"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405550()\n{\n  __int64 v0; // rbx\n  void *v1; // rbp\n  int v2; // eax\n  __int64 result; // rax\n  unsigned int v4; // ebx\n  char *v5; // rax\n  void *v6; // [rsp+0h] [rbp-38h]\n  __int64 v7; // [rsp+8h] [rbp-30h]\n  __int64 v8; // [rsp+10h] [rbp-28h]\n  int v9; // [rsp+18h] [rbp-20h]\n\n  v0 = qword_612500;\n  v1 = ptr;\n  v2 = sub_4050E0();\n  if ( v2 < 0 )\n    v2 = sub_405260();\n  v7 = v0;\n  v6 = v1;\n  v8 = 0LL;\n  v9 = -1;\n  result = sub_4052B0(\n             (unsigned int)(v2 != 0x7FFFFFFF) + v2,\n             (__int64 (__fastcall *)(_QWORD, __int64))sub_4051D0,\n             (__int64)&v6);\n  v4 = v9;\n  if ( v9 >= 0 )\n  {\n    v5 = dcgettext(\n           0LL,\n           \"File descriptor %d will leak; please report this as a bug, remembering to include a detailed description of t\"\n           \"he simplest way to reproduce this problem.\",\n           5);\n    error(0, 0, v5, v4);\n    __assert_fail(\"no_leaks\", \"fdleak.c\", 0x17Eu, \"complain_about_leaky_fds\");\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405550L", 
            "funcEndAddr": "0x4055f0L", 
            "funcName": "sub_405550"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4055F0(char *nptr, unsigned int a2)\n{\n  int *v2; // rax\n  int *v3; // r12\n  __int64 v4; // rbx\n  __int64 v6; // rbp\n  char *v7; // rax\n  __int64 v8; // r14\n  __int64 v9; // rbp\n  char *v10; // rax\n  char *endptr; // [rsp+8h] [rbp-30h]\n\n  v2 = __errno_location();\n  *v2 = 0;\n  v3 = v2;\n  v4 = strtol(nptr, &endptr, 10);\n  if ( (unsigned __int64)(v4 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL )\n  {\n    error(1, *v3, \"%s\", nptr);\nLABEL_3:\n    *v3 = 34;\n    error(1, 34, \"%s\", nptr);\n    return (unsigned int)v4;\n  }\n  if ( (unsigned __int64)(v4 + 0x80000000LL) > 0xFFFFFFFF )\n    goto LABEL_3;\n  if ( !*endptr )\n  {\n    if ( endptr == nptr )\n    {\n      v6 = sub_408C90(0LL, a2, endptr);\n      v7 = dcgettext(0LL, \"Expected an integer: %s\", 5);\n      error(1, *v3, v7, v6);\n    }\n    return (unsigned int)v4;\n  }\n  v8 = sub_408C90(1LL, a2, nptr);\n  v9 = sub_408C90(0LL, a2, endptr);\n  v10 = dcgettext(0LL, \"Unexpected suffix %s on %s\", 5);\n  error(1, *v3, v10, v9, v8);\n  return (unsigned int)v4;\n}\n", 
            "funcStartAddr": "0x4055f0L", 
            "funcEndAddr": "0x40573eL", 
            "funcName": "sub_4055F0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_405740(void *ptr, unsigned __int64 a2, unsigned __int64 *a3)\n{\n  void *v3; // r13\n  unsigned __int64 *v4; // rbp\n  unsigned __int64 v5; // rbx\n  int *v6; // rax\n  int v7; // er14\n  unsigned __int64 v8; // rsi\n  int *v9; // r12\n  void *result; // rax\n  size_t v11; // rdi\n\n  v3 = ptr;\n  v4 = a3;\n  v5 = a2;\n  v6 = __errno_location();\n  v7 = *v6;\n  if ( !a2 )\n    __assert_fail(\"wanted > 0u\", \"extendbuf.c\", 0x47u, \"extendbuf\");\n  v8 = *v4;\n  v9 = v6;\n  if ( *v4 )\n  {\n    result = ptr;\n    if ( v8 < v5 )\n    {\n      v11 = 2 * v8;\n      if ( v8 <= 2 * v8 )\n        goto LABEL_8;\n      v11 = v5;\n      goto LABEL_18;\n    }\n  }\n  else\n  {\n    v11 = 32LL;\n    if ( v5 > 0x10 )\n    {\n      while ( 1 )\n      {\nLABEL_8:\n        if ( v11 >= v5 )\n        {\n          if ( !v8 )\n            goto LABEL_10;\n          goto LABEL_17;\n        }\n        if ( v11 > 2 * v11 )\n          break;\n        v11 *= 2LL;\n      }\n      v11 = v5;\n      if ( !v8 )\n        goto LABEL_10;\nLABEL_17:\n      result = v3;\n      if ( v8 != v11 )\n      {\nLABEL_18:\n        *v4 = v11;\n        result = realloc(v3, v11);\n        if ( !result )\n          return 0LL;\nLABEL_13:\n        *v9 = v7;\n        return result;\n      }\n    }\n    else\n    {\n      v11 = 16LL;\nLABEL_10:\n      if ( v3 )\n        __assert_fail(\"NULL == existing\", \"extendbuf.c\", 0x4Fu, \"extendbuf\");\n      *v4 = v11;\n      result = malloc(v11);\n    }\n  }\n  if ( result )\n    goto LABEL_13;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x405740L", 
            "funcEndAddr": "0x40583eL", 
            "funcName": "sub_405740"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405860(char a1, char a2)\n{\n  int v2; // eax\n  int v3; // ecx\n  int v4; // eax\n  unsigned int v5; // edx\n  __int64 result; // rax\n\n  v2 = sub_409D40(a1);\n  if ( v2 < 0 )\n    return 0xFFFFFFFFLL;\n  v3 = v2;\n  v4 = v2 | 1;\n  v5 = v3 & 0xFFFFFFFE;\n  if ( a2 )\n    v5 = v4;\n  result = 0LL;\n  if ( v5 != v3 )\n    result = (unsigned int)-((unsigned int)sub_409D40(a1) == -1);\n  return result;\n}\n", 
            "funcStartAddr": "0x405860L", 
            "funcEndAddr": "0x4058b7L", 
            "funcName": "sub_405860"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4058E0()\n{\n  FILE *v0; // rbx\n  int v2; // eax\n  FILE *v3; // rdi\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // r12\n  int *v7; // rax\n  int *v8; // rbp\n  __int64 v9; // rax\n  int v10; // eax\n\n  v0 = stdin;\n  if ( !sub_409EC0(stdin) )\n  {\n    if ( !(unsigned int)sub_40B2B0(v0) )\n      return sub_405A00();\n    goto LABEL_6;\n  }\n  v10 = sub_409EF0(v0, 0LL, 1LL);\n  v3 = stdin;\n  if ( !v10 )\n  {\n    v2 = sub_409E80(stdin);\n    v3 = stdin;\n    if ( v2 )\n    {\n      sub_40B2B0(stdin);\n      goto LABEL_6;\n    }\n  }\n  if ( (unsigned int)sub_40B2B0(v3) )\n  {\nLABEL_6:\n    v4 = dcgettext(0LL, \"error closing file\", 5);\n    v5 = qword_612510;\n    v6 = v4;\n    v7 = __errno_location();\n    v8 = v7;\n    if ( v5 )\n    {\n      v9 = sub_408E10(v5);\n      error(0, *v8, \"%s: %s\", v9, v6);\n    }\n    else\n    {\n      error(0, *v7, \"%s\", v6);\n    }\n    sub_405A00();\n    _exit(dword_6122C0);\n  }\n  return sub_405A00();\n}\n", 
            "funcStartAddr": "0x4058e0L", 
            "funcEndAddr": "0x4059ddL", 
            "funcName": "sub_4058E0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405A00()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_40B2B0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_612518 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_612520 )\n      {\n        v5 = sub_408E10(qword_612520);\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(dword_6122C0);\n    }\n  }\n  result = sub_40B2B0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x405a00L", 
            "funcEndAddr": "0x405a9eL", 
            "funcName": "sub_405A00"
        }, 
        {
            "decompiledFuncCode": "DIR *__fastcall sub_405AA0(const char *a1)\n{\n  DIR *v1; // rax\n  DIR *v2; // rbx\n  unsigned int v3; // eax\n  int v5; // er12\n  int *v6; // rax\n  int *v7; // rbp\n  int v8; // er14\n  DIR *v9; // r13\n  DIR *v10; // rax\n\n  v1 = opendir(a1);\n  v2 = v1;\n  if ( !v1 )\n    return v2;\n  v3 = dirfd(v1);\n  if ( v3 > 2 )\n    return v2;\n  v5 = sub_409080(v3);\n  v6 = __errno_location();\n  v7 = v6;\n  if ( v5 >= 0 )\n  {\n    v10 = fdopendir(v5);\n    v8 = *v7;\n    v9 = v10;\n    if ( !v10 )\n      close(v5);\n  }\n  else\n  {\n    v8 = *v6;\n    v9 = 0LL;\n  }\n  closedir(v2);\n  *v7 = v8;\n  return v9;\n}\n", 
            "funcStartAddr": "0x405aa0L", 
            "funcEndAddr": "0x405b2eL", 
            "funcName": "sub_405AA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405B30(const char *a1, char a2, unsigned int a3)\n{\n  __int64 v3; // rdx\n  int v4; // eax\n  unsigned int v6; // [rsp+30h] [rbp-28h]\n\n  v6 = a3;\n  v3 = 0LL;\n  if ( a2 & 0x40 )\n    v3 = v6;\n  v4 = open(a1, a2, v3);\n  return sub_409090(v4);\n}\n", 
            "funcStartAddr": "0x405b30L", 
            "funcEndAddr": "0x405b7aL", 
            "funcName": "sub_405B30"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_405B80@<rax>(unsigned __int64 a1@<rdx>, _QWORD *a2@<rcx>, __int64 a3@<rbp>, unsigned __int8 *a4@<rdi>, __int64 a5@<rsi>)\n{\n  unsigned __int8 *v5; // rbx\n  void *v6; // rsp\n  unsigned __int64 v7; // rdi\n  __int64 v8; // r8\n  __int64 v9; // r9\n  char v10; // al\n  __int64 v11; // r8\n  unsigned __int8 *v12; // r9\n  __int64 v13; // rax\n  __int64 v14; // r10\n  __int64 v16; // rax\n  _QWORD *v17; // [rsp-6h] [rbp-30h]\n  unsigned __int64 v18; // [rsp+2h] [rbp-28h]\n  __int64 v19; // [rsp+Ah] [rbp-20h]\n  __int64 v20; // [rsp+22h] [rbp-8h]\n\n  if ( a1 > 0x1FFFFFFFFFFFFFFFLL )\n    return 0LL;\n  v20 = a3;\n  v5 = a4;\n  if ( 8 * a1 > 0xFAF )\n  {\n    v17 = a2;\n    v18 = a1;\n    v19 = a5;\n    v16 = sub_40B890();\n    a2 = v17;\n    a1 = v18;\n    v7 = v16;\n    if ( v16 )\n      goto LABEL_4;\n    return 0LL;\n  }\n  v6 = alloca(8 * a1 + 24);\n  v7 = (((unsigned __int64)&v17 + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  if ( (((unsigned __int64)&v17 + 7) & 0xFFFFFFFFFFFFFFF0LL) == -16LL )\n    return 0LL;\nLABEL_4:\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v8 = 0LL;\n  v9 = 2LL;\n  if ( a1 > 2 )\n  {\n    do\n    {\n      v10 = *(_BYTE *)(a5 + v9 - 1);\n      if ( v10 == *(_BYTE *)(a5 + v8) )\n      {\nLABEL_22:\n        *(_QWORD *)(v7 + 8 * v9) = v9 - ++v8;\n      }\n      else\n      {\n        while ( v8 )\n        {\n          v8 -= *(_QWORD *)(v7 + 8 * v8);\n          if ( *(_BYTE *)(a5 + v8) == v10 )\n            goto LABEL_22;\n        }\n        *(_QWORD *)(v7 + 8 * v9) = v9;\n        v8 = 0LL;\n      }\n      ++v9;\n    }\n    while ( a1 != v9 );\n  }\n  *a2 = 0LL;\n  v11 = *v5;\n  v12 = v5;\n  v13 = 0LL;\nLABEL_12:\n  while ( 2 )\n  {\n    if ( (_BYTE)v11 )\n    {\n      while ( *(_BYTE *)(a5 + v13) != (_BYTE)v11 )\n      {\n        if ( !v13 )\n        {\n          v11 = v12[1];\n          ++v5;\n          ++v12;\n          goto LABEL_12;\n        }\n        v14 = *(_QWORD *)(v7 + 8 * v13);\n        v5 += v14;\n        v13 -= v14;\n      }\n      if ( a1 != ++v13 )\n      {\n        v11 = *++v12;\n        continue;\n      }\n      *a2 = v5;\n    }\n    break;\n  }\n  sub_40B900(v7, a5, a1, a2, v11, v12);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x405b80L", 
            "funcEndAddr": "0x405cf6L", 
            "funcName": "sub_405B80"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_405D00()\n{\n  __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n}\n", 
            "funcStartAddr": "0x405d00L", 
            "funcEndAddr": "0x405d1dL", 
            "funcName": "sub_405D00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405D20(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbx\n  __int64 v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  size_t v13; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  __int64 v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  __int64 v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char *v24; // rax\n  char v25; // al\n  __int64 v26; // rax\n  size_t v27; // rdx\n  unsigned int v28; // eax\n  unsigned int v29; // eax\n  __int64 v30; // rdx\n  void *v32; // rax\n  size_t v33; // rax\n  size_t v34; // rax\n  char *v35; // rbx\n  __int64 v36; // rax\n  __int64 v37; // rax\n  __int64 v38; // rbx\n  __int64 v39; // r14\n  unsigned int v40; // eax\n  size_t v41; // rax\n  char *v42; // r15\n  __int64 v43; // rax\n  __int64 v44; // rax\n  size_t v45; // rax\n  size_t v46; // rax\n  char *v47; // rbx\n  __int64 v48; // rax\n  __int64 v49; // rax\n  size_t v50; // rax\n  size_t v51; // rax\n  char **v52; // [rsp+0h] [rbp-110h]\n  mbstate_t *ps; // [rsp+8h] [rbp-108h]\n  unsigned __int64 v54; // [rsp+10h] [rbp-100h]\n  mbstate_t *v55; // [rsp+18h] [rbp-F8h]\n  char v56; // [rsp+20h] [rbp-F0h]\n  __int64 v57; // [rsp+24h] [rbp-ECh]\n  char v58; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v61; // [rsp+40h] [rbp-D0h]\n  unsigned int v62; // [rsp+44h] [rbp-CCh]\n  __int64 v63; // [rsp+48h] [rbp-C8h]\n  char v64; // [rsp+60h] [rbp-B0h]\n  __int64 v65; // [rsp+64h] [rbp-ACh]\n  char v66; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v68; // [rsp+78h] [rbp-98h]\n  char v69; // [rsp+80h] [rbp-90h]\n  unsigned int v70; // [rsp+84h] [rbp-8Ch]\n  char v71; // [rsp+A0h] [rbp-70h]\n  __int64 v72; // [rsp+A4h] [rbp-6Ch]\n  char v73; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v75; // [rsp+B8h] [rbp-58h]\n  char v76; // [rsp+C0h] [rbp-50h]\n  unsigned int v77; // [rsp+C4h] [rbp-4Ch]\n\n  ps = a1;\n  v52 = a3;\n  v54 = sub_40BA40(a2);\n  if ( v54 > 0x492492492492492LL )\n    return 0LL;\n  if ( 56 * v54 > 0xFAF )\n  {\n    v5 = sub_40B890();\n  }\n  else\n  {\n    v4 = alloca(56 * v54 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v56 = 0;\n  v58 = 0;\n  v57 = 0LL;\n  v7 = v5 + 48 * v54;\n  while ( 1 )\n  {\n    if ( !v56 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( ((unsigned int)dword_40F520[(*(_BYTE *)src >> 5) & 7] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v61 = 1;\n        v62 = v9;\n        v10 = v9;\n        v58 = 1;\n        if ( !v9 )\n          goto LABEL_23;\n        goto LABEL_8;\n      }\n      if ( !mbsinit((const mbstate_t *)&v57) )\n        goto LABEL_114;\n      v56 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_409040(src, v13);\n    a2 = v14;\n    v16 = sub_40B170(&v62, v14, v15, &v57);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v61 = 0;\n      v58 = 1;\n      goto LABEL_9;\n    }\n    if ( v16 != -2LL )\n      break;\n    v33 = strlen((const char *)src);\n    v61 = 0;\n    n = v33;\n    v11 = 0;\n    v58 = 1;\nLABEL_9:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v63 )\n    {\n      v32 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v32;\n      v11 = v61;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v62;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v58 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_113;\n    if ( v62 )\n      goto LABEL_115;\n  }\n  v61 = 1;\n  if ( mbsinit((const mbstate_t *)&v57) )\n    v56 = 0;\n  v10 = v62;\n  v58 = 1;\n  if ( v62 )\n  {\nLABEL_8:\n    v11 = 1;\n    goto LABEL_9;\n  }\nLABEL_23:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v54 <= 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v55 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v21 = v5 + 48 * v17;\n        if ( v20 && *(_BYTE *)(v21 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v21 + 20) )\n            goto LABEL_32;\n        }\n        else\n        {\n          v22 = *(_QWORD *)(v18 + 8);\n          if ( v22 == *(_QWORD *)(v21 + 8) )\n          {\n            a2 = *(char **)v21;\n            if ( !memcmp(*(const void **)v18, *(const void **)v21, v22) )\n            {\nLABEL_32:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = (char *)v55 - ++v17;\n              goto LABEL_33;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = v55;\nLABEL_33:\n      v55 = (mbstate_t *)((char *)v55 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v54 != v55 );\n  }\n  v64 = 0;\n  v23 = 0LL;\n  v66 = 0;\n  *v52 = 0LL;\n  v24 = (char *)ps;\n  ps = (mbstate_t *)&v72;\n  v71 = 0;\n  v65 = 0LL;\n  v72 = 0LL;\n  v73 = 0;\n  v55 = (mbstate_t *)&v65;\n  s = v24;\n  s2 = v24;\n  v25 = 0;\nLABEL_35:\n  if ( v25 )\n  {\n    if ( !v76 )\n      goto LABEL_37;\n    goto LABEL_49;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v71 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( ((unsigned int)dword_40F520[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1 )\n        {\n          v75 = 1LL;\n          v29 = *(char *)s2;\n          v76 = 1;\n          v77 = v29;\n          v73 = 1;\n          goto LABEL_49;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_114;\n        v71 = 1;\n      }\n      v34 = __ctype_get_mb_cur_max();\n      v35 = (char *)s2;\n      v36 = sub_409040(s2, v34);\n      a2 = v35;\n      v37 = sub_40B170(&v77, v35, v36, &v72);\n      v75 = v37;\n      switch ( v37 )\n      {\n        case -1LL:\n          v75 = 1LL;\n          v76 = 0;\n          v73 = 1;\nLABEL_37:\n          v26 = v5 + 48 * v23;\n          goto LABEL_38;\n        case -2LL:\n          v50 = strlen((const char *)s2);\n          v76 = 0;\n          v75 = v50;\n          v73 = 1;\n          goto LABEL_37;\n        case 0LL:\n          v75 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_113;\n          if ( v77 )\n            goto LABEL_115;\n          break;\n      }\n      v76 = 1;\n      if ( mbsinit((const mbstate_t *)&v72) )\n        v71 = 0;\n      v73 = 1;\nLABEL_49:\n      v30 = v77;\n      if ( !v77 )\n        goto LABEL_54;\n      v26 = v5 + 48 * v23;\n      if ( *(_BYTE *)(v26 + 16) )\n      {\n        if ( *(_DWORD *)(v26 + 20) != v77 )\n        {\nLABEL_39:\n          if ( !v23 )\n            goto LABEL_40;\n          goto LABEL_74;\n        }\n      }\n      else\n      {\nLABEL_38:\n        v27 = *(_QWORD *)(v26 + 8);\n        if ( v27 != v75 )\n          goto LABEL_39;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v26, s2, v27) )\n        {\n          if ( !v23 )\n          {\nLABEL_40:\n            if ( v66 )\n            {\n              if ( v69 )\n                goto LABEL_44;\n              goto LABEL_45;\n            }\n            if ( !v64 )\n            {\n              if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n              {\n                v68 = 1LL;\n                v28 = *s;\n                v69 = 1;\n                v70 = v28;\n                v66 = 1;\nLABEL_44:\n                if ( !v70 )\nLABEL_117:\n                  abort();\nLABEL_45:\n                s += v68;\n                s2 = (char *)s2 + v75;\n                v66 = 0;\n                v73 = 0;\n                continue;\n              }\n              if ( mbsinit(v55) )\n              {\n                v64 = 1;\n                goto LABEL_99;\n              }\nLABEL_114:\n              __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_99:\n            v46 = __ctype_get_mb_cur_max();\n            v47 = s;\n            v48 = sub_409040(s, v46);\n            a2 = v47;\n            v49 = sub_40B170(&v70, v47, v48, &v65);\n            v68 = v49;\n            if ( v49 == -1 )\n            {\n              v68 = 1LL;\n              v69 = 0;\n              goto LABEL_45;\n            }\n            if ( v49 == -2 )\n            {\n              v51 = strlen(s);\n              v69 = 0;\n              v68 = v51;\n              goto LABEL_45;\n            }\n            if ( v49 )\n            {\nLABEL_104:\n              v69 = 1;\n              if ( mbsinit((const mbstate_t *)&v65) )\n                v64 = 0;\n              v66 = 1;\n              goto LABEL_44;\n            }\n            v68 = 1LL;\n            if ( !*s )\n            {\n              if ( !v70 )\n                goto LABEL_104;\nLABEL_115:\n              sub_405D00();\n            }\nLABEL_113:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_74:\n          v38 = *(_QWORD *)(v7 + 8 * v23);\n          v25 = v73;\n          v39 = v23 - v38;\n          if ( !v38 )\n            goto LABEL_35;\n          if ( !v66 )\n            goto LABEL_78;\n          if ( v69 )\n            goto LABEL_81;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v66 = 0;\n              s += v68;\n              if ( !--v38 )\n              {\n                v25 = v73;\n                v23 = v39;\n                goto LABEL_35;\n              }\nLABEL_78:\n              if ( !v64 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> v8) & 1 )\n                {\n                  v68 = 1LL;\n                  v40 = *s;\n                  v69 = 1;\n                  v70 = v40;\n                  v66 = 1;\nLABEL_81:\n                  a2 = (char *)v70;\n                  if ( !v70 )\n                    goto LABEL_117;\n                  continue;\n                }\n                if ( !mbsinit(v55) )\n                  goto LABEL_114;\n                v64 = 1;\n              }\n              break;\n            }\n            v41 = __ctype_get_mb_cur_max();\n            v42 = s;\n            v43 = sub_409040(s, v41);\n            a2 = v42;\n            v44 = sub_40B170(&v70, v42, v43, &v65);\n            v68 = v44;\n            switch ( v44 )\n            {\n              case -1LL:\n                v68 = 1LL;\n                v69 = 0;\n                continue;\n              case -2LL:\n                v45 = strlen(s);\n                v69 = 0;\n                v68 = v45;\n                continue;\n              case 0LL:\n                v68 = 1LL;\n                if ( *s )\n                  goto LABEL_113;\n                if ( v70 )\n                  __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v69 = 1;\n          if ( mbsinit((const mbstate_t *)&v65) )\n            v64 = 0;\n          v66 = 1;\n          goto LABEL_81;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v75;\n    v73 = 0;\n    if ( v54 != v23 )\n      continue;\n    break;\n  }\n  *v52 = s;\nLABEL_54:\n  sub_40B900(v5, a2, v30, v8, v10, v3);\n  return 1LL;\n}\n\n__int64 __fastcall sub_405D20(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbx\n  __int64 v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  size_t v13; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  __int64 v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  __int64 v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char *v24; // rax\n  char v25; // al\n  __int64 v26; // rax\n  size_t v27; // rdx\n  unsigned int v28; // eax\n  unsigned int v29; // eax\n  __int64 v30; // rdx\n  void *v32; // rax\n  size_t v33; // rax\n  size_t v34; // rax\n  char *v35; // rbx\n  __int64 v36; // rax\n  __int64 v37; // rax\n  __int64 v38; // rbx\n  __int64 v39; // r14\n  unsigned int v40; // eax\n  size_t v41; // rax\n  char *v42; // r15\n  __int64 v43; // rax\n  __int64 v44; // rax\n  size_t v45; // rax\n  size_t v46; // rax\n  char *v47; // rbx\n  __int64 v48; // rax\n  __int64 v49; // rax\n  size_t v50; // rax\n  size_t v51; // rax\n  char **v52; // [rsp+0h] [rbp-110h]\n  mbstate_t *ps; // [rsp+8h] [rbp-108h]\n  unsigned __int64 v54; // [rsp+10h] [rbp-100h]\n  mbstate_t *v55; // [rsp+18h] [rbp-F8h]\n  char v56; // [rsp+20h] [rbp-F0h]\n  __int64 v57; // [rsp+24h] [rbp-ECh]\n  char v58; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v61; // [rsp+40h] [rbp-D0h]\n  unsigned int v62; // [rsp+44h] [rbp-CCh]\n  __int64 v63; // [rsp+48h] [rbp-C8h]\n  char v64; // [rsp+60h] [rbp-B0h]\n  __int64 v65; // [rsp+64h] [rbp-ACh]\n  char v66; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v68; // [rsp+78h] [rbp-98h]\n  char v69; // [rsp+80h] [rbp-90h]\n  unsigned int v70; // [rsp+84h] [rbp-8Ch]\n  char v71; // [rsp+A0h] [rbp-70h]\n  __int64 v72; // [rsp+A4h] [rbp-6Ch]\n  char v73; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v75; // [rsp+B8h] [rbp-58h]\n  char v76; // [rsp+C0h] [rbp-50h]\n  unsigned int v77; // [rsp+C4h] [rbp-4Ch]\n\n  ps = a1;\n  v52 = a3;\n  v54 = sub_40BA40(a2);\n  if ( v54 > 0x492492492492492LL )\n    return 0LL;\n  if ( 56 * v54 > 0xFAF )\n  {\n    v5 = sub_40B890();\n  }\n  else\n  {\n    v4 = alloca(56 * v54 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v56 = 0;\n  v58 = 0;\n  v57 = 0LL;\n  v7 = v5 + 48 * v54;\n  while ( 1 )\n  {\n    if ( !v56 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( ((unsigned int)dword_40F520[(*(_BYTE *)src >> 5) & 7] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v61 = 1;\n        v62 = v9;\n        v10 = v9;\n        v58 = 1;\n        if ( !v9 )\n          goto LABEL_23;\n        goto LABEL_8;\n      }\n      if ( !mbsinit((const mbstate_t *)&v57) )\n        goto LABEL_114;\n      v56 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_409040(src, v13);\n    a2 = v14;\n    v16 = sub_40B170(&v62, v14, v15, &v57);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v61 = 0;\n      v58 = 1;\n      goto LABEL_9;\n    }\n    if ( v16 != -2LL )\n      break;\n    v33 = strlen((const char *)src);\n    v61 = 0;\n    n = v33;\n    v11 = 0;\n    v58 = 1;\nLABEL_9:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v63 )\n    {\n      v32 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v32;\n      v11 = v61;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v62;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v58 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_113;\n    if ( v62 )\n      goto LABEL_115;\n  }\n  v61 = 1;\n  if ( mbsinit((const mbstate_t *)&v57) )\n    v56 = 0;\n  v10 = v62;\n  v58 = 1;\n  if ( v62 )\n  {\nLABEL_8:\n    v11 = 1;\n    goto LABEL_9;\n  }\nLABEL_23:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v54 <= 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v55 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v21 = v5 + 48 * v17;\n        if ( v20 && *(_BYTE *)(v21 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v21 + 20) )\n            goto LABEL_32;\n        }\n        else\n        {\n          v22 = *(_QWORD *)(v18 + 8);\n          if ( v22 == *(_QWORD *)(v21 + 8) )\n          {\n            a2 = *(char **)v21;\n            if ( !memcmp(*(const void **)v18, *(const void **)v21, v22) )\n            {\nLABEL_32:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = (char *)v55 - ++v17;\n              goto LABEL_33;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = v55;\nLABEL_33:\n      v55 = (mbstate_t *)((char *)v55 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v54 != v55 );\n  }\n  v64 = 0;\n  v23 = 0LL;\n  v66 = 0;\n  *v52 = 0LL;\n  v24 = (char *)ps;\n  ps = (mbstate_t *)&v72;\n  v71 = 0;\n  v65 = 0LL;\n  v72 = 0LL;\n  v73 = 0;\n  v55 = (mbstate_t *)&v65;\n  s = v24;\n  s2 = v24;\n  v25 = 0;\nLABEL_35:\n  if ( v25 )\n  {\n    if ( !v76 )\n      goto LABEL_37;\n    goto LABEL_49;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v71 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( ((unsigned int)dword_40F520[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1 )\n        {\n          v75 = 1LL;\n          v29 = *(char *)s2;\n          v76 = 1;\n          v77 = v29;\n          v73 = 1;\n          goto LABEL_49;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_114;\n        v71 = 1;\n      }\n      v34 = __ctype_get_mb_cur_max();\n      v35 = (char *)s2;\n      v36 = sub_409040(s2, v34);\n      a2 = v35;\n      v37 = sub_40B170(&v77, v35, v36, &v72);\n      v75 = v37;\n      switch ( v37 )\n      {\n        case -1LL:\n          v75 = 1LL;\n          v76 = 0;\n          v73 = 1;\nLABEL_37:\n          v26 = v5 + 48 * v23;\n          goto LABEL_38;\n        case -2LL:\n          v50 = strlen((const char *)s2);\n          v76 = 0;\n          v75 = v50;\n          v73 = 1;\n          goto LABEL_37;\n        case 0LL:\n          v75 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_113;\n          if ( v77 )\n            goto LABEL_115;\n          break;\n      }\n      v76 = 1;\n      if ( mbsinit((const mbstate_t *)&v72) )\n        v71 = 0;\n      v73 = 1;\nLABEL_49:\n      v30 = v77;\n      if ( !v77 )\n        goto LABEL_54;\n      v26 = v5 + 48 * v23;\n      if ( *(_BYTE *)(v26 + 16) )\n      {\n        if ( *(_DWORD *)(v26 + 20) != v77 )\n        {\nLABEL_39:\n          if ( !v23 )\n            goto LABEL_40;\n          goto LABEL_74;\n        }\n      }\n      else\n      {\nLABEL_38:\n        v27 = *(_QWORD *)(v26 + 8);\n        if ( v27 != v75 )\n          goto LABEL_39;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v26, s2, v27) )\n        {\n          if ( !v23 )\n          {\nLABEL_40:\n            if ( v66 )\n            {\n              if ( v69 )\n                goto LABEL_44;\n              goto LABEL_45;\n            }\n            if ( !v64 )\n            {\n              if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n              {\n                v68 = 1LL;\n                v28 = *s;\n                v69 = 1;\n                v70 = v28;\n                v66 = 1;\nLABEL_44:\n                if ( !v70 )\nLABEL_117:\n                  abort();\nLABEL_45:\n                s += v68;\n                s2 = (char *)s2 + v75;\n                v66 = 0;\n                v73 = 0;\n                continue;\n              }\n              if ( mbsinit(v55) )\n              {\n                v64 = 1;\n                goto LABEL_99;\n              }\nLABEL_114:\n              __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_99:\n            v46 = __ctype_get_mb_cur_max();\n            v47 = s;\n            v48 = sub_409040(s, v46);\n            a2 = v47;\n            v49 = sub_40B170(&v70, v47, v48, &v65);\n            v68 = v49;\n            if ( v49 == -1 )\n            {\n              v68 = 1LL;\n              v69 = 0;\n              goto LABEL_45;\n            }\n            if ( v49 == -2 )\n            {\n              v51 = strlen(s);\n              v69 = 0;\n              v68 = v51;\n              goto LABEL_45;\n            }\n            if ( v49 )\n            {\nLABEL_104:\n              v69 = 1;\n              if ( mbsinit((const mbstate_t *)&v65) )\n                v64 = 0;\n              v66 = 1;\n              goto LABEL_44;\n            }\n            v68 = 1LL;\n            if ( !*s )\n            {\n              if ( !v70 )\n                goto LABEL_104;\nLABEL_115:\n              sub_405D00();\n            }\nLABEL_113:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_74:\n          v38 = *(_QWORD *)(v7 + 8 * v23);\n          v25 = v73;\n          v39 = v23 - v38;\n          if ( !v38 )\n            goto LABEL_35;\n          if ( !v66 )\n            goto LABEL_78;\n          if ( v69 )\n            goto LABEL_81;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v66 = 0;\n              s += v68;\n              if ( !--v38 )\n              {\n                v25 = v73;\n                v23 = v39;\n                goto LABEL_35;\n              }\nLABEL_78:\n              if ( !v64 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> v8) & 1 )\n                {\n                  v68 = 1LL;\n                  v40 = *s;\n                  v69 = 1;\n                  v70 = v40;\n                  v66 = 1;\nLABEL_81:\n                  a2 = (char *)v70;\n                  if ( !v70 )\n                    goto LABEL_117;\n                  continue;\n                }\n                if ( !mbsinit(v55) )\n                  goto LABEL_114;\n                v64 = 1;\n              }\n              break;\n            }\n            v41 = __ctype_get_mb_cur_max();\n            v42 = s;\n            v43 = sub_409040(s, v41);\n            a2 = v42;\n            v44 = sub_40B170(&v70, v42, v43, &v65);\n            v68 = v44;\n            switch ( v44 )\n            {\n              case -1LL:\n                v68 = 1LL;\n                v69 = 0;\n                continue;\n              case -2LL:\n                v45 = strlen(s);\n                v69 = 0;\n                v68 = v45;\n                continue;\n              case 0LL:\n                v68 = 1LL;\n                if ( *s )\n                  goto LABEL_113;\n                if ( v70 )\n                  __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v69 = 1;\n          if ( mbsinit((const mbstate_t *)&v65) )\n            v64 = 0;\n          v66 = 1;\n          goto LABEL_81;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v75;\n    v73 = 0;\n    if ( v54 != v23 )\n      continue;\n    break;\n  }\n  *v52 = s;\nLABEL_54:\n  sub_40B900(v5, a2, v30, v8, v10, v3);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x402000L", 
            "funcEndAddr": "0x402005L", 
            "funcName": "sub_405D20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405D20(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbx\n  __int64 v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  size_t v13; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  __int64 v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  __int64 v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char *v24; // rax\n  char v25; // al\n  __int64 v26; // rax\n  size_t v27; // rdx\n  unsigned int v28; // eax\n  unsigned int v29; // eax\n  __int64 v30; // rdx\n  void *v32; // rax\n  size_t v33; // rax\n  size_t v34; // rax\n  char *v35; // rbx\n  __int64 v36; // rax\n  __int64 v37; // rax\n  __int64 v38; // rbx\n  __int64 v39; // r14\n  unsigned int v40; // eax\n  size_t v41; // rax\n  char *v42; // r15\n  __int64 v43; // rax\n  __int64 v44; // rax\n  size_t v45; // rax\n  size_t v46; // rax\n  char *v47; // rbx\n  __int64 v48; // rax\n  __int64 v49; // rax\n  size_t v50; // rax\n  size_t v51; // rax\n  char **v52; // [rsp+0h] [rbp-110h]\n  mbstate_t *ps; // [rsp+8h] [rbp-108h]\n  unsigned __int64 v54; // [rsp+10h] [rbp-100h]\n  mbstate_t *v55; // [rsp+18h] [rbp-F8h]\n  char v56; // [rsp+20h] [rbp-F0h]\n  __int64 v57; // [rsp+24h] [rbp-ECh]\n  char v58; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v61; // [rsp+40h] [rbp-D0h]\n  unsigned int v62; // [rsp+44h] [rbp-CCh]\n  __int64 v63; // [rsp+48h] [rbp-C8h]\n  char v64; // [rsp+60h] [rbp-B0h]\n  __int64 v65; // [rsp+64h] [rbp-ACh]\n  char v66; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v68; // [rsp+78h] [rbp-98h]\n  char v69; // [rsp+80h] [rbp-90h]\n  unsigned int v70; // [rsp+84h] [rbp-8Ch]\n  char v71; // [rsp+A0h] [rbp-70h]\n  __int64 v72; // [rsp+A4h] [rbp-6Ch]\n  char v73; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v75; // [rsp+B8h] [rbp-58h]\n  char v76; // [rsp+C0h] [rbp-50h]\n  unsigned int v77; // [rsp+C4h] [rbp-4Ch]\n\n  ps = a1;\n  v52 = a3;\n  v54 = sub_40BA40(a2);\n  if ( v54 > 0x492492492492492LL )\n    return 0LL;\n  if ( 56 * v54 > 0xFAF )\n  {\n    v5 = sub_40B890();\n  }\n  else\n  {\n    v4 = alloca(56 * v54 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v56 = 0;\n  v58 = 0;\n  v57 = 0LL;\n  v7 = v5 + 48 * v54;\n  while ( 1 )\n  {\n    if ( !v56 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( ((unsigned int)dword_40F520[(*(_BYTE *)src >> 5) & 7] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v61 = 1;\n        v62 = v9;\n        v10 = v9;\n        v58 = 1;\n        if ( !v9 )\n          goto LABEL_23;\n        goto LABEL_8;\n      }\n      if ( !mbsinit((const mbstate_t *)&v57) )\n        goto LABEL_114;\n      v56 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_409040(src, v13);\n    a2 = v14;\n    v16 = sub_40B170(&v62, v14, v15, &v57);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v61 = 0;\n      v58 = 1;\n      goto LABEL_9;\n    }\n    if ( v16 != -2LL )\n      break;\n    v33 = strlen((const char *)src);\n    v61 = 0;\n    n = v33;\n    v11 = 0;\n    v58 = 1;\nLABEL_9:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v63 )\n    {\n      v32 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v32;\n      v11 = v61;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v62;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v58 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_113;\n    if ( v62 )\n      goto LABEL_115;\n  }\n  v61 = 1;\n  if ( mbsinit((const mbstate_t *)&v57) )\n    v56 = 0;\n  v10 = v62;\n  v58 = 1;\n  if ( v62 )\n  {\nLABEL_8:\n    v11 = 1;\n    goto LABEL_9;\n  }\nLABEL_23:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v54 <= 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v55 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v21 = v5 + 48 * v17;\n        if ( v20 && *(_BYTE *)(v21 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v21 + 20) )\n            goto LABEL_32;\n        }\n        else\n        {\n          v22 = *(_QWORD *)(v18 + 8);\n          if ( v22 == *(_QWORD *)(v21 + 8) )\n          {\n            a2 = *(char **)v21;\n            if ( !memcmp(*(const void **)v18, *(const void **)v21, v22) )\n            {\nLABEL_32:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = (char *)v55 - ++v17;\n              goto LABEL_33;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = v55;\nLABEL_33:\n      v55 = (mbstate_t *)((char *)v55 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v54 != v55 );\n  }\n  v64 = 0;\n  v23 = 0LL;\n  v66 = 0;\n  *v52 = 0LL;\n  v24 = (char *)ps;\n  ps = (mbstate_t *)&v72;\n  v71 = 0;\n  v65 = 0LL;\n  v72 = 0LL;\n  v73 = 0;\n  v55 = (mbstate_t *)&v65;\n  s = v24;\n  s2 = v24;\n  v25 = 0;\nLABEL_35:\n  if ( v25 )\n  {\n    if ( !v76 )\n      goto LABEL_37;\n    goto LABEL_49;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v71 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( ((unsigned int)dword_40F520[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1 )\n        {\n          v75 = 1LL;\n          v29 = *(char *)s2;\n          v76 = 1;\n          v77 = v29;\n          v73 = 1;\n          goto LABEL_49;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_114;\n        v71 = 1;\n      }\n      v34 = __ctype_get_mb_cur_max();\n      v35 = (char *)s2;\n      v36 = sub_409040(s2, v34);\n      a2 = v35;\n      v37 = sub_40B170(&v77, v35, v36, &v72);\n      v75 = v37;\n      switch ( v37 )\n      {\n        case -1LL:\n          v75 = 1LL;\n          v76 = 0;\n          v73 = 1;\nLABEL_37:\n          v26 = v5 + 48 * v23;\n          goto LABEL_38;\n        case -2LL:\n          v50 = strlen((const char *)s2);\n          v76 = 0;\n          v75 = v50;\n          v73 = 1;\n          goto LABEL_37;\n        case 0LL:\n          v75 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_113;\n          if ( v77 )\n            goto LABEL_115;\n          break;\n      }\n      v76 = 1;\n      if ( mbsinit((const mbstate_t *)&v72) )\n        v71 = 0;\n      v73 = 1;\nLABEL_49:\n      v30 = v77;\n      if ( !v77 )\n        goto LABEL_54;\n      v26 = v5 + 48 * v23;\n      if ( *(_BYTE *)(v26 + 16) )\n      {\n        if ( *(_DWORD *)(v26 + 20) != v77 )\n        {\nLABEL_39:\n          if ( !v23 )\n            goto LABEL_40;\n          goto LABEL_74;\n        }\n      }\n      else\n      {\nLABEL_38:\n        v27 = *(_QWORD *)(v26 + 8);\n        if ( v27 != v75 )\n          goto LABEL_39;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v26, s2, v27) )\n        {\n          if ( !v23 )\n          {\nLABEL_40:\n            if ( v66 )\n            {\n              if ( v69 )\n                goto LABEL_44;\n              goto LABEL_45;\n            }\n            if ( !v64 )\n            {\n              if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n              {\n                v68 = 1LL;\n                v28 = *s;\n                v69 = 1;\n                v70 = v28;\n                v66 = 1;\nLABEL_44:\n                if ( !v70 )\nLABEL_117:\n                  abort();\nLABEL_45:\n                s += v68;\n                s2 = (char *)s2 + v75;\n                v66 = 0;\n                v73 = 0;\n                continue;\n              }\n              if ( mbsinit(v55) )\n              {\n                v64 = 1;\n                goto LABEL_99;\n              }\nLABEL_114:\n              __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_99:\n            v46 = __ctype_get_mb_cur_max();\n            v47 = s;\n            v48 = sub_409040(s, v46);\n            a2 = v47;\n            v49 = sub_40B170(&v70, v47, v48, &v65);\n            v68 = v49;\n            if ( v49 == -1 )\n            {\n              v68 = 1LL;\n              v69 = 0;\n              goto LABEL_45;\n            }\n            if ( v49 == -2 )\n            {\n              v51 = strlen(s);\n              v69 = 0;\n              v68 = v51;\n              goto LABEL_45;\n            }\n            if ( v49 )\n            {\nLABEL_104:\n              v69 = 1;\n              if ( mbsinit((const mbstate_t *)&v65) )\n                v64 = 0;\n              v66 = 1;\n              goto LABEL_44;\n            }\n            v68 = 1LL;\n            if ( !*s )\n            {\n              if ( !v70 )\n                goto LABEL_104;\nLABEL_115:\n              sub_405D00();\n            }\nLABEL_113:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_74:\n          v38 = *(_QWORD *)(v7 + 8 * v23);\n          v25 = v73;\n          v39 = v23 - v38;\n          if ( !v38 )\n            goto LABEL_35;\n          if ( !v66 )\n            goto LABEL_78;\n          if ( v69 )\n            goto LABEL_81;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v66 = 0;\n              s += v68;\n              if ( !--v38 )\n              {\n                v25 = v73;\n                v23 = v39;\n                goto LABEL_35;\n              }\nLABEL_78:\n              if ( !v64 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> v8) & 1 )\n                {\n                  v68 = 1LL;\n                  v40 = *s;\n                  v69 = 1;\n                  v70 = v40;\n                  v66 = 1;\nLABEL_81:\n                  a2 = (char *)v70;\n                  if ( !v70 )\n                    goto LABEL_117;\n                  continue;\n                }\n                if ( !mbsinit(v55) )\n                  goto LABEL_114;\n                v64 = 1;\n              }\n              break;\n            }\n            v41 = __ctype_get_mb_cur_max();\n            v42 = s;\n            v43 = sub_409040(s, v41);\n            a2 = v42;\n            v44 = sub_40B170(&v70, v42, v43, &v65);\n            v68 = v44;\n            switch ( v44 )\n            {\n              case -1LL:\n                v68 = 1LL;\n                v69 = 0;\n                continue;\n              case -2LL:\n                v45 = strlen(s);\n                v69 = 0;\n                v68 = v45;\n                continue;\n              case 0LL:\n                v68 = 1LL;\n                if ( *s )\n                  goto LABEL_113;\n                if ( v70 )\n                  __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v69 = 1;\n          if ( mbsinit((const mbstate_t *)&v65) )\n            v64 = 0;\n          v66 = 1;\n          goto LABEL_81;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v75;\n    v73 = 0;\n    if ( v54 != v23 )\n      continue;\n    break;\n  }\n  *v52 = s;\nLABEL_54:\n  sub_40B900(v5, a2, v30, v8, v10, v3);\n  return 1LL;\n}\n\n__int64 __fastcall sub_405D20(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbx\n  __int64 v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  size_t v13; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  __int64 v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  __int64 v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char *v24; // rax\n  char v25; // al\n  __int64 v26; // rax\n  size_t v27; // rdx\n  unsigned int v28; // eax\n  unsigned int v29; // eax\n  __int64 v30; // rdx\n  void *v32; // rax\n  size_t v33; // rax\n  size_t v34; // rax\n  char *v35; // rbx\n  __int64 v36; // rax\n  __int64 v37; // rax\n  __int64 v38; // rbx\n  __int64 v39; // r14\n  unsigned int v40; // eax\n  size_t v41; // rax\n  char *v42; // r15\n  __int64 v43; // rax\n  __int64 v44; // rax\n  size_t v45; // rax\n  size_t v46; // rax\n  char *v47; // rbx\n  __int64 v48; // rax\n  __int64 v49; // rax\n  size_t v50; // rax\n  size_t v51; // rax\n  char **v52; // [rsp+0h] [rbp-110h]\n  mbstate_t *ps; // [rsp+8h] [rbp-108h]\n  unsigned __int64 v54; // [rsp+10h] [rbp-100h]\n  mbstate_t *v55; // [rsp+18h] [rbp-F8h]\n  char v56; // [rsp+20h] [rbp-F0h]\n  __int64 v57; // [rsp+24h] [rbp-ECh]\n  char v58; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v61; // [rsp+40h] [rbp-D0h]\n  unsigned int v62; // [rsp+44h] [rbp-CCh]\n  __int64 v63; // [rsp+48h] [rbp-C8h]\n  char v64; // [rsp+60h] [rbp-B0h]\n  __int64 v65; // [rsp+64h] [rbp-ACh]\n  char v66; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v68; // [rsp+78h] [rbp-98h]\n  char v69; // [rsp+80h] [rbp-90h]\n  unsigned int v70; // [rsp+84h] [rbp-8Ch]\n  char v71; // [rsp+A0h] [rbp-70h]\n  __int64 v72; // [rsp+A4h] [rbp-6Ch]\n  char v73; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v75; // [rsp+B8h] [rbp-58h]\n  char v76; // [rsp+C0h] [rbp-50h]\n  unsigned int v77; // [rsp+C4h] [rbp-4Ch]\n\n  ps = a1;\n  v52 = a3;\n  v54 = sub_40BA40(a2);\n  if ( v54 > 0x492492492492492LL )\n    return 0LL;\n  if ( 56 * v54 > 0xFAF )\n  {\n    v5 = sub_40B890();\n  }\n  else\n  {\n    v4 = alloca(56 * v54 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v56 = 0;\n  v58 = 0;\n  v57 = 0LL;\n  v7 = v5 + 48 * v54;\n  while ( 1 )\n  {\n    if ( !v56 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( ((unsigned int)dword_40F520[(*(_BYTE *)src >> 5) & 7] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v61 = 1;\n        v62 = v9;\n        v10 = v9;\n        v58 = 1;\n        if ( !v9 )\n          goto LABEL_23;\n        goto LABEL_8;\n      }\n      if ( !mbsinit((const mbstate_t *)&v57) )\n        goto LABEL_114;\n      v56 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_409040(src, v13);\n    a2 = v14;\n    v16 = sub_40B170(&v62, v14, v15, &v57);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v61 = 0;\n      v58 = 1;\n      goto LABEL_9;\n    }\n    if ( v16 != -2LL )\n      break;\n    v33 = strlen((const char *)src);\n    v61 = 0;\n    n = v33;\n    v11 = 0;\n    v58 = 1;\nLABEL_9:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v63 )\n    {\n      v32 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v32;\n      v11 = v61;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v62;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v58 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_113;\n    if ( v62 )\n      goto LABEL_115;\n  }\n  v61 = 1;\n  if ( mbsinit((const mbstate_t *)&v57) )\n    v56 = 0;\n  v10 = v62;\n  v58 = 1;\n  if ( v62 )\n  {\nLABEL_8:\n    v11 = 1;\n    goto LABEL_9;\n  }\nLABEL_23:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v54 <= 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v55 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v21 = v5 + 48 * v17;\n        if ( v20 && *(_BYTE *)(v21 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v21 + 20) )\n            goto LABEL_32;\n        }\n        else\n        {\n          v22 = *(_QWORD *)(v18 + 8);\n          if ( v22 == *(_QWORD *)(v21 + 8) )\n          {\n            a2 = *(char **)v21;\n            if ( !memcmp(*(const void **)v18, *(const void **)v21, v22) )\n            {\nLABEL_32:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = (char *)v55 - ++v17;\n              goto LABEL_33;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = v55;\nLABEL_33:\n      v55 = (mbstate_t *)((char *)v55 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v54 != v55 );\n  }\n  v64 = 0;\n  v23 = 0LL;\n  v66 = 0;\n  *v52 = 0LL;\n  v24 = (char *)ps;\n  ps = (mbstate_t *)&v72;\n  v71 = 0;\n  v65 = 0LL;\n  v72 = 0LL;\n  v73 = 0;\n  v55 = (mbstate_t *)&v65;\n  s = v24;\n  s2 = v24;\n  v25 = 0;\nLABEL_35:\n  if ( v25 )\n  {\n    if ( !v76 )\n      goto LABEL_37;\n    goto LABEL_49;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v71 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( ((unsigned int)dword_40F520[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1 )\n        {\n          v75 = 1LL;\n          v29 = *(char *)s2;\n          v76 = 1;\n          v77 = v29;\n          v73 = 1;\n          goto LABEL_49;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_114;\n        v71 = 1;\n      }\n      v34 = __ctype_get_mb_cur_max();\n      v35 = (char *)s2;\n      v36 = sub_409040(s2, v34);\n      a2 = v35;\n      v37 = sub_40B170(&v77, v35, v36, &v72);\n      v75 = v37;\n      switch ( v37 )\n      {\n        case -1LL:\n          v75 = 1LL;\n          v76 = 0;\n          v73 = 1;\nLABEL_37:\n          v26 = v5 + 48 * v23;\n          goto LABEL_38;\n        case -2LL:\n          v50 = strlen((const char *)s2);\n          v76 = 0;\n          v75 = v50;\n          v73 = 1;\n          goto LABEL_37;\n        case 0LL:\n          v75 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_113;\n          if ( v77 )\n            goto LABEL_115;\n          break;\n      }\n      v76 = 1;\n      if ( mbsinit((const mbstate_t *)&v72) )\n        v71 = 0;\n      v73 = 1;\nLABEL_49:\n      v30 = v77;\n      if ( !v77 )\n        goto LABEL_54;\n      v26 = v5 + 48 * v23;\n      if ( *(_BYTE *)(v26 + 16) )\n      {\n        if ( *(_DWORD *)(v26 + 20) != v77 )\n        {\nLABEL_39:\n          if ( !v23 )\n            goto LABEL_40;\n          goto LABEL_74;\n        }\n      }\n      else\n      {\nLABEL_38:\n        v27 = *(_QWORD *)(v26 + 8);\n        if ( v27 != v75 )\n          goto LABEL_39;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v26, s2, v27) )\n        {\n          if ( !v23 )\n          {\nLABEL_40:\n            if ( v66 )\n            {\n              if ( v69 )\n                goto LABEL_44;\n              goto LABEL_45;\n            }\n            if ( !v64 )\n            {\n              if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n              {\n                v68 = 1LL;\n                v28 = *s;\n                v69 = 1;\n                v70 = v28;\n                v66 = 1;\nLABEL_44:\n                if ( !v70 )\nLABEL_117:\n                  abort();\nLABEL_45:\n                s += v68;\n                s2 = (char *)s2 + v75;\n                v66 = 0;\n                v73 = 0;\n                continue;\n              }\n              if ( mbsinit(v55) )\n              {\n                v64 = 1;\n                goto LABEL_99;\n              }\nLABEL_114:\n              __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_99:\n            v46 = __ctype_get_mb_cur_max();\n            v47 = s;\n            v48 = sub_409040(s, v46);\n            a2 = v47;\n            v49 = sub_40B170(&v70, v47, v48, &v65);\n            v68 = v49;\n            if ( v49 == -1 )\n            {\n              v68 = 1LL;\n              v69 = 0;\n              goto LABEL_45;\n            }\n            if ( v49 == -2 )\n            {\n              v51 = strlen(s);\n              v69 = 0;\n              v68 = v51;\n              goto LABEL_45;\n            }\n            if ( v49 )\n            {\nLABEL_104:\n              v69 = 1;\n              if ( mbsinit((const mbstate_t *)&v65) )\n                v64 = 0;\n              v66 = 1;\n              goto LABEL_44;\n            }\n            v68 = 1LL;\n            if ( !*s )\n            {\n              if ( !v70 )\n                goto LABEL_104;\nLABEL_115:\n              sub_405D00();\n            }\nLABEL_113:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_74:\n          v38 = *(_QWORD *)(v7 + 8 * v23);\n          v25 = v73;\n          v39 = v23 - v38;\n          if ( !v38 )\n            goto LABEL_35;\n          if ( !v66 )\n            goto LABEL_78;\n          if ( v69 )\n            goto LABEL_81;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v66 = 0;\n              s += v68;\n              if ( !--v38 )\n              {\n                v25 = v73;\n                v23 = v39;\n                goto LABEL_35;\n              }\nLABEL_78:\n              if ( !v64 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> v8) & 1 )\n                {\n                  v68 = 1LL;\n                  v40 = *s;\n                  v69 = 1;\n                  v70 = v40;\n                  v66 = 1;\nLABEL_81:\n                  a2 = (char *)v70;\n                  if ( !v70 )\n                    goto LABEL_117;\n                  continue;\n                }\n                if ( !mbsinit(v55) )\n                  goto LABEL_114;\n                v64 = 1;\n              }\n              break;\n            }\n            v41 = __ctype_get_mb_cur_max();\n            v42 = s;\n            v43 = sub_409040(s, v41);\n            a2 = v42;\n            v44 = sub_40B170(&v70, v42, v43, &v65);\n            v68 = v44;\n            switch ( v44 )\n            {\n              case -1LL:\n                v68 = 1LL;\n                v69 = 0;\n                continue;\n              case -2LL:\n                v45 = strlen(s);\n                v69 = 0;\n                v68 = v45;\n                continue;\n              case 0LL:\n                v68 = 1LL;\n                if ( *s )\n                  goto LABEL_113;\n                if ( v70 )\n                  __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v69 = 1;\n          if ( mbsinit((const mbstate_t *)&v65) )\n            v64 = 0;\n          v66 = 1;\n          goto LABEL_81;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v75;\n    v73 = 0;\n    if ( v54 != v23 )\n      continue;\n    break;\n  }\n  *v52 = s;\nLABEL_54:\n  sub_40B900(v5, a2, v30, v8, v10, v3);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x402000L", 
            "funcEndAddr": "0x402005L", 
            "funcName": "sub_405D20"
        }, 
        {
            "decompiledFuncCode": "mbstate_t __fastcall sub_4066F0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13\n  char *v3; // rbp\n  char v4; // r15\n  mbstate_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  unsigned __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  __int64 v16; // rbp\n  int v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  __int64 v20; // rdi\n  char v21; // si\n  char v22; // cl\n  unsigned __int64 v23; // r12\n  unsigned __int64 v24; // rbx\n  char v25; // r14\n  int v26; // eax\n  int v27; // ecx\n  __m128i v28; // xmm1\n  __m128i v29; // xmm0\n  __m128i v30; // xmm2\n  __m128i v31; // xmm3\n  unsigned int v32; // eax\n  int v33; // eax\n  __int32 v34; // eax\n  __int32 v35; // eax\n  bool v36; // al\n  size_t v37; // rax\n  void *v38; // r15\n  __int64 v39; // rax\n  __int64 v40; // rax\n  size_t v41; // r15\n  size_t v42; // rax\n  void *v43; // r15\n  __int64 v44; // rax\n  void *v45; // rax\n  size_t v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  void *v50; // rax\n  unsigned __int64 v51; // r14\n  int v52; // eax\n  char v53; // dl\n  size_t v54; // rax\n  char *v55; // r15\n  __int64 v56; // rax\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  int v60; // eax\n  size_t v61; // rax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  char *v65; // r14\n  __int64 v66; // rax\n  __int64 v67; // rax\n  size_t v68; // rax\n  char *v69; // r12\n  __int64 v70; // rax\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  const char *v75; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v76; // [rsp+0h] [rbp-188h]\n  size_t v77; // [rsp+0h] [rbp-188h]\n  void *v78; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v79; // [rsp+8h] [rbp-180h]\n  mbstate_t v80; // [rsp+14h] [rbp-174h]\n  char v81; // [rsp+1Ch] [rbp-16Ch]\n  char *v82; // [rsp+20h] [rbp-168h]\n  size_t v83; // [rsp+28h] [rbp-160h]\n  char v84; // [rsp+30h] [rbp-158h]\n  int v85; // [rsp+34h] [rbp-154h]\n  char v86; // [rsp+50h] [rbp-138h]\n  mbstate_t v87; // [rsp+54h] [rbp-134h]\n  char v88; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v90; // [rsp+68h] [rbp-120h]\n  char v91; // [rsp+70h] [rbp-118h]\n  int v92; // [rsp+74h] [rbp-114h]\n  __int128 v93; // [rsp+90h] [rbp-F8h]\n  size_t n[2]; // [rsp+A0h] [rbp-E8h]\n  __int128 v95; // [rsp+B0h] [rbp-D8h]\n  __int128 v96; // [rsp+C0h] [rbp-C8h]\n  mbstate_t v97[2]; // [rsp+D0h] [rbp-B8h]\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __m128i v99; // [rsp+F0h] [rbp-98h]\n  __m128i v100; // [rsp+100h] [rbp-88h]\n  mbstate_t ps; // [rsp+110h] [rbp-78h]\n  char v102; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v104; // [rsp+128h] [rbp-60h]\n  char v105; // [rsp+130h] [rbp-58h]\n  int v106; // [rsp+134h] [rbp-54h]\n\n  v2 = (__int64)a2;\n  v3 = (char *)a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v82 = a2;\n    v81 = 0;\n    v80 = 0LL;\n    if ( ((unsigned int)dword_40F520[(unsigned __int8)v17 >> 5] >> v17) & 1 )\n    {\n      v83 = 1LL;\n      v85 = v17;\n      v84 = 1;\n      v81 = 1;\nLABEL_17:\n      if ( !v85 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v80) )\n      goto LABEL_173;\n    v68 = __ctype_get_mb_cur_max();\n    v69 = v82;\n    v70 = sub_409040(v82, v68);\n    v71 = sub_40B170(&v85, v69, v70, &v80);\n    v83 = v71;\n    if ( v71 == -1 )\n    {\n      v83 = 1LL;\n      v84 = 0;\n      v81 = 1;\n    }\n    else\n    {\n      if ( v71 != -2 )\n      {\n        if ( !v71 )\n        {\n          v83 = 1LL;\n          if ( *v82 )\n            goto LABEL_174;\n          if ( v85 )\n            goto LABEL_162;\n        }\n        v84 = 1;\n        mbsinit(&v80);\n        v81 = 1;\n        goto LABEL_17;\n      }\n      v74 = strlen(v82);\n      v84 = 0;\n      v83 = v74;\n      v81 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v23 = 0LL;\n    v24 = 0LL;\n    v25 = 1;\n    v86 = 0;\n    v87 = 0LL;\n    v88 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v93) = 0;\n    *(_QWORD *)((char *)&v93 + 4) = 0LL;\n    BYTE12(v93) = 0;\n    v79 = 0LL;\n    while ( 1 )\n    {\n      if ( !(_BYTE)v93 )\n      {\n        if ( ((unsigned int)dword_40F520[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v26 = *(char *)n[0];\n          LOBYTE(v95) = 1;\n          DWORD1(v95) = v26;\n          BYTE12(v93) = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)&v93 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v93) = 1;\n      }\n      v46 = __ctype_get_mb_cur_max();\n      v77 = n[0];\n      v47 = sub_409040(n[0], v46);\n      v48 = sub_40B170((char *)&v95 + 4, v77, v47, (char *)&v93 + 4);\n      n[1] = v48;\n      switch ( v48 )\n      {\n        case -1LL:\n          n[1] = 1LL;\n          LOBYTE(v95) = 0;\n          BYTE12(v93) = 1;\n          goto LABEL_85;\n        case -2LL:\n          v59 = strlen((const char *)n[0]);\n          LOBYTE(v95) = 0;\n          n[1] = v59;\n          BYTE12(v93) = 1;\nLABEL_85:\n          if ( !((unsigned __int8)v25 & (v23 > 9)) )\n          {\n            ++v24;\n            goto LABEL_88;\n          }\n          if ( v24 < 5 * v23 )\n          {\n            ++v24;\n            v25 &= v23 > 9;\n            goto LABEL_88;\n          }\nLABEL_106:\n          v51 = v24 - v79;\n          if ( v24 == v79 )\n          {\n            if ( !v88 )\n              goto LABEL_130;\n            if ( !v91 )\n              goto LABEL_134;\nLABEL_133:\n            if ( v92 )\n              goto LABEL_134;\nLABEL_115:\n            v25 = sub_405D20(a1, a2, (char **)&ps);\n            if ( v25 )\n              return ps;\n            v53 = v95;\nLABEL_135:\n            v79 = v24++;\n            if ( !v53 )\n              goto LABEL_88;\n            goto LABEL_37;\n          }\n          if ( !v88 )\n            goto LABEL_110;\n          if ( v91 )\n            goto LABEL_113;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v88 = 0;\n              s += v90;\n              if ( !--v51 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v86 )\n              {\n                if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                {\n                  v90 = 1LL;\n                  v52 = *s;\n                  v91 = 1;\n                  v92 = v52;\n                  v88 = 1;\nLABEL_113:\n                  if ( !v92 )\n                  {\n                    if ( v88 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v86 )\n                    {\n                      if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                      {\n                        v90 = 1LL;\n                        v60 = *s;\n                        v91 = 1;\n                        v92 = v60;\n                        v88 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v87) )\n                        goto LABEL_173;\n                      v86 = 1;\n                    }\n                    v64 = __ctype_get_mb_cur_max();\n                    v65 = s;\n                    v66 = sub_409040(s, v64);\n                    v67 = sub_40B170(&v92, v65, v66, &v87);\n                    v90 = v67;\n                    if ( v67 == -1 )\n                    {\n                      v90 = 1LL;\n                      v91 = 0;\n                      v88 = 1;\n                    }\n                    else\n                    {\n                      if ( v67 != -2 )\n                      {\n                        if ( !v67 )\n                        {\n                          v90 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v92 )\n                            goto LABEL_162;\n                        }\n                        v91 = 1;\n                        if ( mbsinit(&v87) )\n                          v86 = 0;\n                        v88 = 1;\n                        goto LABEL_133;\n                      }\n                      v73 = strlen(s);\n                      v91 = 0;\n                      v90 = v73;\n                      v88 = 1;\n                    }\nLABEL_134:\n                    v53 = v95;\n                    v25 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v87) )\n                  goto LABEL_173;\n                v86 = 1;\n              }\n              break;\n            }\n            v54 = __ctype_get_mb_cur_max();\n            v55 = s;\n            v56 = sub_409040(s, v54);\n            v57 = sub_40B170(&v92, v55, v56, &v87);\n            v90 = v57;\n            switch ( v57 )\n            {\n              case -1LL:\n                v90 = 1LL;\n                v91 = 0;\n                continue;\n              case -2LL:\n                v58 = strlen(s);\n                v91 = 0;\n                v90 = v58;\n                continue;\n              case 0LL:\n                v90 = 1LL;\n                if ( *s )\n                  goto LABEL_174;\n                if ( v92 )\n                  goto LABEL_162;\n                break;\n            }\n            break;\n          }\n          v91 = 1;\n          if ( mbsinit(&v87) )\n            v86 = 0;\n          v88 = 1;\n          goto LABEL_113;\n        case 0LL:\n          n[1] = 1LL;\n          if ( *(_BYTE *)n[0] )\n            goto LABEL_174;\n          if ( DWORD1(v95) )\n            goto LABEL_162;\n          break;\n      }\n      LOBYTE(v95) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)&v93 + 4)) )\n        LOBYTE(v93) = 0;\n      BYTE12(v93) = 1;\nLABEL_33:\n      if ( !DWORD1(v95) )\n        return 0LL;\n      if ( (unsigned __int8)v25 & (v23 > 9) )\n      {\n        if ( v24 >= 5 * v23 )\n          goto LABEL_106;\n        ++v24;\n        v25 &= v23 > 9;\n      }\n      else\n      {\n        ++v24;\n      }\nLABEL_37:\n      if ( v84 )\n      {\n        if ( DWORD1(v95) == v85 )\n          goto LABEL_39;\nLABEL_66:\n        v41 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v41 = n[1];\n      if ( n[1] == v83 && !memcmp((const void *)n[0], v82, n[1]) )\n      {\nLABEL_39:\n        v27 = *a2;\n        v28 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v29 = _mm_load_si128((const __m128i *)&v93);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v28;\n        v30 = _mm_load_si128((const __m128i *)&v95);\n        s1[0] = (void *)(v28.m128i_i64[1] + v28.m128i_i64[0]);\n        v31 = _mm_load_si128((const __m128i *)&v96);\n        *(__m128i *)&v97[0].__count = v29;\n        v99 = v30;\n        v32 = dword_40F520[(unsigned __int8)v27 >> 5];\n        v100 = v31;\n        v97[1].__wchb[0] = 0;\n        v102 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v32 >> v27) & 1 )\n        {\n          v104 = 1LL;\n          v106 = v27;\n          v105 = 1;\n          v102 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v61 = __ctype_get_mb_cur_max();\n          v78 = s2;\n          v62 = sub_409040(s2, v61);\n          v63 = sub_40B170(&v106, v78, v62, &ps.4);\n          v104 = v63;\n          if ( v63 == -1 )\n          {\n            v104 = 1LL;\n            v105 = 0;\n          }\n          else if ( v63 == -2 )\n          {\n            v72 = strlen((const char *)s2);\n            v105 = 0;\n            v104 = v72;\n          }\n          else\n          {\n            if ( !v63 )\n            {\n              v104 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !v106 )\n                  goto LABEL_143;\nLABEL_162:\n                sub_405D00();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v105 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v102 = 1;\nLABEL_41:\n            if ( !v106 )\n              abort();\n          }\n          v102 = 0;\n          ++v24;\n          s2 = (char *)s2 + v104;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v37 = __ctype_get_mb_cur_max();\n              v38 = s2;\n              v39 = sub_409040(s2, v37);\n              v40 = sub_40B170(&v106, v38, v39, &ps.4);\n              v104 = v40;\n              if ( v40 == -1 )\n              {\n                v104 = 1LL;\n                v105 = 0;\n                v102 = 1;\n              }\n              else if ( v40 == -2 )\n              {\n                v49 = strlen((const char *)s2);\n                v105 = 0;\n                v104 = v49;\n                v102 = 1;\n              }\n              else\n              {\n                if ( !v40 )\n                {\n                  v104 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( v106 )\n                    goto LABEL_162;\n                }\n                v105 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v102 = 1;\n                if ( !v106 )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_40F520[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  goto LABEL_173;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v104 = 1LL;\n              v33 = *(char *)s2;\n              v105 = 1;\n              v106 = v33;\n              v102 = 1;\n              if ( !v33 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v97[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v97[0].__count) )\n              {\n                if ( ((unsigned int)dword_40F520[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v34 = *(char *)s1[0];\n                  v99.m128i_i8[0] = 1;\n                  v99.m128i_i32[1] = v34;\n                  v97[1].__wchb[0] = 1;\nLABEL_49:\n                  v35 = v99.m128i_i32[1];\n                  if ( !v99.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v105 )\n                  {\n                    v36 = v106 != v35;\nLABEL_52:\n                    if ( v36 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v24;\n                    s2 = (char *)s2 + v104;\n                    v97[1].__wchb[0] = 0;\n                    v102 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v104 )\n                    goto LABEL_66;\n                  v36 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v97 + 4)) )\n                  goto LABEL_173;\n                LOBYTE(v97[0].__count) = 1;\n              }\n              v42 = __ctype_get_mb_cur_max();\n              v43 = s1[0];\n              v44 = sub_409040(s1[0], v42);\n              v45 = (void *)sub_40B170((char *)v99.m128i_i64 + 4, v43, v44, &v97[0].4);\n              s1[1] = v45;\n              if ( v45 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                v99.m128i_i8[0] = 0;\n                v97[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v45 != (void *)-2LL )\n                {\n                  if ( !v45 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v99.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v99.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v97 + 4)) )\n                    LOBYTE(v97[0].__count) = 0;\n                  v35 = v99.m128i_i32[1];\n                  v97[1].__wchb[0] = 1;\n                  if ( !v99.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v50 = (void *)strlen((const char *)s1[0]);\n                v99.m128i_i8[0] = 0;\n                s1[1] = v50;\n                v97[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v99.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v41;\n      ++v23;\n      BYTE12(v93) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = *(_BYTE *)(v2 + 1);\n    if ( !v18 )\n      return (mbstate_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    LOBYTE(v9) = v11 & (v8 > 9);\n    v16 = (unsigned int)v9;\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v14 < 5 * v8 || v7 && (v75 = v7, v12 = strnlen(v7, v14 - v10), v10 = v14, v7 = &v75[v12], v75[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v76 = v10;\n        v13 = strlen((const char *)v2);\n        v11 = sub_405B80(v13, &ps, v16, v15, v2);\n        v10 = v76;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = v2 + v19;\n  v9 = (unsigned __int64)&v3[v19];\n  while ( 1 )\n  {\n    v22 = *(_BYTE *)(v20 + v14);\n    if ( !v22 )\n      return (mbstate_t)v3;\n    v21 = *(_BYTE *)(v9 + v14);\n    if ( !v21 )\n      return 0LL;\n    ++v14;\n    if ( v22 != v21 )\n      goto LABEL_12;\n  }\n}\n\nmbstate_t __fastcall sub_4066F0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13\n  char *v3; // rbp\n  char v4; // r15\n  mbstate_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  unsigned __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  __int64 v16; // rbp\n  int v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  __int64 v20; // rdi\n  char v21; // si\n  char v22; // cl\n  unsigned __int64 v23; // r12\n  unsigned __int64 v24; // rbx\n  char v25; // r14\n  int v26; // eax\n  int v27; // ecx\n  __m128i v28; // xmm1\n  __m128i v29; // xmm0\n  __m128i v30; // xmm2\n  __m128i v31; // xmm3\n  unsigned int v32; // eax\n  int v33; // eax\n  __int32 v34; // eax\n  __int32 v35; // eax\n  bool v36; // al\n  size_t v37; // rax\n  void *v38; // r15\n  __int64 v39; // rax\n  __int64 v40; // rax\n  size_t v41; // r15\n  size_t v42; // rax\n  void *v43; // r15\n  __int64 v44; // rax\n  void *v45; // rax\n  size_t v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  void *v50; // rax\n  unsigned __int64 v51; // r14\n  int v52; // eax\n  char v53; // dl\n  size_t v54; // rax\n  char *v55; // r15\n  __int64 v56; // rax\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  int v60; // eax\n  size_t v61; // rax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  char *v65; // r14\n  __int64 v66; // rax\n  __int64 v67; // rax\n  size_t v68; // rax\n  char *v69; // r12\n  __int64 v70; // rax\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  const char *v75; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v76; // [rsp+0h] [rbp-188h]\n  size_t v77; // [rsp+0h] [rbp-188h]\n  void *v78; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v79; // [rsp+8h] [rbp-180h]\n  mbstate_t v80; // [rsp+14h] [rbp-174h]\n  char v81; // [rsp+1Ch] [rbp-16Ch]\n  char *v82; // [rsp+20h] [rbp-168h]\n  size_t v83; // [rsp+28h] [rbp-160h]\n  char v84; // [rsp+30h] [rbp-158h]\n  int v85; // [rsp+34h] [rbp-154h]\n  char v86; // [rsp+50h] [rbp-138h]\n  mbstate_t v87; // [rsp+54h] [rbp-134h]\n  char v88; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v90; // [rsp+68h] [rbp-120h]\n  char v91; // [rsp+70h] [rbp-118h]\n  int v92; // [rsp+74h] [rbp-114h]\n  __int128 v93; // [rsp+90h] [rbp-F8h]\n  size_t n[2]; // [rsp+A0h] [rbp-E8h]\n  __int128 v95; // [rsp+B0h] [rbp-D8h]\n  __int128 v96; // [rsp+C0h] [rbp-C8h]\n  mbstate_t v97[2]; // [rsp+D0h] [rbp-B8h]\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __m128i v99; // [rsp+F0h] [rbp-98h]\n  __m128i v100; // [rsp+100h] [rbp-88h]\n  mbstate_t ps; // [rsp+110h] [rbp-78h]\n  char v102; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v104; // [rsp+128h] [rbp-60h]\n  char v105; // [rsp+130h] [rbp-58h]\n  int v106; // [rsp+134h] [rbp-54h]\n\n  v2 = (__int64)a2;\n  v3 = (char *)a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v82 = a2;\n    v81 = 0;\n    v80 = 0LL;\n    if ( ((unsigned int)dword_40F520[(unsigned __int8)v17 >> 5] >> v17) & 1 )\n    {\n      v83 = 1LL;\n      v85 = v17;\n      v84 = 1;\n      v81 = 1;\nLABEL_17:\n      if ( !v85 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v80) )\n      goto LABEL_173;\n    v68 = __ctype_get_mb_cur_max();\n    v69 = v82;\n    v70 = sub_409040(v82, v68);\n    v71 = sub_40B170(&v85, v69, v70, &v80);\n    v83 = v71;\n    if ( v71 == -1 )\n    {\n      v83 = 1LL;\n      v84 = 0;\n      v81 = 1;\n    }\n    else\n    {\n      if ( v71 != -2 )\n      {\n        if ( !v71 )\n        {\n          v83 = 1LL;\n          if ( *v82 )\n            goto LABEL_174;\n          if ( v85 )\n            goto LABEL_162;\n        }\n        v84 = 1;\n        mbsinit(&v80);\n        v81 = 1;\n        goto LABEL_17;\n      }\n      v74 = strlen(v82);\n      v84 = 0;\n      v83 = v74;\n      v81 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v23 = 0LL;\n    v24 = 0LL;\n    v25 = 1;\n    v86 = 0;\n    v87 = 0LL;\n    v88 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v93) = 0;\n    *(_QWORD *)((char *)&v93 + 4) = 0LL;\n    BYTE12(v93) = 0;\n    v79 = 0LL;\n    while ( 1 )\n    {\n      if ( !(_BYTE)v93 )\n      {\n        if ( ((unsigned int)dword_40F520[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v26 = *(char *)n[0];\n          LOBYTE(v95) = 1;\n          DWORD1(v95) = v26;\n          BYTE12(v93) = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)&v93 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v93) = 1;\n      }\n      v46 = __ctype_get_mb_cur_max();\n      v77 = n[0];\n      v47 = sub_409040(n[0], v46);\n      v48 = sub_40B170((char *)&v95 + 4, v77, v47, (char *)&v93 + 4);\n      n[1] = v48;\n      switch ( v48 )\n      {\n        case -1LL:\n          n[1] = 1LL;\n          LOBYTE(v95) = 0;\n          BYTE12(v93) = 1;\n          goto LABEL_85;\n        case -2LL:\n          v59 = strlen((const char *)n[0]);\n          LOBYTE(v95) = 0;\n          n[1] = v59;\n          BYTE12(v93) = 1;\nLABEL_85:\n          if ( !((unsigned __int8)v25 & (v23 > 9)) )\n          {\n            ++v24;\n            goto LABEL_88;\n          }\n          if ( v24 < 5 * v23 )\n          {\n            ++v24;\n            v25 &= v23 > 9;\n            goto LABEL_88;\n          }\nLABEL_106:\n          v51 = v24 - v79;\n          if ( v24 == v79 )\n          {\n            if ( !v88 )\n              goto LABEL_130;\n            if ( !v91 )\n              goto LABEL_134;\nLABEL_133:\n            if ( v92 )\n              goto LABEL_134;\nLABEL_115:\n            v25 = sub_405D20(a1, a2, (char **)&ps);\n            if ( v25 )\n              return ps;\n            v53 = v95;\nLABEL_135:\n            v79 = v24++;\n            if ( !v53 )\n              goto LABEL_88;\n            goto LABEL_37;\n          }\n          if ( !v88 )\n            goto LABEL_110;\n          if ( v91 )\n            goto LABEL_113;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v88 = 0;\n              s += v90;\n              if ( !--v51 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v86 )\n              {\n                if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                {\n                  v90 = 1LL;\n                  v52 = *s;\n                  v91 = 1;\n                  v92 = v52;\n                  v88 = 1;\nLABEL_113:\n                  if ( !v92 )\n                  {\n                    if ( v88 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v86 )\n                    {\n                      if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                      {\n                        v90 = 1LL;\n                        v60 = *s;\n                        v91 = 1;\n                        v92 = v60;\n                        v88 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v87) )\n                        goto LABEL_173;\n                      v86 = 1;\n                    }\n                    v64 = __ctype_get_mb_cur_max();\n                    v65 = s;\n                    v66 = sub_409040(s, v64);\n                    v67 = sub_40B170(&v92, v65, v66, &v87);\n                    v90 = v67;\n                    if ( v67 == -1 )\n                    {\n                      v90 = 1LL;\n                      v91 = 0;\n                      v88 = 1;\n                    }\n                    else\n                    {\n                      if ( v67 != -2 )\n                      {\n                        if ( !v67 )\n                        {\n                          v90 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v92 )\n                            goto LABEL_162;\n                        }\n                        v91 = 1;\n                        if ( mbsinit(&v87) )\n                          v86 = 0;\n                        v88 = 1;\n                        goto LABEL_133;\n                      }\n                      v73 = strlen(s);\n                      v91 = 0;\n                      v90 = v73;\n                      v88 = 1;\n                    }\nLABEL_134:\n                    v53 = v95;\n                    v25 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v87) )\n                  goto LABEL_173;\n                v86 = 1;\n              }\n              break;\n            }\n            v54 = __ctype_get_mb_cur_max();\n            v55 = s;\n            v56 = sub_409040(s, v54);\n            v57 = sub_40B170(&v92, v55, v56, &v87);\n            v90 = v57;\n            switch ( v57 )\n            {\n              case -1LL:\n                v90 = 1LL;\n                v91 = 0;\n                continue;\n              case -2LL:\n                v58 = strlen(s);\n                v91 = 0;\n                v90 = v58;\n                continue;\n              case 0LL:\n                v90 = 1LL;\n                if ( *s )\n                  goto LABEL_174;\n                if ( v92 )\n                  goto LABEL_162;\n                break;\n            }\n            break;\n          }\n          v91 = 1;\n          if ( mbsinit(&v87) )\n            v86 = 0;\n          v88 = 1;\n          goto LABEL_113;\n        case 0LL:\n          n[1] = 1LL;\n          if ( *(_BYTE *)n[0] )\n            goto LABEL_174;\n          if ( DWORD1(v95) )\n            goto LABEL_162;\n          break;\n      }\n      LOBYTE(v95) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)&v93 + 4)) )\n        LOBYTE(v93) = 0;\n      BYTE12(v93) = 1;\nLABEL_33:\n      if ( !DWORD1(v95) )\n        return 0LL;\n      if ( (unsigned __int8)v25 & (v23 > 9) )\n      {\n        if ( v24 >= 5 * v23 )\n          goto LABEL_106;\n        ++v24;\n        v25 &= v23 > 9;\n      }\n      else\n      {\n        ++v24;\n      }\nLABEL_37:\n      if ( v84 )\n      {\n        if ( DWORD1(v95) == v85 )\n          goto LABEL_39;\nLABEL_66:\n        v41 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v41 = n[1];\n      if ( n[1] == v83 && !memcmp((const void *)n[0], v82, n[1]) )\n      {\nLABEL_39:\n        v27 = *a2;\n        v28 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v29 = _mm_load_si128((const __m128i *)&v93);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v28;\n        v30 = _mm_load_si128((const __m128i *)&v95);\n        s1[0] = (void *)(v28.m128i_i64[1] + v28.m128i_i64[0]);\n        v31 = _mm_load_si128((const __m128i *)&v96);\n        *(__m128i *)&v97[0].__count = v29;\n        v99 = v30;\n        v32 = dword_40F520[(unsigned __int8)v27 >> 5];\n        v100 = v31;\n        v97[1].__wchb[0] = 0;\n        v102 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v32 >> v27) & 1 )\n        {\n          v104 = 1LL;\n          v106 = v27;\n          v105 = 1;\n          v102 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v61 = __ctype_get_mb_cur_max();\n          v78 = s2;\n          v62 = sub_409040(s2, v61);\n          v63 = sub_40B170(&v106, v78, v62, &ps.4);\n          v104 = v63;\n          if ( v63 == -1 )\n          {\n            v104 = 1LL;\n            v105 = 0;\n          }\n          else if ( v63 == -2 )\n          {\n            v72 = strlen((const char *)s2);\n            v105 = 0;\n            v104 = v72;\n          }\n          else\n          {\n            if ( !v63 )\n            {\n              v104 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !v106 )\n                  goto LABEL_143;\nLABEL_162:\n                sub_405D00();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v105 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v102 = 1;\nLABEL_41:\n            if ( !v106 )\n              abort();\n          }\n          v102 = 0;\n          ++v24;\n          s2 = (char *)s2 + v104;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v37 = __ctype_get_mb_cur_max();\n              v38 = s2;\n              v39 = sub_409040(s2, v37);\n              v40 = sub_40B170(&v106, v38, v39, &ps.4);\n              v104 = v40;\n              if ( v40 == -1 )\n              {\n                v104 = 1LL;\n                v105 = 0;\n                v102 = 1;\n              }\n              else if ( v40 == -2 )\n              {\n                v49 = strlen((const char *)s2);\n                v105 = 0;\n                v104 = v49;\n                v102 = 1;\n              }\n              else\n              {\n                if ( !v40 )\n                {\n                  v104 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( v106 )\n                    goto LABEL_162;\n                }\n                v105 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v102 = 1;\n                if ( !v106 )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_40F520[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  goto LABEL_173;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v104 = 1LL;\n              v33 = *(char *)s2;\n              v105 = 1;\n              v106 = v33;\n              v102 = 1;\n              if ( !v33 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v97[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v97[0].__count) )\n              {\n                if ( ((unsigned int)dword_40F520[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v34 = *(char *)s1[0];\n                  v99.m128i_i8[0] = 1;\n                  v99.m128i_i32[1] = v34;\n                  v97[1].__wchb[0] = 1;\nLABEL_49:\n                  v35 = v99.m128i_i32[1];\n                  if ( !v99.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v105 )\n                  {\n                    v36 = v106 != v35;\nLABEL_52:\n                    if ( v36 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v24;\n                    s2 = (char *)s2 + v104;\n                    v97[1].__wchb[0] = 0;\n                    v102 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v104 )\n                    goto LABEL_66;\n                  v36 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v97 + 4)) )\n                  goto LABEL_173;\n                LOBYTE(v97[0].__count) = 1;\n              }\n              v42 = __ctype_get_mb_cur_max();\n              v43 = s1[0];\n              v44 = sub_409040(s1[0], v42);\n              v45 = (void *)sub_40B170((char *)v99.m128i_i64 + 4, v43, v44, &v97[0].4);\n              s1[1] = v45;\n              if ( v45 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                v99.m128i_i8[0] = 0;\n                v97[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v45 != (void *)-2LL )\n                {\n                  if ( !v45 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v99.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v99.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v97 + 4)) )\n                    LOBYTE(v97[0].__count) = 0;\n                  v35 = v99.m128i_i32[1];\n                  v97[1].__wchb[0] = 1;\n                  if ( !v99.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v50 = (void *)strlen((const char *)s1[0]);\n                v99.m128i_i8[0] = 0;\n                s1[1] = v50;\n                v97[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v99.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v41;\n      ++v23;\n      BYTE12(v93) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = *(_BYTE *)(v2 + 1);\n    if ( !v18 )\n      return (mbstate_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    LOBYTE(v9) = v11 & (v8 > 9);\n    v16 = (unsigned int)v9;\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v14 < 5 * v8 || v7 && (v75 = v7, v12 = strnlen(v7, v14 - v10), v10 = v14, v7 = &v75[v12], v75[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v76 = v10;\n        v13 = strlen((const char *)v2);\n        v11 = sub_405B80(v13, &ps, v16, v15, v2);\n        v10 = v76;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = v2 + v19;\n  v9 = (unsigned __int64)&v3[v19];\n  while ( 1 )\n  {\n    v22 = *(_BYTE *)(v20 + v14);\n    if ( !v22 )\n      return (mbstate_t)v3;\n    v21 = *(_BYTE *)(v9 + v14);\n    if ( !v21 )\n      return 0LL;\n    ++v14;\n    if ( v22 != v21 )\n      goto LABEL_12;\n  }\n}\n", 
            "funcStartAddr": "0x402005L", 
            "funcEndAddr": "0x40200aL", 
            "funcName": "sub_4066F0"
        }, 
        {
            "decompiledFuncCode": "mbstate_t __fastcall sub_4066F0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13\n  char *v3; // rbp\n  char v4; // r15\n  mbstate_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  unsigned __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  __int64 v16; // rbp\n  int v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  __int64 v20; // rdi\n  char v21; // si\n  char v22; // cl\n  unsigned __int64 v23; // r12\n  unsigned __int64 v24; // rbx\n  char v25; // r14\n  int v26; // eax\n  int v27; // ecx\n  __m128i v28; // xmm1\n  __m128i v29; // xmm0\n  __m128i v30; // xmm2\n  __m128i v31; // xmm3\n  unsigned int v32; // eax\n  int v33; // eax\n  __int32 v34; // eax\n  __int32 v35; // eax\n  bool v36; // al\n  size_t v37; // rax\n  void *v38; // r15\n  __int64 v39; // rax\n  __int64 v40; // rax\n  size_t v41; // r15\n  size_t v42; // rax\n  void *v43; // r15\n  __int64 v44; // rax\n  void *v45; // rax\n  size_t v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  void *v50; // rax\n  unsigned __int64 v51; // r14\n  int v52; // eax\n  char v53; // dl\n  size_t v54; // rax\n  char *v55; // r15\n  __int64 v56; // rax\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  int v60; // eax\n  size_t v61; // rax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  char *v65; // r14\n  __int64 v66; // rax\n  __int64 v67; // rax\n  size_t v68; // rax\n  char *v69; // r12\n  __int64 v70; // rax\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  const char *v75; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v76; // [rsp+0h] [rbp-188h]\n  size_t v77; // [rsp+0h] [rbp-188h]\n  void *v78; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v79; // [rsp+8h] [rbp-180h]\n  mbstate_t v80; // [rsp+14h] [rbp-174h]\n  char v81; // [rsp+1Ch] [rbp-16Ch]\n  char *v82; // [rsp+20h] [rbp-168h]\n  size_t v83; // [rsp+28h] [rbp-160h]\n  char v84; // [rsp+30h] [rbp-158h]\n  int v85; // [rsp+34h] [rbp-154h]\n  char v86; // [rsp+50h] [rbp-138h]\n  mbstate_t v87; // [rsp+54h] [rbp-134h]\n  char v88; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v90; // [rsp+68h] [rbp-120h]\n  char v91; // [rsp+70h] [rbp-118h]\n  int v92; // [rsp+74h] [rbp-114h]\n  __int128 v93; // [rsp+90h] [rbp-F8h]\n  size_t n[2]; // [rsp+A0h] [rbp-E8h]\n  __int128 v95; // [rsp+B0h] [rbp-D8h]\n  __int128 v96; // [rsp+C0h] [rbp-C8h]\n  mbstate_t v97[2]; // [rsp+D0h] [rbp-B8h]\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __m128i v99; // [rsp+F0h] [rbp-98h]\n  __m128i v100; // [rsp+100h] [rbp-88h]\n  mbstate_t ps; // [rsp+110h] [rbp-78h]\n  char v102; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v104; // [rsp+128h] [rbp-60h]\n  char v105; // [rsp+130h] [rbp-58h]\n  int v106; // [rsp+134h] [rbp-54h]\n\n  v2 = (__int64)a2;\n  v3 = (char *)a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v82 = a2;\n    v81 = 0;\n    v80 = 0LL;\n    if ( ((unsigned int)dword_40F520[(unsigned __int8)v17 >> 5] >> v17) & 1 )\n    {\n      v83 = 1LL;\n      v85 = v17;\n      v84 = 1;\n      v81 = 1;\nLABEL_17:\n      if ( !v85 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v80) )\n      goto LABEL_173;\n    v68 = __ctype_get_mb_cur_max();\n    v69 = v82;\n    v70 = sub_409040(v82, v68);\n    v71 = sub_40B170(&v85, v69, v70, &v80);\n    v83 = v71;\n    if ( v71 == -1 )\n    {\n      v83 = 1LL;\n      v84 = 0;\n      v81 = 1;\n    }\n    else\n    {\n      if ( v71 != -2 )\n      {\n        if ( !v71 )\n        {\n          v83 = 1LL;\n          if ( *v82 )\n            goto LABEL_174;\n          if ( v85 )\n            goto LABEL_162;\n        }\n        v84 = 1;\n        mbsinit(&v80);\n        v81 = 1;\n        goto LABEL_17;\n      }\n      v74 = strlen(v82);\n      v84 = 0;\n      v83 = v74;\n      v81 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v23 = 0LL;\n    v24 = 0LL;\n    v25 = 1;\n    v86 = 0;\n    v87 = 0LL;\n    v88 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v93) = 0;\n    *(_QWORD *)((char *)&v93 + 4) = 0LL;\n    BYTE12(v93) = 0;\n    v79 = 0LL;\n    while ( 1 )\n    {\n      if ( !(_BYTE)v93 )\n      {\n        if ( ((unsigned int)dword_40F520[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v26 = *(char *)n[0];\n          LOBYTE(v95) = 1;\n          DWORD1(v95) = v26;\n          BYTE12(v93) = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)&v93 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v93) = 1;\n      }\n      v46 = __ctype_get_mb_cur_max();\n      v77 = n[0];\n      v47 = sub_409040(n[0], v46);\n      v48 = sub_40B170((char *)&v95 + 4, v77, v47, (char *)&v93 + 4);\n      n[1] = v48;\n      switch ( v48 )\n      {\n        case -1LL:\n          n[1] = 1LL;\n          LOBYTE(v95) = 0;\n          BYTE12(v93) = 1;\n          goto LABEL_85;\n        case -2LL:\n          v59 = strlen((const char *)n[0]);\n          LOBYTE(v95) = 0;\n          n[1] = v59;\n          BYTE12(v93) = 1;\nLABEL_85:\n          if ( !((unsigned __int8)v25 & (v23 > 9)) )\n          {\n            ++v24;\n            goto LABEL_88;\n          }\n          if ( v24 < 5 * v23 )\n          {\n            ++v24;\n            v25 &= v23 > 9;\n            goto LABEL_88;\n          }\nLABEL_106:\n          v51 = v24 - v79;\n          if ( v24 == v79 )\n          {\n            if ( !v88 )\n              goto LABEL_130;\n            if ( !v91 )\n              goto LABEL_134;\nLABEL_133:\n            if ( v92 )\n              goto LABEL_134;\nLABEL_115:\n            v25 = sub_405D20(a1, a2, (char **)&ps);\n            if ( v25 )\n              return ps;\n            v53 = v95;\nLABEL_135:\n            v79 = v24++;\n            if ( !v53 )\n              goto LABEL_88;\n            goto LABEL_37;\n          }\n          if ( !v88 )\n            goto LABEL_110;\n          if ( v91 )\n            goto LABEL_113;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v88 = 0;\n              s += v90;\n              if ( !--v51 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v86 )\n              {\n                if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                {\n                  v90 = 1LL;\n                  v52 = *s;\n                  v91 = 1;\n                  v92 = v52;\n                  v88 = 1;\nLABEL_113:\n                  if ( !v92 )\n                  {\n                    if ( v88 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v86 )\n                    {\n                      if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                      {\n                        v90 = 1LL;\n                        v60 = *s;\n                        v91 = 1;\n                        v92 = v60;\n                        v88 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v87) )\n                        goto LABEL_173;\n                      v86 = 1;\n                    }\n                    v64 = __ctype_get_mb_cur_max();\n                    v65 = s;\n                    v66 = sub_409040(s, v64);\n                    v67 = sub_40B170(&v92, v65, v66, &v87);\n                    v90 = v67;\n                    if ( v67 == -1 )\n                    {\n                      v90 = 1LL;\n                      v91 = 0;\n                      v88 = 1;\n                    }\n                    else\n                    {\n                      if ( v67 != -2 )\n                      {\n                        if ( !v67 )\n                        {\n                          v90 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v92 )\n                            goto LABEL_162;\n                        }\n                        v91 = 1;\n                        if ( mbsinit(&v87) )\n                          v86 = 0;\n                        v88 = 1;\n                        goto LABEL_133;\n                      }\n                      v73 = strlen(s);\n                      v91 = 0;\n                      v90 = v73;\n                      v88 = 1;\n                    }\nLABEL_134:\n                    v53 = v95;\n                    v25 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v87) )\n                  goto LABEL_173;\n                v86 = 1;\n              }\n              break;\n            }\n            v54 = __ctype_get_mb_cur_max();\n            v55 = s;\n            v56 = sub_409040(s, v54);\n            v57 = sub_40B170(&v92, v55, v56, &v87);\n            v90 = v57;\n            switch ( v57 )\n            {\n              case -1LL:\n                v90 = 1LL;\n                v91 = 0;\n                continue;\n              case -2LL:\n                v58 = strlen(s);\n                v91 = 0;\n                v90 = v58;\n                continue;\n              case 0LL:\n                v90 = 1LL;\n                if ( *s )\n                  goto LABEL_174;\n                if ( v92 )\n                  goto LABEL_162;\n                break;\n            }\n            break;\n          }\n          v91 = 1;\n          if ( mbsinit(&v87) )\n            v86 = 0;\n          v88 = 1;\n          goto LABEL_113;\n        case 0LL:\n          n[1] = 1LL;\n          if ( *(_BYTE *)n[0] )\n            goto LABEL_174;\n          if ( DWORD1(v95) )\n            goto LABEL_162;\n          break;\n      }\n      LOBYTE(v95) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)&v93 + 4)) )\n        LOBYTE(v93) = 0;\n      BYTE12(v93) = 1;\nLABEL_33:\n      if ( !DWORD1(v95) )\n        return 0LL;\n      if ( (unsigned __int8)v25 & (v23 > 9) )\n      {\n        if ( v24 >= 5 * v23 )\n          goto LABEL_106;\n        ++v24;\n        v25 &= v23 > 9;\n      }\n      else\n      {\n        ++v24;\n      }\nLABEL_37:\n      if ( v84 )\n      {\n        if ( DWORD1(v95) == v85 )\n          goto LABEL_39;\nLABEL_66:\n        v41 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v41 = n[1];\n      if ( n[1] == v83 && !memcmp((const void *)n[0], v82, n[1]) )\n      {\nLABEL_39:\n        v27 = *a2;\n        v28 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v29 = _mm_load_si128((const __m128i *)&v93);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v28;\n        v30 = _mm_load_si128((const __m128i *)&v95);\n        s1[0] = (void *)(v28.m128i_i64[1] + v28.m128i_i64[0]);\n        v31 = _mm_load_si128((const __m128i *)&v96);\n        *(__m128i *)&v97[0].__count = v29;\n        v99 = v30;\n        v32 = dword_40F520[(unsigned __int8)v27 >> 5];\n        v100 = v31;\n        v97[1].__wchb[0] = 0;\n        v102 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v32 >> v27) & 1 )\n        {\n          v104 = 1LL;\n          v106 = v27;\n          v105 = 1;\n          v102 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v61 = __ctype_get_mb_cur_max();\n          v78 = s2;\n          v62 = sub_409040(s2, v61);\n          v63 = sub_40B170(&v106, v78, v62, &ps.4);\n          v104 = v63;\n          if ( v63 == -1 )\n          {\n            v104 = 1LL;\n            v105 = 0;\n          }\n          else if ( v63 == -2 )\n          {\n            v72 = strlen((const char *)s2);\n            v105 = 0;\n            v104 = v72;\n          }\n          else\n          {\n            if ( !v63 )\n            {\n              v104 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !v106 )\n                  goto LABEL_143;\nLABEL_162:\n                sub_405D00();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v105 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v102 = 1;\nLABEL_41:\n            if ( !v106 )\n              abort();\n          }\n          v102 = 0;\n          ++v24;\n          s2 = (char *)s2 + v104;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v37 = __ctype_get_mb_cur_max();\n              v38 = s2;\n              v39 = sub_409040(s2, v37);\n              v40 = sub_40B170(&v106, v38, v39, &ps.4);\n              v104 = v40;\n              if ( v40 == -1 )\n              {\n                v104 = 1LL;\n                v105 = 0;\n                v102 = 1;\n              }\n              else if ( v40 == -2 )\n              {\n                v49 = strlen((const char *)s2);\n                v105 = 0;\n                v104 = v49;\n                v102 = 1;\n              }\n              else\n              {\n                if ( !v40 )\n                {\n                  v104 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( v106 )\n                    goto LABEL_162;\n                }\n                v105 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v102 = 1;\n                if ( !v106 )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_40F520[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  goto LABEL_173;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v104 = 1LL;\n              v33 = *(char *)s2;\n              v105 = 1;\n              v106 = v33;\n              v102 = 1;\n              if ( !v33 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v97[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v97[0].__count) )\n              {\n                if ( ((unsigned int)dword_40F520[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v34 = *(char *)s1[0];\n                  v99.m128i_i8[0] = 1;\n                  v99.m128i_i32[1] = v34;\n                  v97[1].__wchb[0] = 1;\nLABEL_49:\n                  v35 = v99.m128i_i32[1];\n                  if ( !v99.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v105 )\n                  {\n                    v36 = v106 != v35;\nLABEL_52:\n                    if ( v36 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v24;\n                    s2 = (char *)s2 + v104;\n                    v97[1].__wchb[0] = 0;\n                    v102 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v104 )\n                    goto LABEL_66;\n                  v36 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v97 + 4)) )\n                  goto LABEL_173;\n                LOBYTE(v97[0].__count) = 1;\n              }\n              v42 = __ctype_get_mb_cur_max();\n              v43 = s1[0];\n              v44 = sub_409040(s1[0], v42);\n              v45 = (void *)sub_40B170((char *)v99.m128i_i64 + 4, v43, v44, &v97[0].4);\n              s1[1] = v45;\n              if ( v45 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                v99.m128i_i8[0] = 0;\n                v97[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v45 != (void *)-2LL )\n                {\n                  if ( !v45 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v99.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v99.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v97 + 4)) )\n                    LOBYTE(v97[0].__count) = 0;\n                  v35 = v99.m128i_i32[1];\n                  v97[1].__wchb[0] = 1;\n                  if ( !v99.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v50 = (void *)strlen((const char *)s1[0]);\n                v99.m128i_i8[0] = 0;\n                s1[1] = v50;\n                v97[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v99.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v41;\n      ++v23;\n      BYTE12(v93) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = *(_BYTE *)(v2 + 1);\n    if ( !v18 )\n      return (mbstate_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    LOBYTE(v9) = v11 & (v8 > 9);\n    v16 = (unsigned int)v9;\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v14 < 5 * v8 || v7 && (v75 = v7, v12 = strnlen(v7, v14 - v10), v10 = v14, v7 = &v75[v12], v75[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v76 = v10;\n        v13 = strlen((const char *)v2);\n        v11 = sub_405B80(v13, &ps, v16, v15, v2);\n        v10 = v76;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = v2 + v19;\n  v9 = (unsigned __int64)&v3[v19];\n  while ( 1 )\n  {\n    v22 = *(_BYTE *)(v20 + v14);\n    if ( !v22 )\n      return (mbstate_t)v3;\n    v21 = *(_BYTE *)(v9 + v14);\n    if ( !v21 )\n      return 0LL;\n    ++v14;\n    if ( v22 != v21 )\n      goto LABEL_12;\n  }\n}\n\nmbstate_t __fastcall sub_4066F0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13\n  char *v3; // rbp\n  char v4; // r15\n  mbstate_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  unsigned __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  __int64 v16; // rbp\n  int v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  __int64 v20; // rdi\n  char v21; // si\n  char v22; // cl\n  unsigned __int64 v23; // r12\n  unsigned __int64 v24; // rbx\n  char v25; // r14\n  int v26; // eax\n  int v27; // ecx\n  __m128i v28; // xmm1\n  __m128i v29; // xmm0\n  __m128i v30; // xmm2\n  __m128i v31; // xmm3\n  unsigned int v32; // eax\n  int v33; // eax\n  __int32 v34; // eax\n  __int32 v35; // eax\n  bool v36; // al\n  size_t v37; // rax\n  void *v38; // r15\n  __int64 v39; // rax\n  __int64 v40; // rax\n  size_t v41; // r15\n  size_t v42; // rax\n  void *v43; // r15\n  __int64 v44; // rax\n  void *v45; // rax\n  size_t v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  void *v50; // rax\n  unsigned __int64 v51; // r14\n  int v52; // eax\n  char v53; // dl\n  size_t v54; // rax\n  char *v55; // r15\n  __int64 v56; // rax\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  int v60; // eax\n  size_t v61; // rax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  char *v65; // r14\n  __int64 v66; // rax\n  __int64 v67; // rax\n  size_t v68; // rax\n  char *v69; // r12\n  __int64 v70; // rax\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  const char *v75; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v76; // [rsp+0h] [rbp-188h]\n  size_t v77; // [rsp+0h] [rbp-188h]\n  void *v78; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v79; // [rsp+8h] [rbp-180h]\n  mbstate_t v80; // [rsp+14h] [rbp-174h]\n  char v81; // [rsp+1Ch] [rbp-16Ch]\n  char *v82; // [rsp+20h] [rbp-168h]\n  size_t v83; // [rsp+28h] [rbp-160h]\n  char v84; // [rsp+30h] [rbp-158h]\n  int v85; // [rsp+34h] [rbp-154h]\n  char v86; // [rsp+50h] [rbp-138h]\n  mbstate_t v87; // [rsp+54h] [rbp-134h]\n  char v88; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v90; // [rsp+68h] [rbp-120h]\n  char v91; // [rsp+70h] [rbp-118h]\n  int v92; // [rsp+74h] [rbp-114h]\n  __int128 v93; // [rsp+90h] [rbp-F8h]\n  size_t n[2]; // [rsp+A0h] [rbp-E8h]\n  __int128 v95; // [rsp+B0h] [rbp-D8h]\n  __int128 v96; // [rsp+C0h] [rbp-C8h]\n  mbstate_t v97[2]; // [rsp+D0h] [rbp-B8h]\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __m128i v99; // [rsp+F0h] [rbp-98h]\n  __m128i v100; // [rsp+100h] [rbp-88h]\n  mbstate_t ps; // [rsp+110h] [rbp-78h]\n  char v102; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v104; // [rsp+128h] [rbp-60h]\n  char v105; // [rsp+130h] [rbp-58h]\n  int v106; // [rsp+134h] [rbp-54h]\n\n  v2 = (__int64)a2;\n  v3 = (char *)a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v82 = a2;\n    v81 = 0;\n    v80 = 0LL;\n    if ( ((unsigned int)dword_40F520[(unsigned __int8)v17 >> 5] >> v17) & 1 )\n    {\n      v83 = 1LL;\n      v85 = v17;\n      v84 = 1;\n      v81 = 1;\nLABEL_17:\n      if ( !v85 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v80) )\n      goto LABEL_173;\n    v68 = __ctype_get_mb_cur_max();\n    v69 = v82;\n    v70 = sub_409040(v82, v68);\n    v71 = sub_40B170(&v85, v69, v70, &v80);\n    v83 = v71;\n    if ( v71 == -1 )\n    {\n      v83 = 1LL;\n      v84 = 0;\n      v81 = 1;\n    }\n    else\n    {\n      if ( v71 != -2 )\n      {\n        if ( !v71 )\n        {\n          v83 = 1LL;\n          if ( *v82 )\n            goto LABEL_174;\n          if ( v85 )\n            goto LABEL_162;\n        }\n        v84 = 1;\n        mbsinit(&v80);\n        v81 = 1;\n        goto LABEL_17;\n      }\n      v74 = strlen(v82);\n      v84 = 0;\n      v83 = v74;\n      v81 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v23 = 0LL;\n    v24 = 0LL;\n    v25 = 1;\n    v86 = 0;\n    v87 = 0LL;\n    v88 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v93) = 0;\n    *(_QWORD *)((char *)&v93 + 4) = 0LL;\n    BYTE12(v93) = 0;\n    v79 = 0LL;\n    while ( 1 )\n    {\n      if ( !(_BYTE)v93 )\n      {\n        if ( ((unsigned int)dword_40F520[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v26 = *(char *)n[0];\n          LOBYTE(v95) = 1;\n          DWORD1(v95) = v26;\n          BYTE12(v93) = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)&v93 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v93) = 1;\n      }\n      v46 = __ctype_get_mb_cur_max();\n      v77 = n[0];\n      v47 = sub_409040(n[0], v46);\n      v48 = sub_40B170((char *)&v95 + 4, v77, v47, (char *)&v93 + 4);\n      n[1] = v48;\n      switch ( v48 )\n      {\n        case -1LL:\n          n[1] = 1LL;\n          LOBYTE(v95) = 0;\n          BYTE12(v93) = 1;\n          goto LABEL_85;\n        case -2LL:\n          v59 = strlen((const char *)n[0]);\n          LOBYTE(v95) = 0;\n          n[1] = v59;\n          BYTE12(v93) = 1;\nLABEL_85:\n          if ( !((unsigned __int8)v25 & (v23 > 9)) )\n          {\n            ++v24;\n            goto LABEL_88;\n          }\n          if ( v24 < 5 * v23 )\n          {\n            ++v24;\n            v25 &= v23 > 9;\n            goto LABEL_88;\n          }\nLABEL_106:\n          v51 = v24 - v79;\n          if ( v24 == v79 )\n          {\n            if ( !v88 )\n              goto LABEL_130;\n            if ( !v91 )\n              goto LABEL_134;\nLABEL_133:\n            if ( v92 )\n              goto LABEL_134;\nLABEL_115:\n            v25 = sub_405D20(a1, a2, (char **)&ps);\n            if ( v25 )\n              return ps;\n            v53 = v95;\nLABEL_135:\n            v79 = v24++;\n            if ( !v53 )\n              goto LABEL_88;\n            goto LABEL_37;\n          }\n          if ( !v88 )\n            goto LABEL_110;\n          if ( v91 )\n            goto LABEL_113;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v88 = 0;\n              s += v90;\n              if ( !--v51 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v86 )\n              {\n                if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                {\n                  v90 = 1LL;\n                  v52 = *s;\n                  v91 = 1;\n                  v92 = v52;\n                  v88 = 1;\nLABEL_113:\n                  if ( !v92 )\n                  {\n                    if ( v88 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v86 )\n                    {\n                      if ( ((unsigned int)dword_40F520[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                      {\n                        v90 = 1LL;\n                        v60 = *s;\n                        v91 = 1;\n                        v92 = v60;\n                        v88 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v87) )\n                        goto LABEL_173;\n                      v86 = 1;\n                    }\n                    v64 = __ctype_get_mb_cur_max();\n                    v65 = s;\n                    v66 = sub_409040(s, v64);\n                    v67 = sub_40B170(&v92, v65, v66, &v87);\n                    v90 = v67;\n                    if ( v67 == -1 )\n                    {\n                      v90 = 1LL;\n                      v91 = 0;\n                      v88 = 1;\n                    }\n                    else\n                    {\n                      if ( v67 != -2 )\n                      {\n                        if ( !v67 )\n                        {\n                          v90 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v92 )\n                            goto LABEL_162;\n                        }\n                        v91 = 1;\n                        if ( mbsinit(&v87) )\n                          v86 = 0;\n                        v88 = 1;\n                        goto LABEL_133;\n                      }\n                      v73 = strlen(s);\n                      v91 = 0;\n                      v90 = v73;\n                      v88 = 1;\n                    }\nLABEL_134:\n                    v53 = v95;\n                    v25 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v87) )\n                  goto LABEL_173;\n                v86 = 1;\n              }\n              break;\n            }\n            v54 = __ctype_get_mb_cur_max();\n            v55 = s;\n            v56 = sub_409040(s, v54);\n            v57 = sub_40B170(&v92, v55, v56, &v87);\n            v90 = v57;\n            switch ( v57 )\n            {\n              case -1LL:\n                v90 = 1LL;\n                v91 = 0;\n                continue;\n              case -2LL:\n                v58 = strlen(s);\n                v91 = 0;\n                v90 = v58;\n                continue;\n              case 0LL:\n                v90 = 1LL;\n                if ( *s )\n                  goto LABEL_174;\n                if ( v92 )\n                  goto LABEL_162;\n                break;\n            }\n            break;\n          }\n          v91 = 1;\n          if ( mbsinit(&v87) )\n            v86 = 0;\n          v88 = 1;\n          goto LABEL_113;\n        case 0LL:\n          n[1] = 1LL;\n          if ( *(_BYTE *)n[0] )\n            goto LABEL_174;\n          if ( DWORD1(v95) )\n            goto LABEL_162;\n          break;\n      }\n      LOBYTE(v95) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)&v93 + 4)) )\n        LOBYTE(v93) = 0;\n      BYTE12(v93) = 1;\nLABEL_33:\n      if ( !DWORD1(v95) )\n        return 0LL;\n      if ( (unsigned __int8)v25 & (v23 > 9) )\n      {\n        if ( v24 >= 5 * v23 )\n          goto LABEL_106;\n        ++v24;\n        v25 &= v23 > 9;\n      }\n      else\n      {\n        ++v24;\n      }\nLABEL_37:\n      if ( v84 )\n      {\n        if ( DWORD1(v95) == v85 )\n          goto LABEL_39;\nLABEL_66:\n        v41 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v41 = n[1];\n      if ( n[1] == v83 && !memcmp((const void *)n[0], v82, n[1]) )\n      {\nLABEL_39:\n        v27 = *a2;\n        v28 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v29 = _mm_load_si128((const __m128i *)&v93);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v28;\n        v30 = _mm_load_si128((const __m128i *)&v95);\n        s1[0] = (void *)(v28.m128i_i64[1] + v28.m128i_i64[0]);\n        v31 = _mm_load_si128((const __m128i *)&v96);\n        *(__m128i *)&v97[0].__count = v29;\n        v99 = v30;\n        v32 = dword_40F520[(unsigned __int8)v27 >> 5];\n        v100 = v31;\n        v97[1].__wchb[0] = 0;\n        v102 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v32 >> v27) & 1 )\n        {\n          v104 = 1LL;\n          v106 = v27;\n          v105 = 1;\n          v102 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v61 = __ctype_get_mb_cur_max();\n          v78 = s2;\n          v62 = sub_409040(s2, v61);\n          v63 = sub_40B170(&v106, v78, v62, &ps.4);\n          v104 = v63;\n          if ( v63 == -1 )\n          {\n            v104 = 1LL;\n            v105 = 0;\n          }\n          else if ( v63 == -2 )\n          {\n            v72 = strlen((const char *)s2);\n            v105 = 0;\n            v104 = v72;\n          }\n          else\n          {\n            if ( !v63 )\n            {\n              v104 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !v106 )\n                  goto LABEL_143;\nLABEL_162:\n                sub_405D00();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v105 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v102 = 1;\nLABEL_41:\n            if ( !v106 )\n              abort();\n          }\n          v102 = 0;\n          ++v24;\n          s2 = (char *)s2 + v104;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v37 = __ctype_get_mb_cur_max();\n              v38 = s2;\n              v39 = sub_409040(s2, v37);\n              v40 = sub_40B170(&v106, v38, v39, &ps.4);\n              v104 = v40;\n              if ( v40 == -1 )\n              {\n                v104 = 1LL;\n                v105 = 0;\n                v102 = 1;\n              }\n              else if ( v40 == -2 )\n              {\n                v49 = strlen((const char *)s2);\n                v105 = 0;\n                v104 = v49;\n                v102 = 1;\n              }\n              else\n              {\n                if ( !v40 )\n                {\n                  v104 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( v106 )\n                    goto LABEL_162;\n                }\n                v105 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v102 = 1;\n                if ( !v106 )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_40F520[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  goto LABEL_173;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v104 = 1LL;\n              v33 = *(char *)s2;\n              v105 = 1;\n              v106 = v33;\n              v102 = 1;\n              if ( !v33 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v97[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v97[0].__count) )\n              {\n                if ( ((unsigned int)dword_40F520[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v34 = *(char *)s1[0];\n                  v99.m128i_i8[0] = 1;\n                  v99.m128i_i32[1] = v34;\n                  v97[1].__wchb[0] = 1;\nLABEL_49:\n                  v35 = v99.m128i_i32[1];\n                  if ( !v99.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v105 )\n                  {\n                    v36 = v106 != v35;\nLABEL_52:\n                    if ( v36 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v24;\n                    s2 = (char *)s2 + v104;\n                    v97[1].__wchb[0] = 0;\n                    v102 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v104 )\n                    goto LABEL_66;\n                  v36 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v97 + 4)) )\n                  goto LABEL_173;\n                LOBYTE(v97[0].__count) = 1;\n              }\n              v42 = __ctype_get_mb_cur_max();\n              v43 = s1[0];\n              v44 = sub_409040(s1[0], v42);\n              v45 = (void *)sub_40B170((char *)v99.m128i_i64 + 4, v43, v44, &v97[0].4);\n              s1[1] = v45;\n              if ( v45 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                v99.m128i_i8[0] = 0;\n                v97[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v45 != (void *)-2LL )\n                {\n                  if ( !v45 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v99.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v99.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v97 + 4)) )\n                    LOBYTE(v97[0].__count) = 0;\n                  v35 = v99.m128i_i32[1];\n                  v97[1].__wchb[0] = 1;\n                  if ( !v99.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v50 = (void *)strlen((const char *)s1[0]);\n                v99.m128i_i8[0] = 0;\n                s1[1] = v50;\n                v97[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v99.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v41;\n      ++v23;\n      BYTE12(v93) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = *(_BYTE *)(v2 + 1);\n    if ( !v18 )\n      return (mbstate_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    LOBYTE(v9) = v11 & (v8 > 9);\n    v16 = (unsigned int)v9;\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v14 < 5 * v8 || v7 && (v75 = v7, v12 = strnlen(v7, v14 - v10), v10 = v14, v7 = &v75[v12], v75[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v76 = v10;\n        v13 = strlen((const char *)v2);\n        v11 = sub_405B80(v13, &ps, v16, v15, v2);\n        v10 = v76;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = v2 + v19;\n  v9 = (unsigned __int64)&v3[v19];\n  while ( 1 )\n  {\n    v22 = *(_BYTE *)(v20 + v14);\n    if ( !v22 )\n      return (mbstate_t)v3;\n    v21 = *(_BYTE *)(v9 + v14);\n    if ( !v21 )\n      return 0LL;\n    ++v14;\n    if ( v22 != v21 )\n      goto LABEL_12;\n  }\n}\n", 
            "funcStartAddr": "0x402005L", 
            "funcEndAddr": "0x40200aL", 
            "funcName": "sub_4066F0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4075C0(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_612528 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x4075c0L", 
            "funcEndAddr": "0x407659L", 
            "funcName": "sub_4075C0"
        }, 
        {
            "decompiledFuncCode": "const char *__fastcall sub_407660(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40B320();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40DDD9;\n      if ( !v5 )\n        v2 = (char *)&unk_40DDCE;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40DDD5;\n    if ( !v5 )\n      v2 = (char *)&unk_40DDD2;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n  return v6;\n}\n", 
            "funcStartAddr": "0x407660L", 
            "funcEndAddr": "0x407752L", 
            "funcName": "sub_407660"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407760(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  __int64 v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // ebp\n  char v12; // zf\n  size_t v13; // rax\n  int v14; // edx\n  int v15; // er11\n  unsigned __int64 v16; // r10\n  unsigned __int64 v17; // rbx\n  int v18; // eax\n  unsigned __int64 v19; // r11\n  int v20; // er10\n  unsigned __int64 v21; // r13\n  int v22; // er8\n  char *v23; // r9\n  size_t v24; // rax\n  int v25; // eax\n  unsigned __int64 v26; // r12\n  bool v27; // al\n  const char *v28; // rax\n  char i; // al\n  size_t v30; // rax\n  bool v31; // al\n  char v32; // cl\n  int v33; // eax\n  __int64 v34; // rcx\n  unsigned __int64 v35; // rax\n  const unsigned __int16 **v36; // rax\n  unsigned __int64 v37; // rcx\n  int v38; // edx\n  unsigned __int64 result; // rax\n  __int64 v40; // rsi\n  char v41; // dl\n  const char *v42; // rax\n  size_t v43; // rax\n  unsigned __int64 v44; // rbx\n  unsigned __int64 v45; // r14\n  __int64 v46; // rax\n  __int64 v47; // r15\n  char *v48; // rdx\n  unsigned __int64 v49; // rcx\n  int v50; // eax\n  char v51; // si\n  unsigned __int64 v52; // rsi\n  char *v53; // rdi\n  unsigned __int64 v54; // rax\n  int v55; // [rsp+Ch] [rbp-ACh]\n  unsigned __int8 v56; // [rsp+Ch] [rbp-ACh]\n  unsigned __int64 v57; // [rsp+10h] [rbp-A8h]\n  char v58; // [rsp+10h] [rbp-A8h]\n  unsigned __int64 v59; // [rsp+10h] [rbp-A8h]\n  char *s; // [rsp+18h] [rbp-A0h]\n  size_t n; // [rsp+20h] [rbp-98h]\n  char *v62; // [rsp+28h] [rbp-90h]\n  int v63; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v64; // [rsp+28h] [rbp-90h]\n  char *v65; // [rsp+28h] [rbp-90h]\n  unsigned __int64 v66; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-88h]\n  unsigned __int8 v68; // [rsp+30h] [rbp-88h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-88h]\n  char v70; // [rsp+30h] [rbp-88h]\n  int v71; // [rsp+30h] [rbp-88h]\n  int v72; // [rsp+38h] [rbp-80h]\n  unsigned __int64 v73; // [rsp+38h] [rbp-80h]\n  int v74; // [rsp+38h] [rbp-80h]\n  int v75; // [rsp+38h] [rbp-80h]\n  __int64 v76; // [rsp+38h] [rbp-80h]\n  int v77; // [rsp+40h] [rbp-78h]\n  unsigned __int64 v78; // [rsp+40h] [rbp-78h]\n  const char *s2; // [rsp+48h] [rbp-70h]\n  size_t v80; // [rsp+50h] [rbp-68h]\n  char v81; // [rsp+58h] [rbp-60h]\n  bool v82; // [rsp+5Dh] [rbp-5Bh]\n  unsigned __int8 v83; // [rsp+5Eh] [rbp-5Ah]\n  unsigned __int64 v84; // [rsp+60h] [rbp-58h]\n  char *v85; // [rsp+68h] [rbp-50h]\n  wint_t wc; // [rsp+74h] [rbp-44h]\n  mbstate_t ps; // [rsp+78h] [rbp-40h]\n\n  v9 = (__int64)a1;\n  v10 = a2;\n  v11 = a6 & 2;\n  s = a3;\n  v57 = a4;\n  v55 = a5;\n  v81 = a6;\n  v13 = __ctype_get_mb_cur_max();\n  v15 = v55;\n  v80 = v13;\n  v16 = v57;\n  switch ( v55 )\n  {\n    case 0:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v11 )\n      {\n        v56 = 0;\n        goto LABEL_38;\n      }\n      v82 = 1;\n      v17 = 0LL;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      break;\n    case 3:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 2;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      break;\n    case 4:\n      if ( v11 )\n      {\nLABEL_2:\n        v82 = 1;\n        v17 = 0LL;\n        v15 = 2;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      else\n      {\n        v56 = 1;\nLABEL_38:\n        if ( a2 )\n          *a1 = 39;\n        v82 = 0;\n        v17 = 1LL;\n        v15 = 2;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      break;\n    case 5:\n      if ( v11 )\n      {\n        v82 = 1;\n        v17 = 0LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n          *a1 = 34;\n        v82 = 0;\n        v17 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      break;\n    case 6:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 5;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      break;\n    case 7:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 8:\n    case 9:\n    case 10:\n      if ( !v12 )\n      {\n        a8 = sub_407660(\"`\", v55);\n        v28 = sub_407660(\"'\", v55);\n        v16 = v57;\n        v15 = v55;\n        a9 = (char *)v28;\n      }\n      v17 = 0LL;\n      if ( !v11 )\n      {\n        for ( i = *a8; i; i = a8[v17] )\n        {\n          if ( a2 > v17 )\n            a1[v17] = i;\n          ++v17;\n        }\n      }\n      v63 = v15;\n      v59 = v16;\n      v82 = v11 != 0;\n      v30 = strlen(a9);\n      v56 = 1;\n      v16 = v59;\n      n = v30;\n      v15 = v63;\n      s2 = a9;\n      break;\n    default:\n      abort();\n      return result;\n  }\n  v18 = v15;\n  v19 = v16;\n  v20 = v18;\n  v21 = 0LL;\n  v22 = 0;\nLABEL_4:\n  while ( 2 )\n  {\n    LOBYTE(v11) = v19 != v21;\n    if ( v19 == -1LL )\n      LOBYTE(v11) = s[v21] != 0;\n    if ( !(_BYTE)v11 )\n    {\n      if ( v17 == 0 && v82 && v20 == 2 )\n        return sub_407760(v9, v10, s);\n      if ( s2 )\n      {\n        if ( !v82 )\n        {\n          v41 = *s2;\n          if ( *s2 )\n          {\n            v42 = &s2[-v17];\n            do\n            {\n              if ( v10 > v17 )\n                *(_BYTE *)(v9 + v17) = v41;\n              v41 = v42[++v17];\n            }\n            while ( v41 );\n          }\n        }\n      }\n      if ( v17 < v10 )\n        *(_BYTE *)(v9 + v17) = 0;\n      return v17;\n    }\n    v23 = &s[v21];\n    v58 = v56 & (v20 != 2);\n    if ( v56 & (v20 != 2) )\n    {\n      if ( !n )\n        goto LABEL_271;\n      if ( v19 == -1LL && n > 1 )\n      {\n        v72 = v20;\n        v67 = v22;\n        v24 = strlen(s);\n        v20 = v72;\n        v22 = v67;\n        v23 = &s[v21];\n        v19 = v24;\n      }\n      if ( v21 + n > v19 )\n        goto LABEL_271;\n      v77 = v20;\n      v73 = v19;\n      v68 = v22;\n      v62 = v23;\n      v25 = memcmp(v23, s2, n);\n      v23 = v62;\n      v22 = v68;\n      v19 = v73;\n      v20 = v77;\n      if ( v25 )\n      {\nLABEL_271:\n        LOBYTE(v26) = *v23;\n        switch ( *v23 )\n        {\n          case 0:\n            goto LABEL_103;\n          case 7:\nLABEL_94:\n            LOBYTE(v26) = 97;\n            v27 = 0;\n            goto LABEL_91;\n          case 8:\nLABEL_93:\n            LOBYTE(v26) = 98;\n            v27 = 0;\n            goto LABEL_91;\n          case 9:\nLABEL_102:\n            LOBYTE(v26) = 116;\n            v27 = 0;\n            goto LABEL_91;\n          case 10:\nLABEL_90:\n            LOBYTE(v26) = 110;\n            v27 = 0;\n            goto LABEL_91;\n          case 11:\nLABEL_101:\n            LOBYTE(v26) = 118;\n            v27 = 0;\n            goto LABEL_91;\n          case 12:\nLABEL_100:\n            LOBYTE(v26) = 102;\n            v27 = 0;\nLABEL_91:\n            if ( v82 )\n              return sub_407760(v9, v10, s);\n            goto LABEL_21;\n          case 13:\n            v58 = 0;\nLABEL_96:\n            LOBYTE(v26) = 13;\n            v32 = 114;\n            LOBYTE(v14) = v20 == 2;\n            goto LABEL_88;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v58 = 0;\nLABEL_85:\n            v14 = 0;\n            goto LABEL_65;\n          case 35:\n          case 126:\n            v58 = 0;\nLABEL_98:\n            if ( v21 )\n              goto LABEL_17;\n            v14 = 0;\n            goto LABEL_65;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v58 = 0;\n            goto LABEL_17;\n          case 39:\n            v58 = 0;\n            goto LABEL_73;\n          case 63:\n            v58 = 0;\n            goto LABEL_69;\n          case 92:\n            v58 = 0;\n            goto LABEL_87;\n          case 123:\n          case 125:\n            v58 = 0;\n            goto LABEL_60;\n          default:\n            v58 = 0;\n            goto LABEL_124;\n        }\n      }\n      if ( !v82 )\n      {\n        LOBYTE(v26) = *v62;\n        switch ( *v62 )\n        {\n          case 0:\n            goto LABEL_105;\n          case 7:\n            goto LABEL_94;\n          case 8:\n            goto LABEL_93;\n          case 9:\n            goto LABEL_102;\n          case 10:\n            goto LABEL_90;\n          case 11:\n            goto LABEL_101;\n          case 12:\n            goto LABEL_100;\n          case 13:\n            goto LABEL_96;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            goto LABEL_85;\n          case 35:\n          case 126:\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            goto LABEL_17;\n          case 39:\n            goto LABEL_73;\n          case 63:\n            goto LABEL_69;\n          case 92:\n            goto LABEL_87;\n          case 123:\n          case 125:\n            goto LABEL_60;\n          default:\n            goto LABEL_124;\n        }\n      }\n      return sub_407760(v9, v10, s);\n    }\n    LOBYTE(v26) = *v23;\n    switch ( *v23 )\n    {\n      case 0:\n        if ( !v56 )\n        {\n          if ( v81 & 1 )\n          {\n            ++v21;\n            continue;\n          }\n          if ( !v82 )\n          {\n            ++v21;\n            v11 = v22;\n            LOBYTE(v26) = 0;\n            goto LABEL_144;\n          }\n          v11 = 0;\n          if ( a7 )\n          {\n            v58 = 0;\n            LOBYTE(v26) = 0;\n            goto LABEL_18;\n          }\n          LOBYTE(v26) = 0;\n          goto LABEL_122;\n        }\nLABEL_103:\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        v58 = 0;\nLABEL_105:\n        LOBYTE(v14) = v20 == 2;\n        v33 = v22 ^ 1;\n        LOBYTE(v33) = (v20 == 2) & (v22 ^ 1);\n        if ( (_BYTE)v33 )\n        {\n          if ( v17 < v10 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v34 = v17 + 3;\n          if ( v10 <= v17 + 3 )\n          {\n            v17 += 4LL;\n            ++v21;\n            v22 = v33;\n            LOBYTE(v26) = 48;\n            goto LABEL_82;\n          }\n          v22 = v33;\n        }\n        else\n        {\n          v34 = v17;\n          if ( v17 >= v10 )\n            goto LABEL_115;\n        }\n        *(_BYTE *)(v9 + v34) = 92;\nLABEL_115:\n        v17 = v34 + 1;\n        v35 = v21 + 1;\n        if ( v20 == 2 )\n        {\n          ++v21;\n          LOBYTE(v26) = 48;\n          goto LABEL_82;\n        }\n        LOBYTE(v26) = 48;\n        if ( v35 < v19 && (unsigned __int8)(s[v35] - 48) <= 9u )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 48;\n          if ( v10 > v34 + 2 )\n            *(_BYTE *)(v9 + v34 + 2) = 48;\n          v17 = v34 + 3;\n          LOBYTE(v26) = 48;\n        }\n        goto LABEL_118;\n      case 7:\n        LOBYTE(v26) = 7;\n        v32 = 97;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 8:\n        LOBYTE(v26) = 8;\n        v32 = 98;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 9:\n        LOBYTE(v26) = 9;\n        v32 = 116;\n        goto LABEL_130;\n      case 10:\n        LOBYTE(v26) = 10;\n        v32 = 110;\n        goto LABEL_130;\n      case 11:\n        LOBYTE(v26) = 11;\n        v32 = 118;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 12:\n        LOBYTE(v26) = 12;\n        v32 = 102;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 13:\n        LOBYTE(v26) = 13;\n        v32 = 114;\nLABEL_130:\n        LOBYTE(v14) = v20 == 2;\n        v58 = v20 == 2 && v82;\n        if ( v58 )\n          return sub_407760(v9, v10, s);\n        goto LABEL_88;\n      case 32:\n      case 33:\n      case 34:\n      case 36:\n      case 38:\n      case 40:\n      case 41:\n      case 42:\n      case 59:\n      case 60:\n      case 61:\n      case 62:\n      case 91:\n      case 94:\n      case 96:\n      case 124:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_64;\n      case 35:\n      case 126:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_63;\n      case 37:\n      case 43:\n      case 44:\n      case 45:\n      case 46:\n      case 47:\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n      case 58:\n      case 65:\n      case 66:\n      case 67:\n      case 68:\n      case 69:\n      case 70:\n      case 71:\n      case 72:\n      case 73:\n      case 74:\n      case 75:\n      case 76:\n      case 77:\n      case 78:\n      case 79:\n      case 80:\n      case 81:\n      case 82:\n      case 83:\n      case 84:\n      case 85:\n      case 86:\n      case 87:\n      case 88:\n      case 89:\n      case 90:\n      case 93:\n      case 95:\n      case 97:\n      case 98:\n      case 99:\n      case 100:\n      case 101:\n      case 102:\n      case 103:\n      case 104:\n      case 105:\n      case 106:\n      case 107:\n      case 108:\n      case 109:\n      case 110:\n      case 111:\n      case 112:\n      case 113:\n      case 114:\n      case 115:\n      case 116:\n      case 117:\n      case 118:\n      case 119:\n      case 120:\n      case 121:\n      case 122:\n        goto LABEL_127;\n      case 39:\nLABEL_73:\n        v14 = 0;\n        LOBYTE(v26) = 39;\n        if ( v20 != 2 )\n          goto LABEL_65;\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 39;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 92;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 39;\n        v17 += 3LL;\n        ++v21;\n        v22 = 0;\n        LOBYTE(v26) = 39;\nLABEL_82:\n        if ( !v58 )\n          goto LABEL_33;\n        goto LABEL_67;\n      case 63:\nLABEL_69:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_407760(v9, v10, s);\n          v11 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_66;\n        }\n        if ( v20 != 5 )\n        {\n          LOBYTE(v26) = 63;\n          LOBYTE(v14) = v20 == 2;\n          goto LABEL_65;\n        }\n        if ( !(v81 & 4) )\n        {\n          v14 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        v14 = 0;\n        LOBYTE(v26) = 63;\n        if ( v21 + 2 >= v19 || s[v21 + 1] != 63 )\n          goto LABEL_65;\n        v26 = (unsigned __int8)s[v21 + 2];\n        if ( (unsigned __int8)v26 > 0x3Eu || (v40 = 8070630310989004800LL, !_bittest64(&v40, v26)) )\n        {\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 63;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 34;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 34;\n        if ( v10 > v17 + 3 )\n          *(_BYTE *)(v9 + v17 + 3) = 63;\n        v17 += 4LL;\n        v14 = 0;\n        v11 = 0;\n        v21 += 2LL;\nLABEL_118:\n        if ( !v56 || (_BYTE)v14 )\n          goto LABEL_66;\n        if ( a7 )\n          goto LABEL_18;\n        goto LABEL_121;\n      case 92:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_407760(v9, v10, s);\n          ++v21;\n          v11 = v22;\n          LOBYTE(v26) = 92;\n          goto LABEL_144;\n        }\nLABEL_87:\n        v11 = v82 & v56;\n        LOBYTE(v26) = 92;\n        v32 = 92;\n        v14 = v82 & v56;\n        LOBYTE(v14) = (n != 0) & v14;\n        if ( (_BYTE)v14 )\n        {\n          ++v21;\n          v11 = v22;\n          goto LABEL_144;\n        }\nLABEL_88:\n        if ( !v56 )\n          goto LABEL_65;\n        v27 = v14;\n        LOBYTE(v26) = v32;\n        goto LABEL_20;\n      case 123:\n      case 125:\nLABEL_60:\n        v31 = v19 != 1;\n        if ( v19 == -1LL )\n          v31 = s[1] != 0;\n        LOBYTE(v14) = v20 == 2;\n        if ( v31 )\n          goto LABEL_65;\nLABEL_63:\n        if ( v21 )\n          goto LABEL_65;\nLABEL_64:\n        if ( !((unsigned __int8)v14 & v82) )\n          goto LABEL_65;\n        return sub_407760(v9, v10, s);\n      default:\nLABEL_124:\n        if ( v80 == 1 )\n        {\n          v74 = v20;\n          v69 = v19;\n          v64 = v22;\n          v36 = __ctype_b_loc();\n          v22 = v64;\n          v19 = v69;\n          v20 = v74;\n          v37 = 1LL;\n          v38 = (*v36)[(unsigned __int8)v26];\n          LOWORD(v38) = (unsigned __int16)v38 >> 14;\n          v14 = v38 ^ 1;\n          LOBYTE(v14) = v56 & v14;\n          goto LABEL_126;\n        }\n        ps = 0LL;\n        if ( v19 == -1LL )\n        {\n          v75 = v20;\n          v70 = v22;\n          v65 = v23;\n          v43 = strlen(s);\n          v20 = v75;\n          LOBYTE(v22) = v70;\n          v23 = v65;\n          v19 = v43;\n        }\n        v84 = v17;\n        v83 = v22;\n        v44 = 0LL;\n        v85 = v23;\n        v76 = v9;\n        v78 = v10;\n        v66 = v19;\n        v71 = v20;\n        break;\n    }\n    break;\n  }\n  while ( 1 )\n  {\n    v45 = v21 + v44;\n    v46 = sub_40B170(&wc, &s[v21 + v44], v66 - (v21 + v44), &ps);\n    v47 = v46;\n    switch ( v46 )\n    {\n      case 0LL:\n        v11 ^= 1u;\n        v37 = v44;\n        v9 = v76;\n        v22 = v83;\n        v17 = v84;\n        v10 = v78;\n        v14 = (unsigned __int8)(v11 & v56);\n        v19 = v66;\n        v20 = v71;\n        goto LABEL_252;\n      case -1LL:\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v19 = v66;\n        v20 = v71;\n        v14 = v56;\n        goto LABEL_252;\n      case -2LL:\n        v19 = v66;\n        v52 = v21 + v44;\n        v53 = &s[v21 + v44];\n        v54 = v44;\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v20 = v71;\n        if ( v52 < v66 && *v53 )\n        {\n          do\n            ++v54;\n          while ( v66 > v21 + v54 && v85[v54] );\n          v37 = v54;\n        }\n        v14 = v56;\nLABEL_252:\n        if ( v37 > 1 )\n          goto LABEL_206;\nLABEL_126:\n        if ( (_BYTE)v14 )\n        {\n          v14 = v56;\nLABEL_206:\n          v49 = v21 + v37;\n          v50 = 0;\n          v51 = v58;\n          while ( 1 )\n          {\n            if ( (_BYTE)v14 )\n            {\n              if ( v82 )\n                return sub_407760(v9, v10, s);\n              if ( (v20 == 2) & ((unsigned __int8)v22 ^ 1) )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 36;\n                if ( v10 > v17 + 2 )\n                  *(_BYTE *)(v9 + v17 + 2) = 39;\n                v17 += 3LL;\n                v22 ^= 1u;\n              }\n              if ( v17 < v10 )\n                *(_BYTE *)(v9 + v17) = 92;\n              if ( v10 > v17 + 1 )\n                *(_BYTE *)(v9 + v17 + 1) = ((unsigned __int8)v26 >> 6) + 48;\n              if ( v10 > v17 + 2 )\n                *(_BYTE *)(v9 + v17 + 2) = (((unsigned __int8)v26 >> 3) & 7) + 48;\n              ++v21;\n              v17 += 3LL;\n              LOBYTE(v26) = (v26 & 7) + 48;\n              if ( v49 <= v21 )\n                goto LABEL_33;\n              v50 = v14;\n            }\n            else\n            {\n              v11 = v22 & (v50 ^ 1);\n              if ( v51 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 92;\n                ++v17;\n              }\n              if ( ++v21 >= v49 )\n                goto LABEL_144;\n              if ( (_BYTE)v11 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 39;\n                v17 += 2LL;\n                v51 = 0;\n                v22 = 0;\n              }\n              else\n              {\n                v51 = 0;\n              }\n            }\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = v26;\n            LOBYTE(v26) = s[v21];\n            ++v17;\n          }\n        }\nLABEL_127:\n        LOBYTE(v14) = v20 == 2;\nLABEL_65:\n        v11 = (v14 | v56 ^ 1) ^ 1;\n        LOBYTE(v11) = v82 | (v14 | v56 ^ 1) ^ 1;\n        if ( v82 | (unsigned __int8)(v14 | v56 ^ 1) ^ 1 )\n        {\nLABEL_17:\n          v11 = 0;\n          if ( a7 )\n          {\nLABEL_18:\n            if ( (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v26 >> 5)) >> v26) & 1 )\n            {\n              v27 = v20 == 2;\nLABEL_20:\n              if ( v82 )\n                return sub_407760(v9, v10, s);\nLABEL_21:\n              ++v21;\n              goto LABEL_22;\n            }\n          }\nLABEL_121:\n          v27 = v20 == 2;\n          if ( v58 )\n            goto LABEL_20;\nLABEL_122:\n          ++v21;\n          v11 = v22 & (v11 ^ 1);\nLABEL_144:\n          if ( (_BYTE)v11 )\n          {\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = 39;\n            if ( v10 > v17 + 1 )\n              *(_BYTE *)(v9 + v17 + 1) = 39;\n            v17 += 2LL;\n            v22 = 0;\n          }\n          goto LABEL_33;\n        }\nLABEL_66:\n        ++v21;\n        if ( !v58 )\n        {\n          v11 = v22 & (v11 ^ 1);\n          goto LABEL_144;\n        }\nLABEL_67:\n        v27 = v20 == 2;\nLABEL_22:\n        v14 = v22 ^ 1;\n        if ( v27 & ((unsigned __int8)v22 ^ 1) )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v17 += 3LL;\n          LOBYTE(v14) = v27 & (v22 ^ 1);\n          v22 = v14;\n        }\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 92;\n        ++v17;\nLABEL_33:\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = v26;\n        ++v17;\n        goto LABEL_4;\n    }\n    if ( v82 && v71 == 2 && v46 != 1 )\n      break;\nLABEL_187:\n    if ( !iswprint(wc) )\n      v11 = 0;\n    v44 += v47;\n    if ( mbsinit(&ps) )\n    {\n      v37 = v44;\n      v22 = v83;\n      v17 = v84;\n      v14 = v11 ^ 1;\n      v9 = v76;\n      v10 = v78;\n      v19 = v66;\n      v20 = v71;\n      LOBYTE(v14) = v56 & (v11 ^ 1);\n      goto LABEL_252;\n    }\n  }\n  v48 = &s[v45 + 1];\n  while ( (unsigned __int8)(*v48 - 91) > 0x21u || !((1LL << (*v48 - 91)) & 0x20000002BLL) )\n  {\n    if ( &s[v46 + v45] == ++v48 )\n      goto LABEL_187;\n  }\n  v9 = v76;\n  v10 = v78;\n  return sub_407760(v9, v10, s);\n}\n\nunsigned __int64 __fastcall sub_407760(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  __int64 v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // ebp\n  char v12; // zf\n  size_t v13; // rax\n  int v14; // edx\n  int v15; // er11\n  unsigned __int64 v16; // r10\n  unsigned __int64 v17; // rbx\n  int v18; // eax\n  unsigned __int64 v19; // r11\n  int v20; // er10\n  unsigned __int64 v21; // r13\n  int v22; // er8\n  char *v23; // r9\n  size_t v24; // rax\n  int v25; // eax\n  unsigned __int64 v26; // r12\n  bool v27; // al\n  const char *v28; // rax\n  char i; // al\n  size_t v30; // rax\n  bool v31; // al\n  char v32; // cl\n  int v33; // eax\n  __int64 v34; // rcx\n  unsigned __int64 v35; // rax\n  const unsigned __int16 **v36; // rax\n  unsigned __int64 v37; // rcx\n  int v38; // edx\n  unsigned __int64 result; // rax\n  __int64 v40; // rsi\n  char v41; // dl\n  const char *v42; // rax\n  size_t v43; // rax\n  unsigned __int64 v44; // rbx\n  unsigned __int64 v45; // r14\n  __int64 v46; // rax\n  __int64 v47; // r15\n  char *v48; // rdx\n  unsigned __int64 v49; // rcx\n  int v50; // eax\n  char v51; // si\n  unsigned __int64 v52; // rsi\n  char *v53; // rdi\n  unsigned __int64 v54; // rax\n  int v55; // [rsp+Ch] [rbp-ACh]\n  unsigned __int8 v56; // [rsp+Ch] [rbp-ACh]\n  unsigned __int64 v57; // [rsp+10h] [rbp-A8h]\n  char v58; // [rsp+10h] [rbp-A8h]\n  unsigned __int64 v59; // [rsp+10h] [rbp-A8h]\n  char *s; // [rsp+18h] [rbp-A0h]\n  size_t n; // [rsp+20h] [rbp-98h]\n  char *v62; // [rsp+28h] [rbp-90h]\n  int v63; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v64; // [rsp+28h] [rbp-90h]\n  char *v65; // [rsp+28h] [rbp-90h]\n  unsigned __int64 v66; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-88h]\n  unsigned __int8 v68; // [rsp+30h] [rbp-88h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-88h]\n  char v70; // [rsp+30h] [rbp-88h]\n  int v71; // [rsp+30h] [rbp-88h]\n  int v72; // [rsp+38h] [rbp-80h]\n  unsigned __int64 v73; // [rsp+38h] [rbp-80h]\n  int v74; // [rsp+38h] [rbp-80h]\n  int v75; // [rsp+38h] [rbp-80h]\n  __int64 v76; // [rsp+38h] [rbp-80h]\n  int v77; // [rsp+40h] [rbp-78h]\n  unsigned __int64 v78; // [rsp+40h] [rbp-78h]\n  const char *s2; // [rsp+48h] [rbp-70h]\n  size_t v80; // [rsp+50h] [rbp-68h]\n  char v81; // [rsp+58h] [rbp-60h]\n  bool v82; // [rsp+5Dh] [rbp-5Bh]\n  unsigned __int8 v83; // [rsp+5Eh] [rbp-5Ah]\n  unsigned __int64 v84; // [rsp+60h] [rbp-58h]\n  char *v85; // [rsp+68h] [rbp-50h]\n  wint_t wc; // [rsp+74h] [rbp-44h]\n  mbstate_t ps; // [rsp+78h] [rbp-40h]\n\n  v9 = (__int64)a1;\n  v10 = a2;\n  v11 = a6 & 2;\n  s = a3;\n  v57 = a4;\n  v55 = a5;\n  v81 = a6;\n  v13 = __ctype_get_mb_cur_max();\n  v15 = v55;\n  v80 = v13;\n  v16 = v57;\n  switch ( v55 )\n  {\n    case 0:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v11 )\n      {\n        v56 = 0;\n        goto LABEL_38;\n      }\n      v82 = 1;\n      v17 = 0LL;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      break;\n    case 3:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 2;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      break;\n    case 4:\n      if ( v11 )\n      {\nLABEL_2:\n        v82 = 1;\n        v17 = 0LL;\n        v15 = 2;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      else\n      {\n        v56 = 1;\nLABEL_38:\n        if ( a2 )\n          *a1 = 39;\n        v82 = 0;\n        v17 = 1LL;\n        v15 = 2;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      break;\n    case 5:\n      if ( v11 )\n      {\n        v82 = 1;\n        v17 = 0LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n          *a1 = 34;\n        v82 = 0;\n        v17 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      break;\n    case 6:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 5;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      break;\n    case 7:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 8:\n    case 9:\n    case 10:\n      if ( !v12 )\n      {\n        a8 = sub_407660(\"`\", v55);\n        v28 = sub_407660(\"'\", v55);\n        v16 = v57;\n        v15 = v55;\n        a9 = (char *)v28;\n      }\n      v17 = 0LL;\n      if ( !v11 )\n      {\n        for ( i = *a8; i; i = a8[v17] )\n        {\n          if ( a2 > v17 )\n            a1[v17] = i;\n          ++v17;\n        }\n      }\n      v63 = v15;\n      v59 = v16;\n      v82 = v11 != 0;\n      v30 = strlen(a9);\n      v56 = 1;\n      v16 = v59;\n      n = v30;\n      v15 = v63;\n      s2 = a9;\n      break;\n    default:\n      abort();\n      return result;\n  }\n  v18 = v15;\n  v19 = v16;\n  v20 = v18;\n  v21 = 0LL;\n  v22 = 0;\nLABEL_4:\n  while ( 2 )\n  {\n    LOBYTE(v11) = v19 != v21;\n    if ( v19 == -1LL )\n      LOBYTE(v11) = s[v21] != 0;\n    if ( !(_BYTE)v11 )\n    {\n      if ( v17 == 0 && v82 && v20 == 2 )\n        return sub_407760(v9, v10, s);\n      if ( s2 )\n      {\n        if ( !v82 )\n        {\n          v41 = *s2;\n          if ( *s2 )\n          {\n            v42 = &s2[-v17];\n            do\n            {\n              if ( v10 > v17 )\n                *(_BYTE *)(v9 + v17) = v41;\n              v41 = v42[++v17];\n            }\n            while ( v41 );\n          }\n        }\n      }\n      if ( v17 < v10 )\n        *(_BYTE *)(v9 + v17) = 0;\n      return v17;\n    }\n    v23 = &s[v21];\n    v58 = v56 & (v20 != 2);\n    if ( v56 & (v20 != 2) )\n    {\n      if ( !n )\n        goto LABEL_271;\n      if ( v19 == -1LL && n > 1 )\n      {\n        v72 = v20;\n        v67 = v22;\n        v24 = strlen(s);\n        v20 = v72;\n        v22 = v67;\n        v23 = &s[v21];\n        v19 = v24;\n      }\n      if ( v21 + n > v19 )\n        goto LABEL_271;\n      v77 = v20;\n      v73 = v19;\n      v68 = v22;\n      v62 = v23;\n      v25 = memcmp(v23, s2, n);\n      v23 = v62;\n      v22 = v68;\n      v19 = v73;\n      v20 = v77;\n      if ( v25 )\n      {\nLABEL_271:\n        LOBYTE(v26) = *v23;\n        switch ( *v23 )\n        {\n          case 0:\n            goto LABEL_103;\n          case 7:\nLABEL_94:\n            LOBYTE(v26) = 97;\n            v27 = 0;\n            goto LABEL_91;\n          case 8:\nLABEL_93:\n            LOBYTE(v26) = 98;\n            v27 = 0;\n            goto LABEL_91;\n          case 9:\nLABEL_102:\n            LOBYTE(v26) = 116;\n            v27 = 0;\n            goto LABEL_91;\n          case 10:\nLABEL_90:\n            LOBYTE(v26) = 110;\n            v27 = 0;\n            goto LABEL_91;\n          case 11:\nLABEL_101:\n            LOBYTE(v26) = 118;\n            v27 = 0;\n            goto LABEL_91;\n          case 12:\nLABEL_100:\n            LOBYTE(v26) = 102;\n            v27 = 0;\nLABEL_91:\n            if ( v82 )\n              return sub_407760(v9, v10, s);\n            goto LABEL_21;\n          case 13:\n            v58 = 0;\nLABEL_96:\n            LOBYTE(v26) = 13;\n            v32 = 114;\n            LOBYTE(v14) = v20 == 2;\n            goto LABEL_88;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v58 = 0;\nLABEL_85:\n            v14 = 0;\n            goto LABEL_65;\n          case 35:\n          case 126:\n            v58 = 0;\nLABEL_98:\n            if ( v21 )\n              goto LABEL_17;\n            v14 = 0;\n            goto LABEL_65;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v58 = 0;\n            goto LABEL_17;\n          case 39:\n            v58 = 0;\n            goto LABEL_73;\n          case 63:\n            v58 = 0;\n            goto LABEL_69;\n          case 92:\n            v58 = 0;\n            goto LABEL_87;\n          case 123:\n          case 125:\n            v58 = 0;\n            goto LABEL_60;\n          default:\n            v58 = 0;\n            goto LABEL_124;\n        }\n      }\n      if ( !v82 )\n      {\n        LOBYTE(v26) = *v62;\n        switch ( *v62 )\n        {\n          case 0:\n            goto LABEL_105;\n          case 7:\n            goto LABEL_94;\n          case 8:\n            goto LABEL_93;\n          case 9:\n            goto LABEL_102;\n          case 10:\n            goto LABEL_90;\n          case 11:\n            goto LABEL_101;\n          case 12:\n            goto LABEL_100;\n          case 13:\n            goto LABEL_96;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            goto LABEL_85;\n          case 35:\n          case 126:\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            goto LABEL_17;\n          case 39:\n            goto LABEL_73;\n          case 63:\n            goto LABEL_69;\n          case 92:\n            goto LABEL_87;\n          case 123:\n          case 125:\n            goto LABEL_60;\n          default:\n            goto LABEL_124;\n        }\n      }\n      return sub_407760(v9, v10, s);\n    }\n    LOBYTE(v26) = *v23;\n    switch ( *v23 )\n    {\n      case 0:\n        if ( !v56 )\n        {\n          if ( v81 & 1 )\n          {\n            ++v21;\n            continue;\n          }\n          if ( !v82 )\n          {\n            ++v21;\n            v11 = v22;\n            LOBYTE(v26) = 0;\n            goto LABEL_144;\n          }\n          v11 = 0;\n          if ( a7 )\n          {\n            v58 = 0;\n            LOBYTE(v26) = 0;\n            goto LABEL_18;\n          }\n          LOBYTE(v26) = 0;\n          goto LABEL_122;\n        }\nLABEL_103:\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        v58 = 0;\nLABEL_105:\n        LOBYTE(v14) = v20 == 2;\n        v33 = v22 ^ 1;\n        LOBYTE(v33) = (v20 == 2) & (v22 ^ 1);\n        if ( (_BYTE)v33 )\n        {\n          if ( v17 < v10 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v34 = v17 + 3;\n          if ( v10 <= v17 + 3 )\n          {\n            v17 += 4LL;\n            ++v21;\n            v22 = v33;\n            LOBYTE(v26) = 48;\n            goto LABEL_82;\n          }\n          v22 = v33;\n        }\n        else\n        {\n          v34 = v17;\n          if ( v17 >= v10 )\n            goto LABEL_115;\n        }\n        *(_BYTE *)(v9 + v34) = 92;\nLABEL_115:\n        v17 = v34 + 1;\n        v35 = v21 + 1;\n        if ( v20 == 2 )\n        {\n          ++v21;\n          LOBYTE(v26) = 48;\n          goto LABEL_82;\n        }\n        LOBYTE(v26) = 48;\n        if ( v35 < v19 && (unsigned __int8)(s[v35] - 48) <= 9u )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 48;\n          if ( v10 > v34 + 2 )\n            *(_BYTE *)(v9 + v34 + 2) = 48;\n          v17 = v34 + 3;\n          LOBYTE(v26) = 48;\n        }\n        goto LABEL_118;\n      case 7:\n        LOBYTE(v26) = 7;\n        v32 = 97;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 8:\n        LOBYTE(v26) = 8;\n        v32 = 98;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 9:\n        LOBYTE(v26) = 9;\n        v32 = 116;\n        goto LABEL_130;\n      case 10:\n        LOBYTE(v26) = 10;\n        v32 = 110;\n        goto LABEL_130;\n      case 11:\n        LOBYTE(v26) = 11;\n        v32 = 118;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 12:\n        LOBYTE(v26) = 12;\n        v32 = 102;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 13:\n        LOBYTE(v26) = 13;\n        v32 = 114;\nLABEL_130:\n        LOBYTE(v14) = v20 == 2;\n        v58 = v20 == 2 && v82;\n        if ( v58 )\n          return sub_407760(v9, v10, s);\n        goto LABEL_88;\n      case 32:\n      case 33:\n      case 34:\n      case 36:\n      case 38:\n      case 40:\n      case 41:\n      case 42:\n      case 59:\n      case 60:\n      case 61:\n      case 62:\n      case 91:\n      case 94:\n      case 96:\n      case 124:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_64;\n      case 35:\n      case 126:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_63;\n      case 37:\n      case 43:\n      case 44:\n      case 45:\n      case 46:\n      case 47:\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n      case 58:\n      case 65:\n      case 66:\n      case 67:\n      case 68:\n      case 69:\n      case 70:\n      case 71:\n      case 72:\n      case 73:\n      case 74:\n      case 75:\n      case 76:\n      case 77:\n      case 78:\n      case 79:\n      case 80:\n      case 81:\n      case 82:\n      case 83:\n      case 84:\n      case 85:\n      case 86:\n      case 87:\n      case 88:\n      case 89:\n      case 90:\n      case 93:\n      case 95:\n      case 97:\n      case 98:\n      case 99:\n      case 100:\n      case 101:\n      case 102:\n      case 103:\n      case 104:\n      case 105:\n      case 106:\n      case 107:\n      case 108:\n      case 109:\n      case 110:\n      case 111:\n      case 112:\n      case 113:\n      case 114:\n      case 115:\n      case 116:\n      case 117:\n      case 118:\n      case 119:\n      case 120:\n      case 121:\n      case 122:\n        goto LABEL_127;\n      case 39:\nLABEL_73:\n        v14 = 0;\n        LOBYTE(v26) = 39;\n        if ( v20 != 2 )\n          goto LABEL_65;\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 39;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 92;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 39;\n        v17 += 3LL;\n        ++v21;\n        v22 = 0;\n        LOBYTE(v26) = 39;\nLABEL_82:\n        if ( !v58 )\n          goto LABEL_33;\n        goto LABEL_67;\n      case 63:\nLABEL_69:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_407760(v9, v10, s);\n          v11 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_66;\n        }\n        if ( v20 != 5 )\n        {\n          LOBYTE(v26) = 63;\n          LOBYTE(v14) = v20 == 2;\n          goto LABEL_65;\n        }\n        if ( !(v81 & 4) )\n        {\n          v14 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        v14 = 0;\n        LOBYTE(v26) = 63;\n        if ( v21 + 2 >= v19 || s[v21 + 1] != 63 )\n          goto LABEL_65;\n        v26 = (unsigned __int8)s[v21 + 2];\n        if ( (unsigned __int8)v26 > 0x3Eu || (v40 = 8070630310989004800LL, !_bittest64(&v40, v26)) )\n        {\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 63;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 34;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 34;\n        if ( v10 > v17 + 3 )\n          *(_BYTE *)(v9 + v17 + 3) = 63;\n        v17 += 4LL;\n        v14 = 0;\n        v11 = 0;\n        v21 += 2LL;\nLABEL_118:\n        if ( !v56 || (_BYTE)v14 )\n          goto LABEL_66;\n        if ( a7 )\n          goto LABEL_18;\n        goto LABEL_121;\n      case 92:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_407760(v9, v10, s);\n          ++v21;\n          v11 = v22;\n          LOBYTE(v26) = 92;\n          goto LABEL_144;\n        }\nLABEL_87:\n        v11 = v82 & v56;\n        LOBYTE(v26) = 92;\n        v32 = 92;\n        v14 = v82 & v56;\n        LOBYTE(v14) = (n != 0) & v14;\n        if ( (_BYTE)v14 )\n        {\n          ++v21;\n          v11 = v22;\n          goto LABEL_144;\n        }\nLABEL_88:\n        if ( !v56 )\n          goto LABEL_65;\n        v27 = v14;\n        LOBYTE(v26) = v32;\n        goto LABEL_20;\n      case 123:\n      case 125:\nLABEL_60:\n        v31 = v19 != 1;\n        if ( v19 == -1LL )\n          v31 = s[1] != 0;\n        LOBYTE(v14) = v20 == 2;\n        if ( v31 )\n          goto LABEL_65;\nLABEL_63:\n        if ( v21 )\n          goto LABEL_65;\nLABEL_64:\n        if ( !((unsigned __int8)v14 & v82) )\n          goto LABEL_65;\n        return sub_407760(v9, v10, s);\n      default:\nLABEL_124:\n        if ( v80 == 1 )\n        {\n          v74 = v20;\n          v69 = v19;\n          v64 = v22;\n          v36 = __ctype_b_loc();\n          v22 = v64;\n          v19 = v69;\n          v20 = v74;\n          v37 = 1LL;\n          v38 = (*v36)[(unsigned __int8)v26];\n          LOWORD(v38) = (unsigned __int16)v38 >> 14;\n          v14 = v38 ^ 1;\n          LOBYTE(v14) = v56 & v14;\n          goto LABEL_126;\n        }\n        ps = 0LL;\n        if ( v19 == -1LL )\n        {\n          v75 = v20;\n          v70 = v22;\n          v65 = v23;\n          v43 = strlen(s);\n          v20 = v75;\n          LOBYTE(v22) = v70;\n          v23 = v65;\n          v19 = v43;\n        }\n        v84 = v17;\n        v83 = v22;\n        v44 = 0LL;\n        v85 = v23;\n        v76 = v9;\n        v78 = v10;\n        v66 = v19;\n        v71 = v20;\n        break;\n    }\n    break;\n  }\n  while ( 1 )\n  {\n    v45 = v21 + v44;\n    v46 = sub_40B170(&wc, &s[v21 + v44], v66 - (v21 + v44), &ps);\n    v47 = v46;\n    switch ( v46 )\n    {\n      case 0LL:\n        v11 ^= 1u;\n        v37 = v44;\n        v9 = v76;\n        v22 = v83;\n        v17 = v84;\n        v10 = v78;\n        v14 = (unsigned __int8)(v11 & v56);\n        v19 = v66;\n        v20 = v71;\n        goto LABEL_252;\n      case -1LL:\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v19 = v66;\n        v20 = v71;\n        v14 = v56;\n        goto LABEL_252;\n      case -2LL:\n        v19 = v66;\n        v52 = v21 + v44;\n        v53 = &s[v21 + v44];\n        v54 = v44;\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v20 = v71;\n        if ( v52 < v66 && *v53 )\n        {\n          do\n            ++v54;\n          while ( v66 > v21 + v54 && v85[v54] );\n          v37 = v54;\n        }\n        v14 = v56;\nLABEL_252:\n        if ( v37 > 1 )\n          goto LABEL_206;\nLABEL_126:\n        if ( (_BYTE)v14 )\n        {\n          v14 = v56;\nLABEL_206:\n          v49 = v21 + v37;\n          v50 = 0;\n          v51 = v58;\n          while ( 1 )\n          {\n            if ( (_BYTE)v14 )\n            {\n              if ( v82 )\n                return sub_407760(v9, v10, s);\n              if ( (v20 == 2) & ((unsigned __int8)v22 ^ 1) )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 36;\n                if ( v10 > v17 + 2 )\n                  *(_BYTE *)(v9 + v17 + 2) = 39;\n                v17 += 3LL;\n                v22 ^= 1u;\n              }\n              if ( v17 < v10 )\n                *(_BYTE *)(v9 + v17) = 92;\n              if ( v10 > v17 + 1 )\n                *(_BYTE *)(v9 + v17 + 1) = ((unsigned __int8)v26 >> 6) + 48;\n              if ( v10 > v17 + 2 )\n                *(_BYTE *)(v9 + v17 + 2) = (((unsigned __int8)v26 >> 3) & 7) + 48;\n              ++v21;\n              v17 += 3LL;\n              LOBYTE(v26) = (v26 & 7) + 48;\n              if ( v49 <= v21 )\n                goto LABEL_33;\n              v50 = v14;\n            }\n            else\n            {\n              v11 = v22 & (v50 ^ 1);\n              if ( v51 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 92;\n                ++v17;\n              }\n              if ( ++v21 >= v49 )\n                goto LABEL_144;\n              if ( (_BYTE)v11 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 39;\n                v17 += 2LL;\n                v51 = 0;\n                v22 = 0;\n              }\n              else\n              {\n                v51 = 0;\n              }\n            }\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = v26;\n            LOBYTE(v26) = s[v21];\n            ++v17;\n          }\n        }\nLABEL_127:\n        LOBYTE(v14) = v20 == 2;\nLABEL_65:\n        v11 = (v14 | v56 ^ 1) ^ 1;\n        LOBYTE(v11) = v82 | (v14 | v56 ^ 1) ^ 1;\n        if ( v82 | (unsigned __int8)(v14 | v56 ^ 1) ^ 1 )\n        {\nLABEL_17:\n          v11 = 0;\n          if ( a7 )\n          {\nLABEL_18:\n            if ( (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v26 >> 5)) >> v26) & 1 )\n            {\n              v27 = v20 == 2;\nLABEL_20:\n              if ( v82 )\n                return sub_407760(v9, v10, s);\nLABEL_21:\n              ++v21;\n              goto LABEL_22;\n            }\n          }\nLABEL_121:\n          v27 = v20 == 2;\n          if ( v58 )\n            goto LABEL_20;\nLABEL_122:\n          ++v21;\n          v11 = v22 & (v11 ^ 1);\nLABEL_144:\n          if ( (_BYTE)v11 )\n          {\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = 39;\n            if ( v10 > v17 + 1 )\n              *(_BYTE *)(v9 + v17 + 1) = 39;\n            v17 += 2LL;\n            v22 = 0;\n          }\n          goto LABEL_33;\n        }\nLABEL_66:\n        ++v21;\n        if ( !v58 )\n        {\n          v11 = v22 & (v11 ^ 1);\n          goto LABEL_144;\n        }\nLABEL_67:\n        v27 = v20 == 2;\nLABEL_22:\n        v14 = v22 ^ 1;\n        if ( v27 & ((unsigned __int8)v22 ^ 1) )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v17 += 3LL;\n          LOBYTE(v14) = v27 & (v22 ^ 1);\n          v22 = v14;\n        }\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 92;\n        ++v17;\nLABEL_33:\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = v26;\n        ++v17;\n        goto LABEL_4;\n    }\n    if ( v82 && v71 == 2 && v46 != 1 )\n      break;\nLABEL_187:\n    if ( !iswprint(wc) )\n      v11 = 0;\n    v44 += v47;\n    if ( mbsinit(&ps) )\n    {\n      v37 = v44;\n      v22 = v83;\n      v17 = v84;\n      v14 = v11 ^ 1;\n      v9 = v76;\n      v10 = v78;\n      v19 = v66;\n      v20 = v71;\n      LOBYTE(v14) = v56 & (v11 ^ 1);\n      goto LABEL_252;\n    }\n  }\n  v48 = &s[v45 + 1];\n  while ( (unsigned __int8)(*v48 - 91) > 0x21u || !((1LL << (*v48 - 91)) & 0x20000002BLL) )\n  {\n    if ( &s[v46 + v45] == ++v48 )\n      goto LABEL_187;\n  }\n  v9 = v76;\n  v10 = v78;\n  return sub_407760(v9, v10, s);\n}\n", 
            "funcStartAddr": "0x40200aL", 
            "funcEndAddr": "0x40200fL", 
            "funcName": "sub_407760"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407760(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  __int64 v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // ebp\n  char v12; // zf\n  size_t v13; // rax\n  int v14; // edx\n  int v15; // er11\n  unsigned __int64 v16; // r10\n  unsigned __int64 v17; // rbx\n  int v18; // eax\n  unsigned __int64 v19; // r11\n  int v20; // er10\n  unsigned __int64 v21; // r13\n  int v22; // er8\n  char *v23; // r9\n  size_t v24; // rax\n  int v25; // eax\n  unsigned __int64 v26; // r12\n  bool v27; // al\n  const char *v28; // rax\n  char i; // al\n  size_t v30; // rax\n  bool v31; // al\n  char v32; // cl\n  int v33; // eax\n  __int64 v34; // rcx\n  unsigned __int64 v35; // rax\n  const unsigned __int16 **v36; // rax\n  unsigned __int64 v37; // rcx\n  int v38; // edx\n  unsigned __int64 result; // rax\n  __int64 v40; // rsi\n  char v41; // dl\n  const char *v42; // rax\n  size_t v43; // rax\n  unsigned __int64 v44; // rbx\n  unsigned __int64 v45; // r14\n  __int64 v46; // rax\n  __int64 v47; // r15\n  char *v48; // rdx\n  unsigned __int64 v49; // rcx\n  int v50; // eax\n  char v51; // si\n  unsigned __int64 v52; // rsi\n  char *v53; // rdi\n  unsigned __int64 v54; // rax\n  int v55; // [rsp+Ch] [rbp-ACh]\n  unsigned __int8 v56; // [rsp+Ch] [rbp-ACh]\n  unsigned __int64 v57; // [rsp+10h] [rbp-A8h]\n  char v58; // [rsp+10h] [rbp-A8h]\n  unsigned __int64 v59; // [rsp+10h] [rbp-A8h]\n  char *s; // [rsp+18h] [rbp-A0h]\n  size_t n; // [rsp+20h] [rbp-98h]\n  char *v62; // [rsp+28h] [rbp-90h]\n  int v63; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v64; // [rsp+28h] [rbp-90h]\n  char *v65; // [rsp+28h] [rbp-90h]\n  unsigned __int64 v66; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-88h]\n  unsigned __int8 v68; // [rsp+30h] [rbp-88h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-88h]\n  char v70; // [rsp+30h] [rbp-88h]\n  int v71; // [rsp+30h] [rbp-88h]\n  int v72; // [rsp+38h] [rbp-80h]\n  unsigned __int64 v73; // [rsp+38h] [rbp-80h]\n  int v74; // [rsp+38h] [rbp-80h]\n  int v75; // [rsp+38h] [rbp-80h]\n  __int64 v76; // [rsp+38h] [rbp-80h]\n  int v77; // [rsp+40h] [rbp-78h]\n  unsigned __int64 v78; // [rsp+40h] [rbp-78h]\n  const char *s2; // [rsp+48h] [rbp-70h]\n  size_t v80; // [rsp+50h] [rbp-68h]\n  char v81; // [rsp+58h] [rbp-60h]\n  bool v82; // [rsp+5Dh] [rbp-5Bh]\n  unsigned __int8 v83; // [rsp+5Eh] [rbp-5Ah]\n  unsigned __int64 v84; // [rsp+60h] [rbp-58h]\n  char *v85; // [rsp+68h] [rbp-50h]\n  wint_t wc; // [rsp+74h] [rbp-44h]\n  mbstate_t ps; // [rsp+78h] [rbp-40h]\n\n  v9 = (__int64)a1;\n  v10 = a2;\n  v11 = a6 & 2;\n  s = a3;\n  v57 = a4;\n  v55 = a5;\n  v81 = a6;\n  v13 = __ctype_get_mb_cur_max();\n  v15 = v55;\n  v80 = v13;\n  v16 = v57;\n  switch ( v55 )\n  {\n    case 0:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v11 )\n      {\n        v56 = 0;\n        goto LABEL_38;\n      }\n      v82 = 1;\n      v17 = 0LL;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      break;\n    case 3:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 2;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      break;\n    case 4:\n      if ( v11 )\n      {\nLABEL_2:\n        v82 = 1;\n        v17 = 0LL;\n        v15 = 2;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      else\n      {\n        v56 = 1;\nLABEL_38:\n        if ( a2 )\n          *a1 = 39;\n        v82 = 0;\n        v17 = 1LL;\n        v15 = 2;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      break;\n    case 5:\n      if ( v11 )\n      {\n        v82 = 1;\n        v17 = 0LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n          *a1 = 34;\n        v82 = 0;\n        v17 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      break;\n    case 6:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 5;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      break;\n    case 7:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 8:\n    case 9:\n    case 10:\n      if ( !v12 )\n      {\n        a8 = sub_407660(\"`\", v55);\n        v28 = sub_407660(\"'\", v55);\n        v16 = v57;\n        v15 = v55;\n        a9 = (char *)v28;\n      }\n      v17 = 0LL;\n      if ( !v11 )\n      {\n        for ( i = *a8; i; i = a8[v17] )\n        {\n          if ( a2 > v17 )\n            a1[v17] = i;\n          ++v17;\n        }\n      }\n      v63 = v15;\n      v59 = v16;\n      v82 = v11 != 0;\n      v30 = strlen(a9);\n      v56 = 1;\n      v16 = v59;\n      n = v30;\n      v15 = v63;\n      s2 = a9;\n      break;\n    default:\n      abort();\n      return result;\n  }\n  v18 = v15;\n  v19 = v16;\n  v20 = v18;\n  v21 = 0LL;\n  v22 = 0;\nLABEL_4:\n  while ( 2 )\n  {\n    LOBYTE(v11) = v19 != v21;\n    if ( v19 == -1LL )\n      LOBYTE(v11) = s[v21] != 0;\n    if ( !(_BYTE)v11 )\n    {\n      if ( v17 == 0 && v82 && v20 == 2 )\n        return sub_407760(v9, v10, s);\n      if ( s2 )\n      {\n        if ( !v82 )\n        {\n          v41 = *s2;\n          if ( *s2 )\n          {\n            v42 = &s2[-v17];\n            do\n            {\n              if ( v10 > v17 )\n                *(_BYTE *)(v9 + v17) = v41;\n              v41 = v42[++v17];\n            }\n            while ( v41 );\n          }\n        }\n      }\n      if ( v17 < v10 )\n        *(_BYTE *)(v9 + v17) = 0;\n      return v17;\n    }\n    v23 = &s[v21];\n    v58 = v56 & (v20 != 2);\n    if ( v56 & (v20 != 2) )\n    {\n      if ( !n )\n        goto LABEL_271;\n      if ( v19 == -1LL && n > 1 )\n      {\n        v72 = v20;\n        v67 = v22;\n        v24 = strlen(s);\n        v20 = v72;\n        v22 = v67;\n        v23 = &s[v21];\n        v19 = v24;\n      }\n      if ( v21 + n > v19 )\n        goto LABEL_271;\n      v77 = v20;\n      v73 = v19;\n      v68 = v22;\n      v62 = v23;\n      v25 = memcmp(v23, s2, n);\n      v23 = v62;\n      v22 = v68;\n      v19 = v73;\n      v20 = v77;\n      if ( v25 )\n      {\nLABEL_271:\n        LOBYTE(v26) = *v23;\n        switch ( *v23 )\n        {\n          case 0:\n            goto LABEL_103;\n          case 7:\nLABEL_94:\n            LOBYTE(v26) = 97;\n            v27 = 0;\n            goto LABEL_91;\n          case 8:\nLABEL_93:\n            LOBYTE(v26) = 98;\n            v27 = 0;\n            goto LABEL_91;\n          case 9:\nLABEL_102:\n            LOBYTE(v26) = 116;\n            v27 = 0;\n            goto LABEL_91;\n          case 10:\nLABEL_90:\n            LOBYTE(v26) = 110;\n            v27 = 0;\n            goto LABEL_91;\n          case 11:\nLABEL_101:\n            LOBYTE(v26) = 118;\n            v27 = 0;\n            goto LABEL_91;\n          case 12:\nLABEL_100:\n            LOBYTE(v26) = 102;\n            v27 = 0;\nLABEL_91:\n            if ( v82 )\n              return sub_407760(v9, v10, s);\n            goto LABEL_21;\n          case 13:\n            v58 = 0;\nLABEL_96:\n            LOBYTE(v26) = 13;\n            v32 = 114;\n            LOBYTE(v14) = v20 == 2;\n            goto LABEL_88;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v58 = 0;\nLABEL_85:\n            v14 = 0;\n            goto LABEL_65;\n          case 35:\n          case 126:\n            v58 = 0;\nLABEL_98:\n            if ( v21 )\n              goto LABEL_17;\n            v14 = 0;\n            goto LABEL_65;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v58 = 0;\n            goto LABEL_17;\n          case 39:\n            v58 = 0;\n            goto LABEL_73;\n          case 63:\n            v58 = 0;\n            goto LABEL_69;\n          case 92:\n            v58 = 0;\n            goto LABEL_87;\n          case 123:\n          case 125:\n            v58 = 0;\n            goto LABEL_60;\n          default:\n            v58 = 0;\n            goto LABEL_124;\n        }\n      }\n      if ( !v82 )\n      {\n        LOBYTE(v26) = *v62;\n        switch ( *v62 )\n        {\n          case 0:\n            goto LABEL_105;\n          case 7:\n            goto LABEL_94;\n          case 8:\n            goto LABEL_93;\n          case 9:\n            goto LABEL_102;\n          case 10:\n            goto LABEL_90;\n          case 11:\n            goto LABEL_101;\n          case 12:\n            goto LABEL_100;\n          case 13:\n            goto LABEL_96;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            goto LABEL_85;\n          case 35:\n          case 126:\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            goto LABEL_17;\n          case 39:\n            goto LABEL_73;\n          case 63:\n            goto LABEL_69;\n          case 92:\n            goto LABEL_87;\n          case 123:\n          case 125:\n            goto LABEL_60;\n          default:\n            goto LABEL_124;\n        }\n      }\n      return sub_407760(v9, v10, s);\n    }\n    LOBYTE(v26) = *v23;\n    switch ( *v23 )\n    {\n      case 0:\n        if ( !v56 )\n        {\n          if ( v81 & 1 )\n          {\n            ++v21;\n            continue;\n          }\n          if ( !v82 )\n          {\n            ++v21;\n            v11 = v22;\n            LOBYTE(v26) = 0;\n            goto LABEL_144;\n          }\n          v11 = 0;\n          if ( a7 )\n          {\n            v58 = 0;\n            LOBYTE(v26) = 0;\n            goto LABEL_18;\n          }\n          LOBYTE(v26) = 0;\n          goto LABEL_122;\n        }\nLABEL_103:\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        v58 = 0;\nLABEL_105:\n        LOBYTE(v14) = v20 == 2;\n        v33 = v22 ^ 1;\n        LOBYTE(v33) = (v20 == 2) & (v22 ^ 1);\n        if ( (_BYTE)v33 )\n        {\n          if ( v17 < v10 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v34 = v17 + 3;\n          if ( v10 <= v17 + 3 )\n          {\n            v17 += 4LL;\n            ++v21;\n            v22 = v33;\n            LOBYTE(v26) = 48;\n            goto LABEL_82;\n          }\n          v22 = v33;\n        }\n        else\n        {\n          v34 = v17;\n          if ( v17 >= v10 )\n            goto LABEL_115;\n        }\n        *(_BYTE *)(v9 + v34) = 92;\nLABEL_115:\n        v17 = v34 + 1;\n        v35 = v21 + 1;\n        if ( v20 == 2 )\n        {\n          ++v21;\n          LOBYTE(v26) = 48;\n          goto LABEL_82;\n        }\n        LOBYTE(v26) = 48;\n        if ( v35 < v19 && (unsigned __int8)(s[v35] - 48) <= 9u )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 48;\n          if ( v10 > v34 + 2 )\n            *(_BYTE *)(v9 + v34 + 2) = 48;\n          v17 = v34 + 3;\n          LOBYTE(v26) = 48;\n        }\n        goto LABEL_118;\n      case 7:\n        LOBYTE(v26) = 7;\n        v32 = 97;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 8:\n        LOBYTE(v26) = 8;\n        v32 = 98;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 9:\n        LOBYTE(v26) = 9;\n        v32 = 116;\n        goto LABEL_130;\n      case 10:\n        LOBYTE(v26) = 10;\n        v32 = 110;\n        goto LABEL_130;\n      case 11:\n        LOBYTE(v26) = 11;\n        v32 = 118;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 12:\n        LOBYTE(v26) = 12;\n        v32 = 102;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 13:\n        LOBYTE(v26) = 13;\n        v32 = 114;\nLABEL_130:\n        LOBYTE(v14) = v20 == 2;\n        v58 = v20 == 2 && v82;\n        if ( v58 )\n          return sub_407760(v9, v10, s);\n        goto LABEL_88;\n      case 32:\n      case 33:\n      case 34:\n      case 36:\n      case 38:\n      case 40:\n      case 41:\n      case 42:\n      case 59:\n      case 60:\n      case 61:\n      case 62:\n      case 91:\n      case 94:\n      case 96:\n      case 124:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_64;\n      case 35:\n      case 126:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_63;\n      case 37:\n      case 43:\n      case 44:\n      case 45:\n      case 46:\n      case 47:\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n      case 58:\n      case 65:\n      case 66:\n      case 67:\n      case 68:\n      case 69:\n      case 70:\n      case 71:\n      case 72:\n      case 73:\n      case 74:\n      case 75:\n      case 76:\n      case 77:\n      case 78:\n      case 79:\n      case 80:\n      case 81:\n      case 82:\n      case 83:\n      case 84:\n      case 85:\n      case 86:\n      case 87:\n      case 88:\n      case 89:\n      case 90:\n      case 93:\n      case 95:\n      case 97:\n      case 98:\n      case 99:\n      case 100:\n      case 101:\n      case 102:\n      case 103:\n      case 104:\n      case 105:\n      case 106:\n      case 107:\n      case 108:\n      case 109:\n      case 110:\n      case 111:\n      case 112:\n      case 113:\n      case 114:\n      case 115:\n      case 116:\n      case 117:\n      case 118:\n      case 119:\n      case 120:\n      case 121:\n      case 122:\n        goto LABEL_127;\n      case 39:\nLABEL_73:\n        v14 = 0;\n        LOBYTE(v26) = 39;\n        if ( v20 != 2 )\n          goto LABEL_65;\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 39;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 92;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 39;\n        v17 += 3LL;\n        ++v21;\n        v22 = 0;\n        LOBYTE(v26) = 39;\nLABEL_82:\n        if ( !v58 )\n          goto LABEL_33;\n        goto LABEL_67;\n      case 63:\nLABEL_69:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_407760(v9, v10, s);\n          v11 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_66;\n        }\n        if ( v20 != 5 )\n        {\n          LOBYTE(v26) = 63;\n          LOBYTE(v14) = v20 == 2;\n          goto LABEL_65;\n        }\n        if ( !(v81 & 4) )\n        {\n          v14 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        v14 = 0;\n        LOBYTE(v26) = 63;\n        if ( v21 + 2 >= v19 || s[v21 + 1] != 63 )\n          goto LABEL_65;\n        v26 = (unsigned __int8)s[v21 + 2];\n        if ( (unsigned __int8)v26 > 0x3Eu || (v40 = 8070630310989004800LL, !_bittest64(&v40, v26)) )\n        {\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 63;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 34;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 34;\n        if ( v10 > v17 + 3 )\n          *(_BYTE *)(v9 + v17 + 3) = 63;\n        v17 += 4LL;\n        v14 = 0;\n        v11 = 0;\n        v21 += 2LL;\nLABEL_118:\n        if ( !v56 || (_BYTE)v14 )\n          goto LABEL_66;\n        if ( a7 )\n          goto LABEL_18;\n        goto LABEL_121;\n      case 92:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_407760(v9, v10, s);\n          ++v21;\n          v11 = v22;\n          LOBYTE(v26) = 92;\n          goto LABEL_144;\n        }\nLABEL_87:\n        v11 = v82 & v56;\n        LOBYTE(v26) = 92;\n        v32 = 92;\n        v14 = v82 & v56;\n        LOBYTE(v14) = (n != 0) & v14;\n        if ( (_BYTE)v14 )\n        {\n          ++v21;\n          v11 = v22;\n          goto LABEL_144;\n        }\nLABEL_88:\n        if ( !v56 )\n          goto LABEL_65;\n        v27 = v14;\n        LOBYTE(v26) = v32;\n        goto LABEL_20;\n      case 123:\n      case 125:\nLABEL_60:\n        v31 = v19 != 1;\n        if ( v19 == -1LL )\n          v31 = s[1] != 0;\n        LOBYTE(v14) = v20 == 2;\n        if ( v31 )\n          goto LABEL_65;\nLABEL_63:\n        if ( v21 )\n          goto LABEL_65;\nLABEL_64:\n        if ( !((unsigned __int8)v14 & v82) )\n          goto LABEL_65;\n        return sub_407760(v9, v10, s);\n      default:\nLABEL_124:\n        if ( v80 == 1 )\n        {\n          v74 = v20;\n          v69 = v19;\n          v64 = v22;\n          v36 = __ctype_b_loc();\n          v22 = v64;\n          v19 = v69;\n          v20 = v74;\n          v37 = 1LL;\n          v38 = (*v36)[(unsigned __int8)v26];\n          LOWORD(v38) = (unsigned __int16)v38 >> 14;\n          v14 = v38 ^ 1;\n          LOBYTE(v14) = v56 & v14;\n          goto LABEL_126;\n        }\n        ps = 0LL;\n        if ( v19 == -1LL )\n        {\n          v75 = v20;\n          v70 = v22;\n          v65 = v23;\n          v43 = strlen(s);\n          v20 = v75;\n          LOBYTE(v22) = v70;\n          v23 = v65;\n          v19 = v43;\n        }\n        v84 = v17;\n        v83 = v22;\n        v44 = 0LL;\n        v85 = v23;\n        v76 = v9;\n        v78 = v10;\n        v66 = v19;\n        v71 = v20;\n        break;\n    }\n    break;\n  }\n  while ( 1 )\n  {\n    v45 = v21 + v44;\n    v46 = sub_40B170(&wc, &s[v21 + v44], v66 - (v21 + v44), &ps);\n    v47 = v46;\n    switch ( v46 )\n    {\n      case 0LL:\n        v11 ^= 1u;\n        v37 = v44;\n        v9 = v76;\n        v22 = v83;\n        v17 = v84;\n        v10 = v78;\n        v14 = (unsigned __int8)(v11 & v56);\n        v19 = v66;\n        v20 = v71;\n        goto LABEL_252;\n      case -1LL:\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v19 = v66;\n        v20 = v71;\n        v14 = v56;\n        goto LABEL_252;\n      case -2LL:\n        v19 = v66;\n        v52 = v21 + v44;\n        v53 = &s[v21 + v44];\n        v54 = v44;\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v20 = v71;\n        if ( v52 < v66 && *v53 )\n        {\n          do\n            ++v54;\n          while ( v66 > v21 + v54 && v85[v54] );\n          v37 = v54;\n        }\n        v14 = v56;\nLABEL_252:\n        if ( v37 > 1 )\n          goto LABEL_206;\nLABEL_126:\n        if ( (_BYTE)v14 )\n        {\n          v14 = v56;\nLABEL_206:\n          v49 = v21 + v37;\n          v50 = 0;\n          v51 = v58;\n          while ( 1 )\n          {\n            if ( (_BYTE)v14 )\n            {\n              if ( v82 )\n                return sub_407760(v9, v10, s);\n              if ( (v20 == 2) & ((unsigned __int8)v22 ^ 1) )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 36;\n                if ( v10 > v17 + 2 )\n                  *(_BYTE *)(v9 + v17 + 2) = 39;\n                v17 += 3LL;\n                v22 ^= 1u;\n              }\n              if ( v17 < v10 )\n                *(_BYTE *)(v9 + v17) = 92;\n              if ( v10 > v17 + 1 )\n                *(_BYTE *)(v9 + v17 + 1) = ((unsigned __int8)v26 >> 6) + 48;\n              if ( v10 > v17 + 2 )\n                *(_BYTE *)(v9 + v17 + 2) = (((unsigned __int8)v26 >> 3) & 7) + 48;\n              ++v21;\n              v17 += 3LL;\n              LOBYTE(v26) = (v26 & 7) + 48;\n              if ( v49 <= v21 )\n                goto LABEL_33;\n              v50 = v14;\n            }\n            else\n            {\n              v11 = v22 & (v50 ^ 1);\n              if ( v51 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 92;\n                ++v17;\n              }\n              if ( ++v21 >= v49 )\n                goto LABEL_144;\n              if ( (_BYTE)v11 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 39;\n                v17 += 2LL;\n                v51 = 0;\n                v22 = 0;\n              }\n              else\n              {\n                v51 = 0;\n              }\n            }\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = v26;\n            LOBYTE(v26) = s[v21];\n            ++v17;\n          }\n        }\nLABEL_127:\n        LOBYTE(v14) = v20 == 2;\nLABEL_65:\n        v11 = (v14 | v56 ^ 1) ^ 1;\n        LOBYTE(v11) = v82 | (v14 | v56 ^ 1) ^ 1;\n        if ( v82 | (unsigned __int8)(v14 | v56 ^ 1) ^ 1 )\n        {\nLABEL_17:\n          v11 = 0;\n          if ( a7 )\n          {\nLABEL_18:\n            if ( (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v26 >> 5)) >> v26) & 1 )\n            {\n              v27 = v20 == 2;\nLABEL_20:\n              if ( v82 )\n                return sub_407760(v9, v10, s);\nLABEL_21:\n              ++v21;\n              goto LABEL_22;\n            }\n          }\nLABEL_121:\n          v27 = v20 == 2;\n          if ( v58 )\n            goto LABEL_20;\nLABEL_122:\n          ++v21;\n          v11 = v22 & (v11 ^ 1);\nLABEL_144:\n          if ( (_BYTE)v11 )\n          {\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = 39;\n            if ( v10 > v17 + 1 )\n              *(_BYTE *)(v9 + v17 + 1) = 39;\n            v17 += 2LL;\n            v22 = 0;\n          }\n          goto LABEL_33;\n        }\nLABEL_66:\n        ++v21;\n        if ( !v58 )\n        {\n          v11 = v22 & (v11 ^ 1);\n          goto LABEL_144;\n        }\nLABEL_67:\n        v27 = v20 == 2;\nLABEL_22:\n        v14 = v22 ^ 1;\n        if ( v27 & ((unsigned __int8)v22 ^ 1) )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v17 += 3LL;\n          LOBYTE(v14) = v27 & (v22 ^ 1);\n          v22 = v14;\n        }\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 92;\n        ++v17;\nLABEL_33:\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = v26;\n        ++v17;\n        goto LABEL_4;\n    }\n    if ( v82 && v71 == 2 && v46 != 1 )\n      break;\nLABEL_187:\n    if ( !iswprint(wc) )\n      v11 = 0;\n    v44 += v47;\n    if ( mbsinit(&ps) )\n    {\n      v37 = v44;\n      v22 = v83;\n      v17 = v84;\n      v14 = v11 ^ 1;\n      v9 = v76;\n      v10 = v78;\n      v19 = v66;\n      v20 = v71;\n      LOBYTE(v14) = v56 & (v11 ^ 1);\n      goto LABEL_252;\n    }\n  }\n  v48 = &s[v45 + 1];\n  while ( (unsigned __int8)(*v48 - 91) > 0x21u || !((1LL << (*v48 - 91)) & 0x20000002BLL) )\n  {\n    if ( &s[v46 + v45] == ++v48 )\n      goto LABEL_187;\n  }\n  v9 = v76;\n  v10 = v78;\n  return sub_407760(v9, v10, s);\n}\n\nunsigned __int64 __fastcall sub_407760(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  __int64 v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // ebp\n  char v12; // zf\n  size_t v13; // rax\n  int v14; // edx\n  int v15; // er11\n  unsigned __int64 v16; // r10\n  unsigned __int64 v17; // rbx\n  int v18; // eax\n  unsigned __int64 v19; // r11\n  int v20; // er10\n  unsigned __int64 v21; // r13\n  int v22; // er8\n  char *v23; // r9\n  size_t v24; // rax\n  int v25; // eax\n  unsigned __int64 v26; // r12\n  bool v27; // al\n  const char *v28; // rax\n  char i; // al\n  size_t v30; // rax\n  bool v31; // al\n  char v32; // cl\n  int v33; // eax\n  __int64 v34; // rcx\n  unsigned __int64 v35; // rax\n  const unsigned __int16 **v36; // rax\n  unsigned __int64 v37; // rcx\n  int v38; // edx\n  unsigned __int64 result; // rax\n  __int64 v40; // rsi\n  char v41; // dl\n  const char *v42; // rax\n  size_t v43; // rax\n  unsigned __int64 v44; // rbx\n  unsigned __int64 v45; // r14\n  __int64 v46; // rax\n  __int64 v47; // r15\n  char *v48; // rdx\n  unsigned __int64 v49; // rcx\n  int v50; // eax\n  char v51; // si\n  unsigned __int64 v52; // rsi\n  char *v53; // rdi\n  unsigned __int64 v54; // rax\n  int v55; // [rsp+Ch] [rbp-ACh]\n  unsigned __int8 v56; // [rsp+Ch] [rbp-ACh]\n  unsigned __int64 v57; // [rsp+10h] [rbp-A8h]\n  char v58; // [rsp+10h] [rbp-A8h]\n  unsigned __int64 v59; // [rsp+10h] [rbp-A8h]\n  char *s; // [rsp+18h] [rbp-A0h]\n  size_t n; // [rsp+20h] [rbp-98h]\n  char *v62; // [rsp+28h] [rbp-90h]\n  int v63; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v64; // [rsp+28h] [rbp-90h]\n  char *v65; // [rsp+28h] [rbp-90h]\n  unsigned __int64 v66; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-88h]\n  unsigned __int8 v68; // [rsp+30h] [rbp-88h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-88h]\n  char v70; // [rsp+30h] [rbp-88h]\n  int v71; // [rsp+30h] [rbp-88h]\n  int v72; // [rsp+38h] [rbp-80h]\n  unsigned __int64 v73; // [rsp+38h] [rbp-80h]\n  int v74; // [rsp+38h] [rbp-80h]\n  int v75; // [rsp+38h] [rbp-80h]\n  __int64 v76; // [rsp+38h] [rbp-80h]\n  int v77; // [rsp+40h] [rbp-78h]\n  unsigned __int64 v78; // [rsp+40h] [rbp-78h]\n  const char *s2; // [rsp+48h] [rbp-70h]\n  size_t v80; // [rsp+50h] [rbp-68h]\n  char v81; // [rsp+58h] [rbp-60h]\n  bool v82; // [rsp+5Dh] [rbp-5Bh]\n  unsigned __int8 v83; // [rsp+5Eh] [rbp-5Ah]\n  unsigned __int64 v84; // [rsp+60h] [rbp-58h]\n  char *v85; // [rsp+68h] [rbp-50h]\n  wint_t wc; // [rsp+74h] [rbp-44h]\n  mbstate_t ps; // [rsp+78h] [rbp-40h]\n\n  v9 = (__int64)a1;\n  v10 = a2;\n  v11 = a6 & 2;\n  s = a3;\n  v57 = a4;\n  v55 = a5;\n  v81 = a6;\n  v13 = __ctype_get_mb_cur_max();\n  v15 = v55;\n  v80 = v13;\n  v16 = v57;\n  switch ( v55 )\n  {\n    case 0:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v11 )\n      {\n        v56 = 0;\n        goto LABEL_38;\n      }\n      v82 = 1;\n      v17 = 0LL;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      break;\n    case 3:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 2;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      break;\n    case 4:\n      if ( v11 )\n      {\nLABEL_2:\n        v82 = 1;\n        v17 = 0LL;\n        v15 = 2;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      else\n      {\n        v56 = 1;\nLABEL_38:\n        if ( a2 )\n          *a1 = 39;\n        v82 = 0;\n        v17 = 1LL;\n        v15 = 2;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      }\n      break;\n    case 5:\n      if ( v11 )\n      {\n        v82 = 1;\n        v17 = 0LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n          *a1 = 34;\n        v82 = 0;\n        v17 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      break;\n    case 6:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 5;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      break;\n    case 7:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 8:\n    case 9:\n    case 10:\n      if ( !v12 )\n      {\n        a8 = sub_407660(\"`\", v55);\n        v28 = sub_407660(\"'\", v55);\n        v16 = v57;\n        v15 = v55;\n        a9 = (char *)v28;\n      }\n      v17 = 0LL;\n      if ( !v11 )\n      {\n        for ( i = *a8; i; i = a8[v17] )\n        {\n          if ( a2 > v17 )\n            a1[v17] = i;\n          ++v17;\n        }\n      }\n      v63 = v15;\n      v59 = v16;\n      v82 = v11 != 0;\n      v30 = strlen(a9);\n      v56 = 1;\n      v16 = v59;\n      n = v30;\n      v15 = v63;\n      s2 = a9;\n      break;\n    default:\n      abort();\n      return result;\n  }\n  v18 = v15;\n  v19 = v16;\n  v20 = v18;\n  v21 = 0LL;\n  v22 = 0;\nLABEL_4:\n  while ( 2 )\n  {\n    LOBYTE(v11) = v19 != v21;\n    if ( v19 == -1LL )\n      LOBYTE(v11) = s[v21] != 0;\n    if ( !(_BYTE)v11 )\n    {\n      if ( v17 == 0 && v82 && v20 == 2 )\n        return sub_407760(v9, v10, s);\n      if ( s2 )\n      {\n        if ( !v82 )\n        {\n          v41 = *s2;\n          if ( *s2 )\n          {\n            v42 = &s2[-v17];\n            do\n            {\n              if ( v10 > v17 )\n                *(_BYTE *)(v9 + v17) = v41;\n              v41 = v42[++v17];\n            }\n            while ( v41 );\n          }\n        }\n      }\n      if ( v17 < v10 )\n        *(_BYTE *)(v9 + v17) = 0;\n      return v17;\n    }\n    v23 = &s[v21];\n    v58 = v56 & (v20 != 2);\n    if ( v56 & (v20 != 2) )\n    {\n      if ( !n )\n        goto LABEL_271;\n      if ( v19 == -1LL && n > 1 )\n      {\n        v72 = v20;\n        v67 = v22;\n        v24 = strlen(s);\n        v20 = v72;\n        v22 = v67;\n        v23 = &s[v21];\n        v19 = v24;\n      }\n      if ( v21 + n > v19 )\n        goto LABEL_271;\n      v77 = v20;\n      v73 = v19;\n      v68 = v22;\n      v62 = v23;\n      v25 = memcmp(v23, s2, n);\n      v23 = v62;\n      v22 = v68;\n      v19 = v73;\n      v20 = v77;\n      if ( v25 )\n      {\nLABEL_271:\n        LOBYTE(v26) = *v23;\n        switch ( *v23 )\n        {\n          case 0:\n            goto LABEL_103;\n          case 7:\nLABEL_94:\n            LOBYTE(v26) = 97;\n            v27 = 0;\n            goto LABEL_91;\n          case 8:\nLABEL_93:\n            LOBYTE(v26) = 98;\n            v27 = 0;\n            goto LABEL_91;\n          case 9:\nLABEL_102:\n            LOBYTE(v26) = 116;\n            v27 = 0;\n            goto LABEL_91;\n          case 10:\nLABEL_90:\n            LOBYTE(v26) = 110;\n            v27 = 0;\n            goto LABEL_91;\n          case 11:\nLABEL_101:\n            LOBYTE(v26) = 118;\n            v27 = 0;\n            goto LABEL_91;\n          case 12:\nLABEL_100:\n            LOBYTE(v26) = 102;\n            v27 = 0;\nLABEL_91:\n            if ( v82 )\n              return sub_407760(v9, v10, s);\n            goto LABEL_21;\n          case 13:\n            v58 = 0;\nLABEL_96:\n            LOBYTE(v26) = 13;\n            v32 = 114;\n            LOBYTE(v14) = v20 == 2;\n            goto LABEL_88;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v58 = 0;\nLABEL_85:\n            v14 = 0;\n            goto LABEL_65;\n          case 35:\n          case 126:\n            v58 = 0;\nLABEL_98:\n            if ( v21 )\n              goto LABEL_17;\n            v14 = 0;\n            goto LABEL_65;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v58 = 0;\n            goto LABEL_17;\n          case 39:\n            v58 = 0;\n            goto LABEL_73;\n          case 63:\n            v58 = 0;\n            goto LABEL_69;\n          case 92:\n            v58 = 0;\n            goto LABEL_87;\n          case 123:\n          case 125:\n            v58 = 0;\n            goto LABEL_60;\n          default:\n            v58 = 0;\n            goto LABEL_124;\n        }\n      }\n      if ( !v82 )\n      {\n        LOBYTE(v26) = *v62;\n        switch ( *v62 )\n        {\n          case 0:\n            goto LABEL_105;\n          case 7:\n            goto LABEL_94;\n          case 8:\n            goto LABEL_93;\n          case 9:\n            goto LABEL_102;\n          case 10:\n            goto LABEL_90;\n          case 11:\n            goto LABEL_101;\n          case 12:\n            goto LABEL_100;\n          case 13:\n            goto LABEL_96;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            goto LABEL_85;\n          case 35:\n          case 126:\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            goto LABEL_17;\n          case 39:\n            goto LABEL_73;\n          case 63:\n            goto LABEL_69;\n          case 92:\n            goto LABEL_87;\n          case 123:\n          case 125:\n            goto LABEL_60;\n          default:\n            goto LABEL_124;\n        }\n      }\n      return sub_407760(v9, v10, s);\n    }\n    LOBYTE(v26) = *v23;\n    switch ( *v23 )\n    {\n      case 0:\n        if ( !v56 )\n        {\n          if ( v81 & 1 )\n          {\n            ++v21;\n            continue;\n          }\n          if ( !v82 )\n          {\n            ++v21;\n            v11 = v22;\n            LOBYTE(v26) = 0;\n            goto LABEL_144;\n          }\n          v11 = 0;\n          if ( a7 )\n          {\n            v58 = 0;\n            LOBYTE(v26) = 0;\n            goto LABEL_18;\n          }\n          LOBYTE(v26) = 0;\n          goto LABEL_122;\n        }\nLABEL_103:\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        v58 = 0;\nLABEL_105:\n        LOBYTE(v14) = v20 == 2;\n        v33 = v22 ^ 1;\n        LOBYTE(v33) = (v20 == 2) & (v22 ^ 1);\n        if ( (_BYTE)v33 )\n        {\n          if ( v17 < v10 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v34 = v17 + 3;\n          if ( v10 <= v17 + 3 )\n          {\n            v17 += 4LL;\n            ++v21;\n            v22 = v33;\n            LOBYTE(v26) = 48;\n            goto LABEL_82;\n          }\n          v22 = v33;\n        }\n        else\n        {\n          v34 = v17;\n          if ( v17 >= v10 )\n            goto LABEL_115;\n        }\n        *(_BYTE *)(v9 + v34) = 92;\nLABEL_115:\n        v17 = v34 + 1;\n        v35 = v21 + 1;\n        if ( v20 == 2 )\n        {\n          ++v21;\n          LOBYTE(v26) = 48;\n          goto LABEL_82;\n        }\n        LOBYTE(v26) = 48;\n        if ( v35 < v19 && (unsigned __int8)(s[v35] - 48) <= 9u )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 48;\n          if ( v10 > v34 + 2 )\n            *(_BYTE *)(v9 + v34 + 2) = 48;\n          v17 = v34 + 3;\n          LOBYTE(v26) = 48;\n        }\n        goto LABEL_118;\n      case 7:\n        LOBYTE(v26) = 7;\n        v32 = 97;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 8:\n        LOBYTE(v26) = 8;\n        v32 = 98;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 9:\n        LOBYTE(v26) = 9;\n        v32 = 116;\n        goto LABEL_130;\n      case 10:\n        LOBYTE(v26) = 10;\n        v32 = 110;\n        goto LABEL_130;\n      case 11:\n        LOBYTE(v26) = 11;\n        v32 = 118;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 12:\n        LOBYTE(v26) = 12;\n        v32 = 102;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 13:\n        LOBYTE(v26) = 13;\n        v32 = 114;\nLABEL_130:\n        LOBYTE(v14) = v20 == 2;\n        v58 = v20 == 2 && v82;\n        if ( v58 )\n          return sub_407760(v9, v10, s);\n        goto LABEL_88;\n      case 32:\n      case 33:\n      case 34:\n      case 36:\n      case 38:\n      case 40:\n      case 41:\n      case 42:\n      case 59:\n      case 60:\n      case 61:\n      case 62:\n      case 91:\n      case 94:\n      case 96:\n      case 124:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_64;\n      case 35:\n      case 126:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_63;\n      case 37:\n      case 43:\n      case 44:\n      case 45:\n      case 46:\n      case 47:\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n      case 58:\n      case 65:\n      case 66:\n      case 67:\n      case 68:\n      case 69:\n      case 70:\n      case 71:\n      case 72:\n      case 73:\n      case 74:\n      case 75:\n      case 76:\n      case 77:\n      case 78:\n      case 79:\n      case 80:\n      case 81:\n      case 82:\n      case 83:\n      case 84:\n      case 85:\n      case 86:\n      case 87:\n      case 88:\n      case 89:\n      case 90:\n      case 93:\n      case 95:\n      case 97:\n      case 98:\n      case 99:\n      case 100:\n      case 101:\n      case 102:\n      case 103:\n      case 104:\n      case 105:\n      case 106:\n      case 107:\n      case 108:\n      case 109:\n      case 110:\n      case 111:\n      case 112:\n      case 113:\n      case 114:\n      case 115:\n      case 116:\n      case 117:\n      case 118:\n      case 119:\n      case 120:\n      case 121:\n      case 122:\n        goto LABEL_127;\n      case 39:\nLABEL_73:\n        v14 = 0;\n        LOBYTE(v26) = 39;\n        if ( v20 != 2 )\n          goto LABEL_65;\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 39;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 92;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 39;\n        v17 += 3LL;\n        ++v21;\n        v22 = 0;\n        LOBYTE(v26) = 39;\nLABEL_82:\n        if ( !v58 )\n          goto LABEL_33;\n        goto LABEL_67;\n      case 63:\nLABEL_69:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_407760(v9, v10, s);\n          v11 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_66;\n        }\n        if ( v20 != 5 )\n        {\n          LOBYTE(v26) = 63;\n          LOBYTE(v14) = v20 == 2;\n          goto LABEL_65;\n        }\n        if ( !(v81 & 4) )\n        {\n          v14 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        v14 = 0;\n        LOBYTE(v26) = 63;\n        if ( v21 + 2 >= v19 || s[v21 + 1] != 63 )\n          goto LABEL_65;\n        v26 = (unsigned __int8)s[v21 + 2];\n        if ( (unsigned __int8)v26 > 0x3Eu || (v40 = 8070630310989004800LL, !_bittest64(&v40, v26)) )\n        {\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        if ( v82 )\n          return sub_407760(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 63;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 34;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 34;\n        if ( v10 > v17 + 3 )\n          *(_BYTE *)(v9 + v17 + 3) = 63;\n        v17 += 4LL;\n        v14 = 0;\n        v11 = 0;\n        v21 += 2LL;\nLABEL_118:\n        if ( !v56 || (_BYTE)v14 )\n          goto LABEL_66;\n        if ( a7 )\n          goto LABEL_18;\n        goto LABEL_121;\n      case 92:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_407760(v9, v10, s);\n          ++v21;\n          v11 = v22;\n          LOBYTE(v26) = 92;\n          goto LABEL_144;\n        }\nLABEL_87:\n        v11 = v82 & v56;\n        LOBYTE(v26) = 92;\n        v32 = 92;\n        v14 = v82 & v56;\n        LOBYTE(v14) = (n != 0) & v14;\n        if ( (_BYTE)v14 )\n        {\n          ++v21;\n          v11 = v22;\n          goto LABEL_144;\n        }\nLABEL_88:\n        if ( !v56 )\n          goto LABEL_65;\n        v27 = v14;\n        LOBYTE(v26) = v32;\n        goto LABEL_20;\n      case 123:\n      case 125:\nLABEL_60:\n        v31 = v19 != 1;\n        if ( v19 == -1LL )\n          v31 = s[1] != 0;\n        LOBYTE(v14) = v20 == 2;\n        if ( v31 )\n          goto LABEL_65;\nLABEL_63:\n        if ( v21 )\n          goto LABEL_65;\nLABEL_64:\n        if ( !((unsigned __int8)v14 & v82) )\n          goto LABEL_65;\n        return sub_407760(v9, v10, s);\n      default:\nLABEL_124:\n        if ( v80 == 1 )\n        {\n          v74 = v20;\n          v69 = v19;\n          v64 = v22;\n          v36 = __ctype_b_loc();\n          v22 = v64;\n          v19 = v69;\n          v20 = v74;\n          v37 = 1LL;\n          v38 = (*v36)[(unsigned __int8)v26];\n          LOWORD(v38) = (unsigned __int16)v38 >> 14;\n          v14 = v38 ^ 1;\n          LOBYTE(v14) = v56 & v14;\n          goto LABEL_126;\n        }\n        ps = 0LL;\n        if ( v19 == -1LL )\n        {\n          v75 = v20;\n          v70 = v22;\n          v65 = v23;\n          v43 = strlen(s);\n          v20 = v75;\n          LOBYTE(v22) = v70;\n          v23 = v65;\n          v19 = v43;\n        }\n        v84 = v17;\n        v83 = v22;\n        v44 = 0LL;\n        v85 = v23;\n        v76 = v9;\n        v78 = v10;\n        v66 = v19;\n        v71 = v20;\n        break;\n    }\n    break;\n  }\n  while ( 1 )\n  {\n    v45 = v21 + v44;\n    v46 = sub_40B170(&wc, &s[v21 + v44], v66 - (v21 + v44), &ps);\n    v47 = v46;\n    switch ( v46 )\n    {\n      case 0LL:\n        v11 ^= 1u;\n        v37 = v44;\n        v9 = v76;\n        v22 = v83;\n        v17 = v84;\n        v10 = v78;\n        v14 = (unsigned __int8)(v11 & v56);\n        v19 = v66;\n        v20 = v71;\n        goto LABEL_252;\n      case -1LL:\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v19 = v66;\n        v20 = v71;\n        v14 = v56;\n        goto LABEL_252;\n      case -2LL:\n        v19 = v66;\n        v52 = v21 + v44;\n        v53 = &s[v21 + v44];\n        v54 = v44;\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v20 = v71;\n        if ( v52 < v66 && *v53 )\n        {\n          do\n            ++v54;\n          while ( v66 > v21 + v54 && v85[v54] );\n          v37 = v54;\n        }\n        v14 = v56;\nLABEL_252:\n        if ( v37 > 1 )\n          goto LABEL_206;\nLABEL_126:\n        if ( (_BYTE)v14 )\n        {\n          v14 = v56;\nLABEL_206:\n          v49 = v21 + v37;\n          v50 = 0;\n          v51 = v58;\n          while ( 1 )\n          {\n            if ( (_BYTE)v14 )\n            {\n              if ( v82 )\n                return sub_407760(v9, v10, s);\n              if ( (v20 == 2) & ((unsigned __int8)v22 ^ 1) )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 36;\n                if ( v10 > v17 + 2 )\n                  *(_BYTE *)(v9 + v17 + 2) = 39;\n                v17 += 3LL;\n                v22 ^= 1u;\n              }\n              if ( v17 < v10 )\n                *(_BYTE *)(v9 + v17) = 92;\n              if ( v10 > v17 + 1 )\n                *(_BYTE *)(v9 + v17 + 1) = ((unsigned __int8)v26 >> 6) + 48;\n              if ( v10 > v17 + 2 )\n                *(_BYTE *)(v9 + v17 + 2) = (((unsigned __int8)v26 >> 3) & 7) + 48;\n              ++v21;\n              v17 += 3LL;\n              LOBYTE(v26) = (v26 & 7) + 48;\n              if ( v49 <= v21 )\n                goto LABEL_33;\n              v50 = v14;\n            }\n            else\n            {\n              v11 = v22 & (v50 ^ 1);\n              if ( v51 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 92;\n                ++v17;\n              }\n              if ( ++v21 >= v49 )\n                goto LABEL_144;\n              if ( (_BYTE)v11 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 39;\n                v17 += 2LL;\n                v51 = 0;\n                v22 = 0;\n              }\n              else\n              {\n                v51 = 0;\n              }\n            }\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = v26;\n            LOBYTE(v26) = s[v21];\n            ++v17;\n          }\n        }\nLABEL_127:\n        LOBYTE(v14) = v20 == 2;\nLABEL_65:\n        v11 = (v14 | v56 ^ 1) ^ 1;\n        LOBYTE(v11) = v82 | (v14 | v56 ^ 1) ^ 1;\n        if ( v82 | (unsigned __int8)(v14 | v56 ^ 1) ^ 1 )\n        {\nLABEL_17:\n          v11 = 0;\n          if ( a7 )\n          {\nLABEL_18:\n            if ( (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v26 >> 5)) >> v26) & 1 )\n            {\n              v27 = v20 == 2;\nLABEL_20:\n              if ( v82 )\n                return sub_407760(v9, v10, s);\nLABEL_21:\n              ++v21;\n              goto LABEL_22;\n            }\n          }\nLABEL_121:\n          v27 = v20 == 2;\n          if ( v58 )\n            goto LABEL_20;\nLABEL_122:\n          ++v21;\n          v11 = v22 & (v11 ^ 1);\nLABEL_144:\n          if ( (_BYTE)v11 )\n          {\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = 39;\n            if ( v10 > v17 + 1 )\n              *(_BYTE *)(v9 + v17 + 1) = 39;\n            v17 += 2LL;\n            v22 = 0;\n          }\n          goto LABEL_33;\n        }\nLABEL_66:\n        ++v21;\n        if ( !v58 )\n        {\n          v11 = v22 & (v11 ^ 1);\n          goto LABEL_144;\n        }\nLABEL_67:\n        v27 = v20 == 2;\nLABEL_22:\n        v14 = v22 ^ 1;\n        if ( v27 & ((unsigned __int8)v22 ^ 1) )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v17 += 3LL;\n          LOBYTE(v14) = v27 & (v22 ^ 1);\n          v22 = v14;\n        }\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 92;\n        ++v17;\nLABEL_33:\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = v26;\n        ++v17;\n        goto LABEL_4;\n    }\n    if ( v82 && v71 == 2 && v46 != 1 )\n      break;\nLABEL_187:\n    if ( !iswprint(wc) )\n      v11 = 0;\n    v44 += v47;\n    if ( mbsinit(&ps) )\n    {\n      v37 = v44;\n      v22 = v83;\n      v17 = v84;\n      v14 = v11 ^ 1;\n      v9 = v76;\n      v10 = v78;\n      v19 = v66;\n      v20 = v71;\n      LOBYTE(v14) = v56 & (v11 ^ 1);\n      goto LABEL_252;\n    }\n  }\n  v48 = &s[v45 + 1];\n  while ( (unsigned __int8)(*v48 - 91) > 0x21u || !((1LL << (*v48 - 91)) & 0x20000002BLL) )\n  {\n    if ( &s[v46 + v45] == ++v48 )\n      goto LABEL_187;\n  }\n  v9 = v76;\n  v10 = v78;\n  return sub_407760(v9, v10, s);\n}\n", 
            "funcStartAddr": "0x40200aL", 
            "funcEndAddr": "0x40200fL", 
            "funcName": "sub_407760"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408770(signed int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  __int128 *v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 *v12; // rbx\n  _BYTE *v13; // r12\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rsi\n  _BYTE *v16; // rax\n  int v17; // er8\n  __int128 *v19; // rax\n  char *v20; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v21; // [rsp+10h] [rbp-48h]\n  __int64 v22; // [rsp+10h] [rbp-48h]\n  int v23; // [rsp+18h] [rbp-40h]\n  int v24; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v20 = a2;\n  v6 = __errno_location();\n  v7 = off_612318;\n  v8 = v6;\n  v23 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= (unsigned int)a1 )\n  {\n    v9 = 16LL * (unsigned int)(a1 + 1);\n    if ( off_612318 == &xmmword_612320 )\n    {\n      v19 = (__int128 *)sub_4096D0(0LL, v9);\n      v11 = (unsigned int)(a1 + 1);\n      v7 = v19;\n      off_612318 = v19;\n      *v19 = (__int128)_mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      v10 = (__int128 *)sub_4096D0(off_612318, v9);\n      v11 = (unsigned int)(a1 + 1);\n      off_612318 = v10;\n      v7 = v10;\n    }\n    memset(&v7[dword_612330], 0, 16 * (v11 - (unsigned int)dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v12 = (unsigned __int64 *)&v7[a1];\n  v13 = (_BYTE *)v12[1];\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v21 = *v12;\n  v14 = sub_407760(v13, *v12, v20, v4, *(_DWORD *)v5, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v21 <= v14 )\n  {\n    v15 = v14 + 1;\n    *v12 = v14 + 1;\n    if ( v13 != (_BYTE *)&unk_612540 )\n    {\n      v22 = v14 + 1;\n      free(v13);\n      v15 = v22;\n    }\n    v16 = (_BYTE *)sub_409680(v15);\n    v17 = *(_DWORD *)v5;\n    v12[1] = (unsigned __int64)v16;\n    v13 = v16;\n    sub_407760(v16, v15, v20, v4, v17, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v23;\n  return v13;\n}\n\n_BYTE *__fastcall sub_408770(signed int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  __int128 *v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 *v12; // rbx\n  _BYTE *v13; // r12\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rsi\n  _BYTE *v16; // rax\n  int v17; // er8\n  __int128 *v19; // rax\n  char *v20; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v21; // [rsp+10h] [rbp-48h]\n  __int64 v22; // [rsp+10h] [rbp-48h]\n  int v23; // [rsp+18h] [rbp-40h]\n  int v24; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v20 = a2;\n  v6 = __errno_location();\n  v7 = off_612318;\n  v8 = v6;\n  v23 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= (unsigned int)a1 )\n  {\n    v9 = 16LL * (unsigned int)(a1 + 1);\n    if ( off_612318 == &xmmword_612320 )\n    {\n      v19 = (__int128 *)sub_4096D0(0LL, v9);\n      v11 = (unsigned int)(a1 + 1);\n      v7 = v19;\n      off_612318 = v19;\n      *v19 = (__int128)_mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      v10 = (__int128 *)sub_4096D0(off_612318, v9);\n      v11 = (unsigned int)(a1 + 1);\n      off_612318 = v10;\n      v7 = v10;\n    }\n    memset(&v7[dword_612330], 0, 16 * (v11 - (unsigned int)dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v12 = (unsigned __int64 *)&v7[a1];\n  v13 = (_BYTE *)v12[1];\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v21 = *v12;\n  v14 = sub_407760(v13, *v12, v20, v4, *(_DWORD *)v5, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v21 <= v14 )\n  {\n    v15 = v14 + 1;\n    *v12 = v14 + 1;\n    if ( v13 != (_BYTE *)&unk_612540 )\n    {\n      v22 = v14 + 1;\n      free(v13);\n      v15 = v22;\n    }\n    v16 = (_BYTE *)sub_409680(v15);\n    v17 = *(_DWORD *)v5;\n    v12[1] = (unsigned __int64)v16;\n    v13 = v16;\n    sub_407760(v16, v15, v20, v4, v17, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v23;\n  return v13;\n}\n", 
            "funcStartAddr": "0x40200fL", 
            "funcEndAddr": "0x402014L", 
            "funcName": "sub_408770"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408770(signed int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  __int128 *v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 *v12; // rbx\n  _BYTE *v13; // r12\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rsi\n  _BYTE *v16; // rax\n  int v17; // er8\n  __int128 *v19; // rax\n  char *v20; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v21; // [rsp+10h] [rbp-48h]\n  __int64 v22; // [rsp+10h] [rbp-48h]\n  int v23; // [rsp+18h] [rbp-40h]\n  int v24; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v20 = a2;\n  v6 = __errno_location();\n  v7 = off_612318;\n  v8 = v6;\n  v23 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= (unsigned int)a1 )\n  {\n    v9 = 16LL * (unsigned int)(a1 + 1);\n    if ( off_612318 == &xmmword_612320 )\n    {\n      v19 = (__int128 *)sub_4096D0(0LL, v9);\n      v11 = (unsigned int)(a1 + 1);\n      v7 = v19;\n      off_612318 = v19;\n      *v19 = (__int128)_mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      v10 = (__int128 *)sub_4096D0(off_612318, v9);\n      v11 = (unsigned int)(a1 + 1);\n      off_612318 = v10;\n      v7 = v10;\n    }\n    memset(&v7[dword_612330], 0, 16 * (v11 - (unsigned int)dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v12 = (unsigned __int64 *)&v7[a1];\n  v13 = (_BYTE *)v12[1];\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v21 = *v12;\n  v14 = sub_407760(v13, *v12, v20, v4, *(_DWORD *)v5, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v21 <= v14 )\n  {\n    v15 = v14 + 1;\n    *v12 = v14 + 1;\n    if ( v13 != (_BYTE *)&unk_612540 )\n    {\n      v22 = v14 + 1;\n      free(v13);\n      v15 = v22;\n    }\n    v16 = (_BYTE *)sub_409680(v15);\n    v17 = *(_DWORD *)v5;\n    v12[1] = (unsigned __int64)v16;\n    v13 = v16;\n    sub_407760(v16, v15, v20, v4, v17, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v23;\n  return v13;\n}\n\n_BYTE *__fastcall sub_408770(signed int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  __int128 *v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 *v12; // rbx\n  _BYTE *v13; // r12\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rsi\n  _BYTE *v16; // rax\n  int v17; // er8\n  __int128 *v19; // rax\n  char *v20; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v21; // [rsp+10h] [rbp-48h]\n  __int64 v22; // [rsp+10h] [rbp-48h]\n  int v23; // [rsp+18h] [rbp-40h]\n  int v24; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v20 = a2;\n  v6 = __errno_location();\n  v7 = off_612318;\n  v8 = v6;\n  v23 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= (unsigned int)a1 )\n  {\n    v9 = 16LL * (unsigned int)(a1 + 1);\n    if ( off_612318 == &xmmword_612320 )\n    {\n      v19 = (__int128 *)sub_4096D0(0LL, v9);\n      v11 = (unsigned int)(a1 + 1);\n      v7 = v19;\n      off_612318 = v19;\n      *v19 = (__int128)_mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      v10 = (__int128 *)sub_4096D0(off_612318, v9);\n      v11 = (unsigned int)(a1 + 1);\n      off_612318 = v10;\n      v7 = v10;\n    }\n    memset(&v7[dword_612330], 0, 16 * (v11 - (unsigned int)dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v12 = (unsigned __int64 *)&v7[a1];\n  v13 = (_BYTE *)v12[1];\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v21 = *v12;\n  v14 = sub_407760(v13, *v12, v20, v4, *(_DWORD *)v5, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v21 <= v14 )\n  {\n    v15 = v14 + 1;\n    *v12 = v14 + 1;\n    if ( v13 != (_BYTE *)&unk_612540 )\n    {\n      v22 = v14 + 1;\n      free(v13);\n      v15 = v22;\n    }\n    v16 = (_BYTE *)sub_409680(v15);\n    v17 = *(_DWORD *)v5;\n    v12[1] = (unsigned __int64)v16;\n    v13 = v16;\n    sub_407760(v16, v15, v20, v4, v17, v24, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v23;\n  return v13;\n}\n", 
            "funcStartAddr": "0x40200fL", 
            "funcEndAddr": "0x402014L", 
            "funcName": "sub_408770"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408C90(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408C90(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402014L", 
            "funcEndAddr": "0x402019L", 
            "funcName": "sub_408C90"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408C90(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408C90(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402014L", 
            "funcEndAddr": "0x402019L", 
            "funcName": "sub_408C90"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408D00(signed int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_408770(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_408D00(signed int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_408770(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x402019L", 
            "funcEndAddr": "0x40201eL", 
            "funcName": "sub_408D00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408D00(signed int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_408770(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_408D00(signed int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_408770(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x402019L", 
            "funcEndAddr": "0x40201eL", 
            "funcName": "sub_408D00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408D90(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_612670;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_612640);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_612650);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_612660);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_408770(0, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x408d90L", 
            "funcEndAddr": "0x408e00L", 
            "funcName": "sub_408D90"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408E10(char *a1)\n{\n  return sub_408D90(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x408e10L", 
            "funcEndAddr": "0x408e21L", 
            "funcName": "sub_408E10"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408E40(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408E40(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40201eL", 
            "funcEndAddr": "0x402023L", 
            "funcName": "sub_408E40"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408E40(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408E40(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40201eL", 
            "funcEndAddr": "0x402023L", 
            "funcName": "sub_408E40"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408EB0(signed int a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_612640);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_612650);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_612660);\n  v9 = qword_612670;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_408770(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x408eb0L", 
            "funcEndAddr": "0x408f1cL", 
            "funcName": "sub_408EB0"
        }, 
        {
            "decompiledFuncCode": "ssize_t __fastcall sub_408FE0(int fd, void *buf, size_t nbytes)\n{\n  size_t v3; // rbx\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  v3 = nbytes;\n  while ( 1 )\n  {\n    v4 = read(fd, buf, v3);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( v5 != 22 || v3 <= 0x7FFFE000 )\n        return v4;\n      v3 = 2147475456LL;\n    }\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x408fe0L", 
            "funcEndAddr": "0x40903eL", 
            "funcName": "sub_408FE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409040(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // rsi\n  bool v5; // zf\n  __int64 result; // rax\n\n  v2 = a2;\n  v3 = sub_40B1A0(a1, 0LL, a2);\n  v4 = v3 - a1 + 1;\n  v5 = v3 == 0;\n  result = v2;\n  if ( !v5 )\n    result = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x409040L", 
            "funcEndAddr": "0x409071L", 
            "funcName": "sub_409040"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409080(char a1)\n{\n  return sub_409D40(a1);\n}\n", 
            "funcStartAddr": "0x409080L", 
            "funcEndAddr": "0x40908eL", 
            "funcName": "sub_409080"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409090(int fd)\n{\n  __int64 result; // rax\n  unsigned int v2; // er12\n  int *v3; // rax\n  int v4; // er13\n  int *v5; // rbp\n\n  if ( (unsigned int)fd > 2 )\n    return (unsigned int)fd;\n  v2 = sub_409080(fd);\n  v3 = __errno_location();\n  v4 = *v3;\n  v5 = v3;\n  close(fd);\n  result = v2;\n  *v5 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x409090L", 
            "funcEndAddr": "0x4090deL", 
            "funcName": "sub_409090"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4090E0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // r14\n  __int64 v11; // r13\n  __int64 v12; // r12\n  __int64 v13; // r15\n  __int64 v14; // r8\n  __int64 v15; // rcx\n  __int64 v16; // rbx\n  char *v17; // rax\n  int result; // eax\n  const char *v19; // rsi\n  __int64 v20; // rcx\n  __int64 v21; // r14\n  __int64 v22; // r13\n  __int64 v23; // r12\n  __int64 v24; // r15\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // rcx\n  __int64 v48; // r15\n  __int64 v49; // r14\n  __int64 v50; // r13\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // r13\n  __int64 v54; // r12\n  __int64 v55; // r15\n  __int64 v56; // r14\n  __int64 v57; // rbx\n  char *v58; // rax\n  __int64 v59; // rcx\n  int v60; // [rsp-10h] [rbp-68h]\n  __int64 v61; // [rsp+0h] [rbp-58h]\n  __int64 v62; // [rsp+0h] [rbp-58h]\n  __int64 v63; // [rsp+0h] [rbp-58h]\n  __int64 v64; // [rsp+0h] [rbp-58h]\n  __int64 v65; // [rsp+8h] [rbp-50h]\n  __int64 v66; // [rsp+8h] [rbp-50h]\n  __int64 v67; // [rsp+8h] [rbp-50h]\n  __int64 v68; // [rsp+10h] [rbp-48h]\n  __int64 v69; // [rsp+10h] [rbp-48h]\n  __int64 v70; // [rsp+18h] [rbp-40h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    fprintf(stream, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(stream, \"%s %s\\n\");\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  fprintf(stream, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2015LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v27 = *v7;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return fprintf(stream, v28, v27);\n    case 2LL:\n      v29 = v7[1];\n      v30 = *v7;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return fprintf(stream, v31, v30, v29);\n    case 3LL:\n      v32 = v7[2];\n      v33 = v7[1];\n      v34 = *v7;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v35, v34, v33, v32);\n    case 4LL:\n      v36 = v7[3];\n      v37 = v7[2];\n      v38 = v7[1];\n      v39 = *v7;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v40, v39, v38, v37, v36);\n    case 5LL:\n      v41 = v7[4];\n      v42 = v7[3];\n      v43 = v7[2];\n      v44 = v7[1];\n      v45 = *v7;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\n      fprintf(stream, v46, v45, v44, v43, v42, v41);\n      return v60;\n    case 6LL:\n      v47 = v7[1];\n      v48 = v7[4];\n      v49 = v7[3];\n      v50 = v7[2];\n      v51 = *v7;\n      v63 = v47;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      fprintf(stream, v52, v51, v63, v50, v49, v48);\n      return v60;\n    case 7LL:\n      v53 = v7[6];\n      v54 = v7[5];\n      v55 = v7[4];\n      v56 = v7[3];\n      v67 = v7[2];\n      v64 = v7[1];\n      v57 = *v7;\n      v58 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v58, v57, v64, v67, v56, v55, v54, v53);\n    case 8LL:\n      v10 = v7[7];\n      v11 = v7[6];\n      v12 = v7[5];\n      v13 = v7[4];\n      v14 = v7[2];\n      v68 = v7[3];\n      v15 = v7[1];\n      v16 = *v7;\n      v65 = v14;\n      v61 = v15;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v17, v16, v61, v65, v68, v13, v12, v11, v10);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v59;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return fprintf(stream, v26, v25, v62, v66, v69, v24, v23, v22, v21, v70);\n  }\n}\n\nint __fastcall sub_4090E0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // r14\n  __int64 v11; // r13\n  __int64 v12; // r12\n  __int64 v13; // r15\n  __int64 v14; // r8\n  __int64 v15; // rcx\n  __int64 v16; // rbx\n  char *v17; // rax\n  int result; // eax\n  const char *v19; // rsi\n  __int64 v20; // rcx\n  __int64 v21; // r14\n  __int64 v22; // r13\n  __int64 v23; // r12\n  __int64 v24; // r15\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // rcx\n  __int64 v48; // r15\n  __int64 v49; // r14\n  __int64 v50; // r13\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // r13\n  __int64 v54; // r12\n  __int64 v55; // r15\n  __int64 v56; // r14\n  __int64 v57; // rbx\n  char *v58; // rax\n  __int64 v59; // rcx\n  int v60; // [rsp-10h] [rbp-68h]\n  __int64 v61; // [rsp+0h] [rbp-58h]\n  __int64 v62; // [rsp+0h] [rbp-58h]\n  __int64 v63; // [rsp+0h] [rbp-58h]\n  __int64 v64; // [rsp+0h] [rbp-58h]\n  __int64 v65; // [rsp+8h] [rbp-50h]\n  __int64 v66; // [rsp+8h] [rbp-50h]\n  __int64 v67; // [rsp+8h] [rbp-50h]\n  __int64 v68; // [rsp+10h] [rbp-48h]\n  __int64 v69; // [rsp+10h] [rbp-48h]\n  __int64 v70; // [rsp+18h] [rbp-40h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    fprintf(stream, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(stream, \"%s %s\\n\");\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  fprintf(stream, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2015LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v27 = *v7;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return fprintf(stream, v28, v27);\n    case 2LL:\n      v29 = v7[1];\n      v30 = *v7;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return fprintf(stream, v31, v30, v29);\n    case 3LL:\n      v32 = v7[2];\n      v33 = v7[1];\n      v34 = *v7;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v35, v34, v33, v32);\n    case 4LL:\n      v36 = v7[3];\n      v37 = v7[2];\n      v38 = v7[1];\n      v39 = *v7;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v40, v39, v38, v37, v36);\n    case 5LL:\n      v41 = v7[4];\n      v42 = v7[3];\n      v43 = v7[2];\n      v44 = v7[1];\n      v45 = *v7;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\n      fprintf(stream, v46, v45, v44, v43, v42, v41);\n      return v60;\n    case 6LL:\n      v47 = v7[1];\n      v48 = v7[4];\n      v49 = v7[3];\n      v50 = v7[2];\n      v51 = *v7;\n      v63 = v47;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      fprintf(stream, v52, v51, v63, v50, v49, v48);\n      return v60;\n    case 7LL:\n      v53 = v7[6];\n      v54 = v7[5];\n      v55 = v7[4];\n      v56 = v7[3];\n      v67 = v7[2];\n      v64 = v7[1];\n      v57 = *v7;\n      v58 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v58, v57, v64, v67, v56, v55, v54, v53);\n    case 8LL:\n      v10 = v7[7];\n      v11 = v7[6];\n      v12 = v7[5];\n      v13 = v7[4];\n      v14 = v7[2];\n      v68 = v7[3];\n      v15 = v7[1];\n      v16 = *v7;\n      v65 = v14;\n      v61 = v15;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v17, v16, v61, v65, v68, v13, v12, v11, v10);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v59;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return fprintf(stream, v26, v25, v62, v66, v69, v24, v23, v22, v21, v70);\n  }\n}\n", 
            "funcStartAddr": "0x402023L", 
            "funcEndAddr": "0x402028L", 
            "funcName": "sub_4090E0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4090E0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // r14\n  __int64 v11; // r13\n  __int64 v12; // r12\n  __int64 v13; // r15\n  __int64 v14; // r8\n  __int64 v15; // rcx\n  __int64 v16; // rbx\n  char *v17; // rax\n  int result; // eax\n  const char *v19; // rsi\n  __int64 v20; // rcx\n  __int64 v21; // r14\n  __int64 v22; // r13\n  __int64 v23; // r12\n  __int64 v24; // r15\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // rcx\n  __int64 v48; // r15\n  __int64 v49; // r14\n  __int64 v50; // r13\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // r13\n  __int64 v54; // r12\n  __int64 v55; // r15\n  __int64 v56; // r14\n  __int64 v57; // rbx\n  char *v58; // rax\n  __int64 v59; // rcx\n  int v60; // [rsp-10h] [rbp-68h]\n  __int64 v61; // [rsp+0h] [rbp-58h]\n  __int64 v62; // [rsp+0h] [rbp-58h]\n  __int64 v63; // [rsp+0h] [rbp-58h]\n  __int64 v64; // [rsp+0h] [rbp-58h]\n  __int64 v65; // [rsp+8h] [rbp-50h]\n  __int64 v66; // [rsp+8h] [rbp-50h]\n  __int64 v67; // [rsp+8h] [rbp-50h]\n  __int64 v68; // [rsp+10h] [rbp-48h]\n  __int64 v69; // [rsp+10h] [rbp-48h]\n  __int64 v70; // [rsp+18h] [rbp-40h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    fprintf(stream, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(stream, \"%s %s\\n\");\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  fprintf(stream, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2015LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v27 = *v7;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return fprintf(stream, v28, v27);\n    case 2LL:\n      v29 = v7[1];\n      v30 = *v7;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return fprintf(stream, v31, v30, v29);\n    case 3LL:\n      v32 = v7[2];\n      v33 = v7[1];\n      v34 = *v7;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v35, v34, v33, v32);\n    case 4LL:\n      v36 = v7[3];\n      v37 = v7[2];\n      v38 = v7[1];\n      v39 = *v7;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v40, v39, v38, v37, v36);\n    case 5LL:\n      v41 = v7[4];\n      v42 = v7[3];\n      v43 = v7[2];\n      v44 = v7[1];\n      v45 = *v7;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\n      fprintf(stream, v46, v45, v44, v43, v42, v41);\n      return v60;\n    case 6LL:\n      v47 = v7[1];\n      v48 = v7[4];\n      v49 = v7[3];\n      v50 = v7[2];\n      v51 = *v7;\n      v63 = v47;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      fprintf(stream, v52, v51, v63, v50, v49, v48);\n      return v60;\n    case 7LL:\n      v53 = v7[6];\n      v54 = v7[5];\n      v55 = v7[4];\n      v56 = v7[3];\n      v67 = v7[2];\n      v64 = v7[1];\n      v57 = *v7;\n      v58 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v58, v57, v64, v67, v56, v55, v54, v53);\n    case 8LL:\n      v10 = v7[7];\n      v11 = v7[6];\n      v12 = v7[5];\n      v13 = v7[4];\n      v14 = v7[2];\n      v68 = v7[3];\n      v15 = v7[1];\n      v16 = *v7;\n      v65 = v14;\n      v61 = v15;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v17, v16, v61, v65, v68, v13, v12, v11, v10);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v59;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return fprintf(stream, v26, v25, v62, v66, v69, v24, v23, v22, v21, v70);\n  }\n}\n\nint __fastcall sub_4090E0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // r14\n  __int64 v11; // r13\n  __int64 v12; // r12\n  __int64 v13; // r15\n  __int64 v14; // r8\n  __int64 v15; // rcx\n  __int64 v16; // rbx\n  char *v17; // rax\n  int result; // eax\n  const char *v19; // rsi\n  __int64 v20; // rcx\n  __int64 v21; // r14\n  __int64 v22; // r13\n  __int64 v23; // r12\n  __int64 v24; // r15\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // rcx\n  __int64 v48; // r15\n  __int64 v49; // r14\n  __int64 v50; // r13\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // r13\n  __int64 v54; // r12\n  __int64 v55; // r15\n  __int64 v56; // r14\n  __int64 v57; // rbx\n  char *v58; // rax\n  __int64 v59; // rcx\n  int v60; // [rsp-10h] [rbp-68h]\n  __int64 v61; // [rsp+0h] [rbp-58h]\n  __int64 v62; // [rsp+0h] [rbp-58h]\n  __int64 v63; // [rsp+0h] [rbp-58h]\n  __int64 v64; // [rsp+0h] [rbp-58h]\n  __int64 v65; // [rsp+8h] [rbp-50h]\n  __int64 v66; // [rsp+8h] [rbp-50h]\n  __int64 v67; // [rsp+8h] [rbp-50h]\n  __int64 v68; // [rsp+10h] [rbp-48h]\n  __int64 v69; // [rsp+10h] [rbp-48h]\n  __int64 v70; // [rsp+18h] [rbp-40h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    fprintf(stream, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(stream, \"%s %s\\n\");\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  fprintf(stream, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2015LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v27 = *v7;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return fprintf(stream, v28, v27);\n    case 2LL:\n      v29 = v7[1];\n      v30 = *v7;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return fprintf(stream, v31, v30, v29);\n    case 3LL:\n      v32 = v7[2];\n      v33 = v7[1];\n      v34 = *v7;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v35, v34, v33, v32);\n    case 4LL:\n      v36 = v7[3];\n      v37 = v7[2];\n      v38 = v7[1];\n      v39 = *v7;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v40, v39, v38, v37, v36);\n    case 5LL:\n      v41 = v7[4];\n      v42 = v7[3];\n      v43 = v7[2];\n      v44 = v7[1];\n      v45 = *v7;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\n      fprintf(stream, v46, v45, v44, v43, v42, v41);\n      return v60;\n    case 6LL:\n      v47 = v7[1];\n      v48 = v7[4];\n      v49 = v7[3];\n      v50 = v7[2];\n      v51 = *v7;\n      v63 = v47;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      fprintf(stream, v52, v51, v63, v50, v49, v48);\n      return v60;\n    case 7LL:\n      v53 = v7[6];\n      v54 = v7[5];\n      v55 = v7[4];\n      v56 = v7[3];\n      v67 = v7[2];\n      v64 = v7[1];\n      v57 = *v7;\n      v58 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v58, v57, v64, v67, v56, v55, v54, v53);\n    case 8LL:\n      v10 = v7[7];\n      v11 = v7[6];\n      v12 = v7[5];\n      v13 = v7[4];\n      v14 = v7[2];\n      v68 = v7[3];\n      v15 = v7[1];\n      v16 = *v7;\n      v65 = v14;\n      v61 = v15;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v17, v16, v61, v65, v68, v13, v12, v11, v10);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v59;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return fprintf(stream, v26, v25, v62, v66, v69, v24, v23, v22, v21, v70);\n  }\n}\n", 
            "funcStartAddr": "0x402023L", 
            "funcEndAddr": "0x402028L", 
            "funcName": "sub_4090E0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4094F0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_4090E0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_4090E0(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x4094f0L", 
            "funcEndAddr": "0x409550L", 
            "funcName": "sub_4094F0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409550(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_4090E0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_4090E0(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x409550L", 
            "funcEndAddr": "0x40960cL", 
            "funcName": "sub_409550"
        }, 
        {
            "decompiledFuncCode": "int sub_409610()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  printf(v0, \"bug-findutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  printf(v1, &unk_40D94B, \"http://www.gnu.org/software/findutils/\");\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs(v3, v2);\n}\n", 
            "funcStartAddr": "0x409610L", 
            "funcEndAddr": "0x40967aL", 
            "funcName": "sub_409610"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409680(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_4098A0();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409680L", 
            "funcEndAddr": "0x40969aL", 
            "funcName": "sub_409680"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4096D0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_4098A0();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4096d0L", 
            "funcEndAddr": "0x409706L", 
            "funcName": "sub_4096D0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409820(size_t a1, size_t a2)\n{\n  void *result; // rax\n\n  result = calloc(a1, a2);\n  if ( !result )\n    sub_4098A0();\n  return result;\n}\n", 
            "funcStartAddr": "0x409820L", 
            "funcEndAddr": "0x409838L", 
            "funcName": "sub_409820"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409840(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_409680(n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x409840L", 
            "funcEndAddr": "0x409868L", 
            "funcName": "sub_409840"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409870(void *src)\n{\n  size_t v1; // rax\n  size_t v2; // rbx\n  void *v3; // rax\n\n  v1 = strlen((const char *)src);\n  v2 = v1 + 1;\n  v3 = sub_409680(v1 + 1);\n  return memcpy(v3, src, v2);\n}\n", 
            "funcStartAddr": "0x409870L", 
            "funcEndAddr": "0x40989eL", 
            "funcName": "sub_409870"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4098A0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(dword_6122C0, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x4098a0L", 
            "funcEndAddr": "0x4098d1L", 
            "funcName": "sub_4098A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4098E0(char *nptr, char **a2, unsigned int a3, unsigned __int64 *a4, const char *a5)\n{\n  char **v5; // r15\n  unsigned __int64 *v6; // r14\n  const char *v7; // r13\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  unsigned __int64 v13; // rax\n  char *v14; // r8\n  unsigned __int64 v15; // rbx\n  unsigned int v16; // ebp\n  char v17; // r12\n  char *v19; // rax\n  char *v20; // r8\n  char v21; // al\n  char *v22; // rax\n  __int64 v23; // rsi\n  unsigned __int64 v24; // rcx\n  int v25; // edi\n  int v26; // er9\n  bool v27; // of\n  int v28; // edi\n  int v29; // edi\n  int v30; // edi\n  unsigned __int64 v31; // rdx\n  unsigned __int64 v32; // kr20_8\n  int v33; // edi\n  int base; // [rsp+8h] [rbp-50h]\n  char *basea; // [rsp+8h] [rbp-50h]\n  char *baseb; // [rsp+8h] [rbp-50h]\n  char *basec; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h]\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"xstrtol.c\", 0x60u, \"xstrtoul\");\n  v5 = a2;\n  base = a3;\n  v6 = a4;\n  v7 = a5;\n  if ( !a2 )\n    v5 = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( v11[v10] & 0x2000 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = strtoul(nptr, v5, base);\n  v14 = *v5;\n  v15 = v13;\n  if ( *v5 == nptr )\n  {\n    basea = *v5;\n    if ( v7 )\n    {\n      v17 = *nptr;\n      if ( *nptr )\n      {\n        v16 = 0;\n        v15 = 1LL;\n        v19 = strchr(v7, v17);\n        v20 = basea;\n        if ( v19 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v16 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v16 = 0;\nLABEL_11:\n  if ( v7 )\n  {\n    v17 = *v14;\n    if ( *v14 )\n    {\n      basec = *v5;\n      v22 = strchr(v7, v17);\n      v20 = basec;\n      if ( !v22 )\n      {\nLABEL_26:\n        *v6 = v15;\n        v16 |= 2u;\n        return v16;\n      }\nLABEL_20:\n      baseb = v20;\n      if ( strchr(v7, 48) )\n      {\n        v21 = baseb[1];\n        if ( v21 != 68 )\n        {\n          if ( v21 == 105 )\n          {\n            v24 = 1024LL;\n            LODWORD(v23) = 2 * (baseb[2] == 66) + 1;\n            goto LABEL_28;\n          }\n          if ( v21 != 66 )\n          {\n            switch ( v17 )\n            {\n              case 66:\n                v23 = 1LL;\n                goto LABEL_83;\n              case 69:\n                v23 = 1LL;\n                v24 = 1024LL;\n                goto LABEL_77;\n              case 71:\n              case 103:\n                v23 = 1LL;\n                v24 = 1024LL;\n                goto LABEL_72;\n              case 75:\n              case 107:\n                v23 = 1LL;\n                v31 = 1024LL;\n                goto LABEL_69;\n              case 77:\n              case 109:\n                v23 = 1LL;\n                v24 = 1024LL;\n                goto LABEL_65;\n              case 80:\n                v23 = 1LL;\n                v24 = 1024LL;\n                goto LABEL_59;\n              case 84:\n              case 116:\n                v23 = 1LL;\n                v24 = 1024LL;\n                goto LABEL_53;\n              case 89:\n                v23 = 1LL;\n                v24 = 1024LL;\n                goto LABEL_47;\n              case 90:\n                v23 = 1LL;\n                v24 = 1024LL;\n                goto LABEL_41;\n              case 98:\n                v23 = 1LL;\n                goto LABEL_38;\n              case 99:\n                v23 = 1LL;\n                goto LABEL_33;\n              case 119:\n                v23 = 1LL;\n                goto LABEL_31;\n              default:\n                goto LABEL_26;\n            }\n          }\n        }\n        LODWORD(v23) = 2;\n        v24 = 1000LL;\n      }\n      else\n      {\n        LODWORD(v23) = 1;\n        v24 = 1024LL;\n      }\nLABEL_28:\n      switch ( v17 )\n      {\n        case 66:\n          v23 = (int)v23;\nLABEL_83:\n          if ( v15 >> 54 )\n            goto LABEL_70;\n          v15 <<= 10;\n          break;\n        case 69:\n          v23 = (int)v23;\nLABEL_77:\n          v33 = 6;\n          v26 = 0;\n          do\n          {\n            v27 = (v24 * (unsigned __int128)v15) >> 64 != 0;\n            v15 *= v24;\n            if ( v27 )\n            {\n              v26 = 1;\n              v15 = -1LL;\n            }\n            --v33;\n          }\n          while ( v33 );\n          goto LABEL_45;\n        case 71:\n        case 103:\n          v23 = (int)v23;\nLABEL_72:\n          if ( is_mul_ok(v24, v15) && is_mul_ok(v24, v24 * v15) && is_mul_ok(v24, v24 * v24 * v15) )\n          {\n            v15 *= v24 * v24 * v24;\n          }\n          else\n          {\n            v15 = -1LL;\n            v16 |= 1u;\n          }\n          break;\n        case 75:\n        case 107:\n          v31 = (int)v24;\n          v23 = (int)v23;\nLABEL_69:\n          v32 = v15;\n          v15 *= v31;\n          if ( !is_mul_ok(v31, v32) )\n            goto LABEL_70;\n          break;\n        case 77:\n        case 109:\n          v23 = (int)v23;\nLABEL_65:\n          if ( !is_mul_ok(v24, v15) || !is_mul_ok(v24, v24 * v15) )\n            goto LABEL_70;\n          v15 *= v24 * v24;\n          break;\n        case 80:\n          v23 = (int)v23;\nLABEL_59:\n          v30 = 5;\n          v26 = 0;\n          do\n          {\n            v27 = (v24 * (unsigned __int128)v15) >> 64 != 0;\n            v15 *= v24;\n            if ( v27 )\n            {\n              v26 = 1;\n              v15 = -1LL;\n            }\n            --v30;\n          }\n          while ( v30 );\n          goto LABEL_45;\n        case 84:\n        case 116:\n          v23 = (int)v23;\nLABEL_53:\n          v29 = 4;\n          v26 = 0;\n          do\n          {\n            v27 = (v24 * (unsigned __int128)v15) >> 64 != 0;\n            v15 *= v24;\n            if ( v27 )\n            {\n              v26 = 1;\n              v15 = -1LL;\n            }\n            --v29;\n          }\n          while ( v29 );\n          goto LABEL_45;\n        case 89:\n          v23 = (int)v23;\nLABEL_47:\n          v28 = 8;\n          v26 = 0;\n          do\n          {\n            v27 = (v24 * (unsigned __int128)v15) >> 64 != 0;\n            v15 *= v24;\n            if ( v27 )\n            {\n              v26 = 1;\n              v15 = -1LL;\n            }\n            --v28;\n          }\n          while ( v28 );\n          goto LABEL_45;\n        case 90:\n          v23 = (int)v23;\nLABEL_41:\n          v25 = 7;\n          v26 = 0;\n          do\n          {\n            v27 = (v24 * (unsigned __int128)v15) >> 64 != 0;\n            v15 *= v24;\n            if ( v27 )\n            {\n              v26 = 1;\n              v15 = -1LL;\n            }\n            --v25;\n          }\n          while ( v25 );\nLABEL_45:\n          v16 |= v26;\n          break;\n        case 98:\n          v23 = (int)v23;\nLABEL_38:\n          if ( v15 >> 55 )\n            goto LABEL_70;\n          v15 <<= 9;\n          break;\n        case 99:\n          v23 = (int)v23;\n          break;\n        case 119:\n          v23 = (int)v23;\nLABEL_31:\n          if ( (v15 & 0x8000000000000000LL) != 0LL )\n          {\nLABEL_70:\n            v16 = 1;\n            v15 = -1LL;\n          }\n          else\n          {\n            v15 *= 2LL;\n          }\n          break;\n        default:\n          goto LABEL_26;\n      }\nLABEL_33:\n      *v5 = &baseb[v23];\n      if ( baseb[v23] )\n        v16 |= 2u;\n      goto LABEL_13;\n    }\n  }\nLABEL_13:\n  *v6 = v15;\n  return v16;\n}\n", 
            "funcStartAddr": "0x4098e0L", 
            "funcEndAddr": "0x409d3dL", 
            "funcName": "sub_4098E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409D40(char a1, int a2, __int64 a3)\n{\n  int v3; // ebx\n  int v5; // eax\n  int *v6; // rax\n  int v7; // edi\n  int v8; // er12\n  int *v9; // rbp\n\n  if ( a2 == 1030 )\n  {\n    if ( dword_612678 < 0 )\n    {\n      v3 = sub_409D40(a1);\n      if ( v3 >= 0 && dword_612678 == -1 )\n      {\nLABEL_8:\n        v5 = fcntl((unsigned __int8)v3, 1);\n        if ( v5 < 0 || fcntl((unsigned __int8)v3, 2, v5 | 1u) == -1 )\n        {\n          v6 = __errno_location();\n          v7 = v3;\n          v3 = -1;\n          v8 = *v6;\n          v9 = v6;\n          close(v7);\n          *v9 = v8;\n        }\n        return (unsigned int)v3;\n      }\n    }\n    else\n    {\n      v3 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v3 >= 0 || *__errno_location() != 22 )\n      {\n        dword_612678 = 1;\n      }\n      else\n      {\n        v3 = sub_409D40(a1);\n        if ( v3 >= 0 )\n        {\n          dword_612678 = -1;\n          goto LABEL_8;\n        }\n      }\n    }\n    return (unsigned int)v3;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n", 
            "funcStartAddr": "0x409d40L", 
            "funcEndAddr": "0x409e75L", 
            "funcName": "sub_409D40"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409E80(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_409EF0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x409e80L", 
            "funcEndAddr": "0x409ec0L", 
            "funcName": "sub_409E80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409EC0(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  if ( *(_QWORD *)(a1 + 40) <= *(_QWORD *)(a1 + 32) )\n  {\n    result = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);\n    if ( *(_DWORD *)a1 & 0x100 )\n      result += *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 72);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409ec0L", 
            "funcEndAddr": "0x409ee8L", 
            "funcName": "sub_409EC0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409EF0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x409ef0L", 
            "funcEndAddr": "0x409f47L", 
            "funcName": "sub_409EF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409F50(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[12];\n  v4 = *a2;\n  v5 = a2[13];\n  v6 = a2[12];\n  v7 = *a2;\n  v8 = a2[13];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[13] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[12] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x409f50L", 
            "funcEndAddr": "0x40a02fL", 
            "funcName": "sub_409F50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A030(int a1, __int64 a2, char *a3, const char **a4, int *a5, int a6, int *a7, int a8)\n{\n  int *v8; // r12\n  int v9; // eax\n  int v10; // ebp\n  _BYTE *v11; // r8\n  char v12; // al\n  bool v13; // zf\n  int v14; // eax\n  __int64 v15; // rax\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  char *v18; // rax\n  const char *v19; // rbx\n  unsigned int v20; // er13\n  char v21; // r14\n  char *v22; // rax\n  char v23; // dl\n  char v24; // dl\n  __int64 v25; // rax\n  int v26; // eax\n  _BYTE *v27; // rdx\n  int v28; // edx\n  int v29; // ecx\n  int v30; // eax\n  int v32; // edx\n  __int64 v33; // rax\n  _BYTE *v34; // rcx\n  int v35; // esi\n  char v36; // cl\n  __int64 v37; // rax\n  char v38; // r13\n  const char *i; // r14\n  int v40; // er13\n  size_t v41; // r14\n  const char **v42; // rbp\n  const char *v43; // r12\n  const char **v44; // r15\n  _BYTE *v45; // r13\n  unsigned int v46; // eax\n  const char **v47; // rbx\n  const char *v48; // r15\n  __int64 v49; // r14\n  const char *v50; // rsi\n  size_t v51; // r13\n  int v52; // ebp\n  _QWORD *v53; // rax\n  _BYTE *v54; // r13\n  bool v55; // si\n  int v56; // eax\n  int v57; // ecx\n  __int64 v58; // rbx\n  unsigned int *v59; // rax\n  int v60; // er15\n  _QWORD *v61; // rdi\n  _QWORD *v62; // r14\n  char *v63; // rbx\n  char *v64; // rax\n  unsigned int v65; // ebp\n  __int64 v66; // rbx\n  char *v67; // rax\n  char *v68; // rax\n  const char *v69; // rbp\n  __int64 v70; // rbx\n  unsigned int v71; // er13\n  char *v72; // rax\n  __int64 v73; // rbx\n  void *v74; // rdi\n  __int64 v75; // rbx\n  char *v76; // rax\n  __int64 v77; // rbp\n  __int64 v78; // rbx\n  char *v79; // rax\n  char *v80; // rbx\n  const char **j; // rax\n  __int64 v82; // rbx\n  size_t v83; // rax\n  __int64 v84; // rbx\n  size_t v85; // rax\n  _QWORD *v86; // rdi\n  _QWORD *v87; // rbx\n  int v88; // eax\n  char v89; // r13\n  const char *v90; // r14\n  int v91; // ebp\n  int v92; // eax\n  __int64 v93; // rbp\n  __int64 v94; // rbx\n  char *v95; // rax\n  int v96; // eax\n  const char **v97; // rsi\n  __int64 v98; // rbp\n  __int64 v99; // rbx\n  char *v100; // rax\n  __int64 v101; // rbx\n  size_t v102; // rax\n  __int64 v103; // rbx\n  char *v104; // rax\n  __int64 v105; // rax\n  char *v106; // rax\n  const char *v107; // rbp\n  __int64 v108; // rbx\n  char *v109; // rax\n  __int64 v110; // rbp\n  char *v111; // rax\n  __int64 v112; // rbx\n  char *v113; // rax\n  const char *v114; // rbp\n  __int64 v115; // rbx\n  char *v116; // rax\n  const char *v117; // rbp\n  __int64 v118; // rbx\n  char *v119; // rax\n  char *s; // [rsp+0h] [rbp-98h]\n  char *sa; // [rsp+0h] [rbp-98h]\n  int sb; // [rsp+0h] [rbp-98h]\n  int v123; // [rsp+Ch] [rbp-8Ch]\n  int v124; // [rsp+Ch] [rbp-8Ch]\n  __int64 *v125; // [rsp+10h] [rbp-88h]\n  _BYTE *v126; // [rsp+18h] [rbp-80h]\n  _BYTE *v127; // [rsp+18h] [rbp-80h]\n  const char **v128; // [rsp+18h] [rbp-80h]\n  _BYTE *v129; // [rsp+18h] [rbp-80h]\n  const char **v130; // [rsp+20h] [rbp-78h]\n  int v131; // [rsp+20h] [rbp-78h]\n  int v132; // [rsp+28h] [rbp-70h]\n  int v133; // [rsp+2Ch] [rbp-6Ch]\n  int v134; // [rsp+2Ch] [rbp-6Ch]\n  int v135; // [rsp+2Ch] [rbp-6Ch]\n  int v136; // [rsp+2Ch] [rbp-6Ch]\n  int *v137; // [rsp+30h] [rbp-68h]\n  const char *v138; // [rsp+38h] [rbp-60h]\n  int v139; // [rsp+38h] [rbp-60h]\n  int v140; // [rsp+40h] [rbp-58h]\n  _BYTE *v141; // [rsp+40h] [rbp-58h]\n  char v142; // [rsp+48h] [rbp-50h]\n  int v143; // [rsp+48h] [rbp-50h]\n  int v144; // [rsp+4Ch] [rbp-4Ch]\n  char v145; // [rsp+50h] [rbp-48h]\n  __int64 v146; // [rsp+58h] [rbp-40h]\n\n  v8 = a7;\n  v125 = (__int64 *)a2;\n  s = a3;\n  v130 = a4;\n  v137 = a5;\n  v132 = a6;\n  v123 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  *((_QWORD *)a7 + 2) = 0LL;\n  v9 = *a7;\n  v10 = a1;\n  if ( !*a7 )\n  {\n    *a7 = 1;\n    v9 = 1;\n    goto LABEL_4;\n  }\n  if ( !a7[6] )\n  {\nLABEL_4:\n    a7[13] = v9;\n    a7[12] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( a8 )\n    {\n      a7[11] = 1;\n      v11 = 0LL;\n      if ( *a3 != 45 )\n      {\n        if ( *a3 != 43 )\n        {\nLABEL_7:\n          a7[10] = 0;\nLABEL_8:\n          a7[6] = 1;\n          v12 = *s;\n          goto LABEL_9;\n        }\nLABEL_68:\n        a7[10] = 0;\n        ++s;\n        goto LABEL_8;\n      }\n    }\n    else if ( getenv(\"POSIXLY_CORRECT\") )\n    {\n      v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n      a7[11] = 1;\n      if ( *s != 45 )\n      {\n        if ( *s != 43 )\n          goto LABEL_7;\n        goto LABEL_68;\n      }\n    }\n    else\n    {\n      a7[11] = 0;\n      if ( *s != 45 )\n      {\n        if ( *s != 43 )\n        {\n          a7[10] = 1;\n          v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_8;\n        }\n        v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n        goto LABEL_68;\n      }\n      v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n    }\n    a7[10] = 2;\n    ++s;\n    goto LABEL_8;\n  }\n  v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n  v12 = *a3;\n  if ( !((*a3 - 43) & 0xFD) )\n  {\n    v12 = a3[1];\n    s = a3 + 1;\n  }\nLABEL_9:\n  v13 = v12 == 58;\n  v14 = 0;\n  if ( !v13 )\n    v14 = v123;\n  v124 = v14;\n  if ( !v11 || !*v11 )\n  {\n    v26 = *a7;\n    if ( a7[13] > *a7 )\n      a7[13] = v26;\n    if ( v26 < a7[12] )\n      a7[12] = v26;\n    if ( a7[10] == 1 )\n    {\n      v32 = a7[13];\n      if ( a7[12] == v32 )\n      {\n        if ( v26 != v32 )\n        {\n          a7[12] = v26;\n          v32 = v26;\n        }\n      }\n      else if ( v26 != v32 )\n      {\n        sub_409F50(a2, a7);\n        v32 = *a7;\n      }\n      if ( a1 <= v32 )\n      {\nLABEL_117:\n        v26 = v32;\n      }\n      else\n      {\n        v33 = v32;\n        while ( 1 )\n        {\n          v34 = (_BYTE *)v125[v33];\n          v35 = v33;\n          v32 = v33;\n          if ( *v34 == 45 )\n          {\n            if ( v34[1] )\n              break;\n          }\n          v32 = ++v33;\n          *a7 = v35 + 1;\n          if ( a1 <= (int)v33 )\n            goto LABEL_117;\n        }\n        v26 = *a7;\n      }\n      a7[13] = v32;\n    }\n    if ( a1 == v26 )\n    {\n      v10 = a7[13];\n      v28 = a7[12];\nLABEL_51:\n      if ( v28 != v10 )\n        *a7 = v28;\n      return (unsigned int)-1;\n    }\n    v27 = (_BYTE *)v125[v26];\n    if ( !strcmp((const char *)v125[v26], (const char *)&unk_40F291) )\n    {\n      v28 = a7[12];\n      v29 = a7[13];\n      v30 = v26 + 1;\n      *a7 = v30;\n      if ( v28 == v29 )\n      {\n        a7[12] = v30;\n        v28 = v30;\n      }\n      else if ( v30 != v29 )\n      {\n        sub_409F50((__int64)v125, a7);\n        v28 = a7[12];\n      }\n      a7[13] = a1;\n      *a7 = a1;\n      goto LABEL_51;\n    }\n    if ( *v27 == 45 )\n    {\n      v36 = v27[1];\n      if ( v36 )\n      {\n        v11 = &v27[(v130 != 0LL && v36 == 45) + 1];\n        *((_QWORD *)a7 + 4) = v11;\n        goto LABEL_13;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v27;\n      v20 = 1;\n      *a7 = v26 + 1;\n      return v20;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_13:\n  if ( !v130 )\n    goto LABEL_18;\n  v15 = *a7;\n  v16 = v15;\n  v17 = v125[v15];\n  if ( *(_BYTE *)(v17 + 1) != 45 )\n  {\n    if ( !v132 )\n      goto LABEL_18;\n    if ( !*(_BYTE *)(v17 + 2) )\n    {\n      v133 = v16;\n      v126 = v11;\n      v18 = strchr(s, *(char *)(v17 + 1));\n      v11 = v126;\n      v16 = v133;\n      if ( v18 )\n        goto LABEL_18;\n    }\n  }\n  v45 = v11;\n  if ( *v11 && *v11 != 61 )\n  {\n    do\n      ++v45;\n    while ( *v45 && *v45 != 61 );\n    v46 = (_DWORD)v45 - (_DWORD)v11;\n    v135 = (_DWORD)v45 - (_DWORD)v11;\n  }\n  else\n  {\n    v135 = 0;\n    v46 = 0;\n  }\n  v47 = v130;\n  v48 = *v130;\n  if ( !*v130 )\n  {\nLABEL_134:\n    if ( v132 )\n    {\n      v63 = (char *)v125[(int)v16];\n      if ( v63[1] != 45 )\n      {\n        v136 = v16;\n        v129 = (_BYTE *)*((_QWORD *)a7 + 4);\n        v64 = strchr(s, **((char **)a7 + 4));\n        v11 = v129;\n        LODWORD(v16) = v136;\n        if ( v64 )\n        {\nLABEL_18:\n          v19 = v11 + 1;\n          v127 = v11;\n          *((_QWORD *)a7 + 4) = v11 + 1;\n          v20 = (char)*v11;\n          v21 = *v11;\n          v22 = strchr(s, v20);\n          if ( !v127[1] )\n            ++*a7;\n          if ( (unsigned __int8)(v21 - 58) <= 1u || !v22 )\n          {\n            if ( v124 )\n            {\n              v75 = *v125;\n              v76 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n              fprintf(stderr, v76, v75, v20);\n            }\n            a7[2] = v20;\n            return 63;\n          }\n          v23 = v22[1];\n          if ( *v22 != 87 || v23 != 59 )\n          {\n            if ( v23 == 58 )\n            {\n              v24 = v127[1];\n              if ( v22[2] == 58 )\n              {\n                if ( v24 )\n                {\n                  *((_QWORD *)a7 + 2) = v19;\n                  ++*a7;\n                }\n                else\n                {\n                  *((_QWORD *)a7 + 2) = 0LL;\n                }\n              }\n              else\n              {\n                v25 = *a7;\n                if ( v24 )\n                {\n                  *((_QWORD *)a7 + 2) = v19;\n                  *a7 = v25 + 1;\n                }\n                else if ( v10 == (_DWORD)v25 )\n                {\n                  if ( v124 )\n                  {\n                    v103 = *v125;\n                    v104 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n                    fprintf(stderr, v104, v103, v20);\n                  }\n                  a7[2] = v20;\n                  v20 = 5 * (*s != 58) + 58;\n                }\n                else\n                {\n                  *a7 = v25 + 1;\n                  *((_QWORD *)a7 + 2) = v125[v25];\n                }\n              }\n              *((_QWORD *)a7 + 4) = 0LL;\n            }\n            return v20;\n          }\n          if ( !v130 )\n            goto LABEL_204;\n          v37 = *a7;\n          if ( v127[1] )\n          {\n            *((_QWORD *)a7 + 2) = v19;\n            *a7 = v37 + 1;\n          }\n          else\n          {\n            if ( v10 == (_DWORD)v37 )\n            {\n              if ( v124 )\n              {\n                v112 = *v125;\n                v113 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n                fprintf(stderr, v113, v112, v20);\n              }\n              a7[2] = v20;\n              return 5 * (unsigned int)(*s != 58) + 58;\n            }\n            *a7 = v37 + 1;\n            v19 = (const char *)v125[v37];\n            *((_QWORD *)a7 + 2) = v19;\n          }\n          *((_QWORD *)a7 + 4) = v19;\n          v38 = *v19;\n          for ( i = v19; *i; v38 = *++i )\n          {\n            if ( v38 == 61 )\n              break;\n          }\n          if ( !*v130 )\n          {\nLABEL_204:\n            *((_QWORD *)v8 + 4) = 0LL;\n            return 87;\n          }\n          v142 = v38;\n          v138 = i;\n          v40 = 0;\n          v140 = v10;\n          v41 = i - v19;\n          v42 = v130;\n          v43 = *v130;\n          v44 = 0LL;\n          v134 = 0;\n          v131 = 0;\n          do\n          {\n            if ( !strncmp(v43, v19, v41) )\n            {\n              if ( (unsigned int)v41 == strlen(v43) )\n              {\n                v96 = v40;\n                v97 = v42;\n                v90 = v138;\n                v89 = v142;\n                v91 = v140;\n                v8 = a7;\n                v134 = v96;\n                v44 = v97;\n                goto LABEL_174;\n              }\n              if ( v44 )\n              {\n                if ( v132 || *((_DWORD *)v44 + 2) != *((_DWORD *)v42 + 2) || v44[2] != v42[2] )\n                {\n                  v131 = 1;\n                }\n                else\n                {\n                  v88 = 1;\n                  if ( *((_DWORD *)v44 + 6) == *((_DWORD *)v42 + 6) )\n                    v88 = v131;\n                  v131 = v88;\n                }\n              }\n              else\n              {\n                v134 = v40;\n                v44 = v42;\n              }\n            }\n            v42 += 4;\n            v43 = *v42;\n            ++v40;\n          }\n          while ( *v42 );\n          v89 = v142;\n          v90 = v138;\n          v91 = v140;\n          v8 = a7;\n          if ( v131 )\n          {\n            if ( v124 )\n            {\n              v110 = *v125;\n              v111 = dcgettext(0LL, \"%s: option '-W %s' is ambiguous\\n\", 5);\n              fprintf(stderr, v111, v110, v19);\n              v19 = (const char *)*((_QWORD *)a7 + 4);\n            }\n            v20 = 63;\n            v102 = strlen(v19);\n            ++*a7;\n            *((_QWORD *)a7 + 4) = &v19[v102];\n            return v20;\n          }\n          if ( !v44 )\n            goto LABEL_204;\nLABEL_174:\n          v92 = *((_DWORD *)v44 + 2);\n          if ( v89 )\n          {\n            if ( !v92 )\n            {\n              if ( v124 )\n              {\n                v114 = *v44;\n                v115 = *v125;\n                v116 = dcgettext(0LL, \"%s: option '-W %s' doesn't allow an argument\\n\", 5);\n                fprintf(stderr, v116, v115, v114);\n                v19 = (const char *)*((_QWORD *)v8 + 4);\n              }\n              v20 = 63;\n              *((_QWORD *)v8 + 4) = &v19[strlen(v19)];\n              return v20;\n            }\n            *((_QWORD *)v8 + 2) = v90 + 1;\n            goto LABEL_177;\n          }\n          if ( v92 != 1 )\n          {\n            *((_QWORD *)v8 + 2) = 0LL;\n            goto LABEL_177;\n          }\n          v105 = *v8;\n          if ( (int)v105 < v91 )\n          {\n            *v8 = v105 + 1;\n            *((_QWORD *)v8 + 2) = v125[v105];\nLABEL_177:\n            *((_QWORD *)v8 + 4) = &v19[strlen(v19)];\n            if ( v137 )\n              *v137 = v134;\n            v59 = (unsigned int *)v44[2];\n            v20 = *((_DWORD *)v44 + 6);\n            if ( v59 )\n              goto LABEL_116;\n            return v20;\n          }\n          if ( v124 )\n          {\n            v117 = *v44;\n            v118 = *v125;\n            v119 = dcgettext(0LL, \"%s: option '-W %s' requires an argument\\n\", 5);\n            fprintf(stderr, v119, v118, v117);\n          }\n          *((_QWORD *)v8 + 4) += strlen(*((const char **)v8 + 4));\n          if ( *s != 58 )\n            return 63;\n          return 58;\n        }\n        if ( !v124 )\n        {\nLABEL_139:\n          v20 = 63;\n          *((_QWORD *)a7 + 4) = \"\";\n          *a7 = v16 + 1;\n          a7[2] = 0;\n          return v20;\n        }\nLABEL_138:\n        v65 = *v63;\n        sa = v11;\n        v66 = *v125;\n        v67 = dcgettext(0LL, \"%s: unrecognized option '%c%s'\\n\", 5);\n        fprintf(stderr, v67, v66, v65, sa);\n        LODWORD(v16) = *a7;\n        goto LABEL_139;\n      }\n      if ( !v124 )\n        goto LABEL_139;\n      v93 = *((_QWORD *)a7 + 4);\n    }\n    else\n    {\n      if ( !v124 )\n        goto LABEL_139;\n      v93 = *((_QWORD *)a7 + 4);\n      v63 = (char *)v125[v16];\n      v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n      if ( v63[1] != 45 )\n        goto LABEL_138;\n    }\n    v94 = *v125;\n    v95 = dcgettext(0LL, \"%s: unrecognized option '--%s'\\n\", 5);\n    fprintf(stderr, v95, v94, v93);\n    LODWORD(v16) = *a7;\n    goto LABEL_139;\n  }\n  v141 = v45;\n  v49 = 0LL;\n  v144 = a1;\n  v50 = v11;\n  v51 = v46;\n  v52 = 0;\n  v139 = -1;\n  v143 = 0;\n  v128 = 0LL;\n  while ( 1 )\n  {\n    if ( strncmp(v48, v50, v51) )\n      goto LABEL_101;\n    if ( v135 == (unsigned int)strlen(v48) )\n    {\n      v60 = v52;\n      v54 = v141;\n      v10 = v144;\n      if ( v143 || v49 )\n      {\n        v61 = (_QWORD *)v49;\n        if ( v49 )\n        {\n          do\n          {\n            v62 = (_QWORD *)v61[1];\n            free(v61);\n            v61 = v62;\n          }\n          while ( v62 );\n        }\n      }\n      LODWORD(v16) = *a7;\n      v139 = v60;\n      v128 = v47;\n      goto LABEL_110;\n    }\n    if ( !v128 )\n      break;\n    if ( !v143 )\n    {\n      if ( v132\n        || *((_DWORD *)v128 + 2) != *((_DWORD *)v47 + 2)\n        || v128[2] != v47[2]\n        || *((_DWORD *)v128 + 6) != *((_DWORD *)v47 + 6) )\n      {\n        v53 = malloc(0x10uLL);\n        if ( v53 )\n        {\n          *v53 = v47;\n          v53[1] = v49;\n          v49 = (__int64)v53;\n        }\n        else\n        {\n          if ( v49 )\n          {\n            v74 = (void *)v49;\n            do\n            {\n              v49 = *(_QWORD *)(v49 + 8);\n              free(v74);\n              v74 = (void *)v49;\n            }\n            while ( v49 );\n          }\n          v143 = 1;\n        }\n      }\n      else\n      {\n        v143 = 0;\n      }\n    }\nLABEL_101:\n    v47 += 4;\n    v48 = *v47;\n    ++v52;\n    if ( !*v47 )\n      goto LABEL_107;\nLABEL_102:\n    v50 = (const char *)*((_QWORD *)a7 + 4);\n  }\n  v128 = v47;\n  v47 += 4;\n  v48 = *v47;\n  v139 = v52++;\n  if ( *v47 )\n    goto LABEL_102;\nLABEL_107:\n  v54 = v141;\n  v10 = v144;\n  v55 = v49 != 0;\n  v16 = *a7;\n  if ( (_BYTE)v143 || v55 )\n  {\n    if ( v124 )\n    {\n      if ( v55 )\n      {\n        v146 = v49;\n        v77 = v125[v16];\n        v78 = *v125;\n        v79 = dcgettext(0LL, \"%s: option '%s' is ambiguous; possibilities:\", 5);\n        fprintf(stderr, v79, v78, v77);\n        v80 = &v145;\n        for ( j = v128; ; j = *(const char ***)v80 )\n        {\n          fprintf(stderr, \" '--%s'\", *j);\n          v80 = (char *)*((_QWORD *)v80 + 1);\n          if ( !v80 )\n            break;\n        }\n        fputc(10, stderr);\n        goto LABEL_161;\n      }\n      if ( (_BYTE)v143 )\n      {\n        v98 = v125[v16];\n        v99 = *v125;\n        v100 = dcgettext(0LL, \"%s: option '%s' is ambiguous\\n\", 5);\n        fprintf(stderr, v100, v99, v98);\nLABEL_161:\n        v82 = *((_QWORD *)a7 + 4);\n        v83 = strlen(*((const char **)a7 + 4));\n        ++*a7;\n        a7[2] = 0;\n        *((_QWORD *)a7 + 4) = v83 + v82;\n        return 63;\n      }\n    }\n    v84 = *((_QWORD *)a7 + 4);\n    sb = *a7;\n    v85 = strlen(*((const char **)a7 + 4));\n    a7[2] = 0;\n    *((_QWORD *)a7 + 4) = v85 + v84;\n    *a7 = sb + 1;\n    if ( v49 )\n    {\n      v86 = (_QWORD *)v49;\n      do\n      {\n        v87 = (_QWORD *)v86[1];\n        free(v86);\n        v86 = v87;\n      }\n      while ( v87 );\n    }\n    return 63;\n  }\n  if ( !v128 )\n    goto LABEL_134;\nLABEL_110:\n  v56 = v16 + 1;\n  *a7 = v16 + 1;\n  v57 = *((_DWORD *)v128 + 2);\n  if ( !*v54 )\n  {\n    if ( v57 != 1 )\n      goto LABEL_113;\n    if ( v56 < v10 )\n    {\n      *a7 = v16 + 2;\n      *((_QWORD *)a7 + 2) = v125[v56];\n      goto LABEL_113;\n    }\n    if ( v124 )\n    {\n      v107 = *v128;\n      v108 = *v125;\n      v109 = dcgettext(0LL, \"%s: option '--%s' requires an argument\\n\", 5);\n      fprintf(stderr, v109, v108, v107);\n    }\n    v101 = *((_QWORD *)a7 + 4);\n    *((_QWORD *)a7 + 4) = strlen(*((const char **)a7 + 4)) + v101;\n    a7[2] = *((_DWORD *)v128 + 6);\n    if ( *s == 58 )\n      return 58;\n    return 63;\n  }\n  if ( v57 )\n  {\n    *((_QWORD *)a7 + 2) = v54 + 1;\nLABEL_113:\n    v58 = *((_QWORD *)a7 + 4);\n    *((_QWORD *)a7 + 4) = strlen(*((const char **)a7 + 4)) + v58;\n    if ( v137 )\n      *v137 = v139;\n    v59 = (unsigned int *)v128[2];\n    v20 = *((_DWORD *)v128 + 6);\n    if ( v59 )\n    {\nLABEL_116:\n      *v59 = v20;\n      v20 = 0;\n    }\n  }\n  else\n  {\n    if ( v124 )\n    {\n      v68 = (char *)v125[v56 - 1];\n      v69 = *v128;\n      v70 = *v125;\n      if ( v68[1] == 45 )\n      {\n        v106 = dcgettext(0LL, \"%s: option '--%s' doesn't allow an argument\\n\", 5);\n        fprintf(stderr, v106, v70, v69);\n      }\n      else\n      {\n        v71 = *v68;\n        v72 = dcgettext(0LL, \"%s: option '%c%s' doesn't allow an argument\\n\", 5);\n        fprintf(stderr, v72, v70, v71, v69);\n      }\n    }\n    v73 = *((_QWORD *)a7 + 4);\n    v20 = 63;\n    *((_QWORD *)a7 + 4) = strlen(*((const char **)a7 + 4)) + v73;\n    a7[2] = *((_DWORD *)v128 + 6);\n  }\n  return v20;\n}\n", 
            "funcStartAddr": "0x40a030L", 
            "funcEndAddr": "0x40b063L", 
            "funcName": "sub_40A030"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B070(int a1, __int64 a2, char *a3, const char **a4, int *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_612680 = dword_61233C;\n  dword_612684 = dword_612338;\n  result = sub_40A030(a1, a2, a3, a4, a5, a6, &dword_612680, a7);\n  dword_61233C = dword_612680;\n  name = (char *)qword_612690;\n  dword_612334 = dword_612688;\n  return result;\n}\n", 
            "funcStartAddr": "0x40b070L", 
            "funcEndAddr": "0x40b0c6L", 
            "funcName": "sub_40B070"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B0D0(int a1, __int64 a2, char *a3)\n{\n  return sub_40B070(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x40b0d0L", 
            "funcEndAddr": "0x40b0e8L", 
            "funcName": "sub_40B0D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B0F0(int a1, __int64 a2, char *a3, const char **a4, int *a5)\n{\n  return sub_40B070(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x40b0f0L", 
            "funcEndAddr": "0x40b103L", 
            "funcName": "sub_40B0F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B110(int a1, __int64 a2, char *a3, const char **a4, int *a5, int *a6)\n{\n  return sub_40A030(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x40b110L", 
            "funcEndAddr": "0x40b125L", 
            "funcName": "sub_40B110"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B130(int a1, __int64 a2, char *a3, const char **a4, int *a5)\n{\n  return sub_40B070(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x40b130L", 
            "funcEndAddr": "0x40b146L", 
            "funcName": "sub_40B130"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B150(int a1, __int64 a2, char *a3, const char **a4, int *a5, int *a6)\n{\n  return sub_40A030(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x40b150L", 
            "funcEndAddr": "0x40b168L", 
            "funcName": "sub_40B150"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_40B170(wchar_t *a1, const char *a2, size_t a3, mbstate_t *a4)\n{\n  if ( a2 )\n  {\n    if ( !a3 )\n      return -2LL;\n  }\n  else\n  {\n    a3 = 1LL;\n    a2 = \"\";\n    a1 = 0LL;\n  }\n  return mbrtowc(a1, a2, a3, a4);\n}\n", 
            "funcStartAddr": "0x40b170L", 
            "funcEndAddr": "0x40b199L", 
            "funcName": "sub_40B170"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40B1A0(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax\n  __int64 v4; // r9\n  __int64 v5; // rcx\n  _BYTE *v6; // rdi\n\n  if ( !a3 )\n    return 0LL;\n  if ( (unsigned __int8)a1 & 7 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( !((unsigned __int8)a1 & 7) )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && !(((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( ((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = (__int64)(a1 + 1);\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = (_BYTE *)v5;\n      if ( (_BYTE *)v5 == v6 )\n        break;\n      if ( *(_BYTE *)(++v5 - 1) == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x40b1a0L", 
            "funcEndAddr": "0x40b2a4L", 
            "funcName": "sub_40B1A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40B2B0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebp\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = ferror(stream);\n  result = fclose(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n  }\n  else\n  {\n    if ( !result )\n      return result;\n    if ( !v1 )\n      return -(*__errno_location() != 9);\n  }\n  return -1;\n}\n", 
            "funcStartAddr": "0x40b2b0L", 
            "funcEndAddr": "0x40b315L", 
            "funcName": "sub_40B2B0"
        }, 
        {
            "decompiledFuncCode": "const char *sub_40B320()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                fclose(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            fclose(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 116LL;\n      v9 = 102LL;\n      v10 = 101LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x40b320L", 
            "funcEndAddr": "0x40b882L", 
            "funcName": "sub_40B320"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B890(__int64 a1)\n{\n  bool v1; // cf\n  size_t v2; // rdi\n  __int64 *v3; // rax\n  __int64 v4; // rcx\n  __int64 *v5; // rsi\n  unsigned __int64 v6; // rax\n  unsigned __int64 v7; // rdx\n  __int64 v8; // rax\n\n  v1 = __CFADD__(a1, 16LL);\n  v2 = a1 + 16;\n  if ( v1 )\n    return 0LL;\n  v3 = (__int64 *)malloc(v2);\n  v4 = 0LL;\n  v5 = v3;\n  if ( v3 )\n  {\n    *((_DWORD *)v3 + 3) = 336984906;\n    v4 = (__int64)(v3 + 2);\n    v6 = (unsigned __int64)(v3 + 2) % 0x101;\n    v7 = v6;\n    v8 = qword_6126C0[v6];\n    qword_6126C0[v7] = v4;\n    *v5 = v8;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40b890L", 
            "funcEndAddr": "0x40b8fcL", 
            "funcName": "sub_40B890"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B900(unsigned __int64 a1)\n{\n  __int64 v1; // rcx\n  __int64 v2; // rax\n  __int64 *v3; // rcx\n\n  if ( a1 )\n  {\n    if ( *(_DWORD *)(a1 - 4) == 336984906 )\n    {\n      v1 = qword_6126C0[a1 % 0x101];\n      if ( v1 )\n      {\n        if ( v1 == a1 )\n        {\n          v3 = &qword_6126C0[a1 % 0x101];\nLABEL_12:\n          *v3 = *(_QWORD *)(a1 - 16);\n          free((void *)(a1 - 16));\n        }\n        else\n        {\n          while ( 1 )\n          {\n            v2 = *(_QWORD *)(v1 - 16);\n            if ( !v2 )\n              break;\n            if ( a1 == v2 )\n            {\n              v3 = (__int64 *)(v1 - 16);\n              goto LABEL_12;\n            }\n            v1 = *(_QWORD *)(v1 - 16);\n          }\n        }\n      }\n    }\n  }\n}\n", 
            "funcStartAddr": "0x40b900L", 
            "funcEndAddr": "0x40b986L", 
            "funcName": "sub_40B900"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B9C0(__int64 a1, const void **a2)\n{\n  const void **v2; // rbx\n  __int64 v3; // rax\n  const void *v4; // rsi\n  size_t v5; // rdx\n  __int64 result; // rax\n  void *v7; // rax\n\n  v2 = a2;\n  v3 = (__int64)(a2 + 3);\n  v4 = *a2;\n  v5 = (size_t)v2[1];\n  if ( v4 == (const void *)v3 )\n  {\n    v7 = memcpy((void *)(a1 + 24), v4, v5);\n    v5 = (size_t)v2[1];\n    *(_QWORD *)a1 = v7;\n  }\n  else\n  {\n    *(_QWORD *)a1 = v4;\n  }\n  result = *((unsigned __int8 *)v2 + 16);\n  *(_QWORD *)(a1 + 8) = v5;\n  *(_BYTE *)(a1 + 16) = result;\n  if ( (_BYTE)result )\n  {\n    result = *((unsigned int *)v2 + 5);\n    *(_DWORD *)(a1 + 20) = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b9c0L", 
            "funcEndAddr": "0x40ba16L", 
            "funcName": "sub_40B9C0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_40BA40(char *s)\n{\n  __int64 v1; // rbx\n  int v3; // eax\n  __int64 v4; // rax\n  char *v5; // rbp\n  __int64 v6; // rax\n  size_t v7; // rax\n  size_t v8; // rax\n  char v9; // [rsp+0h] [rbp-58h]\n  mbstate_t ps; // [rsp+4h] [rbp-54h]\n  char i; // [rsp+Ch] [rbp-4Ch]\n  char *sa; // [rsp+10h] [rbp-48h]\n  size_t v13; // [rsp+18h] [rbp-40h]\n  char v14; // [rsp+20h] [rbp-38h]\n  int v15; // [rsp+24h] [rbp-34h]\n\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    sa = s;\n    v1 = 0LL;\n    v9 = 0;\n    ps = 0LL;\n    for ( i = 0; ; i = 0 )\n    {\n      if ( !v9 )\n      {\n        if ( ((unsigned int)dword_40F520[((unsigned __int8)*sa >> 5) & 7] >> *sa) & 1 )\n        {\n          v13 = 1LL;\n          v3 = *sa;\n          v14 = 1;\n          v15 = v3;\n          goto LABEL_7;\n        }\n        if ( !mbsinit(&ps) )\n          __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n        v9 = 1;\n      }\n      v4 = __ctype_get_mb_cur_max();\n      v5 = sa;\n      v6 = sub_409040((__int64)sa, v4);\n      v7 = sub_40B170(&v15, v5, v6, &ps);\n      v13 = v7;\n      switch ( v7 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          v13 = 1LL;\n          v14 = 0;\n          goto LABEL_8;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v8 = strlen(sa);\n          v14 = 0;\n          v13 = v8;\n          goto LABEL_8;\n        case 0uLL:\n          v13 = 1LL;\n          if ( *sa )\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          if ( v15 )\n            __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n          break;\n      }\n      v14 = 1;\n      if ( mbsinit(&ps) )\n        v9 = 0;\nLABEL_7:\n      if ( !v15 )\n        return v1;\nLABEL_8:\n      sa += v13;\n      ++v1;\n    }\n  }\n  return strlen(s);\n}\n", 
            "funcStartAddr": "0x40ba40L", 
            "funcEndAddr": "0x40bc0cL", 
            "funcName": "sub_40BA40"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x40bc10L", 
            "funcEndAddr": "0x40bc6dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x40bc70L", 
            "funcEndAddr": "0x40bc71L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40BC80(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_6122A8 )\n    v1 = (void *)unk_6122A8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x40bc80L", 
            "funcEndAddr": "0x40bc98L", 
            "funcName": "sub_40BC80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BC98(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_611E30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x40bc98L", 
            "funcEndAddr": "0x40bcb8L", 
            "funcName": "sub_40BC98"
        }
    ], 
    "binaryInfo": {
        "binaryName": "findutils_strip-4.6.0_gcc-8.2.0_x86_64_O2_xargs.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 111, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}