{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  unsigned __int64 v3; // rbp\n  char **v4; // rbx\n  __int64 v5; // rsi\n  __int64 v6; // rdi\n  int v7; // eax\n  int v8; // ebp\n  unsigned __int64 v9; // rcx\n  size_t v10; // rdx\n  __int64 v11; // rax\n  unsigned __int64 v12; // r14\n  __int64 v13; // r13\n  char *v14; // r12\n  const __int32_t **v15; // rax\n  __int64 i; // rdx\n  __int32_t v17; // ecx\n  __int64 v18; // rdi\n  __int64 v19; // rax\n  unsigned __int8 *v20; // rbx\n  unsigned __int8 *v21; // r12\n  unsigned __int8 *v22; // r15\n  const unsigned __int16 *v23; // rax\n  unsigned __int8 *v24; // rdx\n  unsigned __int8 *v25; // r14\n  __int64 v26; // rax\n  const unsigned __int16 *v27; // rax\n  __int64 v28; // rax\n  unsigned __int8 *v29; // r12\n  __int64 v30; // rax\n  unsigned __int8 *v31; // r13\n  unsigned __int64 v32; // rcx\n  __int64 v33; // rdi\n  __m128i v34; // xmm0\n  __int64 v35; // rsi\n  __int64 v36; // rax\n  __int64 v37; // rdx\n  const unsigned __int16 **v38; // rax\n  __int64 v39; // rdx\n  const unsigned __int16 *v40; // rcx\n  unsigned __int16 v41; // ax\n  const char *v42; // rdx\n  __int64 v43; // rax\n  __int64 l; // rax\n  __int64 v45; // rdx\n  unsigned __int64 v46; // rcx\n  unsigned __int64 v47; // r9\n  unsigned __int64 v48; // rbx\n  __int64 v49; // rax\n  unsigned __int8 *v50; // r15\n  unsigned __int64 v51; // rbx\n  unsigned __int64 *v52; // rax\n  unsigned __int64 v53; // r13\n  unsigned __int64 v54; // r12\n  __int64 v55; // rax\n  char *v56; // r13\n  int v57; // er12\n  __int64 v58; // r14\n  int v59; // eax\n  __int64 v60; // rbx\n  char *v61; // rax\n  const unsigned __int16 **v62; // rax\n  const unsigned __int16 *v63; // rax\n  __int64 v64; // r9\n  unsigned __int8 *v65; // r10\n  unsigned __int64 v66; // rsi\n  char v67; // al\n  char v68; // bp\n  unsigned __int64 v69; // rcx\n  unsigned __int8 *v70; // r8\n  __int64 v71; // r12\n  unsigned __int8 *v72; // r13\n  unsigned __int64 v73; // r14\n  unsigned __int8 *v74; // rbx\n  const unsigned __int16 **v75; // rax\n  const unsigned __int16 *v76; // rax\n  unsigned __int64 v77; // rcx\n  void *v78; // rax\n  unsigned __int8 *v79; // rdi\n  char v80; // cl\n  unsigned __int64 v81; // r12\n  unsigned __int8 *v82; // rbp\n  __int64 v83; // rbx\n  char v84; // al\n  unsigned __int8 *v85; // r14\n  const unsigned __int16 *v86; // rdx\n  unsigned __int8 *v87; // rax\n  __int64 v88; // rdx\n  void *v89; // rdi\n  unsigned __int8 *v90; // rcx\n  unsigned __int8 *v91; // rax\n  __int64 v92; // rdx\n  __int64 v93; // rax\n  unsigned __int64 k; // rbx\n  __int64 v95; // r8\n  int v96; // edx\n  const char *v97; // rdi\n  signed __int64 v98; // rax\n  __int64 v99; // rdi\n  const unsigned __int16 **v100; // rax\n  __int64 j; // rcx\n  unsigned __int16 v102; // dx\n  bool v103; // al\n  __int64 v104; // rdx\n  char v105; // al\n  __int64 v106; // rdx\n  unsigned __int8 *v107; // r14\n  __int64 v108; // rax\n  char v109; // si\n  __int64 v110; // r11\n  unsigned __int64 v111; // rdx\n  unsigned __int8 *v112; // rsi\n  unsigned __int64 v113; // rax\n  __int64 v114; // rax\n  __int64 v115; // rax\n  unsigned __int8 *v116; // rax\n  char v117; // cl\n  __int64 v118; // r11\n  __int64 v119; // rsi\n  unsigned __int8 *v120; // r15\n  char v121; // cl\n  unsigned __int64 v122; // rdx\n  __int64 v123; // rax\n  unsigned __int8 *v124; // rax\n  __int64 v125; // rcx\n  unsigned __int64 v126; // rax\n  char v127; // r8\n  __int64 v128; // r12\n  __int64 v129; // rax\n  char v130; // si\n  __int64 v131; // rax\n  unsigned __int64 v132; // rax\n  char v133; // si\n  char v134; // cl\n  __int64 v135; // rdx\n  const char *v136; // rsi\n  __int64 v137; // rbx\n  char *v138; // rax\n  char *v139; // rax\n  unsigned __int8 *v140; // rbx\n  __int64 v141; // r12\n  __int64 v142; // r13\n  __int64 v143; // rax\n  char *v144; // rax\n  char *v145; // rax\n  char *v146; // rax\n  char *v147; // rax\n  unsigned __int8 *v149; // rax\n  __int64 v150; // rcx\n  char *v151; // rax\n  _IO_FILE *v152; // rdi\n  char *v153; // rax\n  __int64 v154; // rdi\n  __int64 v155; // rax\n  __int64 v156; // rcx\n  __int64 v157; // rdx\n  char *v158; // rax\n  char *v159; // rax\n  char *v160; // rax\n  char *v161; // rax\n  char *v162; // rax\n  __int64 v163; // rdi\n  __int64 v164; // rax\n  __int64 v165; // rsi\n  __int64 v166; // rdi\n  __int64 v167; // rax\n  __int64 v168; // rdi\n  __int64 v169; // rax\n  __int64 v170; // rax\n  __int64 v171; // rbx\n  char *v172; // rax\n  __int64 v173; // rbx\n  int *v174; // rax\n  __int64 v175; // rbx\n  char *v176; // rax\n  __int64 v177; // rbx\n  char *v178; // rax\n  char v179; // [rsp+8h] [rbp-C0h]\n  size_t v180; // [rsp+8h] [rbp-C0h]\n  __int64 v181; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 *v182; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 *v183; // [rsp+18h] [rbp-B0h]\n  __int64 v184; // [rsp+20h] [rbp-A8h]\n  unsigned __int64 v185; // [rsp+28h] [rbp-A0h]\n  unsigned __int8 *v186; // [rsp+30h] [rbp-98h]\n  size_t v187; // [rsp+38h] [rbp-90h]\n  unsigned __int8 *v188; // [rsp+48h] [rbp-80h]\n  __int64 v189; // [rsp+50h] [rbp-78h]\n  __int64 v190; // [rsp+60h] [rbp-68h]\n  __int64 v191; // [rsp+68h] [rbp-60h]\n  void *ptr[2]; // [rsp+70h] [rbp-58h]\n\n  v3 = a1;\n  v4 = a2;\n  sub_405B60(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_41B410(sub_4058C0);\n  while ( 1 )\n  {\n    v5 = (__int64)v4;\n    v6 = (unsigned int)v3;\n    v7 = sub_40AAD0((unsigned int)v3, v4, \"AF:GM:ORS:TW:b:i:fg:o:trw:\", &off_41BFC0, 0LL);\n    if ( v7 == -1 )\n      break;\n    if ( v7 == 83 )\n    {\n      qword_6239A0 = sub_404780(nptr);\n    }\n    else if ( v7 <= 83 )\n    {\n      if ( v7 == 70 )\n      {\n        s = (char *)sub_404780(nptr);\n      }\n      else if ( v7 <= 70 )\n      {\n        if ( v7 == -130 )\n          sub_405120(0);\n        if ( v7 <= -130 )\n        {\n          if ( v7 == -131 )\n          {\n            sub_406550(\"F. Pinard\", aFran);\n            sub_409020((char)stdout);\n            exit(0);\n          }\nLABEL_175:\n          sub_405120(1);\n        }\n        if ( v7 == 10 )\n        {\n          dword_623B04 = dword_41BF90[sub_4057E0(\"--format\", nptr, off_41BFA0, dword_41BF90, 4LL, off_6232E0)];\n        }\n        else\n        {\n          if ( v7 != 65 )\n            goto LABEL_175;\n          byte_623B0A = 1;\n        }\n      }\n      else if ( v7 == 77 )\n      {\n        off_6232B0 = nptr;\n      }\n      else if ( v7 <= 77 )\n      {\n        if ( v7 != 71 )\n          goto LABEL_175;\n        byte_6232D0 = 0;\n      }\n      else if ( v7 == 79 )\n      {\n        dword_623B04 = 2;\n      }\n      else\n      {\n        if ( v7 != 82 )\n          goto LABEL_175;\n        byte_623B08 = 1;\n      }\n    }\n    else if ( v7 == 103 )\n    {\n      if ( (unsigned int)sub_409470(nptr) || (__int64)ptr[0] <= 0 )\n      {\n        v175 = sub_408350(nptr);\n        v176 = dcgettext(0LL, \"invalid gap width: %s\", 5);\n        error(1, 0, v176, v175);\nLABEL_528:\n        v177 = sub_408350(nptr);\n        v178 = dcgettext(0LL, \"invalid line width: %s\", 5);\n        error(1, 0, v178, v177);\n        start();\n      }\n      qword_6232C0 = (__int64)ptr[0];\n    }\n    else if ( v7 <= 103 )\n    {\n      if ( v7 == 87 )\n      {\n        qword_623840 = sub_404780(nptr);\n        if ( !*(_BYTE *)qword_623840 )\n          qword_623840 = 0LL;\n      }\n      else if ( v7 <= 87 )\n      {\n        if ( v7 != 84 )\n          goto LABEL_175;\n        dword_623B04 = 3;\n      }\n      else if ( v7 == 98 )\n      {\n        qword_623AF8 = (__int64)nptr;\n      }\n      else\n      {\n        if ( v7 != 102 )\n          goto LABEL_175;\n        byte_623B00 = 1;\n      }\n    }\n    else if ( v7 == 114 )\n    {\n      byte_623B09 = 1;\n    }\n    else if ( v7 > 114 )\n    {\n      if ( v7 != 116 )\n      {\n        if ( v7 != 119 )\n          goto LABEL_175;\n        if ( (unsigned int)sub_409470(nptr) || (__int64)ptr[0] <= 0 )\n          goto LABEL_528;\n        qword_6232C8 = (__int64)ptr[0];\n      }\n    }\n    else if ( v7 == 105 )\n    {\n      qword_623AE8 = (__int64)nptr;\n    }\n    else\n    {\n      if ( v7 != 111 )\n        goto LABEL_175;\n      qword_623AF0 = (__int64)nptr;\n    }\n  }\n  if ( dword_62335C == (_DWORD)v3 )\n  {\n    qword_623588 = sub_409160(8LL);\n    qword_623580 = sub_409160(8LL);\n    v93 = sub_409160(16LL);\n    dword_623598 = 1;\n    qword_623578 = v93;\n    *(_QWORD *)qword_623588 = 0LL;\n    goto LABEL_68;\n  }\n  if ( byte_6232D0 )\n  {\n    v8 = v3 - dword_62335C;\n    v9 = v8;\n    dword_623598 = v8;\n    v3 = 8LL;\n    v10 = (8 * (unsigned __int128)v9) >> 64 != 0;\n    if ( v9 & 0x1000000000000000LL\n      || (8 * (unsigned __int128)v9) >> 64 != 0\n      || (v6 = 8 * v9,\n          qword_623588 = sub_409160(8 * v9),\n          v10 = ((unsigned __int64)dword_623598 * (unsigned __int128)8uLL) >> 64 != 0,\n          dword_623598 & 0x1000000000000000LL)\n      || ((unsigned __int64)dword_623598 * (unsigned __int128)8uLL) >> 64 != 0\n      || (v11 = sub_409160(8LL * dword_623598),\n          v6 = dword_623598,\n          qword_623580 = v11,\n          v10 = ((unsigned __int64)dword_623598 * (unsigned __int128)0x10uLL) >> 64 != 0,\n          dword_623598 & 0x800000000000000LL)\n      || ((unsigned __int64)dword_623598 * (unsigned __int128)0x10uLL) >> 64 != 0 )\n    {\nLABEL_228:\n      sub_4093B0(v6, v5, v10);\n    }\n    qword_623578 = sub_409160(16LL * dword_623598);\n    if ( dword_623598 > 0 )\n    {\n      v12 = dword_62335C + (unsigned __int64)(unsigned int)(dword_623598 - 1) + 2;\n      v3 = dword_62335C + 1;\n      v13 = qword_623588 - 8LL * dword_62335C;\n      do\n      {\n        while ( 1 )\n        {\n          v14 = v4[v3 - 1];\n          if ( !*v14 || !strcmp(v4[v3 - 1], \"-\") )\n            break;\n          *(_QWORD *)(v13 + 8 * v3 - 8) = v14;\n          dword_62335C = v3++;\n          if ( v12 == v3 )\n            goto LABEL_68;\n        }\n        *(_QWORD *)(v13 + 8 * v3 - 8) = 0LL;\n        dword_62335C = v3++;\n      }\n      while ( v12 != v3 );\n    }\n    goto LABEL_68;\n  }\n  dword_623598 = 1;\n  qword_623588 = sub_409160(8LL);\n  qword_623580 = sub_409160(8LL);\n  qword_623578 = sub_409160(16LL);\n  v56 = v4[dword_62335C];\n  v57 = dword_62335C;\n  v58 = dword_62335C;\n  if ( !*v56 || !strcmp(v4[dword_62335C], \"-\") )\n    *(_QWORD *)qword_623588 = 0LL;\n  else\n    *(_QWORD *)qword_623588 = v56;\n  dword_62335C = v57 + 1;\n  if ( v57 + 1 >= (int)v3 )\n    goto LABEL_68;\n  if ( sub_4059B0(v4[v58 + 1], \"w\", stdout) )\n  {\n    v59 = dword_62335C + 1;\n    dword_62335C = v59;\n    if ( v59 < (int)v3 )\n    {\n      v60 = sub_408350(v4[v59]);\n      v61 = dcgettext(0LL, \"extra operand %s\", 5);\n      error(0, 0, v61, v60);\n      goto LABEL_175;\n    }\nLABEL_68:\n    if ( !dword_623B04 )\n      dword_623B04 = 2 - ((unsigned __int8)byte_6232D0 >= 1u);\n    if ( byte_623B00 )\n    {\n      v15 = __ctype_toupper_loc();\n      for ( i = 0LL; i != 256; byte_62373F[i] = v17 )\n        v17 = (*v15)[i++];\n    }\n    if ( qword_6239A0 )\n    {\n      if ( !*(_BYTE *)qword_6239A0 )\n      {\n        qword_6239A0 = 0LL;\n        goto LABEL_76;\n      }\n    }\n    else if ( !byte_6232D0 || byte_623B09 )\n    {\n      qword_6239A0 = (__int64)\"\\n\";\n    }\n    else\n    {\n      qword_6239A0 = (__int64)\"[.?!][]\\\"')}]*\\\\($\\\\|\\t\\\\|  \\\\)[ \\t\\n]*\";\n    }\n    sub_4049D0(&qword_6239A0);\nLABEL_76:\n    if ( qword_623840 )\n    {\n      sub_4049D0(&qword_623840);\n      v18 = qword_623AF8;\n      if ( !qword_623AF8 )\n        goto LABEL_78;\n      goto LABEL_238;\n    }\n    goto LABEL_237;\n  }\n  v173 = sub_4081D0(0LL, 3LL, v4[dword_62335C]);\n  v174 = __errno_location();\n  error(1, *v174, \"%s\", v173);\nLABEL_526:\n  v165 = 0LL;\nLABEL_489:\n  v166 = v164 - v165;\n  v167 = 0LL;\n  v168 = v166 - (v157 - v156);\n  if ( byte_6233B0 )\n    v167 = qword_623430;\n  sub_404A70(v168 - v167);\n  if ( byte_6233B0 )\n    fputs_unlocked(s, stdout);\n  sub_404AC0(qword_6233C0, qword_6233C8);\nLABEL_494:\n  if ( byte_623B0A )\n  {\nLABEL_446:\n    if ( byte_623B08 )\n    {\n      sub_404A70(qword_6232C0);\n      sub_404AC0(dest, qword_6233A8);\n    }\n    goto LABEL_401;\n  }\nLABEL_445:\n  if ( byte_623B09 )\n    goto LABEL_446;\nLABEL_401:\n  while ( 1 )\n  {\n    v147 = stdout->_IO_write_ptr;\n    if ( v147 >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, 10);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v147 + 1;\n      *v147 = 10;\n    }\nLABEL_403:\n    ++v184;\n    v183 += 6;\n    if ( v184 >= (__int64)nmemb )\n      return 0LL;\n    while ( 1 )\n    {\n      v45 = qword_623438;\n      v46 = *v183;\n      v47 = v183[2];\n      v48 = v183[3];\n      v49 = *((int *)v183 + 10);\n      v50 = (unsigned __int8 *)(*v183 + v183[1]);\n      qword_6233E0 = v46;\n      v51 = v46 + v48;\n      qword_6233E8 = (__int64)v50;\n      v52 = (unsigned __int64 *)(qword_623578 + 16 * v49);\n      v185 = v46 + v47;\n      v53 = *v52;\n      v54 = v52[1];\n      if ( (unsigned __int64)v50 >= v51 )\n      {\nLABEL_272:\n        v46 = qword_6233E0;\n        if ( (unsigned __int64)v50 <= qword_6233E0 + v45 )\n          qword_6233E8 = (__int64)v50;\n      }\n      else if ( (unsigned __int64)v50 <= v46 + qword_623438 )\n      {\n        do\n        {\n          qword_6233E8 = (__int64)v50;\n          if ( qword_623840 )\n          {\n            v55 = sub_418960(&unk_623848, v50, v51 - (_QWORD)v50, 0LL, 0LL);\n            if ( v55 == -2 )\n              goto LABEL_236;\n            v45 = qword_623438;\n            if ( v55 == -1 )\n              v55 = v3;\n            v50 += v55;\n          }\n          else\n          {\n            if ( byte_623600[*v50] )\n            {\n              if ( v51 > (unsigned __int64)v50 )\n              {\n                while ( (unsigned __int8 *)v51 != ++v50 )\n                {\n                  if ( !byte_623600[*v50] )\n                    goto LABEL_165;\n                }\n                v50 = (unsigned __int8 *)v51;\n              }\nLABEL_271:\n              v47 = v183[2];\n              goto LABEL_272;\n            }\n            ++v50;\n          }\n          if ( v51 <= (unsigned __int64)v50 )\n            goto LABEL_271;\nLABEL_165:\n          v46 = qword_6233E0;\n        }\n        while ( (unsigned __int64)v50 <= qword_6233E0 + v45 );\n        v47 = v183[2];\n      }\n      v103 = 0;\n      v104 = qword_6233E8;\n      if ( s )\n        v103 = v51 > qword_6233E8;\n      byte_6233D0 = v103;\n      if ( v46 < qword_6233E8 )\n      {\n        v105 = 0;\n        while ( *(_BYTE *)(*(_QWORD *)v182 + 2LL * *(unsigned __int8 *)(v104 - 1) + 1) & 0x20 )\n        {\n          --v104;\n          v105 = 1;\n          if ( v104 == v46 )\n          {\n            qword_6233E8 = v46;\n            goto LABEL_282;\n          }\n        }\n        if ( v105 )\n          qword_6233E8 = v104;\n      }\nLABEL_282:\n      v106 = qword_623448 + qword_6235E0;\n      if ( -(__int64)v47 <= qword_623448 + qword_6235E0 )\n      {\n        v107 = (unsigned __int8 *)(v46 + v47);\n      }\n      else\n      {\n        v107 = (unsigned __int8 *)(v46 - v106);\n        if ( qword_623840 )\n        {\n          v108 = sub_418960(&unk_623848, v107, v106, 0LL, 0LL);\n          if ( v108 == -2 )\n            goto LABEL_236;\n          if ( v108 == -1 )\n            v108 = 1LL;\n          v46 = qword_6233E0;\n          v107 += v108;\n        }\n        else if ( byte_623600[*v107] )\n        {\n          if ( (unsigned __int64)v107 < v46 )\n          {\n            do\n              ++v107;\n            while ( v107 != (unsigned __int8 *)v46 && byte_623600[*v107] );\n          }\n        }\n        else\n        {\n          ++v107;\n        }\n      }\n      qword_623400 = (__int64)v107;\n      qword_623408 = v46;\n      if ( (unsigned __int64)v107 < v46 )\n      {\n        v109 = 0;\n        while ( *(_BYTE *)(*(_QWORD *)v182 + 2LL * *(unsigned __int8 *)(v46 - 1) + 1) & 0x20 )\n        {\n          --v46;\n          v109 = 1;\n          if ( v107 == (unsigned __int8 *)v46 )\n          {\n            qword_623408 = (__int64)v107;\n            goto LABEL_294;\n          }\n        }\n        if ( v109 )\n          qword_623408 = v46;\n      }\nLABEL_294:\n      v110 = qword_623440;\n      v111 = qword_623408;\n      v112 = v107;\n      v113 = (unsigned __int64)&v107[qword_623440];\n      while ( v111 > v113 )\n      {\n        while ( qword_623840 )\n        {\n          v114 = sub_418960(&unk_623848, v112, v111 - (_QWORD)v112, 0LL, 0LL);\n          if ( v114 == -2 )\n            goto LABEL_236;\n          v110 = qword_623440;\n          v111 = qword_623408;\n          if ( v114 == -1 )\n            v114 = v3;\n          v115 = qword_623400 + v114;\n          v112 = (unsigned __int8 *)v115;\n          qword_623400 = v115;\n          v113 = v115 + qword_623440;\n          if ( qword_623408 <= v113 )\n            goto LABEL_301;\n        }\n        if ( byte_623600[*v112] )\n        {\n          if ( (unsigned __int64)v112 < v111 )\n          {\n            v124 = v112 + 1;\n            while ( 1 )\n            {\n              v112 = v124;\n              if ( (unsigned __int8 *)v111 == v124 )\n                break;\n              v125 = *v124++;\n              if ( !byte_623600[v125] )\n                goto LABEL_334;\n            }\n            qword_623400 = v111;\n            v113 = v111 + v110;\n          }\n        }\n        else\n        {\n          ++v112;\nLABEL_334:\n          qword_623400 = (__int64)v112;\n          v113 = (unsigned __int64)&v112[v110];\n        }\n      }\nLABEL_301:\n      if ( s )\n      {\n        if ( v53 >= (unsigned __int64)v112 )\n        {\n          v116 = v112;\n        }\n        else\n        {\n          v116 = v112;\n          while ( *(_BYTE *)(*(_QWORD *)v182 + 2LL * *(v116 - 1) + 1) & 0x20 )\n          {\n            if ( (unsigned __int8 *)v53 == --v116 )\n            {\n              v116 = (unsigned __int8 *)v53;\n              break;\n            }\n          }\n        }\n        byte_6233F0 = v185 < (unsigned __int64)v116;\n      }\n      else\n      {\n        byte_6233F0 = 0;\n      }\n      if ( v54 > (unsigned __int64)v112 )\n      {\n        v117 = 0;\n        while ( *(_BYTE *)(*(_QWORD *)v182 + 2LL * *v112 + 1) & 0x20 )\n        {\n          ++v112;\n          v117 = 1;\n          if ( (unsigned __int8 *)v54 == v112 )\n          {\n            qword_623400 = v54;\n            v112 = (unsigned __int8 *)v54;\n            goto LABEL_313;\n          }\n        }\n        if ( v117 )\n          qword_623400 = (__int64)v112;\n      }\nLABEL_313:\n      v118 = v110 - (v111 - (_QWORD)v112) - qword_6232C0;\n      if ( v118 <= 0 )\n      {\n        byte_623410 = 0;\n        v119 = qword_6233E8;\n        qword_623420 = 0LL;\n        qword_623428 = 0LL;\n      }\n      else\n      {\n        v119 = qword_6233E8;\n        v120 = (unsigned __int8 *)qword_6233E8;\n        qword_623420 = qword_6233E8;\n        if ( v54 > qword_6233E8 )\n        {\n          v121 = 0;\n          while ( *(_BYTE *)(*(_QWORD *)v182 + 2LL * *v120 + 1) & 0x20 )\n          {\n            ++v120;\n            v121 = 1;\n            if ( (unsigned __int8 *)v54 == v120 )\n              goto LABEL_319;\n          }\n          if ( !v121 )\n            goto LABEL_320;\nLABEL_319:\n          qword_623420 = (__int64)v120;\n        }\nLABEL_320:\n        v122 = qword_623420;\n        qword_623428 = (__int64)v120;\n        if ( v51 <= (unsigned __int64)v120 )\n        {\nLABEL_346:\n          if ( (unsigned __int64)v120 < v122 + v118 )\n            qword_623428 = (__int64)v120;\n        }\n        else if ( (unsigned __int64)v120 < qword_623420 + v118 )\n        {\n          do\n          {\n            qword_623428 = (__int64)v120;\n            if ( qword_623840 )\n            {\n              v181 = v118;\n              v123 = sub_418960(&unk_623848, v120, v51 - (_QWORD)v120, 0LL, 0LL);\n              if ( v123 == -2 )\n                goto LABEL_236;\n              v122 = qword_623420;\n              v118 = v181;\n              if ( v123 == -1 )\n                v123 = v3;\n              v120 += v123;\n            }\n            else\n            {\n              if ( byte_623600[*v120] )\n              {\n                if ( v51 > (unsigned __int64)v120 )\n                {\n                  while ( (unsigned __int8 *)v51 != ++v120 )\n                  {\n                    if ( !byte_623600[*v120] )\n                      goto LABEL_328;\n                  }\n                  v120 = (unsigned __int8 *)v51;\n                }\nLABEL_345:\n                v119 = qword_6233E8;\n                goto LABEL_346;\n              }\n              ++v120;\n            }\n            if ( v51 <= (unsigned __int64)v120 )\n              goto LABEL_345;\nLABEL_328:\n            ;\n          }\n          while ( (unsigned __int64)v120 < v122 + v118 );\n          v119 = qword_6233E8;\n        }\n        v126 = qword_623428;\n        if ( qword_623428 <= v122 )\n        {\n          byte_623410 = 0;\n        }\n        else\n        {\n          byte_6233D0 = 0;\n          v127 = 0;\n          byte_623410 = v51 > qword_623428 && s != 0LL;\n          while ( *(_BYTE *)(*(_QWORD *)v182 + 2LL * *(unsigned __int8 *)(v126 - 1) + 1) & 0x20 )\n          {\n            --v126;\n            v127 = 1;\n            if ( v126 <= v122 )\n              goto LABEL_353;\n          }\n          if ( !v127 )\n            goto LABEL_354;\nLABEL_353:\n          qword_623428 = v126;\n        }\n      }\nLABEL_354:\n      v128 = qword_623438 - (v119 - qword_6233E0) - qword_6232C0;\n      if ( v128 <= 0 )\n      {\n        qword_6233C0 = 0LL;\n        qword_6233C8 = 0LL;\nLABEL_411:\n        byte_6233B0 = 0;\n        goto LABEL_377;\n      }\n      v129 = qword_623400;\n      qword_6233C8 = qword_623400;\n      if ( v53 >= qword_623400 )\n        goto LABEL_365;\n      v130 = 0;\n      while ( *(_BYTE *)(*(_QWORD *)v182 + 2LL * *(unsigned __int8 *)(v129 - 1) + 1) & 0x20 )\n      {\n        --v129;\n        v130 = 1;\n        if ( v53 == v129 )\n        {\n          qword_6233C8 = v53;\n          goto LABEL_365;\n        }\n      }\n      if ( v130 )\n        qword_6233C8 = v129;\nLABEL_365:\n      while ( 2 )\n      {\n        qword_6233C0 = (__int64)v107;\n        v132 = (unsigned __int64)&v107[v128];\nLABEL_366:\n        if ( qword_6233C8 > v132 )\n        {\n          while ( !qword_623840 )\n          {\n            if ( byte_623600[*v107] )\n            {\n              if ( qword_6233C8 > (unsigned __int64)v107 )\n              {\n                v149 = v107 + 1;\n                while ( 1 )\n                {\n                  v107 = v149;\n                  if ( (unsigned __int8 *)qword_6233C8 == v149 )\n                    break;\n                  v150 = *v149++;\n                  if ( !byte_623600[v150] )\n                    goto LABEL_370;\n                }\n                qword_6233C0 = qword_6233C8;\n                v132 = qword_6233C8 + v128;\n              }\n              goto LABEL_366;\n            }\n            ++v107;\nLABEL_370:\n            v132 = (unsigned __int64)&v107[v128];\n            qword_6233C0 = (__int64)v107;\n            if ( qword_6233C8 <= (unsigned __int64)&v107[v128] )\n              goto LABEL_371;\n          }\n          v131 = sub_418960(&unk_623848, v107, qword_6233C8 - (_QWORD)v107, 0LL, 0LL);\n          if ( v131 != -2 )\n          {\n            if ( v131 == -1 )\n              v131 = v3;\n            v107 = (unsigned __int8 *)(qword_6233C0 + v131);\n            continue;\n          }\n          goto LABEL_236;\n        }\n        break;\n      }\nLABEL_371:\n      if ( qword_6233C8 <= (unsigned __int64)v107 )\n        goto LABEL_411;\n      byte_6233F0 = 0;\n      v133 = 0;\n      byte_6233B0 = v185 < (unsigned __int64)v107 && s != 0LL;\n      while ( *(_BYTE *)(*(_QWORD *)v182 + 2LL * *v107 + 1) & 0x20 )\n      {\n        ++v107;\n        v133 = 1;\n        if ( v107 == (unsigned __int8 *)qword_6233C8 )\n          goto LABEL_376;\n      }\n      if ( !v133 )\n        goto LABEL_377;\nLABEL_376:\n      qword_6233C0 = (__int64)v107;\nLABEL_377:\n      v134 = byte_623B0A;\n      if ( byte_623B0A )\n      {\n        v135 = *((int *)v183 + 10);\n        v136 = *(const char **)(qword_623588 + 8 * v135);\n        if ( !v136 )\n          v136 = \"\";\n        v137 = v183[4] + 1;\n        if ( *((_DWORD *)v183 + 10) > 0 )\n          v137 -= *(_QWORD *)(qword_623580 + 8 * v135 - 8);\n        v138 = stpcpy(dest, v136);\n        qword_6233A8 = (__int64)&v138[(int)__sprintf_chk(v138, 1LL, -1LL, \":%ld\", v137)];\n      }\n      else if ( byte_623B09 )\n      {\n        v151 = (char *)(qword_6233E0 + v183[4]);\n        dest = v151;\n        qword_6233A8 = (__int64)v151;\n        if ( v51 > (unsigned __int64)v151 )\n        {\n          while ( !(*(_BYTE *)(*(_QWORD *)v182 + 2LL * (unsigned __int8)*v151 + 1) & 0x20) )\n          {\n            ++v151;\n            v134 = byte_623B09;\n            if ( (char *)v51 == v151 )\n            {\n              qword_6233A8 = v51;\n              goto LABEL_383;\n            }\n          }\n          if ( v134 )\n            qword_6233A8 = (__int64)v151;\n        }\n      }\nLABEL_383:\n      if ( dword_623B04 == 2 )\n      {\n        __printf_chk(1LL, \".%s \\\"\", off_6232B0);\n        sub_404AC0(qword_623420, qword_623428);\n        if ( byte_623410 )\n          fputs_unlocked(s, stdout);\n        v158 = stdout->_IO_write_ptr;\n        if ( v158 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 34);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v158 + 1;\n          *v158 = 34;\n        }\n        fwrite_unlocked(\" \\\"\", 1uLL, 2uLL, stdout);\n        if ( byte_6233F0 )\n          fputs_unlocked(s, stdout);\n        sub_404AC0(qword_623400, qword_623408);\n        v159 = stdout->_IO_write_ptr;\n        if ( v159 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 34);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v159 + 1;\n          *v159 = 34;\n        }\n        fwrite_unlocked(\" \\\"\", 1uLL, 2uLL, stdout);\n        sub_404AC0(qword_6233E0, qword_6233E8);\n        if ( byte_6233D0 )\n          fputs_unlocked(s, stdout);\n        v160 = stdout->_IO_write_ptr;\n        if ( v160 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 34);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v160 + 1;\n          *v160 = 34;\n        }\n        fwrite_unlocked(\" \\\"\", 1uLL, 2uLL, stdout);\n        if ( byte_6233B0 )\n          fputs_unlocked(s, stdout);\n        sub_404AC0(qword_6233C0, qword_6233C8);\n        v161 = stdout->_IO_write_ptr;\n        if ( v161 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 34);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v161 + 1;\n          *v161 = 34;\n        }\n        if ( byte_623B0A || byte_623B09 )\n        {\n          fwrite_unlocked(\" \\\"\", 1uLL, 2uLL, stdout);\n          sub_404AC0(dest, qword_6233A8);\n          v162 = stdout->_IO_write_ptr;\n          if ( v162 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 34);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v162 + 1;\n            *v162 = 34;\n          }\n        }\n        goto LABEL_401;\n      }\n      if ( (unsigned int)dword_623B04 < 2 )\n        break;\n      if ( dword_623B04 != 3 )\n        goto LABEL_403;\n      __printf_chk(1LL, \"\\\\%s \", off_6232B0);\n      v139 = stdout->_IO_write_ptr;\n      if ( v139 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 123);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v139 + 1;\n        *v139 = 123;\n      }\n      sub_404AC0(qword_623420, qword_623428);\n      fwrite_unlocked(\"}{\", 1uLL, 2uLL, stdout);\n      sub_404AC0(qword_623400, qword_623408);\n      fwrite_unlocked(\"}{\", 1uLL, 2uLL, stdout);\n      v140 = (unsigned __int8 *)qword_6233E0;\n      v141 = qword_6233E8;\n      v142 = qword_6233E0;\n      if ( !qword_623840 )\n      {\n        if ( byte_623600[*(unsigned __int8 *)qword_6233E0] )\n        {\n          while ( qword_6233E8 > (unsigned __int64)v140 && byte_623600[*v140] )\n            ++v140;\n        }\n        else\n        {\n          v140 = (unsigned __int8 *)(qword_6233E0 + 1);\n        }\n        goto LABEL_393;\n      }\n      v143 = sub_418960(&unk_623848, qword_6233E0, qword_6233E8 - qword_6233E0, 0LL, 0LL);\n      if ( v143 != -2 )\n      {\n        if ( v143 == -1 )\n          v143 = 1LL;\n        v140 += v143;\nLABEL_393:\n        sub_404AC0(v142, v140);\n        fwrite_unlocked(\"}{\", 1uLL, 2uLL, stdout);\n        sub_404AC0(v140, v141);\n        fwrite_unlocked(\"}{\", 1uLL, 2uLL, stdout);\n        sub_404AC0(qword_6233C0, qword_6233C8);\n        v144 = stdout->_IO_write_ptr;\n        if ( v144 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 125);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v144 + 1;\n          *v144 = 125;\n        }\n        if ( byte_623B0A || byte_623B09 )\n        {\n          v145 = stdout->_IO_write_ptr;\n          if ( v145 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 123);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v145 + 1;\n            *v145 = 123;\n          }\n          sub_404AC0(dest, qword_6233A8);\n          v146 = stdout->_IO_write_ptr;\n          if ( v146 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 125);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v146 + 1;\n            *v146 = 125;\n          }\n        }\n        goto LABEL_401;\n      }\nLABEL_236:\n      while ( 2 )\n      {\n        sub_404750();\nLABEL_237:\n        v18 = qword_623AF8;\n        if ( qword_623AF8 )\n        {\nLABEL_238:\n          sub_404F70(v18, ptr, &ptr[1]);\n          memset(byte_623600, 1u, 0x100uLL);\n          v89 = ptr[0];\n          v90 = (unsigned __int8 *)ptr[1];\n          v91 = (unsigned __int8 *)ptr[0];\n          if ( ptr[0] < ptr[1] )\n          {\n            do\n            {\n              v92 = *v91++;\n              byte_623600[v92] = 0;\n            }\n            while ( v91 != v90 );\n          }\n          if ( !byte_6232D0 )\n          {\n            byte_623620 = 0;\n            word_623609 = 0;\n          }\n          free(v89);\n        }\n        else if ( byte_6232D0 )\n        {\n          v100 = __ctype_b_loc();\n          for ( j = 0LL; j != 256; byte_6235FF[j] = (v102 >> 10) & 1 )\n            v102 = (*v100)[j++];\n        }\n        else\n        {\n          memset(byte_623600, 1u, 0x100uLL);\n          byte_623620 = 0;\n          word_623609 = 0;\n        }\nLABEL_78:\n        if ( qword_623AE8 )\n        {\n          sub_405030(qword_623AE8, &qword_6235C0);\n          if ( !qword_6235D0 )\n            qword_623AE8 = 0LL;\n        }\n        if ( qword_623AF0 )\n        {\n          sub_405030(qword_623AF0, &qword_6235A0);\n          if ( !qword_6235B0 )\n            qword_623AF0 = 0LL;\n        }\n        nmemb = 0LL;\n        qword_623590 = 0LL;\n        qword_6235E0 = 0LL;\n        qword_6235D8 = 0LL;\n        v190 = 0LL;\n        if ( dword_623598 > 0 )\n        {\nLABEL_85:\n          v191 = 8 * v190;\n          v5 = 16 * v190 + qword_623578;\n          sub_404F70(*(_QWORD *)(qword_623588 + 8 * v190), v5, v5 + 8);\n          v19 = qword_623578 + 16 * v190;\n          v183 = (unsigned __int64 *)(qword_623578 + 16 * v190);\n          v20 = *(unsigned __int8 **)v19;\n          if ( byte_623B09 )\n          {\n            v21 = *(unsigned __int8 **)(v19 + 8);\n            v3 = (unsigned __int64)v21;\n            if ( v20 >= v21 )\n            {\n              v3 = *(_QWORD *)v19;\nLABEL_511:\n              v22 = (unsigned __int8 *)v3;\n              v184 = v3 - (_QWORD)v20;\n            }\n            else\n            {\n              v22 = *(unsigned __int8 **)v19;\n              v23 = *__ctype_b_loc();\n              while ( !(v23[*v22] & 0x2000) )\n              {\n                if ( ++v22 == v21 )\n                  goto LABEL_511;\n              }\n              v5 = v22 - v20;\n              v184 = v22 - v20;\n              if ( v21 > v22 )\n              {\n                do\n                {\n                  if ( !(v23[*v22] & 0x2000) )\n                    break;\n                  ++v22;\n                }\n                while ( v22 != v21 );\n              }\n            }\n          }\n          else\n          {\n            v22 = *(unsigned __int8 **)v19;\n            v184 = 0LL;\n            v21 = (unsigned __int8 *)v183[1];\n          }\n          v24 = v21;\n          v25 = v20;\n          v182 = v21;\n          if ( v21 <= v20 )\n            goto LABEL_132;\n          while ( 1 )\n          {\n            if ( !qword_6239A0 )\n              goto LABEL_532;\n            v5 = (__int64)v20;\n            v26 = sub_418980(&unk_6239A8, v20, v24 - v20, 0LL, v24 - v20, &unk_623720);\n            if ( v26 != -1 )\n            {\n              if ( !v26 )\n              {\n                v171 = sub_408350(qword_6239A0);\n                v172 = dcgettext(0LL, \"error: regular expression has a match of length zero: %s\", 5);\n                v152 = (_IO_FILE *)1;\n                error(1, 0, v172, v171);\nLABEL_524:\n                __overflow(v152, 58);\n                goto LABEL_434;\n              }\n              if ( v26 == -2 )\n                goto LABEL_236;\n              v182 = &v20[*(_QWORD *)qword_623730];\n            }\n            v3 = (unsigned __int64)v182;\n            if ( v20 < v182 )\n            {\nLABEL_532:\n              v3 = (unsigned __int64)v182;\n              v27 = *__ctype_b_loc();\n              do\n              {\n                if ( !(v27[*(unsigned __int8 *)(v3 - 1)] & 0x2000) )\n                  break;\n                --v3;\n              }\n              while ( (unsigned __int64)v20 < v3 );\n            }\n            v28 = qword_623840;\n            v29 = v20;\nLABEL_125:\n            if ( v28 )\n              break;\n            if ( (unsigned __int64)v20 < v3 )\n            {\n              if ( !byte_623600[*v20] )\n              {\n                do\n                {\n                  if ( ++v20 == (unsigned __int8 *)v3 )\n                    goto LABEL_131;\n                }\n                while ( !byte_623600[*v20] );\n                if ( (unsigned __int64)v20 >= v3 )\n                  goto LABEL_191;\n              }\n              if ( !byte_623600[*v20] )\n                goto LABEL_191;\n              v31 = v20;\n              while ( ++v31 != (unsigned __int8 *)v3 )\n              {\n                if ( !byte_623600[*v31] )\n                  goto LABEL_108;\n              }\n              goto LABEL_109;\n            }\n            if ( v20 != (unsigned __int8 *)v3 )\n            {\n              v31 = v20 + 1;\n              goto LABEL_124;\n            }\nLABEL_131:\n            v20 = v182;\n            v24 = (unsigned __int8 *)v183[1];\n            v182 = v24;\n            if ( v24 <= v20 )\n            {\nLABEL_132:\n              ++v190;\n              *(_QWORD *)(qword_623580 + v191) = ++qword_623590;\n              if ( dword_623598 <= (int)v190 )\n              {\n                if ( nmemb )\n                  qsort(base, nmemb, 0x30uLL, compar);\n                goto LABEL_135;\n              }\n              goto LABEL_85;\n            }\n          }\n          v5 = (__int64)v20;\n          v30 = sub_418980(&unk_623848, v20, v3 - (_QWORD)v20, 0LL, v3 - (_QWORD)v20, &unk_623700);\n          if ( v30 == -2 )\n            continue;\n          if ( v30 == -1 )\n            goto LABEL_131;\n          v31 = &v20[*(_QWORD *)qword_623710];\n          v20 += *(_QWORD *)qword_623708;\nLABEL_108:\n          if ( v20 == v31 )\n          {\n            v28 = qword_623840;\nLABEL_191:\n            v31 = v20 + 1;\n            goto LABEL_124;\n          }\nLABEL_109:\n          ptr[0] = v20;\n          ptr[1] = (void *)(v31 - v20);\n          if ( v31 - v20 > qword_6235E0 )\n            qword_6235E0 = v31 - v20;\n          v179 = byte_623B09;\n          if ( byte_623B09 )\n          {\n            if ( v22 < v20 )\n            {\n              v79 = v29;\n              v80 = 0;\n              v81 = v3;\n              v5 = v184;\n              v82 = v20;\n              v83 = qword_623590;\n              do\n              {\n                while ( 1 )\n                {\n                  v84 = *v22++;\n                  if ( v84 == 10 )\n                    break;\n                  if ( v22 >= v82 )\n                    goto LABEL_221;\n                }\n                ++v83;\n                v85 = (unsigned __int8 *)v183[1];\n                if ( v85 <= v22 )\n                {\n                  v87 = v22;\n                  v5 = 0LL;\n                }\n                else\n                {\n                  v86 = *__ctype_b_loc();\n                  v87 = v22;\n                  do\n                  {\n                    if ( v86[*v87] & 0x2000 )\n                      break;\n                    ++v87;\n                  }\n                  while ( v87 != v85 );\n                  v5 = v87 - v22;\n                }\n                v25 = v22;\n                v22 = v87;\n                v80 = v179;\n              }\n              while ( v87 < v82 );\nLABEL_221:\n              v88 = v83;\n              v184 = v5;\n              v20 = v82;\n              v3 = v81;\n              v29 = v79;\n              if ( v80 )\n                qword_623590 = v88;\n            }\n            if ( v22 > v20 )\n              goto LABEL_533;\n          }\n          if ( qword_623AE8 && (v5 = qword_6235C0, (unsigned __int8)sub_404F00(ptr))\n            || qword_623AF0 && (v5 = qword_6235A0, !(unsigned __int8)sub_404F00(ptr)) )\n          {\nLABEL_533:\n            v28 = qword_623840;\n            goto LABEL_124;\n          }\n          v10 = nmemb;\n          v32 = qword_623568;\n          v6 = (__int64)base;\n          if ( nmemb != qword_623568 )\n            goto LABEL_117;\n          if ( base )\n          {\n            if ( (unsigned __int64)qword_623568 > 0x1C71C71C71C71C6LL )\n              goto LABEL_228;\n            v32 = qword_623568 + ((unsigned __int64)qword_623568 >> 1) + 1;\n          }\n          else\n          {\n            if ( !qword_623568 )\n            {\n              v5 = 96LL;\n              v32 = 2LL;\n              goto LABEL_210;\n            }\n            v10 = ((unsigned __int64)qword_623568 * (unsigned __int128)0x30uLL) >> 64 != 0;\n            if ( 48 * qword_623568 < 0 || ((unsigned __int64)qword_623568 * (unsigned __int128)0x30uLL) >> 64 != 0 )\n              goto LABEL_228;\n          }\n          v5 = 48 * v32;\nLABEL_210:\n          qword_623568 = v32;\n          v78 = (void *)sub_4091C0(base, v5);\n          v10 = nmemb;\n          v6 = (__int64)v78;\n          base = v78;\n          v179 = byte_623B09;\nLABEL_117:\n          v33 = 48 * v10 + v6;\n          if ( !byte_623B0A )\n          {\n            if ( v179 )\n            {\n              *(_QWORD *)(v33 + 32) = v25 - v20;\n              if ( qword_6235D8 < v184 )\n                qword_6235D8 = v184;\n              goto LABEL_121;\n            }\n            goto LABEL_123;\n          }\n          v64 = qword_623590;\n          if ( v22 >= v20 )\n          {\n            v77 = (unsigned __int64)v25;\n            goto LABEL_205;\n          }\n          v65 = v29;\n          v66 = v3;\n          v67 = 0;\n          v68 = byte_623B0A;\n          v69 = (unsigned __int64)v25;\n          v70 = v31;\n          v71 = qword_623590;\n          v72 = v20;\n          while ( 1 )\n          {\n            v73 = (unsigned __int64)(v22 + 1);\n            if ( *v22 != 10 )\n              break;\n            ++v71;\n            v74 = (unsigned __int8 *)v183[1];\n            if ( (unsigned __int64)v74 <= v73 )\n            {\n              v67 = v68;\n              ++v22;\nLABEL_195:\n              if ( v22 >= v72 )\n                goto LABEL_203;\n              goto LABEL_196;\n            }\n            v189 = v64;\n            ++v22;\n            v188 = v65;\n            v187 = v10;\n            v186 = v70;\n            v75 = __ctype_b_loc();\n            v70 = v186;\n            v76 = *v75;\n            v10 = v187;\n            v65 = v188;\n            v64 = v189;\n            do\n            {\n              if ( v76[*v22] & 0x2000 )\n                break;\n              ++v22;\n            }\n            while ( v22 != v74 );\n            v67 = v68;\n            if ( v22 >= v72 )\n            {\nLABEL_203:\n              v3 = v66;\n              v20 = v72;\n              v5 = v71;\n              v77 = v73;\n              v31 = v70;\n              v29 = v65;\n              if ( v67 )\n              {\n                qword_623590 = v5;\n                v64 = v5;\n              }\nLABEL_205:\n              *(_QWORD *)(v33 + 32) = v64;\n              v25 = (unsigned __int8 *)v77;\nLABEL_121:\n              if ( v25 == v29 && v179 && (unsigned __int64)v29 < v3 )\n              {\n                v180 = v10;\n                v62 = __ctype_b_loc();\n                v10 = v180;\n                v63 = *v62;\n                while ( !(v63[*v29] & 0x2000) )\n                {\n                  if ( ++v29 == (unsigned __int8 *)v3 )\n                    goto LABEL_123;\n                }\n                if ( (unsigned __int64)v29 < v3 )\n                {\n                  do\n                    ++v29;\n                  while ( v29 != (unsigned __int8 *)v3 && v63[*v29] & 0x2000 );\n                }\n              }\nLABEL_123:\n              v34 = _mm_load_si128((const __m128i *)ptr);\n              nmemb = v10 + 1;\n              *(_QWORD *)(v33 + 16) = v29 - v20;\n              *(__m128i *)v33 = v34;\n              *(_QWORD *)(v33 + 24) = v3 - (_QWORD)v20;\n              *(_DWORD *)(v33 + 40) = v190;\n              v28 = qword_623840;\nLABEL_124:\n              v20 = v31;\n              goto LABEL_125;\n            }\nLABEL_196:\n            v69 = v73;\n          }\n          ++v22;\n          v73 = v69;\n          goto LABEL_195;\n        }\n        break;\n      }\nLABEL_135:\n      if ( byte_623B0A )\n      {\n        qword_6235D8 = 0LL;\n        for ( k = 0LL; k < dword_623598; ++k )\n        {\n          v95 = *(_QWORD *)(qword_623580 + 8 * k) + 1LL;\n          if ( k )\n            v95 -= *(_QWORD *)(qword_623580 + 8 * k - 8);\n          v96 = __sprintf_chk(ptr, 1LL, 21LL, \"%ld\", v95);\n          v97 = *(const char **)(qword_623588 + 8 * k);\n          v98 = v96;\n          if ( v97 )\n            v98 = strlen(v97) + v96;\n          if ( qword_6235D8 < v98 )\n            qword_6235D8 = v98;\n        }\n        v99 = qword_6235D8++ + 2;\n        dest = (char *)sub_409160(v99);\n        if ( byte_623B0A )\n          goto LABEL_534;\n      }\n      if ( byte_623B09 )\n      {\nLABEL_534:\n        if ( !byte_623B08 )\n          qword_6232C8 -= qword_6235D8 + qword_6232C0;\n      }\n      if ( qword_6232C8 < 0 )\n        qword_6232C8 = 0LL;\n      v35 = qword_6232C8 / 2;\n      qword_623448 = qword_6232C8 / 2;\n      qword_623440 = qword_6232C8 / 2 - qword_6232C0;\n      qword_623438 = qword_6232C8 / 2;\n      if ( s && *s )\n        qword_623430 = strlen(s);\n      else\n        s = 0LL;\n      v36 = 2 * qword_623430;\n      if ( byte_6232D0 )\n      {\n        v37 = qword_6232C8 / 2 - qword_6232C0 - v36;\n        if ( v37 < 0 )\n          v37 = 0LL;\n        qword_623438 = v35 - v36;\n        qword_623440 = v37;\n      }\n      else\n      {\n        qword_623438 = v35 - (v36 + 1);\n      }\n      v38 = __ctype_b_loc();\n      v39 = 0LL;\n      v182 = (unsigned __int8 *)v38;\n      v40 = *v38;\n      do\n      {\n        v41 = v40[v39++];\n        byte_62345F[v39] = (v41 >> 13) & 1;\n      }\n      while ( v39 != 256 );\n      byte_62346C = 1;\n      if ( dword_623B04 == 2 )\n      {\n        byte_623482 = 1;\n      }\n      else if ( dword_623B04 == 3 )\n      {\n        v42 = \"$%&#_{}\\\\\";\n        v43 = 36LL;\n        do\n        {\n          ++v42;\n          byte_623460[v43] = 1;\n          v43 = *(unsigned __int8 *)v42;\n        }\n        while ( (_BYTE)v43 );\n        for ( l = 128LL; l != 256; ++l )\n          byte_623460[l] = byte_41C2A0[l] != 0;\n      }\n      v3 = 1LL;\n      qword_623420 = 0LL;\n      qword_623428 = 0LL;\n      byte_623410 = 0;\n      qword_6233C0 = 0LL;\n      qword_6233C8 = 0LL;\n      byte_6233B0 = 0;\n      v183 = (unsigned __int64 *)base;\n      v184 = 0LL;\n      if ( (__int64)nmemb <= 0 )\n        return 0LL;\n    }\n    if ( !byte_623B08 )\n    {\n      if ( byte_623B0A )\n      {\n        sub_404AC0(dest, qword_6233A8);\n        v152 = stdout;\n        v153 = stdout->_IO_write_ptr;\n        if ( v153 >= stdout->_IO_write_end )\n          goto LABEL_524;\n        stdout->_IO_write_ptr = v153 + 1;\n        *v153 = 58;\nLABEL_434:\n        sub_404A70(qword_6235D8 + qword_6232C0 - (qword_6233A8 - (_QWORD)dest) - 1);\n      }\n      else\n      {\n        sub_404AC0(dest, qword_6233A8);\n        sub_404A70(qword_6235D8 + qword_6232C0 - (qword_6233A8 - (_QWORD)dest));\n      }\n    }\n    if ( qword_623420 >= (unsigned __int64)qword_623428 )\n    {\n      v154 = qword_623448 - qword_6232C0 - (qword_623408 - qword_623400);\n      v155 = 0LL;\n      if ( byte_6233F0 )\n        goto LABEL_437;\n      goto LABEL_438;\n    }\n    sub_404AC0(qword_623420, qword_623428);\n    if ( byte_623410 )\n    {\n      fputs_unlocked(s, stdout);\n      v163 = qword_623448 - qword_6232C0 - (qword_623408 - qword_623400);\n      v170 = 0LL;\n      if ( byte_6233F0 )\n        goto LABEL_506;\n    }\n    else\n    {\n      v163 = qword_623448 - qword_6232C0 - (qword_623408 - qword_623400);\n      if ( !byte_6233F0 )\n      {\n        v154 = v163 - (qword_623428 - qword_623420);\n        v155 = 0LL;\n        goto LABEL_438;\n      }\nLABEL_506:\n      v170 = qword_623430;\n    }\n    v154 = v163 - v170 - (qword_623428 - qword_623420);\n    if ( byte_623410 )\nLABEL_437:\n      v155 = qword_623430;\n    else\n      v155 = 0LL;\nLABEL_438:\n    sub_404A70(v154 - v155);\n    if ( byte_6233F0 )\n      fputs_unlocked(s, stdout);\n    sub_404AC0(qword_623400, qword_623408);\n    sub_404A70(qword_6232C0);\n    sub_404AC0(qword_6233E0, qword_6233E8);\n    if ( !byte_6233D0 )\n    {\n      v156 = qword_6233C0;\n      v157 = qword_6233C8;\n      if ( qword_6233C8 <= (unsigned __int64)qword_6233C0 )\n        goto LABEL_442;\n      v164 = qword_623448 - (qword_6233E8 - qword_6233E0);\n      v165 = 0LL;\n      goto LABEL_489;\n    }\n    fputs_unlocked(s, stdout);\n    v156 = qword_6233C0;\n    v157 = qword_6233C8;\n    if ( qword_6233C0 < (unsigned __int64)qword_6233C8 )\n    {\n      v164 = qword_623448 - (qword_6233E8 - qword_6233E0);\n      if ( byte_6233D0 )\n      {\n        v165 = qword_623430;\n        goto LABEL_489;\n      }\n      goto LABEL_526;\n    }\nLABEL_442:\n    if ( !byte_623B0A )\n    {\n      if ( !byte_623B09 )\n        continue;\n      if ( byte_623B08 )\n      {\nLABEL_499:\n        v169 = 0LL;\n        if ( byte_6233D0 )\n          v169 = qword_623430;\n        sub_404A70(qword_623448 - (qword_6233E8 - qword_6233E0) - v169);\n        goto LABEL_494;\n      }\n      goto LABEL_445;\n    }\n    if ( byte_623B08 )\n      goto LABEL_499;\n  }\n}\n", 
            "funcStartAddr": "0x402010L", 
            "funcEndAddr": "0x4045b0L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x4045b0L", 
            "funcEndAddr": "0x4045dbL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_4045DB()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4045dbL", 
            "funcEndAddr": "0x4045faL", 
            "funcName": "sub_4045DB"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4045FA()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4045faL", 
            "funcEndAddr": "0x404631L", 
            "funcName": "sub_4045FA"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_404631()\n{\n  __int64 *result; // rax\n\n  if ( !byte_623388 )\n  {\n    while ( qword_623390 < (unsigned __int64)(&qword_622E48 - qword_622E40 - 1) )\n      ((void (*)(void))qword_622E40[++qword_623390])();\n    result = sub_4045DB();\n    byte_623388 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404631L", 
            "funcEndAddr": "0x404688L", 
            "funcName": "sub_404631"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_404688()\n{\n  return sub_4045FA();\n}\n", 
            "funcStartAddr": "0x404688L", 
            "funcEndAddr": "0x40468dL", 
            "funcName": "sub_404688"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404690(const void *a1, const void *a2)\n{\n  __int64 v2; // r10\n  __int64 v3; // r9\n  __int64 v4; // r8\n  unsigned __int8 *v5; // rdi\n  unsigned __int8 *v6; // rsi\n  __int64 result; // rax\n  __int64 v8; // rdx\n  unsigned __int8 *v9; // rdi\n  unsigned __int8 *v10; // rsi\n  __int64 v11; // rdx\n\n  v2 = *((_QWORD *)a2 + 1);\n  v3 = *((_QWORD *)a1 + 1);\n  v4 = *((_QWORD *)a1 + 1);\n  if ( v2 <= v3 )\n    v4 = *((_QWORD *)a2 + 1);\n  if ( byte_623B00 )\n  {\n    if ( v4 > 0 )\n    {\n      v9 = *(unsigned __int8 **)a1;\n      v10 = *(unsigned __int8 **)a2;\n      result = (unsigned __int8)byte_623740[*v9] - (unsigned int)(unsigned __int8)byte_623740[*v10];\n      if ( (_DWORD)result )\n        return result;\n      v11 = 0LL;\n      while ( v4 != ++v11 )\n      {\n        result = (unsigned __int8)byte_623740[v9[v11]] - (unsigned int)(unsigned __int8)byte_623740[v10[v11]];\n        if ( (_DWORD)result )\n          return result;\n      }\n    }\n  }\n  else if ( v4 > 0 )\n  {\n    v5 = *(unsigned __int8 **)a1;\n    v6 = *(unsigned __int8 **)a2;\n    result = *v5 - (unsigned int)*v6;\n    if ( (_DWORD)result )\n      return result;\n    v8 = 0LL;\n    while ( v4 != ++v8 )\n    {\n      result = v5[v8] - (unsigned int)v6[v8];\n      if ( (_DWORD)result )\n        return result;\n    }\n  }\n  if ( v2 > v3 )\n    result = 0xFFFFFFFFLL;\n  else\n    result = v2 < v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x404690L", 
            "funcEndAddr": "0x40474bL", 
            "funcName": "sub_404690"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_404750()\n{\n  char *v0; // rbx\n  int *v1; // rax\n\n  v0 = dcgettext(0LL, \"error in regular expression matcher\", 5);\n  v1 = __errno_location();\n  error(1, *v1, v0);\n  return sub_404780(1LL);\n}\n", 
            "funcStartAddr": "0x404750L", 
            "funcEndAddr": "0x404780L", 
            "funcName": "sub_404750"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404780(const char *a1)\n{\n  const char *v1; // rbx\n  size_t v2; // rax\n  __int64 v3; // rax\n  int v4; // edx\n  __int64 v5; // r12\n  _BYTE *i; // rbp\n  char v7; // al\n  _BYTE *v8; // rcx\n  const char *v10; // rax\n  int v11; // ecx\n  const unsigned __int16 **v12; // rax\n  int v13; // edi\n  int v14; // ecx\n  const unsigned __int16 *v15; // r8\n  int v16; // eax\n  unsigned __int8 v17; // r9\n  int v18; // edx\n\n  v1 = a1;\n  v2 = strlen(a1);\n  v3 = sub_409160(v2 + 1);\n  LOBYTE(v4) = *a1;\n  v5 = v3;\n  for ( i = (_BYTE *)v3; ; ++i )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\nLABEL_2:\n            if ( !(_BYTE)v4 )\n            {\nLABEL_5:\n              *i = 0;\n              return v5;\n            }\n            while ( 1 )\n            {\n              v7 = v1[1];\n              v8 = v1 + 1;\n              if ( (_BYTE)v4 == 92 )\n                break;\n              *i = v4;\n              LOBYTE(v4) = v7;\n              ++i;\n              ++v1;\n              if ( !v7 )\n                goto LABEL_5;\n            }\n            if ( v7 != 102 )\n              break;\n            *i = 12;\n            LOBYTE(v4) = v1[2];\n            ++i;\n            v1 += 2;\n          }\n          if ( v7 <= 102 )\n            break;\n          if ( v7 == 116 )\n          {\n            *i = 9;\n            LOBYTE(v4) = v1[2];\n            ++i;\n            v1 += 2;\n          }\n          else if ( v7 > 116 )\n          {\n            if ( v7 == 118 )\n            {\n              *i = 11;\n              LOBYTE(v4) = v1[2];\n              ++i;\n              v1 += 2;\n            }\n            else\n            {\n              if ( v7 != 120 )\n                goto LABEL_39;\n              v12 = __ctype_b_loc();\n              v1 += 2;\n              v13 = 0;\n              v14 = 0;\n              v15 = *v12;\n              while ( 1 )\n              {\n                v16 = *v1;\n                LOBYTE(v4) = *v1;\n                if ( !(v15[*(unsigned __int8 *)v1] & 0x1000) )\n                  break;\n                if ( (unsigned __int8)(v4 - 97) <= 5u )\n                {\n                  v18 = v16 - 87;\n                }\n                else\n                {\n                  v17 = v4 - 65;\n                  v18 = v16 - 55;\n                  if ( v17 > 5u )\n                    v18 = v16 - 48;\n                }\n                ++v13;\n                v14 = 16 * v14 + v18;\n                ++v1;\n                if ( v13 == 3 )\n                  goto LABEL_33;\n              }\n              if ( v13 )\n              {\nLABEL_33:\n                *i = v14;\n                LOBYTE(v4) = *v1;\n                ++i;\n                goto LABEL_2;\n              }\n              i += 2;\n              *((_WORD *)i - 1) = 30812;\n            }\n          }\n          else if ( v7 == 110 )\n          {\n            *i = 10;\n            LOBYTE(v4) = v1[2];\n            ++i;\n            v1 += 2;\n          }\n          else\n          {\n            if ( v7 != 114 )\n              goto LABEL_39;\n            *i = 13;\n            LOBYTE(v4) = v1[2];\n            ++i;\n            v1 += 2;\n          }\n        }\n        if ( v7 != 97 )\n          break;\n        *i = 7;\n        LOBYTE(v4) = v1[2];\n        ++i;\n        v1 += 2;\n      }\n      if ( v7 > 97 )\n        break;\n      if ( !v7 )\n        goto LABEL_5;\n      if ( v7 == 48 )\n      {\n        v10 = v1 + 2;\n        v11 = 0;\n        v1 += 5;\n        while ( 1 )\n        {\n          v4 = *v10;\n          if ( (unsigned __int8)(*v10 - 48) > 7u )\n            break;\n          v11 = v4 + 8 * v11 - 48;\n          if ( v1 == v10 + 1 )\n          {\n            LOBYTE(v4) = v10[1];\n            goto LABEL_43;\n          }\n          ++v10;\n        }\n        v1 = v10;\nLABEL_43:\n        *i++ = v11;\n      }\n      else\n      {\nLABEL_39:\n        *i = 92;\n        LOBYTE(v4) = v1[2];\n        i += 2;\n        v1 += 2;\n        *(i - 1) = v7;\n      }\n    }\n    if ( v7 != 98 )\n      break;\n    *i = 8;\n    LOBYTE(v4) = v1[2];\n    v1 += 2;\n  }\n  if ( v7 != 99 )\n    goto LABEL_39;\n  do\n    ++v8;\n  while ( *v8 );\n  *i = 0;\n  return v5;\n}\n", 
            "funcStartAddr": "0x404780L", 
            "funcEndAddr": "0x4049cfL", 
            "funcName": "sub_404780"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4049D0(__int64 a1)\n{\n  bool v1; // zf\n  __int64 v2; // rbp\n  const char *v3; // rbx\n  char *v4; // rax\n  size_t v5; // rax\n  __int64 v6; // rax\n  __int64 v8; // r12\n  __int64 v9; // rbx\n  char *v10; // rax\n\n  v1 = byte_623B00 == 0;\n  v2 = a1 + 8;\n  v3 = *(const char **)a1;\n  *(_QWORD *)(a1 + 40) = a1 + 72;\n  v4 = byte_623740;\n  if ( v1 )\n    v4 = 0LL;\n  *(_QWORD *)(a1 + 8) = 0LL;\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_QWORD *)(a1 + 48) = v4;\n  v5 = strlen(v3);\n  v6 = sub_418000(v3, v5, v2);\n  if ( !v6 )\n    return sub_418080(v2);\n  v8 = v6;\n  v9 = sub_408350(v3);\n  v10 = dcgettext(0LL, \"%s (for regexp %s)\", 5);\n  error(1, 0, v10, v8, v9);\n  return sub_404A70(1LL);\n}\n", 
            "funcStartAddr": "0x4049d0L", 
            "funcEndAddr": "0x404a70L", 
            "funcName": "sub_4049D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_404A70(__int64 a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n\n  if ( a1 > 0 )\n  {\n    v1 = a1;\n    do\n    {\n      v2 = stdout->_IO_write_ptr;\n      if ( v2 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 32);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v2 + 1;\n        *v2 = 32;\n      }\n      --v1;\n    }\n    while ( v1 );\n  }\n}\n", 
            "funcStartAddr": "0x404a70L", 
            "funcEndAddr": "0x404ab9L", 
            "funcName": "sub_404A70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_404AC0(char *a1, unsigned __int8 *a2)\n{\n  unsigned __int8 *v2; // r13\n  char *v3; // rbp\n  char v4; // si\n  char *v5; // rax\n  char *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  char v9; // bl\n  char *v10; // rax\n  char *v11; // rax\n  char *v12; // rax\n  unsigned int v13; // ecx\n  char v14; // al\n  char *v15; // rdx\n  char *v16; // rdx\n  char *v17; // rdx\n  char *v18; // rdx\n  FILE *v19; // rcx\n  char *v20; // rax\n  int v21; // [rsp+0h] [rbp-2Ch]\n\n  if ( a2 > (unsigned __int8 *)a1 )\n  {\n    v2 = a2;\n    v3 = a1;\n    while ( 1 )\n    {\n      v7 = (unsigned __int8)*v3;\n      v8 = (unsigned __int8)*v3;\n      v9 = *v3;\n      if ( !byte_623460[v8] )\n        goto LABEL_14;\n      v4 = byte_41C2A0[v8];\n      if ( v4 && dword_623B04 == 3 )\n      {\n        v13 = byte_41C3A0[v8];\n        v14 = byte_41C3A0[v8];\n        switch ( v4 )\n        {\n          case 1:\n            v19 = stdout;\n            if ( v14 == 79 )\n            {\n              fwrite_unlocked(\"\\\\OE{}\", 1uLL, 5uLL, stdout);\n            }\n            else if ( v14 <= 79 )\n            {\n              if ( v14 != 65 )\n                goto LABEL_45;\n              fwrite_unlocked(\"\\\\AE{}\", 1uLL, 5uLL, stdout);\n            }\n            else if ( v14 == 97 )\n            {\n              fwrite_unlocked(\"\\\\ae{}\", 1uLL, 5uLL, stdout);\n            }\n            else\n            {\n              if ( v14 != 111 )\n                goto LABEL_45;\n              fwrite_unlocked(\"\\\\oe{}\", 1uLL, 5uLL, stdout);\n            }\n            break;\n          case 2:\n          case 3:\n            v15 = \"\";\n            if ( v13 == 105 )\n              v15 = \"$%&#_{}\\\\\" + 7;\n            __printf_chk(1LL, \"\\\\'%s%c\", v15);\n            break;\n          case 4:\n            v16 = \"\";\n            if ( v13 == 105 )\n              v16 = \"$%&#_{}\\\\\" + 7;\n            __printf_chk(1LL, \"\\\\^%s%c\", v16);\n            break;\n          case 5:\n            v17 = \"\";\n            if ( v13 == 105 )\n              v17 = \"$%&#_{}\\\\\" + 7;\n            __printf_chk(1LL, \"\\\\\\\"%s%c\", v17);\n            break;\n          case 6:\n            v18 = \"\";\n            if ( v13 == 105 )\n              v18 = \"$%&#_{}\\\\\" + 7;\n            __printf_chk(1LL, \"\\\\~%s%c\", v18);\n            break;\n          case 7:\n            __printf_chk(1LL, \"\\\\c{%c}\", v13);\n            break;\n          case 8:\n            v19 = stdout;\n            if ( v14 == 65 )\n            {\n              fwrite_unlocked(\"\\\\AA{}\", 1uLL, 5uLL, stdout);\n            }\n            else\n            {\n              if ( v14 != 97 )\n                goto LABEL_45;\n              fwrite_unlocked(\"\\\\aa{}\", 1uLL, 5uLL, stdout);\n            }\n            break;\n          case 9:\n            v19 = stdout;\n            if ( v14 == 79 )\n            {\n              fwrite_unlocked(\"\\\\O{}\", 1uLL, 4uLL, stdout);\n            }\n            else if ( v14 == 111 )\n            {\n              fwrite_unlocked(\"\\\\o{}\", 1uLL, 4uLL, stdout);\n            }\n            else\n            {\nLABEL_45:\n              v20 = v19->_IO_write_ptr;\n              if ( v20 >= v19->_IO_write_end )\n              {\n                __overflow(v19, 32);\n              }\n              else\n              {\n                v19->_IO_write_ptr = v20 + 1;\n                *v20 = 32;\n              }\n            }\n            break;\n          default:\n            goto LABEL_12;\n        }\n        goto LABEL_12;\n      }\n      if ( v9 == 92 )\n        break;\n      if ( v9 <= 92 )\n      {\n        if ( v9 == 34 )\n        {\n          v5 = stdout->_IO_write_ptr;\n          if ( v5 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 34);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v5 + 1;\n            *v5 = 34;\n          }\n          v6 = stdout->_IO_write_ptr;\n          if ( v6 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 34);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v6 + 1;\n            *v6 = 34;\n          }\n          goto LABEL_12;\n        }\n        if ( v9 < 34 || v9 > 38 )\n        {\nLABEL_24:\n          v12 = stdout->_IO_write_ptr;\n          if ( v12 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 32);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v12 + 1;\n            *v12 = 32;\n          }\n          goto LABEL_12;\n        }\n        goto LABEL_19;\n      }\n      if ( v9 == 123 || v9 == 125 )\n      {\n        __printf_chk(1LL, \"$\\\\%c$\", v7);\nLABEL_12:\n        if ( v2 == (unsigned __int8 *)++v3 )\n          return;\n      }\n      else\n      {\n        if ( v9 != 95 )\n          goto LABEL_24;\nLABEL_19:\n        v11 = stdout->_IO_write_ptr;\n        if ( v11 >= stdout->_IO_write_end )\n        {\n          v21 = (unsigned __int8)*v3;\n          __overflow(stdout, 92);\n          LODWORD(v7) = v21;\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v11 + 1;\n          *v11 = 92;\n        }\nLABEL_14:\n        v10 = stdout->_IO_write_ptr;\n        if ( v10 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v7);\n          goto LABEL_12;\n        }\n        ++v3;\n        stdout->_IO_write_ptr = v10 + 1;\n        *v10 = v9;\n        if ( v2 == (unsigned __int8 *)v3 )\n          return;\n      }\n    }\n    fwrite_unlocked(\"\\\\backslash{}\", 1uLL, 0xCuLL, stdout);\n    goto LABEL_12;\n  }\n}\n", 
            "funcStartAddr": "0x404ac0L", 
            "funcEndAddr": "0x404ec4L", 
            "funcName": "sub_404AC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall compar(const void *a1, const void *a2)\n{\n  __int64 result; // rax\n  _QWORD *v3; // r11\n\n  result = sub_404690(a1, a2);\n  if ( !(_DWORD)result )\n  {\n    if ( *(_QWORD *)a1 < *v3 )\n      result = 0xFFFFFFFFLL;\n    else\n      result = *(_QWORD *)a1 > *v3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404ed0L", 
            "funcEndAddr": "0x404ef7L", 
            "funcName": "compar"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404F00(void *a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rdx\n  __int64 v4; // r13\n  __int64 v5; // rbx\n  int v6; // eax\n  __int64 v7; // r11\n\n  v3 = a3 - 1;\n  if ( v3 < 0 )\n    return 0LL;\n  v4 = 0LL;\n  v5 = v3;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v6 = sub_404690(a1, (const void *)(a2 + 16 * ((v4 + v5) >> 1)));\n      if ( v6 >= 0 )\n        break;\n      v5 = v7 - 1;\n      if ( v4 > v7 - 1 )\n        return 0LL;\n    }\n    if ( !v6 )\n      break;\n    v4 = v7 + 1;\n    if ( v7 + 1 > v5 )\n      return 0LL;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x404f00L", 
            "funcEndAddr": "0x404f6fL", 
            "funcName": "sub_404F00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404F70(const char *a1, __int64 *a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  char *v4; // rbx\n  __int64 v5; // rax\n  __int64 result; // rax\n  __int64 v7; // rbx\n  int *v8; // rax\n  __int64 v9; // [rsp+8h] [rbp-20h]\n\n  v3 = a3;\n  if ( a1 && (v4 = (char *)a1, *a1) && strcmp(a1, \"-\") )\n  {\n    v5 = sub_4085A0(a1, &v9);\n    *a2 = v5;\n    if ( !v5 )\n    {\n      while ( 1 )\n      {\n        v7 = sub_4081D0(0LL, 3LL, v4);\n        v8 = __errno_location();\n        error(1, *v8, \"%s\", v7);\nLABEL_8:\n        v4 = \"-\";\n      }\n    }\n  }\n  else\n  {\n    v5 = sub_408370(stdin);\n    *a2 = v5;\n    if ( !v5 )\n      goto LABEL_8;\n  }\n  result = v9 + v5;\n  *v3 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x404f70L", 
            "funcEndAddr": "0x405022L", 
            "funcName": "sub_404F70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405030(const char *a1, __int64 *a2)\n{\n  __int64 *v2; // r12\n  __int64 v3; // r13\n  unsigned __int64 v4; // rbp\n  unsigned __int64 v5; // rdx\n  size_t v6; // rsi\n  char *v7; // rdi\n  _BYTE *v8; // rbx\n  size_t v9; // rcx\n  unsigned __int64 *v10; // rcx\n  __int64 v11; // rax\n  unsigned __int64 v12; // [rsp+0h] [rbp-38h]\n  unsigned __int64 v13; // [rsp+8h] [rbp-30h]\n\n  v2 = a2;\n  v3 = (__int64)(a2 + 1);\n  sub_404F70(a1, (__int64 *)&v12, (__int64 *)&v13);\n  v4 = v12;\n  v5 = v13;\n  v6 = 0LL;\n  *v2 = 0LL;\n  v7 = 0LL;\n  v2[1] = 0LL;\n  for ( v2[2] = 0LL; v4 < v5; v4 = (unsigned __int64)&v8[(unsigned __int64)v8 < v5] )\n  {\n    v8 = (_BYTE *)v4;\n    while ( *v8 != 10 )\n    {\n      if ( ++v8 == (_BYTE *)v5 )\n      {\n        if ( v2[1] != v6 )\n        {\nLABEL_6:\n          v9 = v6++;\n          v10 = (unsigned __int64 *)&v7[16 * v9];\n          *v10 = v4;\n          v10[1] = (unsigned __int64)&v8[-v4];\n          v2[2] = v6;\n          goto LABEL_7;\n        }\nLABEL_11:\n        v11 = sub_409230(v7, v3, 16LL);\n        v6 = v2[2];\n        v5 = v13;\n        v7 = (char *)v11;\n        *v2 = v11;\n        goto LABEL_6;\n      }\n    }\n    if ( v4 < (unsigned __int64)v8 )\n    {\n      if ( v2[1] != v6 )\n        goto LABEL_6;\n      goto LABEL_11;\n    }\nLABEL_7:\n    ;\n  }\n  qsort(v7, v6, 0x10uLL, (__compar_fn_t)sub_404690);\n}\n", 
            "funcStartAddr": "0x405030L", 
            "funcEndAddr": "0x40511cL", 
            "funcName": "sub_405030"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_405120(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  const char **v24; // rax\n  const char *v25; // rbp\n  char *v26; // rax\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  char *v30; // rax\n  char *v31; // rax\n  char *v32; // rax\n  char *v33; // rax\n  const char *v34; // [rsp+0h] [rbp-88h]\n  const char *v35; // [rsp+8h] [rbp-80h]\n  const char *v36; // [rsp+10h] [rbp-78h]\n  const char *v37; // [rsp+18h] [rbp-70h]\n  const char *v38; // [rsp+20h] [rbp-68h]\n  const char *v39; // [rsp+28h] [rbp-60h]\n  const char *v40; // [rsp+30h] [rbp-58h]\n  const char *v41; // [rsp+38h] [rbp-50h]\n  const char *v42; // [rsp+40h] [rbp-48h]\n  const char *v43; // [rsp+48h] [rbp-40h]\n  const char *v44; // [rsp+50h] [rbp-38h]\n  const char *v45; // [rsp+58h] [rbp-30h]\n  __int64 v46; // [rsp+60h] [rbp-28h]\n  __int64 v47; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_623B20;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [INPUT]...   (without -G)\\n  or:  %s -G [OPTION]... [INPUT [OUTPUT]]\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"Output a permuted index, including context, of the words in the input files.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"  -A, --auto-reference           output automatically generated references\\n\"\n          \"  -G, --traditional              behave more like System V 'ptx'\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  -F, --flag-truncation=STRING   use STRING for flagging line truncations.\\n\"\n          \"                                 The default is '/'\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"  -M, --macro-name=STRING        macro name to use instead of 'xx'\\n\"\n          \"  -O, --format=roff              generate output as roff directives\\n\"\n          \"  -R, --right-side-refs          put references at right, not counted in -w\\n\"\n          \"  -S, --sentence-regexp=REGEXP   for end of lines or end of sentences\\n\"\n          \"  -T, --format=tex               generate output as TeX directives\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"  -W, --word-regexp=REGEXP       use REGEXP to match each keyword\\n\"\n          \"  -b, --break-file=FILE          word break characters in this FILE\\n\"\n          \"  -f, --ignore-case              fold lower case to upper case for sorting\\n\"\n          \"  -g, --gap-size=NUMBER          gap size in columns between output fields\\n\"\n          \"  -i, --ignore-file=FILE         read ignore word list from FILE\\n\"\n          \"  -o, --only-file=FILE           read only word list from this FILE\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(\n          0LL,\n          \"  -r, --references               first field of each line is a reference\\n\"\n          \"  -t, --typeset-mode               - not implemented -\\n\"\n          \"  -w, --width=NUMBER             output width in columns, reference excluded\\n\",\n          5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v23, v22);\n  v34 = \"[\";\n  v24 = &v34;\n  v35 = \"test invocation\";\n  v36 = \"coreutils\";\n  v37 = \"Multi-call invocation\";\n  v38 = \"sha224sum\";\n  v39 = \"sha2 utilities\";\n  v40 = \"sha256sum\";\n  v41 = \"sha2 utilities\";\n  v42 = \"sha384sum\";\n  v43 = \"sha2 utilities\";\n  v44 = \"sha512sum\";\n  v45 = \"sha2 utilities\";\n  v46 = 0LL;\n  v47 = 0LL;\n  do\n    v24 += 2;\n  while ( *v24 && strcmp(\"ptx\", *v24) );\n  v25 = v24[1];\n  if ( v25 )\n  {\n    v26 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v26, &unk_41BDC2);\n    v27 = setlocale(5, 0LL);\n    if ( !v27 || !strncmp(v27, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v30 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v30, &unk_41BDC2);\n    v31 = setlocale(5, 0LL);\n    if ( !v31 || !strncmp(v31, \"en_\", 3uLL) )\n    {\n      v25 = \"ptx\";\n      v32 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v32, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v25 = \"ptx\";\n  }\n  v33 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v33, \"ptx\");\nLABEL_10:\n  v28 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v28, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v29 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v29, v25);\nLABEL_3:\n  exit(status);\n}\n", 
            "funcStartAddr": "0x405120L", 
            "funcEndAddr": "0x405505L", 
            "funcName": "sub_405120"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_405510()\n{\n  sub_405120(1);\n}\n", 
            "funcStartAddr": "0x405510L", 
            "funcEndAddr": "0x40551aL", 
            "funcName": "sub_405510"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405520(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  size_t v4; // r13\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n  char *v16; // [rsp+18h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  v16 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += v4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( v16 )\n      {\n        v10 = memcmp(&v16[v4 * v14], v5, v4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += v4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    v12 = v14;\n  return v12;\n}\n", 
            "funcStartAddr": "0x405520L", 
            "funcEndAddr": "0x405636L", 
            "funcName": "sub_405520"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405640(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_408330(1LL, a1);\n  v5 = sub_408020(0LL, 8LL, a2);\n  error(0, 0, v3, v5, v4);\n}\n", 
            "funcStartAddr": "0x405640L", 
            "funcEndAddr": "0x4056b1L", 
            "funcName": "sub_405640"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4056C0(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  size_t v4; // r13\n  char *v5; // rbp\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  __int64 v11; // rax\n  __int64 v12; // rax\n  char *v13; // rax\n\n  v3 = 0LL;\n  v4 = a3;\n  v5 = a2;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, v5, v4) )\n    {\n      ++v9;\n      v3 = v5;\n      v5 += v4;\n      v11 = sub_408350(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    v5 += v4;\n    v12 = sub_408350(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  v13 = stderr->_IO_write_ptr;\n  if ( v13 >= stderr->_IO_write_end )\n  {\n    LODWORD(v13) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = v13 + 1;\n    *v13 = 10;\n  }\n  return (int)v13;\n}\n", 
            "funcStartAddr": "0x4056c0L", 
            "funcEndAddr": "0x4057d8L", 
            "funcName": "sub_4056C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4057E0(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  size_t v6; // r15\n  void (*v7)(void); // r13\n  char *v8; // rbp\n  __int64 *v9; // rbx\n  __int64 result; // rax\n\n  v6 = a5;\n  v7 = a6;\n  v8 = a4;\n  v9 = (__int64 *)a3;\n  result = sub_405520(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_405640(a1, (__int64)a2, result);\n    sub_4056C0(v9, v8, v6);\n    v7();\n    result = -1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4057e0L", 
            "funcEndAddr": "0x405850L", 
            "funcName": "sub_4057E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405850(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  size_t v5; // r12\n  __int64 *v6; // rbx\n  char *v7; // rbp\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v5 = a4;\n    v6 = a2 + 1;\n    v7 = a3;\n    do\n    {\n      if ( !memcmp(s1, v7, v5) )\n        break;\n      v4 = *v6;\n      v7 += v5;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x405850L", 
            "funcEndAddr": "0x40589dL", 
            "funcName": "sub_405850"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4058C0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_418A80(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_623B10 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_623B18 )\n      {\n        v5 = sub_4081A0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_418A80(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x4058c0L", 
            "funcEndAddr": "0x40595eL", 
            "funcName": "sub_4058C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405960(int a1)\n{\n  unsigned int v1; // ebx\n  int v2; // eax\n\n  v1 = 1;\n  v2 = open(\"/dev/null\", 0);\n  if ( a1 == v2 )\n    return v1;\n  v1 = 0;\n  if ( v2 < 0 )\n    return v1;\n  close(v2);\n  *__errno_location() = 9;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x405960L", 
            "funcEndAddr": "0x4059abL", 
            "funcName": "sub_405960"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4059B0(char *a1, char *a2, FILE *a3)\n{\n  int v3; // ebx\n  int *v4; // r14\n  char v5; // bl\n  char v6; // bp\n  char v7; // r13\n  __int64 v8; // r12\n  int v9; // er15\n\n  v3 = fileno(a3);\n  v4 = __errno_location();\n  if ( v3 == 1 )\n  {\n    v5 = 0;\n    v6 = 0;\n  }\n  else\n  {\n    if ( v3 == 2 )\n    {\n      v5 = 0;\n    }\n    else\n    {\n      if ( !v3 )\n      {\n        v5 = 0;\n        v6 = 0;\n        v7 = 0;\nLABEL_11:\n        v8 = sub_409C80(a1, a2);\n        goto LABEL_12;\n      }\n      v5 = dup2(2, 2) != 2;\n    }\n    v6 = dup2(1, 1) != 1;\n  }\n  if ( !dup2(0, 0) )\n  {\n    v7 = 0;\n    if ( !v6 )\n      goto LABEL_9;\n    goto LABEL_18;\n  }\n  v7 = sub_405960(0);\n  if ( !v7 )\n  {\n    v7 = 1;\n    v8 = 0LL;\nLABEL_12:\n    v9 = *v4;\n    if ( !v5 )\n      goto LABEL_13;\n    goto LABEL_27;\n  }\n  if ( v6 )\n  {\nLABEL_18:\n    v6 = sub_405960(1);\n    if ( !v6 )\n    {\n      v9 = *v4;\n      v8 = 0LL;\n      if ( v5 )\n        close(2);\n      goto LABEL_21;\n    }\n  }\nLABEL_9:\n  if ( !v5 )\n    goto LABEL_11;\n  v5 = sub_405960(2);\n  if ( v5 )\n    goto LABEL_11;\n  v9 = *v4;\n  v8 = 0LL;\nLABEL_27:\n  close(2);\nLABEL_13:\n  if ( !v6 )\n  {\n    if ( !v7 )\n      goto LABEL_15;\nLABEL_22:\n    close(0);\n    if ( v8 )\n      return v8;\nLABEL_23:\n    *v4 = v9;\n    return v8;\n  }\nLABEL_21:\n  close(1);\n  if ( v7 )\n    goto LABEL_22;\nLABEL_15:\n  if ( !v8 )\n    goto LABEL_23;\n  return v8;\n}\n", 
            "funcStartAddr": "0x4059b0L", 
            "funcEndAddr": "0x405b5fL", 
            "funcName": "sub_4059B0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_405B60(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_623B20 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x405b60L", 
            "funcEndAddr": "0x405bf9L", 
            "funcName": "sub_405B60"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_405C00()\n{\n  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n}\n", 
            "funcStartAddr": "0x405c00L", 
            "funcEndAddr": "0x405c1dL", 
            "funcName": "sub_405C00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405C20(char *a1, __int64 a2)\n{\n  char *v2; // rbx\n  char *v3; // rbp\n  char *v4; // r13\n  __int64 v5; // rbx\n  mbstate_t *v6; // r13\n  wchar_t v8; // er15\n  char *v9; // rbx\n  size_t v10; // rax\n  char *v11; // rbx\n  __int64 v12; // rax\n  size_t v13; // rax\n  wchar_t v14; // eax\n  wchar_t v15; // eax\n  size_t v16; // rax\n  char *v17; // r15\n  __int64 v18; // rax\n  wint_t v19; // ebx\n  wchar_t v20; // eax\n  size_t v21; // rax\n  char *v22; // r15\n  __int64 v23; // rax\n  size_t v24; // rax\n  size_t v25; // rax\n  size_t v26; // rax\n  char *v27; // rbx\n  __int64 v28; // rax\n  size_t v29; // rax\n  char *v30; // r13\n  __int64 v31; // rax\n  size_t v32; // rax\n  char *s; // [rsp+8h] [rbp-C0h]\n  char v34; // [rsp+10h] [rbp-B8h]\n  char v35; // [rsp+10h] [rbp-B8h]\n  mbstate_t ps; // [rsp+14h] [rbp-B4h]\n  char v37; // [rsp+1Ch] [rbp-ACh]\n  char *v38; // [rsp+20h] [rbp-A8h]\n  size_t v39; // [rsp+28h] [rbp-A0h]\n  char v40; // [rsp+30h] [rbp-98h]\n  wchar_t pwc; // [rsp+34h] [rbp-94h]\n  char v42; // [rsp+50h] [rbp-78h]\n  mbstate_t v43; // [rsp+54h] [rbp-74h]\n  char v44; // [rsp+5Ch] [rbp-6Ch]\n  char *v45; // [rsp+60h] [rbp-68h]\n  size_t v46; // [rsp+68h] [rbp-60h]\n  char v47; // [rsp+70h] [rbp-58h]\n  wchar_t v48; // [rsp+74h] [rbp-54h]\n\n  v2 = a1;\n  s = (char *)sub_408620(a2, 2LL);\n  while ( 2 )\n  {\n    if ( !*v2 )\n    {\nLABEL_11:\n      LODWORD(v6) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      v3 = (char *)sub_419CF0(v2, s);\n      if ( !v3 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v4 = &v3[strlen(s)];\n      if ( v2 >= v3 || !((*__ctype_b_loc())[(unsigned __int8)*(v3 - 1)] & 8) )\n      {\n        v5 = (unsigned __int8)*v4;\n        if ( !(_BYTE)v5 || !((*__ctype_b_loc())[v5] & 8) )\n        {\n          LODWORD(v6) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *v3 )\n      {\n        v2 = v3 + 1;\n        if ( v3[1] )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v38 = v2;\n    v6 = &ps;\n    v34 = 0;\n    ps = 0LL;\n    v37 = 0;\n    if ( v2 >= v3 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v34 )\n      {\n        if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n        {\n          v39 = 1LL;\n          v8 = *v38;\n          v40 = 1;\n          pwc = v8;\n          v37 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v34 = 1;\n      }\n      v10 = __ctype_get_mb_cur_max();\n      v11 = v38;\n      sub_4085C0(v38, v10);\n      v12 = sub_40AB50(&pwc, v11);\n      v39 = v12;\n      if ( v12 == -1 )\n      {\n        v8 = pwc;\n        v9 = v38;\n        v40 = 0;\n        v39 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v12 == -2 )\n      {\n        v9 = v38;\n        v13 = strlen(v38);\n        v40 = 0;\n        v8 = pwc;\n        v39 = v13;\n        goto LABEL_19;\n      }\n      if ( v12 )\n      {\n        v8 = pwc;\n      }\n      else\n      {\n        v39 = 1LL;\n        if ( *v38 )\n          goto LABEL_109;\n        v8 = pwc;\n        if ( pwc )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v40 = 1;\n      if ( mbsinit(&ps) )\n        v34 = 0;\n      v37 = 1;\nLABEL_17:\n      if ( !v8 )\nLABEL_111:\n        abort();\n      v9 = v38;\nLABEL_19:\n      v37 = 0;\n      v38 = &v9[v39];\n    }\n    while ( &v9[v39] < v3 );\n    if ( v40 )\n    {\n      LOBYTE(v6) = iswalnum(v8) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(v6) = 1;\nLABEL_36:\n    v38 = v3;\n    v35 = 0;\n    ps = 0LL;\n    v37 = 0;\n    v45 = s;\n    v42 = 0;\n    v43 = 0LL;\n    v44 = 0;\n    while ( 2 )\n    {\n      if ( !v42 )\n      {\n        if ( !(((unsigned int)dword_41E840[((unsigned __int8)*v45 >> 5) & 7] >> *v45) & 1) )\n        {\n          if ( !mbsinit(&v43) )\n            goto LABEL_108;\n          v42 = 1;\n          goto LABEL_46;\n        }\n        v46 = 1LL;\n        v14 = *v45;\n        v47 = 1;\n        v48 = v14;\n        v44 = 1;\n        if ( !v14 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v16 = __ctype_get_mb_cur_max();\n      v17 = v45;\n      sub_4085C0(v45, v16);\n      v18 = sub_40AB50(&v48, v17);\n      v46 = v18;\n      switch ( v18 )\n      {\n        case -1LL:\n          v46 = 1LL;\n          v47 = 0;\n          v44 = 1;\n          goto LABEL_39;\n        case -2LL:\n          v24 = strlen(v45);\n          v47 = 0;\n          v46 = v24;\n          v44 = 1;\n          goto LABEL_39;\n        case 0LL:\n          v46 = 1LL;\n          if ( *v45 )\n            goto LABEL_109;\n          if ( v48 )\n            goto LABEL_110;\n          break;\n      }\n      v47 = 1;\n      if ( mbsinit(&v43) )\n        v42 = 0;\n      v44 = 1;\n      if ( v48 )\n      {\nLABEL_39:\n        if ( v37 )\n        {\n          if ( v40 )\n          {\nLABEL_43:\n            if ( !pwc )\n              goto LABEL_111;\n            goto LABEL_44;\n          }\n        }\n        else\n        {\n          if ( !v35 )\n          {\n            if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n            {\n              v39 = 1LL;\n              v15 = *v38;\n              v40 = 1;\n              pwc = v15;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v35 = 1;\n          }\n          v21 = __ctype_get_mb_cur_max();\n          v22 = v38;\n          sub_4085C0(v38, v21);\n          v23 = sub_40AB50(&pwc, v22);\n          v39 = v23;\n          if ( v23 == -1 )\n          {\n            v39 = 1LL;\n            v40 = 0;\n          }\n          else\n          {\n            if ( v23 != -2 )\n            {\n              if ( !v23 )\n              {\n                v39 = 1LL;\n                if ( *v38 )\n                  goto LABEL_109;\n                if ( pwc )\n                  goto LABEL_110;\n              }\n              v40 = 1;\n              if ( mbsinit(&ps) )\n                v35 = 0;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            v25 = strlen(v38);\n            v40 = 0;\n            v39 = v25;\n          }\n        }\nLABEL_44:\n        v38 += v39;\n        v45 += v46;\n        v37 = 0;\n        v44 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v37 )\n    {\n      v19 = pwc;\n      if ( v40 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v35 )\n    {\n      if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n      {\n        v39 = 1LL;\n        v19 = *v38;\n        v40 = 1;\n        pwc = v19;\n        v37 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v26 = __ctype_get_mb_cur_max();\n    v27 = v38;\n    sub_4085C0(v38, v26);\n    v28 = sub_40AB50(&pwc, v27);\n    v39 = v28;\n    if ( v28 == -1 )\n    {\n      v39 = 1LL;\n      v19 = pwc;\n      v40 = 0;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 == -2 )\n    {\n      v32 = strlen(v38);\n      v40 = 0;\n      v19 = pwc;\n      v39 = v32;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 )\n    {\n      v19 = pwc;\n      goto LABEL_90;\n    }\n    v39 = 1LL;\n    if ( *v38 )\n      goto LABEL_109;\n    v19 = pwc;\n    if ( pwc )\nLABEL_104:\n      sub_405C00();\nLABEL_90:\n    v40 = 1;\n    mbsinit(&ps);\n    v37 = 1;\nLABEL_58:\n    if ( v19 )\n    {\nLABEL_59:\n      if ( !v40 || !iswalnum(v19) )\n        break;\nLABEL_62:\n      v38 = v3;\n      ps = 0LL;\n      v37 = 0;\n      if ( ((unsigned int)dword_41E840[((unsigned __int8)*v3 >> 5) & 7] >> *v3) & 1 )\n      {\n        v39 = 1LL;\n        v20 = *v3;\n        v40 = 1;\n        pwc = v20;\n        v37 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v29 = __ctype_get_mb_cur_max();\n        v30 = v38;\n        sub_4085C0(v38, v29);\n        v31 = sub_40AB50(&pwc, v30);\n        v39 = v31;\n        switch ( v31 )\n        {\n          case -1LL:\n            v39 = 1LL;\n            goto LABEL_65;\n          case -2LL:\n            v39 = strlen(v38);\n            goto LABEL_65;\n          case 0LL:\n            v39 = 1LL;\n            if ( !*v38 )\n            {\n              if ( pwc )\n                goto LABEL_104;\n              break;\n            }\nLABEL_109:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            break;\n        }\n        v40 = 1;\n        mbsinit(&ps);\n        v37 = 1;\nLABEL_64:\n        if ( pwc )\n        {\nLABEL_65:\n          v2 = &v3[v39];\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)v6 )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)v6;\n}\n\n__int64 __fastcall sub_405C20(char *a1, __int64 a2)\n{\n  char *v2; // rbx\n  char *v3; // rbp\n  char *v4; // r13\n  __int64 v5; // rbx\n  mbstate_t *v6; // r13\n  wchar_t v8; // er15\n  char *v9; // rbx\n  size_t v10; // rax\n  char *v11; // rbx\n  __int64 v12; // rax\n  size_t v13; // rax\n  wchar_t v14; // eax\n  wchar_t v15; // eax\n  size_t v16; // rax\n  char *v17; // r15\n  __int64 v18; // rax\n  wint_t v19; // ebx\n  wchar_t v20; // eax\n  size_t v21; // rax\n  char *v22; // r15\n  __int64 v23; // rax\n  size_t v24; // rax\n  size_t v25; // rax\n  size_t v26; // rax\n  char *v27; // rbx\n  __int64 v28; // rax\n  size_t v29; // rax\n  char *v30; // r13\n  __int64 v31; // rax\n  size_t v32; // rax\n  char *s; // [rsp+8h] [rbp-C0h]\n  char v34; // [rsp+10h] [rbp-B8h]\n  char v35; // [rsp+10h] [rbp-B8h]\n  mbstate_t ps; // [rsp+14h] [rbp-B4h]\n  char v37; // [rsp+1Ch] [rbp-ACh]\n  char *v38; // [rsp+20h] [rbp-A8h]\n  size_t v39; // [rsp+28h] [rbp-A0h]\n  char v40; // [rsp+30h] [rbp-98h]\n  wchar_t pwc; // [rsp+34h] [rbp-94h]\n  char v42; // [rsp+50h] [rbp-78h]\n  mbstate_t v43; // [rsp+54h] [rbp-74h]\n  char v44; // [rsp+5Ch] [rbp-6Ch]\n  char *v45; // [rsp+60h] [rbp-68h]\n  size_t v46; // [rsp+68h] [rbp-60h]\n  char v47; // [rsp+70h] [rbp-58h]\n  wchar_t v48; // [rsp+74h] [rbp-54h]\n\n  v2 = a1;\n  s = (char *)sub_408620(a2, 2LL);\n  while ( 2 )\n  {\n    if ( !*v2 )\n    {\nLABEL_11:\n      LODWORD(v6) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      v3 = (char *)sub_419CF0(v2, s);\n      if ( !v3 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v4 = &v3[strlen(s)];\n      if ( v2 >= v3 || !((*__ctype_b_loc())[(unsigned __int8)*(v3 - 1)] & 8) )\n      {\n        v5 = (unsigned __int8)*v4;\n        if ( !(_BYTE)v5 || !((*__ctype_b_loc())[v5] & 8) )\n        {\n          LODWORD(v6) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *v3 )\n      {\n        v2 = v3 + 1;\n        if ( v3[1] )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v38 = v2;\n    v6 = &ps;\n    v34 = 0;\n    ps = 0LL;\n    v37 = 0;\n    if ( v2 >= v3 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v34 )\n      {\n        if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n        {\n          v39 = 1LL;\n          v8 = *v38;\n          v40 = 1;\n          pwc = v8;\n          v37 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v34 = 1;\n      }\n      v10 = __ctype_get_mb_cur_max();\n      v11 = v38;\n      sub_4085C0(v38, v10);\n      v12 = sub_40AB50(&pwc, v11);\n      v39 = v12;\n      if ( v12 == -1 )\n      {\n        v8 = pwc;\n        v9 = v38;\n        v40 = 0;\n        v39 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v12 == -2 )\n      {\n        v9 = v38;\n        v13 = strlen(v38);\n        v40 = 0;\n        v8 = pwc;\n        v39 = v13;\n        goto LABEL_19;\n      }\n      if ( v12 )\n      {\n        v8 = pwc;\n      }\n      else\n      {\n        v39 = 1LL;\n        if ( *v38 )\n          goto LABEL_109;\n        v8 = pwc;\n        if ( pwc )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v40 = 1;\n      if ( mbsinit(&ps) )\n        v34 = 0;\n      v37 = 1;\nLABEL_17:\n      if ( !v8 )\nLABEL_111:\n        abort();\n      v9 = v38;\nLABEL_19:\n      v37 = 0;\n      v38 = &v9[v39];\n    }\n    while ( &v9[v39] < v3 );\n    if ( v40 )\n    {\n      LOBYTE(v6) = iswalnum(v8) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(v6) = 1;\nLABEL_36:\n    v38 = v3;\n    v35 = 0;\n    ps = 0LL;\n    v37 = 0;\n    v45 = s;\n    v42 = 0;\n    v43 = 0LL;\n    v44 = 0;\n    while ( 2 )\n    {\n      if ( !v42 )\n      {\n        if ( !(((unsigned int)dword_41E840[((unsigned __int8)*v45 >> 5) & 7] >> *v45) & 1) )\n        {\n          if ( !mbsinit(&v43) )\n            goto LABEL_108;\n          v42 = 1;\n          goto LABEL_46;\n        }\n        v46 = 1LL;\n        v14 = *v45;\n        v47 = 1;\n        v48 = v14;\n        v44 = 1;\n        if ( !v14 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v16 = __ctype_get_mb_cur_max();\n      v17 = v45;\n      sub_4085C0(v45, v16);\n      v18 = sub_40AB50(&v48, v17);\n      v46 = v18;\n      switch ( v18 )\n      {\n        case -1LL:\n          v46 = 1LL;\n          v47 = 0;\n          v44 = 1;\n          goto LABEL_39;\n        case -2LL:\n          v24 = strlen(v45);\n          v47 = 0;\n          v46 = v24;\n          v44 = 1;\n          goto LABEL_39;\n        case 0LL:\n          v46 = 1LL;\n          if ( *v45 )\n            goto LABEL_109;\n          if ( v48 )\n            goto LABEL_110;\n          break;\n      }\n      v47 = 1;\n      if ( mbsinit(&v43) )\n        v42 = 0;\n      v44 = 1;\n      if ( v48 )\n      {\nLABEL_39:\n        if ( v37 )\n        {\n          if ( v40 )\n          {\nLABEL_43:\n            if ( !pwc )\n              goto LABEL_111;\n            goto LABEL_44;\n          }\n        }\n        else\n        {\n          if ( !v35 )\n          {\n            if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n            {\n              v39 = 1LL;\n              v15 = *v38;\n              v40 = 1;\n              pwc = v15;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v35 = 1;\n          }\n          v21 = __ctype_get_mb_cur_max();\n          v22 = v38;\n          sub_4085C0(v38, v21);\n          v23 = sub_40AB50(&pwc, v22);\n          v39 = v23;\n          if ( v23 == -1 )\n          {\n            v39 = 1LL;\n            v40 = 0;\n          }\n          else\n          {\n            if ( v23 != -2 )\n            {\n              if ( !v23 )\n              {\n                v39 = 1LL;\n                if ( *v38 )\n                  goto LABEL_109;\n                if ( pwc )\n                  goto LABEL_110;\n              }\n              v40 = 1;\n              if ( mbsinit(&ps) )\n                v35 = 0;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            v25 = strlen(v38);\n            v40 = 0;\n            v39 = v25;\n          }\n        }\nLABEL_44:\n        v38 += v39;\n        v45 += v46;\n        v37 = 0;\n        v44 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v37 )\n    {\n      v19 = pwc;\n      if ( v40 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v35 )\n    {\n      if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n      {\n        v39 = 1LL;\n        v19 = *v38;\n        v40 = 1;\n        pwc = v19;\n        v37 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v26 = __ctype_get_mb_cur_max();\n    v27 = v38;\n    sub_4085C0(v38, v26);\n    v28 = sub_40AB50(&pwc, v27);\n    v39 = v28;\n    if ( v28 == -1 )\n    {\n      v39 = 1LL;\n      v19 = pwc;\n      v40 = 0;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 == -2 )\n    {\n      v32 = strlen(v38);\n      v40 = 0;\n      v19 = pwc;\n      v39 = v32;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 )\n    {\n      v19 = pwc;\n      goto LABEL_90;\n    }\n    v39 = 1LL;\n    if ( *v38 )\n      goto LABEL_109;\n    v19 = pwc;\n    if ( pwc )\nLABEL_104:\n      sub_405C00();\nLABEL_90:\n    v40 = 1;\n    mbsinit(&ps);\n    v37 = 1;\nLABEL_58:\n    if ( v19 )\n    {\nLABEL_59:\n      if ( !v40 || !iswalnum(v19) )\n        break;\nLABEL_62:\n      v38 = v3;\n      ps = 0LL;\n      v37 = 0;\n      if ( ((unsigned int)dword_41E840[((unsigned __int8)*v3 >> 5) & 7] >> *v3) & 1 )\n      {\n        v39 = 1LL;\n        v20 = *v3;\n        v40 = 1;\n        pwc = v20;\n        v37 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v29 = __ctype_get_mb_cur_max();\n        v30 = v38;\n        sub_4085C0(v38, v29);\n        v31 = sub_40AB50(&pwc, v30);\n        v39 = v31;\n        switch ( v31 )\n        {\n          case -1LL:\n            v39 = 1LL;\n            goto LABEL_65;\n          case -2LL:\n            v39 = strlen(v38);\n            goto LABEL_65;\n          case 0LL:\n            v39 = 1LL;\n            if ( !*v38 )\n            {\n              if ( pwc )\n                goto LABEL_104;\n              break;\n            }\nLABEL_109:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            break;\n        }\n        v40 = 1;\n        mbsinit(&ps);\n        v37 = 1;\nLABEL_64:\n        if ( pwc )\n        {\nLABEL_65:\n          v2 = &v3[v39];\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)v6 )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)v6;\n}\n", 
            "funcStartAddr": "0x401fd0L", 
            "funcEndAddr": "0x401fd5L", 
            "funcName": "sub_405C20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405C20(char *a1, __int64 a2)\n{\n  char *v2; // rbx\n  char *v3; // rbp\n  char *v4; // r13\n  __int64 v5; // rbx\n  mbstate_t *v6; // r13\n  wchar_t v8; // er15\n  char *v9; // rbx\n  size_t v10; // rax\n  char *v11; // rbx\n  __int64 v12; // rax\n  size_t v13; // rax\n  wchar_t v14; // eax\n  wchar_t v15; // eax\n  size_t v16; // rax\n  char *v17; // r15\n  __int64 v18; // rax\n  wint_t v19; // ebx\n  wchar_t v20; // eax\n  size_t v21; // rax\n  char *v22; // r15\n  __int64 v23; // rax\n  size_t v24; // rax\n  size_t v25; // rax\n  size_t v26; // rax\n  char *v27; // rbx\n  __int64 v28; // rax\n  size_t v29; // rax\n  char *v30; // r13\n  __int64 v31; // rax\n  size_t v32; // rax\n  char *s; // [rsp+8h] [rbp-C0h]\n  char v34; // [rsp+10h] [rbp-B8h]\n  char v35; // [rsp+10h] [rbp-B8h]\n  mbstate_t ps; // [rsp+14h] [rbp-B4h]\n  char v37; // [rsp+1Ch] [rbp-ACh]\n  char *v38; // [rsp+20h] [rbp-A8h]\n  size_t v39; // [rsp+28h] [rbp-A0h]\n  char v40; // [rsp+30h] [rbp-98h]\n  wchar_t pwc; // [rsp+34h] [rbp-94h]\n  char v42; // [rsp+50h] [rbp-78h]\n  mbstate_t v43; // [rsp+54h] [rbp-74h]\n  char v44; // [rsp+5Ch] [rbp-6Ch]\n  char *v45; // [rsp+60h] [rbp-68h]\n  size_t v46; // [rsp+68h] [rbp-60h]\n  char v47; // [rsp+70h] [rbp-58h]\n  wchar_t v48; // [rsp+74h] [rbp-54h]\n\n  v2 = a1;\n  s = (char *)sub_408620(a2, 2LL);\n  while ( 2 )\n  {\n    if ( !*v2 )\n    {\nLABEL_11:\n      LODWORD(v6) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      v3 = (char *)sub_419CF0(v2, s);\n      if ( !v3 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v4 = &v3[strlen(s)];\n      if ( v2 >= v3 || !((*__ctype_b_loc())[(unsigned __int8)*(v3 - 1)] & 8) )\n      {\n        v5 = (unsigned __int8)*v4;\n        if ( !(_BYTE)v5 || !((*__ctype_b_loc())[v5] & 8) )\n        {\n          LODWORD(v6) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *v3 )\n      {\n        v2 = v3 + 1;\n        if ( v3[1] )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v38 = v2;\n    v6 = &ps;\n    v34 = 0;\n    ps = 0LL;\n    v37 = 0;\n    if ( v2 >= v3 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v34 )\n      {\n        if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n        {\n          v39 = 1LL;\n          v8 = *v38;\n          v40 = 1;\n          pwc = v8;\n          v37 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v34 = 1;\n      }\n      v10 = __ctype_get_mb_cur_max();\n      v11 = v38;\n      sub_4085C0(v38, v10);\n      v12 = sub_40AB50(&pwc, v11);\n      v39 = v12;\n      if ( v12 == -1 )\n      {\n        v8 = pwc;\n        v9 = v38;\n        v40 = 0;\n        v39 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v12 == -2 )\n      {\n        v9 = v38;\n        v13 = strlen(v38);\n        v40 = 0;\n        v8 = pwc;\n        v39 = v13;\n        goto LABEL_19;\n      }\n      if ( v12 )\n      {\n        v8 = pwc;\n      }\n      else\n      {\n        v39 = 1LL;\n        if ( *v38 )\n          goto LABEL_109;\n        v8 = pwc;\n        if ( pwc )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v40 = 1;\n      if ( mbsinit(&ps) )\n        v34 = 0;\n      v37 = 1;\nLABEL_17:\n      if ( !v8 )\nLABEL_111:\n        abort();\n      v9 = v38;\nLABEL_19:\n      v37 = 0;\n      v38 = &v9[v39];\n    }\n    while ( &v9[v39] < v3 );\n    if ( v40 )\n    {\n      LOBYTE(v6) = iswalnum(v8) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(v6) = 1;\nLABEL_36:\n    v38 = v3;\n    v35 = 0;\n    ps = 0LL;\n    v37 = 0;\n    v45 = s;\n    v42 = 0;\n    v43 = 0LL;\n    v44 = 0;\n    while ( 2 )\n    {\n      if ( !v42 )\n      {\n        if ( !(((unsigned int)dword_41E840[((unsigned __int8)*v45 >> 5) & 7] >> *v45) & 1) )\n        {\n          if ( !mbsinit(&v43) )\n            goto LABEL_108;\n          v42 = 1;\n          goto LABEL_46;\n        }\n        v46 = 1LL;\n        v14 = *v45;\n        v47 = 1;\n        v48 = v14;\n        v44 = 1;\n        if ( !v14 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v16 = __ctype_get_mb_cur_max();\n      v17 = v45;\n      sub_4085C0(v45, v16);\n      v18 = sub_40AB50(&v48, v17);\n      v46 = v18;\n      switch ( v18 )\n      {\n        case -1LL:\n          v46 = 1LL;\n          v47 = 0;\n          v44 = 1;\n          goto LABEL_39;\n        case -2LL:\n          v24 = strlen(v45);\n          v47 = 0;\n          v46 = v24;\n          v44 = 1;\n          goto LABEL_39;\n        case 0LL:\n          v46 = 1LL;\n          if ( *v45 )\n            goto LABEL_109;\n          if ( v48 )\n            goto LABEL_110;\n          break;\n      }\n      v47 = 1;\n      if ( mbsinit(&v43) )\n        v42 = 0;\n      v44 = 1;\n      if ( v48 )\n      {\nLABEL_39:\n        if ( v37 )\n        {\n          if ( v40 )\n          {\nLABEL_43:\n            if ( !pwc )\n              goto LABEL_111;\n            goto LABEL_44;\n          }\n        }\n        else\n        {\n          if ( !v35 )\n          {\n            if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n            {\n              v39 = 1LL;\n              v15 = *v38;\n              v40 = 1;\n              pwc = v15;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v35 = 1;\n          }\n          v21 = __ctype_get_mb_cur_max();\n          v22 = v38;\n          sub_4085C0(v38, v21);\n          v23 = sub_40AB50(&pwc, v22);\n          v39 = v23;\n          if ( v23 == -1 )\n          {\n            v39 = 1LL;\n            v40 = 0;\n          }\n          else\n          {\n            if ( v23 != -2 )\n            {\n              if ( !v23 )\n              {\n                v39 = 1LL;\n                if ( *v38 )\n                  goto LABEL_109;\n                if ( pwc )\n                  goto LABEL_110;\n              }\n              v40 = 1;\n              if ( mbsinit(&ps) )\n                v35 = 0;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            v25 = strlen(v38);\n            v40 = 0;\n            v39 = v25;\n          }\n        }\nLABEL_44:\n        v38 += v39;\n        v45 += v46;\n        v37 = 0;\n        v44 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v37 )\n    {\n      v19 = pwc;\n      if ( v40 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v35 )\n    {\n      if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n      {\n        v39 = 1LL;\n        v19 = *v38;\n        v40 = 1;\n        pwc = v19;\n        v37 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v26 = __ctype_get_mb_cur_max();\n    v27 = v38;\n    sub_4085C0(v38, v26);\n    v28 = sub_40AB50(&pwc, v27);\n    v39 = v28;\n    if ( v28 == -1 )\n    {\n      v39 = 1LL;\n      v19 = pwc;\n      v40 = 0;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 == -2 )\n    {\n      v32 = strlen(v38);\n      v40 = 0;\n      v19 = pwc;\n      v39 = v32;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 )\n    {\n      v19 = pwc;\n      goto LABEL_90;\n    }\n    v39 = 1LL;\n    if ( *v38 )\n      goto LABEL_109;\n    v19 = pwc;\n    if ( pwc )\nLABEL_104:\n      sub_405C00();\nLABEL_90:\n    v40 = 1;\n    mbsinit(&ps);\n    v37 = 1;\nLABEL_58:\n    if ( v19 )\n    {\nLABEL_59:\n      if ( !v40 || !iswalnum(v19) )\n        break;\nLABEL_62:\n      v38 = v3;\n      ps = 0LL;\n      v37 = 0;\n      if ( ((unsigned int)dword_41E840[((unsigned __int8)*v3 >> 5) & 7] >> *v3) & 1 )\n      {\n        v39 = 1LL;\n        v20 = *v3;\n        v40 = 1;\n        pwc = v20;\n        v37 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v29 = __ctype_get_mb_cur_max();\n        v30 = v38;\n        sub_4085C0(v38, v29);\n        v31 = sub_40AB50(&pwc, v30);\n        v39 = v31;\n        switch ( v31 )\n        {\n          case -1LL:\n            v39 = 1LL;\n            goto LABEL_65;\n          case -2LL:\n            v39 = strlen(v38);\n            goto LABEL_65;\n          case 0LL:\n            v39 = 1LL;\n            if ( !*v38 )\n            {\n              if ( pwc )\n                goto LABEL_104;\n              break;\n            }\nLABEL_109:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            break;\n        }\n        v40 = 1;\n        mbsinit(&ps);\n        v37 = 1;\nLABEL_64:\n        if ( pwc )\n        {\nLABEL_65:\n          v2 = &v3[v39];\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)v6 )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)v6;\n}\n\n__int64 __fastcall sub_405C20(char *a1, __int64 a2)\n{\n  char *v2; // rbx\n  char *v3; // rbp\n  char *v4; // r13\n  __int64 v5; // rbx\n  mbstate_t *v6; // r13\n  wchar_t v8; // er15\n  char *v9; // rbx\n  size_t v10; // rax\n  char *v11; // rbx\n  __int64 v12; // rax\n  size_t v13; // rax\n  wchar_t v14; // eax\n  wchar_t v15; // eax\n  size_t v16; // rax\n  char *v17; // r15\n  __int64 v18; // rax\n  wint_t v19; // ebx\n  wchar_t v20; // eax\n  size_t v21; // rax\n  char *v22; // r15\n  __int64 v23; // rax\n  size_t v24; // rax\n  size_t v25; // rax\n  size_t v26; // rax\n  char *v27; // rbx\n  __int64 v28; // rax\n  size_t v29; // rax\n  char *v30; // r13\n  __int64 v31; // rax\n  size_t v32; // rax\n  char *s; // [rsp+8h] [rbp-C0h]\n  char v34; // [rsp+10h] [rbp-B8h]\n  char v35; // [rsp+10h] [rbp-B8h]\n  mbstate_t ps; // [rsp+14h] [rbp-B4h]\n  char v37; // [rsp+1Ch] [rbp-ACh]\n  char *v38; // [rsp+20h] [rbp-A8h]\n  size_t v39; // [rsp+28h] [rbp-A0h]\n  char v40; // [rsp+30h] [rbp-98h]\n  wchar_t pwc; // [rsp+34h] [rbp-94h]\n  char v42; // [rsp+50h] [rbp-78h]\n  mbstate_t v43; // [rsp+54h] [rbp-74h]\n  char v44; // [rsp+5Ch] [rbp-6Ch]\n  char *v45; // [rsp+60h] [rbp-68h]\n  size_t v46; // [rsp+68h] [rbp-60h]\n  char v47; // [rsp+70h] [rbp-58h]\n  wchar_t v48; // [rsp+74h] [rbp-54h]\n\n  v2 = a1;\n  s = (char *)sub_408620(a2, 2LL);\n  while ( 2 )\n  {\n    if ( !*v2 )\n    {\nLABEL_11:\n      LODWORD(v6) = 0;\n      goto LABEL_12;\n    }\n    while ( 1 )\n    {\n      v3 = (char *)sub_419CF0(v2, s);\n      if ( !v3 )\n        goto LABEL_11;\n      if ( __ctype_get_mb_cur_max() > 1 )\n        break;\n      v4 = &v3[strlen(s)];\n      if ( v2 >= v3 || !((*__ctype_b_loc())[(unsigned __int8)*(v3 - 1)] & 8) )\n      {\n        v5 = (unsigned __int8)*v4;\n        if ( !(_BYTE)v5 || !((*__ctype_b_loc())[v5] & 8) )\n        {\n          LODWORD(v6) = 1;\n          goto LABEL_12;\n        }\n      }\n      if ( *v3 )\n      {\n        v2 = v3 + 1;\n        if ( v3[1] )\n          continue;\n      }\n      goto LABEL_11;\n    }\n    v38 = v2;\n    v6 = &ps;\n    v34 = 0;\n    ps = 0LL;\n    v37 = 0;\n    if ( v2 >= v3 )\n      goto LABEL_84;\n    do\n    {\n      if ( !v34 )\n      {\n        if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n        {\n          v39 = 1LL;\n          v8 = *v38;\n          v40 = 1;\n          pwc = v8;\n          v37 = 1;\n          goto LABEL_17;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_108;\n        v34 = 1;\n      }\n      v10 = __ctype_get_mb_cur_max();\n      v11 = v38;\n      sub_4085C0(v38, v10);\n      v12 = sub_40AB50(&pwc, v11);\n      v39 = v12;\n      if ( v12 == -1 )\n      {\n        v8 = pwc;\n        v9 = v38;\n        v40 = 0;\n        v39 = 1LL;\n        goto LABEL_19;\n      }\n      if ( v12 == -2 )\n      {\n        v9 = v38;\n        v13 = strlen(v38);\n        v40 = 0;\n        v8 = pwc;\n        v39 = v13;\n        goto LABEL_19;\n      }\n      if ( v12 )\n      {\n        v8 = pwc;\n      }\n      else\n      {\n        v39 = 1LL;\n        if ( *v38 )\n          goto LABEL_109;\n        v8 = pwc;\n        if ( pwc )\nLABEL_110:\n          __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n      }\n      v40 = 1;\n      if ( mbsinit(&ps) )\n        v34 = 0;\n      v37 = 1;\nLABEL_17:\n      if ( !v8 )\nLABEL_111:\n        abort();\n      v9 = v38;\nLABEL_19:\n      v37 = 0;\n      v38 = &v9[v39];\n    }\n    while ( &v9[v39] < v3 );\n    if ( v40 )\n    {\n      LOBYTE(v6) = iswalnum(v8) == 0;\n      goto LABEL_36;\n    }\nLABEL_84:\n    LODWORD(v6) = 1;\nLABEL_36:\n    v38 = v3;\n    v35 = 0;\n    ps = 0LL;\n    v37 = 0;\n    v45 = s;\n    v42 = 0;\n    v43 = 0LL;\n    v44 = 0;\n    while ( 2 )\n    {\n      if ( !v42 )\n      {\n        if ( !(((unsigned int)dword_41E840[((unsigned __int8)*v45 >> 5) & 7] >> *v45) & 1) )\n        {\n          if ( !mbsinit(&v43) )\n            goto LABEL_108;\n          v42 = 1;\n          goto LABEL_46;\n        }\n        v46 = 1LL;\n        v14 = *v45;\n        v47 = 1;\n        v48 = v14;\n        v44 = 1;\n        if ( !v14 )\n          break;\n        goto LABEL_39;\n      }\nLABEL_46:\n      v16 = __ctype_get_mb_cur_max();\n      v17 = v45;\n      sub_4085C0(v45, v16);\n      v18 = sub_40AB50(&v48, v17);\n      v46 = v18;\n      switch ( v18 )\n      {\n        case -1LL:\n          v46 = 1LL;\n          v47 = 0;\n          v44 = 1;\n          goto LABEL_39;\n        case -2LL:\n          v24 = strlen(v45);\n          v47 = 0;\n          v46 = v24;\n          v44 = 1;\n          goto LABEL_39;\n        case 0LL:\n          v46 = 1LL;\n          if ( *v45 )\n            goto LABEL_109;\n          if ( v48 )\n            goto LABEL_110;\n          break;\n      }\n      v47 = 1;\n      if ( mbsinit(&v43) )\n        v42 = 0;\n      v44 = 1;\n      if ( v48 )\n      {\nLABEL_39:\n        if ( v37 )\n        {\n          if ( v40 )\n          {\nLABEL_43:\n            if ( !pwc )\n              goto LABEL_111;\n            goto LABEL_44;\n          }\n        }\n        else\n        {\n          if ( !v35 )\n          {\n            if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n            {\n              v39 = 1LL;\n              v15 = *v38;\n              v40 = 1;\n              pwc = v15;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            if ( !mbsinit(&ps) )\n              goto LABEL_108;\n            v35 = 1;\n          }\n          v21 = __ctype_get_mb_cur_max();\n          v22 = v38;\n          sub_4085C0(v38, v21);\n          v23 = sub_40AB50(&pwc, v22);\n          v39 = v23;\n          if ( v23 == -1 )\n          {\n            v39 = 1LL;\n            v40 = 0;\n          }\n          else\n          {\n            if ( v23 != -2 )\n            {\n              if ( !v23 )\n              {\n                v39 = 1LL;\n                if ( *v38 )\n                  goto LABEL_109;\n                if ( pwc )\n                  goto LABEL_110;\n              }\n              v40 = 1;\n              if ( mbsinit(&ps) )\n                v35 = 0;\n              v37 = 1;\n              goto LABEL_43;\n            }\n            v25 = strlen(v38);\n            v40 = 0;\n            v39 = v25;\n          }\n        }\nLABEL_44:\n        v38 += v39;\n        v45 += v46;\n        v37 = 0;\n        v44 = 0;\n        continue;\n      }\n      break;\n    }\n    if ( v37 )\n    {\n      v19 = pwc;\n      if ( v40 )\n        goto LABEL_58;\n      goto LABEL_59;\n    }\n    if ( !v35 )\n    {\n      if ( ((unsigned int)dword_41E840[((unsigned __int8)*v38 >> 5) & 7] >> *v38) & 1 )\n      {\n        v39 = 1LL;\n        v19 = *v38;\n        v40 = 1;\n        pwc = v19;\n        v37 = 1;\n        goto LABEL_58;\n      }\n      if ( !mbsinit(&ps) )\n        goto LABEL_108;\n    }\n    v26 = __ctype_get_mb_cur_max();\n    v27 = v38;\n    sub_4085C0(v38, v26);\n    v28 = sub_40AB50(&pwc, v27);\n    v39 = v28;\n    if ( v28 == -1 )\n    {\n      v39 = 1LL;\n      v19 = pwc;\n      v40 = 0;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 == -2 )\n    {\n      v32 = strlen(v38);\n      v40 = 0;\n      v19 = pwc;\n      v39 = v32;\n      v37 = 1;\n      goto LABEL_59;\n    }\n    if ( v28 )\n    {\n      v19 = pwc;\n      goto LABEL_90;\n    }\n    v39 = 1LL;\n    if ( *v38 )\n      goto LABEL_109;\n    v19 = pwc;\n    if ( pwc )\nLABEL_104:\n      sub_405C00();\nLABEL_90:\n    v40 = 1;\n    mbsinit(&ps);\n    v37 = 1;\nLABEL_58:\n    if ( v19 )\n    {\nLABEL_59:\n      if ( !v40 || !iswalnum(v19) )\n        break;\nLABEL_62:\n      v38 = v3;\n      ps = 0LL;\n      v37 = 0;\n      if ( ((unsigned int)dword_41E840[((unsigned __int8)*v3 >> 5) & 7] >> *v3) & 1 )\n      {\n        v39 = 1LL;\n        v20 = *v3;\n        v40 = 1;\n        pwc = v20;\n        v37 = 1;\n        goto LABEL_64;\n      }\n      if ( mbsinit(&ps) )\n      {\n        v29 = __ctype_get_mb_cur_max();\n        v30 = v38;\n        sub_4085C0(v38, v29);\n        v31 = sub_40AB50(&pwc, v30);\n        v39 = v31;\n        switch ( v31 )\n        {\n          case -1LL:\n            v39 = 1LL;\n            goto LABEL_65;\n          case -2LL:\n            v39 = strlen(v38);\n            goto LABEL_65;\n          case 0LL:\n            v39 = 1LL;\n            if ( !*v38 )\n            {\n              if ( pwc )\n                goto LABEL_104;\n              break;\n            }\nLABEL_109:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            break;\n        }\n        v40 = 1;\n        mbsinit(&ps);\n        v37 = 1;\nLABEL_64:\n        if ( pwc )\n        {\nLABEL_65:\n          v2 = &v3[v39];\n          continue;\n        }\n        goto LABEL_11;\n      }\nLABEL_108:\n      __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n    }\n    break;\n  }\n  if ( !(_BYTE)v6 )\n    goto LABEL_62;\nLABEL_12:\n  free(s);\n  return (unsigned int)v6;\n}\n", 
            "funcStartAddr": "0x401fd0L", 
            "funcEndAddr": "0x401fd5L", 
            "funcName": "sub_405C20"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_406550(char *s2, char *s)\n{\n  char *v2; // rbx\n  char *v3; // r13\n  const char *v4; // r14\n  char *v5; // r15\n  char *v6; // r12\n  char *v7; // r14\n  char *v8; // rbp\n  size_t v10; // rbx\n  size_t v11; // rax\n  __int64 v12; // rbx\n  size_t v13; // rax\n  size_t v14; // r15\n  void *v15; // rax\n  char *v16; // rax\n  char *ptr; // [rsp+8h] [rbp-40h]\n\n  v2 = s;\n  v3 = dcgettext(0LL, s2, 5);\n  v4 = (const char *)sub_418B40();\n  if ( !(unsigned int)sub_418A20(v4, \"UTF-8\") )\n  {\n    if ( s )\n    {\n      v5 = s;\n      v6 = s;\n    }\n    else\n    {\n      v5 = 0LL;\n      v6 = s2;\n    }\n    v7 = 0LL;\nLABEL_5:\n    if ( !strcmp(v3, s2) )\n      return v6;\n    v8 = 0LL;\n    if ( (unsigned __int8)sub_405C20(v3, (__int64)s2) )\n      goto LABEL_11;\n    goto LABEL_7;\n  }\n  v6 = (char *)sub_409440(s, \"UTF-8\", v4);\n  v13 = strlen(v4);\n  v14 = v13;\n  v15 = (void *)sub_409160(v13 + 11);\n  v16 = (char *)memcpy(v15, v4, v14);\n  strcpy(&v16[v14], \"//TRANSLIT\");\n  ptr = v16;\n  v7 = (char *)sub_409440(s, \"UTF-8\", v16);\n  free(ptr);\n  if ( !v7 )\n  {\n    if ( v6 )\n      goto LABEL_24;\n    goto LABEL_33;\n  }\n  if ( strchr(v7, 63) )\n  {\n    free(v7);\n    if ( v6 )\n    {\nLABEL_24:\n      if ( !strcmp(v3, s2) )\n        return v6;\n      v5 = 0LL;\n      v7 = 0LL;\n      goto LABEL_26;\n    }\nLABEL_33:\n    v6 = s2;\n    v5 = 0LL;\n    v2 = 0LL;\n    v7 = 0LL;\n    goto LABEL_5;\n  }\n  if ( !v6 )\n  {\n    v5 = v7;\n    v2 = 0LL;\n    v6 = v7;\n    goto LABEL_5;\n  }\n  v5 = v7;\n  if ( strcmp(v3, s2) )\n  {\nLABEL_26:\n    if ( (unsigned __int8)sub_405C20(v3, (__int64)s2) )\n    {\n      v8 = v6;\n      goto LABEL_10;\n    }\n    v2 = v6;\n    v8 = v6;\nLABEL_7:\n    if ( (!v2 || !(unsigned __int8)sub_405C20(v3, (__int64)v2))\n      && (!v5 || !(unsigned __int8)sub_405C20(v3, (__int64)v5)) )\n    {\n      v10 = strlen(v3);\n      v11 = strlen(v6);\n      v12 = sub_409160(v10 + v11 + 4);\n      __sprintf_chk(v12, 1LL, -1LL, \"%s (%s)\", v3);\n      if ( v8 )\n        free(v8);\n      v6 = (char *)v12;\n      if ( !v7 )\n        return v6;\nLABEL_12:\n      free(v7);\n      return v6;\n    }\n    if ( !v8 )\n    {\nLABEL_11:\n      v6 = v3;\n      if ( !v7 )\n        return v6;\n      goto LABEL_12;\n    }\nLABEL_10:\n    free(v8);\n    goto LABEL_11;\n  }\n  if ( v6 != v7 )\n    free(v7);\n  return v6;\n}\n", 
            "funcStartAddr": "0x406550L", 
            "funcEndAddr": "0x4067d0L", 
            "funcName": "sub_406550"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4067D0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  __int64 v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_418B40();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_41C56E;\n      if ( !v5 )\n        v2 = (char *)&unk_41C563;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_41C56A;\n    if ( !v5 )\n      v2 = (char *)&unk_41C567;\n    return v2;\n  }\n  v6 = 4308581LL;\n  if ( a2 != 9 )\n    v6 = 4310336LL;\n  return (char *)v6;\n}\n", 
            "funcStartAddr": "0x4067d0L", 
            "funcEndAddr": "0x4068c2L", 
            "funcName": "sub_4067D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4068D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4068D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4068D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4068D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4068D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40AB50((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4068D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4068D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \".%s \\\"\" + 4;\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4067D0(\"`\", v11);\n        v47 = sub_4067D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_4068D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4068D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4068D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4068D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4068D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40AB50((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4068D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4068D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \".%s \\\"\" + 4;\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4067D0(\"`\", v11);\n        v47 = sub_4067D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401fd5L", 
            "funcEndAddr": "0x401fdaL", 
            "funcName": "sub_4068D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4068D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4068D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4068D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4068D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4068D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40AB50((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4068D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4068D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \".%s \\\"\" + 4;\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4067D0(\"`\", v11);\n        v47 = sub_4067D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_4068D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_4068D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"*iter->cur.ptr == '\\\\0'\" + 21;\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_4068D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_4068D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_4068D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_4068D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_4068D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40AB50((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_4068D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_4068D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \".%s \\\"\" + 4;\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \".%s \\\"\" + 4;\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4067D0(\"`\", v11);\n        v47 = sub_4067D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401fd5L", 
            "funcEndAddr": "0x401fdaL", 
            "funcName": "sub_4068D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407B00(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_623338;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_623350 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4093B0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_623338 == &xmmword_623340 )\n    {\n      v8 = (__int128 *)sub_4091C0(0LL, v10);\n      off_623338 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_623340);\n    }\n    else\n    {\n      off_623338 = (__int128 *)sub_4091C0(off_623338, v10);\n      v8 = off_623338;\n    }\n    memset(&v8[dword_623350], 0, 16LL * ((int)a1 + 1 - dword_623350));\n    dword_623350 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4068D0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_623B40 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_409160(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4068D0(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_407B00(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_623338;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_623350 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4093B0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_623338 == &xmmword_623340 )\n    {\n      v8 = (__int128 *)sub_4091C0(0LL, v10);\n      off_623338 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_623340);\n    }\n    else\n    {\n      off_623338 = (__int128 *)sub_4091C0(off_623338, v10);\n      v8 = off_623338;\n    }\n    memset(&v8[dword_623350], 0, 16LL * ((int)a1 + 1 - dword_623350));\n    dword_623350 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4068D0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_623B40 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_409160(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4068D0(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x401fdaL", 
            "funcEndAddr": "0x401fdfL", 
            "funcName": "sub_407B00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407B00(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_623338;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_623350 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4093B0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_623338 == &xmmword_623340 )\n    {\n      v8 = (__int128 *)sub_4091C0(0LL, v10);\n      off_623338 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_623340);\n    }\n    else\n    {\n      off_623338 = (__int128 *)sub_4091C0(off_623338, v10);\n      v8 = off_623338;\n    }\n    memset(&v8[dword_623350], 0, 16LL * ((int)a1 + 1 - dword_623350));\n    dword_623350 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4068D0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_623B40 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_409160(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4068D0(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_407B00(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_623338;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_623350 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4093B0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_623338 == &xmmword_623340 )\n    {\n      v8 = (__int128 *)sub_4091C0(0LL, v10);\n      off_623338 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_623340);\n    }\n    else\n    {\n      off_623338 = (__int128 *)sub_4091C0(off_623338, v10);\n      v8 = off_623338;\n    }\n    memset(&v8[dword_623350], 0, 16LL * ((int)a1 + 1 - dword_623350));\n    dword_623350 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4068D0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_623B40 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_409160(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4068D0(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x401fdaL", 
            "funcEndAddr": "0x401fdfL", 
            "funcName": "sub_407B00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408020(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408020(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401fdfL", 
            "funcEndAddr": "0x401fe4L", 
            "funcName": "sub_408020"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408020(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408020(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401fdfL", 
            "funcEndAddr": "0x401fe4L", 
            "funcName": "sub_408020"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408090(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407B00(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_408090(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407B00(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401fe4L", 
            "funcEndAddr": "0x401fe9L", 
            "funcName": "sub_408090"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408090(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407B00(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_408090(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407B00(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401fe4L", 
            "funcEndAddr": "0x401fe9L", 
            "funcName": "sub_408090"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408120(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_623C70;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_623C40);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_623C50);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_623C60);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_407B00(0LL, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x408120L", 
            "funcEndAddr": "0x408190L", 
            "funcName": "sub_408120"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4081A0(char *a1)\n{\n  return sub_408120(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x4081a0L", 
            "funcEndAddr": "0x4081b1L", 
            "funcName": "sub_4081A0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4081D0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4081D0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401fe9L", 
            "funcEndAddr": "0x401feeL", 
            "funcName": "sub_4081D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4081D0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4081D0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407B00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401fe9L", 
            "funcEndAddr": "0x401feeL", 
            "funcName": "sub_4081D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408240(__int64 a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_623C40);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_623C50);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_623C60);\n  v9 = qword_623C70;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_407B00(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x408240L", 
            "funcEndAddr": "0x4082acL", 
            "funcName": "sub_408240"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408330(__int64 a1, char *a2)\n{\n  return sub_407B00(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_623300);\n}\n", 
            "funcStartAddr": "0x408330L", 
            "funcEndAddr": "0x408341L", 
            "funcName": "sub_408330"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408350(char *a1)\n{\n  return sub_407B00(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_623300);\n}\n", 
            "funcStartAddr": "0x408350L", 
            "funcEndAddr": "0x408366L", 
            "funcName": "sub_408350"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_408370(FILE *stream, unsigned __int64 *a2)\n{\n  int v2; // eax\n  size_t v3; // rbx\n  char *v4; // r12\n  unsigned __int64 v5; // rbp\n  size_t v6; // rax\n  char *v7; // rax\n  size_t v8; // r14\n  size_t v9; // rax\n  int *v10; // r14\n  int v11; // er15\n  int *v13; // rax\n  void *v14; // rdi\n  void *v15; // rdi\n  int *v16; // r14\n  __off_t v17; // rax\n  char *v18; // rax\n  struct stat stat_buf; // [rsp+10h] [rbp-C8h]\n\n  v2 = fileno(stream);\n  if ( __fxstat(1, v2, &stat_buf) < 0\n    || (stat_buf.st_mode & 0xF000) != 0x8000\n    || (v17 = ftello(stream), v17 < 0)\n    || stat_buf.st_size <= v17 )\n  {\n    v3 = 0x2000LL;\n  }\n  else\n  {\n    v3 = stat_buf.st_size - v17 + 1;\n  }\n  v4 = (char *)malloc(v3);\n  if ( v4 )\n  {\n    v5 = 0LL;\n    while ( 1 )\n    {\n      v8 = v3 - v5;\n      v9 = fread(&v4[v5], 1uLL, v3 - v5, stream);\n      v5 += v9;\n      if ( v8 != v9 )\n        break;\n      if ( v3 == -1LL )\n      {\n        v15 = v4;\n        v4 = 0LL;\n        v16 = __errno_location();\n        free(v15);\n        *v16 = 12;\n        return v4;\n      }\n      v6 = v3 + (v3 >> 1);\n      if ( ~(v3 >> 1) <= v3 )\n        v6 = -1LL;\n      v3 = v6;\n      v7 = (char *)realloc(v4, v6);\n      if ( !v7 )\n      {\n        v13 = __errno_location();\n        v11 = *v13;\n        v10 = v13;\n        goto LABEL_17;\n      }\n      v4 = v7;\n    }\n    v10 = __errno_location();\n    v11 = *v10;\n    if ( ferror(stream) )\n    {\nLABEL_17:\n      v14 = v4;\n      v4 = 0LL;\n      free(v14);\n      *v10 = v11;\n      return v4;\n    }\n    if ( v3 - 1 > v5 )\n    {\n      v18 = (char *)realloc(v4, v5 + 1);\n      if ( v18 )\n        v4 = v18;\n    }\n    v4[v5] = 0;\n    *a2 = v5;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x408370L", 
            "funcEndAddr": "0x408503L", 
            "funcName": "sub_408370"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4085A0(const char *a1, unsigned __int64 *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rbp\n  int *v5; // r12\n  int v6; // er13\n\n  v2 = fopen(a1, \"r\");\n  if ( !v2 )\n    return 0LL;\n  v3 = v2;\n  v4 = sub_408370(v2, a2);\n  v5 = __errno_location();\n  v6 = *v5;\n  if ( !(unsigned int)sub_409BC0(v3) )\n    return v4;\n  if ( v4 )\n  {\n    v6 = *v5;\n    free(v4);\n  }\n  *v5 = v6;\n  return 0LL;\n}\n\nchar *__fastcall sub_4085A0(const char *a1, unsigned __int64 *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rbp\n  int *v5; // r12\n  int v6; // er13\n\n  v2 = fopen(a1, \"r\");\n  if ( !v2 )\n    return 0LL;\n  v3 = v2;\n  v4 = sub_408370(v2, a2);\n  v5 = __errno_location();\n  v6 = *v5;\n  if ( !(unsigned int)sub_409BC0(v3) )\n    return v4;\n  if ( v4 )\n  {\n    v6 = *v5;\n    free(v4);\n  }\n  *v5 = v6;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x408510L", 
            "funcEndAddr": "0x408595L", 
            "funcName": "sub_4085A0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4085A0(const char *a1, unsigned __int64 *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rbp\n  int *v5; // r12\n  int v6; // er13\n\n  v2 = fopen(a1, \"r\");\n  if ( !v2 )\n    return 0LL;\n  v3 = v2;\n  v4 = sub_408370(v2, a2);\n  v5 = __errno_location();\n  v6 = *v5;\n  if ( !(unsigned int)sub_409BC0(v3) )\n    return v4;\n  if ( v4 )\n  {\n    v6 = *v5;\n    free(v4);\n  }\n  *v5 = v6;\n  return 0LL;\n}\n\nchar *__fastcall sub_4085A0(const char *a1, unsigned __int64 *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rbp\n  int *v5; // r12\n  int v6; // er13\n\n  v2 = fopen(a1, \"r\");\n  if ( !v2 )\n    return 0LL;\n  v3 = v2;\n  v4 = sub_408370(v2, a2);\n  v5 = __errno_location();\n  v6 = *v5;\n  if ( !(unsigned int)sub_409BC0(v3) )\n    return v4;\n  if ( v4 )\n  {\n    v6 = *v5;\n    free(v4);\n  }\n  *v5 = v6;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x408510L", 
            "funcEndAddr": "0x408595L", 
            "funcName": "sub_4085A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4085C0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rax\n  __int64 v4; // rsi\n  bool v5; // zf\n  __int64 result; // rax\n\n  v2 = a2;\n  v3 = sub_40ABD0(a1, 0LL, a2);\n  v4 = v3 - a1 + 1;\n  v5 = v3 == 0;\n  result = v2;\n  if ( !v5 )\n    result = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x4085c0L", 
            "funcEndAddr": "0x4085f1L", 
            "funcName": "sub_4085C0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_408600()\n{\n  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbiter.h\", 0xAAu, \"mbiter_multi_next\");\n}\n", 
            "funcStartAddr": "0x408600L", 
            "funcEndAddr": "0x40861dL", 
            "funcName": "sub_408600"
        }, 
        {
            "decompiledFuncCode": "char *__usercall sub_408620@<rax>(const char *a1@<rdi>, __int64 a2@<rsi>, char *a3@<r13>)\n{\n  char *v3; // rax\n  __int64 v4; // rdx\n  char *v5; // r12\n  int *v6; // rbp\n  int v7; // edx\n  unsigned int v8; // eax\n  char *v9; // rbx\n  int v10; // er14\n  wint_t v11; // eax\n  char *v12; // r15\n  unsigned __int64 v13; // rbp\n  int v14; // eax\n  __int64 v16; // rax\n  __int64 v17; // rbx\n  __int64 v18; // rbx\n  const char *v19; // r13\n  const unsigned __int16 *v20; // rax\n  size_t v21; // rax\n  unsigned __int8 *v22; // rbx\n  const unsigned __int16 *v23; // rdx\n  int *v24; // rbx\n  int v25; // edx\n  unsigned int v26; // eax\n  char *v27; // r14\n  wint_t v28; // eax\n  __int64 v29; // rax\n  size_t v30; // rax\n  unsigned __int64 v31; // [rsp+0h] [rbp-88h]\n  unsigned __int64 v32; // [rsp+0h] [rbp-88h]\n  char v33; // [rsp+8h] [rbp-80h]\n  char v34; // [rsp+8h] [rbp-80h]\n  mbstate_t ps; // [rsp+Ch] [rbp-7Ch]\n  char v36; // [rsp+14h] [rbp-74h]\n  char *v37; // [rsp+18h] [rbp-70h]\n  __int64 v38; // [rsp+20h] [rbp-68h]\n  char v39; // [rsp+28h] [rbp-60h]\n  wint_t wc; // [rsp+2Ch] [rbp-5Ch]\n\n  v3 = strdup(a1);\n  if ( !v3 )\n    sub_4093B0(a1, a2, v4);\n  v5 = v3;\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    if ( !(_DWORD)a2 )\n      goto LABEL_91;\n    v18 = (unsigned __int8)*v5;\n    if ( (_BYTE)v18 )\n    {\n      v19 = v5;\n      v20 = *__ctype_b_loc();\n      do\n      {\n        if ( !(v20[v18] & 0x2000) )\n          break;\n        v18 = *(unsigned __int8 *)++v19;\n      }\n      while ( (_BYTE)v18 );\n    }\n    else\n    {\n      v19 = v5;\n    }\n    v21 = strlen(v19);\n    memmove(v5, v19, v21 + 1);\n    if ( (_DWORD)a2 != 1 )\n    {\nLABEL_91:\n      v22 = (unsigned __int8 *)&v5[strlen(v5) - 1];\n      if ( v5 <= (char *)v22 )\n      {\n        v23 = *__ctype_b_loc();\n        do\n        {\n          if ( !(v23[*v22] & 0x2000) )\n            break;\n          *v22-- = 0;\n        }\n        while ( v5 <= (char *)v22 );\n      }\n    }\n    return v5;\n  }\n  if ( !(_DWORD)a2 )\n    goto LABEL_4;\n  v37 = v5;\n  v24 = (int *)v5;\n  do\n  {\n    v25 = *v24;\n    ++v24;\n    v26 = ~v25 & (v25 - 16843009) & 0x80808080;\n  }\n  while ( !v26 );\n  v34 = 0;\n  v27 = v5;\n  v36 = 0;\n  ps = 0LL;\n  if ( !(~v25 & (v25 - 16843009) & 0x8080) )\n    LOBYTE(v26) = (~v25 & (v25 - 16843009) & 0x80808080) >> 16;\n  if ( !(~v25 & (v25 - 16843009) & 0x8080) )\n    v24 = (int *)((char *)v24 + 2);\n  v32 = (unsigned __int64)((char *)v24 - __CFADD__((_BYTE)v26, (_BYTE)v26) - 3);\n  if ( v32 <= (unsigned __int64)v5 )\n    goto LABEL_81;\n  while ( !v34 )\n  {\n    if ( !(((unsigned int)dword_41E840[((unsigned __int8)*v27 >> 5) & 7] >> *v27) & 1) )\n    {\n      if ( !mbsinit(&ps) )\nLABEL_86:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbiter.h\", 0x8Eu, \"mbiter_multi_next\");\n      v34 = 1;\n      break;\n    }\n    v38 = 1LL;\n    v28 = *v27;\n    v39 = 1;\n    v27 = v37;\n    wc = v28;\n    v36 = 1;\nLABEL_67:\n    if ( iswspace(wc) )\n    {\n      v27 += v38;\n      v36 = 0;\n      v37 = v27;\n      if ( (unsigned __int64)v27 < v32 )\n        continue;\n    }\n    goto LABEL_81;\n  }\n  v29 = sub_40AB50((wchar_t *)&wc, v27);\n  v38 = v29;\n  if ( v29 == -1 )\n  {\n    v38 = 1LL;\n    v27 = v37;\n    v39 = 0;\n    v36 = 1;\n    goto LABEL_81;\n  }\n  v27 = v37;\n  if ( v29 != -2 )\n  {\n    if ( !v29 )\n    {\n      v38 = 1LL;\n      if ( *v37 )\nLABEL_87:\n        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbiter.h\", 0xA9u, \"mbiter_multi_next\");\n      if ( wc )\nLABEL_88:\n        sub_408600();\n    }\n    v39 = 1;\n    if ( mbsinit(&ps) )\n      v34 = 0;\n    v36 = 1;\n    goto LABEL_67;\n  }\n  v39 = 0;\n  v36 = 1;\n  v38 = v32 - (_QWORD)v37;\nLABEL_81:\n  v30 = strlen(v27);\n  memmove(v5, v27, v30 + 1);\n  if ( (_DWORD)a2 == 1 )\n    return v5;\nLABEL_4:\n  v37 = v5;\n  v6 = (int *)v5;\n  do\n  {\n    v7 = *v6;\n    ++v6;\n    v8 = ~v7 & (v7 - 16843009) & 0x80808080;\n  }\n  while ( !v8 );\n  v33 = 0;\n  v9 = v5;\n  v36 = 0;\n  ps = 0LL;\n  if ( !(~v7 & (v7 - 16843009) & 0x8080) )\n    LOBYTE(v8) = (~v7 & (v7 - 16843009) & 0x80808080) >> 16;\n  if ( !(~v7 & (v7 - 16843009) & 0x8080) )\n    v6 = (int *)((char *)v6 + 2);\n  v10 = 0;\n  v31 = (unsigned __int64)((char *)v6 - __CFADD__((_BYTE)v8, (_BYTE)v8) - 3);\n  if ( v31 > (unsigned __int64)v5 )\n  {\n    while ( 1 )\n    {\n      if ( !v33 )\n      {\n        if ( ((unsigned int)dword_41E840[((unsigned __int8)*v9 >> 5) & 7] >> *v9) & 1 )\n        {\n          v38 = 1LL;\n          v11 = *v9;\n          v12 = v37;\n          v13 = v31;\n          v39 = 1;\n          wc = v11;\n          v9 = v37 + 1;\n          goto LABEL_18;\n        }\n        if ( !mbsinit(&ps) )\n          goto LABEL_86;\n        v33 = 1;\n      }\n      v16 = sub_40AB50((wchar_t *)&wc, v9);\n      v17 = v16;\n      v38 = v16;\n      if ( v16 == -1 )\n      {\n        v12 = v37;\n        v13 = v31;\n        v39 = 0;\n        v38 = 1LL;\n        v9 = v37 + 1;\n      }\n      else\n      {\n        v12 = v37;\n        if ( v16 == -2 )\n        {\n          v9 = (char *)v31;\n          v39 = 0;\n          v13 = v31;\n          v38 = v31 - (_QWORD)v37;\n        }\n        else\n        {\n          if ( !v16 )\n          {\n            v38 = 1LL;\n            if ( *v37 )\n              goto LABEL_87;\n            if ( wc )\n              goto LABEL_88;\n            v17 = 1LL;\n          }\n          v39 = 1;\n          v9 = &v37[v17];\n          v13 = v31;\n          if ( mbsinit(&ps) )\n            v33 = 0;\n        }\n      }\nLABEL_18:\n      v36 = 1;\n      if ( !v10 )\n      {\n        v10 = 1;\n        if ( v39 )\n          v10 = iswspace(wc) == 0;\n        goto LABEL_14;\n      }\n      if ( v10 == 1 )\n      {\n        if ( v39 && iswspace(wc) )\n        {\n          a3 = v12;\n          v10 = 2;\n        }\n        goto LABEL_14;\n      }\n      if ( v10 == 2 && v39 )\n      {\n        v14 = iswspace(wc);\n        v37 = v9;\n        v36 = 0;\n        if ( !v14 )\n          v10 = 1;\n        if ( (unsigned __int64)v9 >= v13 )\n        {\nLABEL_25:\n          if ( v10 == 2 )\n            *a3 = 0;\n          return v5;\n        }\n      }\n      else\n      {\n        v10 = 1;\nLABEL_14:\n        v37 = v9;\n        v36 = 0;\n        if ( (unsigned __int64)v9 >= v13 )\n          goto LABEL_25;\n      }\n    }\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x408620L", 
            "funcEndAddr": "0x408bbcL", 
            "funcName": "sub_408620"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408BC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_408BC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401feeL", 
            "funcEndAddr": "0x401ff3L", 
            "funcName": "sub_408BC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408BC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_408BC0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401feeL", 
            "funcEndAddr": "0x401ff3L", 
            "funcName": "sub_408BC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408FC0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_408BC0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_408BC0(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x408fc0L", 
            "funcEndAddr": "0x409020L", 
            "funcName": "sub_408FC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409020(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_408BC0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_408BC0(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x409020L", 
            "funcEndAddr": "0x4090dcL", 
            "funcName": "sub_409020"
        }, 
        {
            "decompiledFuncCode": "int sub_4090E0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_41BDC2);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n", 
            "funcStartAddr": "0x4090e0L", 
            "funcEndAddr": "0x409154L", 
            "funcName": "sub_4090E0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409160(size_t a1, __int64 a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_4093B0(a1, a2, v3);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409160L", 
            "funcEndAddr": "0x40917aL", 
            "funcName": "sub_409160"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4091C0(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_4093B0(a1, a2, v3);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4091c0L", 
            "funcEndAddr": "0x4091f6L", 
            "funcName": "sub_4091C0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409230(void *a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // r9\n  unsigned __int64 v4; // rcx\n  unsigned __int64 v5; // rdx\n\n  v3 = a3;\n  v4 = *a2;\n  if ( a1 )\n  {\n    v5 = 0x5555555555555554LL % a3;\n    if ( 0x5555555555555554LL / v3 > v4 )\n    {\n      v4 += (v4 >> 1) + 1;\n      goto LABEL_4;\n    }\nLABEL_9:\n    sub_4093B0(a1, a2, v5);\n  }\n  if ( !v4 )\n    v4 = (a3 > 0x80) + 0x80 / a3;\n  v5 = (a3 * (unsigned __int128)v4) >> 64 != 0;\n  if ( ((v3 * v4) & 0x8000000000000000LL) != 0LL || (v3 * (unsigned __int128)v4) >> 64 != 0 )\n    goto LABEL_9;\nLABEL_4:\n  *a2 = v4;\n  return sub_4091C0(a1, v3 * v4);\n}\n", 
            "funcStartAddr": "0x409230L", 
            "funcEndAddr": "0x4092b6L", 
            "funcName": "sub_409230"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409360(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_409160(n, n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x409360L", 
            "funcEndAddr": "0x409388L", 
            "funcName": "sub_409360"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4093B0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x4093b0L", 
            "funcEndAddr": "0x4093e1L", 
            "funcName": "sub_4093B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409440(char *a1, char *a2, char *a3)\n{\n  __int64 v3; // rbx\n\n  v3 = sub_41AFE0(a1, a2, a3);\n  if ( !v3 && *__errno_location() == 12 )\n    sub_4093B0();\n  return v3;\n}\n", 
            "funcStartAddr": "0x409440L", 
            "funcEndAddr": "0x409467L", 
            "funcName": "sub_409440"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409470(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **v5; // rbx\n  int v6; // ebp\n  const char *v7; // r14\n  int *v8; // rax\n  int *v9; // r13\n  __int64 v10; // rax\n  char *v11; // r15\n  __int64 v12; // rbp\n  unsigned int v13; // er12\n  int v14; // er13\n  __int64 v16; // rsi\n  int v17; // eax\n  __int64 v18; // rax\n  char v19; // al\n  char *v20; // rsi\n  __int64 v21; // rcx\n  __int64 v22; // rax\n  __int64 v23; // rax\n  __int64 v24; // rdi\n  __int64 v25; // rcx\n  __int64 v26; // r9\n  int v27; // edi\n  int v28; // er10\n  __int64 v29; // rcx\n  __int64 v30; // r9\n  int v31; // edi\n  __int64 v32; // rcx\n  __int64 v33; // r9\n  int v34; // edi\n  __int64 v35; // rcx\n  __int64 v36; // r9\n  int v37; // edi\n  __int64 v38; // rcx\n  __int64 v39; // r9\n  int v40; // edi\n  __int64 v41; // rcx\n  __int64 v42; // r9\n  int v43; // edi\n  __int64 *v44; // [rsp+0h] [rbp-58h]\n  char *endptr; // [rsp+18h] [rbp-40h]\n\n  v44 = a4;\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoimax\");\n  v5 = a2;\n  v6 = a3;\n  if ( !a2 )\n    v5 = &endptr;\n  v7 = a5;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = __strtol_internal(nptr, v5, v6, 0);\n  v11 = *v5;\n  v12 = v10;\n  if ( *v5 == nptr )\n  {\n    if ( !v7 )\n      return 4;\n    v14 = (unsigned __int8)*v11;\n    v13 = 4;\n    if ( !(_BYTE)v14 )\n      return v13;\n    v12 = 1LL;\n    v13 = 0;\n    if ( !strchr(v7, (char)v14) )\n      return 4;\nLABEL_19:\n    v18 = 142129060940101LL;\n    if ( !_bittest64(&v18, (unsigned int)(v14 - 69)) || !strchr(v7, 48) )\n    {\nLABEL_17:\n      LODWORD(v16) = 1;\n      v17 = 1024;\n      goto LABEL_18;\n    }\n    v19 = v11[1];\n    if ( v19 != 68 )\n    {\n      if ( v19 == 105 )\n      {\n        v17 = 1024;\n        LODWORD(v16) = 2 * (v11[2] == 66) + 1;\nLABEL_18:\n        switch ( (_BYTE)v14 )\n        {\n          case 0x42:\n            v16 = (int)v16;\n            if ( v12 < -9007199254740992LL )\n              goto LABEL_46;\n            if ( v12 > 0x1FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 10;\n            break;\n          case 0x45:\n            v32 = v17;\n            v16 = (int)v16;\n            v33 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_67;\n          case 0x47:\n          case 0x67:\n            v35 = v17;\n            v16 = (int)v16;\n            v36 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_74;\n          case 0x4B:\n          case 0x6B:\n            v21 = v17;\n            v16 = (int)v16;\n            v22 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_38;\n          case 0x4D:\n          case 0x6D:\n            v21 = v17;\n            v16 = (int)v16;\n            v24 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_43;\n          case 0x50:\n            v25 = v17;\n            v16 = (int)v16;\n            v26 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_53;\n          case 0x54:\n          case 0x74:\n            v29 = v17;\n            v16 = (int)v16;\n            v30 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_60;\n          case 0x59:\n            v38 = v17;\n            v16 = (int)v16;\n            v39 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_81;\n          case 0x5A:\n            v41 = v17;\n            v16 = (int)v16;\n            v42 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_88;\n          case 0x62:\n            v16 = (int)v16;\n            goto LABEL_48;\n          case 0x63:\n            v16 = (int)v16;\n            break;\n          case 0x77:\n            v16 = (int)v16;\n            if ( v12 < -4611686018427387904LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 *= 2LL;\n            break;\n          default:\n            goto LABEL_27;\n        }\nLABEL_31:\n        v20 = &v11[v16];\n        *v5 = v20;\n        if ( *v20 )\n          v13 |= 2u;\n        goto LABEL_9;\n      }\n      if ( v19 != 66 )\n      {\n        switch ( (_BYTE)v14 )\n        {\n          case 0x45:\n            v16 = 1LL;\n            v32 = 1024LL;\n            v33 = -9007199254740992LL;\nLABEL_67:\n            v34 = 6;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v33 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v32 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v32;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v34;\n            }\n            while ( v34 );\n            goto LABEL_104;\n          case 0x46:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4C:\n          case 0x4E:\n          case 0x4F:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x5B:\n          case 0x5C:\n          case 0x5D:\n          case 0x5E:\n          case 0x5F:\n          case 0x60:\n          case 0x61:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6C:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n            goto LABEL_27;\n          case 0x47:\n          case 0x67:\n            v16 = 1LL;\n            v35 = 1024LL;\n            v36 = -9007199254740992LL;\nLABEL_74:\n            v37 = 3;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v36 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v35 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v35;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v37;\n            }\n            while ( v37 );\n            goto LABEL_104;\n          case 0x4B:\n          case 0x6B:\n            v16 = 1LL;\n            v21 = 1024LL;\n            v22 = -9007199254740992LL;\nLABEL_38:\n            if ( v12 < v22 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            goto LABEL_40;\n          case 0x4D:\n          case 0x6D:\n            v16 = 1LL;\n            v21 = 1024LL;\n            v24 = -9007199254740992LL;\nLABEL_43:\n            if ( v12 < v24 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            if ( v12 > 0x7FFFFFFFFFFFFFFFLL / v21 )\n              goto LABEL_105;\n            v12 *= v21;\n            if ( v12 >= v24 )\n            {\nLABEL_40:\n              if ( v23 < v12 )\n              {\nLABEL_105:\n                v12 = 0x7FFFFFFFFFFFFFFFLL;\n                v13 = 1;\n              }\n              else\n              {\n                v12 *= v21;\n              }\n            }\n            else\n            {\nLABEL_46:\n              v12 = 0x8000000000000000LL;\n              v13 = 1;\n            }\n            break;\n          case 0x50:\n            v16 = 1LL;\n            v25 = 1024LL;\n            v26 = -9007199254740992LL;\nLABEL_53:\n            v27 = 5;\n            v28 = 0;\n            do\n            {\n              if ( v26 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v25 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v25;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v27;\n            }\n            while ( v27 );\n            goto LABEL_104;\n          case 0x54:\n          case 0x74:\n            v16 = 1LL;\n            v29 = 1024LL;\n            v30 = -9007199254740992LL;\nLABEL_60:\n            v31 = 4;\n            v28 = 0;\n            do\n            {\n              if ( v30 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v29 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v29;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v31;\n            }\n            while ( v31 );\n            goto LABEL_104;\n          case 0x59:\n            v16 = 1LL;\n            v38 = 1024LL;\n            v39 = -9007199254740992LL;\nLABEL_81:\n            v40 = 8;\n            v28 = 0;\n            do\n            {\n              if ( v39 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v38 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v38;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v40;\n            }\n            while ( v40 );\n            goto LABEL_104;\n          case 0x5A:\n            v16 = 1LL;\n            v41 = 1024LL;\n            v42 = -9007199254740992LL;\nLABEL_88:\n            v43 = 7;\n            v28 = 0;\n            do\n            {\n              if ( v42 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v41 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v41;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v43;\n            }\n            while ( v43 );\nLABEL_104:\n            v13 |= v28;\n            goto LABEL_31;\n          case 0x62:\n            v16 = 1LL;\nLABEL_48:\n            if ( v12 < -18014398509481984LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 9;\n            break;\n          case 0x63:\n            v16 = 1LL;\n            goto LABEL_31;\n          default:\n            goto LABEL_17;\n        }\n        goto LABEL_31;\n      }\n    }\n    LODWORD(v16) = 2;\n    v17 = 1000;\n    goto LABEL_18;\n  }\n  if ( *v9 )\n  {\n    v13 = 4;\n    if ( *v9 != 34 )\n      return v13;\n    v13 = 1;\n  }\n  else\n  {\n    v13 = 0;\n  }\n  if ( v7 )\n  {\n    v14 = (unsigned __int8)*v11;\n    if ( (_BYTE)v14 )\n    {\n      if ( !strchr(v7, (char)v14) )\n      {\nLABEL_27:\n        v13 |= 2u;\n        *v44 = v12;\n        return v13;\n      }\n      goto LABEL_19;\n    }\n  }\nLABEL_9:\n  *v44 = v12;\n  return v13;\n}\n", 
            "funcStartAddr": "0x409470L", 
            "funcEndAddr": "0x409bb2L", 
            "funcName": "sub_409470"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409BC0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_409C40(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409bc0L", 
            "funcEndAddr": "0x409c3bL", 
            "funcName": "sub_409BC0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409C40(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_409D20(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x409c40L", 
            "funcEndAddr": "0x409c80L", 
            "funcName": "sub_409C40"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_409C80(char *filename, char *modes, FILE *a3)\n{\n  FILE *v3; // rax\n  FILE *v4; // rbx\n  int v5; // er13\n  int v7; // eax\n  int v8; // er14\n\n  v3 = freopen(filename, modes, a3);\n  v4 = v3;\n  if ( !v3 )\n    return v4;\n  if ( !filename )\n    return v4;\n  v5 = fileno(v3);\n  if ( dup2(v5, v5) >= 0 || *__errno_location() != 9 )\n    return v4;\n  v7 = open(\"/dev/null\", 0x80000);\n  v8 = v7;\n  if ( v5 != v7 )\n  {\n    if ( dup2(v7, v5) >= 0 )\n    {\n      close(v8);\n      return freopen(filename, modes, v4);\n    }\n    close(v8);\n    return v4;\n  }\n  return freopen(filename, modes, v4);\n}\n", 
            "funcStartAddr": "0x409c80L", 
            "funcEndAddr": "0x409d1eL", 
            "funcName": "sub_409C80"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409D20(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x409d20L", 
            "funcEndAddr": "0x409d77L", 
            "funcName": "sub_409D20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409D80(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x409d80L", 
            "funcEndAddr": "0x409e5fL", 
            "funcName": "sub_409D80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409E60(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409e60L", 
            "funcEndAddr": "0x40a47cL", 
            "funcName": "sub_409E60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A480(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_409D80(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_409D80((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_409E60(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_409E60(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_409E60(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x40a480L", 
            "funcEndAddr": "0x40aa46L", 
            "funcName": "sub_40A480"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AA50(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_623C80 = dword_62335C;\n  dword_623C84 = dword_623358;\n  result = sub_40A480(a1, a2, a3, a4, a5, a6, &dword_623C80, a7);\n  dword_62335C = dword_623C80;\n  nptr = (char *)qword_623C90;\n  dword_623354 = dword_623C88;\n  return result;\n}\n", 
            "funcStartAddr": "0x40aa50L", 
            "funcEndAddr": "0x40aaa6L", 
            "funcName": "sub_40AA50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AAB0(int a1, __int64 a2, char *a3)\n{\n  return sub_40AA50(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x40aab0L", 
            "funcEndAddr": "0x40aac8L", 
            "funcName": "sub_40AAB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AAD0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40AA50(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x40aad0L", 
            "funcEndAddr": "0x40aae3L", 
            "funcName": "sub_40AAD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AAF0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40A480(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x40aaf0L", 
            "funcEndAddr": "0x40ab05L", 
            "funcName": "sub_40AAF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AB10(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40AA50(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x40ab10L", 
            "funcEndAddr": "0x40ab26L", 
            "funcName": "sub_40AB10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AB30(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40A480(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x40ab30L", 
            "funcEndAddr": "0x40ab48L", 
            "funcName": "sub_40AB30"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_40AB50(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_418AE0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40ab50L", 
            "funcEndAddr": "0x40abcaL", 
            "funcName": "sub_40AB50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40ABD0(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax\n  __int64 v4; // r9\n  __int64 v5; // rcx\n  _BYTE *v6; // rdi\n\n  if ( !a3 )\n    return 0LL;\n  if ( (unsigned __int8)a1 & 7 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( !((unsigned __int8)a1 & 7) )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && !(((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( ((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = (__int64)(a1 + 1);\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = (_BYTE *)v5;\n      if ( (_BYTE *)v5 == v6 )\n        break;\n      if ( *(_BYTE *)(++v5 - 1) == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x40abd0L", 
            "funcEndAddr": "0x40acd4L", 
            "funcName": "sub_40ABD0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40ACE0(__int64 a1, __int64 a2)\n{\n  bool result; // al\n  __int64 v3; // rdx\n\n  result = a2 == 0 || a1 == 0;\n  if ( result )\n    return 0;\n  v3 = *(_QWORD *)(a1 + 8);\n  if ( v3 == *(_QWORD *)(a2 + 8) )\n  {\n    while ( --v3 >= 0 )\n    {\n      if ( *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v3) != *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v3) )\n        return result;\n    }\n    result = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ace0L", 
            "funcEndAddr": "0x40ad23L", 
            "funcName": "sub_40ACE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AD30(_QWORD *a1, __int64 (__fastcall *a2)(__int64, _QWORD *), __int64 a3)\n{\n  __int64 v3; // rbp\n  _QWORD *i; // rbx\n  _QWORD *v5; // rax\n  __int64 result; // rax\n  _QWORD *v7; // rdx\n  bool v8; // zf\n\n  v3 = a3;\n  for ( i = a1; ; i = v5 )\n  {\n    v5 = (_QWORD *)i[1];\n    if ( !v5 )\n    {\n      v5 = (_QWORD *)i[2];\n      if ( !v5 )\n        break;\n    }\nLABEL_2:\n    ;\n  }\n  for ( result = a2(v3, i); !(_DWORD)result; result = a2(v3, v7) )\n  {\n    v7 = (_QWORD *)*i;\n    if ( !*i )\n      break;\n    v5 = (_QWORD *)v7[2];\n    v8 = v5 == i;\n    i = (_QWORD *)*i;\n    if ( !v8 && v5 != 0LL )\n      goto LABEL_2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ad30L", 
            "funcEndAddr": "0x40ad9bL", 
            "funcName": "sub_40AD30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40ADA0(_BYTE *a1, __int64 a2, char a3)\n{\n  __int64 v3; // rax\n  __int64 v4; // r8\n  bool v5; // cc\n  char v6; // cl\n  __int64 result; // rax\n  char v8; // al\n  char v9; // al\n\n  v3 = *(_QWORD *)(a2 + 72);\n  if ( *(_QWORD *)(a2 + 104) <= v3 )\n  {\n    a1[8] = 2;\n    return 0LL;\n  }\n  v4 = *(_QWORD *)(a2 + 8);\n  v5 = *(_DWORD *)(a2 + 144) <= 1;\n  v6 = *(_BYTE *)(v4 + v3);\n  *a1 = v6;\n  if ( !v5 && v3 != *(_QWORD *)(a2 + 48) && *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v3) == -1 )\n    goto LABEL_12;\n  switch ( v6 )\n  {\n    case 92:\n      if ( !(a3 & 1) || v3 + 1 >= *(_QWORD *)(a2 + 88) )\n        goto LABEL_12;\n      *(_QWORD *)(a2 + 72) = v3 + 1;\n      v9 = *(_BYTE *)(v4 + v3 + 1);\n      a1[8] = 1;\n      *a1 = v9;\n      result = 1LL;\n      break;\n    case 91:\n      if ( v3 + 1 < *(_QWORD *)(a2 + 88) )\n      {\n        v8 = *(_BYTE *)(v4 + v3 + 1);\n        *a1 = v8;\n        switch ( v8 )\n        {\n          case 58:\n            if ( a3 & 4 )\n            {\n              a1[8] = 30;\n              return 2LL;\n            }\n            break;\n          case 61:\n            a1[8] = 28;\n            return 2LL;\n          case 46:\n            a1[8] = 26;\n            return 2LL;\n        }\n      }\n      a1[8] = 1;\n      result = 1LL;\n      *a1 = 91;\n      return result;\n    case 93:\n      a1[8] = 21;\n      result = 1LL;\n      break;\n    case 94:\n      a1[8] = 25;\n      return 1LL;\n    case 45:\n      a1[8] = 22;\n      return 1LL;\n    default:\nLABEL_12:\n      a1[8] = 1;\n      return 1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ada0L", 
            "funcEndAddr": "0x40aecfL", 
            "funcName": "sub_40ADA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AED0(__int64 a1, __int64 a2)\n{\n  if ( *(_BYTE *)(a2 + 48) != 17 || a1 != *(_QWORD *)(a2 + 40) )\n    return 0LL;\n  *(_BYTE *)(a2 + 50) |= 8u;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40aed0L", 
            "funcEndAddr": "0x40aeedL", 
            "funcName": "sub_40AED0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AEF0(__int64 a1, signed int a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // r13\n  __int64 v6; // r14\n  __int64 v7; // rbx\n  __int64 v8; // r11\n  _QWORD *v9; // r15\n  __int64 v10; // rbp\n  __int64 v11; // rax\n  char v12; // dl\n  __int64 v14; // r13\n  __int64 v15; // r12\n  __int64 v16; // rcx\n  int v17; // eax\n  __int64 v18; // [rsp+10h] [rbp-68h]\n  __int64 v19; // [rsp+18h] [rbp-60h]\n  __int16 v20; // [rsp+26h] [rbp-52h]\n  __int64 v21; // [rsp+28h] [rbp-50h]\n  __int64 v22; // [rsp+30h] [rbp-48h]\n  __int64 v23; // [rsp+38h] [rbp-40h]\n\n  v18 = a4;\n  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 48LL) + 24 * a4;\n  if ( *(_QWORD *)(v5 + 8) > 0LL )\n  {\n    v6 = a3;\n    v7 = 0LL;\n    v8 = a5;\n    v9 = *(_QWORD **)(a1 + 152);\n    v21 = 40 * a5;\n    v19 = 1LL << a3;\n    v20 = ~(unsigned __int16)(1LL << a3);\n    do\n    {\n      while ( 2 )\n      {\n        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7);\n        v11 = *v9 + 16LL * *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7);\n        v12 = *(_BYTE *)(v11 + 8);\n        if ( v12 == 8 )\n        {\n          if ( a2 & 1 && *(_QWORD *)v11 == v6 )\n            return 0xFFFFFFFFLL;\n        }\n        else if ( v12 == 9 )\n        {\n          if ( a2 & 2 && *(_QWORD *)v11 == v6 )\n            return 0LL;\n        }\n        else if ( v12 == 4 && v8 != -1 )\n        {\n          v22 = v5;\n          v23 = v7;\n          v14 = v8;\n          v15 = *(_QWORD *)(a1 + 216) + v21;\n          do\n          {\n            if ( *(_QWORD *)v15 == v10 && (v6 > 63 || *(_WORD *)(v15 + 34) & (unsigned __int16)v19) )\n            {\n              v16 = **(_QWORD **)(v9[5] + 24 * v10 + 16);\n              if ( v18 == v16 )\n                return -(a2 & 1);\n              v17 = sub_40AEF0(a1, (unsigned int)a2, v6, v16, v14);\n              if ( v17 == -1 )\n                return 0xFFFFFFFFLL;\n              if ( !v17 && a2 & 2 )\n                return 0LL;\n              if ( v6 <= 63 )\n                *(_WORD *)(v15 + 34) &= v20;\n            }\n            v15 += 40LL;\n          }\n          while ( *(_BYTE *)(v15 - 8) );\n          v8 = v14;\n          v5 = v22;\n          ++v7;\n          if ( *(_QWORD *)(v22 + 8) > v23 + 1 )\n            continue;\n          return (unsigned int)(a2 >> 1);\n        }\n        break;\n      }\n      ++v7;\n    }\n    while ( *(_QWORD *)(v5 + 8) > v7 );\n  }\n  return (unsigned int)(a2 >> 1);\n}\n", 
            "funcStartAddr": "0x40aef0L", 
            "funcEndAddr": "0x40b0ffL", 
            "funcName": "sub_40AEF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B100(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 v6; // rax\n  __int64 v7; // r10\n  __int64 v8; // rax\n  signed int v9; // esi\n  __int64 result; // rax\n\n  v6 = *(_QWORD *)(a1 + 216) + 40 * a2;\n  v7 = *(_QWORD *)(v6 + 16);\n  if ( v7 > a5 )\n    return 0xFFFFFFFFLL;\n  v8 = *(_QWORD *)(v6 + 24);\n  if ( v8 < a5 )\n    return 1LL;\n  v9 = v7 == a5;\n  if ( v8 == a5 )\n  {\n    v9 |= 2u;\n    return sub_40AEF0(a1, v9, a3, a4, a6);\n  }\n  result = 0LL;\n  if ( v7 == a5 )\n    return sub_40AEF0(a1, v9, a3, a4, a6);\n  return result;\n}\n", 
            "funcStartAddr": "0x40b100L", 
            "funcEndAddr": "0x40b166L", 
            "funcName": "sub_40B100"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B170(__int64 a1, size_t a2)\n{\n  __int64 v2; // rbx\n  void *v3; // rax\n  void *v4; // rdi\n  void *v5; // rax\n  void *v7; // rax\n\n  v2 = a1;\n  if ( *(_DWORD *)(a1 + 144) > 1 )\n  {\n    if ( a2 > 0x1FFFFFFFFFFFFFFFLL )\n      return 12LL;\n    v3 = realloc(*(void **)(a1 + 16), 4 * a2);\n    if ( !v3 )\n      return 12LL;\n    v4 = *(void **)(a1 + 24);\n    *(_QWORD *)(v2 + 16) = v3;\n    if ( v4 )\n    {\n      v5 = realloc(v4, 8 * a2);\n      if ( !v5 )\n        return 12LL;\n      *(_QWORD *)(v2 + 24) = v5;\n    }\n  }\n  if ( !*(_BYTE *)(v2 + 139) )\n  {\nLABEL_8:\n    *(_QWORD *)(v2 + 64) = a2;\n    return 0LL;\n  }\n  v7 = realloc(*(void **)(v2 + 8), a2);\n  if ( v7 )\n  {\n    *(_QWORD *)(v2 + 8) = v7;\n    goto LABEL_8;\n  }\n  return 12LL;\n}\n", 
            "funcStartAddr": "0x40b170L", 
            "funcEndAddr": "0x40b20cL", 
            "funcName": "sub_40B170"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B210(_QWORD *a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // rsi\n  void *v4; // rax\n  __int64 v6; // rsi\n\n  v2 = a2;\n  v3 = a1[1];\n  v4 = (void *)a1[2];\n  if ( *a1 != v3 )\n    goto LABEL_2;\n  v6 = v3 + 1;\n  *a1 = 2 * v6;\n  v4 = realloc(v4, 16 * v6);\n  if ( v4 )\n  {\n    a1[2] = v4;\n    v3 = a1[1];\nLABEL_2:\n    a1[1] = v3 + 1;\n    *((_QWORD *)v4 + v3) = v2;\n    return 1LL;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b210L", 
            "funcEndAddr": "0x40b274L", 
            "funcName": "sub_40B210"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B280(_QWORD *a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  __int64 v3; // rsi\n  _QWORD *v4; // rax\n  __int64 result; // rax\n  __int64 v6; // rdx\n  _QWORD *v7; // rdx\n  __int64 v8; // rcx\n  __int64 i; // rcx\n\n  v2 = a2;\n  if ( *a1 )\n  {\n    v3 = a1[1];\n    v4 = (_QWORD *)a1[2];\n    if ( !v3 )\n    {\n      *v4 = v2;\n      result = 1LL;\n      ++a1[1];\n      return result;\n    }\n    if ( *a1 == v3 )\n    {\n      *a1 = 2 * v3;\n      v4 = realloc(v4, 16 * v3);\n      if ( !v4 )\n        return 0LL;\n      a1[2] = v4;\n      v3 = a1[1];\n    }\n    v6 = v3;\n    if ( *v4 <= v2 )\n    {\n      for ( i = v4[v6 - 1]; i > v2; i = v4[v6 - 1] )\n      {\n        v4[v6] = i;\n        --v6;\n      }\n    }\n    else if ( v3 > 0 )\n    {\n      v7 = &v4[v6];\n      do\n      {\n        v8 = *(v7 - 1);\n        --v7;\n        v7[1] = v8;\n      }\n      while ( v7 != v4 );\n      v6 = 0LL;\n    }\n    v4[v6] = v2;\n    result = 1LL;\n    ++a1[1];\n  }\n  else\n  {\n    *a1 = 1LL;\n    a1[1] = 1LL;\n    result = (__int64)malloc(8uLL);\n    a1[2] = result;\n    if ( result )\n    {\n      *(_QWORD *)result = a2;\n      result = 1LL;\n    }\n    else\n    {\n      a1[1] = 0LL;\n      *a1 = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b280L", 
            "funcEndAddr": "0x40b3acL", 
            "funcName": "sub_40B280"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B3B0(_QWORD *a1, _QWORD *a2, __int64 a3)\n{\n  __int64 v3; // r13\n  _QWORD *v4; // rbp\n  __int64 v5; // r15\n  void *v6; // rax\n  __int64 v7; // rbx\n  __int64 v9; // rbx\n  __int64 v10; // rdx\n  _QWORD *v11; // rax\n  __int64 v12; // rsi\n\n  v3 = a3;\n  v4 = a2;\n  v5 = a2[2];\n  *a2 = a3;\n  a2[5] = 0LL;\n  a2[4] = v5;\n  v6 = malloc(8 * v5);\n  a2[6] = v6;\n  if ( !v6 )\n    return 12LL;\n  v7 = 0LL;\n  if ( v5 > 0 )\n  {\n    while ( *(_BYTE *)(*a1 + 16LL * *(_QWORD *)(a2[3] + 8 * v7) + 8) & 8\n         || (unsigned __int8)sub_40B210(a2 + 4, *(_QWORD *)(a2[3] + 8 * v7)) )\n    {\n      if ( a2[2] <= ++v7 )\n        goto LABEL_8;\n    }\n    return 12LL;\n  }\nLABEL_8:\n  v9 = a1[8] + 24 * (a1[17] & v3);\n  v10 = *(_QWORD *)v9;\n  v11 = *(_QWORD **)(v9 + 16);\n  v12 = *(_QWORD *)v9 + 1LL;\n  if ( *(_QWORD *)(v9 + 8) <= *(_QWORD *)v9 )\n  {\n    v11 = realloc(*(void **)(v9 + 16), 16 * v12);\n    if ( v11 )\n    {\n      v10 = *(_QWORD *)v9;\n      *(_QWORD *)(v9 + 16) = v11;\n      *(_QWORD *)(v9 + 8) = 2 * v12;\n      v12 = v10 + 1;\n      goto LABEL_9;\n    }\n    return 12LL;\n  }\nLABEL_9:\n  *(_QWORD *)v9 = v12;\n  v11[v10] = v4;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b3b0L", 
            "funcEndAddr": "0x40b4abL", 
            "funcName": "sub_40B3B0"
        }, 
        {
            "decompiledFuncCode": "wint_t __fastcall sub_40B4B0(unsigned __int8 a1, __int64 a2)\n{\n  wint_t result; // eax\n\n  result = btowc(a1);\n  if ( result == -1 && !a2 )\n    result = a1;\n  return result;\n}\n", 
            "funcStartAddr": "0x40b4b0L", 
            "funcEndAddr": "0x40b4d6L", 
            "funcName": "sub_40B4B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B4E0(_QWORD *a1)\n{\n  __int64 v1; // r12\n  __int64 v2; // rbx\n  const __int32_t **v3; // rax\n  __int64 v4; // rcx\n  __int64 v5; // rdx\n\n  v1 = a1[11];\n  if ( a1[8] <= v1 )\n    v1 = a1[8];\n  v2 = a1[6];\n  if ( v1 <= v2 )\n  {\n    a1[6] = v2;\n    a1[7] = v2;\n  }\n  else\n  {\n    v3 = __ctype_toupper_loc();\n    do\n    {\n      v4 = a1[15];\n      v5 = *(unsigned __int8 *)(a1[5] + v2 + *a1);\n      if ( v4 )\n        v5 = *(unsigned __int8 *)(v4 + v5);\n      *(_BYTE *)(a1[1] + v2++) = (*v3)[v5];\n    }\n    while ( v1 != v2 );\n    a1[6] = v1;\n    a1[7] = v1;\n  }\n}\n", 
            "funcStartAddr": "0x40b4e0L", 
            "funcEndAddr": "0x40b560L", 
            "funcName": "sub_40B4E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B560(mbstate_t *a1)\n{\n  mbstate_t *v1; // rbx\n  __int64 v2; // r12\n  __int64 v3; // rbp\n  mbstate_t *v4; // r13\n  mbstate_t v5; // rdi\n  mbstate_t v6; // r14\n  signed __int64 v7; // rdx\n  char *v8; // rsi\n  size_t v9; // rax\n  __int64 v10; // rdx\n  mbstate_t v11; // rcx\n  __int64 v12; // rsi\n  __int64 v13; // rdi\n  _DWORD *v14; // rdx\n  __int64 v15; // rcx\n  mbstate_t v16; // rcx\n  unsigned __int8 *v17; // rax\n  __int64 v18; // rax\n  char v19; // cl\n  wchar_t pwc; // [rsp+Ch] [rbp-6Ch]\n  char v21[104]; // [rsp+10h] [rbp-68h]\n\n  v1 = a1;\n  v2 = (__int64)a1[11];\n  v3 = (__int64)a1[6];\n  if ( *(_QWORD *)&a1[8] <= v2 )\n    v2 = (__int64)a1[8];\n  if ( v2 > v3 )\n  {\n    v4 = a1 + 4;\n    while ( 1 )\n    {\n      v5 = v1[15];\n      v6 = v1[4];\n      v7 = v2 - v3;\n      if ( v5 )\n      {\n        if ( v1[18].__count > 0 && (v18 = 0LL, v8 = v21, v7 > 0) )\n        {\n          while ( 1 )\n          {\n            v19 = *(_BYTE *)(*(_QWORD *)&v5 + *(unsigned __int8 *)(*(_QWORD *)&v1[5] + v18 + v3 + *(_QWORD *)v1));\n            *(_BYTE *)(v3 + *(_QWORD *)&v1[1] + v18) = v19;\n            v21[v18] = v19;\n            if ( v1[18].__count <= (int)v18 + 1 )\n              break;\n            if ( v7 == ++v18 )\n              break;\n            v5 = v1[15];\n          }\n        }\n        else\n        {\n          v8 = v21;\n        }\n      }\n      else\n      {\n        v8 = (char *)(*(_QWORD *)v1 + v3 + *(_QWORD *)&v1[5]);\n      }\n      v9 = sub_40AB50(&pwc, v8, v7, v4);\n      if ( v9 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_14;\n      LODWORD(v10) = pwc;\n      if ( v9 == -2LL )\n        break;\nLABEL_9:\n      v11 = v1[2];\n      v12 = v3 + 1;\n      v13 = 4 * v3;\n      *(_DWORD *)(*(_QWORD *)&v11 + 4 * v3) = v10;\n      v3 += v9;\n      if ( v12 >= v3 )\n      {\n        v3 = v12;\n        if ( v12 >= v2 )\n          goto LABEL_13;\n      }\n      else\n      {\n        v14 = (_DWORD *)(*(_QWORD *)&v11 + v13 + 4);\n        v15 = *(_QWORD *)&v11 + 4 * v3;\n        do\n        {\n          *v14 = -1;\n          ++v14;\n        }\n        while ( (_DWORD *)v15 != v14 );\n        if ( v3 >= v2 )\n          goto LABEL_13;\n      }\n    }\n    if ( *(_QWORD *)&v1[8] < *(_QWORD *)&v1[11] )\n    {\n      v1[4] = v6;\n      goto LABEL_13;\n    }\nLABEL_14:\n    v16 = v1[15];\n    v17 = (unsigned __int8 *)(*(_QWORD *)&v1[5] + v3 + *(_QWORD *)v1);\n    v10 = *v17;\n    pwc = *v17;\n    if ( v16 )\n    {\n      LODWORD(v10) = *(unsigned __int8 *)(*(_QWORD *)&v16 + v10);\n      pwc = v10;\n    }\n    v1[4] = v6;\n    v9 = 1LL;\n    goto LABEL_9;\n  }\nLABEL_13:\n  v1[6] = (mbstate_t)v3;\n  v1[7] = (mbstate_t)v3;\n}\n", 
            "funcStartAddr": "0x40b560L", 
            "funcEndAddr": "0x40b706L", 
            "funcName": "sub_40B560"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B710(__int64 a1)\n{\n  __int64 v1; // r14\n  char *v2; // rbx\n  signed __int64 v3; // r15\n  signed __int64 v4; // r12\n  __int64 v5; // rdx\n  size_t v6; // rax\n  size_t v7; // rbp\n  wchar_t v8; // eax\n  void *v9; // r8\n  wchar_t v10; // er13\n  size_t v11; // rax\n  size_t v12; // r10\n  signed __int64 v13; // r8\n  size_t v14; // rax\n  __int64 v15; // rax\n  _DWORD *v16; // rdx\n  __int64 result; // rax\n  signed __int64 v18; // rbp\n  char *v19; // r12\n  __int64 v20; // r13\n  size_t v21; // rax\n  size_t v22; // r12\n  wchar_t v23; // eax\n  wchar_t v24; // er13\n  __int64 v25; // rax\n  __int64 v26; // rdx\n  signed __int64 v27; // rbp\n  _DWORD *v28; // rcx\n  __int64 v29; // rax\n  int v30; // eax\n  int v31; // eax\n  int v32; // eax\n  __int64 v33; // r10\n  __int64 v34; // rax\n  __int64 v35; // rdi\n  __int64 v36; // rdx\n  __int64 v37; // rax\n  signed __int64 v38; // rcx\n  __int64 v39; // rdx\n  void *v40; // rax\n  unsigned __int64 v41; // rsi\n  unsigned __int64 v42; // rax\n  __int64 v43; // rdx\n  __int64 i; // rax\n  wchar_t *v45; // rsi\n  __int64 v46; // rax\n  signed __int64 *v47; // rcx\n  unsigned __int64 v48; // rax\n  __int64 v49; // rdx\n  void *v50; // rax\n  mbstate_t *src; // [rsp+0h] [rbp-A8h]\n  wint_t srcb; // [rsp+0h] [rbp-A8h]\n  void *srcc; // [rsp+0h] [rbp-A8h]\n  void *srca; // [rsp+0h] [rbp-A8h]\n  char *v55; // [rsp+8h] [rbp-A0h]\n  wint_t v56; // [rsp+8h] [rbp-A0h]\n  char *v57; // [rsp+8h] [rbp-A0h]\n  char *v58; // [rsp+8h] [rbp-A0h]\n  signed __int64 v59; // [rsp+10h] [rbp-98h]\n  wint_t wc; // [rsp+24h] [rbp-84h]\n  mbstate_t ps; // [rsp+28h] [rbp-80h]\n  char s[120]; // [rsp+30h] [rbp-78h]\n\n  v1 = a1;\n  v2 = *(char **)(a1 + 88);\n  if ( *(_QWORD *)(a1 + 64) <= (__int64)v2 )\n    v2 = *(char **)(a1 + 64);\n  v3 = *(_QWORD *)(a1 + 48);\n  if ( *(_BYTE *)(a1 + 138) || *(_QWORD *)(a1 + 120) || *(_BYTE *)(a1 + 140) )\n  {\n    v4 = *(_QWORD *)(a1 + 56);\n    goto LABEL_6;\n  }\n  if ( v3 >= (__int64)v2 )\n    goto LABEL_37;\n  src = (mbstate_t *)(a1 + 32);\n  while ( 1 )\n  {\n    v18 = v3;\n    v19 = (char *)(*(_QWORD *)a1 + v3 + *(_QWORD *)(a1 + 40));\n    v20 = (unsigned __int8)*v19;\n    if ( (v20 & 0x80u) == 0LL && mbsinit(src) )\n    {\n      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v3) = (*__ctype_toupper_loc())[v20];\n      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v3) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v3);\n      ++v3;\n      goto LABEL_36;\n    }\n    ps = *(mbstate_t *)(a1 + 32);\n    v59 = (signed __int64)&v2[-v3];\n    v21 = sub_40AB50((wchar_t *)&wc, v19, (size_t)&v2[-v3], src);\n    v22 = v21;\n    if ( v21 <= 0xFFFFFFFFFFFFFFFDLL )\n      break;\n    if ( v21 == -2LL )\n    {\n      if ( *(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 88) )\n      {\n        *(mbstate_t *)(a1 + 32) = ps;\nLABEL_37:\n        *(_QWORD *)(a1 + 48) = v3;\n        result = 0LL;\n        *(_QWORD *)(a1 + 56) = v3;\n        return result;\n      }\n      v30 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + v3 + *(_QWORD *)a1);\n      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v3++) = v30;\n      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v18) = v30;\n    }\n    else\n    {\n      v31 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + v3 + *(_QWORD *)a1);\n      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v3++) = v31;\n      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v18) = v31;\n      *(mbstate_t *)(a1 + 32) = ps;\n    }\nLABEL_36:\n    if ( (__int64)v2 <= v3 )\n      goto LABEL_37;\n  }\n  v56 = wc;\n  v23 = towupper(wc);\n  v24 = v23;\n  if ( v56 == v23 )\n  {\n    memcpy((void *)(v3 + *(_QWORD *)(a1 + 8)), (const void *)(*(_QWORD *)a1 + v3 + *(_QWORD *)(a1 + 40)), v22);\nLABEL_32:\n    v25 = *(_QWORD *)(a1 + 16);\n    v26 = 4 * v3++;\n    *(_DWORD *)(v25 + 4 * v18) = v24;\n    v27 = v22 + v18;\n    if ( v3 < v27 )\n    {\n      v28 = (_DWORD *)(v25 + v26 + 4);\n      v29 = v25 + 4 * v27;\n      do\n      {\n        *v28 = -1;\n        ++v28;\n      }\n      while ( (_DWORD *)v29 != v28 );\n      v3 = v27;\n    }\n    goto LABEL_36;\n  }\n  if ( v22 == wcrtomb(s, v23, &ps) )\n  {\n    memcpy((void *)(v3 + *(_QWORD *)(a1 + 8)), s, v22);\n    goto LABEL_32;\n  }\n  v4 = v3;\n  while ( 2 )\n  {\n    v5 = *(_QWORD *)(v1 + 120);\n    ps = *(mbstate_t *)(v1 + 32);\n    if ( v5 )\n    {\n      v32 = *(_DWORD *)(v1 + 144);\n      if ( v32 > 0 && v59 > 0 )\n      {\n        v33 = (unsigned int)(v32 - 1);\n        v34 = 0LL;\n        v35 = *(_QWORD *)v1 + v4 + *(_QWORD *)(v1 + 40);\n        do\n        {\n          s[v34] = *(_BYTE *)(v5 + *(unsigned __int8 *)(v35 + v34));\n          if ( v33 == v34 )\n            break;\n          ++v34;\n        }\n        while ( v59 != v34 );\n      }\n      v55 = s;\n      v6 = sub_40AB50((wchar_t *)&wc, s, v59, src);\n    }\n    else\n    {\n      v55 = (char *)(*(_QWORD *)v1 + v4 + *(_QWORD *)(v1 + 40));\n      v6 = sub_40AB50((wchar_t *)&wc, v55, v59, src);\n    }\n    v7 = v6;\n    if ( v6 > 0xFFFFFFFFFFFFFFFDLL )\n    {\n      if ( v6 == -2LL && *(_QWORD *)(v1 + 64) < *(_QWORD *)(v1 + 88) )\n      {\nLABEL_20:\n        *(mbstate_t *)(v1 + 32) = ps;\nLABEL_21:\n        *(_QWORD *)(v1 + 48) = v3;\n        result = 0LL;\n        *(_QWORD *)(v1 + 56) = v4;\n        return result;\n      }\n      v36 = *(_QWORD *)(v1 + 120);\n      v37 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 40) + v4 + *(_QWORD *)v1);\n      if ( v36 )\n        LODWORD(v37) = *(unsigned __int8 *)(v36 + v37);\n      v38 = v3;\n      *(_BYTE *)(*(_QWORD *)(v1 + 8) + v3) = v37;\n      if ( *(_BYTE *)(v1 + 140) )\n        *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v3) = v4;\n      ++v4;\n      ++v3;\n      *(_DWORD *)(*(_QWORD *)(v1 + 16) + 4 * v38) = v37;\n      if ( v7 == -1LL )\n        *(mbstate_t *)(v1 + 32) = ps;\n      goto LABEL_6;\n    }\n    srcb = wc;\n    v8 = towupper(wc);\n    v9 = (void *)v3;\n    v10 = v8;\n    if ( srcb == v8 )\n      goto LABEL_87;\n    v11 = wcrtomb(s, v8, &ps);\n    v9 = (void *)v3;\n    v12 = v11;\n    if ( v7 == v11 )\n    {\n      memcpy((void *)(v3 + *(_QWORD *)(v1 + 8)), s, v7);\n      v13 = v3;\n      goto LABEL_14;\n    }\n    if ( v11 == -1LL )\n    {\nLABEL_87:\n      srcc = v9;\n      memcpy((void *)(v3 + *(_QWORD *)(v1 + 8)), v55, v7);\n      v13 = (signed __int64)srcc;\nLABEL_14:\n      if ( *(_BYTE *)(v1 + 140) )\n      {\n        v14 = v4;\n        if ( v7 )\n        {\n          v14 = v7 + v4;\n          v39 = *(_QWORD *)(v1 + 24) + 8 * (v3 - v4);\n          do\n          {\n            *(_QWORD *)(v39 + 8 * v4) = v4;\n            ++v4;\n          }\n          while ( v14 != v4 );\n        }\n      }\n      else\n      {\n        v14 = v4 + v7;\n      }\n      v4 = v14;\n      v15 = *(_QWORD *)(v1 + 16);\n      ++v3;\n      *(_DWORD *)(v15 + 4 * v13) = v10;\n      if ( v3 < (__int64)(v13 + v7) )\n      {\n        v16 = (_DWORD *)(v15 + 4 * v13 + 4);\n        do\n        {\n          *v16 = -1;\n          ++v16;\n        }\n        while ( (_DWORD *)(v15 + 4 * (v13 + v7)) != v16 );\n        v3 = v13 + v7;\n      }\nLABEL_6:\n      if ( v3 >= (__int64)v2 )\n        goto LABEL_21;\n      src = (mbstate_t *)(v1 + 32);\n      v59 = (signed __int64)&v2[-v3];\n      continue;\n    }\n    break;\n  }\n  v40 = (void *)(v3 + v11);\n  v41 = (unsigned __int64)v40;\n  srca = v40;\n  v42 = *(_QWORD *)(v1 + 64);\n  if ( v41 > v42 )\n    goto LABEL_20;\n  if ( *(_QWORD *)(v1 + 24)\n    || (v58 = (char *)v12, v50 = malloc(8 * v42), v12 = (size_t)v58, (*(_QWORD *)(v1 + 24) = v50) != 0LL) )\n  {\n    if ( !*(_BYTE *)(v1 + 140) )\n    {\n      if ( v3 )\n      {\n        v43 = *(_QWORD *)(v1 + 24);\n        for ( i = 0LL; i != v3; ++i )\n          *(_QWORD *)(v43 + 8 * i) = i;\n      }\n      *(_BYTE *)(v1 + 140) = 1;\n    }\n    v57 = (char *)v12;\n    memcpy((void *)(v3 + *(_QWORD *)(v1 + 8)), s, v12);\n    v45 = (wchar_t *)(*(_QWORD *)(v1 + 16) + 4 * v3);\n    v46 = *(_QWORD *)(v1 + 24);\n    *v45 = v10;\n    v47 = (signed __int64 *)(v46 + 8 * v3);\n    v48 = 1LL;\n    *v47 = v4;\n    if ( (unsigned __int64)v57 > 1 )\n    {\n      do\n      {\n        v49 = v48;\n        if ( v48 >= v7 )\n          v49 = v7 - 1;\n        v47[v48] = v4 + v49;\n        v45[v48++] = -1;\n      }\n      while ( (char *)v48 != v57 );\n    }\n    v2 = &v57[*(_QWORD *)(v1 + 88) - v7];\n    *(_QWORD *)(v1 + 88) = v2;\n    if ( v4 < *(_QWORD *)(v1 + 96) )\n      *(_QWORD *)(v1 + 104) += &v57[-v7];\n    v3 = (signed __int64)srca;\n    if ( *(_QWORD *)(v1 + 64) <= (__int64)v2 )\n      v2 = *(char **)(v1 + 64);\n    v4 += v7;\n    goto LABEL_6;\n  }\n  return 12LL;\n}\n", 
            "funcStartAddr": "0x40b710L", 
            "funcEndAddr": "0x40bd0dL", 
            "funcName": "sub_40B710"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BD10(_QWORD *a1, size_t a2)\n{\n  unsigned __int64 v2; // rax\n  __int64 v3; // rax\n  __int64 v4; // rbx\n  unsigned int v5; // ebp\n  void *v6; // rdi\n  void *v7; // rax\n  int v8; // eax\n  __int64 v10; // rcx\n  __int64 v11; // rsi\n  __int64 v12; // rax\n\n  v2 = a1[8];\n  if ( v2 > 0xFFFFFFFFFFFFFFELL )\n    return 12LL;\n  v3 = 2 * v2;\n  a2 = (int)a2;\n  v4 = (__int64)a1;\n  if ( v3 > a1[11] )\n    v3 = a1[11];\n  if ( v3 >= (int)a2 )\n    a2 = v3;\n  v5 = sub_40B170((__int64)a1, a2);\n  if ( v5 )\n    return v5;\n  v6 = (void *)a1[23];\n  if ( !v6 )\n    goto LABEL_10;\n  v7 = realloc(v6, 8LL * *(_QWORD *)(v4 + 64) + 8);\n  if ( !v7 )\n    return 12LL;\n  *(_QWORD *)(v4 + 184) = v7;\nLABEL_10:\n  v8 = *(_DWORD *)(v4 + 144);\n  if ( !*(_BYTE *)(v4 + 136) )\n  {\n    if ( v8 > 1 )\n    {\n      sub_40B560((mbstate_t *)v4);\n      return 0LL;\n    }\n    v10 = *(_QWORD *)(v4 + 120);\n    if ( v10 )\n    {\n      v11 = *(_QWORD *)(v4 + 88);\n      v12 = *(_QWORD *)(v4 + 48);\n      if ( *(_QWORD *)(v4 + 64) <= v11 )\n        v11 = *(_QWORD *)(v4 + 64);\n      if ( v11 > v12 )\n      {\n        while ( 1 )\n        {\n          *(_BYTE *)(*(_QWORD *)(v4 + 8) + v12) = *(_BYTE *)(v10\n                                                           + *(unsigned __int8 *)(*(_QWORD *)(v4 + 40)\n                                                                                + v12\n                                                                                + *(_QWORD *)v4));\n          if ( v11 == ++v12 )\n            break;\n          v10 = *(_QWORD *)(v4 + 120);\n        }\n        *(_QWORD *)(v4 + 48) = v11;\n        *(_QWORD *)(v4 + 56) = v11;\n      }\n      else\n      {\n        *(_QWORD *)(v4 + 48) = v12;\n        *(_QWORD *)(v4 + 56) = v12;\n      }\n    }\n    return v5;\n  }\n  if ( v8 > 1 )\n    return sub_40B710(v4);\n  sub_40B4E0((_QWORD *)v4);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40bd10L", 
            "funcEndAddr": "0x40be5eL", 
            "funcName": "sub_40BD10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BE60(_QWORD *a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // r12\n  __int64 result; // rax\n  __int64 v5; // rax\n\n  v2 = a1[8];\n  v3 = a1[24];\n  if ( v2 > a2 || v2 >= a1[11] )\n  {\n    v5 = a1[6];\n    if ( v5 <= a2 && v5 < a1[11] )\n    {\n      result = sub_40BD10(a1, (unsigned int)(a2 + 1));\n      if ( (_DWORD)result )\n        return result;\n    }\n  }\n  else\n  {\n    result = sub_40BD10(a1, (unsigned int)(a2 + 1));\n    if ( (_DWORD)result )\n      return result;\n  }\n  if ( v3 < a2 )\n  {\n    memset((void *)(a1[23] + 8 * v3 + 8), 0, 8 * (a2 - v3));\n    a1[24] = a2;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40be60L", 
            "funcEndAddr": "0x40bee6L", 
            "funcName": "sub_40BE60"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BEF0(void *ptr)\n{\n  free(*(void **)ptr);\n  free(*((void **)ptr + 3));\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x40bef0L", 
            "funcEndAddr": "0x40bf0eL", 
            "funcName": "sub_40BEF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BF10(__int64 a1)\n{\n  int v1; // eax\n\n  v1 = *(_DWORD *)(a1 + 8) & 0x400FF;\n  if ( v1 == 6 )\n  {\n    sub_40BEF0(*(void **)a1);\n  }\n  else if ( v1 == 3 )\n  {\n    free(*(void **)a1);\n  }\n}\n", 
            "funcStartAddr": "0x40bf10L", 
            "funcEndAddr": "0x40bf38L", 
            "funcName": "sub_40BF10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BF40(__int64 a1, __int64 a2)\n{\n  sub_40BF10(a2 + 40);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40bf40L", 
            "funcEndAddr": "0x40bf54L", 
            "funcName": "sub_40BF40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BF60(__int64 a1, __int64 a2, void *a3)\n{\n  __int64 v3; // rbx\n  unsigned __int64 v4; // rdi\n  unsigned __int64 v5; // rbp\n  void *v6; // r12\n  char *v7; // r13\n  __int64 v8; // rax\n  bool v9; // cl\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 result; // rax\n  __int64 v13; // r14\n  void *v14; // rax\n  size_t v15; // r13\n  size_t v16; // rbp\n  void *v17; // rax\n  void *ptr; // [rsp+0h] [rbp-48h]\n  void *v19; // [rsp+8h] [rbp-40h]\n  void *v20; // [rsp+8h] [rbp-40h]\n\n  v3 = a1;\n  v4 = *(_QWORD *)(a1 + 16);\n  v5 = *(_QWORD *)(v3 + 8);\n  if ( v4 >= v5 )\n  {\n    v13 = 2 * v5;\n    if ( 2 * v5 <= 0xAAAAAAAAAAAAAAALL )\n    {\n      v19 = a3;\n      v14 = realloc(*(void **)v3, 32 * v5);\n      if ( v14 )\n      {\n        *(_QWORD *)v3 = v14;\n        v15 = 16 * v5;\n        v16 = 48 * v5;\n        v6 = realloc(*(void **)(v3 + 24), v15);\n        ptr = realloc(*(void **)(v3 + 32), v15);\n        v7 = (char *)realloc(*(void **)(v3 + 40), v16);\n        v17 = realloc(*(void **)(v3 + 48), v16);\n        if ( v6 )\n        {\n          if ( ptr )\n          {\n            if ( v7 )\n            {\n              a3 = v19;\n              if ( v17 )\n              {\n                *(_QWORD *)(v3 + 24) = v6;\n                v4 = *(_QWORD *)(v3 + 16);\n                *(_QWORD *)(v3 + 32) = ptr;\n                *(_QWORD *)(v3 + 40) = v7;\n                *(_QWORD *)(v3 + 48) = v17;\n                *(_QWORD *)(v3 + 8) = v13;\n                goto LABEL_3;\n              }\n            }\n          }\n        }\n        v20 = v17;\n        free(v6);\n        free(ptr);\n        free(v7);\n        free(v20);\n      }\n    }\n    return -1LL;\n  }\n  v6 = *(void **)(v3 + 24);\n  v7 = *(char **)(v3 + 40);\nLABEL_3:\n  v8 = *(_QWORD *)v3 + 16 * v4;\n  *(_QWORD *)(v8 + 8) = a3;\n  *(_QWORD *)v8 = a2;\n  *(_DWORD *)(v8 + 8) = (unsigned int)a3 & 0xFFFC00FF;\n  v9 = (_BYTE)a3 == 6;\n  if ( (_BYTE)a3 == 5 )\n    v9 = *(_DWORD *)(v3 + 180) > 1;\n  *(_BYTE *)(v8 + 10) = (16 * v9) | *(_BYTE *)(v8 + 10) & 0xEF;\n  *((_QWORD *)v6 + v4) = -1LL;\n  v10 = (__int64)&v7[24 * *(_QWORD *)(v3 + 16)];\n  *(_OWORD *)v10 = 0LL;\n  *(_QWORD *)(v10 + 16) = 0LL;\n  v11 = *(_QWORD *)(v3 + 48) + 24LL * *(_QWORD *)(v3 + 16);\n  *(_OWORD *)v11 = 0LL;\n  *(_QWORD *)(v11 + 16) = 0LL;\n  result = *(_QWORD *)(v3 + 16);\n  *(_QWORD *)(v3 + 16) = result + 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x40bf60L", 
            "funcEndAddr": "0x40c12eL", 
            "funcName": "sub_40BF60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C130(__int64 *a1, __int64 a2, __int16 a3)\n{\n  __int64 v3; // r13\n  __int16 v4; // r12\n  __int64 v5; // rbp\n  __int64 result; // rax\n  __int64 v7; // r8\n  __int64 v8; // rsi\n  unsigned int v9; // ecx\n  unsigned int v10; // edx\n\n  v3 = 16 * a2;\n  v4 = a3;\n  v5 = a2;\n  result = sub_40BF60((__int64)a1, *(_QWORD *)(*a1 + 16 * a2), *(void **)(*a1 + 16 * a2 + 8));\n  if ( result != -1 )\n  {\n    v7 = *a1;\n    v8 = *a1 + 16 * result;\n    v9 = ((v4 & 0x3FF) << 8) | *(_DWORD *)(v8 + 8) & 0xFFFC00FF;\n    *(_DWORD *)(v8 + 8) = v9;\n    v10 = v9 & 0xFFFC00FF | (((v4 & 0x3FF | (unsigned __int16)(*(_DWORD *)(v7 + v3 + 8) >> 8)) & 0x3FF) << 8);\n    *(_DWORD *)(v8 + 8) = v10;\n    *(_BYTE *)(v8 + 10) = BYTE2(v10) | 4;\n    *(_QWORD *)(a1[4] + 8 * result) = v5;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c130L", 
            "funcEndAddr": "0x40c1cfL", 
            "funcName": "sub_40C130"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C1D0(__int64 *a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5)\n{\n  __int64 v5; // r9\n  __int64 v6; // r13\n  unsigned int v7; // er12\n  __int64 *v8; // rbx\n  __int64 v9; // rcx\n  __int64 v10; // rdi\n  __int64 v11; // r14\n  __int64 v12; // rax\n  __int64 v13; // r14\n  __int64 v14; // r8\n  __int64 v15; // rsi\n  __int64 v16; // rbp\n  _QWORD *v17; // rdi\n  __int64 v18; // r15\n  __int64 v19; // rdx\n  __int64 v20; // rsi\n  __int64 v21; // rax\n  char v22; // al\n  __int64 result; // rax\n  __int64 v24; // rax\n  __int64 v25; // r15\n  __int64 v26; // r9\n  __int64 v27; // rax\n  __int64 v28; // r13\n  char v29; // dl\n  __int64 v30; // [rsp+0h] [rbp-48h]\n  __int64 v31; // [rsp+8h] [rbp-40h]\n\n  v5 = a2;\n  v6 = a3;\n  v7 = a5;\n  v8 = a1;\n  v31 = a4;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v9 = *v8;\n      v10 = v8[5];\n      v11 = v6;\n      v12 = *v8 + 16 * v5;\n      if ( *(_BYTE *)(v12 + 8) == 4 )\n      {\n        v25 = 8 * v5;\n        v16 = 24 * v6;\n        v26 = *(_QWORD *)(v8[3] + 8 * v5);\n        *(_QWORD *)(v10 + 24 * v6 + 8) = 0LL;\n        v30 = v26;\n        v6 = sub_40C130(v8, v26, v7);\n        if ( v6 == -1 )\n          return 12LL;\n        *(_QWORD *)(v8[3] + 8 * v11) = *(_QWORD *)(v8[3] + v25);\n        goto LABEL_14;\n      }\n      v13 = 24 * v5;\n      v14 = v10 + 24 * v5;\n      v15 = *(_QWORD *)(v14 + 8);\n      if ( !v15 )\n      {\n        *(_QWORD *)(v8[3] + 8 * v6) = *(_QWORD *)(v8[3] + 8 * v5);\n        return 0LL;\n      }\n      v16 = 24 * v6;\n      v17 = (_QWORD *)(24 * v6 + v10);\n      v18 = **(_QWORD **)(v14 + 16);\n      v17[1] = 0LL;\n      if ( v15 == 1 )\n        break;\n      v19 = v8[2];\n      v20 = v19 - 1;\n      v21 = v9 + 16 * (v19 - 1);\n      if ( *(_BYTE *)(v21 + 10) & 4 && v20 > 0 )\n      {\n        while ( *(_QWORD *)(v8[4] + 8 * v20) != v18 || v7 != ((*(_DWORD *)(v21 + 8) >> 8) & 0x3FF) )\n        {\n          v21 += -16 * (v19 - 1) + 16 * v19 - 32;\n          --v20;\n          if ( !(*(_BYTE *)(v21 + 10) & 4) || v20 <= 0 )\n            goto LABEL_24;\n        }\n        if ( !(unsigned __int8)sub_40B280(v17, v20) )\n          return 12LL;\n      }\n      else\n      {\nLABEL_24:\n        v27 = sub_40C130(v8, v18, v7);\n        v28 = v27;\n        if ( v27 == -1 || !(unsigned __int8)sub_40B280((_QWORD *)(v16 + v8[5]), v27) )\n          return 12LL;\n        result = sub_40C1D0(v8, v18, v28, v31, v7);\n        if ( (_DWORD)result )\n          return result;\n      }\n      v30 = *(_QWORD *)(*(_QWORD *)(v8[5] + v13 + 16) + 8LL);\n      v6 = sub_40C130(v8, v30, v7);\n      if ( v6 == -1 )\n        return 12LL;\nLABEL_14:\n      v22 = sub_40B280((_QWORD *)(v16 + v8[5]), v6);\n      v5 = v30;\n      if ( !v22 )\n        return 12LL;\n    }\n    if ( v5 == v31 && v5 != v6 )\n      break;\n    v7 |= (*(_DWORD *)(v12 + 8) >> 8) & 0x3FF;\n    v24 = sub_40C130(v8, v18, v7);\n    v6 = v24;\n    if ( v24 == -1 || !(unsigned __int8)sub_40B280((_QWORD *)(v16 + v8[5]), v24) )\n      return 12LL;\n    v5 = v18;\n  }\n  v29 = sub_40B280(v17, v18);\n  result = 0LL;\n  if ( !v29 )\n    return 12LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x40c1d0L", 
            "funcEndAddr": "0x40c454L", 
            "funcName": "sub_40C1D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C460(void *ptr)\n{\n  void **v1; // rax\n\n  free(*((void **)ptr + 6));\n  free(*((void **)ptr + 9));\n  v1 = (void **)*((_QWORD *)ptr + 10);\n  if ( v1 != (void **)((char *)ptr + 8) )\n  {\n    free(v1[2]);\n    free(*((void **)ptr + 10));\n  }\n  free(*((void **)ptr + 3));\n  free(*((void **)ptr + 12));\n  free(*((void **)ptr + 11));\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x40c460L", 
            "funcEndAddr": "0x40c4b9L", 
            "funcName": "sub_40C460"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C4C0(__int64 a1)\n{\n  free(*(void **)(a1 + 16));\n  free(*(void **)(a1 + 24));\n  if ( *(_BYTE *)(a1 + 139) )\n    free(*(void **)(a1 + 8));\n}\n", 
            "funcStartAddr": "0x40c4c0L", 
            "funcEndAddr": "0x40c4f2L", 
            "funcName": "sub_40C4C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C500(_QWORD *a1)\n{\n  __int64 v1; // r13\n  __int64 v2; // r12\n  __int64 v3; // rbx\n  void **v4; // rbp\n  __int64 v5; // rax\n\n  if ( a1[29] > 0LL )\n  {\n    v1 = 0LL;\n    do\n    {\n      v2 = *(_QWORD *)(a1[31] + 8 * v1);\n      if ( *(_QWORD *)(v2 + 32) > 0LL )\n      {\n        v3 = 0LL;\n        do\n        {\n          v4 = *(void ***)(*(_QWORD *)(v2 + 40) + 8 * v3++);\n          free(v4[4]);\n          free(v4);\n        }\n        while ( *(_QWORD *)(v2 + 32) > v3 );\n      }\n      free(*(void **)(v2 + 40));\n      v5 = *(_QWORD *)(v2 + 16);\n      if ( v5 )\n      {\n        free(*(void **)(v5 + 16));\n        free(*(void **)(v2 + 16));\n      }\n      ++v1;\n      free((void *)v2);\n    }\n    while ( a1[29] > v1 );\n  }\n  a1[29] = 0LL;\n  a1[25] = 0LL;\n}\n", 
            "funcStartAddr": "0x40c500L", 
            "funcEndAddr": "0x40c5b8L", 
            "funcName": "sub_40C500"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C5C0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  __int64 v3; // rdx\n  __int64 result; // rax\n  __int64 v5; // rax\n  __int64 v6; // rax\n  __int64 v7; // rbp\n  __int64 v8; // rax\n  __int64 v9; // rax\n  __int64 v10; // r12\n  _QWORD *v11; // rbx\n  _QWORD *v12; // rax\n  __int64 v13; // rbx\n  _QWORD *v14; // rbp\n  _QWORD *v15; // rax\n  __int64 v16; // rbp\n  _QWORD *v17; // rbx\n  _QWORD *v18; // rax\n\n  v2 = *(_BYTE *)(a2 + 48);\n  v3 = *(_QWORD *)(a2 + 56);\n  switch ( v2 )\n  {\n    case 2:\n      if ( *(_QWORD *)(a2 + 32) )\n        __assert_fail(\"node->next == NULL\", \"lib/regcomp.c\", 0x5A9u, \"link_nfa_nodes\");\n      goto LABEL_4;\n    case 4:\n      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 56LL);\n      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v3) = v13;\n      if ( *(_BYTE *)(a2 + 48) != 4 )\n        goto LABEL_4;\n      v14 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v3);\n      *v14 = 1LL;\n      v14[1] = 1LL;\n      v15 = malloc(8uLL);\n      v14[2] = v15;\n      if ( v15 )\n      {\n        *v15 = v13;\n        result = 0LL;\n      }\n      else\n      {\n        v14[1] = 0LL;\n        result = 12LL;\n        *v14 = 0LL;\n      }\n      break;\n    case 8:\n    case 9:\n    case 12:\n      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 56LL);\n      v17 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v3);\n      *v17 = 1LL;\n      v17[1] = 1LL;\n      v18 = malloc(8uLL);\n      v17[2] = v18;\n      if ( v18 )\n      {\n        *v18 = v16;\n        result = 0LL;\n      }\n      else\n      {\n        v17[1] = 0LL;\n        result = 12LL;\n        *v17 = 0LL;\n      }\n      return result;\n    case 10:\n    case 11:\n      *(_BYTE *)(a1 + 176) |= 1u;\n      v5 = *(_QWORD *)(a2 + 8);\n      if ( v5 )\n        v6 = *(_QWORD *)(v5 + 24);\n      else\n        v6 = *(_QWORD *)(a2 + 32);\n      v7 = *(_QWORD *)(v6 + 56);\n      v8 = *(_QWORD *)(a2 + 16);\n      if ( v8 )\n        v9 = *(_QWORD *)(v8 + 24);\n      else\n        v9 = *(_QWORD *)(a2 + 32);\n      v10 = *(_QWORD *)(v9 + 56);\n      if ( v7 < 0 )\n        __assert_fail(\"left > -1\", \"lib/regcomp.c\", 0x5B9u, \"link_nfa_nodes\");\n      if ( v10 < 0 )\n        __assert_fail(\"right > -1\", \"lib/regcomp.c\", 0x5BAu, \"link_nfa_nodes\");\n      v11 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v3);\n      *v11 = 2LL;\n      v12 = malloc(0x10uLL);\n      v11[2] = v12;\n      if ( !v12 )\n        return 12LL;\n      if ( v7 == v10 )\n      {\n        v11[1] = 1LL;\n        *v12 = v7;\n        result = 0LL;\n      }\n      else\n      {\n        v11[1] = 2LL;\n        if ( v7 >= v10 )\n        {\n          *v12 = v10;\n          v12[1] = v7;\n        }\n        else\n        {\n          *v12 = v7;\n          v12[1] = v10;\n        }\n        result = 0LL;\n      }\n      return result;\n    case 16:\n      goto LABEL_4;\n    default:\n      if ( v2 & 8 )\n        __assert_fail(\"!IS_EPSILON_NODE (node->token.type)\", \"lib/regcomp.c\", 0x5CCu, \"link_nfa_nodes\");\n      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v3) = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 56LL);\nLABEL_4:\n      result = 0LL;\n      break;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c5c0L", 
            "funcEndAddr": "0x40c83fL", 
            "funcName": "sub_40C5C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C840(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n  __int64 v3; // rax\n  __int64 v4; // rdx\n  __int64 v5; // rcx\n  __int64 v6; // rsi\n  __int64 v7; // rdx\n  __int64 result; // rax\n\n  v2 = *(_QWORD *)(a1 + 48);\n  v3 = a2 + 1;\n  if ( a2 + 1 >= v2 )\n    return 1LL;\n  v4 = *(_QWORD *)(a1 + 16);\n  if ( *(_DWORD *)(v4 + 4 * v3) != -1 )\n    return 1LL;\n  v5 = v2 - a2;\n  v6 = v4 + 4 * v3 - 4;\n  v7 = 2LL;\n  do\n  {\n    result = (unsigned int)v7;\n    if ( v7 == v5 )\n      break;\n    ++v7;\n  }\n  while ( *(_DWORD *)(v6 + 4 * v7 - 4) == -1 );\n  return result;\n}\n", 
            "funcStartAddr": "0x40c840L", 
            "funcEndAddr": "0x40c88eL", 
            "funcName": "sub_40C840"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C890(__int64 a1, __int64 *a2, __int64 a3)\n{\n  __int64 result; // rax\n  __int64 v4; // r8\n  unsigned __int64 v5; // rdi\n  unsigned __int64 v6; // rsi\n  unsigned __int64 v7; // rcx\n  unsigned __int64 v8; // rax\n\n  result = 0LL;\n  if ( a1 > 0 )\n  {\n    v4 = *a2;\n    v5 = a1 - 1;\n    v6 = 0LL;\n    while ( v6 < v5 )\n    {\n      v7 = (v6 + v5) >> 1;\n      if ( a3 <= *(_QWORD *)(v4 + 8 * v7) )\n      {\n        while ( v6 < v7 )\n        {\n          v8 = (v6 + v7) >> 1;\n          if ( *(_QWORD *)(v4 + 8 * v8) < a3 )\n            goto LABEL_11;\n          v7 = (v6 + v7) >> 1;\n        }\n        break;\n      }\n      v8 = (v6 + v5) >> 1;\n      v7 = v5;\nLABEL_11:\n      v6 = v8 + 1;\n      v5 = v7;\n    }\n    result = 0LL;\n    if ( a3 == *(_QWORD *)(v4 + 8 * v6) )\n      result = v6 + 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40c890L", 
            "funcEndAddr": "0x40c8f5L", 
            "funcName": "sub_40C890"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C900(_QWORD *a1, _QWORD *a2, __int64 a3, __int64 a4, unsigned int a5)\n{\n  __int64 v5; // r15\n  unsigned int v6; // er13\n  __int64 i; // rbx\n  __int64 v8; // rax\n  __int64 v9; // rbx\n  __int64 v10; // rdx\n  __int64 v11; // rax\n  __int64 *v12; // rdx\n  __int64 result; // rax\n\n  v5 = a4;\n  v6 = a5;\n  for ( i = a3; !sub_40C890(a2[1], a2 + 2, i); i = *v12 )\n  {\n    v8 = *a1 + 16 * i;\n    if ( *(unsigned __int8 *)(v8 + 8) == v6 && *(_QWORD *)v8 == v5 )\n    {\n      if ( v6 == 9 && !(unsigned __int8)sub_40B280(a2, i) )\n        return 12LL;\n      return 0LL;\n    }\n    if ( !(unsigned __int8)sub_40B280(a2, i) )\n      return 12LL;\n    v9 = 24 * i;\n    v10 = v9 + a1[5];\n    v11 = *(_QWORD *)(v10 + 8);\n    if ( !v11 )\n      return 0LL;\n    v12 = *(__int64 **)(v10 + 16);\n    if ( v11 == 2 )\n    {\n      result = sub_40C900(a1, a2, v12[1], v5, v6);\n      if ( (_DWORD)result )\n        return result;\n      v12 = *(__int64 **)(a1[5] + v9 + 16);\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40c900L", 
            "funcEndAddr": "0x40c9f9L", 
            "funcName": "sub_40C900"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40CA00(_QWORD *a1, __int64 *a2, __int64 a3)\n{\n  __int64 v3; // rax\n\n  if ( a3 < *a1 )\n  {\n    v3 = *a2;\n    do\n    {\n      *(_QWORD *)(v3 + 8 * a3) = *(_QWORD *)(v3 + 8 * a3 + 8);\n      ++a3;\n    }\n    while ( a3 < *a1 );\n  }\n}\n", 
            "funcStartAddr": "0x40ca00L", 
            "funcEndAddr": "0x40ca23L", 
            "funcName": "sub_40CA00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CA30(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  __int64 v4; // rax\n  __int64 v5; // rcx\n  _QWORD *v6; // rax\n  __int64 v7; // rax\n  __int64 v8; // rcx\n\n  v2 = *(_BYTE *)(a2 + 48);\n  if ( v2 != 4 )\n  {\n    if ( v2 == 17 )\n    {\n      v4 = *(_QWORD *)(a2 + 8);\n      if ( v4 )\n      {\n        if ( *(_BYTE *)(v4 + 48) == 17 )\n        {\n          v5 = *(_QWORD *)(v4 + 40);\n          v6 = *(_QWORD **)(v4 + 8);\n          *(_QWORD *)(a2 + 8) = v6;\n          if ( v6 )\n            *v6 = a2;\n          *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v5) = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8LL * *(_QWORD *)(a2 + 40));\n          if ( v5 <= 63 )\n            *(_QWORD *)(a1 + 160) &= __ROL8__(-2LL, v5);\n        }\n      }\n    }\n    return 0LL;\n  }\n  v7 = *(_QWORD *)(a1 + 224);\n  if ( !v7 )\n    return 0LL;\n  v8 = *(_QWORD *)(v7 + 8LL * *(int *)(a2 + 40));\n  *(_QWORD *)(a2 + 40) = v8;\n  *(_QWORD *)(a1 + 160) |= 1 << v8;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40ca30L", 
            "funcEndAddr": "0x40cabbL", 
            "funcName": "sub_40CA30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CAC0(__int64 a1, __int64 a2)\n{\n  char v2; // al\n  __int64 v3; // rdx\n  __int64 v4; // rax\n  __int64 result; // rax\n  __int64 v6; // rax\n\n  v2 = *(_BYTE *)(a2 + 48);\n  v3 = *(_QWORD *)(a2 + 8);\n  if ( v2 == 11 )\n  {\n    *(_QWORD *)(v3 + 32) = a2;\n    result = 0LL;\n  }\n  else if ( v2 == 16 )\n  {\n    v6 = *(_QWORD *)(a2 + 16);\n    *(_QWORD *)(v3 + 32) = *(_QWORD *)(v6 + 24);\n    *(_QWORD *)(v6 + 32) = *(_QWORD *)(a2 + 32);\n    result = 0LL;\n  }\n  else\n  {\n    if ( v3 )\n      *(_QWORD *)(v3 + 32) = *(_QWORD *)(a2 + 32);\n    v4 = *(_QWORD *)(a2 + 16);\n    if ( v4 )\n      *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40cac0L", 
            "funcEndAddr": "0x40cb17L", 
            "funcName": "sub_40CAC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CB20(_QWORD *a1, _QWORD *a2, _QWORD *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)\n{\n  __int64 v7; // rbx\n  __int64 v8; // r15\n  __int64 i; // rax\n  __int64 v10; // rbp\n  __int64 v11; // r10\n  __int64 v12; // rax\n  __int64 v13; // rbp\n  __int64 v14; // r11\n  __int64 v15; // r10\n  __int64 v16; // r14\n  _QWORD *v17; // rbp\n  __int64 v18; // rsi\n  __int64 v19; // r12\n  int v20; // ebx\n  __int64 v22; // r13\n  __int64 v23; // r14\n  _QWORD *v24; // [rsp+8h] [rbp-70h]\n  __int64 v25; // [rsp+10h] [rbp-68h]\n  __int64 v26; // [rsp+18h] [rbp-60h]\n  __int64 v27; // [rsp+20h] [rbp-58h]\n  __int64 v28; // [rsp+28h] [rbp-50h]\n  __int64 v29; // [rsp+30h] [rbp-48h]\n  _QWORD *v30; // [rsp+38h] [rbp-40h]\n\n  v7 = 0LL;\n  v8 = a1[25];\n  v24 = (_QWORD *)a1[19];\n  for ( i = a1[25]; v7 < i; i = v11 )\n  {\n    v10 = a1[27];\n    v11 = (v7 + i) / 2;\n    if ( a5 <= *(_QWORD *)(v10 + 40 * v11 + 8) )\n    {\n      while ( v7 < v11 )\n      {\n        v22 = (v7 + v11) / 2;\n        if ( *(_QWORD *)(v10 + 40 * v22 + 8) < a5 )\n          goto LABEL_26;\n        v11 = (v7 + v11) / 2;\n      }\n      break;\n    }\n    v22 = (v7 + i) / 2;\n    v11 = i;\nLABEL_26:\n    v7 = v22 + 1;\n  }\n  if ( v8 <= v7 )\n  {\n    v7 = -1LL;\n  }\n  else if ( a5 != *(_QWORD *)(a1[27] + 40 * v7 + 8) )\n  {\n    v7 = -1LL;\n  }\n  v12 = a1[25];\n  v13 = 0LL;\n  while ( v13 < v12 )\n  {\n    v14 = a1[27];\n    v15 = (v13 + v12) / 2;\n    if ( a7 <= *(_QWORD *)(v14 + 40 * v15 + 8) )\n    {\n      while ( v13 < v15 )\n      {\n        v23 = (v13 + v15) / 2;\n        if ( *(_QWORD *)(v14 + 40 * v23 + 8) < a7 )\n          goto LABEL_27;\n        v15 = (v13 + v15) / 2;\n      }\n      break;\n    }\n    v23 = (v13 + v12) / 2;\n    v15 = v12;\nLABEL_27:\n    v13 = v23 + 1;\n    v12 = v15;\n  }\n  if ( v8 <= v13 )\n  {\n    v13 = -1LL;\n  }\n  else if ( a7 != *(_QWORD *)(a1[27] + 40 * v13 + 8) )\n  {\n    v13 = -1LL;\n  }\n  if ( *a2 <= 0LL )\n    return 0LL;\n  v27 = a6;\n  v16 = 0LL;\n  v26 = a5;\n  v25 = a4;\n  v30 = a2;\n  v28 = v7;\n  v29 = v13;\n  v17 = a3;\n  while ( 1 )\n  {\n    v18 = *(_QWORD *)(*v17 + 8 * v16);\n    v19 = *(_QWORD *)(*v24 + 16LL * *(_QWORD *)(a1[27] + 40 * v18));\n    v20 = sub_40B100((__int64)a1, v18, v19, v25, v26, v28);\n    if ( v20 != (unsigned int)sub_40B100((__int64)a1, *(_QWORD *)(*v17 + 8 * v16), v19, v27, a7, v29) )\n      break;\n    if ( ++v16 >= *v30 )\n      return 0LL;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x40cb20L", 
            "funcEndAddr": "0x40cd6eL", 
            "funcName": "sub_40CB20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CD70(_QWORD *a1, __int64 (__fastcall *a2)(__int64, _QWORD *), __int64 a3)\n{\n  __int64 v3; // rbp\n  _QWORD *i; // rbx\n  __int64 result; // rax\n  _QWORD *v6; // rdx\n  _QWORD *v7; // rcx\n\n  v3 = a3;\n  for ( i = a1; ; i = v6 )\n  {\n    result = a2(v3, i);\n    if ( (_DWORD)result )\n      break;\n    v6 = (_QWORD *)i[1];\n    v7 = 0LL;\n    if ( !v6 )\n    {\n      while ( 1 )\n      {\n        v6 = (_QWORD *)i[2];\n        if ( v6 != v7 )\n        {\n          if ( v6 )\n            break;\n        }\n        v7 = i;\n        if ( !*i )\n          return result;\n        i = (_QWORD *)*i;\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40cd70L", 
            "funcEndAddr": "0x40cdc1L", 
            "funcName": "sub_40CD70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CDD0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // r12\n  __int64 v4; // rdx\n  __int64 v5; // rbx\n  __int64 v6; // rbp\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  __int64 v9; // rdi\n  __int64 v10; // rcx\n  __int64 v11; // rsi\n  __int64 v12; // rax\n  __int64 v13; // rcx\n  __int64 v14; // rax\n  __int64 v15; // r8\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  _QWORD *v18; // rdi\n  __int64 v19; // rsi\n  __int64 v20; // rcx\n  _QWORD *v21; // r9\n  __int64 v23; // rax\n  __int64 v24; // rbp\n  void *v25; // rax\n  void *v26; // rdi\n  const void *v27; // rsi\n\n  if ( !a2 )\n    return 0LL;\n  v2 = *(_QWORD *)(a2 + 8);\n  if ( !v2 )\n    return 0LL;\n  v3 = a2;\n  v4 = *(_QWORD *)(a1 + 8);\n  v5 = a1;\n  if ( *(_QWORD *)a1 >= v4 + 2 * v2 )\n  {\n    if ( v4 )\n      goto LABEL_5;\nLABEL_26:\n    v26 = *(void **)(a1 + 16);\n    v27 = *(const void **)(a2 + 16);\n    *(_QWORD *)(v5 + 8) = v2;\n    memcpy(v26, v27, 8LL * *(_QWORD *)(v3 + 8));\n    return 0LL;\n  }\n  v23 = *(_QWORD *)a1 + v2;\n  v24 = 2 * v23;\n  v25 = realloc(*(void **)(a1 + 16), 16 * v23);\n  if ( !v25 )\n    return 12LL;\n  v4 = *(_QWORD *)(a1 + 8);\n  *(_QWORD *)(a1 + 16) = v25;\n  *(_QWORD *)a1 = v24;\n  v2 = *(_QWORD *)(a2 + 8);\n  if ( !v4 )\n    goto LABEL_26;\nLABEL_5:\n  v6 = v4 + 2 * v2;\n  v7 = v2 - 1;\n  v8 = v4 - 1;\n  v9 = ~v7;\nLABEL_6:\n  if ( v9 < 0 )\n  {\n    while ( v8 >= 0 )\n    {\n      v10 = *(_QWORD *)(v5 + 16);\n      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v7);\n      if ( *(_QWORD *)(v10 + 8 * v8) == v11 )\n      {\n        --v7;\n        --v8;\n        v9 = ~v7;\n        goto LABEL_6;\n      }\n      if ( *(_QWORD *)(v10 + 8 * v8) >= v11 )\n      {\n        --v8;\n        goto LABEL_6;\n      }\n      --v7;\n      *(_QWORD *)(v10 + 8 * --v6) = v11;\n      v9 = ~v7;\n      if ( v7 < 0 )\n        break;\n    }\n  }\n  if ( v7 >= 0 )\n  {\n    v12 = v7 + 1;\n    v6 -= v12;\n    memcpy((void *)(*(_QWORD *)(v5 + 16) + 8 * v6), *(const void **)(v3 + 16), 8 * v12);\n  }\n  v13 = *(_QWORD *)(v5 + 8);\n  v14 = *(_QWORD *)(v3 + 8);\n  v15 = v13 + 2 * v14 - 1;\n  v16 = v13 + 2 * v14 - v6;\n  if ( !v16 )\n    return 0LL;\n  v17 = v13 - 1;\n  v18 = *(_QWORD **)(v5 + 16);\n  *(_QWORD *)(v5 + 8) = v16 + v13;\n  do\n  {\n    while ( 1 )\n    {\n      v19 = v18[v15];\n      v20 = v18[v17];\n      v21 = &v18[v17 + v16];\n      if ( v19 <= v20 )\n        break;\n      --v15;\n      *v21 = v19;\n      if ( !--v16 )\n        return 0LL;\n    }\n    *v21 = v20;\n    --v17;\n  }\n  while ( v17 >= 0 );\n  memcpy(v18, &v18[v6], 8 * v16);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40cdd0L", 
            "funcEndAddr": "0x40cf93L", 
            "funcName": "sub_40CDD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CFA0(__m128i *a1, __int64 *a2, __int64 a3, char a4)\n{\n  __int64 *v4; // r15\n  __int64 v5; // r12\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  __int64 v8; // rax\n  __int64 v9; // rdx\n  __int64 v10; // rax\n  unsigned int v11; // er8\n  __int64 v12; // rsi\n  __int64 v13; // rax\n  char v14; // r13\n  __int64 v15; // r14\n  __int64 result; // rax\n  __int64 v17; // rbx\n  __int64 v18; // rax\n  __int64 v19; // rcx\n  __int64 v20; // rax\n  __m128i v21; // xmm1\n  char v22; // [rsp+Ch] [rbp-7Ch]\n  __int128 v23; // [rsp+10h] [rbp-78h]\n  void *v24; // [rsp+20h] [rbp-68h]\n  __m128i v25; // [rsp+30h] [rbp-58h]\n  void *ptr; // [rsp+40h] [rbp-48h]\n\n  v4 = a2;\n  v5 = a3;\n  v6 = 24 * a3;\n  v7 = 24 * a3 + a2[5];\n  v22 = a4;\n  v8 = *(_QWORD *)(v7 + 8);\n  v23 = (unsigned __int64)(v8 + 1);\n  v24 = malloc(8 * (v8 + 1));\n  if ( !v24 )\n    return 12LL;\n  v9 = *a2;\n  *(_QWORD *)(a2[6] + v6 + 8) = -1LL;\n  v10 = v9 + 16 * v5;\n  v11 = *(_DWORD *)(v10 + 8);\n  if ( !(v11 & 0x3FF00) )\n    goto LABEL_3;\n  if ( !*(_QWORD *)(v7 + 8) )\n    goto LABEL_24;\n  if ( *(_BYTE *)(v9 + 16LL * **(_QWORD **)(v7 + 16) + 10) & 4 )\n  {\nLABEL_3:\n    if ( *(_BYTE *)(v10 + 8) & 8 )\n    {\n      v12 = a2[5];\n      v13 = v12 + v6;\n      if ( *(_QWORD *)(v12 + v6 + 8) > 0LL )\n      {\n        v14 = 0;\n        v15 = 0LL;\n        do\n        {\n          while ( 1 )\n          {\n            v17 = 24LL * *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v15);\n            v18 = v17 + v4[6];\n            v19 = *(_QWORD *)(v18 + 8);\n            if ( v19 != -1 )\n              break;\n            v13 = v12 + v6;\n            v14 = 1;\n            if ( *(_QWORD *)(v12 + v6 + 8) <= ++v15 )\n              goto LABEL_16;\n          }\n          if ( v19 )\n          {\n            v25 = _mm_loadu_si128((const __m128i *)v18);\n            ptr = *(void **)(v18 + 16);\n          }\n          else\n          {\n            result = sub_40CFA0(&v25, v4);\n            if ( (_DWORD)result )\n              return result;\n          }\n          result = sub_40CDD0((__int64)&v23, (__int64)&v25);\n          if ( (_DWORD)result )\n            return result;\n          if ( !*(_QWORD *)(v4[6] + v17 + 8) )\n          {\n            v14 = 1;\n            free(ptr);\n          }\n          v12 = v4[5];\n          ++v15;\n          v13 = v12 + v6;\n        }\n        while ( *(_QWORD *)(v12 + v6 + 8) > v15 );\nLABEL_16:\n        if ( (unsigned __int8)sub_40B280(&v23, v5) )\n        {\n          v20 = v4[6];\n          if ( v22 != 1 && v14 )\n          {\n            *(_QWORD *)(v20 + v6 + 8) = 0LL;\nLABEL_27:\n            v21 = _mm_load_si128((const __m128i *)&v23);\n            a1[1].m128i_i64[0] = (__int64)v24;\n            result = 0LL;\n            *a1 = v21;\n            return result;\n          }\nLABEL_26:\n          *(__m128i *)(v20 + v6) = _mm_load_si128((const __m128i *)&v23);\n          *(_QWORD *)(v20 + v6 + 16) = v24;\n          goto LABEL_27;\n        }\n        return 12LL;\n      }\n    }\nLABEL_24:\n    if ( (unsigned __int8)sub_40B280(&v23, v5) )\n    {\n      v20 = v4[6];\n      goto LABEL_26;\n    }\n    return 12LL;\n  }\n  result = sub_40C1D0(a2, v5, v5, v5, (v11 >> 8) & 0x3FF);\n  if ( !(_DWORD)result )\n  {\n    v10 = 16 * v5 + *a2;\n    goto LABEL_3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40cfa0L", 
            "funcEndAddr": "0x40d1f4L", 
            "funcName": "sub_40CFA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D200(_QWORD *a1, __int64 a2, __int64 a3, unsigned int a4)\n{\n  __int64 v4; // r14\n  __int64 v5; // rbp\n  unsigned int v6; // ebx\n  signed __int64 v7; // r12\n  __int64 v8; // r12\n  __int64 v9; // rdx\n  __int64 v10; // rsi\n  __int64 v11; // r9\n  __int64 v12; // r11\n  __int64 v13; // rcx\n  __int64 v14; // rax\n  unsigned int v15; // eax\n  __m128i v16; // xmm0\n  __int64 result; // rax\n  unsigned int v18; // [rsp+Ch] [rbp-4Ch]\n  __int128 v19; // [rsp+10h] [rbp-48h]\n  void *ptr; // [rsp+20h] [rbp-38h]\n\n  v4 = a2;\n  v5 = a3;\n  v6 = a4;\n  v7 = *(_QWORD *)(a2 + 8);\n  v19 = (unsigned __int64)v7;\n  ptr = malloc(8 * v7);\n  if ( ptr )\n  {\n    if ( v7 <= 0 )\n    {\nLABEL_12:\n      free(*(void **)(v4 + 16));\n      v16 = _mm_load_si128((const __m128i *)&v19);\n      *(_QWORD *)(v4 + 16) = ptr;\n      result = 0LL;\n      *(__m128i *)v4 = v16;\n      return result;\n    }\n    v8 = 0LL;\n    while ( 1 )\n    {\n      v9 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v8);\n      v10 = a1[6] + 24 * v9;\n      v11 = *(_QWORD *)(v10 + 8);\n      if ( v11 <= 0 )\n        goto LABEL_13;\n      v12 = *(_QWORD *)(v10 + 16);\n      v13 = 0LL;\n      while ( 1 )\n      {\n        v14 = *a1 + 16LL * *(_QWORD *)(v12 + 8 * v13);\n        if ( v6 == *(unsigned __int8 *)(v14 + 8) && v5 == *(_QWORD *)v14 )\n          break;\n        if ( v11 == ++v13 )\n          goto LABEL_13;\n      }\n      if ( *(_QWORD *)(v12 + 8 * v13) == -1LL )\n      {\nLABEL_13:\n        v15 = sub_40CDD0((__int64)&v19, v10);\n        if ( v15 )\n        {\nLABEL_14:\n          v18 = v15;\n          free(ptr);\n          return v18;\n        }\n      }\n      else\n      {\n        v15 = sub_40C900(a1, &v19, v9, v5, v6);\n        if ( v15 )\n          goto LABEL_14;\n      }\n      if ( *(_QWORD *)(v4 + 8) <= ++v8 )\n        goto LABEL_12;\n    }\n  }\n  return 12LL;\n}\n", 
            "funcStartAddr": "0x40d200L", 
            "funcEndAddr": "0x40d33fL", 
            "funcName": "sub_40D200"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D340(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r10\n  __int64 result; // rax\n  __int64 v5; // r8\n  __int64 v6; // r12\n  __int64 v7; // rbp\n  __int64 *v8; // rbx\n  __int64 v9; // rcx\n  __int64 v10; // r13\n  char *v11; // rdi\n  __int64 v12; // r13\n  __int64 v13; // r11\n  __int64 v14; // rsi\n  __int64 v15; // rax\n  __int64 v16; // r10\n  __int64 v17; // rsi\n  __int64 v18; // rcx\n  __int64 v19; // r8\n  __int64 v20; // rdx\n  bool v21; // cc\n  __int64 v22; // r9\n  __int64 v23; // rcx\n  __int64 v24; // rdx\n  __int64 v25; // rax\n  __int64 v26; // r9\n  __int64 v27; // rdx\n  __int64 v28; // r8\n  __int64 v29; // rcx\n  char *v30; // r10\n  size_t v31; // rdx\n  __int64 v32; // r13\n  char *v33; // rax\n\n  v3 = *(_QWORD *)(a2 + 8);\n  result = 0LL;\n  if ( v3 )\n  {\n    v5 = *(_QWORD *)(a3 + 8);\n    if ( v5 )\n    {\n      v6 = a3;\n      v7 = a2;\n      v8 = a1;\n      v9 = a1[1];\n      v10 = *a1;\n      v11 = (char *)a1[2];\n      if ( v3 + v5 + v9 > v10 )\n      {\n        v32 = v3 + v5 + v10;\n        v33 = (char *)realloc(v11, 8 * v32);\n        v11 = v33;\n        if ( !v33 )\n          return 12LL;\n        v9 = v8[1];\n        v3 = *(_QWORD *)(a2 + 8);\n        v8[2] = (__int64)v33;\n        *v8 = v32;\n        v5 = *(_QWORD *)(v6 + 8);\n      }\n      v12 = *(_QWORD *)(a2 + 16);\n      v13 = *(_QWORD *)(v6 + 16);\n      v14 = v9 + v3;\n      v15 = v5 - 1;\n      v16 = v3 - 1;\n      v17 = v5 + v14;\n      v18 = v9 - 1;\n      v19 = *(_QWORD *)(v12 + 8 * v16);\n      v20 = *(_QWORD *)(v13 + 8 * v15);\n      while ( 1 )\n      {\n        v21 = v19 < v20;\n        if ( v19 == v20 )\n          break;\nLABEL_6:\n        if ( v21 )\n        {\n          if ( --v15 >= 0 )\n            goto LABEL_8;\n          goto LABEL_21;\n        }\n        if ( --v16 < 0 )\n          goto LABEL_21;\n        v19 = *(_QWORD *)(v12 + 8 * v16);\n      }\n      while ( 1 )\n      {\n        if ( v18 < 0 )\n          goto LABEL_14;\n        while ( 1 )\n        {\n          v22 = *(_QWORD *)&v11[8 * v18];\n          if ( v22 <= v19 )\n            break;\n          if ( --v18 == -1 )\n            goto LABEL_14;\n        }\n        if ( v22 != v19 )\nLABEL_14:\n          *(_QWORD *)&v11[8 * --v17] = v19;\n        if ( --v16 < 0 )\n          break;\n        if ( --v15 < 0 )\n          break;\n        v19 = *(_QWORD *)(v12 + 8 * v16);\nLABEL_8:\n        v20 = *(_QWORD *)(v13 + 8 * v15);\n        v21 = v19 < v20;\n        if ( v19 != v20 )\n          goto LABEL_6;\n      }\nLABEL_21:\n      v23 = v8[1];\n      v24 = *(_QWORD *)(v6 + 8) + v23 + *(_QWORD *)(v7 + 8);\n      v25 = v23 - 1;\n      v26 = v24 - 1;\n      v27 = v24 - v17;\n      v8[1] = v27 + v23;\n      if ( v27 <= 0 || v25 < 0 )\n      {\n        v31 = 8 * v27;\n      }\n      else\n      {\n        do\n        {\n          while ( 1 )\n          {\n            v28 = *(_QWORD *)&v11[8 * v26];\n            v29 = *(_QWORD *)&v11[8 * v25];\n            v30 = &v11[8 * (v25 + v27)];\n            if ( v28 <= v29 )\n              break;\n            --v26;\n            *(_QWORD *)v30 = v28;\n            if ( !--v27 )\n            {\n              v11 = (char *)v8[2];\n              v31 = 0LL;\n              goto LABEL_29;\n            }\n          }\n          --v25;\n          *(_QWORD *)v30 = v29;\n        }\n        while ( v25 != -1 );\n        v31 = 8 * v27;\n        v11 = (char *)v8[2];\n      }\nLABEL_29:\n      memcpy(v11, &v11[8 * v17], v31);\n      result = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40d340L", 
            "funcEndAddr": "0x40d4f2L", 
            "funcName": "sub_40D340"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40D500(_QWORD *a1, int *a2, _QWORD *a3, _QWORD *a4, const __m128i *a5)\n{\n  _QWORD *v5; // rbx\n  __int64 v6; // rdi\n  _QWORD *v7; // r10\n  int v8; // eax\n  __int64 v9; // r9\n  char *result; // rax\n  __m128i *v11; // rdi\n  _QWORD *v12; // rax\n  _QWORD *v13; // [rsp+8h] [rbp-20h]\n  _QWORD *v14; // [rsp+10h] [rbp-18h]\n  const __m128i *v15; // [rsp+18h] [rbp-10h]\n\n  v5 = a1;\n  v6 = *a2;\n  if ( (_DWORD)v6 == 15 )\n  {\n    v15 = a5;\n    v14 = a4;\n    v13 = a3;\n    v7 = malloc(0x3C8uLL);\n    if ( !v7 )\n      return 0LL;\n    v12 = (_QWORD *)*v5;\n    v9 = 8LL;\n    *v5 = v7;\n    v6 = 0LL;\n    a5 = v15;\n    a4 = v14;\n    a3 = v13;\n    *v7 = v12;\n    v8 = 1;\n  }\n  else\n  {\n    v7 = (_QWORD *)*v5;\n    v8 = v6 + 1;\n    v9 = (v6 << 6) + 8;\n  }\n  *a2 = v8;\n  result = (char *)v7 + v9;\n  v11 = (__m128i *)&v7[8 * v6];\n  v11->m128i_i64[1] = 0LL;\n  v11[1].m128i_i64[0] = (__int64)a3;\n  v11[1].m128i_i64[1] = (__int64)a4;\n  v11[3] = _mm_loadu_si128(a5);\n  v11[3].m128i_i8[10] &= 0xF3u;\n  v11[2].m128i_i64[0] = 0LL;\n  v11[2].m128i_i64[1] = 0LL;\n  v11[4].m128i_i64[0] = -1LL;\n  if ( a3 )\n    *a3 = result;\n  if ( a4 )\n    *a4 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x40d500L", 
            "funcEndAddr": "0x40d5d7L", 
            "funcName": "sub_40D500"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40D5E0(_QWORD **a1, __int64 a2)\n{\n  _QWORD **v2; // rbx\n  _QWORD *v3; // rbp\n  __int64 *v4; // r14\n  char *result; // rax\n  _QWORD **v6; // rdx\n  _QWORD *v7; // rax\n  __int64 v8; // [rsp+8h] [rbp-30h]\n\n  v2 = a1;\n  v3 = *a1;\n  v4 = &v8;\n  while ( 1 )\n  {\n    result = sub_40D500((_QWORD *)(a2 + 112), (int *)(a2 + 128), 0LL, 0LL, (const __m128i *)(v2 + 5));\n    *v4 = (__int64)result;\n    if ( !result )\n      break;\n    *(_QWORD *)result = v3;\n    v3 = (_QWORD *)*v4;\n    *(_BYTE *)(*v4 + 50) |= 4u;\n    if ( v2[1] )\n    {\n      v4 = v3 + 1;\n      v2 = (_QWORD **)v2[1];\n    }\n    else\n    {\n      v6 = 0LL;\n      while ( 1 )\n      {\n        v7 = v2[2];\n        if ( v7 )\n        {\n          if ( v7 != v6 )\n            break;\n        }\n        v3 = (_QWORD *)*v3;\n        v6 = v2;\n        if ( !*v2 )\n          return (char *)v8;\n        v2 = (_QWORD **)*v2;\n      }\n      v4 = v3 + 2;\n      v2 = (_QWORD **)v2[2];\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40d5e0L", 
            "funcEndAddr": "0x40d689L", 
            "funcName": "sub_40D5E0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40D690(_DWORD *a1, __int64 *a2, __int64 a3)\n{\n  __int64 v3; // r12\n  __int64 v4; // rbx\n  char *v5; // rbp\n  signed __int64 v6; // rax\n  __int64 v7; // rdx\n  _QWORD *v8; // r13\n  int *v9; // rsi\n  _QWORD *v10; // rdi\n  char *v11; // rbx\n  char *v12; // r15\n  char *v13; // r11\n  __int64 v14; // rax\n  char v15; // cl\n  int *v17; // rsi\n  _QWORD *v18; // rdi\n  int *v19; // rsi\n  _QWORD *v20; // rdi\n  int *v21; // [rsp+8h] [rbp-60h]\n  char *v22; // [rsp+10h] [rbp-58h]\n  _DWORD *v23; // [rsp+18h] [rbp-50h]\n  char v24; // [rsp+20h] [rbp-48h]\n  char v25; // [rsp+28h] [rbp-40h]\n\n  v3 = a3;\n  v4 = *a2;\n  v5 = *(char **)(a3 + 8);\n  v23 = a1;\n  if ( a2[7] & 0x10 )\n  {\n    if ( !v5 )\n    {\n      v8 = (_QWORD *)(v4 + 112);\n      v25 = 8;\n      v21 = (int *)(v4 + 128);\n      v17 = (int *)(v4 + 128);\n      v18 = (_QWORD *)(v4 + 112);\n      v11 = sub_40D500((_QWORD *)(v4 + 112), (int *)(v4 + 128), 0LL, 0LL, (const __m128i *)&v24);\n      v25 = 9;\n      v13 = sub_40D500(v18, v17, 0LL, 0LL, (const __m128i *)&v24);\n      v12 = v13;\n      goto LABEL_7;\n    }\n    v6 = *(_QWORD *)(a3 + 40);\n    if ( v6 > 63 )\n      return v5;\n    v7 = *(_QWORD *)(v4 + 160);\n    if ( !_bittest64(&v7, v6) )\n      return v5;\n    v8 = (_QWORD *)(v4 + 112);\n    v25 = 8;\n    v21 = (int *)(v4 + 128);\n    v9 = (int *)(v4 + 128);\n    v10 = (_QWORD *)(v4 + 112);\n    v11 = sub_40D500((_QWORD *)(v4 + 112), (int *)(v4 + 128), 0LL, 0LL, (const __m128i *)&v24);\n    v25 = 9;\n    v12 = sub_40D500(v10, v9, 0LL, 0LL, (const __m128i *)&v24);\n  }\n  else\n  {\n    v8 = (_QWORD *)(v4 + 112);\n    v25 = 8;\n    v21 = (int *)(v4 + 128);\n    v19 = (int *)(v4 + 128);\n    v20 = (_QWORD *)(v4 + 112);\n    v11 = sub_40D500((_QWORD *)(v4 + 112), (int *)(v4 + 128), 0LL, 0LL, (const __m128i *)&v24);\n    v25 = 9;\n    v12 = sub_40D500(v20, v19, 0LL, 0LL, (const __m128i *)&v24);\n    v13 = v12;\n    if ( !v5 )\n      goto LABEL_7;\n  }\n  v25 = 16;\n  v13 = sub_40D500(v8, v21, v5, v12, (const __m128i *)&v24);\nLABEL_7:\n  v25 = 16;\n  v22 = v13;\n  v5 = sub_40D500(v8, v21, v11, v13, (const __m128i *)&v24);\n  if ( v5 && v22 && v11 && v12 )\n  {\n    v14 = *(_QWORD *)(v3 + 40);\n    *((_QWORD *)v12 + 5) = v14;\n    *((_QWORD *)v11 + 5) = v14;\n    v15 = *(_BYTE *)(v3 + 50) & 8;\n    v12[50] = v15 | v12[50] & 0xF7;\n    v11[50] = v15 | v11[50] & 0xF7;\n  }\n  else\n  {\n    v5 = 0LL;\n    *v23 = 12;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x40d690L", 
            "funcEndAddr": "0x40d8aaL", 
            "funcName": "sub_40D690"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D8B0(__int64 *a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  __int64 v3; // rdx\n  char *v5; // rax\n  char *v6; // rax\n  unsigned int v7; // [rsp+Ch] [rbp-1Ch]\n\n  v2 = *(_QWORD *)(a2 + 8);\n  v7 = 0;\n  if ( v2 )\n  {\n    if ( *(_BYTE *)(v2 + 48) == 17 )\n    {\n      v5 = sub_40D690(&v7, a1, v2);\n      *(_QWORD *)(a2 + 8) = v5;\n      if ( v5 )\n        *(_QWORD *)v5 = a2;\n    }\n  }\n  v3 = *(_QWORD *)(a2 + 16);\n  if ( v3 )\n  {\n    if ( *(_BYTE *)(v3 + 48) == 17 )\n    {\n      v6 = sub_40D690(&v7, a1, v3);\n      *(_QWORD *)(a2 + 16) = v6;\n      if ( v6 )\n        *(_QWORD *)v6 = a2;\n    }\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x40d8b0L", 
            "funcEndAddr": "0x40d92bL", 
            "funcName": "sub_40D8B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D930(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  size_t v3; // rbx\n  void *v4; // rax\n  __int64 result; // rax\n\n  v2 = *(_QWORD *)(a2 + 8);\n  *(_QWORD *)(a1 + 8) = v2;\n  if ( v2 <= 0 )\n  {\n    *(_QWORD *)(a1 + 16) = 0LL;\n    result = 0LL;\n    *(_OWORD *)a1 = 0LL;\n  }\n  else\n  {\n    v3 = 8 * v2;\n    *(_QWORD *)a1 = v2;\n    v4 = malloc(8 * v2);\n    *(_QWORD *)(a1 + 16) = v4;\n    if ( v4 )\n    {\n      memcpy(v4, *(const void **)(a2 + 16), v3);\n      result = 0LL;\n    }\n    else\n    {\n      *(_QWORD *)(a1 + 8) = 0LL;\n      result = 12LL;\n      *(_QWORD *)a1 = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40d930L", 
            "funcEndAddr": "0x40d9afL", 
            "funcName": "sub_40D930"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D9B0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // r12\n  __int64 v4; // r15\n  __int64 v5; // r13\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  _QWORD *v8; // rax\n  _QWORD *v9; // rdi\n  __int64 v10; // r10\n  __int64 v11; // r14\n  __int64 v12; // rcx\n  __int64 v13; // rdx\n  __int64 *v14; // rsi\n  __int64 v15; // r9\n  __int64 v16; // rsi\n  __int64 v17; // r8\n  __int64 result; // rax\n  __int64 v19; // rdx\n  char *v20; // rdi\n  __int64 v21; // r12\n\n  if ( !a2 )\n  {\nLABEL_13:\n    if ( !a3 || *(_QWORD *)(a3 + 8) <= 0LL )\n    {\n      *(_QWORD *)(a1 + 16) = 0LL;\n      result = 0LL;\n      *(_OWORD *)a1 = 0LL;\n      return result;\n    }\n    a2 = a3;\n    return sub_40D930(a1, a2);\n  }\n  v3 = *(_QWORD *)(a2 + 8);\n  if ( !a3 || v3 <= 0 )\n  {\n    if ( v3 > 0 )\n      return sub_40D930(a1, a2);\n    goto LABEL_13;\n  }\n  v4 = *(_QWORD *)(a3 + 8);\n  if ( v4 <= 0 )\n    return sub_40D930(a1, a2);\n  v5 = a1;\n  v6 = a3;\n  v7 = a2;\n  *(_QWORD *)a1 = v3 + v4;\n  v8 = malloc(8 * (v3 + v4));\n  *(_QWORD *)(a1 + 16) = v8;\n  if ( !v8 )\n    return 12LL;\n  v9 = v8;\n  v10 = *(_QWORD *)(a2 + 16);\n  v11 = 0LL;\n  v12 = 0LL;\n  v13 = 0LL;\n  do\n  {\n    v14 = (__int64 *)(v10 + 8 * v13);\n    if ( v4 <= v12 )\n    {\n      v21 = v3 - v13;\n      v11 += v21;\n      memcpy(v9, v14, 8 * v21);\n      goto LABEL_21;\n    }\n    v15 = *(_QWORD *)(v6 + 16);\n    v16 = *v14;\n    ++v11;\n    v17 = *(_QWORD *)(v15 + 8 * v12);\n    if ( v16 <= v17 )\n    {\n      *v9 = v16;\n      ++v13;\n      v12 += v16 == v17;\n    }\n    else\n    {\n      ++v12;\n      *v9 = v17;\n    }\n    v3 = *(_QWORD *)(v7 + 8);\n    ++v9;\n  }\n  while ( v13 < v3 );\n  v19 = *(_QWORD *)(v6 + 8);\n  if ( v12 < v19 )\n  {\n    v20 = (char *)&v8[v11];\n    v11 += v19 - v12;\n    memcpy(v20, (const void *)(v15 + 8 * v12), 8 * (v19 - v12));\n  }\nLABEL_21:\n  *(_QWORD *)(v5 + 8) = v11;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40d9b0L", 
            "funcEndAddr": "0x40db32L", 
            "funcName": "sub_40D9B0"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_40DB40(_DWORD *a1, _QWORD *a2, __int64 a3, unsigned int a4)\n{\n  __int64 v4; // r10\n  __int64 v5; // r12\n  _QWORD *v6; // rax\n  __int64 v7; // r10\n  __int64 v8; // rbp\n  char v9; // r15\n  _QWORD *v10; // r13\n  __int64 *v11; // rax\n  __int64 v12; // r11\n  __int64 v13; // rbx\n  __int64 v14; // r10\n  unsigned int v15; // er9\n  __int64 *v16; // r14\n  __int64 *v18; // rax\n  char v19; // cl\n  bool v20; // cc\n  __int64 v21; // r10\n  __int64 *v22; // r12\n  __int64 v23; // r14\n  __int64 v24; // r15\n  char v25; // bp\n  __int64 v26; // rax\n  int v27; // esi\n  __int16 v28; // bx\n  int v29; // edi\n  int v30; // eax\n  __int64 v31; // rdx\n  __int64 v32; // rax\n  void *v33; // rax\n  __int64 v34; // [rsp+0h] [rbp-58h]\n  __int64 *v35; // [rsp+8h] [rbp-50h]\n  __int64 v36; // [rsp+10h] [rbp-48h]\n  _DWORD *v37; // [rsp+18h] [rbp-40h]\n\n  v4 = *(_QWORD *)(a3 + 8);\n  if ( !v4 )\n  {\n    *a1 = 0;\n    return 0LL;\n  }\n  v5 = a4 + v4;\n  if ( v4 > 0 )\n  {\n    v6 = *(_QWORD **)(a3 + 16);\n    v7 = (__int64)&v6[v4];\n    do\n    {\n      v5 += *v6;\n      ++v6;\n    }\n    while ( (_QWORD *)v7 != v6 );\n  }\n  v8 = a3;\n  v9 = a4;\n  v10 = a2;\n  v37 = a1;\n  v11 = (__int64 *)(a2[8] + 24 * (v5 & a2[17]));\n  v12 = *v11;\n  if ( *v11 <= 0 )\n  {\nLABEL_12:\n    v18 = (__int64 *)calloc(0x70uLL, 1uLL);\n    v16 = v18;\n    if ( !v18 )\n      goto LABEL_38;\n    v34 = (__int64)(v18 + 1);\n    if ( (unsigned int)sub_40D930((__int64)(v18 + 1), v8) )\n    {\n      free(v16);\nLABEL_38:\n      v16 = 0LL;\n      *v37 = 12;\n      return v16;\n    }\n    v19 = v9;\n    v20 = *(_QWORD *)(v8 + 8) <= 0LL;\n    *((_BYTE *)v16 + 104) = v9 & 0xF | v16[13] & 0xF0;\n    v16[10] = v34;\n    if ( v20 )\n    {\nLABEL_36:\n      if ( (unsigned int)sub_40B3B0(v10, v16, v5) )\n      {\n        sub_40C460(v16);\n        goto LABEL_38;\n      }\n      return v16;\n    }\n    v36 = v5;\n    v21 = 0LL;\n    v35 = v16 + 3;\n    v22 = v16;\n    v23 = 0LL;\n    v24 = v8;\n    v25 = v19;\n    while ( 1 )\n    {\n      v26 = *v10 + 16LL * *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * v23);\n      v27 = *(unsigned __int8 *)(v26 + 8);\n      v28 = (*(_DWORD *)(v26 + 8) >> 8) & 0x3FF;\n      v29 = (*(_DWORD *)(v26 + 8) >> 8) & 0x3FF;\n      if ( v27 == 1 && !v29 )\n        goto LABEL_34;\n      v30 = v22[13] & 0xDF | (32 * (((*((_BYTE *)v22 + 104) >> 5) | (*(_BYTE *)(v26 + 10) >> 4)) & 1));\n      *((_BYTE *)v22 + 104) = v30;\n      if ( v27 == 2 )\n      {\n        *((_BYTE *)v22 + 104) = v30 | 0x10;\n      }\n      else if ( v27 == 4 )\n      {\n        *((_BYTE *)v22 + 104) = v30 | 0x40;\n      }\n      if ( !v29 )\n        goto LABEL_34;\n      if ( v34 == v22[10] )\n      {\n        v33 = malloc(0x18uLL);\n        v22[10] = (__int64)v33;\n        if ( !v33 )\n        {\n          sub_40C460(v22);\n          goto LABEL_38;\n        }\n        if ( (unsigned int)sub_40D930((__int64)v33, v24) )\n          goto LABEL_38;\n        *((_BYTE *)v22 + 104) |= 0x80u;\n        v21 = 0LL;\n      }\n      if ( v28 & 1 )\n      {\n        if ( !(v25 & 1) || v28 & 2 )\n          goto LABEL_30;\n      }\n      else if ( v28 & 2 && v25 & 1 )\n      {\n        goto LABEL_30;\n      }\n      if ( v28 & 0x10 && !(v25 & 2) || v28 & 0x40 && !(v25 & 4) )\n      {\nLABEL_30:\n        v31 = v23 - v21;\n        if ( v23 - v21 >= 0 )\n        {\n          v32 = v22[2];\n          if ( v31 < v32 )\n          {\n            v22[2] = v32 - 1;\n            sub_40CA00(v22 + 2, v35, v31);\n          }\n        }\n        ++v21;\n      }\nLABEL_34:\n      if ( ++v23 >= *(_QWORD *)(v24 + 8) )\n      {\n        v16 = v22;\n        v5 = v36;\n        goto LABEL_36;\n      }\n    }\n  }\n  v13 = v11[2];\n  v14 = 0LL;\n  v15 = a4;\n  while ( 1 )\n  {\n    v16 = *(__int64 **)(v13 + 8 * v14);\n    if ( *v16 == v5 && (v16[13] & 0xF) == v15 && sub_40ACE0(v16[10], v8) )\n      return v16;\n    if ( ++v14 == v12 )\n      goto LABEL_12;\n  }\n}\n", 
            "funcStartAddr": "0x40db40L", 
            "funcEndAddr": "0x40de40L", 
            "funcName": "sub_40DB40"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_40DE40(_DWORD *a1, __int64 *a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  _QWORD *v4; // rax\n  __int64 v5; // rcx\n  __int64 v6; // r14\n  __int64 *v7; // r12\n  _DWORD *v8; // r13\n  __int64 *v9; // rax\n  __int64 v10; // r10\n  __int64 v11; // r11\n  __int64 v12; // r9\n  _QWORD *v13; // rbx\n  _QWORD *v14; // rax\n  __int64 v15; // r15\n  __int64 v16; // rax\n  _QWORD *v17; // rsi\n  __int64 v18; // r8\n  __int64 v19; // r9\n  unsigned __int8 v20; // r10\n  int v21; // edx\n  __int64 v22; // rax\n  int v23; // edi\n\n  v3 = *(_QWORD *)(a3 + 8);\n  if ( !v3 )\n  {\n    *a1 = 0;\n    return 0LL;\n  }\n  if ( v3 > 0 )\n  {\n    v4 = *(_QWORD **)(a3 + 16);\n    v5 = (__int64)&v4[v3];\n    do\n    {\n      v3 += *v4;\n      ++v4;\n    }\n    while ( (_QWORD *)v5 != v4 );\n  }\n  v6 = a3;\n  v7 = a2;\n  v8 = a1;\n  v9 = (__int64 *)(a2[8] + 24 * (v3 & a2[17]));\n  v10 = *v9;\n  if ( *v9 <= 0 )\n  {\nLABEL_10:\n    v14 = calloc(0x70uLL, 1uLL);\n    v13 = v14;\n    if ( v14 )\n    {\n      v15 = (__int64)(v14 + 1);\n      if ( (unsigned int)sub_40D930((__int64)(v14 + 1), v6) )\n      {\n        free(v13);\n      }\n      else\n      {\n        v16 = *(_QWORD *)(v6 + 8);\n        v13[10] = v15;\n        if ( v16 > 0 )\n        {\n          v17 = *(_QWORD **)(v6 + 16);\n          v18 = *v7;\n          v19 = (__int64)&v17[v16];\n          do\n          {\n            while ( 1 )\n            {\n              v22 = v18 + 16LL * *v17;\n              v23 = *(unsigned __int8 *)(v22 + 8);\n              if ( v23 == 1 )\n                break;\n              v20 = *((_BYTE *)v13 + 104) >> 5;\n              v21 = v13[13] & 0xDF | (32 * ((v20 | (*(_BYTE *)(v22 + 10) >> 4)) & 1));\n              *((_BYTE *)v13 + 104) = v13[13] & 0xDF | (32 * ((v20 | (*(_BYTE *)(v22 + 10) >> 4)) & 1));\n              if ( v23 == 2 )\n              {\n                *((_BYTE *)v13 + 104) = v21 | 0x10;\n              }\n              else if ( v23 == 4 )\n              {\n                *((_BYTE *)v13 + 104) = v21 | 0x40;\n              }\n              else if ( v23 == 12 || *(_DWORD *)(v22 + 8) & 0x3FF00 )\n              {\n                goto LABEL_21;\n              }\nLABEL_17:\n              ++v17;\n              if ( (_QWORD *)v19 == v17 )\n                goto LABEL_22;\n            }\n            if ( !(*(_DWORD *)(v22 + 8) & 0x3FF00) )\n              goto LABEL_17;\n            *((_BYTE *)v13 + 104) = v13[13] & 0xDF | (32\n                                                    * (((*((_BYTE *)v13 + 104) >> 5) | (*(_BYTE *)(v22 + 10) >> 4)) & 1));\nLABEL_21:\n            ++v17;\n            *((_BYTE *)v13 + 104) |= 0x80u;\n          }\n          while ( (_QWORD *)v19 != v17 );\n        }\nLABEL_22:\n        if ( !(unsigned int)sub_40B3B0(v7, v13, v3) )\n          return v13;\n        sub_40C460(v13);\n      }\n    }\n    *v8 = 12;\n    return 0LL;\n  }\n  v11 = v9[2];\n  v12 = 0LL;\n  while ( 1 )\n  {\n    v13 = *(_QWORD **)(v11 + 8 * v12);\n    if ( *v13 == v3 && sub_40ACE0((__int64)(v13 + 1), v6) )\n      return v13;\n    if ( v10 == ++v12 )\n      goto LABEL_10;\n  }\n}\n", 
            "funcStartAddr": "0x40de40L", 
            "funcEndAddr": "0x40e028L", 
            "funcName": "sub_40DE40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E030(__int64 *a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 *v4; // r14\n  __int64 v5; // r13\n  __int64 v6; // r12\n  __int64 v7; // rbp\n  __int64 v8; // rbx\n  __int64 result; // rax\n  _QWORD *v10; // rax\n  void *v11; // rdi\n  __int64 v12; // rsi\n  __int64 v13; // rdx\n  unsigned int v14; // [rsp+0h] [rbp-4Ch]\n  char v15; // [rsp+4h] [rbp-48h]\n  void *ptr; // [rsp+14h] [rbp-38h]\n\n  if ( a4 <= 0 )\n    return 0LL;\n  v4 = a1;\n  v5 = a3;\n  v6 = a4;\n  v7 = a2;\n  v8 = 0LL;\n  do\n  {\n    while ( 1 )\n    {\n      v12 = *(_QWORD *)(v7 + 8 * v8);\n      v13 = *(_QWORD *)(v5 + 8 * v8);\n      if ( v12 )\n        break;\n      *(_QWORD *)(v7 + 8 * v8++) = v13;\n      if ( v6 == v8 )\n        return 0LL;\n    }\n    if ( v13 )\n    {\n      result = sub_40D9B0((__int64)&v15, v12 + 8, v13 + 8);\n      v14 = result;\n      if ( (_DWORD)result )\n        return result;\n      v10 = sub_40DE40(&v14, v4, (__int64)&v15);\n      v11 = ptr;\n      *(_QWORD *)(v7 + 8 * v8) = v10;\n      free(v11);\n      result = v14;\n      if ( v14 )\n        return result;\n    }\n    ++v8;\n  }\n  while ( v6 != v8 );\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40e030L", 
            "funcEndAddr": "0x40e0d8L", 
            "funcName": "sub_40E030"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E0E0(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5)\n{\n  __int64 v5; // r11\n  __int64 i; // rax\n  __int64 v7; // r12\n  __int64 v8; // r9\n  __int64 v9; // rax\n  __int64 v10; // rbx\n  __int64 *v11; // r13\n  _QWORD *v12; // rbp\n  __int64 *v13; // r15\n  __int64 v14; // r10\n  __int64 v15; // r9\n  char v16; // al\n  __int64 v17; // r10\n  _QWORD *v18; // rax\n  void *v19; // rdi\n  __int64 v20; // r9\n  __int64 v21; // r10\n  __int64 v22; // r14\n  __int64 v23; // r14\n  _QWORD *v24; // rax\n  unsigned int v25; // eax\n  unsigned int v26; // er14\n  unsigned int v27; // er15\n  __int64 result; // rax\n  _QWORD *v29; // rax\n  __int64 v30; // rbx\n  __int64 *v31; // [rsp+0h] [rbp-98h]\n  __int64 v32; // [rsp+8h] [rbp-90h]\n  _QWORD *v33; // [rsp+8h] [rbp-90h]\n  __int64 v34; // [rsp+10h] [rbp-88h]\n  __int64 v35; // [rsp+18h] [rbp-80h]\n  __int64 v36; // [rsp+20h] [rbp-78h]\n  unsigned int v37; // [rsp+2Ch] [rbp-6Ch]\n  unsigned int v38; // [rsp+3Ch] [rbp-5Ch]\n  __int64 v39; // [rsp+40h] [rbp-58h]\n  __int64 v40; // [rsp+48h] [rbp-50h]\n  void *ptr; // [rsp+50h] [rbp-48h]\n\n  v5 = 0LL;\n  for ( i = a1[25]; v5 < i; i = v8 )\n  {\n    v7 = a1[27];\n    v8 = (v5 + i) / 2;\n    if ( a3 <= *(_QWORD *)(v7 + 40 * v8 + 8) )\n    {\n      while ( v8 > v5 )\n      {\n        v30 = (v8 + v5) / 2;\n        if ( a3 > *(_QWORD *)(v7 + 40 * v30 + 8) )\n          goto LABEL_29;\n        v8 = (v8 + v5) / 2;\n      }\n      break;\n    }\n    v30 = (v5 + i) / 2;\n    v8 = i;\nLABEL_29:\n    v5 = v30 + 1;\n  }\n  if ( a1[25] <= v5 )\n    return 0LL;\n  v9 = a1[27];\n  v35 = 40 * v5;\n  if ( *(_QWORD *)(v9 + 40 * v5 + 8) != a3 || v5 == -1 )\n    return 0LL;\n  v36 = a4;\n  v10 = a3;\n  v37 = a5;\n  v11 = (__int64 *)a1[19];\n  v12 = a1;\n  v31 = (__int64 *)(a2 + 16);\n  while ( 2 )\n  {\n    v13 = (__int64 *)(v9 + v35);\n    while ( 1 )\n    {\n      if ( !sub_40C890(*(_QWORD *)(a2 + 8), v31, *v13) )\n        goto LABEL_19;\n      v22 = v10 + v13[3] - v13[2];\n      if ( v10 == v22 )\n        break;\n      v14 = 8 * v22 + v12[23];\n      v32 = *(_QWORD *)(v11[3] + 8 * v20);\n      if ( *(_QWORD *)v14 )\n      {\n        if ( sub_40C890(\n               *(_QWORD *)(*(_QWORD *)v14 + 16LL),\n               (__int64 *)(*(_QWORD *)v14 + 24LL),\n               *(_QWORD *)(v11[3] + 8 * v20)) )\n        {\n          goto LABEL_19;\n        }\n        v38 = sub_40D930((__int64)&v39, v15 + 8);\n        v16 = sub_40B280(&v39, v32);\n        if ( v38 || v16 != 1 )\n        {\n          free(ptr);\n          result = v38;\n          if ( v38 )\n            return result;\n          return 12LL;\n        }\n        v17 = v12[23] + 8 * v22;\n      }\n      else\n      {\n        v34 = 8 * v22 + v12[23];\n        v39 = 1LL;\n        v40 = 1LL;\n        v29 = malloc(8uLL);\n        ptr = v29;\n        if ( !v29 )\n          return 12LL;\n        v38 = 0;\n        v17 = v34;\n        *v29 = v32;\n      }\n      v33 = (_QWORD *)v17;\n      v18 = sub_40DE40(&v38, v11, (__int64)&v39);\n      v19 = ptr;\n      *v33 = v18;\n      free(v19);\n      if ( !*(_QWORD *)(v12[23] + 8 * v22) )\n      {\n        result = v38;\n        if ( v38 )\n          return result;\n      }\nLABEL_19:\n      v13 += 5;\n      if ( !*((_BYTE *)v13 - 8) )\n        return 0LL;\n    }\n    v23 = **(_QWORD **)(v11[5] + 24 * v20 + 16);\n    if ( sub_40C890(v21, v31, v23) )\n      goto LABEL_19;\n    v39 = 1LL;\n    v40 = 1LL;\n    v24 = malloc(8uLL);\n    ptr = v24;\n    if ( v24 )\n    {\n      *v24 = v23;\n      v25 = 0;\n    }\n    else\n    {\n      v40 = 0LL;\n      v25 = 12;\n      v39 = 0LL;\n    }\n    v38 = v25;\n    v26 = sub_40D200(v11, (__int64)&v39, v36, v37);\n    v27 = sub_40CDD0(a2, (__int64)&v39);\n    free(ptr);\n    result = v38;\n    if ( !(v38 | v27 | v26) )\n    {\n      v9 = v12[27];\n      continue;\n    }\n    break;\n  }\n  if ( !v38 )\n  {\n    result = v27;\n    if ( v26 )\n      result = v26;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40e0e0L", 
            "funcEndAddr": "0x40e462L", 
            "funcName": "sub_40E0E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E470(__int64 a1, _QWORD *a2, _QWORD *a3, __int64 a4)\n{\n  _QWORD *v4; // r12\n  __int64 v5; // r13\n  __int64 v6; // rbx\n  __int64 v7; // rbp\n  __int64 v8; // rax\n  signed __int64 v9; // rax\n  __int64 v10; // rcx\n  __int64 v11; // rcx\n  _QWORD *v12; // r9\n  _QWORD *v13; // rax\n  _QWORD *v15; // rax\n  __int64 v16; // [rsp+8h] [rbp-50h]\n  _QWORD *v17; // [rsp+8h] [rbp-50h]\n  _QWORD *v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  _QWORD *v20; // [rsp+18h] [rbp-40h]\n\n  v4 = *(_QWORD **)(a1 + 152);\n  if ( *a2 <= 0LL )\n    return 0LL;\n  v5 = a4;\n  v6 = 0LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v7 = *(_QWORD *)(*a3 + 8 * v6);\n      v8 = *v4 + 16LL * *(_QWORD *)(*a3 + 8 * v6);\n      if ( *(_BYTE *)(v8 + 8) == 8 )\n      {\n        v9 = *(_QWORD *)v8;\n        if ( v9 <= 63 )\n        {\n          v10 = v4[20];\n          if ( _bittest64(&v10, v9) )\n            break;\n        }\n      }\n      if ( ++v6 >= *a2 )\n        return 0LL;\n    }\n    v11 = *(_QWORD *)(a1 + 232);\n    v12 = *(_QWORD **)(a1 + 248);\n    if ( v11 == *(_QWORD *)(a1 + 240) )\n      break;\nLABEL_8:\n    v18 = v12;\n    v16 = v11;\n    v20 = a3;\n    v13 = calloc(1uLL, 0x30uLL);\n    v18[v16] = v13;\n    if ( !v13 )\n      return 12LL;\n    *v13 = v5;\n    a3 = v20;\n    ++v6;\n    v13[1] = v7;\n    *(_QWORD *)(a1 + 232) = v16 + 1;\n    if ( v6 >= *a2 )\n      return 0LL;\n  }\n  v17 = a3;\n  v19 = 2 * v11;\n  v15 = realloc(*(void **)(a1 + 248), 16 * v11);\n  a3 = v17;\n  v12 = v15;\n  if ( v15 )\n  {\n    *(_QWORD *)(a1 + 248) = v15;\n    v11 = *(_QWORD *)(a1 + 232);\n    *(_QWORD *)(a1 + 240) = v19;\n    goto LABEL_8;\n  }\n  return 12LL;\n}\n", 
            "funcStartAddr": "0x40e470L", 
            "funcEndAddr": "0x40e5b1L", 
            "funcName": "sub_40E470"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E5C0(__int64 a1, __int64 a2, char a3)\n{\n  wint_t v3; // ebx\n  __int64 result; // rax\n  __int64 v5; // rax\n  char v6; // dl\n\n  if ( a2 < 0 )\n    return *(unsigned int *)(a1 + 112);\n  if ( *(_QWORD *)(a1 + 88) == a2 )\n    return (a3 & 2u) < 1 ? 10 : 8;\n  if ( *(_DWORD *)(a1 + 144) > 1 )\n  {\n    while ( 1 )\n    {\n      v3 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a2);\n      if ( v3 != -1 )\n        break;\n      if ( --a2 == -1 )\n        return *(unsigned int *)(a1 + 112);\n    }\n    if ( *(_BYTE *)(a1 + 142) && (iswalnum(v3) || v3 == 95) )\n      return 1LL;\n    result = 0LL;\n    if ( v3 != 10 )\n      return result;\n    return 2 * (unsigned int)(*(_BYTE *)(a1 + 141) != 0);\n  }\n  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + a2);\n  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * (v5 >> 6)) >> v5;\n  result = 1LL;\n  if ( !(v6 & 1) )\n  {\n    result = 0LL;\n    if ( *(_BYTE *)(*(_QWORD *)(a1 + 8) + a2) == 10 )\n      return 2 * (unsigned int)(*(_BYTE *)(a1 + 141) != 0);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40e5c0L", 
            "funcEndAddr": "0x40e6aeL", 
            "funcName": "sub_40E5C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E6B0(__int64 a1, __int64 a2, __int64 a3)\n{\n  unsigned __int8 v3; // cl\n  unsigned __int8 v4; // al\n  bool v5; // zf\n  __int64 result; // rax\n  unsigned int v7; // ebx\n  unsigned int v8; // ebx\n  unsigned int v9; // eax\n  unsigned int v10; // edx\n  unsigned int v11; // edx\n\n  v3 = *(_BYTE *)(*(_QWORD *)(a1 + 8) + a3);\n  v4 = *(_BYTE *)(a2 + 8);\n  if ( v4 == 3 )\n  {\n    result = 0LL;\n    if ( !((*(_QWORD *)(*(_QWORD *)a2 + 8 * ((__int64)v3 >> 6)) >> v3) & 1) )\n      return result;\n  }\n  else if ( v4 <= 3u )\n  {\n    v5 = v4 == 1;\n    result = 0LL;\n    if ( !v5 || *(_BYTE *)a2 != v3 )\n      return result;\n  }\n  else\n  {\n    if ( v4 != 5 )\n    {\n      v5 = v4 == 7;\n      result = 0LL;\n      if ( !v5 || (v3 & 0x80u) != 0 )\n        return result;\n    }\n    if ( v3 == 10 )\n    {\n      result = 0LL;\n      if ( !(*(_BYTE *)(*(_QWORD *)(a1 + 152) + 216LL) & 0x40) )\n        return result;\n    }\n    else if ( !v3 )\n    {\n      result = 0LL;\n      if ( *(_BYTE *)(*(_QWORD *)(a1 + 152) + 216LL) < 0 )\n        return result;\n    }\n  }\n  v7 = *(_DWORD *)(a2 + 8);\n  result = 1LL;\n  if ( !(v7 & 0x3FF00) )\n    return result;\n  v8 = v7 >> 8;\n  v9 = sub_40E5C0(a1, a3, *(_DWORD *)(a1 + 160));\n  v10 = v9;\n  if ( v8 & 4 )\n  {\n    result = 0LL;\n    if ( !(v10 & 1) || v8 & 8 )\n      return result;\n  }\n  else if ( v8 & 8 && v9 & 1 )\n  {\n    return 0LL;\n  }\n  if ( !(v8 & 0x20) || (result = 0LL, v10 & 2) )\n  {\n    result = 1LL;\n    v11 = (v10 >> 3) & 1;\n    if ( v8 & 0x80 )\n      result = v11;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40e6b0L", 
            "funcEndAddr": "0x40e7dbL", 
            "funcName": "sub_40E6B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E7E0(__int64 a1, __int64 a2, __int64 *a3, __int64 a4)\n{\n  __int64 *v4; // r12\n  __int64 v5; // rbx\n  char v6; // al\n  __int64 v7; // r9\n  __int64 v8; // rsi\n  int v9; // ebp\n  int v10; // er11\n  int v11; // er10\n  __int64 result; // rax\n  __int64 v13; // rdx\n  int v14; // ecx\n\n  v4 = a3;\n  v5 = a2;\n  v6 = sub_40E5C0(a1, a4, *(_DWORD *)(a1 + 160));\n  if ( a2 > 0 )\n  {\n    v7 = *v4;\n    v8 = 0LL;\n    v9 = v6 & 8;\n    v10 = v6 & 2;\n    v11 = v6 & 1;\n    do\n    {\n      result = *(_QWORD *)(v7 + 8 * v8);\n      v13 = **(_QWORD **)(a1 + 152) + 16LL * *(_QWORD *)(v7 + 8 * v8);\n      v14 = *(_DWORD *)(v13 + 8) >> 8;\n      if ( *(_BYTE *)(v13 + 8) == 2 )\n      {\n        if ( !(v14 & 0x3FF) )\n          return result;\n        if ( v14 & 4 )\n        {\n          if ( !v11 || v14 & 8 )\n            goto LABEL_15;\n        }\n        else if ( v14 & 8 && v11 )\n        {\n          goto LABEL_15;\n        }\n        if ( (!(v14 & 0x20) || v10) && (!(v14 & 0x80) || v9) )\n          return result;\n      }\nLABEL_15:\n      ++v8;\n    }\n    while ( v8 != v5 );\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40e7e0L", 
            "funcEndAddr": "0x40e8a8L", 
            "funcName": "sub_40E7E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E8B0(__int64 a1, __int64 a2, int a3)\n{\n  int v3; // er10\n  __int64 v4; // r15\n  __int64 v5; // rbx\n  __int64 v6; // rax\n  __int64 v7; // rbp\n  __int64 v8; // rax\n  __int64 v9; // rax\n  bool v10; // zf\n  __int64 v11; // rax\n  char v12; // dl\n  __int64 v13; // r14\n  size_t v14; // r14\n  int v15; // eax\n  bool v16; // cc\n  char v17; // dl\n  __int64 v18; // rsi\n  __int64 v19; // rax\n  __int64 v20; // rcx\n  __int64 result; // rax\n  __int64 v22; // rcx\n  __int64 v23; // rax\n  int v24; // edx\n  __int64 v25; // rax\n  __int64 v26; // rcx\n  __int64 v27; // r11\n  __int64 v28; // r13\n  size_t v29; // r12\n  size_t v30; // rax\n  wchar_t v31; // edx\n  signed __int64 v32; // r12\n  int v33; // eax\n  __int64 v34; // r13\n  __int64 v35; // rcx\n  __int64 v36; // rdi\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  __int64 v39; // rsi\n  __int64 v40; // r12\n  __int64 v41; // rax\n  __int64 v42; // rax\n  __int64 v43; // rcx\n  __int64 v44; // rax\n  __int64 v45; // rax\n  __int64 v46; // rcx\n  signed __int64 v47; // rdx\n  _DWORD *v48; // rax\n  __int64 v49; // rcx\n  unsigned __int64 v50; // rcx\n  __int64 v51; // r13\n  char *v52; // r12\n  __int64 v53; // rcx\n  char *v54; // rsi\n  signed __int64 v55; // rdx\n  size_t v56; // rax\n  size_t v57; // rdx\n  __int64 v58; // rcx\n  __int64 v59; // rdx\n  signed __int64 v60; // r13\n  signed __int64 v61; // rax\n  __int64 v62; // rdx\n  _DWORD *v63; // rax\n  __int64 v64; // rdx\n  __int64 v65; // rsi\n  int v66; // esi\n  __int64 v67; // rax\n  int v68; // [rsp+4h] [rbp-74h]\n  int v69; // [rsp+4h] [rbp-74h]\n  wchar_t v70; // [rsp+4h] [rbp-74h]\n  __int64 v71; // [rsp+18h] [rbp-60h]\n  wchar_t v72; // [rsp+2Ch] [rbp-4Ch]\n  char v73[6]; // [rsp+32h] [rbp-46h]\n  wint_t wc[2]; // [rsp+38h] [rbp-40h]\n\n  v3 = a3;\n  v4 = a2;\n  v5 = a1;\n  v6 = *(_QWORD *)(a1 + 40);\n  v7 = a2 - v6;\n  if ( v6 <= a2 )\n    goto LABEL_125;\n  if ( *(_DWORD *)(a1 + 144) > 1 )\n    *(_QWORD *)(a1 + 32) = 0LL;\n  v8 = *(_QWORD *)(a1 + 80);\n  *(_QWORD *)(a1 + 48) = 0LL;\n  v7 = a2;\n  *(_QWORD *)(a1 + 40) = 0LL;\n  *(_QWORD *)(a1 + 88) = v8;\n  v9 = *(_QWORD *)(a1 + 96);\n  *(_QWORD *)(a1 + 56) = 0LL;\n  *(_QWORD *)(a1 + 104) = v9;\n  *(_BYTE *)(a1 + 140) = 0;\n  v10 = *(_BYTE *)(a1 + 139) == 0;\n  *(_DWORD *)(a1 + 112) = (a3 & 1u) < 1 ? 6 : 4;\n  if ( v10 )\n  {\n    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;\n    if ( a2 )\n    {\nLABEL_6:\n      v11 = *(_QWORD *)(a1 + 56);\n      v12 = *(_BYTE *)(a1 + 140);\n      v13 = *(_QWORD *)(a1 + 48);\n      if ( v11 > v7 )\n      {\n        if ( !v12 )\n        {\n          v14 = v13 - v7;\n          v15 = sub_40E5C0(a1, v7 - 1, v3);\n          v16 = *(_DWORD *)(a1 + 144) <= 1;\n          *(_DWORD *)(a1 + 112) = v15;\n          if ( !v16 )\n          {\n            memmove(*(void **)(a1 + 16), (const void *)(*(_QWORD *)(a1 + 16) + 4 * v7), 4 * v14);\n            v14 = *(_QWORD *)(a1 + 48) - v7;\n          }\n          v17 = *(_BYTE *)(a1 + 139);\n          if ( v17 )\n          {\n            memmove(*(void **)(a1 + 8), (const void *)(*(_QWORD *)(a1 + 8) + v7), v14);\n            v17 = *(_BYTE *)(a1 + 139);\n            v14 = *(_QWORD *)(a1 + 48) - v7;\n          }\n          *(_QWORD *)(a1 + 56) -= v7;\n          *(_QWORD *)(a1 + 48) = v14;\n          goto LABEL_13;\n        }\n        v34 = *(_QWORD *)(a1 + 24);\n        v35 = *(_QWORD *)(a1 + 48);\n        v36 = 0LL;\n        do\n        {\n          v37 = (v36 + v35) / 2;\n          v38 = *(_QWORD *)(v34 + 8 * v37);\n          v39 = (v36 + v35) / 2;\n          if ( v38 <= v7 )\n          {\n            if ( v38 >= v7 )\n            {\n              v40 = (v36 + v35) / 2;\n              --v39;\n              goto LABEL_57;\n            }\n            v36 = v37 + 1;\n          }\n          else\n          {\n            v35 = (v36 + v35) / 2;\n          }\n        }\n        while ( v36 < v35 );\n        v40 = v37 + 1;\n        if ( v38 >= v7 )\n        {\n          v40 = v37;\n          v39 = v37 - 1;\n        }\nLABEL_57:\n        *(_DWORD *)(v5 + 112) = sub_40E5C0(v5, v39, v3);\n        if ( v7 == v40 && v7 < v13 && *(_QWORD *)(v34 + 8 * v40) == v7 )\n        {\n          memmove(*(void **)(v5 + 16), (const void *)(*(_QWORD *)(v5 + 16) + 4 * v7), 4 * (v13 - v7));\n          memmove(*(void **)(v5 + 8), (const void *)(*(_QWORD *)(v5 + 8) + v7), *(_QWORD *)(v5 + 48) - v7);\n          v41 = *(_QWORD *)(v5 + 48);\n          *(_QWORD *)(v5 + 56) -= v7;\n          v42 = v41 - v7;\n          *(_QWORD *)(v5 + 48) = v42;\n          if ( v42 > 0 )\n          {\n            v43 = *(_QWORD *)(v5 + 24);\n            v44 = 0LL;\n            do\n            {\n              *(_QWORD *)(v43 + 8 * v44) = *(_QWORD *)(v43 + 8 * v7 + 8 * v44) - v7;\n              ++v44;\n            }\n            while ( *(_QWORD *)(v5 + 48) > v44 );\n          }\n          LODWORD(v18) = *(_DWORD *)(v5 + 144);\n          v17 = *(_BYTE *)(v5 + 139);\n          v19 = *(_QWORD *)(v5 + 88) - v7;\n          v20 = *(_QWORD *)(v5 + 104) - v7;\nLABEL_14:\n          if ( v17 )\n            goto LABEL_16;\n          goto LABEL_15;\n        }\n        v45 = *(_QWORD *)(v5 + 80);\n        v46 = *(_QWORD *)(v5 + 96);\n        *(_BYTE *)(v5 + 140) = 0;\n        v19 = v45 - v4;\n        v20 = v46 - v4;\n        *(_QWORD *)(v5 + 88) = v19 + v7;\n        *(_QWORD *)(v5 + 104) = v20 + v7;\n        if ( v40 > 0 )\n        {\n          do\n          {\n            if ( *(_QWORD *)(v34 + 8 * v40 - 8) != v7 )\n              break;\n            --v40;\n          }\n          while ( v40 );\n        }\n        if ( v40 >= v13 )\n        {\n          if ( v40 == v13 )\n          {\nLABEL_99:\n            *(_QWORD *)(v5 + 48) = 0LL;\n            v47 = 0LL;\nLABEL_77:\n            *(_QWORD *)(v5 + 56) = v47;\n            LODWORD(v18) = *(_DWORD *)(v5 + 144);\n            v17 = *(_BYTE *)(v5 + 139);\n            goto LABEL_14;\n          }\n        }\n        else\n        {\n          while ( *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v40) == -1 )\n          {\n            if ( ++v40 == v13 )\n              goto LABEL_99;\n          }\n        }\n        v47 = *(_QWORD *)(v34 + 8 * v40) - v7;\n        *(_QWORD *)(v5 + 48) = v47;\n        if ( v47 )\n        {\n          if ( v47 > 0 )\n          {\n            v48 = *(_DWORD **)(v5 + 16);\n            v49 = (__int64)&v48[v47];\n            do\n            {\n              *v48 = -1;\n              ++v48;\n            }\n            while ( (_DWORD *)v49 != v48 );\n          }\n          memset(*(void **)(v5 + 8), 255, v47);\n          v47 = *(_QWORD *)(v5 + 48);\n          v19 = *(_QWORD *)(v5 + 88) - v7;\n          v20 = *(_QWORD *)(v5 + 104) - v7;\n        }\n        goto LABEL_77;\n      }\n      if ( v12 )\n      {\n        v62 = *(_QWORD *)(a1 + 80);\n        *(_BYTE *)(a1 + 140) = 0;\n        *(_QWORD *)(a1 + 88) = v7 + v62 - a2;\n        *(_QWORD *)(a1 + 104) = v7 + *(_QWORD *)(a1 + 96) - a2;\n      }\n      v18 = *(int *)(a1 + 144);\n      v27 = *(_QWORD *)(a1 + 40);\n      *(_QWORD *)(a1 + 48) = 0LL;\n      if ( (int)v18 <= 1 )\n      {\n        v22 = *(unsigned __int8 *)(v27 + v7 + *(_QWORD *)a1 - 1);\n        v23 = *(_QWORD *)(a1 + 120);\n        *(_QWORD *)(a1 + 56) = 0LL;\n        if ( v23 )\n          LOBYTE(v22) = *(_BYTE *)(v23 + v22);\n        v24 = 1;\n        if ( !((*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * ((__int64)(unsigned __int8)v22 >> 6)) >> v22) & 1) )\n        {\n          v24 = 0;\n          if ( (_BYTE)v22 == 10 )\n            v24 = 2 * (*(_BYTE *)(a1 + 141) != 0);\n        }\n        v25 = *(_QWORD *)(a1 + 88);\n        v26 = *(_QWORD *)(a1 + 104);\n        *(_DWORD *)(a1 + 112) = v24;\n        v19 = v25 - v7;\n        v20 = v26 - v7;\n        if ( *(_BYTE *)(a1 + 139) )\n        {\n          *(_QWORD *)(a1 + 40) = v4;\n          *(_QWORD *)(a1 + 88) = v19;\n          *(_QWORD *)(a1 + 104) = v20;\nLABEL_32:\n          if ( *(_BYTE *)(v5 + 139) )\n          {\n            if ( *(_BYTE *)(v5 + 136) )\n            {\n              sub_40B4E0((_QWORD *)v5);\n            }\n            else\n            {\n              v58 = *(_QWORD *)(v5 + 120);\n              if ( v58 )\n              {\n                v59 = *(_QWORD *)(v5 + 48);\n                if ( *(_QWORD *)(v5 + 64) <= v19 )\n                  v19 = *(_QWORD *)(v5 + 64);\n                if ( v19 > v59 )\n                {\n                  while ( 1 )\n                  {\n                    *(_BYTE *)(*(_QWORD *)(v5 + 8) + v59) = *(_BYTE *)(v58\n                                                                     + *(unsigned __int8 *)(v59 + *(_QWORD *)v5 + v4));\n                    if ( v19 == ++v59 )\n                      break;\n                    v4 = *(_QWORD *)(v5 + 40);\n                    v58 = *(_QWORD *)(v5 + 120);\n                  }\n                }\n                else\n                {\n                  v19 = *(_QWORD *)(v5 + 48);\n                }\n                *(_QWORD *)(v5 + 48) = v19;\n                *(_QWORD *)(v5 + 56) = v19;\n              }\n            }\n          }\n          else\n          {\n            *(_QWORD *)(v5 + 48) = v19;\n          }\n          goto LABEL_19;\n        }\nLABEL_15:\n        *(_QWORD *)(v5 + 8) += v7;\n        goto LABEL_16;\n      }\n      if ( *(_BYTE *)(a1 + 137) )\n      {\n        v50 = *(_QWORD *)a1;\n        v51 = *(_QWORD *)a1 + v27;\n        v52 = (char *)(v51 + v7 - 1);\n        if ( *(_QWORD *)a1 < (unsigned __int64)(v51 + v7 - v18) )\n          v50 = v51 + v7 - v18;\n        if ( v50 <= (unsigned __int64)v52 )\n        {\n          while ( (*v52 & 0xC0) == -128 )\n          {\n            if ( v50 > (unsigned __int64)--v52 )\n              goto LABEL_38;\n          }\n          v53 = *(_QWORD *)(a1 + 120);\n          v54 = v52;\n          v55 = v51 + *(_QWORD *)(a1 + 88) - (_QWORD)v52;\n          if ( v53 )\n          {\n            LODWORD(v65) = 6;\n            if ( v55 <= 6 )\n              v65 = v51 + *(_QWORD *)(a1 + 88) - (_QWORD)v52;\n            v66 = v65 - 1;\n            v67 = v66;\n            if ( v66 >= 0 )\n            {\n              do\n              {\n                v73[v67] = *(_BYTE *)(v53 + (unsigned __int8)v52[v67]);\n                --v67;\n              }\n              while ( (int)v67 >= 0 );\n            }\n            v54 = v73;\n          }\n          v69 = v3;\n          *(_QWORD *)wc = 0LL;\n          v56 = sub_40AB50(&v72, v54, v55, (mbstate_t *)wc);\n          v3 = v69;\n          v57 = v51 + v7 - (_QWORD)v52;\n          if ( v57 <= v56 && v56 <= 0xFFFFFFFFFFFFFFFDLL )\n          {\n            v61 = v56 - v57;\n            v31 = v72;\n            *(_QWORD *)(a1 + 32) = 0LL;\n            v32 = v61;\n            *(_QWORD *)(a1 + 48) = v61;\n            if ( v31 != -1 )\n              goto LABEL_42;\n          }\n          v27 = *(_QWORD *)(a1 + 40);\n          v11 = *(_QWORD *)(a1 + 56);\n        }\n      }\nLABEL_38:\n      v28 = v27 + v11;\n      if ( v4 <= v27 + v11 )\n      {\n        v60 = v28 - v4;\n        *(_QWORD *)(a1 + 48) = v60;\n        v32 = v60;\n      }\n      else\n      {\n        do\n        {\n          v68 = v3;\n          v29 = *(_QWORD *)(a1 + 80) - v28;\n          v71 = *(_QWORD *)(a1 + 32);\n          v30 = sub_40AB50((wchar_t *)wc, (char *)(v28 + *(_QWORD *)a1), v29, (mbstate_t *)(a1 + 32));\n          v31 = wc[0];\n          v3 = v68;\n          if ( v30 - 1 > 0xFFFFFFFFFFFFFFFCLL )\n          {\n            if ( v30 && v29 )\n              v31 = *(unsigned __int8 *)(*(_QWORD *)a1 + v28);\n            else\n              v31 = 0;\n            *(_QWORD *)(a1 + 32) = v71;\n            v30 = 1LL;\n          }\n          v28 += v30;\n        }\n        while ( v4 > v28 );\n        v32 = v28 - v4;\n        *(_QWORD *)(a1 + 48) = v28 - v4;\n        if ( v31 != -1 )\n        {\nLABEL_42:\n          if ( *(_BYTE *)(a1 + 142) && ((v70 = v31, iswalnum(v31)) || (v31 = v70, v70 == 95)) )\n          {\n            v33 = 1;\n          }\n          else\n          {\n            v33 = 0;\n            if ( v31 == 10 )\n              v33 = 2 * (*(_BYTE *)(a1 + 141) != 0);\n          }\n          *(_DWORD *)(a1 + 112) = v33;\nLABEL_46:\n          if ( v32 )\n          {\n            if ( v32 > 0 )\n            {\n              v63 = *(_DWORD **)(a1 + 16);\n              v64 = (__int64)&v63[v32];\n              do\n              {\n                *v63 = -1;\n                ++v63;\n              }\n              while ( (_DWORD *)v64 != v63 );\n            }\n            v17 = *(_BYTE *)(a1 + 139);\n            if ( !v17 )\n              goto LABEL_48;\n            memset(*(void **)(a1 + 8), 255, v32);\n            v32 = *(_QWORD *)(a1 + 48);\n          }\n          v17 = *(_BYTE *)(a1 + 139);\nLABEL_48:\n          *(_QWORD *)(a1 + 56) = v32;\nLABEL_13:\n          LODWORD(v18) = *(_DWORD *)(a1 + 144);\n          v19 = *(_QWORD *)(a1 + 88) - v7;\n          v20 = *(_QWORD *)(a1 + 104) - v7;\n          goto LABEL_14;\n        }\n      }\n      *(_DWORD *)(a1 + 112) = sub_40E5C0(a1, v13 - 1, v3);\n      goto LABEL_46;\n    }\n  }\n  else\n  {\nLABEL_125:\n    if ( v7 )\n      goto LABEL_6;\n  }\n  LODWORD(v18) = *(_DWORD *)(a1 + 144);\n  v19 = *(_QWORD *)(a1 + 88);\n  v20 = *(_QWORD *)(a1 + 104);\nLABEL_16:\n  *(_QWORD *)(v5 + 40) = v4;\n  *(_QWORD *)(v5 + 88) = v19;\n  *(_QWORD *)(v5 + 104) = v20;\n  if ( (int)v18 <= 1 )\n    goto LABEL_32;\n  if ( !*(_BYTE *)(v5 + 136) )\n  {\n    sub_40B560((mbstate_t *)v5);\nLABEL_19:\n    *(_QWORD *)(v5 + 72) = 0LL;\n    return 0LL;\n  }\n  result = sub_40B710(v5);\n  if ( !(_DWORD)result )\n    goto LABEL_19;\n  return result;\n}\n", 
            "funcStartAddr": "0x40e8b0L", 
            "funcEndAddr": "0x40f097L", 
            "funcName": "sub_40E8B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F0A0(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r13\n  __int64 v5; // rax\n  __int64 v6; // rbp\n  __int64 v7; // r10\n  __int64 v8; // rbx\n  __int64 v9; // r9\n  __int64 *v10; // r11\n  unsigned int v11; // eax\n  __int64 v12; // rax\n  __int64 *v13; // r15\n  __int64 v14; // rax\n  __int64 v15; // r15\n  __int64 v16; // rdx\n  __int64 v17; // r9\n  __int64 v18; // rdx\n  __int64 v19; // r9\n  __int64 v20; // rax\n  __int64 v21; // r11\n  void *v22; // rdi\n  __int64 v24; // [rsp+0h] [rbp-70h]\n  unsigned int v25; // [rsp+0h] [rbp-70h]\n  __int64 v26; // [rsp+8h] [rbp-68h]\n  __int64 v27; // [rsp+10h] [rbp-60h]\n  __int128 v28; // [rsp+18h] [rbp-58h]\n  void *ptr; // [rsp+28h] [rbp-48h]\n\n  v4 = a3;\n  v5 = a1[7];\n  v28 = 0LL;\n  v6 = v5 + 24 * a2;\n  v27 = a4;\n  ptr = 0LL;\n  v7 = *(_QWORD *)(v6 + 8);\n  if ( v7 > 0 )\n  {\n    v8 = 0LL;\n    while ( 1 )\n    {\n      v12 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v8);\n      if ( a2 != v12 && *(_BYTE *)(*a1 + 16 * v12 + 8) & 8 )\n      {\n        v13 = *(__int64 **)(24 * v12 + a1[5] + 16);\n        v26 = 24 * v12 + a1[5];\n        v24 = *v13;\n        v14 = sub_40C890(v7, (__int64 *)(v6 + 16), *v13);\n        if ( *(_QWORD *)(v26 + 8) > 1LL )\n        {\n          if ( !v14 && sub_40C890(*(_QWORD *)(v4 + 8), (__int64 *)(v4 + 16), v24)\n            || (v15 = v13[1], v15 > 0)\n            && !sub_40C890(v7, v10, v15)\n            && sub_40C890(*(_QWORD *)(v4 + 8), (__int64 *)(v4 + 16), v16) )\n          {\nLABEL_5:\n            v11 = sub_40D340((__int64 *)&v28, v27, v9 + a1[7]);\n            if ( v11 )\n            {\n              v25 = v11;\n              free(ptr);\n              return v25;\n            }\n            v7 = *(_QWORD *)(v6 + 8);\n            goto LABEL_7;\n          }\n        }\n        else if ( !v14 && sub_40C890(*(_QWORD *)(v4 + 8), (__int64 *)(v4 + 16), v24) )\n        {\n          goto LABEL_5;\n        }\n      }\nLABEL_7:\n      if ( v7 <= ++v8 )\n      {\n        v17 = 0LL;\n        if ( v7 > 0 )\n        {\n          do\n          {\n            if ( !sub_40C890(*((__int64 *)&v28 + 1), (__int64 *)&ptr, *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v17)) )\n            {\n              v20 = sub_40C890(*(_QWORD *)(v4 + 8), (__int64 *)(v4 + 16), v18) - 1;\n              if ( v20 >= 0 && v20 < v21 )\n              {\n                *(_QWORD *)(v4 + 8) = v21 - 1;\n                sub_40CA00((_QWORD *)(v4 + 8), (__int64 *)(v4 + 16), v20);\n              }\n            }\n            v17 = v19 + 1;\n          }\n          while ( *(_QWORD *)(v6 + 8) > v17 );\n        }\n        v22 = ptr;\n        goto LABEL_25;\n      }\n    }\n  }\n  v22 = 0LL;\nLABEL_25:\n  free(v22);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40f0a0L", 
            "funcEndAddr": "0x40f2c5L", 
            "funcName": "sub_40F0A0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40F2D0(__int64 a1, _QWORD *a2)\n{\n  _QWORD *v2; // r9\n  __m128i v3; // xmm0\n  bool v4; // cc\n  __int64 v5; // r12\n  __int64 v6; // r8\n  unsigned __int8 *v7; // r15\n  int v8; // ebp\n  __int16 v9; // ax\n  __int64 v10; // rbp\n  void *v11; // r13\n  __int64 v12; // rbx\n  __int64 v13; // r15\n  char *v14; // r13\n  __int64 v15; // r12\n  _QWORD *v16; // rbp\n  __int64 v17; // r14\n  __int64 v18; // rax\n  __int64 *v19; // rax\n  __int64 kk; // rax\n  __int64 v21; // rbp\n  _QWORD *v22; // rbx\n  __int64 ll; // r11\n  unsigned __int64 v24; // rax\n  __int64 v25; // rcx\n  _QWORD *mm; // rdi\n  __int64 v27; // rax\n  void **v28; // rbp\n  void *v29; // rdi\n  __int64 v31; // rdi\n  __int64 v32; // rsi\n  __int64 m; // rcx\n  __int64 v34; // rdx\n  __int64 v35; // rsi\n  __int64 v36; // rcx\n  __int64 l; // rdx\n  __int64 v38; // rax\n  __int64 v39; // r13\n  __int64 v40; // rbp\n  __m128i *v41; // r12\n  __int64 v42; // rcx\n  __int64 ii; // rax\n  __int64 v44; // rdx\n  __int64 v45; // rbx\n  __int64 v46; // rdi\n  __int64 jj; // rdx\n  __int64 v48; // rax\n  __int64 v49; // rcx\n  __int64 v50; // rax\n  char *v51; // rdx\n  __m128i *v52; // rax\n  __m128i *v53; // rax\n  __int64 v54; // rbp\n  char *v55; // r13\n  _QWORD *v56; // rax\n  void **v57; // rbx\n  void *v58; // rdi\n  __int64 v59; // rsi\n  __int64 j; // rdx\n  __int64 v61; // rdx\n  __int8 v62; // dh\n  __int64 v63; // rcx\n  __int64 k; // rdx\n  __int64 v65; // rax\n  __int64 v66; // rsi\n  __int64 n; // rdx\n  __int64 v68; // rcx\n  __int64 v69; // rsi\n  __int64 i; // rdx\n  void **v71; // rbx\n  void *v72; // rdi\n  __int64 *v73; // rax\n  char v74; // di\n  __int64 *v75; // rax\n  char *v76; // rsi\n  __int64 v77; // r9\n  __int64 v78; // r15\n  __int64 v79; // r9\n  __int64 v80; // rsi\n  void *v81; // rax\n  __int64 v82; // rax\n  char *v83; // rdx\n  _QWORD *v84; // rbp\n  __int64 v85; // r11\n  unsigned __int64 v86; // rax\n  _QWORD *v87; // r8\n  __int64 nn; // rcx\n  __int64 *v89; // rdi\n  __int64 v90; // rsi\n  __int64 v91; // r9\n  __int64 v92; // r10\n  char *ptr; // [rsp+8h] [rbp-E0h]\n  _QWORD *ptra; // [rsp+8h] [rbp-E0h]\n  __int64 v95; // [rsp+10h] [rbp-D8h]\n  int v96; // [rsp+10h] [rbp-D8h]\n  _QWORD *v97; // [rsp+10h] [rbp-D8h]\n  __int64 v98; // [rsp+18h] [rbp-D0h]\n  char *v99; // [rsp+18h] [rbp-D0h]\n  char *v100; // [rsp+20h] [rbp-C8h]\n  char *v101; // [rsp+28h] [rbp-C0h]\n  char v102; // [rsp+30h] [rbp-B8h]\n  _QWORD *v103; // [rsp+30h] [rbp-B8h]\n  __int64 v104; // [rsp+30h] [rbp-B8h]\n  __int64 v105; // [rsp+38h] [rbp-B0h]\n  __int64 v106; // [rsp+40h] [rbp-A8h]\n  _QWORD *v107; // [rsp+48h] [rbp-A0h]\n  __m128i v108; // [rsp+50h] [rbp-98h]\n  __m128i v109; // [rsp+60h] [rbp-88h]\n  __int128 v110; // [rsp+70h] [rbp-78h]\n  void *v111[2]; // [rsp+80h] [rbp-68h]\n  __int128 v112; // [rsp+90h] [rbp-58h]\n  __int128 v113; // [rsp+A0h] [rbp-48h]\n  char v114; // [rsp+B0h] [rbp-38h]\n\n  v107 = a2;\n  v100 = (char *)malloc(0x3800uLL);\n  if ( !v100 )\n    return 0;\n  v2 = a2;\n  v3 = 0LL;\n  v108 = 0LL;\n  v4 = a2[2] <= 0LL;\n  v109 = 0LL;\n  ptr = v100 + 6144;\n  a2[11] = 0LL;\n  a2[12] = 0LL;\n  if ( v4 )\n  {\n    free(v100);\nLABEL_134:\n    v81 = calloc(8uLL, 0x100uLL);\n    v107[11] = v81;\n    return v81 != 0LL;\n  }\n  v5 = 0LL;\n  v98 = 0LL;\n  v6 = a1;\n  do\n  {\n    v7 = (unsigned __int8 *)(*(_QWORD *)v6 + 16LL * *(_QWORD *)(v2[3] + 8 * v98));\n    v8 = v7[8];\n    v9 = (*((_DWORD *)v7 + 2) >> 8) & 0x3FF;\n    if ( v8 == 1 )\n    {\n      *(__int64 *)((char *)v108.m128i_i64 + (((unsigned __int64)*v7 >> 3) & 0x18)) |= 1LL << *v7;\n    }\n    else if ( v8 == 3 )\n    {\n      v69 = *(_QWORD *)v7;\n      for ( i = 0LL; i != 4; ++i )\n        v108.m128i_i64[i] |= *(_QWORD *)(v69 + i * 8);\n    }\n    else\n    {\n      if ( v8 == 5 )\n      {\n        if ( *(_DWORD *)(v6 + 180) <= 1 )\n        {\n          v3 = _mm_cmpeq_epi32(v3, v3);\n          v108 = v3;\n          v109 = v3;\n        }\n        else\n        {\n          v59 = *(_QWORD *)(v6 + 120);\n          for ( j = 0LL; j != 4; ++j )\n            v108.m128i_i64[j] |= *(_QWORD *)(v59 + j * 8);\n        }\n      }\n      else\n      {\n        if ( v8 != 7 )\n          goto LABEL_8;\n        v3 = _mm_cmpeq_epi32(v3, v3);\n        v108 = v3;\n      }\n      v61 = *(_QWORD *)(v6 + 216);\n      if ( !(v61 & 0x40) )\n        v108.m128i_i64[0] &= 0xFFFFFFFFFFFFFBFFLL;\n      if ( v61 & 0x80 )\n        v108.m128i_i64[0] &= 0xFFFFFFFFFFFFFFFELL;\n    }\n    if ( v9 )\n    {\n      if ( v9 & 0x20 )\n      {\n        v62 = v108.m128i_i8[1];\n        v3 = 0LL;\n        v108 = 0LL;\n        v109 = 0LL;\n        if ( !(v62 & 4) )\n          goto LABEL_8;\n        v108.m128i_i64[0] = 1024LL;\n      }\n      if ( (v9 & 0x80u) != 0 )\n        goto LABEL_77;\n      if ( !(v9 & 4) )\n      {\nLABEL_52:\n        if ( v9 & 8 )\n        {\n          if ( v8 == 1 && v7[10] & 0x40 )\n            goto LABEL_77;\n          if ( *(_DWORD *)(v6 + 180) <= 1 )\n          {\n            v63 = 0LL;\n            for ( k = 0LL; k != 4; ++k )\n            {\n              v65 = v108.m128i_i64[k] & ~*(_QWORD *)(v6 + 8 * k + 184);\n              v108.m128i_i64[k] = v65;\n              v63 |= v65;\n            }\n            if ( !v63 )\n              goto LABEL_8;\n          }\n          else\n          {\n            v35 = *(_QWORD *)(v6 + 120);\n            v36 = 0LL;\n            for ( l = 0LL; l != 4; ++l )\n            {\n              v38 = v108.m128i_i64[l] & ~(*(_QWORD *)(v35 + 8 * l) & *(_QWORD *)(v6 + 8 * l + 184));\n              v108.m128i_i64[l] = v38;\n              v36 |= v38;\n            }\n            if ( !v36 )\n              goto LABEL_8;\n          }\n        }\n        goto LABEL_58;\n      }\n      if ( v8 == 1 )\n      {\n        if ( !(v7[10] & 0x40) )\n          goto LABEL_77;\n        if ( *(_DWORD *)(v6 + 180) > 1 )\n        {\nLABEL_49:\n          v31 = *(_QWORD *)(v6 + 120);\n          v32 = 0LL;\n          for ( m = 0LL; m != 4; ++m )\n          {\n            v34 = v108.m128i_i64[m] & (*(_QWORD *)(v6 + 8 * m + 184) | ~*(_QWORD *)(v31 + 8 * m));\n            v108.m128i_i64[m] = v34;\n            v32 |= v34;\n          }\n          if ( !v32 )\n            goto LABEL_8;\n          goto LABEL_52;\n        }\n      }\n      else if ( *(_DWORD *)(v6 + 180) > 1 )\n      {\n        goto LABEL_49;\n      }\n      v66 = 0LL;\n      for ( n = 0LL; n != 4; ++n )\n      {\n        v68 = *(_QWORD *)(v6 + 8 * n + 184) & v108.m128i_i64[n];\n        v108.m128i_i64[n] = v68;\n        v66 |= v68;\n      }\n      if ( !v66 )\n        goto LABEL_8;\n      goto LABEL_52;\n    }\nLABEL_58:\n    v39 = 0LL;\n    if ( v5 > 0 )\n    {\n      v96 = v8;\n      v40 = v5;\n      v41 = (__m128i *)(v100 + 6144);\n      v106 = v6;\n      v103 = v2;\n      while ( 1 )\n      {\n        if ( v96 != 1 || (*(_QWORD *)&ptr[32 * v39 + (((unsigned __int64)*v7 >> 3) & 0x18)] >> *v7) & 1 )\n        {\n          v42 = 0LL;\n          for ( ii = 0LL; ii != 4; ++ii )\n          {\n            v44 = v41->m128i_i64[ii] & v108.m128i_i64[ii];\n            *((_QWORD *)&v110 + ii) = v44;\n            v42 |= v44;\n          }\n          if ( v42 )\n          {\n            v45 = 0LL;\n            v46 = 0LL;\n            for ( jj = 0LL; jj != 4; ++jj )\n            {\n              v48 = v41->m128i_i64[jj];\n              v49 = v48 & ~v108.m128i_i64[jj];\n              v50 = v108.m128i_i64[jj] & ~v48;\n              *((_QWORD *)&v112 + jj) = v49;\n              v46 |= v49;\n              v108.m128i_i64[jj] = v50;\n              v45 |= v50;\n            }\n            v51 = &v100[24 * v39];\n            if ( v46 )\n            {\n              v52 = (__m128i *)&ptr[32 * v40];\n              *v52 = _mm_load_si128((const __m128i *)&v112);\n              v52[1] = _mm_load_si128((const __m128i *)&v113);\n              *v41 = _mm_load_si128((const __m128i *)&v110);\n              v41[1] = _mm_load_si128((const __m128i *)v111);\n              if ( (unsigned int)sub_40D930((__int64)&v100[24 * v40], (__int64)v51) )\n                goto LABEL_78;\n              v51 = &v100[24 * v39];\n              ++v40;\n            }\n            if ( !(unsigned __int8)sub_40B280(v51, *(_QWORD *)(v103[3] + 8 * v98)) )\n            {\nLABEL_78:\n              v5 = v40;\n              goto LABEL_79;\n            }\n            if ( !v45 )\n            {\nLABEL_73:\n              v6 = v106;\n              v2 = v103;\n              v5 = v40;\n              break;\n            }\n          }\n        }\n        ++v39;\n        v41 += 2;\n        if ( v39 >= v40 )\n          goto LABEL_73;\n      }\n    }\n    if ( v5 == v39 )\n    {\n      v104 = v6;\n      v53 = (__m128i *)&ptr[32 * v5];\n      v97 = v2;\n      *v53 = _mm_load_si128(&v108);\n      v53[1] = _mm_load_si128(&v109);\n      v54 = *(_QWORD *)(v2[3] + 8 * v98);\n      v55 = &v100[24 * v5];\n      *(_QWORD *)v55 = 1LL;\n      *((_QWORD *)v55 + 1) = 1LL;\n      v56 = malloc(8uLL);\n      v2 = v97;\n      v6 = v104;\n      *((_QWORD *)v55 + 2) = v56;\n      if ( !v56 )\n      {\n        *((_QWORD *)v55 + 1) = 0LL;\n        *(_QWORD *)v55 = 0LL;\n        if ( v5 )\n        {\nLABEL_79:\n          v57 = (void **)(v100 + 16);\n          do\n          {\n            v58 = *v57;\n            v57 += 3;\n            free(v58);\n          }\n          while ( &v100[24 * v5 + 16] != (char *)v57 );\n          free(v100);\n        }\n        else\n        {\n          free(v100);\n        }\n        return 0;\n      }\n      *v56 = v54;\n      ++v5;\nLABEL_77:\n      v3 = 0LL;\n      v108 = 0LL;\n      v109 = 0LL;\n    }\nLABEL_8:\n    ++v98;\n  }\n  while ( v98 < v2[2] );\n  v10 = v6;\n  if ( v5 <= 0 )\n  {\n    free(v100);\n    if ( v5 )\n      return 0;\n    goto LABEL_134;\n  }\n  v110 = (unsigned __int64)(v5 + 1);\n  v11 = malloc(8 * (v5 + 1));\n  v111[0] = v11;\n  if ( !v11 || (v108.m128i_i32[0] = 0, v5 > 768614336404564053LL) || (v105 = 24 * v5, (ptra = malloc(24 * v5)) == 0LL) )\n  {\nLABEL_112:\n    free(v11);\n    v71 = (void **)(v100 + 16);\n    do\n    {\n      v72 = *v71;\n      v71 += 3;\n      free(v72);\n    }\n    while ( v71 != (void **)&v100[24 * v5 + 16] );\n    free(v100);\n    return 0;\n  }\n  v12 = 8 * (v5 + 1) - 8;\n  v13 = 0LL;\n  v14 = v100;\n  v102 = 0;\n  v95 = v5;\n  v15 = v10;\n  v99 = (char *)ptra + v12;\n  v101 = (char *)ptra + v12 + v12;\n  v16 = v100 + 8;\n  v112 = 0LL;\n  v113 = 0LL;\n  do\n  {\n    *((_QWORD *)&v110 + 1) = 0LL;\n    v17 = 0LL;\n    if ( *v16 > 0LL )\n    {\n      while ( 1 )\n      {\n        v18 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8LL * *(_QWORD *)(v16[1] + 8 * v17));\n        if ( v18 != -1 )\n        {\n          v108.m128i_i32[0] = sub_40CDD0((__int64)&v110, *(_QWORD *)(v15 + 48) + 24 * v18);\n          if ( v108.m128i_i32[0] )\n            break;\n        }\n        if ( *v16 <= ++v17 )\n          goto LABEL_18;\n      }\nLABEL_110:\n      v5 = v95;\n      goto LABEL_111;\n    }\nLABEL_18:\n    v19 = sub_40DB40(&v108, (_QWORD *)v15, (__int64)&v110, 0);\n    ptra[v13] = v19;\n    if ( !v19 && v108.m128i_i32[0] )\n      goto LABEL_110;\n    if ( *((_BYTE *)v19 + 104) < 0 )\n    {\n      v73 = sub_40DB40(&v108, (_QWORD *)v15, (__int64)&v110, 1u);\n      *(_QWORD *)&v99[8 * v13] = v73;\n      if ( !v73 && v108.m128i_i32[0] )\n        goto LABEL_110;\n      if ( v73 != (__int64 *)ptra[v13] )\n      {\n        v74 = v102;\n        if ( *(_DWORD *)(v15 + 180) >= 2 )\n          v74 = 1;\n        v102 = v74;\n      }\n      v75 = sub_40DB40(&v108, (_QWORD *)v15, (__int64)&v110, 2u);\n      *(_QWORD *)&v101[8 * v13] = v75;\n      if ( !v75 )\n      {\n        if ( v108.m128i_i32[0] )\n          goto LABEL_110;\n      }\n    }\n    else\n    {\n      *(_QWORD *)&v99[8 * v13] = v19;\n      *(_QWORD *)&v101[8 * v13] = v19;\n    }\n    for ( kk = 0LL; kk != 32; kk += 8LL )\n      *(_QWORD *)((char *)&v112 + kk) |= *(_QWORD *)&v14[kk + 6144];\n    ++v13;\n    v16 += 3;\n    v14 += 32;\n  }\n  while ( v13 != v95 );\n  v21 = v15;\n  v5 = v95;\n  if ( !v102 )\n  {\n    v22 = calloc(8uLL, 0x100uLL);\n    v107[11] = v22;\n    if ( v22 )\n    {\n      for ( ll = 0LL; ll != 32; ll += 8LL )\n      {\n        v24 = *(_QWORD *)((char *)&v112 + ll);\n        v25 = 1LL;\n        for ( mm = &v22[8 * ll]; v24; v24 >>= 1 )\n        {\n          if ( v24 & 1 )\n          {\n            if ( v25 & *(_QWORD *)&v100[ll + 6144] )\n            {\n              v79 = 0LL;\n            }\n            else\n            {\n              v76 = &v100[ll + 6176];\n              v77 = 0LL;\n              do\n              {\n                v78 = *(_QWORD *)v76;\n                ++v77;\n                v76 += 32;\n              }\n              while ( !(v25 & v78) );\n              v79 = v77;\n            }\n            if ( v25 & *(_QWORD *)(v21 + ll + 184) )\n              v80 = *(_QWORD *)&v99[v79 * 8];\n            else\n              v80 = ptra[v79];\n            *mm = v80;\n          }\n          v25 *= 2LL;\n          ++mm;\n        }\n      }\n      goto LABEL_31;\n    }\nLABEL_111:\n    free(ptra);\n    v11 = v111[0];\n    goto LABEL_112;\n  }\n  v22 = calloc(8uLL, 0x200uLL);\n  v107[12] = v22;\n  if ( !v22 )\n    goto LABEL_111;\n  v83 = (char *)&v112;\n  v84 = v22;\n  v85 = (__int64)(v100 + 6176);\n  do\n  {\n    v86 = *(_QWORD *)v83;\n    v87 = v84;\n    for ( nn = 1LL; v86; v86 >>= 1 )\n    {\n      if ( v86 & 1 )\n      {\n        if ( nn & *(_QWORD *)(v85 - 32) )\n        {\n          v92 = 0LL;\n        }\n        else\n        {\n          v89 = (__int64 *)v85;\n          v90 = 0LL;\n          do\n          {\n            v91 = *v89;\n            ++v90;\n            v89 += 4;\n            v92 = v90;\n          }\n          while ( !(nn & v91) );\n        }\n        *v87 = ptra[v92];\n        v87[256] = *(_QWORD *)&v99[8 * v92];\n      }\n      nn *= 2LL;\n      ++v87;\n    }\n    v83 += 8;\n    v84 += 64;\n    v85 += 8LL;\n  }\n  while ( &v114 != v83 );\nLABEL_31:\n  if ( BYTE1(v112) & 4 )\n  {\n    v27 = 0LL;\n    while ( !(v100[32 * v27 + 6145] & 4) )\n    {\n      if ( ++v27 == v95 )\n        goto LABEL_35;\n    }\n    v82 = *(_QWORD *)&v101[8 * v27];\n    v22[10] = v82;\n    if ( v102 )\n      v22[266] = v82;\n  }\nLABEL_35:\n  free(ptra);\n  free(v111[0]);\n  v28 = (void **)(v100 + 16);\n  do\n  {\n    v29 = *v28;\n    v28 += 3;\n    free(v29);\n  }\n  while ( &v100[v105 + 16] != (char *)v28 );\n  free(v100);\n  return 1;\n}\n", 
            "funcStartAddr": "0x40f2d0L", 
            "funcEndAddr": "0x40fdddL", 
            "funcName": "sub_40F2D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FDE0(_QWORD *a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rdx\n  __int64 v4; // rax\n  __int64 result; // rax\n  __int64 v6; // rdx\n\n  if ( *(_BYTE *)(a2 + 48) == 16 )\n  {\n    v2 = *(_QWORD *)(a2 + 8);\n    v3 = *(_QWORD *)(v2 + 24);\n    v4 = *(_QWORD *)(v2 + 56);\n    *(_QWORD *)(a2 + 24) = v3;\n    *(_QWORD *)(a2 + 56) = v4;\n    result = 0LL;\n  }\n  else\n  {\n    *(_QWORD *)(a2 + 24) = a2;\n    v6 = sub_40BF60((__int64)a1, *(_QWORD *)(a2 + 40), *(void **)(a2 + 48));\n    *(_QWORD *)(a2 + 56) = v6;\n    if ( v6 == -1 )\n    {\n      result = 12LL;\n    }\n    else\n    {\n      result = 0LL;\n      if ( *(_BYTE *)(a2 + 48) == 12 )\n        *(_DWORD *)(*a1 + 16 * v6 + 8) = ((*(_DWORD *)(a2 + 40) & 0x3FF) << 8) | *(_DWORD *)(*a1 + 16 * v6 + 8) & 0xFFFC00FF;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40fde0L", 
            "funcEndAddr": "0x40fe67L", 
            "funcName": "sub_40FDE0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40FE70(void *ptr)\n{\n  void *v1; // r12\n  __int64 v2; // rdi\n  unsigned __int64 v3; // rbx\n  __int64 v4; // rax\n  unsigned __int64 v5; // rbx\n  __int64 v6; // rax\n  __int64 v7; // rax\n  __int64 v8; // rax\n  unsigned __int64 v9; // r13\n  char *v10; // rdi\n  __int64 v11; // rbx\n  __int64 v12; // rbp\n  void *v13; // rdi\n  void *v14; // rdi\n\n  v1 = ptr;\n  v2 = *(_QWORD *)ptr;\n  if ( v2 && *((_QWORD *)v1 + 2) )\n  {\n    v3 = 0LL;\n    while ( 1 )\n    {\n      v4 = v3++;\n      sub_40BF10(16 * v4 + v2);\n      if ( *((_QWORD *)v1 + 2) <= v3 )\n        break;\n      v2 = *(_QWORD *)v1;\n    }\n  }\n  v5 = 0LL;\n  free(*((void **)v1 + 3));\n  if ( *((_QWORD *)v1 + 2) )\n  {\n    do\n    {\n      v6 = *((_QWORD *)v1 + 6);\n      if ( v6 )\n        free(*(void **)(v6 + 24 * v5 + 16));\n      v7 = *((_QWORD *)v1 + 7);\n      if ( v7 )\n        free(*(void **)(v7 + 24 * v5 + 16));\n      v8 = *((_QWORD *)v1 + 5);\n      if ( v8 )\n        free(*(void **)(v8 + 24 * v5 + 16));\n      ++v5;\n    }\n    while ( *((_QWORD *)v1 + 2) > v5 );\n  }\n  v9 = 0LL;\n  free(*((void **)v1 + 5));\n  free(*((void **)v1 + 6));\n  free(*((void **)v1 + 7));\n  free(*(void **)v1);\n  v10 = (char *)*((_QWORD *)v1 + 8);\n  if ( v10 )\n  {\n    while ( 1 )\n    {\n      v11 = 0LL;\n      v12 = (__int64)&v10[24 * v9];\n      if ( *(_QWORD *)v12 > 0LL )\n      {\n        do\n        {\n          v13 = *(void **)(*(_QWORD *)(v12 + 16) + 8 * v11++);\n          sub_40C460(v13);\n        }\n        while ( v11 < *(_QWORD *)v12 );\n      }\n      ++v9;\n      free(*(void **)(v12 + 16));\n      if ( *((_QWORD *)v1 + 17) < v9 )\n        break;\n      v10 = (char *)*((_QWORD *)v1 + 8);\n    }\n    v10 = (char *)*((_QWORD *)v1 + 8);\n  }\n  free(v10);\n  v14 = (void *)*((_QWORD *)v1 + 15);\n  if ( v14 != &unk_41E560 )\n    free(v14);\n  free(*((void **)v1 + 28));\n  free(v1);\n}\n", 
            "funcStartAddr": "0x40fe70L", 
            "funcEndAddr": "0x40ffecL", 
            "funcName": "sub_40FE70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40FFF0(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // rbp\n\n  if ( *(_QWORD *)a1 > 0LL )\n  {\n    v1 = 0LL;\n    do\n    {\n      v2 = 3 * v1++;\n      v2 *= 16LL;\n      free(*(void **)(*(_QWORD *)(a1 + 16) + v2 + 40));\n      free(*(void **)(*(_QWORD *)(a1 + 16) + v2 + 16));\n    }\n    while ( v1 < *(_QWORD *)a1 );\n  }\n  free(*(void **)(a1 + 16));\n}\n", 
            "funcStartAddr": "0x40fff0L", 
            "funcEndAddr": "0x41003eL", 
            "funcName": "sub_40FFF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410040(__int64 *a1, _QWORD *a2, _QWORD *a3, __int64 a4, void *a5, __int64 a6)\n{\n  bool v6; // sf\n  __int64 v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rbp\n  __int64 v10; // rax\n  __int64 v11; // rbx\n\n  v7 = *a1 - 1;\n  v6 = v7 < 0;\n  *a1 = v7;\n  if ( v6 )\n    __assert_fail(\"num >= 0\", \"lib/regexec.c\", 0x54Fu, \"pop_fail_stack\");\n  v8 = 48 * v7;\n  v9 = a6;\n  v10 = 48 * v7 + *a2;\n  *a3 = *(_QWORD *)v10;\n  memcpy(a5, *(const void **)(v10 + 16), 16 * a4);\n  free(*(void **)(v9 + 16));\n  free(*(void **)(*a2 + v8 + 16));\n  v11 = *a2 + v8;\n  *(__m128i *)v9 = _mm_loadu_si128((const __m128i *)(v11 + 24));\n  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v11 + 40);\n  return *(_QWORD *)(v11 + 8);\n}\n", 
            "funcStartAddr": "0x410040L", 
            "funcEndAddr": "0x4100cbL", 
            "funcName": "sub_410040"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4100D0(__int64 a1, const char *a2)\n{\n  if ( strlen(a2) != 1 )\n    return 3LL;\n  *(_QWORD *)(a1 + (((unsigned __int64)*(unsigned __int8 *)a2 >> 3) & 0x18)) |= 1LL << *a2;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4100d0L", 
            "funcEndAddr": "0x41011cL", 
            "funcName": "sub_4100D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410120(__int64 a1, __int64 a2, void **a3, __int64 *a4, __int64 *a5, const char *a6, __int64 a7)\n{\n  __int64 *v7; // r13\n  const char *v8; // r12\n  __int64 v9; // rbx\n  __int64 v10; // rcx\n  void *v11; // rax\n  const unsigned __int16 **v12; // rax\n  __int64 v13; // rcx\n  const unsigned __int16 *v14; // rdx\n  const unsigned __int16 **v16; // rax\n  __int64 v17; // rcx\n  const unsigned __int16 *v18; // rdx\n  __int64 v19; // r14\n  const unsigned __int16 **v20; // rax\n  __int64 v21; // rcx\n  const unsigned __int16 *v22; // rdx\n  const unsigned __int16 **v23; // rax\n  __int64 v24; // rcx\n  const unsigned __int16 *v25; // rdx\n  const unsigned __int16 **v26; // rax\n  __int64 v27; // rcx\n  const unsigned __int16 *v28; // rdx\n  const unsigned __int16 **v29; // rax\n  __int64 v30; // rcx\n  const unsigned __int16 *v31; // rdx\n  __int64 v32; // rax\n  __int64 v33; // rax\n  __int64 v34; // rax\n  const unsigned __int16 **v35; // rax\n  __int64 v36; // rcx\n  const unsigned __int16 *v37; // rdx\n  const unsigned __int16 **v38; // rax\n  __int64 v39; // rcx\n  const unsigned __int16 *v40; // rax\n  const unsigned __int16 **v41; // rax\n  __int64 v42; // rcx\n  const unsigned __int16 *v43; // rdx\n  __int64 v44; // rax\n  __int64 v45; // rax\n  __int64 v46; // rax\n  const unsigned __int16 **v47; // rax\n  __int64 v48; // rcx\n  const unsigned __int16 *v49; // rsi\n  __int64 i; // rax\n  const unsigned __int16 **v51; // rax\n  __int64 v52; // rcx\n  const unsigned __int16 *v53; // rsi\n  __int64 v54; // rax\n  const unsigned __int16 **v55; // rax\n  __int64 v56; // rcx\n  const unsigned __int16 *v57; // rsi\n  __int64 v58; // rax\n  __int64 v59; // rax\n  __int64 v60; // rax\n  __int64 v61; // rdx\n  void **v62; // [rsp+0h] [rbp-38h]\n  __int64 *v63; // [rsp+8h] [rbp-30h]\n\n  v7 = a4;\n  v8 = a6;\n  v9 = a2;\n  if ( !(a7 & 0x400000) )\n  {\nLABEL_4:\n    v10 = *a4;\n    v11 = *a3;\n    if ( *a5 != *v7 )\n      goto LABEL_5;\n    goto LABEL_21;\n  }\n  if ( !strcmp(a6, \"upper\") )\n  {\n    v8 = \"alpha\";\n    goto LABEL_4;\n  }\n  v10 = *a4;\n  if ( !strcmp(a6, \"lower\") )\n    v8 = \"alpha\";\n  v11 = *a3;\n  if ( *a5 != v10 )\n    goto LABEL_5;\nLABEL_21:\n  v19 = 2 * v10 + 1;\n  v63 = a5;\n  v62 = a3;\n  v11 = realloc(v11, 8 * v19);\n  if ( !v11 )\n    return 12LL;\n  *v62 = v11;\n  *v63 = v19;\n  v10 = *v7;\nLABEL_5:\n  *v7 = v10 + 1;\n  *((_QWORD *)v11 + v10) = wctype(v8);\n  if ( !strcmp(v8, \"alnum\") )\n  {\n    v16 = __ctype_b_loc();\n    v17 = 0LL;\n    v18 = *v16;\n    if ( a1 )\n    {\n      v32 = 0LL;\n      do\n      {\n        if ( v18[v32] & 8 )\n          *(_QWORD *)(a2 + (((unsigned __int64)*(unsigned __int8 *)(a1 + v32) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + v32);\n        ++v32;\n      }\n      while ( v32 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v18[v17] & 8 )\n          *(_QWORD *)(a2 + 8 * (v17 >> 6)) |= 1LL << v17;\n        ++v17;\n      }\n      while ( v17 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"cntrl\") )\n  {\n    v12 = __ctype_b_loc();\n    v13 = 0LL;\n    v14 = *v12;\n    if ( a1 )\n    {\n      v33 = 0LL;\n      do\n      {\n        if ( v14[v33] & 2 )\n          *(_QWORD *)(a2 + (((unsigned __int64)*(unsigned __int8 *)(a1 + v33) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + v33);\n        ++v33;\n      }\n      while ( v33 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v14[v13] & 2 )\n          *(_QWORD *)(a2 + 8 * (v13 >> 6)) |= 1LL << v13;\n        ++v13;\n      }\n      while ( v13 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"lower\") )\n  {\n    v23 = __ctype_b_loc();\n    v24 = 0LL;\n    v25 = *v23;\n    if ( a1 )\n    {\n      v34 = 0LL;\n      do\n      {\n        if ( v25[v34] & 0x200 )\n          *(_QWORD *)(a2 + (((unsigned __int64)*(unsigned __int8 *)(a1 + v34) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + v34);\n        ++v34;\n      }\n      while ( v34 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v25[v24] & 0x200 )\n          *(_QWORD *)(a2 + 8 * (v24 >> 6)) |= 1LL << v24;\n        ++v24;\n      }\n      while ( v24 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"space\") )\n  {\n    v20 = __ctype_b_loc();\n    v21 = 0LL;\n    v22 = *v20;\n    if ( a1 )\n    {\n      v45 = 0LL;\n      do\n      {\n        if ( v22[v45] & 0x2000 )\n          *(_QWORD *)(a2 + (((unsigned __int64)*(unsigned __int8 *)(a1 + v45) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + v45);\n        ++v45;\n      }\n      while ( v45 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v22[v21] & 0x2000 )\n          *(_QWORD *)(a2 + 8 * (v21 >> 6)) |= 1LL << v21;\n        ++v21;\n      }\n      while ( v21 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"alpha\") )\n  {\n    v29 = __ctype_b_loc();\n    v30 = 0LL;\n    v31 = *v29;\n    if ( a1 )\n    {\n      v44 = 0LL;\n      do\n      {\n        if ( v31[v44] & 0x400 )\n          *(_QWORD *)(a2 + (((unsigned __int64)*(unsigned __int8 *)(a1 + v44) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + v44);\n        ++v44;\n      }\n      while ( v44 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v31[v30] & 0x400 )\n          *(_QWORD *)(a2 + 8 * (v30 >> 6)) |= 1LL << v30;\n        ++v30;\n      }\n      while ( v30 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"digit\") )\n  {\n    v26 = __ctype_b_loc();\n    v27 = 0LL;\n    v28 = *v26;\n    if ( a1 )\n    {\n      v46 = 0LL;\n      do\n      {\n        if ( v28[v46] & 0x800 )\n          *(_QWORD *)(a2 + (((unsigned __int64)*(unsigned __int8 *)(a1 + v46) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + v46);\n        ++v46;\n      }\n      while ( v46 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v28[v27] & 0x800 )\n          *(_QWORD *)(a2 + 8 * (v27 >> 6)) |= 1LL << v27;\n        ++v27;\n      }\n      while ( v27 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"print\") )\n  {\n    v35 = __ctype_b_loc();\n    v36 = 0LL;\n    v37 = *v35;\n    if ( a1 )\n    {\n      v59 = 0LL;\n      do\n      {\n        if ( v37[v59] & 0x4000 )\n          *(_QWORD *)(a2 + (((unsigned __int64)*(unsigned __int8 *)(a1 + v59) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + v59);\n        ++v59;\n      }\n      while ( v59 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v37[v36] & 0x4000 )\n          *(_QWORD *)(a2 + 8 * (v36 >> 6)) |= 1LL << v36;\n        ++v36;\n      }\n      while ( v36 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"upper\") )\n  {\n    v38 = __ctype_b_loc();\n    v39 = 0LL;\n    v40 = *v38;\n    if ( a1 )\n    {\n      v61 = 0LL;\n      do\n      {\n        if ( v40[v61] & 0x100 )\n          *(_QWORD *)(a2 + (((unsigned __int64)*(unsigned __int8 *)(a1 + v61) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + v61);\n        ++v61;\n      }\n      while ( v61 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v40[v39] & 0x100 )\n          *(_QWORD *)(a2 + 8 * (v39 >> 6)) |= 1LL << v39;\n        ++v39;\n      }\n      while ( v39 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"blank\") )\n  {\n    v41 = __ctype_b_loc();\n    v42 = 0LL;\n    v43 = *v41;\n    if ( a1 )\n    {\n      v60 = 0LL;\n      do\n      {\n        if ( v43[v60] & 1 )\n          *(_QWORD *)(a2 + (((unsigned __int64)*(unsigned __int8 *)(a1 + v60) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + v60);\n        ++v60;\n      }\n      while ( v60 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v43[v42] & 1 )\n          *(_QWORD *)(a2 + 8 * (v42 >> 6)) |= 1LL << v42;\n        ++v42;\n      }\n      while ( v42 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"graph\") )\n  {\n    v47 = __ctype_b_loc();\n    v48 = 0LL;\n    v49 = *v47;\n    if ( a1 )\n    {\n      for ( i = 0LL; i != 256; ++i )\n      {\n        if ( (v49[i] & 0x8000u) != 0 )\n          *(_QWORD *)(v9 + (((unsigned __int64)*(unsigned __int8 *)(a1 + i) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + i);\n      }\n    }\n    else\n    {\n      do\n      {\n        if ( (v49[v48] & 0x8000u) != 0 )\n          *(_QWORD *)(v9 + 8 * (v48 >> 6)) |= 1LL << v48;\n        ++v48;\n      }\n      while ( v48 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, \"punct\") )\n  {\n    v51 = __ctype_b_loc();\n    v52 = 0LL;\n    v53 = *v51;\n    if ( a1 )\n    {\n      v54 = 0LL;\n      do\n      {\n        if ( v53[v54] & 4 )\n          *(_QWORD *)(v9 + (((unsigned __int64)*(unsigned __int8 *)(a1 + v54) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + v54);\n        ++v54;\n      }\n      while ( v54 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v53[v52] & 4 )\n          *(_QWORD *)(v9 + 8 * (v52 >> 6)) |= 1LL << v52;\n        ++v52;\n      }\n      while ( v52 != 256 );\n    }\n    return 0LL;\n  }\n  if ( !strcmp(v8, asc_41DB8D) )\n  {\n    v55 = __ctype_b_loc();\n    v56 = 0LL;\n    v57 = *v55;\n    if ( a1 )\n    {\n      v58 = 0LL;\n      do\n      {\n        if ( v57[v58] & 0x1000 )\n          *(_QWORD *)(v9 + (((unsigned __int64)*(unsigned __int8 *)(a1 + v58) >> 3) & 0x18)) |= 1LL << *(_BYTE *)(a1 + v58);\n        ++v58;\n      }\n      while ( v58 != 256 );\n    }\n    else\n    {\n      do\n      {\n        if ( v57[v56] & 0x1000 )\n          *(_QWORD *)(v9 + 8 * (v56 >> 6)) |= 1LL << v56;\n        ++v56;\n      }\n      while ( v56 != 256 );\n    }\n    return 0LL;\n  }\n  return 4LL;\n}\n", 
            "funcStartAddr": "0x410120L", 
            "funcEndAddr": "0x4108e6L", 
            "funcName": "sub_410120"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4108F0(__int64 a1, __int64 a2, const char *a3, char *a4, char a5, _DWORD *a6)\n{\n  const char *v6; // r14\n  char *v7; // r13\n  char v8; // r12\n  char *v9; // rax\n  char *v10; // rbx\n  char *v11; // rax\n  char *v12; // r15\n  int v13; // eax\n  __int64 i; // rcx\n  __int64 v15; // rax\n  __int64 v16; // rdx\n  char *v17; // rax\n  __int64 v18; // rcx\n  __int64 j; // rax\n  char *v20; // r14\n  char *v21; // rax\n  int v23; // [rsp+0h] [rbp-78h]\n  _DWORD *v24; // [rsp+8h] [rbp-70h]\n  __int64 v25; // [rsp+18h] [rbp-60h]\n  char *v26; // [rsp+20h] [rbp-58h]\n  char v27; // [rsp+28h] [rbp-50h]\n  char v28; // [rsp+30h] [rbp-48h]\n  char v29; // [rsp+38h] [rbp-40h]\n\n  v6 = a3;\n  v7 = a4;\n  v8 = a5;\n  v24 = a6;\n  v25 = 0LL;\n  v9 = (char *)calloc(0x20uLL, 1uLL);\n  if ( !v9 )\n    goto LABEL_20;\n  v10 = v9;\n  v11 = (char *)calloc(0x50uLL, 1uLL);\n  v12 = v11;\n  if ( !v11 )\n  {\n    v20 = 0LL;\n    free(v10);\n    *v24 = 12;\n    return v20;\n  }\n  v11[32] = v8 & 1 | v11[32] & 0xFE;\n  v13 = sub_410120(a2, (__int64)v10, (void **)v11 + 3, (__int64 *)v11 + 9, &v25, v6, 0LL);\n  if ( v13 )\n  {\n    v23 = v13;\n    v20 = 0LL;\n    free(v10);\n    sub_40BEF0(v12);\n    *v24 = v23;\n    return v20;\n  }\n  for ( i = *v7; (_BYTE)i; *(_QWORD *)&v10[8 * (v15 >> 6)] |= v16 )\n  {\n    v15 = i + 63;\n    if ( i >= 0 )\n      v15 = i;\n    ++v7;\n    v16 = 1LL << (i % 64);\n    i = *v7;\n  }\n  if ( v8 )\n  {\n    v17 = v10;\n    do\n    {\n      *(_QWORD *)v17 = ~*(_QWORD *)v17;\n      v17 += 8;\n    }\n    while ( v10 + 32 != v17 );\n  }\n  if ( *(_DWORD *)(a1 + 180) > 1 )\n  {\n    v18 = *(_QWORD *)(a1 + 120);\n    for ( j = 0LL; j != 32; j += 8LL )\n      *(_QWORD *)&v10[j] &= *(_QWORD *)(v18 + j);\n  }\n  v27 = 3;\n  v26 = v10;\n  v20 = sub_40D500((_QWORD *)(a1 + 112), (int *)(a1 + 128), 0LL, 0LL, (const __m128i *)&v26);\n  if ( !v20 )\n    goto LABEL_26;\n  if ( *(_DWORD *)(a1 + 180) <= 1 )\n  {\n    sub_40BEF0(v12);\n    return v20;\n  }\n  *(_BYTE *)(a1 + 176) |= 2u;\n  v27 = 6;\n  v26 = v12;\n  v21 = sub_40D500((_QWORD *)(a1 + 112), (int *)(a1 + 128), 0LL, 0LL, (const __m128i *)&v26);\n  if ( !v21 )\n  {\nLABEL_26:\n    free(v10);\n    sub_40BEF0(v12);\nLABEL_20:\n    v20 = 0LL;\n    *v24 = 12;\n    return v20;\n  }\n  v29 = 10;\n  return sub_40D500((_QWORD *)(a1 + 112), (int *)(a1 + 128), v20, v21, (const __m128i *)&v28);\n}\n", 
            "funcStartAddr": "0x4108f0L", 
            "funcEndAddr": "0x410b25L", 
            "funcName": "sub_4108F0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_410B30(__int64 a1, _QWORD *a2, _QWORD *a3, __m128i *a4)\n{\n  __int64 v4; // r12\n  _QWORD *result; // rax\n  __int64 v6; // rbx\n  __m128i *v7; // r15\n  __int64 v8; // r14\n  __int64 v9; // rcx\n  unsigned __int8 *v10; // rsi\n  __int64 v11; // rdx\n  __int64 v12; // rax\n  unsigned __int64 v13; // rdx\n  __int64 v14; // rax\n  char *v15; // rsi\n  size_t v16; // r13\n  wchar_t v17; // eax\n  __int64 v18; // r13\n  __int64 i; // r14\n  __int64 v20; // rdx\n  wchar_t v21; // eax\n  unsigned __int64 v22; // r14\n  __int64 v23; // rbp\n  __int64 v24; // r13\n  _BYTE *v25; // rax\n  __m128i v26; // xmm0\n  __m128i v27; // xmm0\n  _QWORD *v28; // [rsp+0h] [rbp-178h]\n  __int64 v29; // [rsp+8h] [rbp-170h]\n  __int64 v30; // [rsp+10h] [rbp-168h]\n  _QWORD *v31; // [rsp+20h] [rbp-158h]\n  _QWORD *v32; // [rsp+28h] [rbp-150h]\n  wint_t wc; // [rsp+34h] [rbp-144h]\n  mbstate_t ps; // [rsp+38h] [rbp-140h]\n  mbstate_t s; // [rsp+40h] [rbp-138h]\n\n  LODWORD(v4) = 0;\n  result = *(_QWORD **)a1;\n  v28 = *(_QWORD **)a1;\n  if ( *(_DWORD *)(*(_QWORD *)a1 + 180LL) == 1 )\n    v4 = (*(_QWORD *)(a1 + 24) >> 22) & 1LL;\n  v6 = 0LL;\n  if ( *a2 <= 0LL )\n    return result;\n  v7 = a4;\n  v31 = a3;\n  v32 = a2;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v8 = *(_QWORD *)(*v31 + 8 * v6);\n      v9 = *v28;\n      v10 = (unsigned __int8 *)(*v28 + 16LL * *(_QWORD *)(*v31 + 8 * v6));\n      v30 = 16LL * *(_QWORD *)(*v31 + 8 * v6);\n      result = (_QWORD *)v10[8];\n      if ( (_DWORD)result != 1 )\n        break;\n      v11 = *v10;\n      *((_BYTE *)v7->m128i_i64 + v11) = 1;\n      if ( (_DWORD)v4 )\n        *((_BYTE *)v7->m128i_i64 + (*__ctype_tolower_loc())[v11]) = 1;\n      if ( !(*(_BYTE *)(a1 + 26) & 0x40) || *((_DWORD *)v28 + 45) <= 1 )\n        goto LABEL_9;\n      v12 = *v28;\n      LOBYTE(s.__count) = *(_BYTE *)(*v28 + v30);\n      v13 = v8 + 1;\n      if ( v28[2] <= (unsigned __int64)(v8 + 1) || (v14 = v12 + v30 + 16, (*(_DWORD *)(v14 + 8) & 0x2000FF) != 2097153) )\n      {\n        v16 = 1LL;\n      }\n      else\n      {\n        v15 = (char *)&s + 1;\n        do\n        {\n          ++v15;\n          ++v13;\n          *(v15 - 1) = *(_BYTE *)v14;\n          if ( v28[2] <= v13 )\n            break;\n          v14 = *v28 + 16 * v13;\n        }\n        while ( (*(_DWORD *)(v14 + 8) & 0x2000FF) == 2097153 );\n        v16 = v15 - (char *)&s;\n      }\n      ps = 0LL;\n      if ( sub_40AB50((wchar_t *)&wc, (char *)&s, v16, &ps) != v16 )\n        goto LABEL_9;\n      v17 = towlower(wc);\n      if ( wcrtomb((char *)&s, v17, &ps) == -1LL )\n        goto LABEL_9;\n      ++v6;\n      *((_BYTE *)v7->m128i_i64 + LOBYTE(s.__count)) = 1;\n      result = v32;\n      if ( v6 >= *v32 )\n        return result;\n    }\n    if ( (_DWORD)result == 3 )\n    {\n      v29 = 0LL;\n      while ( 1 )\n      {\n        v22 = 0LL;\n        v23 = *(_QWORD *)(*(_QWORD *)(v9 + v30) + v29);\n        v24 = 8 * v29;\n        do\n        {\n          if ( _bittest64(&v23, v22) )\n          {\n            v25 = (char *)v7->m128i_i64 + v24;\n            *((_BYTE *)v7->m128i_i64 + v24) = 1;\n            if ( (_DWORD)v4 )\n            {\n              if ( (unsigned int)(v24 + 128) <= 0x17F )\n                v25 = (char *)v7->m128i_i64 + (*__ctype_tolower_loc())[v24];\n              *v25 = 1;\n            }\n          }\n          v22 = (unsigned int)(v22 + 1);\n          ++v24;\n        }\n        while ( (_DWORD)v22 != 64 );\n        v29 += 8LL;\n        if ( v29 == 32 )\n          break;\n        v9 = *v28;\n      }\n      goto LABEL_9;\n    }\n    if ( (_DWORD)result == 6 )\n    {\n      v18 = *(_QWORD *)v10;\n      if ( *((_DWORD *)v28 + 45) > 1 && (*(_QWORD *)(v18 + 72) || *(_BYTE *)(v18 + 32) & 1 || *(_QWORD *)(v18 + 64)) )\n      {\n        LOBYTE(ps.__count) = 0;\n        do\n        {\n          s = 0LL;\n          if ( sub_40AB50(0LL, (char *)&ps, 1uLL, &s) == -2LL )\n            *((_BYTE *)v7->m128i_i64 + LOBYTE(ps.__count)) = 1;\n          ++LOBYTE(ps.__count);\n        }\n        while ( LOBYTE(ps.__count) );\n      }\n      else\n      {\n        for ( i = 0LL; i < *(_QWORD *)(v18 + 40); ++i )\n        {\n          ps = 0LL;\n          if ( wcrtomb((char *)&s, *(_DWORD *)(*(_QWORD *)v18 + 4 * i), &ps) != -1LL )\n          {\n            v20 = LOBYTE(s.__count);\n            *((_BYTE *)v7->m128i_i64 + LOBYTE(s.__count)) = 1;\n            if ( (_DWORD)v4 )\n              *((_BYTE *)v7->m128i_i64 + (*__ctype_tolower_loc())[v20]) = 1;\n          }\n          if ( *(_BYTE *)(a1 + 26) & 0x40 )\n          {\n            if ( *((_DWORD *)v28 + 45) > 1 )\n            {\n              v21 = towlower(*(_DWORD *)(*(_QWORD *)v18 + 4 * i));\n              if ( wcrtomb((char *)&s, v21, &ps) != -1LL )\n                *((_BYTE *)v7->m128i_i64 + LOBYTE(s.__count)) = 1;\n            }\n          }\n        }\n      }\n      goto LABEL_9;\n    }\n    if ( (v10[8] & 0xFD) == 5 )\n      break;\n    if ( (_DWORD)result == 2 )\n    {\n      v27 = _mm_load_si128((const __m128i *)&xmmword_41E7A0);\n      *v7 = v27;\n      v7[1] = v27;\n      v7[2] = v27;\n      v7[3] = v27;\n      v7[4] = v27;\n      v7[5] = v27;\n      v7[6] = v27;\n      v7[7] = v27;\n      v7[8] = v27;\n      v7[9] = v27;\n      v7[10] = v27;\n      v7[11] = v27;\n      v7[12] = v27;\n      v7[13] = v27;\n      v7[14] = v27;\n      v7[15] = v27;\n      goto LABEL_57;\n    }\nLABEL_9:\n    result = v32;\n    if ( ++v6 >= *v32 )\n      return result;\n  }\n  v26 = _mm_load_si128((const __m128i *)&xmmword_41E7A0);\n  *v7 = v26;\n  v7[1] = v26;\n  v7[2] = v26;\n  v7[3] = v26;\n  v7[4] = v26;\n  v7[5] = v26;\n  v7[6] = v26;\n  v7[7] = v26;\n  v7[8] = v26;\n  v7[9] = v26;\n  v7[10] = v26;\n  v7[11] = v26;\n  v7[12] = v26;\n  v7[13] = v26;\n  v7[14] = v26;\n  v7[15] = v26;\n  if ( (_DWORD)result != 2 )\n    return result;\nLABEL_57:\n  result = (_QWORD *)a1;\n  *(_BYTE *)(a1 + 56) |= 1u;\n  return result;\n}\n", 
            "funcStartAddr": "0x410b30L", 
            "funcEndAddr": "0x411008L", 
            "funcName": "sub_410B30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411010(__int64 a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  int v5; // eax\n  __int64 v6; // r8\n  __int64 v7; // r9\n  __int64 *v8; // r10\n  char v9; // r11\n  unsigned int v10; // ebp\n  __int64 v12; // r13\n  __int64 v13; // rsi\n  __int64 v14; // rdx\n  signed int v15; // er12\n  __int64 v16; // rax\n  __int64 v17; // rbx\n  __int64 v18; // rax\n  unsigned __int8 v19; // dl\n  __int64 v20; // rcx\n  unsigned __int8 v21; // di\n  __int64 v22; // rdi\n  _BYTE *v23; // rdx\n  _BYTE *v24; // rax\n  __int64 v25; // rax\n\n  if ( *(_BYTE *)(a1 + 16 * a3 + 8) == 7 )\n  {\n    v18 = *(_QWORD *)(a4 + 8);\n    v19 = *(_BYTE *)(v18 + a5);\n    if ( v19 <= 0xC1u )\n      return 0;\n    v20 = *(_QWORD *)(a4 + 88);\n    if ( a5 + 1 >= v20 )\n      return 0;\n    v21 = *(_BYTE *)(v18 + a5 + 1);\n    if ( v19 <= 0xDFu )\n    {\n      v10 = 2;\n      if ( (unsigned __int8)(v21 + -128) <= 0x3Fu )\n        return v10;\n      return 0;\n    }\n    if ( v19 > 0xEFu )\n    {\n      if ( v19 > 0xF7u )\n      {\n        if ( v19 > 0xFBu )\n        {\n          if ( v19 > 0xFDu || v19 == -4 && v21 <= 0x83u )\n            return 0;\n          v22 = 6LL;\n          v10 = 6;\n        }\n        else\n        {\n          if ( v19 == -8 && v21 <= 0x87u )\n            return 0;\n          v22 = 5LL;\n          v10 = 5;\n        }\n      }\n      else\n      {\n        if ( v19 == -16 && v21 <= 0x8Fu )\n          return 0;\n        v22 = 4LL;\n        v10 = 4;\n      }\n    }\n    else\n    {\n      if ( v19 == -32 && v21 <= 0x9Fu )\n        return 0;\n      v22 = 3LL;\n      v10 = 3;\n    }\n    if ( v20 >= a5 + v22 )\n    {\n      v23 = (_BYTE *)(v18 + a5 + 1);\n      v24 = (_BYTE *)(v22 + a5 + v18);\n      while ( (unsigned __int8)(*v23 + -128) <= 0x3Fu )\n      {\n        if ( v24 == ++v23 )\n          return v10;\n      }\n    }\n    return 0;\n  }\n  if ( *(_DWORD *)(a4 + 144) == 1 )\n    return 0;\n  v5 = sub_40C840(a4, a5);\n  v10 = v5;\n  if ( v9 != 5 )\n  {\n    if ( v9 != 6 || v5 <= 1 )\n      return 0;\n    v12 = *v8;\n    v13 = *(_QWORD *)(*v8 + 64);\n    v14 = *(_QWORD *)(*v8 + 40);\n    if ( v13 || *(_QWORD *)(v12 + 72) | v14 )\n    {\n      v15 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 4 * v6);\n      if ( v14 > 0 )\n      {\n        if ( v15 == **(_DWORD **)v12 )\n          goto LABEL_25;\n        v16 = 0LL;\n        while ( v14 != ++v16 )\n        {\n          if ( v15 == *(_DWORD *)(*(_QWORD *)v12 + 4 * v16) )\n            goto LABEL_25;\n        }\n      }\n      if ( *(_QWORD *)(v12 + 72) > 0LL )\n      {\n        v17 = 0LL;\n        while ( !iswctype(v15, *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * v17)) )\n        {\n          if ( ++v17 >= *(_QWORD *)(v12 + 72) )\n          {\n            v13 = *(_QWORD *)(v12 + 64);\n            goto LABEL_40;\n          }\n        }\nLABEL_25:\n        if ( !(*(_BYTE *)(v12 + 32) & 1) )\n          return v10;\n        return 0;\n      }\nLABEL_40:\n      if ( v13 > 0 )\n      {\n        v25 = 0LL;\n        while ( v15 < *(_DWORD *)(*(_QWORD *)(v12 + 8) + 4 * v25) || v15 > *(_DWORD *)(*(_QWORD *)(v12 + 16) + 4 * v25) )\n        {\n          if ( ++v25 == v13 )\n            goto LABEL_45;\n        }\n        goto LABEL_25;\n      }\n    }\nLABEL_45:\n    if ( *(_BYTE *)(v12 + 32) & 1 )\n      return v10;\n    return 0;\n  }\n  if ( v5 <= 1\n    || !(*a2 & 0x40) && *(_BYTE *)(*(_QWORD *)(v7 + 8) + v6) == 10\n    || (*a2 & 0x80u) != 0LL && !*(_BYTE *)(*(_QWORD *)(v7 + 8) + v6) )\n  {\n    return 0;\n  }\n  return v10;\n}\n", 
            "funcStartAddr": "0x411010L", 
            "funcEndAddr": "0x411294L", 
            "funcName": "sub_411010"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4112A0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned int a7)\n{\n  __int64 v7; // r13\n  __int64 v8; // r12\n  __int64 v9; // rbp\n  __int64 v10; // r15\n  __int64 v11; // rax\n  __int64 v12; // rax\n  int v13; // edx\n  __int64 v14; // rbx\n  __int64 v15; // r14\n  __int64 v16; // rcx\n  __int64 *v17; // r15\n  __int64 v18; // rax\n  __int64 v19; // r14\n  __int64 v20; // rsi\n  bool v21; // cc\n  __int64 *v22; // rbp\n  __int64 v23; // r14\n  __int64 v24; // rax\n  __int64 v25; // r13\n  __int64 v26; // rbx\n  __int64 v27; // rsi\n  int v28; // eax\n  __int64 v29; // rbx\n  __int64 v30; // rdx\n  __int64 v31; // rsi\n  unsigned int v32; // eax\n  _QWORD *v33; // r13\n  unsigned int v34; // eax\n  __int64 v35; // rax\n  __int64 result; // rax\n  void *v37; // rdi\n  _QWORD *v38; // rax\n  __int64 v39; // rbx\n  __int64 v40; // r14\n  char *v41; // rax\n  unsigned int v42; // [rsp+0h] [rbp-F8h]\n  __int64 v43; // [rsp+0h] [rbp-F8h]\n  __int64 v44; // [rsp+8h] [rbp-F0h]\n  __int64 v45; // [rsp+10h] [rbp-E8h]\n  __int64 v46; // [rsp+18h] [rbp-E0h]\n  _QWORD *v47; // [rsp+20h] [rbp-D8h]\n  __int64 v48; // [rsp+30h] [rbp-C8h]\n  __int64 v49; // [rsp+38h] [rbp-C0h]\n  __int64 v50; // [rsp+40h] [rbp-B8h]\n  __int64 v51; // [rsp+48h] [rbp-B0h]\n  __int64 *v52; // [rsp+50h] [rbp-A8h]\n  __int64 v53; // [rsp+58h] [rbp-A0h]\n  __int64 v54; // [rsp+60h] [rbp-98h]\n  __int64 v55; // [rsp+68h] [rbp-90h]\n  unsigned int v56; // [rsp+78h] [rbp-80h]\n  unsigned int v57; // [rsp+7Ch] [rbp-7Ch]\n  __int128 v58; // [rsp+80h] [rbp-78h]\n  void *v59; // [rsp+90h] [rbp-68h]\n  __int128 v60; // [rsp+A0h] [rbp-58h]\n  void *ptr; // [rsp+B0h] [rbp-48h]\n\n  v7 = a3;\n  v8 = a1;\n  v9 = a4;\n  v10 = *(_QWORD *)(a2 + 8);\n  v52 = (__int64 *)a2;\n  v55 = a5;\n  v48 = a6;\n  v47 = *(_QWORD **)(a1 + 152);\n  v49 = *(_QWORD *)(**(_QWORD **)(a1 + 152) + 16 * a3);\n  v11 = *(int *)(a1 + 224);\n  v56 = 0;\n  v12 = a6 + v11;\n  if ( v12 >= v10 )\n  {\n    v39 = v12 + 1;\n    if ( 0x7FFFFFFFFFFFFFFFLL - v10 < v12 + 1 )\n      return 12LL;\n    v40 = v10 + v39;\n    if ( (unsigned __int64)(v10 + v39) > 0x1FFFFFFFFFFFFFFFLL )\n      return 12LL;\n    v41 = (char *)realloc(*(void **)(a2 + 16), 8 * v40);\n    if ( !v41 )\n      return 12LL;\n    *(_QWORD *)(a2 + 16) = v41;\n    *(_QWORD *)(a2 + 8) = v40;\n    memset(&v41[8 * v10], 0, 8 * v39);\n  }\n  v13 = *(_DWORD *)(a1 + 160);\n  v14 = *(_QWORD *)a2;\n  v15 = *(_QWORD *)(a2 + 16);\n  v53 = *(_QWORD *)(a1 + 184);\n  v16 = *(_QWORD *)(a1 + 72);\n  *(_QWORD *)(a1 + 184) = v15;\n  v54 = v16;\n  if ( v14 )\n  {\n    *(_QWORD *)(a1 + 72) = v14;\n    v42 = sub_40E5C0(a1, v14 - 1, v13);\n    if ( v14 != v9 )\n    {\n      v17 = *(__int64 **)(v15 + 8 * v14);\n      if ( !v17 || !(v17[13] & 0x40) )\n      {\n        v59 = 0LL;\n        v58 = 0LL;\n        goto LABEL_7;\n      }\n      result = sub_40D930((__int64)&v58, (__int64)(v17 + 1));\n      v56 = result;\n      if ( (_DWORD)result )\n        return result;\n      if ( !(v17[13] & 0x40) )\n        goto LABEL_7;\n      goto LABEL_45;\n    }\n  }\n  else\n  {\n    *(_QWORD *)(a1 + 72) = v9;\n    v42 = sub_40E5C0(a1, v9 - 1, v13);\n  }\n  *(_QWORD *)&v58 = 1LL;\n  *((_QWORD *)&v58 + 1) = 1LL;\n  v38 = malloc(8uLL);\n  v59 = v38;\n  if ( !v38 )\n    return 12LL;\n  *v38 = v7;\n  v14 = v9;\n  v56 = sub_40D200(v47, (__int64)&v58, v49, a7);\n  if ( v56 )\n  {\nLABEL_41:\n    free(v59);\n    return v56;\n  }\nLABEL_45:\n  if ( *((_QWORD *)&v58 + 1) )\n  {\n    v56 = sub_40E0E0((_QWORD *)a1, (__int64)&v58, v14, v49, a7);\n    if ( v56 )\n      goto LABEL_41;\n  }\n  v17 = sub_40DB40(&v56, v47, (__int64)&v58, v42);\n  if ( !v17 )\n  {\n    if ( v56 )\n      goto LABEL_41;\n  }\n  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v14) = v17;\nLABEL_7:\n  if ( v14 < v48 && *(_DWORD *)(a1 + 224) >= 0 )\n  {\n    v45 = 0LL;\n    v18 = *(_QWORD *)(a1 + 184);\n    v19 = v14 + 1;\n    while ( 1 )\n    {\n      v20 = *(_QWORD *)(v18 + 8 * v19);\n      *((_QWORD *)&v58 + 1) = 0LL;\n      v43 = v19 - 1;\n      v46 = 8 * v19;\n      if ( v20 )\n      {\n        v56 = sub_40CDD0((__int64)&v58, v20 + 8);\n        if ( v56 )\n          goto LABEL_41;\n        if ( !v17 )\n          goto LABEL_27;\n      }\n      else if ( !v17 )\n      {\n        v14 = v19;\n        goto LABEL_30;\n      }\n      v21 = v17[5] <= 0;\n      v22 = *(__int64 **)(v8 + 152);\n      v57 = 0;\n      v60 = 0LL;\n      ptr = 0LL;\n      if ( !v21 )\n      {\n        v51 = v19;\n        v23 = 0LL;\n        while ( 1 )\n        {\n          v24 = v17[6];\n          v25 = *(_QWORD *)(v24 + 8 * v23);\n          v26 = 16LL * *(_QWORD *)(v24 + 8 * v23);\n          v27 = *v22 + v26;\n          if ( *(_BYTE *)(v27 + 10) & 0x10 )\n          {\n            v28 = sub_411010(*v22, v22 + 27, *(_QWORD *)(v24 + 8 * v23), v8, v43);\n            if ( v28 > 1 )\n            {\n              v44 = 8 * v25;\n              v29 = v28 + v43;\n              v30 = *(_QWORD *)(v22[3] + 8 * v25);\n              v31 = *(_QWORD *)(*(_QWORD *)(v8 + 184) + 8 * v29);\n              *((_QWORD *)&v60 + 1) = 0LL;\n              if ( v31 )\n              {\n                v50 = v30;\n                v32 = sub_40CDD0((__int64)&v60, v31 + 8);\n                v30 = v50;\n                v57 = v32;\n                if ( v32 )\n                  goto LABEL_68;\n              }\n              if ( !(unsigned __int8)sub_40B280(&v60, v30) )\n              {\nLABEL_40:\n                free(ptr);\n                v56 = 12;\n                goto LABEL_41;\n              }\n              v33 = (_QWORD *)(*(_QWORD *)(v8 + 184) + 8 * v29);\n              *v33 = sub_40DE40(&v57, v22, (__int64)&v60);\n              if ( !*(_QWORD *)(*(_QWORD *)(v8 + 184) + 8 * v29) )\n              {\n                if ( v57 )\n                {\nLABEL_68:\n                  v19 = v51;\n                  free(ptr);\n                  v56 = v57;\n                  if ( v57 )\n                    goto LABEL_41;\n                  goto LABEL_27;\n                }\n              }\n              goto LABEL_17;\n            }\n            if ( v28 )\n            {\nLABEL_16:\n              v44 = 8 * v25;\nLABEL_17:\n              if ( !(unsigned __int8)sub_40B280(&v58, *(_QWORD *)(v22[3] + v44)) )\n                goto LABEL_40;\n              goto LABEL_18;\n            }\n            v27 = *v22 + v26;\n          }\n          if ( (unsigned __int8)sub_40E6B0(v8, v27, v43) )\n            goto LABEL_16;\nLABEL_18:\n          if ( ++v23 >= v17[5] )\n          {\n            v19 = v51;\n            v37 = ptr;\n            goto LABEL_50;\n          }\n        }\n      }\n      v37 = 0LL;\nLABEL_50:\n      free(v37);\n      v56 = 0;\nLABEL_27:\n      v14 = v19;\n      if ( *((_QWORD *)&v58 + 1) )\n      {\n        v56 = sub_40D200(v47, (__int64)&v58, v49, a7);\n        if ( v56 )\n          goto LABEL_41;\n        v56 = sub_40E0E0((_QWORD *)v8, (__int64)&v58, v19, v49, a7);\n        if ( v56 )\n          goto LABEL_41;\n      }\nLABEL_30:\n      v34 = sub_40E5C0(v8, v43, *(_DWORD *)(v8 + 160));\n      v17 = sub_40DB40(&v56, v47, (__int64)&v58, v34);\n      if ( v17 )\n      {\n        v18 = *(_QWORD *)(v8 + 184);\n        v45 = 0LL;\n        *(_QWORD *)(v18 + v46) = v17;\n      }\n      else\n      {\n        if ( v56 )\n          goto LABEL_41;\n        v18 = *(_QWORD *)(v8 + 184);\n        ++v45;\n        *(_QWORD *)(v18 + v46) = 0LL;\n      }\n      if ( v48 > v19 )\n      {\n        ++v19;\n        if ( *(int *)(v8 + 224) >= v45 )\n          continue;\n      }\n      break;\n    }\n  }\n  free(v59);\n  v35 = *(_QWORD *)(*(_QWORD *)(v8 + 184) + 8 * v48);\n  *v52 = v14;\n  *(_QWORD *)(v8 + 184) = v53;\n  *(_QWORD *)(v8 + 72) = v54;\n  if ( v35 )\n    result = sub_40C890(*(_QWORD *)(v35 + 16), (__int64 *)(v35 + 24), v55) == 0;\n  else\n    result = 1LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4112a0L", 
            "funcEndAddr": "0x4119bfL", 
            "funcName": "sub_4112A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4119C0(_QWORD *a1, _QWORD *a2, __int64 a3, __int64 *a4, char a5)\n{\n  __int64 *v5; // r13\n  _QWORD *v6; // r12\n  _QWORD *v7; // rax\n  __int64 v8; // rbx\n  void *v9; // rsp\n  __int64 v10; // rcx\n  __int64 *v11; // r14\n  __int64 v12; // rdi\n  __int64 v13; // rsi\n  char v14; // al\n  __int64 v15; // rcx\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  __int64 v18; // rax\n  __int64 v19; // r15\n  __int64 v20; // r9\n  __int64 v21; // rsi\n  int v22; // edx\n  __int64 v23; // rdx\n  __int64 *v24; // rdx\n  __int64 v25; // rax\n  __int64 v26; // r15\n  __int64 v27; // r11\n  __int64 v28; // rax\n  __int64 v29; // r15\n  __int64 v30; // r9\n  __int64 v31; // r12\n  __int64 v32; // rbx\n  __int64 *v33; // r11\n  __int64 v34; // r14\n  __int64 v35; // r9\n  __int64 v36; // r10\n  __int64 v37; // rax\n  __int64 v38; // rdi\n  __int64 result; // rax\n  __int64 v40; // rdx\n  __int64 v41; // rdx\n  __int64 *v42; // rax\n  int v43; // eax\n  size_t v44; // rcx\n  __int64 *v45; // rax\n  __int64 v46; // rdi\n  __int64 v47; // rax\n  __int64 v48; // r15\n  int v49; // eax\n  __int64 v50; // rdx\n  __int64 v51; // rcx\n  __int64 v52; // r15\n  __int64 v53; // rdx\n  __int64 v54; // rax\n  char *v55; // rax\n  __int64 *v56; // r15\n  size_t v57; // r14\n  void *v58; // rax\n  __int64 *v59; // rax\n  __int64 v60; // rdx\n  __int64 v61; // rax\n  __int64 v62; // rax\n  __int64 v63; // rcx\n  __int64 v64; // [rsp+8h] [rbp-C8h]\n  __int64 v65; // [rsp+8h] [rbp-C8h]\n  __int64 v66; // [rsp+8h] [rbp-C8h]\n  char v67; // [rsp+17h] [rbp-B9h]\n  __int64 *v68; // [rsp+18h] [rbp-B8h]\n  void *dest; // [rsp+20h] [rbp-B0h]\n  size_t n; // [rsp+28h] [rbp-A8h]\n  _QWORD *v71; // [rsp+30h] [rbp-A0h]\n  __int64 v72; // [rsp+38h] [rbp-98h]\n  _QWORD *v73; // [rsp+40h] [rbp-90h]\n  __int64 *v74; // [rsp+48h] [rbp-88h]\n  __int64 v75; // [rsp+58h] [rbp-78h]\n  __int128 v76; // [rsp+60h] [rbp-70h]\n  void *ptr; // [rsp+70h] [rbp-60h]\n  __int64 v78; // [rsp+80h] [rbp-50h]\n  __int64 v79; // [rsp+88h] [rbp-48h]\n  void *v80; // [rsp+90h] [rbp-40h]\n\n  v5 = a4;\n  v6 = a2;\n  v7 = (_QWORD *)*a1;\n  v72 = a3;\n  v78 = 0LL;\n  v73 = v7;\n  v79 = 2LL;\n  v80 = 0LL;\n  if ( a5 )\n  {\n    v74 = &v78;\n    v80 = malloc(0x60uLL);\n    if ( !v80 )\n      return 12LL;\n  }\n  else\n  {\n    v74 = 0LL;\n  }\n  ptr = 0LL;\n  v76 = 0LL;\n  v8 = v73[18];\n  n = 16 * v72;\n  if ( (unsigned __int64)(16 * v72) <= 0xFBF )\n  {\n    v67 = 0;\n    v9 = alloca(16 * v72 + 16);\n    dest = (void *)(((unsigned __int64)&v64 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    goto LABEL_5;\n  }\n  v67 = 1;\n  dest = malloc(n);\n  if ( !dest )\n  {\n    if ( v74 )\n      sub_40FFF0((__int64)v74);\n    return 12LL;\n  }\nLABEL_5:\n  memcpy(dest, v5, n);\n  v10 = *v5;\n  v75 = *v5;\n  v68 = (__int64 *)&ptr;\nLABEL_22:\n  v18 = v5[1];\n  if ( v18 < v10 )\n  {\nLABEL_37:\n    free(ptr);\n    if ( v67 )\n    {\n      free(dest);\n      v38 = (__int64)v74;\n      if ( !v74 )\n        return 0LL;\n    }\n    else\n    {\n      v38 = (__int64)v74;\n      if ( !v74 )\n        return 0LL;\n    }\n    sub_40FFF0(v38);\n    return 0LL;\n  }\n  while ( 1 )\n  {\n    v19 = v8;\n    v20 = 16 * v8;\n    v21 = 16 * v8 + *v73;\n    v22 = *(unsigned __int8 *)(v21 + 8);\n    if ( v22 == 8 )\n    {\n      v23 = *(_QWORD *)v21 + 1LL;\n      if ( v72 > v23 )\n      {\n        v24 = &v5[2 * v23];\n        v24[1] = -1LL;\n        v18 = v5[1];\n        *v24 = v10;\n      }\n    }\n    else if ( v22 == 9 )\n    {\n      v40 = *(_QWORD *)v21 + 1LL;\n      if ( v72 > v40 )\n      {\n        v41 = 2 * v40;\n        v42 = &v5[v41];\n        if ( v5[v41] < v10 )\n        {\n          v42[1] = v10;\n          v65 = 16 * v8;\n          v71 = (_QWORD *)v10;\n          memcpy(dest, v5, n);\n          v18 = v5[1];\n          v10 = (__int64)v71;\n          v20 = v65;\n        }\n        else if ( *(_BYTE *)(v21 + 10) & 8 && *(_QWORD *)((char *)dest + v41 * 8) != -1LL )\n        {\n          v66 = v10;\n          v71 = (_QWORD *)(16 * v8);\n          memcpy(v5, dest, n);\n          v18 = v5[1];\n          v20 = (__int64)v71;\n          v10 = v66;\n        }\n        else\n        {\n          v42[1] = v10;\n          v18 = v5[1];\n        }\n      }\n    }\n    if ( v10 == v18 && v6[22] == v8 )\n    {\n      if ( !v74 )\n      {\n        free(ptr);\n        if ( v67 )\n        {\n          free(dest);\n          return 0LL;\n        }\n        return 0LL;\n      }\n      if ( !v72 )\n        goto LABEL_71;\n      v59 = v5;\n      v60 = 0LL;\n      while ( *v59 < 0 || v59[1] != -1 )\n      {\n        ++v60;\n        v59 += 2;\n        if ( v72 == v60 )\n          goto LABEL_71;\n      }\n      if ( v72 == v60 )\n      {\nLABEL_71:\n        free(ptr);\n        if ( v67 )\n          free(dest);\n        sub_40FFF0((__int64)v74);\n        return 0LL;\n      }\n      v8 = sub_410040(v74, v74 + 2, &v75, v72, v5, (__int64)&v76);\n      v19 = v8;\n      v20 = 16 * v8;\n    }\n    v11 = (__int64 *)v6[19];\n    v12 = *v11;\n    v13 = *v11 + v20;\n    v14 = *(_BYTE *)(v13 + 8);\n    if ( v14 & 8 )\n      break;\n    if ( *(_BYTE *)(v13 + 10) & 0x10 )\n    {\n      v71 = (_QWORD *)v20;\n      v43 = sub_411010(v12, v11 + 27, v8, (__int64)v6, v75);\n      v44 = v43;\n      if ( v43 )\n        goto LABEL_64;\n      v15 = v75;\n      v13 = (__int64)v71 + *v11;\n    }\n    else if ( v14 == 4 )\n    {\n      v45 = &v5[2 * *(_QWORD *)v13 + 2];\n      v46 = *v45;\n      v44 = v45[1] - *v45;\n      if ( v74 )\n      {\n        if ( v46 == -1 || v45[1] == -1 )\n          goto LABEL_36;\n        if ( v44 )\n        {\n          v47 = v6[1];\n          v48 = v75;\n          v71 = (_QWORD *)v44;\n          v49 = memcmp((const void *)(v47 + v46), (const void *)(v47 + v75), v44);\n          v44 = (size_t)v71;\n          if ( v49 )\n            goto LABEL_36;\n          goto LABEL_54;\n        }\n      }\n      else if ( v44 )\n      {\nLABEL_64:\n        v48 = v75;\nLABEL_54:\n        v16 = v48 + v44;\n        v8 = *(_QWORD *)(v11[3] + 8 * v8);\n        goto LABEL_15;\n      }\n      v71 = (_QWORD *)v20;\n      if ( !(unsigned __int8)sub_40B280(&v76, v8) )\n      {\nLABEL_80:\n        free(ptr);\n        if ( v67 )\nLABEL_93:\n          free(dest);\n        if ( v74 )\n          goto LABEL_62;\n        return 12LL;\n      }\n      v61 = v11[5] + 24 * v8;\n      v64 = v75;\n      v8 = **(_QWORD **)(v61 + 16);\n      v62 = *(_QWORD *)(v6[23] + 8 * v75);\n      if ( sub_40C890(*(_QWORD *)(v62 + 16), (__int64 *)(v62 + 24), v8) )\n        goto LABEL_20;\n      v15 = v64;\n      v13 = (__int64)v71 + *v11;\n    }\n    else\n    {\n      v15 = v75;\n    }\n    v71 = (_QWORD *)v15;\n    if ( !(unsigned __int8)sub_40E6B0((__int64)v6, v13, v15) )\n      goto LABEL_35;\n    v16 = (__int64)v71 + 1;\n    v8 = *(_QWORD *)(v11[3] + 8 * v19);\nLABEL_15:\n    v75 = v16;\n    if ( !v74\n      || v16 <= v6[21]\n      && (v17 = *(_QWORD *)(v6[23] + 8 * v16)) != 0\n      && sub_40C890(*(_QWORD *)(v17 + 16), (__int64 *)(v17 + 24), v8) )\n    {\n      *((_QWORD *)&v76 + 1) = 0LL;\nLABEL_20:\n      if ( v8 < 0 )\n      {\nLABEL_34:\n        if ( v8 == -2 )\n          goto LABEL_80;\n        goto LABEL_35;\n      }\nLABEL_21:\n      v10 = v75;\n      goto LABEL_22;\n    }\nLABEL_36:\n    v37 = sub_410040(v74, v74 + 2, &v75, v72, v5, (__int64)&v76);\n    v10 = v75;\n    v8 = v37;\n    v18 = v5[1];\n    if ( v18 < v75 )\n      goto LABEL_37;\n  }\n  v25 = v11[5];\n  v71 = *(_QWORD **)(v6[23] + 8 * v75);\n  v26 = v25 + 24 * v8;\n  if ( !(unsigned __int8)sub_40B280(&v76, v8) )\n    goto LABEL_80;\n  if ( *(_QWORD *)(v26 + 8) <= 0LL )\n  {\nLABEL_35:\n    if ( !v74 )\n    {\n      free(ptr);\n      result = 1LL;\n      if ( v67 )\n      {\n        LODWORD(v74) = 1;\n        free(dest);\n        result = (unsigned int)v74;\n      }\n      return result;\n    }\n    goto LABEL_36;\n  }\n  v27 = v71[2];\n  v28 = (__int64)(v71 + 3);\n  v29 = *(_QWORD *)(v26 + 16);\n  v71 = v6;\n  v30 = 0LL;\n  v31 = -1LL;\n  v32 = v27;\n  v33 = (__int64 *)v28;\n  while ( 2 )\n  {\n    v34 = *(_QWORD *)(v29 + 8 * v30);\n    if ( !sub_40C890(v32, v33, *(_QWORD *)(v29 + 8 * v30)) )\n    {\nLABEL_32:\n      v30 = v35 + 1;\n      if ( v36 == v30 )\n      {\n        v8 = v31;\n        v6 = v71;\n        if ( v8 >= 0 )\n          goto LABEL_21;\n        goto LABEL_34;\n      }\n      continue;\n    }\n    break;\n  }\n  if ( v31 == -1 )\n  {\n    v31 = v34;\n    goto LABEL_32;\n  }\n  v8 = v31;\n  v50 = v31;\n  v6 = v71;\n  if ( sub_40C890(*((__int64 *)&v76 + 1), v68, v50) )\n  {\n    v8 = v34;\n    goto LABEL_20;\n  }\n  v51 = (__int64)v74;\n  if ( !v74 )\n    goto LABEL_20;\n  v52 = *v74;\n  v53 = v75;\n  v54 = *v74 + 1;\n  *v74 = v54;\n  if ( v54 != *(_QWORD *)(v51 + 8) )\n  {\n    v55 = *(char **)(v51 + 16);\n    goto LABEL_59;\n  }\n  v71 = (_QWORD *)v53;\n  v55 = (char *)realloc((void *)v74[2], 96 * v54);\n  if ( v55 )\n  {\n    v63 = (__int64)v74;\n    v53 = (__int64)v71;\n    v74[1] *= 2LL;\n    *(_QWORD *)(v63 + 16) = v55;\nLABEL_59:\n    v56 = (__int64 *)&v55[48 * v52];\n    v56[1] = v34;\n    v57 = n;\n    *v56 = v53;\n    v58 = malloc(v57);\n    v56[2] = (__int64)v58;\n    if ( v58 )\n    {\n      memcpy(v58, v5, v57);\n      if ( !(unsigned int)sub_40D930((__int64)(v56 + 3), (__int64)&v76) )\n        goto LABEL_20;\n    }\n  }\n  free(ptr);\n  if ( v67 )\n    goto LABEL_93;\nLABEL_62:\n  sub_40FFF0((__int64)v74);\n  return 12LL;\n}\n", 
            "funcStartAddr": "0x4119c0L", 
            "funcEndAddr": "0x412283L", 
            "funcName": "sub_4119C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412290(_QWORD *a1, __int64 *a2, __int64 *a3, __int64 a4, __int64 a5)\n{\n  __int64 *v5; // r14\n  __int64 v6; // r13\n  __int64 *v7; // r12\n  __int64 v8; // rbp\n  _QWORD *v9; // rbx\n  __int64 result; // rax\n  __int64 v11; // r15\n  __int64 v12; // rax\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  char *v15; // rdi\n  __int64 v16; // rsi\n  __int64 v17; // rdx\n  __int64 v18; // r8\n  char *v19; // rdi\n  char *v20; // rax\n  __int64 v21; // rdx\n  __int64 v22; // rsi\n  __int64 v23; // [rsp+10h] [rbp-40h]\n\n  v5 = a3;\n  v6 = a4;\n  v7 = a2;\n  v8 = a5;\n  v9 = a1;\n  result = sub_4112A0((__int64)a1, (__int64)(a3 + 2), *a3, a3[1], a4, a5, 8u);\n  if ( !(_DWORD)result )\n  {\n    v11 = v5[1];\n    v12 = a1[25];\n    v13 = a1[26];\n    v14 = *a2;\n    v15 = (char *)a1[27];\n    v16 = v5[1];\n    if ( v12 >= v13 )\n    {\n      v23 = *v7;\n      v20 = (char *)realloc(v15, 80 * v13);\n      if ( !v20 )\n      {\n        free((void *)v9[27]);\n        return 12LL;\n      }\n      v21 = v9[26];\n      v22 = v9[25];\n      v9[27] = v20;\n      memset(&v20[40 * v22], 0, 40 * v21);\n      v9[26] *= 2LL;\n      v12 = v9[25];\n      v15 = (char *)v9[27];\n      v16 = v5[1];\n      v14 = v23;\n    }\n    v17 = 40 * v12;\n    if ( v12 > 0 )\n    {\n      v18 = (__int64)&v15[v17 - 40];\n      if ( v8 == *(_QWORD *)(v18 + 8) )\n        *(_BYTE *)(v18 + 32) = 1;\n    }\n    v19 = &v15[v17];\n    *(_QWORD *)v19 = v6;\n    *((_QWORD *)v19 + 1) = v8;\n    *((_WORD *)v19 + 17) = -(v11 == v14);\n    *((_QWORD *)v19 + 2) = v14;\n    *((_QWORD *)v19 + 3) = v11;\n    v9[25] = v12 + 1;\n    v19[32] = 0;\n    if ( *((int *)v9 + 56) < v11 - v14 )\n      *((_DWORD *)v9 + 56) = v11 - v14;\n    result = sub_40BE60(v9, v8 + v16 - *v7);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x412290L", 
            "funcEndAddr": "0x412426L", 
            "funcName": "sub_412290"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412430(__int64 a1, _QWORD *a2, _QWORD *a3)\n{\n  __int64 v3; // r14\n  __int64 v4; // r15\n  __int64 v5; // r13\n  __int64 v6; // rbp\n  __int64 v7; // rax\n  int v8; // ebx\n  char v9; // al\n  __int64 v10; // rcx\n  __int64 i; // rax\n  __int64 v12; // r8\n  __int64 v13; // rdx\n  _QWORD *v14; // rax\n  __int64 v15; // rdi\n  __int64 v16; // rdx\n  __int64 v17; // rbx\n  __int64 v18; // r13\n  __int64 v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  __int64 v22; // rbp\n  unsigned int v23; // ecx\n  __int64 v24; // rax\n  __int64 **v25; // r11\n  __int64 v26; // rax\n  __int64 *v27; // rdx\n  unsigned int v28; // eax\n  unsigned int v29; // ecx\n  __int64 *v30; // rax\n  void *v31; // rdi\n  __int64 v32; // rdx\n  _QWORD *v33; // rax\n  __int64 v34; // rbp\n  __int64 v35; // rax\n  __int64 v36; // rdx\n  __int64 *v37; // rax\n  __int64 result; // rax\n  __int64 v39; // r12\n  __int64 v40; // r10\n  __int64 v41; // rcx\n  __int64 v42; // rbp\n  __int64 v43; // r12\n  __int64 v44; // r8\n  __int64 *v45; // r9\n  __int64 v46; // r13\n  signed __int64 v47; // rdx\n  signed __int64 v48; // r15\n  int v49; // eax\n  __int64 v50; // r15\n  __int64 v51; // rax\n  __int64 v52; // rcx\n  __int64 v53; // rdi\n  __int64 v54; // rdx\n  __int64 v55; // rbp\n  __int64 v56; // rax\n  __int64 v57; // rsi\n  __int64 v58; // rcx\n  __int64 v59; // rax\n  __int64 *v60; // rax\n  __int64 v61; // rdx\n  void *v62; // rax\n  void *v63; // rax\n  __int64 v64; // [rsp+8h] [rbp-E0h]\n  __int64 v65; // [rsp+10h] [rbp-D8h]\n  __int64 v66; // [rsp+10h] [rbp-D8h]\n  __int64 v67; // [rsp+18h] [rbp-D0h]\n  __int64 v68; // [rsp+18h] [rbp-D0h]\n  __int64 v69; // [rsp+20h] [rbp-C8h]\n  __int64 v70; // [rsp+20h] [rbp-C8h]\n  __int64 v71; // [rsp+20h] [rbp-C8h]\n  __int64 *v72; // [rsp+20h] [rbp-C8h]\n  unsigned int v73; // [rsp+28h] [rbp-C0h]\n  __int64 **v74; // [rsp+28h] [rbp-C0h]\n  __int64 **v75; // [rsp+28h] [rbp-C0h]\n  __int64 v76; // [rsp+28h] [rbp-C0h]\n  signed __int64 v77; // [rsp+28h] [rbp-C0h]\n  __int64 v78; // [rsp+28h] [rbp-C0h]\n  __int64 v79; // [rsp+28h] [rbp-C0h]\n  __int64 *v80; // [rsp+30h] [rbp-B8h]\n  __int64 v81; // [rsp+30h] [rbp-B8h]\n  _QWORD *v82; // [rsp+38h] [rbp-B0h]\n  __int64 v83; // [rsp+40h] [rbp-A8h]\n  __int64 v84; // [rsp+40h] [rbp-A8h]\n  _QWORD *v85; // [rsp+48h] [rbp-A0h]\n  _QWORD *v86; // [rsp+50h] [rbp-98h]\n  __int64 v87; // [rsp+58h] [rbp-90h]\n  __int64 v88; // [rsp+60h] [rbp-88h]\n  __int64 *v89; // [rsp+68h] [rbp-80h]\n  __int64 v90; // [rsp+70h] [rbp-78h]\n  __int64 v91; // [rsp+78h] [rbp-70h]\n  unsigned int v92; // [rsp+8Ch] [rbp-5Ch]\n  char v93; // [rsp+90h] [rbp-58h]\n  void *ptr; // [rsp+A0h] [rbp-48h]\n\n  v3 = a1;\n  v4 = *(_QWORD *)(a1 + 72);\n  v86 = a2;\n  v85 = a3;\n  v82 = *(_QWORD **)(a1 + 152);\n  v87 = 8 * v4;\n  v64 = 0LL;\n  if ( *a2 <= 0LL )\n    return 0LL;\n  while ( 1 )\n  {\n    v5 = *(_QWORD *)(*v85 + 8 * v64);\n    v6 = 16LL * *(_QWORD *)(*v85 + 8 * v64);\n    v7 = v6 + *v82;\n    if ( *(_BYTE *)(v7 + 8) == 4 )\n      break;\nLABEL_9:\n    if ( ++v64 >= *v86 )\n      return 0LL;\n  }\n  v8 = *(_DWORD *)(v7 + 8);\n  if ( v8 & 0x3FF00 )\n  {\n    v9 = sub_40E5C0(v3, v4, *(_DWORD *)(v3 + 160));\n    if ( v8 & 0x400 )\n    {\n      if ( !(v9 & 1) || v8 & 0x800 )\n        goto LABEL_9;\n    }\n    else if ( v8 & 0x800 && v9 & 1 )\n    {\n      goto LABEL_9;\n    }\n    if ( v8 & 0x2000 && !(v9 & 2) || v8 & 0x8000 && !(v9 & 8) )\n      goto LABEL_9;\n  }\n  v10 = 0LL;\n  for ( i = *(_QWORD *)(v3 + 200); v10 < i; i = v13 )\n  {\n    v12 = *(_QWORD *)(v3 + 216);\n    v13 = (v10 + i) / 2;\n    if ( v4 <= *(_QWORD *)(v12 + 40 * v13 + 8) )\n    {\n      while ( v13 > v10 )\n      {\n        v15 = (v13 + v10) / 2;\n        if ( v4 > *(_QWORD *)(v12 + 40 * v15 + 8) )\n          goto LABEL_30;\n        v13 = (v13 + v10) / 2;\n      }\n      break;\n    }\n    v15 = (v10 + i) / 2;\n    v13 = i;\nLABEL_30:\n    v10 = v15 + 1;\n  }\n  if ( *(_QWORD *)(v3 + 200) > v10 )\n  {\n    v14 = (_QWORD *)(*(_QWORD *)(v3 + 216) + 40 * v10);\n    if ( v14[1] == v4 && v10 != -1 )\n    {\n      while ( v5 != *v14 )\n      {\n        v14 += 5;\n        if ( !*((_BYTE *)v14 - 8) )\n          goto LABEL_31;\n      }\n      goto LABEL_29;\n    }\n  }\nLABEL_31:\n  v16 = **(_QWORD **)(v3 + 152);\n  v89 = *(__int64 **)(v3 + 152);\n  v88 = *(_QWORD *)(v16 + v6);\n  if ( *(_QWORD *)(v3 + 232) <= 0LL )\n  {\nLABEL_29:\n    v92 = 0;\n    goto LABEL_9;\n  }\n  v67 = v4;\n  v65 = 0LL;\n  v69 = *(_QWORD *)(v3 + 8);\n  v83 = v5;\n  v90 = *(_QWORD *)(v3 + 200);\nLABEL_33:\n  v17 = *(_QWORD *)(*(_QWORD *)(v3 + 248) + 8 * v65);\n  if ( v88 != *(_QWORD *)(v16 + 16LL * *(_QWORD *)(v17 + 8)) )\n    goto LABEL_34;\n  v39 = *(_QWORD *)v17;\n  v40 = v67;\n  if ( *(_QWORD *)(v17 + 32) <= 0LL )\n    goto LABEL_73;\n  v41 = *(_QWORD *)v17;\n  v42 = 0LL;\n  v43 = v69;\n  v44 = v67;\n  while ( 1 )\n  {\n    v45 = *(__int64 **)(*(_QWORD *)(v17 + 40) + 8 * v42);\n    v46 = v45[1];\n    v47 = v45[1] - v41;\n    v48 = v47 + v44;\n    if ( v47 <= 0 )\n      goto LABEL_60;\n    if ( *(_QWORD *)(v3 + 48) < v48 )\n    {\n      v77 = v45[1] - v41;\n      v72 = *(__int64 **)(*(_QWORD *)(v17 + 40) + 8 * v42);\n      if ( *(_QWORD *)(v3 + 88) >= v48 )\n      {\n        v91 = v44;\n        v81 = v41;\n        result = sub_40BE60((_QWORD *)v3, v47 + v44);\n        if ( (_DWORD)result )\n          return result;\n        v43 = *(_QWORD *)(v3 + 8);\n        v47 = v77;\n        v45 = v72;\n        v44 = v91;\n        v41 = v81;\n        goto LABEL_59;\n      }\nLABEL_96:\n      v69 = v43;\n      v40 = v44;\n      v39 = v41;\n      if ( *(_QWORD *)(v17 + 32) <= v42 )\n      {\n        if ( v42 > 0 )\n        {\n          v46 = v41;\n          v48 = v44;\nLABEL_72:\n          v39 = v46 + 1;\n          v40 = v48;\n        }\nLABEL_73:\n        if ( v67 >= v39 )\n        {\n          v50 = v40;\n          do\n          {\n            if ( v39 - *(_QWORD *)v17 > 0 )\n            {\n              if ( *(_QWORD *)(v3 + 48) <= v50 )\n              {\n                if ( *(_QWORD *)(v3 + 88) <= v50 )\n                  break;\n                result = sub_40BD10((_QWORD *)v3, (unsigned int)(v50 + 1));\n                if ( (_DWORD)result )\n                  return result;\n                v69 = *(_QWORD *)(v3 + 8);\n              }\n              if ( *(_BYTE *)(v69 + v50) != *(_BYTE *)(v69 + v39 - 1) )\n                break;\n              ++v50;\n            }\n            v51 = *(_QWORD *)(*(_QWORD *)(v3 + 184) + 8 * v39);\n            if ( v51 )\n            {\n              v52 = *(_QWORD *)(v51 + 16);\n              if ( v52 > 0 )\n              {\n                v53 = *(_QWORD *)(v51 + 24);\n                v54 = 0LL;\n                while ( 1 )\n                {\n                  v55 = *(_QWORD *)(v53 + 8 * v54);\n                  v56 = *v89 + 16LL * *(_QWORD *)(v53 + 8 * v54);\n                  if ( *(_BYTE *)(v56 + 8) == 9 && v88 == *(_QWORD *)v56 )\n                    break;\n                  if ( v52 == ++v54 )\n                    goto LABEL_92;\n                }\n                if ( v55 != -1 )\n                {\n                  v57 = *(_QWORD *)(v17 + 16);\n                  v58 = *(_QWORD *)v17;\n                  if ( !v57 )\n                  {\n                    v78 = *(_QWORD *)v17;\n                    v62 = calloc(0x18uLL, v39 - v58 + 1);\n                    v58 = v78;\n                    v57 = (__int64)v62;\n                    *(_QWORD *)(v17 + 16) = v62;\n                    if ( !v62 )\n                      return 12LL;\n                  }\n                  result = sub_4112A0(v3, v57, *(_QWORD *)(v17 + 8), v58, v55, v39, 9u);\n                  if ( (_DWORD)result != 1 )\n                  {\n                    if ( (_DWORD)result )\n                      return result;\n                    v59 = *(_QWORD *)(v17 + 24);\n                    if ( *(_QWORD *)(v17 + 32) == v59 )\n                    {\n                      v79 = 2 * v59 + 1;\n                      v63 = realloc(*(void **)(v17 + 40), 8 * v79);\n                      if ( !v63 )\n                        return 12LL;\n                      *(_QWORD *)(v17 + 40) = v63;\n                      *(_QWORD *)(v17 + 24) = v79;\n                    }\n                    v60 = (__int64 *)calloc(1uLL, 0x28uLL);\n                    if ( !v60 )\n                      return 12LL;\n                    v61 = *(_QWORD *)(v17 + 32);\n                    *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8 * v61) = v60;\n                    *v60 = v55;\n                    v60[1] = v39;\n                    *(_QWORD *)(v17 + 32) = v61 + 1;\n                    sub_412290((_QWORD *)v3, (__int64 *)v17, v60, v83, v67);\n                  }\n                }\n              }\n            }\nLABEL_92:\n            ++v39;\n          }\n          while ( v67 >= v39 );\n        }\n      }\nLABEL_34:\n      if ( ++v65 < *(_QWORD *)(v3 + 232) )\n      {\n        v16 = *v89;\n        goto LABEL_33;\n      }\n      v4 = v67;\n      v18 = v83;\n      v92 = 0;\n      if ( v90 < *(_QWORD *)(v3 + 200) )\n      {\n        v84 = 8 * v83;\n        v19 = v3;\n        v20 = v90;\n        v21 = v19;\n        while ( 2 )\n        {\n          v33 = (_QWORD *)(*(_QWORD *)(v21 + 216) + 40 * v20);\n          if ( v18 != *v33 || v4 != v33[1] )\n            goto LABEL_46;\n          v34 = v33[3];\n          v35 = v33[2];\n          v36 = v82[6];\n          v70 = v34 - v35;\n          if ( v34 == v35 )\n            v68 = v36 + 24LL * **(_QWORD **)(v82[5] + 24 * v18 + 16);\n          else\n            v68 = v36 + 24LL * *(_QWORD *)(v82[3] + v84);\n          v22 = v4 + v34 - v35;\n          v66 = 0LL;\n          v23 = sub_40E5C0(v21, v22 - 1, *(_DWORD *)(v21 + 160));\n          v24 = *(_QWORD *)(v21 + 184);\n          v25 = (__int64 **)(v24 + 8 * v22);\n          v26 = *(_QWORD *)(v24 + v87);\n          v27 = *v25;\n          if ( v26 )\n            v66 = *(_QWORD *)(v26 + 16);\n          if ( v27 )\n          {\n            v73 = v23;\n            v28 = sub_40D9B0((__int64)&v93, v27[10], v68);\n            v29 = v73;\n            v92 = v28;\n            if ( v28 )\n            {\n              free(ptr);\n              return v92;\n            }\n            v74 = (__int64 **)(*(_QWORD *)(v21 + 184) + 8 * v22);\n            v30 = sub_40DB40(&v92, v82, (__int64)&v93, v29);\n            v31 = ptr;\n            *v74 = v30;\n            free(v31);\n            v32 = *(_QWORD *)(v21 + 184);\n            if ( *(_QWORD *)(v32 + 8 * v22) )\n            {\nLABEL_44:\n              if ( v70 || *(_QWORD *)(*(_QWORD *)(v32 + v87) + 16LL) <= v66 )\n              {\nLABEL_46:\n                if ( ++v20 >= *(_QWORD *)(v21 + 200) )\n                  goto LABEL_65;\n              }\n              else\n              {\n                result = sub_40E470(v21, (_QWORD *)(v68 + 8), (_QWORD *)(v68 + 16), v4);\n                v92 = result;\n                if ( (_DWORD)result )\n                  return result;\n                result = sub_412430(v21, v68 + 8, v68 + 16);\n                v92 = result;\n                if ( (_DWORD)result )\n                  return result;\n                if ( ++v20 >= *(_QWORD *)(v21 + 200) )\n                {\nLABEL_65:\n                  v3 = v21;\n                  goto LABEL_9;\n                }\n              }\n              continue;\n            }\n          }\n          else\n          {\n            v75 = v25;\n            v37 = sub_40DB40(&v92, v82, v68, v23);\n            v32 = *(_QWORD *)(v21 + 184);\n            *v75 = v37;\n            if ( *(_QWORD *)(v32 + 8 * v22) )\n              goto LABEL_44;\n          }\n          break;\n        }\n        result = v92;\n        if ( v92 )\n          return result;\n        goto LABEL_44;\n      }\n      goto LABEL_9;\n    }\nLABEL_59:\n    v80 = v45;\n    v76 = v41;\n    v71 = v44;\n    v49 = memcmp((const void *)(v43 + v44), (const void *)(v43 + v41), v47);\n    v44 = v71;\n    v41 = v76;\n    v45 = v80;\n    if ( v49 )\n      goto LABEL_96;\nLABEL_60:\n    result = sub_412290((_QWORD *)v3, (__int64 *)v17, v45, v83, v67);\n    v43 = *(_QWORD *)(v3 + 8);\n    if ( (unsigned int)result > 1 )\n      return result;\n    ++v42;\n    v41 = v46;\n    v44 = v48;\n    if ( v42 >= *(_QWORD *)(v17 + 32) )\n    {\n      v69 = *(_QWORD *)(v3 + 8);\n      goto LABEL_72;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x412430L", 
            "funcEndAddr": "0x412ca2L", 
            "funcName": "sub_412430"
        }, 
        {
            "decompiledFuncCode": "__int64 *__fastcall sub_412CB0(_DWORD *a1, __int64 a2, __int64 *a3)\n{\n  __int64 v3; // r12\n  _QWORD *v4; // r15\n  __int64 v5; // r14\n  __int64 *v6; // rbp\n  __int64 v8; // rax\n  __int64 v9; // r14\n  int v10; // eax\n  unsigned int v11; // eax\n  int v12; // edx\n  unsigned int v13; // eax\n  int v14; // eax\n  int v15; // eax\n  __int64 **v16; // [rsp+8h] [rbp-60h]\n  __m128i v17; // [rsp+10h] [rbp-58h]\n  void *ptr; // [rsp+20h] [rbp-48h]\n\n  v3 = *(_QWORD *)(a2 + 72);\n  v4 = *(_QWORD **)(a2 + 152);\n  v5 = 8 * v3 + *(_QWORD *)(a2 + 184);\n  if ( *(_QWORD *)(a2 + 192) >= v3 )\n  {\n    if ( *(_QWORD *)v5 )\n    {\n      v8 = *(_QWORD *)(*(_QWORD *)v5 + 80LL);\n      if ( a3 )\n      {\n        v9 = a3[10];\n        v10 = sub_40D9B0((__int64)&v17, v9, v8);\n        *a1 = v10;\n        if ( v10 )\n          goto LABEL_17;\n        v11 = sub_40E5C0(a2, *(_QWORD *)(a2 + 72) - 1LL, *(_DWORD *)(a2 + 160));\n        v16 = (__int64 **)(8 * v3 + *(_QWORD *)(a2 + 184));\n        v6 = sub_40DB40(a1, v4, (__int64)&v17, v11);\n        *v16 = v6;\n        if ( v9 )\n          free(ptr);\n      }\n      else\n      {\n        v12 = *(_DWORD *)(a2 + 160);\n        v17 = _mm_loadu_si128((const __m128i *)v8);\n        ptr = *(void **)(v8 + 16);\n        v13 = sub_40E5C0(a2, v3 - 1, v12);\n        v6 = sub_40DB40(a1, v4, (__int64)&v17, v13);\n        *(_QWORD *)v5 = v6;\n      }\n    }\n    else\n    {\n      *(_QWORD *)v5 = a3;\n      v6 = a3;\n    }\n  }\n  else\n  {\n    *(_QWORD *)v5 = a3;\n    v6 = a3;\n    *(_QWORD *)(a2 + 192) = v3;\n  }\n  if ( v4[19] )\n  {\n    if ( v6 )\n    {\n      v14 = sub_40E470(a2, v6 + 2, v6 + 3, v3);\n      *a1 = v14;\n      if ( !v14 )\n      {\n        if ( !(v6[13] & 0x40) )\n          return v6;\n        v15 = sub_412430(a2, v6 + 2, v6 + 3);\n        *a1 = v15;\n        if ( !v15 )\n          return *(__int64 **)(*(_QWORD *)(a2 + 184) + 8 * v3);\n      }\n    }\nLABEL_17:\n    v6 = 0LL;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x412cb0L", 
            "funcEndAddr": "0x412e67L", 
            "funcName": "sub_412CB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412E70(__int64 a1, _QWORD *a2)\n{\n  void **v2; // r15\n  __int64 v3; // rbx\n  __int64 v4; // rbp\n  _QWORD *v5; // rax\n  int v6; // eax\n  __int64 v7; // rax\n  __int64 v8; // r14\n  _QWORD *v9; // r12\n  __int64 v10; // rax\n  int v11; // er9\n  __int64 v12; // rax\n  __int64 v13; // rbp\n  __int64 v14; // rsi\n  int v15; // eax\n  __int64 v16; // rax\n  __int64 v17; // rax\n  __int64 v19; // [rsp+8h] [rbp-90h]\n  unsigned int v20; // [rsp+8h] [rbp-90h]\n  __int64 n; // [rsp+10h] [rbp-88h]\n  int v22; // [rsp+1Ch] [rbp-7Ch]\n  __int64 v23; // [rsp+20h] [rbp-78h]\n  __int64 v24; // [rsp+28h] [rbp-70h]\n  __int64 v25; // [rsp+30h] [rbp-68h]\n  _QWORD *v26; // [rsp+38h] [rbp-60h]\n  __int64 v27; // [rsp+40h] [rbp-58h]\n  __int64 v28; // [rsp+48h] [rbp-50h]\n  void *ptr; // [rsp+50h] [rbp-48h]\n\n  v2 = (void **)a2;\n  v3 = a2[3];\n  v4 = a2[2];\n  v27 = 1LL;\n  v28 = 1LL;\n  v5 = malloc(8uLL);\n  ptr = v5;\n  if ( !v5 )\n    return 12LL;\n  *v5 = v4;\n  v6 = sub_414900(a1, a2, v3, &v27);\n  if ( v6 )\n    goto LABEL_29;\n  v22 = 0;\n  v26 = a2 + 6;\n  if ( v3 <= 0 )\n  {\nLABEL_27:\n    v6 = 0;\n    goto LABEL_29;\n  }\n  while ( 1 )\n  {\n    n = 8 * v3;\n    if ( *((_QWORD *)*v2 + v3) )\n    {\n      v22 = 0;\n      if ( *(_DWORD *)(a1 + 224) < 0 )\n        goto LABEL_31;\n    }\n    else if ( *(_DWORD *)(a1 + 224) < ++v22 )\n    {\nLABEL_31:\n      memset(*v2, 0, n);\n      free(ptr);\n      return 0LL;\n    }\n    v7 = *(_QWORD *)(a1 + 184);\n    --v3;\n    v28 = 0LL;\n    v8 = *(_QWORD *)(v7 + n - 8);\n    if ( v8 )\n    {\n      v9 = *(_QWORD **)(a1 + 152);\n      if ( *(_QWORD *)(v8 + 40) > 0LL )\n        break;\n    }\nLABEL_25:\n    v6 = sub_414900(a1, v2, v3, &v27);\n    if ( v6 )\n      goto LABEL_29;\n    if ( !v3 )\n      goto LABEL_27;\n  }\n  v19 = 0LL;\n  while ( 1 )\n  {\n    v12 = *(_QWORD *)(v8 + 48);\n    v13 = *(_QWORD *)(v12 + 8 * v19);\n    v14 = 16LL * *(_QWORD *)(v12 + 8 * v19) + *v9;\n    if ( *(_BYTE *)(v14 + 10) & 0x10 )\n    {\n      v24 = 16LL * *(_QWORD *)(v12 + 8 * v19);\n      v25 = *(_QWORD *)(a1 + 152);\n      v23 = (__int64)v2[3];\n      v15 = sub_411010(\n              **(_QWORD **)(a1 + 152),\n              (_QWORD *)(*(_QWORD *)(a1 + 152) + 216LL),\n              *(_QWORD *)(v12 + 8 * v19),\n              a1,\n              v3);\n      v11 = v15;\n      if ( v15 <= 0 )\n      {\n        if ( v15 )\n          goto LABEL_13;\nLABEL_24:\n        v14 = v24 + *v9;\n        goto LABEL_9;\n      }\n      v16 = v3 + v15;\n      if ( v23 < v16 )\n        goto LABEL_13;\n      v17 = *((_QWORD *)*v2 + v16);\n      if ( !v17 )\n        goto LABEL_24;\n      if ( sub_40C890(*(_QWORD *)(v17 + 16), (__int64 *)(v17 + 24), *(_QWORD *)(*(_QWORD *)(v25 + 24) + 8 * v13)) )\n        goto LABEL_13;\n      v14 = v24 + *v9;\n    }\nLABEL_9:\n    if ( (unsigned __int8)sub_40E6B0(a1, v14, v3) )\n    {\n      v10 = *(_QWORD *)((char *)*v2 + n);\n      if ( v10 )\n      {\n        if ( sub_40C890(*(_QWORD *)(v10 + 16), (__int64 *)(v10 + 24), *(_QWORD *)(v9[3] + 8 * v13)) )\n          break;\n      }\n    }\nLABEL_16:\n    if ( ++v19 >= *(_QWORD *)(v8 + 40) )\n      goto LABEL_25;\n  }\n  v11 = 1;\nLABEL_13:\n  if ( v2[5] && (unsigned __int8)sub_40CB20((_QWORD *)a1, v2 + 5, v26, *(_QWORD *)(v9[3] + 8 * v13), v11 + v3, v13, v3)\n    || (unsigned __int8)sub_40B280(&v27, v13) )\n  {\n    goto LABEL_16;\n  }\n  v6 = 12;\nLABEL_29:\n  v20 = v6;\n  free(ptr);\n  return v20;\n}\n", 
            "funcStartAddr": "0x412e70L", 
            "funcEndAddr": "0x413194L", 
            "funcName": "sub_412E70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4131A0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int64 a7, __int64 *a8, int a9)\n{\n  __int64 v9; // r12\n  __int64 v10; // rbp\n  __int64 v11; // rbx\n  __int64 v12; // rdx\n  _BYTE *v13; // rax\n  _BYTE *v14; // rcx\n  unsigned __int64 v15; // rax\n  __int64 v16; // rsi\n  __int64 v17; // rax\n  __int64 v18; // rdx\n  __int64 v19; // rcx\n  __int64 v20; // rdi\n  int v21; // edx\n  __int64 v22; // rax\n  signed __int64 v23; // rsi\n  unsigned __int8 v24; // al\n  bool v25; // cc\n  unsigned __int64 v26; // rax\n  unsigned __int8 v27; // al\n  __int64 v28; // r15\n  void *v29; // r14\n  void *v30; // rdi\n  __int64 v31; // rax\n  __int64 v32; // rax\n  int v33; // eax\n  int v34; // ecx\n  __int64 *v35; // rdx\n  int v36; // eax\n  char v37; // cl\n  __int64 v38; // rax\n  __int64 v39; // rdx\n  _QWORD *v40; // rbx\n  __int64 *v41; // r14\n  unsigned int v42; // eax\n  bool v43; // zf\n  char v44; // al\n  unsigned __int64 v45; // r12\n  __int64 v46; // rbx\n  __int64 v47; // rax\n  char v48; // al\n  __int64 v49; // rbx\n  __int64 v50; // rax\n  __int64 *v51; // rbp\n  __int64 v52; // rax\n  char v53; // cl\n  __int64 v54; // rdx\n  void *v55; // rbx\n  void *v56; // r14\n  __int64 v57; // rax\n  __int64 v58; // rdx\n  __int64 v59; // rax\n  __int64 v60; // rax\n  __int64 v61; // rdx\n  __int64 *v63; // rax\n  int v64; // eax\n  __int64 *v65; // rbp\n  __int64 v66; // r12\n  __int64 v67; // r8\n  int v68; // eax\n  __int64 v69; // rbx\n  int v70; // eax\n  __int64 v71; // rdx\n  unsigned int v72; // eax\n  __int64 **v73; // r15\n  __int64 *v74; // rax\n  void *v75; // rdi\n  _QWORD *v76; // rdx\n  __int64 v77; // r9\n  __int64 v78; // r15\n  __int64 v79; // rax\n  unsigned int v80; // ebx\n  char v81; // al\n  unsigned int v82; // eax\n  __int64 *v83; // rax\n  __int64 v84; // rbp\n  unsigned int v85; // ebp\n  __int64 v86; // rcx\n  _BYTE *v87; // rax\n  __int64 v88; // rdx\n  unsigned int v89; // eax\n  __int64 v90; // rbp\n  _QWORD *v91; // r15\n  _QWORD *v92; // rbx\n  __int64 v93; // rax\n  __int64 v94; // rax\n  __int64 v95; // r14\n  __int64 v96; // r12\n  __int64 v97; // rax\n  bool v98; // r8\n  unsigned int v99; // eax\n  __int64 v100; // rdx\n  char v101; // r8\n  __int64 v102; // r9\n  __int64 v103; // rcx\n  __int64 v104; // r11\n  unsigned __int64 v105; // r10\n  __int64 v106; // rdi\n  __int64 *i; // rax\n  unsigned __int64 v108; // rsi\n  __int64 *v109; // rax\n  __int64 v110; // rsi\n  __int64 j; // rax\n  __int64 v112; // rdx\n  __int64 v113; // rcx\n  int v114; // eax\n  __int64 v115; // [rsp+8h] [rbp-230h]\n  __int64 v116; // [rsp+8h] [rbp-230h]\n  __int64 v117; // [rsp+8h] [rbp-230h]\n  __int64 *v118; // [rsp+8h] [rbp-230h]\n  __int64 v119; // [rsp+10h] [rbp-228h]\n  unsigned int v120; // [rsp+10h] [rbp-228h]\n  __int64 v121; // [rsp+18h] [rbp-220h]\n  void *v122; // [rsp+20h] [rbp-218h]\n  void *v123; // [rsp+20h] [rbp-218h]\n  unsigned __int64 v124; // [rsp+28h] [rbp-210h]\n  char *v125; // [rsp+30h] [rbp-208h]\n  __int64 v126; // [rsp+30h] [rbp-208h]\n  __int64 v127; // [rsp+38h] [rbp-200h]\n  __int64 v128; // [rsp+40h] [rbp-1F8h]\n  _BOOL4 v129; // [rsp+48h] [rbp-1F0h]\n  unsigned int v130; // [rsp+4Ch] [rbp-1ECh]\n  __int64 *v131; // [rsp+50h] [rbp-1E8h]\n  _QWORD *v132; // [rsp+58h] [rbp-1E0h]\n  _BYTE *v133; // [rsp+60h] [rbp-1D8h]\n  __int64 v134; // [rsp+68h] [rbp-1D0h]\n  __int64 v135; // [rsp+70h] [rbp-1C8h]\n  __int64 v136; // [rsp+78h] [rbp-1C0h]\n  __int64 v137; // [rsp+80h] [rbp-1B8h]\n  __int64 v138; // [rsp+88h] [rbp-1B0h]\n  __int64 v139; // [rsp+90h] [rbp-1A8h]\n  unsigned int v140; // [rsp+98h] [rbp-1A0h]\n  int v141; // [rsp+9Ch] [rbp-19Ch]\n  __int64 *v142; // [rsp+A0h] [rbp-198h]\n  int v143; // [rsp+A8h] [rbp-190h]\n  unsigned __int8 v144; // [rsp+ADh] [rbp-18Bh]\n  bool v145; // [rsp+AFh] [rbp-189h]\n  int v146; // [rsp+B0h] [rbp-188h]\n  int v147; // [rsp+B4h] [rbp-184h]\n  __int64 v148; // [rsp+B8h] [rbp-180h]\n  __m128i v149; // [rsp+C0h] [rbp-178h]\n  void *v150; // [rsp+D0h] [rbp-168h]\n  unsigned __int64 v151; // [rsp+D8h] [rbp-160h]\n  __int128 v152; // [rsp+E0h] [rbp-158h]\n  void *v153; // [rsp+F0h] [rbp-148h]\n  __int64 v154; // [rsp+100h] [rbp-138h]\n  __int64 v155; // [rsp+108h] [rbp-130h]\n  _DWORD *v156; // [rsp+110h] [rbp-128h]\n  __int64 v157; // [rsp+118h] [rbp-120h]\n  __int64 v158; // [rsp+128h] [rbp-110h]\n  __int64 v159; // [rsp+130h] [rbp-108h]\n  unsigned __int64 v160; // [rsp+138h] [rbp-100h]\n  __int64 v161; // [rsp+140h] [rbp-F8h]\n  __int64 v162; // [rsp+148h] [rbp-F0h]\n  __int64 v163; // [rsp+150h] [rbp-E8h]\n  __int64 v164; // [rsp+158h] [rbp-E0h]\n  __int64 v165; // [rsp+160h] [rbp-D8h]\n  __int64 v166; // [rsp+168h] [rbp-D0h]\n  int v167; // [rsp+170h] [rbp-C8h]\n  __int64 v168; // [rsp+178h] [rbp-C0h]\n  __int64 v169; // [rsp+180h] [rbp-B8h]\n  bool v170; // [rsp+188h] [rbp-B0h]\n  char v171; // [rsp+189h] [rbp-AFh]\n  char v172; // [rsp+18Ah] [rbp-AEh]\n  bool v173; // [rsp+18Bh] [rbp-ADh]\n  char v174; // [rsp+18Ch] [rbp-ACh]\n  char v175; // [rsp+18Dh] [rbp-ABh]\n  char v176; // [rsp+18Eh] [rbp-AAh]\n  int v177; // [rsp+190h] [rbp-A8h]\n  __int64 v178; // [rsp+198h] [rbp-A0h]\n  int v179; // [rsp+1A0h] [rbp-98h]\n  __int64 v180; // [rsp+1A8h] [rbp-90h]\n  void *v181; // [rsp+1B0h] [rbp-88h]\n  void *ptr; // [rsp+1B8h] [rbp-80h]\n  __int64 v183; // [rsp+1C0h] [rbp-78h]\n  __int64 v184; // [rsp+1C8h] [rbp-70h]\n  __int64 v185; // [rsp+1D0h] [rbp-68h]\n  void *v186; // [rsp+1D8h] [rbp-60h]\n  int v187; // [rsp+1E0h] [rbp-58h]\n  __int64 v188; // [rsp+1F0h] [rbp-48h]\n  void *v189; // [rsp+1F8h] [rbp-40h]\n\n  v9 = a6;\n  v10 = a5;\n  v11 = a4;\n  v128 = a1;\n  v135 = a2;\n  v136 = a3;\n  v12 = *(_QWORD *)a1;\n  v121 = *(_QWORD *)a1;\n  v13 = 0LL;\n  memset(&v154, 0, 0x100uLL);\n  v14 = *(_BYTE **)(a1 + 32);\n  v178 = v12;\n  v133 = v14;\n  if ( v14 )\n  {\n    if ( *(_BYTE *)(a1 + 56) & 8 && v11 != a5 )\n    {\n      if ( !(*(_BYTE *)(a1 + 56) & 1) )\n        v13 = v14;\n      v133 = v13;\n    }\n    else\n    {\n      v133 = 0LL;\n    }\n  }\n  v139 = 0LL;\n  v15 = *(_QWORD *)(a1 + 48);\n  if ( v15 < a7 )\n  {\n    v16 = a7 - 1 - v15;\n    a7 = v15 + 1;\n    v139 = v16;\n  }\n  if ( !*(_QWORD *)(a1 + 16) )\n    return 1;\n  v17 = *(_QWORD *)(v121 + 72);\n  if ( !v17 )\n    return 1;\n  v18 = *(_QWORD *)(v121 + 80);\n  if ( !v18 )\n    return 1;\n  v19 = *(_QWORD *)(v121 + 88);\n  if ( !v19 || !*(_QWORD *)(v121 + 96) )\n    return 1;\n  if ( !*(_QWORD *)(v17 + 16) && !*(_QWORD *)(v18 + 16) && (!*(_QWORD *)(v19 + 16) || *(_BYTE *)(a1 + 56) >= 0) )\n  {\n    if ( v11 )\n    {\n      v130 = 1;\n      if ( a5 )\n        return v130;\n    }\n    v10 = 0LL;\n    v11 = 0LL;\n  }\n  v129 = 1;\n  if ( !a7 )\n    v129 = *(_QWORD *)(v121 + 152) != 0LL;\n  v20 = *(_QWORD *)(a1 + 40);\n  v21 = *(_DWORD *)(v121 + 180);\n  v115 = *(_QWORD *)(v128 + 24);\n  v22 = *(_QWORD *)(v121 + 16);\n  v177 = v21;\n  v23 = v22 + 1;\n  v138 = v20;\n  if ( v22 + 1 < v21 )\n    v23 = v21;\n  v168 = v20;\n  v164 = v136;\n  v163 = v136;\n  if ( v23 > v136 + 1 )\n    v23 = v136 + 1;\n  v166 = v136;\n  v165 = v136;\n  v154 = v135;\n  v170 = (v115 & 0x400000) != 0;\n  v24 = *(_BYTE *)(v121 + 176);\n  v173 = (v20 | v115 & 0x400000) != 0;\n  v172 = (v24 >> 3) & 1;\n  v171 = (v24 >> 2) & 1;\n  v130 = sub_40B170((__int64)&v154, v23);\n  if ( v130 )\n    goto LABEL_132;\n  v169 = v121 + 184;\n  v176 = (*(_BYTE *)(v121 + 176) >> 4) & 1;\n  if ( v173 || (v25 = *(_DWORD *)(v121 + 180) <= 1, v155 = v135, v26 = v136, !v25) )\n    v26 = 0LL;\n  v159 = v26;\n  v160 = v26;\n  v166 = v9;\n  v27 = *(_BYTE *)(v128 + 56);\n  v165 = v9;\n  v175 = v27 >> 7;\n  v28 = *(_QWORD *)(v121 + 152);\n  v180 = -1LL;\n  v179 = a9;\n  if ( 2 * v28 > 0 )\n  {\n    if ( 2 * v28 > 461168601842738790LL )\n      goto LABEL_206;\n    v29 = malloc(80 * v28);\n    v186 = v29;\n    v189 = malloc(16 * v28);\n    if ( !v189 || !v29 )\n      goto LABEL_206;\n  }\n  v185 = 2 * v28;\n  v187 = 1;\n  v188 = 2 * v28;\n  if ( a7 > 1 || *(_BYTE *)(v121 + 176) & 2 )\n  {\n    if ( (unsigned __int64)v161 > 0x1FFFFFFFFFFFFFFELL )\n      goto LABEL_206;\n    v30 = malloc(8 * v161 + 8);\n    ptr = v30;\n    if ( !v30 )\n      goto LABEL_200;\n  }\n  else\n  {\n    ptr = 0LL;\n  }\n  v148 = v11;\n  v167 = (a9 & 1u) < 1 ? 6 : 4;\n  v141 = 2 * (v11 <= v10) - 1;\n  v31 = v10;\n  if ( v11 <= v10 )\n    v31 = v11;\n  v137 = v31;\n  v32 = v10;\n  if ( v11 >= v10 )\n    v32 = v11;\n  v134 = v32;\n  v33 = 8;\n  v143 = *(_DWORD *)(v121 + 180);\n  if ( v133 )\n  {\n    v34 = 4;\n    if ( *(_DWORD *)(v121 + 180) != 1 )\n      v34 = 4 * ((v138 | *(_QWORD *)(v128 + 24) & 0x400000LL) == 0);\n    v33 = (2 * (v11 <= v10)) | v34 | (v138 != 0);\n  }\n  if ( v11 < v137 || v11 > v134 )\n    goto LABEL_123;\n  v35 = 0LL;\n  if ( v11 <= v10 )\n    v35 = &v148;\n  v142 = v35;\n  v145 = v35 != 0LL;\n  v36 = v33 - 4;\n  v140 = v36;\nLABEL_50:\n  switch ( v36 )\n  {\n    case 0:\n    case 1:\n      if ( v137 > v11 )\n        goto LABEL_123;\n      v37 = 0;\n      v38 = v11;\n      do\n      {\n        v39 = 0LL;\n        if ( v136 > v38 )\n          v39 = *(unsigned __int8 *)(v135 + v38);\n        if ( v138 )\n          v39 = *(unsigned __int8 *)(v138 + v39);\n        if ( v133[v39] )\n        {\n          if ( v37 )\n          {\n            v148 = v38;\n            v11 = v38;\n          }\n          goto LABEL_62;\n        }\n        --v38;\n        v37 = 1;\n      }\n      while ( v38 >= v137 );\n      v148 = v38;\n      v30 = ptr;\n      v130 = 1;\n      goto LABEL_133;\n    case 2:\n      if ( v134 <= v11 )\n        goto LABEL_117;\n      v60 = v11 + 1;\n      if ( v133[*(unsigned __int8 *)(v135 + v11)] )\n        goto LABEL_62;\n      while ( 1 )\n      {\n        v11 = v60;\n        if ( v134 == v60 )\n          break;\n        v61 = *(unsigned __int8 *)(v135 + v60++);\n        if ( v133[v61] )\n          goto LABEL_229;\n      }\n      v148 = v134;\n      goto LABEL_117;\n    case 3:\n      if ( v134 <= v11 )\n        goto LABEL_117;\n      v57 = v11 + 1;\n      if ( v133[*(unsigned __int8 *)(v138 + *(unsigned __int8 *)(v135 + v11))] )\n        goto LABEL_62;\n      break;\n    case 4:\n      goto LABEL_62;\n    default:\n      goto LABEL_185;\n  }\n  while ( 1 )\n  {\n    v11 = v57;\n    if ( v134 == v57 )\n      break;\n    v58 = *(unsigned __int8 *)(v138 + *(unsigned __int8 *)(v135 + v57++));\n    if ( v133[v58] )\n    {\nLABEL_229:\n      v148 = v11;\n      goto LABEL_62;\n    }\n  }\n  v148 = v134;\nLABEL_117:\n  if ( v134 == v11 )\n  {\n    v59 = 0LL;\n    if ( v136 > v134 )\n      v59 = *(unsigned __int8 *)(v135 + v134);\n    if ( v138 )\n      v59 = *(unsigned __int8 *)(v138 + v59);\n    if ( !v133[v59] )\n    {\nLABEL_123:\n      v30 = ptr;\n      v130 = 1;\n      goto LABEL_133;\n    }\n  }\nLABEL_62:\n  v130 = sub_40E8B0((__int64)&v154, v11, a9);\n  if ( v130 )\n    goto LABEL_132;\n  if ( v143 != 1 && v159 && *v156 == -1 )\n    goto LABEL_182;\n  v40 = (_QWORD *)v178;\n  v187 = 0;\n  v184 = 0LL;\n  v41 = *(__int64 **)(v178 + 72);\n  v183 = 0LL;\n  v146 = 0;\n  v119 = v162;\n  if ( *((_BYTE *)v41 + 104) < 0 )\n  {\n    v42 = sub_40E5C0((__int64)&v154, v162 - 1, v179);\n    if ( v42 & 1 )\n    {\n      v41 = (__int64 *)v40[10];\nLABEL_226:\n      if ( v41 )\n        goto LABEL_72;\n      v130 = v146;\n      if ( v146 != 12 )\n        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 0x431u, \"check_matching\");\nLABEL_132:\n      v30 = ptr;\n      goto LABEL_133;\n    }\n    if ( v42 )\n    {\n      if ( (v42 & 6) == 6 )\n      {\n        v41 = (__int64 *)v40[12];\n      }\n      else if ( v42 & 2 )\n      {\n        v41 = (__int64 *)v40[11];\n      }\n      else\n      {\n        if ( !(v42 & 4) )\n          goto LABEL_72;\n        v41 = sub_40DB40(&v146, v40, v41[10], v42);\n      }\n      goto LABEL_226;\n    }\n  }\nLABEL_72:\n  if ( !ptr || (v43 = v40[19] == 0LL, *((_QWORD *)ptr + v119) = v41, v43) )\n  {\n    v144 = v145;\n    v44 = *((_BYTE *)v41 + 104);\n    goto LABEL_75;\n  }\n  v114 = sub_40E470((__int64)&v154, v41 + 2, v41 + 3, 0LL);\n  v146 = v114;\n  if ( v114 )\n    goto LABEL_278;\n  v44 = *((_BYTE *)v41 + 104);\n  if ( v44 & 0x40 )\n  {\n    v114 = sub_412430((__int64)&v154, v41 + 2, v41 + 3);\n    v146 = v114;\n    if ( !v114 )\n    {\n      v44 = *((_BYTE *)v41 + 104);\n      goto LABEL_266;\n    }\nLABEL_278:\n    v45 = v114;\n    goto LABEL_104;\n  }\nLABEL_266:\n  v144 = 0;\nLABEL_75:\n  LOBYTE(v122) = 0;\n  v45 = -1LL;\n  if ( v44 & 0x10 )\n  {\n    if ( *((_BYTE *)v41 + 104) >= 0 || (v122 = (void *)sub_40E7E0((__int64)&v154, v41[2], v41 + 3, v119)) != 0LL )\n    {\n      v45 = v119;\n      LOBYTE(v122) = 1;\n      if ( !v129 )\n        goto LABEL_104;\n    }\n  }\n  v46 = v162;\n  v124 = v45;\n  v131 = v142;\nLABEL_84:\n  if ( v166 <= v46 )\n    goto LABEL_141;\n  v116 = v46 + 1;\n  if ( (v46 + 1 < v161 || v161 >= v164) && (v116 < v159 || v159 >= v164) )\n  {\n    if ( !(v41[13] & 0x20) )\n      goto LABEL_88;\n  }\n  else\n  {\n    v64 = sub_40BD10(&v154, (unsigned int)(v46 + 2));\n    v146 = v64;\n    if ( v64 )\n    {\n      if ( v64 != 12 )\n        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 0x468u, \"check_matching\");\n      goto LABEL_206;\n    }\n    v46 = v162;\n    if ( !(v41[13] & 0x20) )\n      goto LABEL_88;\n  }\n  v65 = (__int64 *)v178;\n  if ( v41[2] <= 0 )\n    goto LABEL_203;\n  v66 = 0LL;\n  v67 = v46;\n  v132 = (_QWORD *)(v178 + 216);\n  do\n  {\n    v77 = *v65;\n    v78 = *(_QWORD *)(v41[3] + 8 * v66);\n    v79 = *v65 + 16LL * *(_QWORD *)(v41[3] + 8 * v66);\n    if ( !(*(_BYTE *)(v79 + 10) & 0x10) )\n      goto LABEL_163;\n    v80 = *(_DWORD *)(v79 + 8);\n    if ( !(v80 & 0x3FF00) )\n      goto LABEL_155;\n    v127 = *v65;\n    v126 = v67;\n    v81 = sub_40E5C0((__int64)&v154, v67, v179);\n    v67 = v126;\n    v77 = v127;\n    if ( v80 & 0x400 )\n    {\n      if ( !(v81 & 1) || v80 & 0x800 )\n        goto LABEL_163;\n    }\n    else if ( v80 & 0x800 && v81 & 1 )\n    {\n      goto LABEL_163;\n    }\n    if ( (!(v80 & 0x2000) || v81 & 2) && (!((v80 >> 8) & 0x80) || v81 & 8) )\n    {\nLABEL_155:\n      v68 = sub_411010(v77, v132, v78, (__int64)&v154, v67);\n      if ( v68 )\n      {\n        v69 = v162 + v68;\n        if ( v187 >= v68 )\n          v68 = v187;\n        v187 = v68;\n        v70 = sub_40BE60(&v154, v69);\n        v147 = v70;\n        if ( v70 )\n        {\nLABEL_194:\n          v76 = ptr;\nLABEL_195:\n          v146 = v70;\n          if ( !v76 )\n            goto LABEL_199;\nLABEL_196:\n          v51 = 0LL;\nLABEL_92:\n          v51 = sub_412CB0(&v146, (__int64)&v154, v51);\nLABEL_93:\n          if ( !v51 )\n          {\n            v30 = ptr;\n            if ( v146 )\n              goto LABEL_200;\n            if ( ptr && !(!v129 & (unsigned __int8)v122) )\n            {\n              while ( 2 )\n              {\n                v52 = v162;\n                v53 = 0;\n                do\n                {\n                  v54 = v52 + 1;\n                  if ( v183 < v52 + 1 )\n                  {\n                    v45 = v124;\n                    if ( v53 )\n                      v162 = v52;\n                    goto LABEL_102;\n                  }\n                  ++v52;\n                  v53 = 1;\n                }\n                while ( !*((_QWORD *)v30 + v54) );\n                v162 = v54;\n                v63 = sub_412CB0(&v146, (__int64)&v154, 0LL);\n                if ( !v146 )\n                {\n                  if ( !v63 )\n                  {\n                    v30 = ptr;\n                    continue;\n                  }\n                  v51 = v63;\n                  goto LABEL_77;\n                }\n                break;\n              }\n              v51 = v63;\n              if ( v63 )\n                goto LABEL_77;\n            }\nLABEL_141:\n            v45 = v124;\nLABEL_102:\n            if ( v131 )\n              *v131 += v119;\nLABEL_104:\n            if ( v45 == -1LL )\n              goto LABEL_181;\n            if ( v45 != -2LL )\n            {\n              v180 = v45;\n              if ( *(_BYTE *)(v128 + 56) & 0x10 || a7 <= 1 )\n              {\n                if ( !*(_QWORD *)(v121 + 152) )\n                  goto LABEL_131;\n                v55 = ptr;\n                v181 = (void *)sub_40E7E0(\n                                 (__int64)&v154,\n                                 *(_QWORD *)(*((_QWORD *)ptr + v45) + 16LL),\n                                 (__int64 *)(*((_QWORD *)ptr + v45) + 24LL),\n                                 v45);\n                goto LABEL_208;\n              }\n              v55 = ptr;\n              v56 = (void *)sub_40E7E0(\n                              (__int64)&v154,\n                              *(_QWORD *)(*((_QWORD *)ptr + v45) + 16LL),\n                              (__int64 *)(*((_QWORD *)ptr + v45) + 24LL),\n                              v45);\n              v181 = v56;\n              if ( !(*(_BYTE *)(v121 + 176) & 1) )\n              {\n                if ( !*(_QWORD *)(v121 + 152) )\n                {\nLABEL_131:\n                  if ( !a7 )\n                    goto LABEL_132;\n                  v97 = (__int64)(a8 + 2);\n                  if ( a7 <= 1 )\n                  {\n                    *a8 = 0LL;\n                    a8[1] = v180;\n                  }\n                  else\n                  {\n                    do\n                    {\n                      *(_QWORD *)(v97 + 8) = -1LL;\n                      v97 += 16LL;\n                      *(_QWORD *)(v97 - 16) = -1LL;\n                    }\n                    while ( &a8[2 * a7] != (__int64 *)v97 );\n                    *a8 = 0LL;\n                    a8[1] = v180;\n                    if ( !(*(_BYTE *)(v128 + 56) & 0x10) )\n                    {\n                      v98 = 0;\n                      if ( *(_BYTE *)(v121 + 176) & 1 )\n                        v98 = *(_QWORD *)(v121 + 152) > 0LL;\n                      v99 = sub_4119C0((_QWORD *)v128, &v154, a7, a8, v98);\n                      if ( !v99 )\n                      {\n                        v100 = *a8;\n                        goto LABEL_248;\n                      }\nLABEL_270:\n                      v30 = ptr;\n                      v130 = v99;\n                      goto LABEL_133;\n                    }\n                  }\n                  v100 = 0LL;\nLABEL_248:\n                  v101 = v174;\n                  v102 = v159;\n                  v103 = 0LL;\n                  v104 = v157;\n                  v105 = v160;\n                  v106 = v148;\n                  for ( i = a8; ; v100 = *i )\n                  {\n                    if ( v100 != -1 )\n                    {\n                      v108 = i[1];\n                      if ( v101 )\n                      {\n                        if ( v102 == v100 )\n                          v100 = v105;\n                        else\n                          v100 = *(_QWORD *)(v104 + 8 * v100);\n                        *i = v100;\n                        if ( v102 == v108 )\n                          v108 = v105;\n                        else\n                          v108 = *(_QWORD *)(v104 + 8 * v108);\n                      }\n                      *i = v106 + v100;\n                      i[1] = v106 + v108;\n                    }\n                    ++v103;\n                    i += 2;\n                    if ( v103 == a7 )\n                      break;\n                  }\n                  if ( v139 > 0 )\n                  {\n                    v109 = &a8[2 * a7];\n                    do\n                    {\n                      *v109 = -1LL;\n                      v109 += 2;\n                      *(v109 - 1) = -1LL;\n                    }\n                    while ( &a8[2 * (a7 + v139)] != v109 );\n                  }\n                  v30 = ptr;\n                  v110 = *(_QWORD *)(v121 + 224);\n                  if ( v110 )\n                  {\n                    for ( j = 0LL; j != a7 - 1; ++j )\n                    {\n                      v112 = *(_QWORD *)(v110 + 8 * j);\n                      if ( v112 != j )\n                      {\n                        v113 = 2 * j;\n                        a8[v113 + 2] = a8[2 * v112 + 2];\n                        a8[v113 + 3] = a8[2 * *(_QWORD *)(v110 + 8 * j) + 3];\n                      }\n                    }\n                  }\n                  goto LABEL_133;\n                }\nLABEL_208:\n                v56 = v181;\n              }\n              v118 = (__int64 *)v178;\n              if ( v45 > 0x1FFFFFFFFFFFFFFELL )\n              {\n                v30 = v55;\n                v130 = 12;\n                goto LABEL_133;\n              }\n              v90 = v45 + 1;\n              v91 = malloc(8 * (v45 + 1));\n              if ( v91 )\n              {\n                if ( v118[19] )\n                {\n                  v92 = malloc(8 * (v45 + 1));\n                  v123 = v92;\n                  if ( !v92 )\n                  {\n                    free(v91);\n                    v30 = ptr;\n                    v130 = 12;\n                    goto LABEL_133;\n                  }\nLABEL_213:\n                  memset(v92, 0, 8 * v90);\n                  v152 = 0LL;\n                  v149.m128i_i64[0] = (__int64)v91;\n                  v149.m128i_i64[1] = (__int64)v92;\n                  v150 = v56;\n                  v151 = v45;\n                  v153 = 0LL;\n                  v120 = sub_412E70((__int64)&v154, &v149);\n                  free(v153);\n                  if ( v120 )\n                  {\n                    v85 = v120;\n                  }\n                  else\n                  {\n                    if ( !*v91 && !*v92 )\n                    {\n                      while ( --v45 != -1LL )\n                      {\n                        v93 = *((_QWORD *)ptr + v45);\n                        if ( v93 && *(_BYTE *)(v93 + 104) & 0x10 )\n                        {\n                          v90 = v45 + 1;\n                          v56 = (void *)sub_40E7E0((__int64)&v154, *(_QWORD *)(v93 + 16), (__int64 *)(v93 + 24), v45);\n                          goto LABEL_213;\n                        }\n                      }\n                      free(v91);\n                      free(v92);\n                      sub_40C500(&v154);\n                      v11 = v148;\nLABEL_182:\n                      v11 += v141;\n                      v148 = v11;\n                      if ( v11 >= v137 && v11 <= v134 )\n                      {\n                        v36 = v140;\n                        if ( v140 > 4 )\n                        {\nLABEL_185:\n                          v86 = v134;\n                          while ( 1 )\n                          {\n                            v88 = v11 - v158;\n                            if ( v160 <= v11 - v158 )\n                            {\n                              v117 = v86;\n                              v89 = sub_40E8B0((__int64)&v154, v11, a9);\n                              v86 = v117;\n                              if ( v89 )\n                              {\n                                v130 = v89;\n                                goto LABEL_132;\n                              }\n                              v88 = v11 - v158;\n                            }\n                            v87 = v133;\n                            if ( v136 > v11 )\n                              v87 = &v133[*(unsigned __int8 *)(v155 + v88)];\n                            if ( *v87 )\n                              goto LABEL_62;\n                            v11 += v141;\n                            v148 = v11;\n                            if ( v11 < v137 || v11 > v86 )\n                              goto LABEL_123;\n                          }\n                        }\n                        goto LABEL_50;\n                      }\n                      goto LABEL_123;\n                    }\n                    v85 = sub_40E030(v118, (__int64)v91, (__int64)v92, v90);\n                    free(v92);\n                    if ( !v85 )\n                    {\nLABEL_221:\n                      v94 = (__int64)v56;\n                      v95 = v45;\n                      v96 = v94;\n                      free(ptr);\n                      ptr = v91;\n                      v181 = (void *)v96;\n                      v180 = v95;\n                      goto LABEL_131;\n                    }\nLABEL_272:\n                    v123 = 0LL;\n                  }\n                  free(v91);\n                  free(v123);\n                  v99 = v85;\n                  if ( v85 != 1 )\n                    goto LABEL_270;\n                }\n                else\n                {\n                  v149 = (__m128i)(unsigned __int64)v91;\n                  v150 = v56;\n                  v151 = v45;\n                  v152 = 0LL;\n                  v153 = 0LL;\n                  v85 = sub_412E70((__int64)&v154, &v149);\n                  free(v153);\n                  if ( v85 )\n                    goto LABEL_272;\n                  if ( *v91 )\n                    goto LABEL_221;\n                  free(v91);\n                }\nLABEL_181:\n                sub_40C500(&v154);\n                v11 = v148;\n                goto LABEL_182;\n              }\n            }\nLABEL_206:\n            v30 = ptr;\n            v130 = 12;\n            goto LABEL_133;\n          }\nLABEL_77:\n          v46 = v162;\n          v43 = ((v41 == v51) & v144) == 0;\n          v144 &= v41 == v51;\n          v47 = v116;\n          if ( v43 )\n            v47 = v119;\n          v119 = v47;\n          v48 = *((_BYTE *)v51 + 104);\n          if ( v48 & 0x10 && (v48 >= 0 || sub_40E7E0((__int64)&v154, v51[2], v51 + 3, v162)) )\n          {\n            if ( !v129 )\n            {\n              v45 = v46;\n              goto LABEL_104;\n            }\n            v124 = v46;\n            LOBYTE(v122) = 1;\n            v131 = 0LL;\n          }\n          v41 = v51;\n          goto LABEL_84;\n        }\n        v125 = (char *)ptr + 8 * v69;\n        v71 = v65[6] + 24LL * *(_QWORD *)(v65[3] + 8 * v78);\n        if ( *(_QWORD *)v125 )\n        {\n          v70 = sub_40D9B0((__int64)&v149, *(_QWORD *)(*(_QWORD *)v125 + 80LL), v71);\n          v147 = v70;\n          if ( v70 )\n            goto LABEL_194;\n          v72 = sub_40E5C0((__int64)&v154, v69 - 1, v179);\n          v73 = (__int64 **)((char *)ptr + 8 * v69);\n          v74 = sub_40DB40(&v147, v65, (__int64)&v149, v72);\n          v75 = v150;\n          *v73 = v74;\n          free(v75);\n          v76 = ptr;\n          if ( *((_QWORD *)ptr + v69) )\n            goto LABEL_162;\nLABEL_171:\n          v70 = v147;\n          if ( v147 )\n            goto LABEL_195;\n          goto LABEL_162;\n        }\n        v149 = _mm_loadu_si128((const __m128i *)v71);\n        v150 = *(void **)(v71 + 16);\n        v82 = sub_40E5C0((__int64)&v154, v69 - 1, v179);\n        v83 = sub_40DB40(&v147, v65, (__int64)&v149, v82);\n        v76 = ptr;\n        *(_QWORD *)v125 = v83;\n        if ( !v76[v69] )\n          goto LABEL_171;\n      }\nLABEL_162:\n      v67 = v162;\n    }\nLABEL_163:\n    ++v66;\n  }\n  while ( v66 < v41[2] );\n  v46 = v67;\nLABEL_203:\n  v146 = 0;\nLABEL_88:\n  v162 = v46 + 1;\n  v49 = *(unsigned __int8 *)(v155 + v46);\n  while ( 2 )\n  {\n    v50 = v41[11];\n    if ( v50 )\n    {\n      v51 = *(__int64 **)(v50 + 8 * v49);\n      goto LABEL_91;\n    }\n    v84 = v41[12];\n    if ( v84 )\n    {\n      if ( sub_40E5C0((__int64)&v154, v162 - 1, v179) & 1 )\n        v51 = *(__int64 **)(v84 + 8 * v49 + 2048);\n      else\n        v51 = *(__int64 **)(v84 + 8 * v49);\nLABEL_91:\n      if ( !ptr )\n        goto LABEL_93;\n      goto LABEL_92;\n    }\n    if ( sub_40F2D0(v178, v41) )\n      continue;\n    break;\n  }\n  v146 = 12;\n  if ( ptr )\n    goto LABEL_196;\nLABEL_199:\n  v30 = 0LL;\nLABEL_200:\n  v130 = 12;\nLABEL_133:\n  free(v30);\n  if ( *(_QWORD *)(v121 + 152) )\n  {\n    sub_40C500(&v154);\n    free(v189);\n    free(v186);\n  }\n  sub_40C4C0((__int64)&v154);\n  return v130;\n}\n", 
            "funcStartAddr": "0x4131a0L", 
            "funcEndAddr": "0x4148f6L", 
            "funcName": "sub_4131A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_414900(__int64 a1, const __m128i *a2, __int64 a3, __int64 *a4)\n{\n  __int64 v4; // r14\n  __int64 *v5; // rbp\n  __int64 v6; // rcx\n  const __m128i *v7; // rbx\n  __int64 *v8; // r12\n  __int64 v9; // rdx\n  __int64 v10; // rcx\n  __int64 v11; // rdi\n  __int64 result; // rax\n  _QWORD *v13; // r15\n  __int64 v14; // r13\n  __int64 v15; // rdi\n  void *v16; // rax\n  bool v17; // cc\n  _QWORD *v18; // r13\n  __int64 v19; // r12\n  __int64 i; // rax\n  __int64 v21; // rdi\n  __int64 v22; // rdx\n  __int64 *v23; // r13\n  __int64 v24; // r15\n  const __m128i *v25; // r14\n  __int64 v26; // rbp\n  char v27; // al\n  __int64 v28; // r12\n  __int64 j; // rbx\n  __int64 v30; // r9\n  __int64 v31; // rax\n  __int64 v32; // r9\n  __int64 v33; // r10\n  __int64 v34; // rbx\n  __int64 v35; // rsi\n  __int64 v36; // rdx\n  __int64 v37; // r9\n  __int64 v38; // rax\n  __int64 v39; // r9\n  __int64 *v40; // r10\n  __int64 v41; // rax\n  __int64 v42; // r10\n  _QWORD *v43; // rbx\n  __int64 v44; // r8\n  __m128i v45; // xmm1\n  __m128i v46; // xmm2\n  void *v47; // rax\n  __int64 v48; // r15\n  _QWORD *v49; // rdx\n  __int64 v50; // rax\n  __int64 v51; // rsi\n  __int64 v52; // r8\n  __int64 v53; // r13\n  __int64 v54; // rbx\n  __int64 v55; // rax\n  __int64 v56; // r10\n  __int64 v57; // r9\n  __int64 v58; // r11\n  __int64 *v59; // rcx\n  __int64 v60; // rsi\n  __int64 v61; // rdx\n  int v62; // er13\n  __int64 v63; // r13\n  __int64 v64; // rbx\n  __int64 v65; // rax\n  __int64 v66; // rdx\n  __int64 v67; // r9\n  __int64 v68; // r10\n  _QWORD *v69; // [rsp+8h] [rbp-D0h]\n  unsigned int v70; // [rsp+8h] [rbp-D0h]\n  __int64 v71; // [rsp+10h] [rbp-C8h]\n  __int64 v72; // [rsp+18h] [rbp-C0h]\n  __int64 v73; // [rsp+20h] [rbp-B8h]\n  __int64 v74; // [rsp+20h] [rbp-B8h]\n  __int64 v75; // [rsp+28h] [rbp-B0h]\n  __int64 v76; // [rsp+30h] [rbp-A8h]\n  const __m128i *v77; // [rsp+30h] [rbp-A8h]\n  __int64 v78; // [rsp+30h] [rbp-A8h]\n  __int64 v79; // [rsp+38h] [rbp-A0h]\n  const __m128i *v80; // [rsp+38h] [rbp-A0h]\n  __int64 v81; // [rsp+40h] [rbp-98h]\n  unsigned int v82; // [rsp+5Ch] [rbp-7Ch]\n  __m128i v83; // [rsp+60h] [rbp-78h]\n  __m128i v84; // [rsp+70h] [rbp-68h]\n  __m128i v85; // [rsp+80h] [rbp-58h]\n  void *ptr; // [rsp+90h] [rbp-48h]\n\n  v4 = a3;\n  v5 = a4;\n  v6 = 8 * a3;\n  v7 = a2;\n  v8 = *(__int64 **)(a1 + 152);\n  v9 = v5[1];\n  v72 = v6;\n  v10 = *(_QWORD *)(a1 + 184) + v6;\n  v69 = (_QWORD *)a1;\n  v11 = *(_QWORD *)v10;\n  v82 = 0;\n  v71 = v11;\n  if ( !v11 )\n  {\n    if ( v9 )\n    {\n      v43 = (_QWORD *)(a2->m128i_i64[0] + v72);\n      *v43 = sub_40DE40(&v82, v8, (__int64)v5);\n      result = v82;\n    }\n    else\n    {\n      *(_QWORD *)(a2->m128i_i64[0] + v72) = 0LL;\n      result = 0LL;\n    }\n    return result;\n  }\n  if ( !v9 )\n  {\n    *(_QWORD *)(a2->m128i_i64[0] + 8 * v4) = 0LL;\n    result = 0LL;\n    if ( !(*(_BYTE *)(*(_QWORD *)v10 + 104LL) & 0x40) )\n      return result;\n    goto LABEL_17;\n  }\n  v83.m128i_i32[0] = 0;\n  v13 = sub_40DE40(&v83, v8, (__int64)v5);\n  result = v83.m128i_u32[0];\n  if ( v83.m128i_i32[0] )\n    return result;\n  v14 = v13[7];\n  v73 = (__int64)(v13 + 7);\n  if ( !v14 )\n  {\n    v15 = v5[1];\n    v13[8] = 0LL;\n    v13[7] = v15;\n    v16 = malloc(8 * v15);\n    v13[9] = v16;\n    if ( !v16 )\n      return 12LL;\n    v17 = v5[1] <= 0;\n    v83.m128i_i32[0] = 0;\n    if ( !v17 )\n    {\n      do\n      {\n        v83.m128i_i32[0] = sub_40CDD0(v73, v8[7] + 24LL * *(_QWORD *)(v5[2] + 8 * v14));\n        if ( v83.m128i_i32[0] )\n          return 12LL;\n      }\n      while ( ++v14 < v5[1] );\n    }\n  }\n  v75 = v71 + 8;\n  result = sub_40D340(v5, v71 + 8, v73);\n  v82 = result;\n  if ( (_DWORD)result )\n    return result;\n  if ( a2[2].m128i_i64[1] )\n  {\n    v74 = v69[27];\n    if ( a2[2].m128i_i64[1] <= 0 )\n    {\nLABEL_80:\n      v82 = 0;\n      goto LABEL_15;\n    }\n    v48 = 0LL;\n    while ( 1 )\n    {\n      v49 = (_QWORD *)(v74 + 40LL * *(_QWORD *)(v7[3].m128i_i64[0] + 8 * v48));\n      if ( v4 <= v49[2] || v4 > v49[1] )\n        goto LABEL_79;\n      v50 = *v8;\n      v51 = v5[1];\n      v52 = *(_QWORD *)(*v8 + 16LL * *v49);\n      if ( v4 != v49[3] )\n      {\n        v53 = 0LL;\n        if ( v51 <= 0 )\n          goto LABEL_79;\n        v77 = v7;\n        v54 = *(_QWORD *)(*v8 + 16LL * *v49);\n        while ( 1 )\n        {\n          v55 = 16LL * *(_QWORD *)(v5[2] + 8 * v53) + v50;\n          if ( (unsigned int)*(unsigned __int8 *)(v55 + 8) - 8 > 1 || v54 != *(_QWORD *)v55 )\n          {\n            if ( ++v53 >= v5[1] )\n              goto LABEL_78;\n          }\n          else\n          {\n            result = sub_40F0A0(v8, *(_QWORD *)(v5[2] + 8 * v53), (__int64)v5, v75);\n            if ( (_DWORD)result )\n              return result;\n            if ( ++v53 >= v5[1] )\n            {\nLABEL_78:\n              v7 = v77;\n              goto LABEL_79;\n            }\n          }\n          v50 = *v8;\n        }\n      }\n      if ( v51 <= 0 )\n        goto LABEL_79;\n      v56 = v5[2];\n      v57 = -1LL;\n      v58 = v56 + 8 * v51;\n      v59 = (__int64 *)v5[2];\n      v60 = -1LL;\n      do\n      {\n        while ( 1 )\n        {\n          v61 = v50 + 16 * *v59;\n          v62 = *(unsigned __int8 *)(v61 + 8);\n          if ( v62 != 8 )\n            break;\n          if ( v52 == *(_QWORD *)v61 )\n            v60 = *v59;\n          ++v59;\n          if ( (__int64 *)v58 == v59 )\n            goto LABEL_91;\n        }\n        if ( v62 == 9 && v52 == *(_QWORD *)v61 )\n          v57 = *v59;\n        ++v59;\n      }\n      while ( (__int64 *)v58 != v59 );\nLABEL_91:\n      v63 = v57;\n      v78 = v57;\n      if ( v60 >= 0 )\n      {\n        result = sub_40F0A0(v8, v60, (__int64)v5, v75);\n        if ( (_DWORD)result )\n          return result;\n        if ( v63 >= 0 && v5[1] > 0 )\n        {\n          v56 = v5[2];\nLABEL_93:\n          v80 = v7;\n          v64 = 0LL;\n          while ( 1 )\n          {\n            v65 = 24LL * *(_QWORD *)(v56 + 8 * v64) + v8[7];\n            if ( sub_40C890(*(_QWORD *)(v65 + 8), (__int64 *)(v65 + 16), v78)\n              || sub_40C890(*(_QWORD *)(v8[6] + v67 + 8), (__int64 *)(v8[6] + v67 + 16), v66) )\n            {\n              ++v64;\n            }\n            else\n            {\n              result = sub_40F0A0(v8, v68, (__int64)v5, v75);\n              if ( (_DWORD)result )\n                return result;\n            }\n            if ( v5[1] <= v64 )\n              break;\n            v56 = v5[2];\n          }\n          v7 = v80;\n          goto LABEL_79;\n        }\n      }\n      else if ( v57 >= 0 )\n      {\n        goto LABEL_93;\n      }\nLABEL_79:\n      if ( ++v48 >= v7[2].m128i_i64[1] )\n        goto LABEL_80;\n    }\n  }\nLABEL_15:\n  v18 = (_QWORD *)(v7->m128i_i64[0] + v72);\n  *v18 = sub_40DE40(&v82, v8, (__int64)v5);\n  result = v82;\n  if ( v82 )\n    return result;\n  result = 0LL;\n  if ( !(*(_BYTE *)(*(_QWORD *)(v69[23] + v72) + 104LL) & 0x40) )\n    return result;\nLABEL_17:\n  v19 = 0LL;\n  for ( i = v69[25]; v19 < i; i = v22 )\n  {\n    v21 = v69[27];\n    v22 = (v19 + i) / 2;\n    if ( v4 <= *(_QWORD *)(v21 + 40 * v22 + 8) )\n    {\n      while ( v19 < v22 )\n      {\n        v44 = (v19 + v22) / 2;\n        if ( v4 > *(_QWORD *)(v21 + 40 * v44 + 8) )\n          goto LABEL_60;\n        v22 = (v19 + v22) / 2;\n      }\n      break;\n    }\n    v44 = (v19 + i) / 2;\n    v22 = i;\nLABEL_60:\n    v19 = v44 + 1;\n  }\n  if ( v69[25] <= v19 )\n    return 0LL;\n  v79 = 40 * v19;\n  if ( v4 != *(_QWORD *)(v69[27] + 40 * v19 + 8) )\n    return 0LL;\n  if ( v19 == -1 )\n    return 0LL;\n  v23 = (__int64 *)v69[19];\n  v83.m128i_i64[0] = 0LL;\n  if ( *(_QWORD *)(v71 + 16) <= 0LL )\n    return 0LL;\n  v76 = v4;\n  v24 = 0LL;\n  v25 = v7;\n  v81 = v19;\n  while ( 1 )\n  {\n    v26 = *(_QWORD *)(*(_QWORD *)(v71 + 24) + 8 * v24);\n    v27 = *(_BYTE *)(*v23 + 16LL * *(_QWORD *)(*(_QWORD *)(v71 + 24) + 8 * v24) + 8);\n    if ( v26 != v25[1].m128i_i64[0] )\n    {\n      if ( v27 == 4 )\n        break;\n      goto LABEL_30;\n    }\n    if ( v76 != v25[1].m128i_i64[1] && v27 == 4 )\n      break;\nLABEL_30:\n    if ( ++v24 >= *(_QWORD *)(v71 + 16) )\n    {\n      if ( v83.m128i_i64[0] )\n      {\n        LODWORD(result) = 0;\n        goto LABEL_63;\n      }\n      return 0LL;\n    }\n  }\n  v28 = v81;\n  for ( j = v69[27] + v79; ; j += 40LL )\n  {\n    if ( v26 != *(_QWORD *)j )\n      goto LABEL_50;\n    v41 = *(_QWORD *)(j + 24) - *(_QWORD *)(j + 16);\n    v42 = v76 + v41;\n    v30 = v41 ? *(_QWORD *)(v23[3] + 8 * v26) : **(_QWORD **)(v23[5] + 24 * v26 + 16);\n    if ( v42 > v25[1].m128i_i64[1] )\n      goto LABEL_50;\n    v31 = *(_QWORD *)(v25->m128i_i64[0] + 8 * v42);\n    if ( !v31\n      || !sub_40C890(*(_QWORD *)(v31 + 16), (__int64 *)(v31 + 24), v30)\n      || (unsigned __int8)sub_40CB20(v69, &v25[2].m128i_i64[1], (const __m128i *)v25[3].m128i_i64, v26, v76, v32, v33) )\n    {\n      goto LABEL_50;\n    }\n    if ( !v83.m128i_i64[0] )\n    {\n      v45 = _mm_load_si128(v25 + 1);\n      v46 = _mm_load_si128(v25 + 2);\n      v47 = (void *)v25[3].m128i_i64[0];\n      v83 = _mm_load_si128(v25);\n      v84 = v45;\n      v85 = v46;\n      ptr = v47;\n      result = sub_40D930((__int64)&v85, (__int64)v25[2].m128i_i64);\n      if ( (_DWORD)result )\n        goto LABEL_62;\n    }\n    v84.m128i_i64[0] = v26;\n    v84.m128i_i64[1] = v76;\n    if ( !(unsigned __int8)sub_40B280(&v85, v28) )\n      break;\n    v34 = *(_QWORD *)(v83.m128i_i64[0] + v72);\n    result = sub_412E70((__int64)v69, &v83);\n    if ( (_DWORD)result )\n      goto LABEL_62;\n    v35 = v25->m128i_i64[1];\n    v36 = v83.m128i_i64[0];\n    if ( v35 )\n    {\n      result = sub_40E030(v23, v35, v83.m128i_i64[0], v76 + 1);\n      if ( (_DWORD)result )\n        goto LABEL_62;\n      v36 = v83.m128i_i64[0];\n    }\n    v37 = v85.m128i_i64[1];\n    *(_QWORD *)(v36 + v72) = v34;\n    v38 = sub_40C890(v37, (__int64 *)&ptr, v28) - 1;\n    if ( v38 >= 0 && v39 > v38 )\n    {\n      v85.m128i_i64[1] = v39 - 1;\n      sub_40CA00(&v85.m128i_i64[1], v40, v38);\n    }\n    j = v69[27] + 40 * v28;\nLABEL_50:\n    ++v28;\n    if ( !*(_BYTE *)(j + 32) )\n      goto LABEL_30;\n  }\n  result = 12LL;\nLABEL_62:\n  if ( v83.m128i_i64[0] )\n  {\nLABEL_63:\n    v70 = result;\n    free(ptr);\n    result = v70;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x414900L", 
            "funcEndAddr": "0x415129L", 
            "funcName": "sub_414900"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_415130(_DWORD *a1, __int64 a2, char *a3, int a4, char a5, char a6)\n{\n  __int64 v6; // r10\n  __int64 v7; // r11\n  char *v8; // rbp\n  __int64 v9; // r12\n  int v10; // eax\n  char v11; // al\n  __int64 v12; // r11\n  char v13; // al\n  __int64 result; // rax\n  __int64 v15; // rdx\n  char v16; // r9\n  __int64 v17; // r8\n  __int64 v18; // r12\n  __int64 v19; // rdx\n  __int64 v20; // rax\n  char v21; // r13\n  char v22; // dl\n  __int64 v23; // rax\n  char *v24; // r11\n  __int64 v25; // [rsp+0h] [rbp-38h]\n  char v26; // [rsp+8h] [rbp-30h]\n\n  v6 = a2;\n  v7 = a4;\n  v8 = a3;\n  v9 = *(_QWORD *)(a2 + 72);\n  if ( *(_DWORD *)(a2 + 144) != 1 )\n  {\n    v10 = sub_40C840(a2, *(_QWORD *)(a2 + 72));\n    if ( v10 > 1 )\n    {\n      v15 = *(_QWORD *)(v6 + 16);\n      *a1 = 1;\n      a1[2] = *(_DWORD *)(v15 + 4 * v9);\n      *(_QWORD *)(v6 + 72) = v9 + v10;\n      return 0LL;\n    }\n  }\n  v11 = v8[8];\n  v12 = v9 + v7;\n  *(_QWORD *)(v6 + 72) = v12;\n  if ( (v11 & 0xFB) != 26 && v11 != 28 )\n  {\n    if ( v11 != 22 || a6 || (sub_40ADA0(&v25, v6, a5), result = 11LL, v26 == 21) )\n    {\n      v13 = *v8;\n      *a1 = 0;\n      *((_BYTE *)a1 + 8) = v13;\n      result = 0LL;\n    }\n    return result;\n  }\n  if ( v12 >= *(_QWORD *)(v6 + 104) )\n    return 7LL;\n  v16 = *v8;\n  v17 = 0LL;\n  while ( 1 )\n  {\n    v18 = (int)v17;\n    if ( v11 != 30 || !*(_BYTE *)(v6 + 139) )\n    {\nLABEL_15:\n      v19 = *(_QWORD *)(v6 + 8);\n      v20 = v12 + 1;\n      *(_QWORD *)(v6 + 72) = v12 + 1;\n      v21 = *(_BYTE *)(v19 + v12);\n      goto LABEL_16;\n    }\n    if ( *(_BYTE *)(v6 + 140) )\n    {\n      if ( v12 != *(_QWORD *)(v6 + 48) && *(_DWORD *)(*(_QWORD *)(v6 + 16) + 4 * v12) == -1 )\n        goto LABEL_15;\n      v21 = *(_BYTE *)(*(_QWORD *)(v6 + 40) + *(_QWORD *)v6 + *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12));\n      if ( v21 < 0 )\n        goto LABEL_15;\n      v23 = 1LL;\n      if ( *(_DWORD *)(v6 + 144) != 1 )\n        v23 = (int)sub_40C840(v6, v12);\n      v20 = v12 + v23;\n      *(_QWORD *)(v6 + 72) = v20;\n    }\n    else\n    {\n      v20 = v12 + 1;\n      v24 = (char *)(*(_QWORD *)(v6 + 40) + *(_QWORD *)v6 + v12);\n      *(_QWORD *)(v6 + 72) = v20;\n      v21 = *v24;\n    }\nLABEL_16:\n    if ( *(_QWORD *)(v6 + 104) <= v20 )\n      return 7LL;\n    if ( v16 == v21 && *(_BYTE *)(*(_QWORD *)(v6 + 8) + v20) == 93 )\n      break;\n    *(_BYTE *)(*((_QWORD *)a1 + 1) + v17++) = v21;\n    if ( v17 == 32 )\n      return 7LL;\n    v11 = v8[8];\n    v12 = *(_QWORD *)(v6 + 72);\n  }\n  *(_QWORD *)(v6 + 72) = v20 + 1;\n  *(_BYTE *)(*((_QWORD *)a1 + 1) + v18) = 0;\n  v22 = v8[8];\n  if ( v22 == 28 )\n  {\n    *a1 = 2;\n    result = 0LL;\n  }\n  else if ( v22 == 30 )\n  {\n    *a1 = 4;\n    result = 0LL;\n  }\n  else\n  {\n    result = 0LL;\n    if ( v22 == 26 )\n      *a1 = 3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x415130L", 
            "funcEndAddr": "0x41534dL", 
            "funcName": "sub_415130"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_415350(unsigned __int8 *a1, __int64 *a2, __int64 a3)\n{\n  __int64 v3; // r12\n  __int64 v4; // r15\n  __int64 v5; // rdx\n  __int64 *v6; // r13\n  int v7; // eax\n  unsigned __int8 *v8; // rbx\n  unsigned __int8 v9; // bp\n  unsigned __int8 v10; // r14\n  __int64 v11; // rax\n  int v12; // er14\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  unsigned __int8 v16; // r14\n  wint_t v17; // ebp\n  __int64 v18; // r12\n  char v19; // al\n  unsigned __int8 v20; // dl\n  __int64 v21; // rdi\n  __int64 v22; // rsi\n  __int64 v23; // rdi\n  int v24; // eax\n  __int64 v25; // [rsp+8h] [rbp-50h]\n  __int64 v26; // [rsp+8h] [rbp-50h]\n  int v27; // [rsp+8h] [rbp-50h]\n  char v28; // [rsp+10h] [rbp-48h]\n  char v29; // [rsp+18h] [rbp-40h]\n\n  v3 = a2[9];\n  if ( a2[13] <= v3 )\n  {\n    a1[8] = 2;\n    return 0LL;\n  }\n  v4 = a3;\n  v5 = a2[1];\n  v6 = a2;\n  v7 = *((_DWORD *)a2 + 36);\n  v8 = a1;\n  v9 = *(_BYTE *)(v5 + v3);\n  v10 = a1[10] & 0x9F;\n  a1[10] = v10;\n  *a1 = v9;\n  if ( v7 <= 1 )\n  {\n    if ( v9 != 92 )\n    {\n      a1[8] = 1;\n      v26 = v5;\n      a1[10] = (((v9 == 95) | ((*__ctype_b_loc())[v9] >> 3) & 1) << 6) | v10;\n      v13 = v26;\nLABEL_7:\n      switch ( v9 )\n      {\n        case 0xAu:\n          result = 1LL;\n          if ( v4 & 0x800 )\n            goto LABEL_41;\n          break;\n        case 0x24u:\n          if ( v4 & 8\n            || (v18 = v3 + 1, v18 == a2[11])\n            || (a2[9] = v18, sub_415350(&v28, a2, v4), v19 = v29, --a2[9], v20 = v19 - 9, result = 1LL, v20 <= 1u) )\n          {\n            a1[8] = 12;\n            result = 1LL;\n            *(_DWORD *)a1 = 32;\n          }\n          break;\n        case 0x28u:\n          result = 1LL;\n          if ( v4 & 0x2000 )\n            goto LABEL_23;\n          break;\n        case 0x29u:\n          result = 1LL;\n          if ( v4 & 0x2000 )\n            goto LABEL_25;\n          break;\n        case 0x2Au:\n          a1[8] = 11;\n          result = 1LL;\n          break;\n        case 0x2Bu:\n          result = 1LL;\n          if ( !(v4 & 0x402) )\n            goto LABEL_28;\n          break;\n        case 0x2Eu:\n          a1[8] = 5;\n          result = 1LL;\n          break;\n        case 0x3Fu:\n          result = 1LL;\n          if ( !(v4 & 0x402) )\n            goto LABEL_31;\n          break;\n        case 0x5Bu:\n          a1[8] = 20;\n          result = 1LL;\n          break;\n        case 0x5Eu:\n          if ( !(v4 & 0x800008) && v3 && (*(_BYTE *)(v13 + v3 - 1) != 10 || !(v4 & 0x800)) )\n            goto LABEL_39;\n          a1[8] = 12;\n          result = 1LL;\n          *(_DWORD *)a1 = 16;\n          break;\n        case 0x7Bu:\n          result = 1LL;\n          if ( (v4 & 0x1200) == 4608 )\n            goto LABEL_37;\n          break;\n        case 0x7Cu:\n          if ( (v4 & 0x8400) != 0x8000 )\n            goto LABEL_39;\nLABEL_41:\n          a1[8] = 10;\n          result = 1LL;\n          break;\n        case 0x7Du:\n          result = 1LL;\n          if ( (v4 & 0x1200) == 4608 )\n            goto LABEL_47;\n          break;\n        default:\nLABEL_39:\n          result = 1LL;\n          break;\n      }\n      return result;\n    }\n  }\n  else\n  {\n    if ( v3 != a2[6] && *(_DWORD *)(a2[2] + 4 * v3) == -1 )\n    {\n      *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 2) & 0xFFDFFF00 | 0x200001;\n      return 1LL;\n    }\n    if ( v9 != 92 )\n    {\n      v11 = a2[2];\n      a1[8] = 1;\n      v25 = v5;\n      v12 = *(_DWORD *)(v11 + 4 * v3);\n      a1[10] = (((v12 == 95) | (iswalnum(*(_DWORD *)(v11 + 4 * v3)) != 0)) << 6) | a1[10] & 0xBF;\n      v13 = v25;\n      goto LABEL_7;\n    }\n  }\n  v14 = v3 + 1;\n  if ( v3 + 1 >= a2[11] )\n  {\n    a1[8] = 36;\n    return 1LL;\n  }\n  if ( !*((_BYTE *)a2 + 139) )\n    goto LABEL_15;\n  if ( v7 > 1 )\n  {\n    v21 = a2[2];\n    v17 = *(_DWORD *)(v21 + 4 * v14);\n    if ( v17 == -1 || a2[6] != v3 + 2 && *(_DWORD *)(v21 + 4 * v14 + 4) == -1 )\n    {\n      v24 = *(unsigned __int8 *)(v5 + v3 + 1);\n      v8[8] = 1;\n      v16 = v24;\n      *v8 = v24;\n      v27 = v24;\n      goto LABEL_18;\n    }\n  }\n  v22 = *a2;\n  v23 = v6[5];\n  if ( *((_BYTE *)v6 + 140) )\n  {\n    v16 = *(_BYTE *)(*(_QWORD *)(v6[3] + 8 * v14) + v23 + v22);\n    v27 = v16;\n    if ( *(_BYTE *)(*(_QWORD *)(v6[3] + 8 * v14) + v23 + v22) & 0x80 )\n    {\nLABEL_15:\n      v27 = *(unsigned __int8 *)(v5 + v3 + 1);\n      v16 = *(_BYTE *)(v5 + v3 + 1);\n      goto LABEL_16;\n    }\n  }\n  else\n  {\n    v16 = *(_BYTE *)(v14 + v22 + v23);\n    v27 = *(unsigned __int8 *)(v14 + v22 + v23);\n  }\nLABEL_16:\n  *v8 = v16;\n  v8[8] = 1;\n  if ( v7 > 1 )\n  {\n    v17 = *(_DWORD *)(v6[2] + 4 * v14);\nLABEL_18:\n    v8[10] = (((v17 == 95) | (iswalnum(v17) != 0)) << 6) | v8[10] & 0xBF;\n    goto LABEL_19;\n  }\n  v8[10] = v8[10] & 0xBF | (((v16 == 95) | ((*__ctype_b_loc())[v16] >> 3) & 1) << 6);\nLABEL_19:\n  switch ( v16 )\n  {\n    case 0x27u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        v8[8] = 12;\n        *(_DWORD *)v8 = 128;\n      }\n      break;\n    case 0x28u:\n      result = 2LL;\n      if ( !(v4 & 0x2000) )\nLABEL_23:\n        v8[8] = 8;\n      break;\n    case 0x29u:\n      result = 2LL;\n      if ( !(v4 & 0x2000) )\nLABEL_25:\n        v8[8] = 9;\n      break;\n    case 0x2Bu:\n      result = 2LL;\n      if ( (v4 & 0x402) == 2 )\nLABEL_28:\n        v8[8] = 18;\n      break;\n    case 0x31u:\n    case 0x32u:\n    case 0x33u:\n    case 0x34u:\n    case 0x35u:\n    case 0x36u:\n    case 0x37u:\n    case 0x38u:\n    case 0x39u:\n      result = 2LL;\n      if ( !(v4 & 0x4000) )\n      {\n        v8[8] = 4;\n        *(_QWORD *)v8 = v27 - 49;\n      }\n      break;\n    case 0x3Cu:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        v8[8] = 12;\n        *(_DWORD *)v8 = 6;\n      }\n      break;\n    case 0x3Eu:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        v8[8] = 12;\n        *(_DWORD *)v8 = 9;\n      }\n      break;\n    case 0x3Fu:\n      result = 2LL;\n      if ( (v4 & 0x402) == 2 )\nLABEL_31:\n        v8[8] = 19;\n      break;\n    case 0x42u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        v8[8] = 12;\n        *(_DWORD *)v8 = 512;\n      }\n      break;\n    case 0x53u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n        v8[8] = 35;\n      break;\n    case 0x57u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n        v8[8] = 33;\n      break;\n    case 0x60u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        v8[8] = 12;\n        *(_DWORD *)v8 = 64;\n      }\n      break;\n    case 0x62u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n      {\n        v8[8] = 12;\n        *(_DWORD *)v8 = 256;\n      }\n      break;\n    case 0x73u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n        v8[8] = 34;\n      break;\n    case 0x77u:\n      result = 2LL;\n      if ( !(v4 & 0x80000) )\n        v8[8] = 32;\n      break;\n    case 0x7Bu:\n      result = 2LL;\n      if ( (v4 & 0x1200) == 512 )\nLABEL_37:\n        v8[8] = 23;\n      break;\n    case 0x7Cu:\n      result = 2LL;\n      if ( !(v4 & 0x8400) )\n        v8[8] = 10;\n      break;\n    case 0x7Du:\n      result = 2LL;\n      if ( (v4 & 0x1200) == 512 )\nLABEL_47:\n        v8[8] = 24;\n      break;\n    default:\n      result = 2LL;\n      break;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x415350L", 
            "funcEndAddr": "0x4159f3L", 
            "funcName": "sub_415350"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_415A00(__int64 *a1, unsigned __int8 *a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  __int64 v4; // rbx\n  int v5; // eax\n  __int64 v6; // rdx\n  unsigned __int8 v7; // al\n  __int64 v8; // rbx\n\n  v3 = a3;\n  v4 = -1LL;\n  while ( 1 )\n  {\n    v5 = sub_415350(a2, a1, v3);\n    v6 = *a2;\n    a1[9] += v5;\n    v7 = a2[8];\n    if ( v7 == 2 )\n      break;\n    if ( v7 == 24 || (_BYTE)v6 == 44 )\n      return v4;\n    if ( v7 != 1 || (unsigned __int8)(v6 - 48) > 9u || v4 == -2 )\n    {\n      v4 = -2LL;\n    }\n    else if ( v4 == -1 )\n    {\n      v4 = (unsigned __int8)v6 - 48;\n    }\n    else\n    {\n      v8 = v6 + 10 * v4;\n      if ( v8 > 32816 )\n        v8 = 32816LL;\n      v4 = v8 - 48;\n    }\n  }\n  return -2LL;\n}\n", 
            "funcStartAddr": "0x415a00L", 
            "funcEndAddr": "0x415ab6L", 
            "funcName": "sub_415A00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_415AC0(__int64 *a1, __int64 *a2, __m128i *a3, __int64 a4, char *a5, _DWORD *a6)\n{\n  char v6; // al\n  __m128i *v7; // r12\n  __int64 *v8; // r15\n  int v9; // eax\n  unsigned __int64 v10; // rbp\n  __int64 result; // rax\n  unsigned __int64 v12; // rbx\n  _QWORD *v13; // rax\n  __int64 v14; // rax\n  __int64 v15; // rbx\n  __int64 v16; // r13\n  __m128i v17; // xmm0\n  char *v18; // rbp\n  char v19; // al\n  _QWORD *v20; // r13\n  int *v21; // r14\n  char *v22; // rax\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // r12\n  char *v26; // rbp\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  char *v30; // r14\n  __int64 v31; // rbp\n  char *v32; // r15\n  char *v33; // rax\n  char *v34; // rax\n  __int64 v35; // rax\n  __m128i v36; // xmm0\n  char v37; // al\n  __int64 v38; // rax\n  char *v39; // r14\n  char *v40; // rax\n  __int64 v41; // rdx\n  bool v42; // zf\n  void **v43; // r13\n  int v44; // ebx\n  char v45; // al\n  char v46; // r9\n  int v47; // eax\n  int v48; // eax\n  char v49; // dl\n  _DWORD *v50; // rbx\n  __int64 v51; // rsi\n  char *v52; // rcx\n  const char *v53; // rdx\n  _DWORD *v54; // r9\n  bool v55; // r8\n  char *v56; // rax\n  _QWORD *v57; // rbx\n  int *v58; // rbp\n  char *v59; // r14\n  __int64 v60; // rax\n  char *v61; // r13\n  __int64 v62; // rax\n  int v63; // er14\n  char v64; // al\n  char v65; // al\n  _QWORD *v66; // r13\n  int *v67; // rbp\n  char *v68; // rax\n  char *v69; // rbx\n  char *v70; // r14\n  char *v71; // rcx\n  char *v72; // rax\n  int v73; // eax\n  char v74; // al\n  void *v75; // rdx\n  _DWORD *v76; // rax\n  int v77; // eax\n  int v78; // eax\n  int v79; // eax\n  _DWORD *v80; // r9\n  int v81; // eax\n  char v82; // r10\n  int v83; // eax\n  void **v84; // rdx\n  int v85; // esi\n  unsigned __int8 v86; // di\n  int v87; // ecx\n  const char *v88; // r9\n  unsigned int v89; // er8\n  unsigned int v90; // er9\n  void *v91; // rax\n  _DWORD *v92; // rcx\n  _DWORD *v93; // rcx\n  __int64 v94; // rax\n  size_t v95; // rsi\n  _QWORD *v96; // rax\n  int v97; // edx\n  __int64 v98; // rcx\n  __int64 j; // rax\n  _QWORD *v100; // rbp\n  int *v101; // rbx\n  char *v102; // rax\n  char *v103; // rsi\n  _QWORD *v104; // rax\n  char *v105; // rax\n  wint_t v106; // eax\n  int v107; // ebx\n  int v108; // ebp\n  const unsigned __int16 **v109; // rax\n  __int64 v110; // rsi\n  int v111; // er9\n  __int64 v112; // rdi\n  __int64 i; // rax\n  wint_t v114; // eax\n  void *v115; // rdi\n  void *v116; // rax\n  char *ptr; // [rsp+0h] [rbp-118h]\n  __int64 ptra; // [rsp+0h] [rbp-118h]\n  _QWORD *ptrb; // [rsp+0h] [rbp-118h]\n  char *ptrc; // [rsp+0h] [rbp-118h]\n  __int64 v121; // [rsp+8h] [rbp-110h]\n  __int64 v122; // [rsp+10h] [rbp-108h]\n  char *v123; // [rsp+18h] [rbp-100h]\n  __int64 v124; // [rsp+18h] [rbp-100h]\n  void *v125; // [rsp+18h] [rbp-100h]\n  __m128i v126; // [rsp+20h] [rbp-F8h]\n  _DWORD *v127; // [rsp+30h] [rbp-E8h]\n  __m128i *v128; // [rsp+38h] [rbp-E0h]\n  void **v129; // [rsp+40h] [rbp-D8h]\n  void *v130; // [rsp+48h] [rbp-D0h]\n  size_t size; // [rsp+50h] [rbp-C8h]\n  unsigned int v132; // [rsp+58h] [rbp-C0h]\n  unsigned int v133; // [rsp+5Ch] [rbp-BCh]\n  __int64 v134; // [rsp+68h] [rbp-B0h]\n  int v135; // [rsp+70h] [rbp-A8h]\n  void ***v136; // [rsp+78h] [rbp-A0h]\n  int v137; // [rsp+80h] [rbp-98h]\n  const char *v138; // [rsp+88h] [rbp-90h]\n  char v139; // [rsp+90h] [rbp-88h]\n  char v140; // [rsp+98h] [rbp-80h]\n  void **v141; // [rsp+A0h] [rbp-78h]\n  char v142; // [rsp+A8h] [rbp-70h]\n  char v143; // [rsp+C0h] [rbp-58h]\n  char v144; // [rsp+C8h] [rbp-50h]\n\n  v122 = *a2;\n  v6 = a3->m128i_i64[1];\n  v7 = a3;\n  v127 = a6;\n  v121 = a4;\n  v8 = a1;\n  switch ( v6 )\n  {\n    case 1:\n      v57 = (_QWORD *)(v122 + 112);\n      v58 = (int *)(v122 + 128);\n      v123 = sub_40D500((_QWORD *)(v122 + 112), (int *)(v122 + 128), 0LL, 0LL, a3);\n      if ( !v123 )\n        goto LABEL_118;\n      v59 = v123;\n      if ( *(_DWORD *)(v122 + 180) <= 1 )\n        goto LABEL_7;\n      while ( 1 )\n      {\n        v60 = a1[9];\n        if ( a1[13] <= v60 || v60 == a1[6] || *(_DWORD *)(a1[2] + 4 * v60) != -1 )\n          break;\n        a1[9] += (int)sub_415350((unsigned __int8 *)v7, a1, v121);\n        v61 = sub_40D500(v57, v58, 0LL, 0LL, v7);\n        v144 = 16;\n        v59 = sub_40D500(v57, v58, v59, v61, (const __m128i *)&v143);\n        if ( v59 == 0LL || v61 == 0LL )\n          goto LABEL_118;\n      }\n      v123 = v59;\n      goto LABEL_7;\n    case 4:\n      v62 = 1 << a3->m128i_i64[0];\n      if ( !(v62 & *(_QWORD *)(v122 + 168)) )\n      {\n        v123 = 0LL;\n        *v127 = 6;\n        return (__int64)v123;\n      }\n      *(_QWORD *)(v122 + 160) |= v62;\n      v123 = sub_40D500((_QWORD *)(v122 + 112), (int *)(v122 + 128), 0LL, 0LL, a3);\n      if ( !v123 )\n        goto LABEL_118;\n      ++*(_QWORD *)(v122 + 152);\n      *(_BYTE *)(v122 + 176) |= 2u;\n      goto LABEL_7;\n    case 5:\n      v123 = sub_40D500((_QWORD *)(v122 + 112), (int *)(v122 + 128), 0LL, 0LL, a3);\n      if ( !v123 )\n        goto LABEL_118;\n      if ( *(_DWORD *)(v122 + 180) > 1 )\n        *(_BYTE *)(v122 + 176) |= 2u;\n      goto LABEL_7;\n    case 8:\n      v12 = a2[6];\n      ptr = a5;\n      a2[6] = v12 + 1;\n      a1[9] += (int)sub_415350((unsigned __int8 *)a3, a1, a4 | 0x800000);\n      v13 = 0LL;\n      if ( LOBYTE(v7->m128i_i64[1]) == 9 )\n        goto LABEL_138;\n      v13 = (_QWORD *)sub_4170F0(a1, a2, v7, v121, ptr + 1, v127);\n      if ( *v127 )\n        return 0LL;\n      if ( LOBYTE(v7->m128i_i64[1]) != 9 )\n      {\n        if ( v13 )\n          sub_40AD30(v13, (__int64 (__fastcall *)(__int64, _QWORD *))sub_40BF40, 0LL);\n        *v127 = 8;\n        return 0LL;\n      }\nLABEL_138:\n      if ( v12 <= 8 )\n        *(_QWORD *)(v122 + 168) |= 1 << v12;\n      v144 = 17;\n      v72 = sub_40D500((_QWORD *)(v122 + 112), (int *)(v122 + 128), v13, 0LL, (const __m128i *)&v143);\n      v123 = v72;\n      if ( v72 )\n      {\n        *((_QWORD *)v72 + 5) = v12;\n        goto LABEL_7;\n      }\n      goto LABEL_118;\n    case 9:\n      goto LABEL_136;\n    case 11:\n    case 18:\n    case 19:\n      goto LABEL_3;\n    case 12:\n      v63 = a3->m128i_i64[0];\n      if ( !(a3->m128i_i64[0] & 0x30F) )\n        goto LABEL_130;\n      v64 = *(_BYTE *)(v122 + 176);\n      if ( v64 & 0x10 )\n        goto LABEL_130;\n      v65 = v64 | 0x10;\n      *(_BYTE *)(v122 + 176) = v65;\n      if ( v65 & 8 )\n      {\n        v107 = 0;\n        v108 = 0;\n      }\n      else\n      {\n        *(_QWORD *)(v122 + 184) = 287948901175001088LL;\n        *(_QWORD *)(v122 + 192) = 576460745995190270LL;\n        if ( v65 & 4 )\n        {\n          *(_OWORD *)(v122 + 200) = 0LL;\n          v63 = a3->m128i_i64[0];\n          goto LABEL_130;\n        }\n        v107 = 128;\n        v108 = 2;\n      }\n      v109 = __ctype_b_loc();\n      v110 = v122 + 8LL * v108;\n      v111 = v107 + 256 - (v108 << 6);\n      v112 = (__int64)&(*v109)[v107];\n      do\n      {\n        for ( i = 0LL; i != 64; ++i )\n        {\n          if ( *(_BYTE *)(v112 + 2 * i) & 8 || v107 + (_DWORD)i == 95 )\n            *(_QWORD *)(v110 + 184) |= 1LL << i;\n        }\n        v107 += 64;\n        v110 += 8LL;\n        v112 += 128LL;\n      }\n      while ( v111 != v107 );\nLABEL_130:\n      v66 = (_QWORD *)(v122 + 112);\n      v67 = (int *)(v122 + 128);\n      if ( (v63 - 256) & 0xFFFFFEFF )\n      {\n        v123 = sub_40D500((_QWORD *)(v122 + 112), (int *)(v122 + 128), 0LL, 0LL, v7);\n        if ( v123 )\n        {\nLABEL_135:\n          v8[9] += (int)sub_415350((unsigned __int8 *)v7, v8, v121);\n          return (__int64)v123;\n        }\n      }\n      else\n      {\n        if ( v63 == 256 )\n        {\n          LODWORD(v7->m128i_i64[0]) = 6;\n          v68 = sub_40D500(v66, v67, 0LL, 0LL, v7);\n          LODWORD(v7->m128i_i64[0]) = 9;\n        }\n        else\n        {\n          LODWORD(v7->m128i_i64[0]) = 5;\n          v68 = sub_40D500(v66, v67, 0LL, 0LL, v7);\n          LODWORD(v7->m128i_i64[0]) = 10;\n        }\n        v69 = v68;\n        v70 = sub_40D500(v66, v67, 0LL, 0LL, v7);\n        v144 = 10;\n        v71 = sub_40D500(v66, v67, v69, v70, (const __m128i *)&v143);\n        v123 = v71;\n        if ( v70 != 0LL && v69 != 0LL && v71 )\n          goto LABEL_135;\n      }\nLABEL_118:\n      *v127 = 12;\n      return 0LL;\n    case 20:\n      v134 = 0LL;\n      ptrb = calloc(0x20uLL, 1uLL);\n      v43 = (void **)calloc(0x50uLL, 1uLL);\n      if ( v43 == 0LL || ptrb == 0LL )\n      {\n        free(ptrb);\n        free(v43);\n        goto LABEL_118;\n      }\n      v44 = sub_40ADA0(v7, (__int64)a1, v121);\n      v45 = v7->m128i_i64[1];\n      if ( v45 == 2 )\n        goto LABEL_197;\n      LOBYTE(v128) = 0;\n      if ( v45 != 25 )\n        goto LABEL_98;\n      *((_BYTE *)v43 + 32) |= 1u;\n      if ( v121 & 0x100 )\n        *ptrb |= 0x400uLL;\n      a1[9] += v44;\n      v44 = sub_40ADA0(v7, (__int64)a1, v121);\n      v45 = v7->m128i_i64[1];\n      if ( v45 == 2 )\n      {\nLABEL_197:\n        *v127 = 2;\n        goto LABEL_150;\n      }\n      LOBYTE(v128) = 1;\nLABEL_98:\n      if ( v45 == 21 )\n        LOBYTE(v7->m128i_i64[1]) = 1;\n      v126.m128i_i64[0] = 0LL;\n      v46 = 1;\n      v124 = 0LL;\n      break;\n    case 23:\n      if ( a4 & 0x1000000 )\n        goto LABEL_43;\nLABEL_3:\n      if ( a4 & 0x20 )\n        goto LABEL_43;\n      if ( a4 & 0x10 )\n      {\n        ptrc = a5;\n        v79 = sub_415350((unsigned __int8 *)a3, a1, a4);\n        v80 = v127;\n        a1[9] += v79;\n        return sub_415AC0(a1, a2, v7, v121, ptrc, v80);\n      }\n      if ( v6 == 9 )\n      {\nLABEL_136:\n        if ( !(a4 & 0x20000) )\n        {\n          v123 = 0LL;\n          *v127 = 16;\n          return (__int64)v123;\n        }\n      }\nLABEL_6:\n      LOBYTE(a3->m128i_i64[1]) = 1;\n      v123 = sub_40D500((_QWORD *)(v122 + 112), (int *)(v122 + 128), 0LL, 0LL, a3);\n      if ( !v123 )\n        goto LABEL_118;\n      goto LABEL_7;\n    case 24:\n      goto LABEL_6;\n    case 32:\n    case 33:\n      v50 = v127;\n      v51 = a1[15];\n      v52 = \"en_\" + 2;\n      v53 = \"alnum\";\n      v54 = v127;\n      v55 = v6 == 33;\n      goto LABEL_107;\n    case 34:\n    case 35:\n      v50 = v127;\n      v51 = a1[15];\n      v52 = \"%s: invalid option -- '%c'\\n\" + 27;\n      v53 = \"space\";\n      v54 = v127;\n      v55 = v6 == 35;\nLABEL_107:\n      v56 = sub_4108F0(v122, v51, v53, v52, v55, v54);\n      v123 = v56;\n      if ( *v50 && !v56 )\n        return 0LL;\n      goto LABEL_7;\n    case 36:\n      v123 = 0LL;\n      *v127 = 5;\n      return (__int64)v123;\n    default:\n      return 0LL;\n  }\n  while ( 1 )\n  {\n    v136 = &v141;\n    v135 = 3;\n    v47 = sub_415130(&v135, (__int64)v8, (char *)v7->m128i_i64, v44, v121, v46 & 1);\n    if ( v47 )\n    {\nLABEL_162:\n      *v127 = v47;\n      goto LABEL_150;\n    }\n    v44 = sub_40ADA0(v7, (__int64)v8, v121);\n    v48 = v135;\n    if ( !((v135 - 2) & 0xFFFFFFFD) )\n      goto LABEL_105;\n    v49 = v7->m128i_i64[1];\n    if ( v49 == 2 )\n      goto LABEL_160;\n    if ( v49 != 22 )\n      goto LABEL_105;\n    v8[9] += v44;\n    v81 = sub_40ADA0(&v139, (__int64)v8, v121);\n    if ( v140 == 2 )\n    {\nLABEL_160:\n      *v127 = 7;\nLABEL_150:\n      free(ptrb);\n      sub_40BEF0(v43);\n      if ( *v127 )\n        return 0LL;\n      v123 = 0LL;\n      goto LABEL_7;\n    }\n    if ( v140 == 21 )\n    {\n      v8[9] += -v44;\n      v48 = v135;\n      LOBYTE(v7->m128i_i64[1]) = 1;\nLABEL_105:\n      switch ( v48 )\n      {\n        case 0:\n          *(_QWORD *)((char *)ptrb + (((unsigned __int64)(unsigned __int8)v136 >> 3) & 0x18)) |= 1LL << (char)v136;\n          goto LABEL_143;\n        case 1:\n          v75 = v43[5];\n          v76 = *v43;\n          if ( v75 != (void *)v124 )\n            goto LABEL_147;\n          v95 = 4 * (2 * v124 + 1);\n          v124 = 2 * v124 + 1;\n          v76 = realloc(*v43, v95);\n          if ( !v76 )\n            goto LABEL_219;\n          *v43 = v76;\n          v75 = v43[5];\nLABEL_147:\n          v43[5] = (char *)v75 + 1;\n          v76[(_QWORD)v75] = (_DWORD)v136;\n          break;\n        case 2:\n          v73 = sub_4100D0((__int64)ptrb, (const char *)v136);\n          *v127 = v73;\n          if ( !v73 )\n            goto LABEL_143;\n          goto LABEL_150;\n        case 3:\n          v78 = sub_4100D0((__int64)ptrb, (const char *)v136);\n          *v127 = v78;\n          if ( v78 )\n            goto LABEL_150;\n          goto LABEL_143;\n        case 4:\n          v77 = sub_410120(v8[15], (__int64)ptrb, v43 + 3, (__int64 *)v43 + 9, &v134, (const char *)v136, v121);\n          *v127 = v77;\n          if ( v77 )\n            goto LABEL_150;\n          goto LABEL_143;\n        default:\n          __assert_fail(\"0\", \"lib/regcomp.c\", 0xCF3u, \"parse_bracket_exp\");\n          return result;\n      }\n      goto LABEL_143;\n    }\n    v137 = 3;\n    v138 = &v143;\n    v47 = sub_415130(&v137, (__int64)v8, &v139, v81, v82, 1);\n    if ( v47 )\n      goto LABEL_162;\n    v83 = sub_40ADA0(v7, (__int64)v8, v121);\n    v84 = 0LL;\n    v44 = v83;\n    if ( *(_DWORD *)(v122 + 180) >= 2 )\n      v84 = v43;\n    if ( !((v135 - 2) & 0xFFFFFFFD) || (v85 = v137, !((v137 - 2) & 0xFFFFFFFD)) )\n    {\nLABEL_243:\n      *v127 = 11;\n      goto LABEL_150;\n    }\n    LOBYTE(v129) = v135 == 3;\n    if ( v135 == 3 )\n    {\n      if ( strlen((const char *)v136) > 1 || v137 == 3 && strlen(v138) > 1 )\n        goto LABEL_228;\n      v86 = *(_BYTE *)v136;\n    }\n    else\n    {\n      if ( v137 == 3 )\n      {\n        v88 = v138;\n        if ( strlen(v138) > 1 )\n          goto LABEL_228;\n        v86 = 0;\n        if ( v135 )\n          goto LABEL_179;\n      }\n      else if ( v135 )\n      {\n        v86 = 0;\n        v87 = 0;\n        if ( v137 )\n          goto LABEL_180;\n        goto LABEL_242;\n      }\n      v86 = (unsigned __int8)v136;\n    }\n    if ( v137 )\n    {\n      v87 = 0;\n      if ( v137 != 3 )\n        goto LABEL_180;\n      v88 = v138;\nLABEL_179:\n      v87 = *(unsigned __int8 *)v88;\n      goto LABEL_180;\n    }\nLABEL_242:\n    v87 = (unsigned __int8)v138;\nLABEL_180:\n    if ( !v135 || (v89 = (unsigned int)v136, (_BYTE)v129) )\n    {\n      LODWORD(v130) = v87;\n      v129 = v84;\n      v114 = sub_40B4B0(v86, (__int64)v84);\n      v85 = v137;\n      LOBYTE(v87) = (_BYTE)v130;\n      v89 = v114;\n      v84 = v129;\n    }\n    if ( !v85 || (v90 = (unsigned int)v138, v85 == 3) )\n    {\n      LODWORD(v130) = v89;\n      v129 = v84;\n      v106 = sub_40B4B0(v87, (__int64)v84);\n      v89 = (unsigned int)v130;\n      v84 = v129;\n      v90 = v106;\n    }\n    if ( v89 == -1 || v90 == -1 )\n    {\nLABEL_228:\n      *v127 = 3;\n      goto LABEL_150;\n    }\n    if ( v121 & 0x10000 && v89 > v90 )\n      goto LABEL_243;\n    if ( v84 )\n    {\n      v91 = v84[8];\n      v92 = v84[1];\n      if ( v91 == (void *)v126.m128i_i64[0] )\n      {\n        v115 = v84[1];\n        v133 = v90;\n        v132 = v89;\n        v129 = v84;\n        v126.m128i_i64[0] = 2 * v126.m128i_i64[0] + 1;\n        size = 4 * v126.m128i_i64[0];\n        v130 = realloc(v115, 4 * v126.m128i_i64[0]);\n        v116 = realloc(v129[2], 4 * v126.m128i_i64[0]);\n        v92 = v130;\n        if ( !v130 || (v84 = v129, v89 = v132, v90 = v133, !v116) )\n        {\n          v125 = v116;\n          free(v130);\n          free(v125);\n          *v127 = 12;\n          goto LABEL_150;\n        }\n        v129[2] = v116;\n        v91 = v84[8];\n        v84[1] = v92;\n      }\n      v92[(_QWORD)v91] = v89;\n      v93 = v84[2];\n      v84[8] = (char *)v91 + 1;\n      v93[(_QWORD)v91] = v90;\n    }\n    v94 = 0LL;\n    do\n    {\n      if ( v89 <= (unsigned int)v94 && v90 >= (unsigned int)v94 )\n        ptrb[v94 >> 6] |= 1LL << v94;\n      ++v94;\n    }\n    while ( v94 != 256 );\n    *v127 = 0;\nLABEL_143:\n    v74 = v7->m128i_i64[1];\n    if ( v74 == 2 )\n      goto LABEL_160;\n    if ( v74 == 21 )\n      break;\n    v46 = 0;\n  }\n  v8[9] += v44;\n  if ( (_BYTE)v128 )\n  {\n    v96 = ptrb;\n    do\n    {\n      *v96 = ~*v96;\n      ++v96;\n    }\n    while ( ptrb + 4 != v96 );\n  }\n  v97 = *(_DWORD *)(v122 + 180);\n  if ( v97 > 1 )\n  {\n    v98 = *(_QWORD *)(v122 + 120);\n    for ( j = 0LL; j != 4; ++j )\n      ptrb[j] &= *(_QWORD *)(v98 + j * 8);\n  }\n  if ( !v43[5] && !v43[6] && !v43[7] && !v43[8] && (v97 <= 1 || !v43[9] && !((_BYTE)v43[4] & 1)) )\n  {\n    sub_40BEF0(v43);\n    v142 = 3;\n    v141 = (void **)ptrb;\n    v123 = sub_40D500((_QWORD *)(v122 + 112), (int *)(v122 + 128), 0LL, 0LL, (const __m128i *)&v141);\n    if ( v123 )\n      goto LABEL_7;\n    goto LABEL_219;\n  }\n  *(_BYTE *)(v122 + 176) |= 2u;\n  v100 = (_QWORD *)(v122 + 112);\n  v101 = (int *)(v122 + 128);\n  v142 = 6;\n  v141 = v43;\n  v102 = sub_40D500((_QWORD *)(v122 + 112), (int *)(v122 + 128), 0LL, 0LL, (const __m128i *)&v141);\n  v103 = v102;\n  v123 = v102;\n  v104 = ptrb;\n  if ( !v103 )\n    goto LABEL_219;\n  while ( !*v104 )\n  {\n    ++v104;\n    if ( ptrb + 4 == v104 )\n    {\n      free(ptrb);\n      goto LABEL_7;\n    }\n  }\n  v142 = 3;\n  v141 = (void **)ptrb;\n  v105 = sub_40D500(v100, v101, 0LL, 0LL, (const __m128i *)&v141);\n  if ( !v105 || (v144 = 10, (v123 = sub_40D500(v100, v101, v105, v123, (const __m128i *)&v143)) == 0LL) )\n  {\nLABEL_219:\n    *v127 = 12;\n    goto LABEL_150;\n  }\nLABEL_7:\n  v9 = sub_415350((unsigned __int8 *)v7, v8, v121);\n  v10 = LOBYTE(v7->m128i_i64[1]);\n  v8[9] += v9;\n  while ( 2 )\n  {\n    if ( (unsigned __int8)v10 > 0x17u )\n      return (__int64)v123;\n    v14 = 9177088LL;\n    LOBYTE(v15) = (_BYTE)v10 == 18;\n    if ( !_bittest64(&v14, v10) )\n      return (__int64)v123;\n    v16 = v8[9];\n    v17 = _mm_load_si128(v7);\n    if ( (_BYTE)v10 == 23 )\n    {\n      v126 = v17;\n      v35 = sub_415A00(v8, (unsigned __int8 *)v7, v121);\n      v36 = _mm_load_si128(&v126);\n      ptra = v35;\n      if ( v35 == -1 )\n      {\n        if ( LOBYTE(v7->m128i_i64[1]) != 1 || LOBYTE(v7->m128i_i64[0]) != 44 )\n          goto LABEL_85;\n        v15 = 0LL;\n      }\n      else\n      {\n        if ( v35 == -2 )\n        {\nLABEL_63:\n          if ( v121 & 0x200000 )\n          {\nLABEL_64:\n            v8[9] = v16;\n            v29 = v123;\n            *v7 = v36;\n            LOBYTE(v7->m128i_i64[1]) = 1;\n            goto LABEL_35;\n          }\n          if ( LOBYTE(v7->m128i_i64[1]) == 2 )\n            *v127 = 9;\n          else\nLABEL_85:\n            *v127 = 10;\n          goto LABEL_86;\n        }\n        v37 = v7->m128i_i64[1];\n        if ( v37 == 24 )\n        {\n          v15 = ptra;\n          goto LABEL_81;\n        }\n        if ( v37 != 1 )\n          goto LABEL_63;\n        if ( LOBYTE(v7->m128i_i64[0]) != 44 )\n        {\n          if ( !(v121 & 0x200000) )\n            goto LABEL_85;\n          goto LABEL_64;\n        }\n        v15 = ptra;\n      }\n      v126 = v36;\n      v38 = sub_415A00(v8, (unsigned __int8 *)v7, v121);\n      v36 = _mm_load_si128(&v126);\n      ptra = v38;\n      if ( v38 == -2 )\n        goto LABEL_63;\n      if ( v38 != -1 && v38 < v15 || LOBYTE(v7->m128i_i64[1]) != 24 )\n        goto LABEL_85;\n      if ( v38 == -1 )\n      {\n        if ( v15 > 0x7FFF )\n          goto LABEL_82;\n        goto LABEL_76;\n      }\nLABEL_81:\n      if ( ptra > 0x7FFF )\n      {\nLABEL_82:\n        *v127 = 15;\nLABEL_86:\n        if ( !v123 )\n          return 0LL;\n        goto LABEL_51;\n      }\nLABEL_76:\n      v8[9] += (int)sub_415350((unsigned __int8 *)v7, v8, v121);\n      if ( !v123 )\n        goto LABEL_65;\n      if ( !(v15 | ptra) )\n      {\n        sub_40AD30(v123, (__int64 (__fastcall *)(__int64, _QWORD *))sub_40BF40, 0LL);\n        if ( *v127 )\n          goto LABEL_51;\n        goto LABEL_66;\n      }\n      if ( v15 <= 0 )\n      {\n        v18 = v123;\n        v41 = 0LL;\n        goto LABEL_93;\n      }\n      if ( v15 == 1 )\n      {\n        v39 = v123;\n        v23 = v123;\nLABEL_89:\n        if ( v15 == ptra )\n        {\nLABEL_90:\n          v123 = v23;\n          goto LABEL_38;\n        }\n        goto LABEL_92;\n      }\n      v30 = v123;\n      v126.m128i_i64[0] = (__int64)v8;\n      v31 = 2LL;\n      v128 = v7;\n      v32 = v123;\n      while ( 1 )\n      {\n        v33 = sub_40D5E0((_QWORD **)v32, v122);\n        v32 = v33;\n        v144 = 16;\n        v34 = sub_40D500((_QWORD *)(v122 + 112), (int *)(v122 + 128), v30, v33, (const __m128i *)&v143);\n        v30 = v34;\n        if ( !v32 || !v34 )\n          break;\n        if ( v15 < ++v31 )\n        {\n          v39 = v32;\n          v7 = v128;\n          v8 = (__int64 *)v126.m128i_i64[0];\n          v23 = v34;\n          goto LABEL_89;\n        }\n      }\nLABEL_50:\n      *v127 = 12;\nLABEL_51:\n      sub_40AD30(v123, (__int64 (__fastcall *)(__int64, _QWORD *))sub_40BF40, 0LL);\n      return 0LL;\n    }\n    v15 = (unsigned __int8)v15;\n    if ( (_BYTE)v10 == 19 )\n    {\n      v8[9] += (int)sub_415350((unsigned __int8 *)v7, v8, v121);\n      if ( v123 )\n      {\n        v18 = v123;\n        if ( v123[48] == 17 )\n        {\n          v18 = v123;\n          ptra = 1LL;\n          v126.m128i_i64[0] = 0LL;\n          goto LABEL_56;\n        }\n        ptra = 1LL;\n        v19 = 10;\n        v126.m128i_i64[0] = 0LL;\n        goto LABEL_25;\n      }\n      goto LABEL_65;\n    }\n    v8[9] += (int)sub_415350((unsigned __int8 *)v7, v8, v121);\n    if ( !v123 )\n    {\nLABEL_65:\n      if ( *v127 )\n        return 0LL;\nLABEL_66:\n      v123 = 0LL;\n      goto LABEL_38;\n    }\n    if ( (_BYTE)v10 == 18 )\n    {\n      v39 = v123;\n      ptra = -1LL;\n      v15 = 1LL;\n      v23 = v123;\nLABEL_92:\n      v126.m128i_i64[0] = (__int64)v23;\n      v40 = sub_40D5E0((_QWORD **)v39, v122);\n      v41 = v126.m128i_i64[0];\n      v18 = v40;\n      if ( !v40 )\n        goto LABEL_50;\nLABEL_93:\n      v42 = v18[48] == 17;\n      v126.m128i_i64[0] = v41;\n      if ( v42 )\n        goto LABEL_56;\n      goto LABEL_57;\n    }\n    v18 = v123;\n    if ( v123[48] != 17 )\n    {\n      ptra = -1LL;\n      v15 = 0LL;\n      v126.m128i_i64[0] = 0LL;\n      goto LABEL_24;\n    }\n    ptra = -1LL;\n    v18 = v123;\n    v15 = 0LL;\n    v126.m128i_i64[0] = 0LL;\nLABEL_56:\n    sub_40AD30(v18, (__int64 (__fastcall *)(__int64, _QWORD *))sub_40AED0, *((_QWORD *)v18 + 5));\nLABEL_57:\n    if ( ptra == -1 )\nLABEL_24:\n      v19 = 11;\n    else\n      v19 = 10;\nLABEL_25:\n    v144 = v19;\n    v20 = (_QWORD *)(v122 + 112);\n    v21 = (int *)(v122 + 128);\n    v22 = sub_40D500((_QWORD *)(v122 + 112), (int *)(v122 + 128), v18, 0LL, (const __m128i *)&v143);\n    v23 = v22;\n    if ( !v22 )\n      goto LABEL_50;\n    v24 = v15 + 2;\n    if ( v24 <= ptra )\n    {\n      v128 = v7;\n      v25 = v18;\n      v26 = v22;\n      while ( 1 )\n      {\n        v25 = sub_40D5E0((_QWORD **)v25, v122);\n        v144 = 16;\n        v27 = sub_40D500(v20, v21, v26, v25, (const __m128i *)&v143);\n        if ( !v25 )\n          goto LABEL_50;\n        if ( !v27 )\n          goto LABEL_50;\n        v144 = 10;\n        v28 = sub_40D500(v20, v21, v27, 0LL, (const __m128i *)&v143);\n        v26 = v28;\n        if ( !v28 )\n          goto LABEL_50;\n        if ( ++v24 > ptra )\n        {\n          v7 = v128;\n          v23 = v28;\n          break;\n        }\n      }\n    }\n    if ( !v126.m128i_i64[0] )\n      goto LABEL_90;\n    v144 = 16;\n    v29 = sub_40D500(v20, v21, v126.m128i_i64[0], v23, (const __m128i *)&v143);\nLABEL_35:\n    if ( *v127 && !v29 )\n      goto LABEL_86;\n    v123 = v29;\nLABEL_38:\n    v10 = LOBYTE(v7->m128i_i64[1]);\n    if ( !(v121 & 0x1000000) || (_BYTE)v10 != 11 && (_BYTE)v10 != 23 )\n      continue;\n    break;\n  }\n  if ( v123 )\n    sub_40AD30(v123, (__int64 (__fastcall *)(__int64, _QWORD *))sub_40BF40, 0LL);\nLABEL_43:\n  v123 = 0LL;\n  *v127 = 13;\n  return (__int64)v123;\n}\n", 
            "funcStartAddr": "0x415ac0L", 
            "funcEndAddr": "0x416fa4L", 
            "funcName": "sub_415AC0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_416FB0(__int64 *a1, __int64 *a2, __m128i *a3, __int64 a4, char *a5, _DWORD *a6)\n{\n  __int64 v6; // r15\n  char *v7; // r12\n  __m128i *v8; // rbp\n  _DWORD *v9; // rbx\n  __int64 v10; // rax\n  _QWORD *v11; // r14\n  char v12; // al\n  _QWORD *v13; // r9\n  char *v14; // rax\n  _QWORD *v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  char v18; // [rsp+20h] [rbp-48h]\n  char v19; // [rsp+28h] [rbp-40h]\n\n  v6 = a4;\n  v7 = a5;\n  v8 = a3;\n  v9 = a6;\n  v17 = *a2;\n  v10 = sub_415AC0(a1, a2, a3, a4, a5, a6);\n  v11 = (_QWORD *)v10;\n  if ( *v9 && !v10 )\n    return 0LL;\nLABEL_3:\n  v12 = v8->m128i_i64[1];\n  if ( (v8->m128i_i64[1] & 0xF7) != 2 )\n  {\n    while ( v12 != 9 || !v7 )\n    {\n      v13 = (_QWORD *)sub_415AC0(a1, a2, v8, v6, v7, v9);\n      if ( *v9 && !v13 )\n      {\n        if ( v11 )\n          sub_40AD30(v11, (__int64 (__fastcall *)(__int64, _QWORD *))sub_40BF40, 0LL);\n        return 0LL;\n      }\n      if ( !v11 || !v13 )\n      {\n        if ( !v11 )\n          v11 = v13;\n        goto LABEL_3;\n      }\n      v16 = v13;\n      v19 = 16;\n      v14 = sub_40D500((_QWORD *)(v17 + 112), (int *)(v17 + 128), v11, v13, (const __m128i *)&v18);\n      if ( !v14 )\n      {\n        sub_40AD30(v16, (__int64 (__fastcall *)(__int64, _QWORD *))sub_40BF40, 0LL);\n        sub_40AD30(v11, (__int64 (__fastcall *)(__int64, _QWORD *))sub_40BF40, 0LL);\n        v11 = 0LL;\n        *v9 = 12;\n        return v11;\n      }\n      v11 = v14;\n      v12 = v8->m128i_i64[1];\n      if ( (v8->m128i_i64[1] & 0xF7) == 2 )\n        return v11;\n    }\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x416fb0L", 
            "funcEndAddr": "0x4170eeL", 
            "funcName": "sub_416FB0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4170F0(__int64 *a1, __int64 *a2, __m128i *a3, __int64 a4, char *a5, _DWORD *a6)\n{\n  _DWORD *v6; // r14\n  __int64 v7; // r13\n  __m128i *v8; // rbp\n  __int64 v9; // rbx\n  char *v10; // rax\n  char *v11; // r15\n  _QWORD *v13; // rcx\n  char *v14; // [rsp+0h] [rbp-68h]\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  __int64 v16; // [rsp+10h] [rbp-58h]\n  char v17; // [rsp+20h] [rbp-48h]\n  char v18; // [rsp+28h] [rbp-40h]\n\n  v6 = a6;\n  v7 = a4;\n  v8 = a3;\n  v9 = *a2;\n  v14 = a5;\n  v16 = *(_QWORD *)(*a2 + 168);\n  v10 = (char *)sub_416FB0(a1, a2, a3, a4, a5, a6);\n  v11 = v10;\n  if ( *v6 && !v10 )\n    return 0LL;\n  while ( LOBYTE(v8->m128i_i64[1]) == 10 )\n  {\n    a1[9] += (int)sub_415350((unsigned __int8 *)v8, a1, v7 | 0x800000);\n    if ( (v8->m128i_i64[1] & 0xF7) == 2 || LOBYTE(v8->m128i_i64[1]) == 9 && v14 )\n    {\n      v13 = 0LL;\n    }\n    else\n    {\n      v15 = *(_QWORD *)(v9 + 168);\n      *(_QWORD *)(v9 + 168) = v16;\n      v13 = sub_416FB0(a1, a2, v8, v7, v14, v6);\n      if ( *v6 && !v13 )\n      {\n        if ( v11 )\n          sub_40AD30(v11, (__int64 (__fastcall *)(__int64, _QWORD *))sub_40BF40, 0LL);\n        return 0LL;\n      }\n      *(_QWORD *)(v9 + 168) |= v15;\n    }\n    v18 = 10;\n    v11 = sub_40D500((_QWORD *)(v9 + 112), (int *)(v9 + 128), v11, v13, (const __m128i *)&v17);\n    if ( !v11 )\n    {\n      *v6 = 12;\n      return v11;\n    }\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x4170f0L", 
            "funcEndAddr": "0x417241L", 
            "funcName": "sub_4170F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_417250(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14\n  __int64 v5; // r13\n  unsigned __int64 v6; // r12\n  __int64 v7; // rbp\n  bool v8; // cc\n  int *v9; // rbx\n  size_t i; // rsi\n  __int64 v11; // r15\n  void *v12; // rax\n  char *v13; // rax\n  bool v14; // zf\n  char v15; // al\n  __int64 v16; // rdx\n  int v17; // edi\n  __int64 v18; // rdx\n  unsigned __int8 v19; // al\n  char v20; // si\n  __int64 v21; // r15\n  unsigned int v22; // eax\n  __int64 v23; // rcx\n  __int64 v24; // rax\n  __int64 v25; // r12\n  int v26; // eax\n  char *v27; // rax\n  _QWORD *v28; // r15\n  int *v29; // r13\n  char *v30; // rax\n  _QWORD *v31; // r9\n  char *v32; // r14\n  char *v33; // rdx\n  char *v34; // rax\n  __int64 v35; // r15\n  size_t v36; // r13\n  void *v37; // rax\n  void *v38; // r14\n  void *v39; // rax\n  void *v40; // rax\n  void *v41; // rax\n  __int64 v42; // r13\n  _QWORD *v43; // rax\n  __int64 v44; // rdx\n  __int64 v45; // rdx\n  __int64 *v46; // rdi\n  __int64 v47; // rax\n  char v48; // r13\n  __int64 v49; // r14\n  char *v50; // rax\n  unsigned __int64 v51; // rdx\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  unsigned __int64 v54; // rax\n  __int64 v55; // rax\n  __int64 v56; // r14\n  __int64 v57; // rsi\n  size_t v58; // rcx\n  unsigned __int8 v59; // al\n  char v60; // al\n  __int64 v61; // rax\n  unsigned int v62; // er13\n  __int64 v63; // r10\n  __int64 v64; // r9\n  __int64 v65; // rcx\n  __int64 v66; // rdx\n  __int64 v67; // rax\n  __int64 v68; // r11\n  unsigned int v69; // eax\n  __int64 *v70; // rax\n  __int64 v71; // r12\n  _QWORD *v72; // rdi\n  _QWORD *v73; // r13\n  void *v74; // rdi\n  __int64 result; // rax\n  _QWORD *v76; // rdi\n  _QWORD *v77; // r12\n  void *v78; // rdi\n  void *v79; // rax\n  __int64 v80; // r15\n  int v81; // edx\n  int v82; // ecx\n  wint_t v83; // eax\n  unsigned int v84; // edi\n  __int64 v85; // rdi\n  unsigned __int8 *v86; // r8\n  char v87; // r9\n  __int64 v88; // rcx\n  unsigned __int8 *v89; // rdx\n  __int64 *v90; // rax\n  int *v91; // rax\n  char *v92; // rax\n  __int64 v93; // rax\n  unsigned __int8 v94; // dl\n  unsigned int v95; // esi\n  bool v96; // sf\n  char v97; // dl\n  __int64 v98; // [rsp+0h] [rbp-138h]\n  int v99; // [rsp+0h] [rbp-138h]\n  size_t sized; // [rsp+8h] [rbp-130h]\n  __int64 sizee; // [rsp+8h] [rbp-130h]\n  size_t size; // [rsp+8h] [rbp-130h]\n  size_t sizea; // [rsp+8h] [rbp-130h]\n  size_t sizeb; // [rsp+8h] [rbp-130h]\n  int sizec; // [rsp+8h] [rbp-130h]\n  size_t sizef; // [rsp+8h] [rbp-130h]\n  void *v107; // [rsp+10h] [rbp-128h]\n  __int64 v108; // [rsp+10h] [rbp-128h]\n  unsigned int v109; // [rsp+2Ch] [rbp-10Ch]\n  __m128i v110; // [rsp+30h] [rbp-108h]\n  char v111; // [rsp+40h] [rbp-F8h]\n  __int64 v112; // [rsp+48h] [rbp-F0h]\n  void *ptr; // [rsp+50h] [rbp-E8h]\n  __int64 v114; // [rsp+60h] [rbp-D8h]\n  __int64 v115; // [rsp+68h] [rbp-D0h]\n  __int64 v116; // [rsp+88h] [rbp-B0h]\n  __int64 v117; // [rsp+90h] [rbp-A8h]\n  __int64 v118; // [rsp+98h] [rbp-A0h]\n  __int64 v119; // [rsp+A0h] [rbp-98h]\n  __int64 v120; // [rsp+A8h] [rbp-90h]\n  unsigned __int64 v121; // [rsp+B0h] [rbp-88h]\n  __int64 v122; // [rsp+B8h] [rbp-80h]\n  unsigned __int64 v123; // [rsp+C0h] [rbp-78h]\n  unsigned __int64 v124; // [rsp+C8h] [rbp-70h]\n  __int64 v125; // [rsp+D8h] [rbp-60h]\n  bool v126; // [rsp+E8h] [rbp-50h]\n  char v127; // [rsp+E9h] [rbp-4Fh]\n  char v128; // [rsp+EAh] [rbp-4Eh]\n  bool v129; // [rsp+EBh] [rbp-4Dh]\n  int v130; // [rsp+F0h] [rbp-48h]\n\n  v4 = a2;\n  v5 = a4;\n  v6 = a3;\n  v7 = a1;\n  *(_BYTE *)(a1 + 56) &= 0x90u;\n  v8 = *(_QWORD *)(a1 + 8) <= 0xE7uLL;\n  v109 = 0;\n  v9 = *(int **)a1;\n  *(_QWORD *)(a1 + 24) = a4;\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_QWORD *)(a1 + 48) = 0LL;\n  if ( v8 )\n  {\n    v91 = (int *)realloc(v9, 0xE8uLL);\n    v9 = v91;\n    if ( !v91 )\n      return 12LL;\n    *(_QWORD *)(a1 + 8) = 232LL;\n    *(_QWORD *)a1 = v91;\n  }\n  *(_QWORD *)(a1 + 16) = 232LL;\n  *(_QWORD *)v9 = 0LL;\n  *((_QWORD *)v9 + 28) = 0LL;\n  memset(\n    (void *)((unsigned __int64)(v9 + 2) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v9 - (((_DWORD)v9 + 8) & 0xFFFFFFF8) + 232) >> 3));\n  v9[32] = 15;\n  if ( v6 > 0x555555555555554LL )\n    goto LABEL_112;\n  *((_QWORD *)v9 + 1) = v6 + 1;\n  *(_QWORD *)v9 = malloc(16 * (v6 + 1));\n  if ( v6 )\n  {\n    for ( i = 1LL; i <= v6; i *= 2LL )\n      ;\n    v11 = i - 1;\n  }\n  else\n  {\n    v11 = 0LL;\n    i = 1LL;\n  }\n  v12 = calloc(0x18uLL, i);\n  *((_QWORD *)v9 + 17) = v11;\n  *((_QWORD *)v9 + 8) = v12;\n  v9[45] = __ctype_get_mb_cur_max();\n  v13 = nl_langinfo(14);\n  if ( (*v13 & 0xDF) == 85 && (v13[1] & 0xDF) == 84 && (v13[2] & 0xDF) == 70 )\n  {\n    v14 = v13[3] == 45;\n    if ( !memcmp(&v13[v14 + 3], \"8\", 2uLL) )\n      *((_BYTE *)v9 + 176) |= 4u;\n  }\n  v15 = *((_BYTE *)v9 + 176);\n  v8 = v9[45] <= 1;\n  *((_BYTE *)v9 + 176) &= 0xF7u;\n  if ( !v8 )\n  {\n    if ( v15 & 4 )\n    {\n      *((_QWORD *)v9 + 15) = &unk_41E560;\n      goto LABEL_15;\n    }\n    v79 = calloc(0x20uLL, 1uLL);\n    *((_QWORD *)v9 + 15) = v79;\n    if ( !v79 )\n    {\nLABEL_112:\n      v109 = 12;\nLABEL_111:\n      sub_40FE70(v9);\n      *(_QWORD *)v7 = 0LL;\n      result = v109;\n      *(_QWORD *)(v7 + 8) = 0LL;\n      return result;\n    }\n    v80 = 0LL;\nLABEL_115:\n    v81 = 8 * v80;\n    v82 = 0;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        sizec = v82;\n        v99 = v81;\n        v83 = btowc(v81);\n        v84 = v99 & 0xFFFFFF80;\n        if ( v83 != -1 )\n          break;\n        if ( !v84 )\n          goto LABEL_117;\nLABEL_118:\n        v82 = sizec + 1;\n        v81 = v99 + 1;\n        if ( sizec == 63 )\n          goto LABEL_123;\n      }\n      *(_QWORD *)(v80 + *((_QWORD *)v9 + 15)) |= 1LL << sizec;\n      if ( v84 )\n        goto LABEL_118;\n      if ( v83 != v99 )\n      {\nLABEL_117:\n        *((_BYTE *)v9 + 176) |= 8u;\n        goto LABEL_118;\n      }\n      v82 = sizec + 1;\n      v81 = v99 + 1;\n      if ( sizec == 63 )\n      {\nLABEL_123:\n        v80 += 8LL;\n        if ( v80 == 32 )\n          break;\n        goto LABEL_115;\n      }\n    }\n  }\nLABEL_15:\n  if ( !*(_QWORD *)v9 || !*((_QWORD *)v9 + 8) )\n    goto LABEL_112;\n  v16 = *(_QWORD *)(v7 + 40);\n  v109 = 0;\n  memset(&v115, 0, 0x90uLL);\n  v125 = v16;\n  v17 = v9[45];\n  v114 = v4;\n  v98 = v5 & 0x400000;\n  v126 = (v5 & 0x400000) != 0;\n  v18 = v98 | v16;\n  v19 = *((_BYTE *)v9 + 176);\n  v20 = v18 != 0;\n  v122 = v6;\n  v21 = v18;\n  v121 = v6;\n  v129 = v18 != 0;\n  v130 = v17;\n  v127 = (v19 >> 2) & 1;\n  v128 = (v19 >> 3) & 1;\n  v124 = v6;\n  v123 = v6;\n  if ( v6 )\n  {\n    v22 = sub_40B170((__int64)&v114, v6 + 1);\n    if ( v22 )\n    {\nLABEL_83:\n      v109 = v22;\n      v35 = *(_QWORD *)v7;\nLABEL_108:\n      v76 = *(_QWORD **)(v35 + 112);\n      if ( v76 )\n      {\n        do\n        {\n          v77 = (_QWORD *)*v76;\n          free(v76);\n          v76 = v77;\n        }\n        while ( v77 );\n      }\n      *(_QWORD *)(v35 + 112) = 0LL;\n      v78 = *(void **)(v35 + 32);\n      *(_DWORD *)(v35 + 128) = 15;\n      *(_QWORD *)(v35 + 104) = 0LL;\n      free(v78);\n      *(_QWORD *)(v35 + 32) = 0LL;\n      sub_40C4C0((__int64)&v114);\n      goto LABEL_111;\n    }\n    v20 = v129;\n    v17 = v9[45];\n  }\n  if ( v20 )\n    v4 = v115;\n  v115 = v4;\n  if ( v5 & 0x400000 )\n  {\n    if ( v17 <= 1 )\n    {\n      sub_40B4E0(&v114);\n      v109 = 0;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v22 = sub_40B710((__int64)&v114);\n        if ( v22 )\n          goto LABEL_83;\n        if ( (__int64)v6 <= v118 || v119 > v117 + v9[45] )\n          break;\n        v22 = sub_40B170((__int64)&v114, 2 * v119);\n        if ( v22 )\n          goto LABEL_83;\n      }\n      v109 = 0;\n    }\n  }\n  else if ( v17 > 1 )\n  {\n    sub_40B560((mbstate_t *)&v114);\n    v109 = 0;\n  }\n  else\n  {\n    v23 = v119;\n    if ( v21 )\n    {\n      v24 = v117;\n      if ( v122 <= v119 )\n        v23 = v122;\n      if ( v23 > v117 )\n      {\n        while ( 1 )\n        {\n          *(_BYTE *)(v4 + v24) = *(_BYTE *)(v125 + *(unsigned __int8 *)(v116 + v24 + v114));\n          if ( v23 == ++v24 )\n            break;\n          v4 = v115;\n        }\n      }\n      else\n      {\n        v23 = v117;\n      }\n    }\n    v117 = v23;\n    v118 = v23;\n    v109 = 0;\n  }\n  v25 = *(_QWORD *)v7;\n  *(_QWORD *)(v7 + 48) = 0LL;\n  *(_QWORD *)(v25 + 216) = v5;\n  v26 = sub_415350((unsigned __int8 *)&v110, &v114, v5 | 0x800000);\n  v120 += v26;\n  v27 = sub_4170F0(&v114, (__int64 *)v7, &v110, v5, 0LL, &v109);\n  if ( v109 )\n  {\n    if ( !v27 )\n    {\n      *((_QWORD *)v9 + 13) = 0LL;\n      v35 = *(_QWORD *)v7;\n      goto LABEL_108;\n    }\n    v28 = (_QWORD *)(v25 + 112);\n    sizef = (size_t)v27;\n    v29 = (int *)(v25 + 128);\n    LOBYTE(v112) = 2;\n    v92 = sub_40D500((_QWORD *)(v25 + 112), (int *)(v25 + 128), 0LL, 0LL, (const __m128i *)&v111);\n    v31 = (_QWORD *)sizef;\n    v32 = v92;\n  }\n  else\n  {\n    v28 = (_QWORD *)(v25 + 112);\n    sized = (size_t)v27;\n    v29 = (int *)(v25 + 128);\n    LOBYTE(v112) = 2;\n    v30 = sub_40D500((_QWORD *)(v25 + 112), (int *)(v25 + 128), 0LL, 0LL, (const __m128i *)&v111);\n    v31 = (_QWORD *)sized;\n    v32 = v30;\n    v33 = v30;\n    if ( !sized )\n      goto LABEL_39;\n  }\n  LOBYTE(v112) = 16;\n  v34 = sub_40D500(v28, v29, v31, v32, (const __m128i *)&v111);\n  v33 = v32;\n  v32 = v34;\nLABEL_39:\n  v35 = *(_QWORD *)v7;\n  if ( v32 == 0LL || v33 == 0LL )\n  {\n    v109 = 12;\n    *((_QWORD *)v9 + 13) = 0LL;\n    goto LABEL_108;\n  }\n  v36 = *(_QWORD *)(v35 + 8);\n  *((_QWORD *)v9 + 13) = v32;\n  sizee = 8 * v36;\n  v36 *= 24LL;\n  v37 = malloc(sizee);\n  *(_QWORD *)(v35 + 24) = v37;\n  v38 = v37;\n  v39 = malloc(sizee);\n  *(_QWORD *)(v35 + 32) = v39;\n  v107 = v39;\n  v40 = malloc(v36);\n  *(_QWORD *)(v35 + 40) = v40;\n  size = (size_t)v40;\n  v41 = malloc(v36);\n  *(_QWORD *)(v35 + 48) = v41;\n  if ( !v38 || !v107 || !size || !v41 )\n  {\n    v109 = 12;\n    goto LABEL_108;\n  }\n  v42 = *(_QWORD *)(v7 + 48);\n  v43 = malloc(8 * v42);\n  *(_QWORD *)(v35 + 224) = v43;\n  if ( v43 )\n  {\n    v44 = 0LL;\n    if ( v42 )\n    {\n      do\n      {\n        v43[v44] = v44;\n        ++v44;\n      }\n      while ( v44 != v42 );\n    }\n    sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40CA30, v35);\n    v45 = *(_QWORD *)(v7 + 48);\n    if ( v45 )\n    {\n      v46 = *(__int64 **)(v35 + 224);\n      v47 = *v46;\n      if ( *v46 )\n        goto LABEL_53;\n      while ( ++v47 != v45 )\n      {\n        if ( v46[v47] != v47 )\n          goto LABEL_53;\n      }\n    }\n    else\n    {\n      v46 = *(__int64 **)(v35 + 224);\n    }\n    free(v46);\n    *(_QWORD *)(v35 + 224) = 0LL;\n  }\nLABEL_53:\n  v22 = sub_40AD30(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40D8B0, v7);\n  if ( v22 )\n    goto LABEL_83;\n  v22 = sub_40AD30(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40FDE0, v35);\n  if ( v22 )\n    goto LABEL_83;\n  sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40CAC0, v35);\n  v22 = sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40C5C0, v35);\n  if ( v22 )\n    goto LABEL_83;\n  v48 = 0;\n  v49 = 0LL;\n  while ( *(_QWORD *)(v35 + 16) != v49 )\n  {\n    while ( 1 )\n    {\n      while ( *(_QWORD *)(*(_QWORD *)(v35 + 48) + 24 * v49 + 8) )\n      {\n        if ( *(_QWORD *)(v35 + 16) == ++v49 )\n          goto LABEL_60;\n      }\n      sizea = 24 * v49;\n      v22 = sub_40CFA0((__m128i *)&v111, (__int64 *)v35, v49, 1);\n      if ( v22 )\n        goto LABEL_83;\n      ++v49;\n      if ( *(_QWORD *)(*(_QWORD *)(v35 + 48) + sizea + 8) )\n        break;\n      v48 = 1;\n      free(ptr);\n      if ( *(_QWORD *)(v35 + 16) == v49 )\n      {\nLABEL_61:\n        v48 = 0;\n        v49 = 0LL;\n      }\n    }\n  }\nLABEL_60:\n  if ( v48 )\n    goto LABEL_61;\n  if ( !(*(_BYTE *)(v7 + 56) & 0x10) && *(_QWORD *)(v7 + 48) && *(_BYTE *)(v35 + 176) & 1 || *(_QWORD *)(v35 + 152) )\n  {\n    v50 = (char *)malloc(24 * v49);\n    *(_QWORD *)(v35 + 56) = v50;\n    if ( !v50 )\n    {\n      v109 = 12;\n      v35 = *(_QWORD *)v7;\n      goto LABEL_108;\n    }\n    v51 = 0LL;\n    if ( !v49 )\n      goto LABEL_85;\n    while ( 1 )\n    {\n      v52 = 3 * v51++;\n      v53 = (__int64)&v50[8 * v52];\n      *(_OWORD *)v53 = 0LL;\n      *(_QWORD *)(v53 + 16) = 0LL;\n      v54 = *(_QWORD *)(v35 + 16);\n      if ( v54 <= v51 )\n        break;\n      v50 = *(char **)(v35 + 56);\n    }\n    if ( !v54 )\n      goto LABEL_85;\n    v108 = 0LL;\n    v55 = *(_QWORD *)(v35 + 48);\n    while ( 1 )\n    {\n      v56 = 0LL;\n      v57 = v55 + 24 * v108;\n      v58 = *(_QWORD *)(v57 + 16);\n      if ( *(_QWORD *)(v57 + 8) > 0LL )\n        break;\nLABEL_138:\n      if ( *(_QWORD *)(v35 + 16) <= (unsigned __int64)++v108 )\n        goto LABEL_85;\n    }\n    while ( 1 )\n    {\n      sizeb = v58;\n      if ( !(unsigned __int8)sub_40B210((_QWORD *)(*(_QWORD *)(v35 + 56) + 24LL * *(_QWORD *)(v58 + 8 * v56)), v108) )\n        break;\n      v55 = *(_QWORD *)(v35 + 48);\n      ++v56;\n      v58 = sizeb;\n      if ( v56 >= *(_QWORD *)(v55 + 24 * v108 + 8) )\n        goto LABEL_138;\n    }\n    v22 = 12;\n    goto LABEL_83;\n  }\nLABEL_85:\n  v59 = *((_BYTE *)v9 + 176);\n  v109 = 0;\n  v60 = (v98 == 0) & (v59 >> 2);\n  if ( v60 && !*(_QWORD *)(v7 + 40) )\n  {\n    v85 = *((_QWORD *)v9 + 2);\n    if ( v85 )\n    {\n      v86 = *(unsigned __int8 **)v9;\n      v87 = 0;\n      v88 = 0LL;\n      v89 = *(unsigned __int8 **)v9;\n      while ( 2 )\n      {\n        switch ( (unsigned __int64)v89[8] )\n        {\n          case 1uLL:\n            if ( (*v89 & 0x80u) != 0 )\n              v48 = v60;\n            goto LABEL_145;\n          case 2uLL:\n          case 4uLL:\n          case 8uLL:\n          case 9uLL:\n          case 0xAuLL:\n          case 0xBuLL:\n            goto LABEL_145;\n          case 3uLL:\n            if ( *(_QWORD *)(*(_QWORD *)v89 + 16LL) || *(_QWORD *)(*(_QWORD *)v89 + 24LL) )\n              goto LABEL_86;\n            goto LABEL_145;\n          case 5uLL:\n            v87 = v60;\n            goto LABEL_145;\n          case 6uLL:\n            goto LABEL_86;\n          case 0xCuLL:\n            v95 = *(_DWORD *)v89;\n            if ( *(_DWORD *)v89 == 32 )\n              goto LABEL_145;\n            if ( v95 <= 0x20 )\n            {\n              if ( v95 != 16 )\n                goto LABEL_86;\n            }\n            else if ( v95 != 64 && v95 != 128 )\n            {\n              goto LABEL_86;\n            }\nLABEL_145:\n            ++v88;\n            v89 += 16;\n            if ( v88 != v85 )\n              continue;\n            if ( !((unsigned __int8)v87 | (unsigned __int8)v48) )\n              goto LABEL_172;\n            v93 = (__int64)&v86[16 * v88];\n            do\n            {\n              v94 = v86[8];\n              if ( v94 == 1 )\n              {\n                if ( (*v86 & 0x80u) != 0 )\n                  v86[10] &= 0xDFu;\n              }\n              else if ( v94 == 5 )\n              {\n                v86[8] = 7;\n              }\n              v86 += 16;\n            }\n            while ( (unsigned __int8 *)v93 != v86 );\n            break;\n          default:\n            abort();\n            return result;\n        }\n        break;\n      }\n    }\n    else\n    {\nLABEL_172:\n      v87 = 0;\n    }\n    v14 = *((_QWORD *)v9 + 19) == 0LL;\n    v96 = *((_QWORD *)v9 + 19) < 0;\n    v97 = *((_BYTE *)v9 + 176);\n    v9[45] = 1;\n    *((_BYTE *)v9 + 176) = v97 & 0xF9 | (2 * ((v87 | (!v96 && !v14)) & 1));\n  }\nLABEL_86:\n  v61 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 13) + 24LL) + 56LL);\n  *((_QWORD *)v9 + 18) = v61;\n  v62 = sub_40D930((__int64)&v111, *((_QWORD *)v9 + 6) + 24 * v61);\n  v110.m128i_i32[0] = v62;\n  if ( !v62 )\n  {\n    if ( *((_QWORD *)v9 + 19) > 0LL )\n    {\n      v63 = v112;\n      if ( v112 > 0 )\n      {\n        v64 = 0LL;\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            v65 = *(_QWORD *)v9 + 16LL * *((_QWORD *)ptr + v64);\n            if ( *(_BYTE *)(v65 + 8) == 4 )\n            {\n              v66 = 0LL;\n              while ( 1 )\n              {\n                v67 = *(_QWORD *)v9 + 16LL * *((_QWORD *)ptr + v66);\n                if ( *(_BYTE *)(v67 + 8) == 9 && *(_QWORD *)v67 == *(_QWORD *)v65 )\n                  break;\n                if ( v63 == ++v66 )\n                  goto LABEL_90;\n              }\n              if ( !sub_40C890(\n                      v63,\n                      (__int64 *)&ptr,\n                      **(_QWORD **)(*((_QWORD *)v9 + 5) + 24LL * *((_QWORD *)ptr + v64) + 16)) )\n                break;\n            }\nLABEL_90:\n            if ( v63 <= ++v64 )\n              goto LABEL_99;\n          }\n          v69 = sub_40CDD0((__int64)&v111, *((_QWORD *)v9 + 6) + 24 * v68);\n          if ( v69 )\n            break;\n          v63 = v112;\n          v64 = 1LL;\n          if ( v112 <= 1 )\n            goto LABEL_99;\n        }\n        v62 = v69;\n        goto LABEL_103;\n      }\n    }\nLABEL_99:\n    v70 = sub_40DB40(&v110, v9, (__int64)&v111, 0);\n    *((_QWORD *)v9 + 9) = v70;\n    if ( v70 )\n    {\n      if ( *((_BYTE *)v70 + 104) >= 0 )\n      {\n        *((_QWORD *)v9 + 12) = v70;\n        *((_QWORD *)v9 + 11) = v70;\n        *((_QWORD *)v9 + 10) = v70;\nLABEL_102:\n        free(ptr);\n        goto LABEL_103;\n      }\n      *((_QWORD *)v9 + 10) = sub_40DB40(&v110, v9, (__int64)&v111, 1u);\n      *((_QWORD *)v9 + 11) = sub_40DB40(&v110, v9, (__int64)&v111, 2u);\n      v90 = sub_40DB40(&v110, v9, (__int64)&v111, 6u);\n      v14 = *((_QWORD *)v9 + 10) == 0LL;\n      *((_QWORD *)v9 + 12) = v90;\n      if ( !v14 && *((_QWORD *)v9 + 11) && v90 )\n        goto LABEL_102;\n    }\n    v62 = v110.m128i_i32[0];\n  }\nLABEL_103:\n  v71 = *(_QWORD *)v7;\n  v109 = v62;\n  v72 = *(_QWORD **)(v71 + 112);\n  if ( v72 )\n  {\n    do\n    {\n      v73 = (_QWORD *)*v72;\n      free(v72);\n      v72 = v73;\n    }\n    while ( v73 );\n  }\n  *(_QWORD *)(v71 + 112) = 0LL;\n  v74 = *(void **)(v71 + 32);\n  *(_DWORD *)(v71 + 128) = 15;\n  *(_QWORD *)(v71 + 104) = 0LL;\n  free(v74);\n  *(_QWORD *)(v71 + 32) = 0LL;\n  sub_40C4C0((__int64)&v114);\n  result = v109;\n  if ( v109 )\n    goto LABEL_111;\n  return result;\n}\n\n__int64 __fastcall sub_417250(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14\n  __int64 v5; // r13\n  unsigned __int64 v6; // r12\n  __int64 v7; // rbp\n  bool v8; // cc\n  int *v9; // rbx\n  size_t i; // rsi\n  __int64 v11; // r15\n  void *v12; // rax\n  char *v13; // rax\n  bool v14; // zf\n  char v15; // al\n  __int64 v16; // rdx\n  int v17; // edi\n  __int64 v18; // rdx\n  unsigned __int8 v19; // al\n  char v20; // si\n  __int64 v21; // r15\n  unsigned int v22; // eax\n  __int64 v23; // rcx\n  __int64 v24; // rax\n  __int64 v25; // r12\n  int v26; // eax\n  char *v27; // rax\n  _QWORD *v28; // r15\n  int *v29; // r13\n  char *v30; // rax\n  _QWORD *v31; // r9\n  char *v32; // r14\n  char *v33; // rdx\n  char *v34; // rax\n  __int64 v35; // r15\n  size_t v36; // r13\n  void *v37; // rax\n  void *v38; // r14\n  void *v39; // rax\n  void *v40; // rax\n  void *v41; // rax\n  __int64 v42; // r13\n  _QWORD *v43; // rax\n  __int64 v44; // rdx\n  __int64 v45; // rdx\n  __int64 *v46; // rdi\n  __int64 v47; // rax\n  char v48; // r13\n  __int64 v49; // r14\n  char *v50; // rax\n  unsigned __int64 v51; // rdx\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  unsigned __int64 v54; // rax\n  __int64 v55; // rax\n  __int64 v56; // r14\n  __int64 v57; // rsi\n  size_t v58; // rcx\n  unsigned __int8 v59; // al\n  char v60; // al\n  __int64 v61; // rax\n  unsigned int v62; // er13\n  __int64 v63; // r10\n  __int64 v64; // r9\n  __int64 v65; // rcx\n  __int64 v66; // rdx\n  __int64 v67; // rax\n  __int64 v68; // r11\n  unsigned int v69; // eax\n  __int64 *v70; // rax\n  __int64 v71; // r12\n  _QWORD *v72; // rdi\n  _QWORD *v73; // r13\n  void *v74; // rdi\n  __int64 result; // rax\n  _QWORD *v76; // rdi\n  _QWORD *v77; // r12\n  void *v78; // rdi\n  void *v79; // rax\n  __int64 v80; // r15\n  int v81; // edx\n  int v82; // ecx\n  wint_t v83; // eax\n  unsigned int v84; // edi\n  __int64 v85; // rdi\n  unsigned __int8 *v86; // r8\n  char v87; // r9\n  __int64 v88; // rcx\n  unsigned __int8 *v89; // rdx\n  __int64 *v90; // rax\n  int *v91; // rax\n  char *v92; // rax\n  __int64 v93; // rax\n  unsigned __int8 v94; // dl\n  unsigned int v95; // esi\n  bool v96; // sf\n  char v97; // dl\n  __int64 v98; // [rsp+0h] [rbp-138h]\n  int v99; // [rsp+0h] [rbp-138h]\n  size_t sized; // [rsp+8h] [rbp-130h]\n  __int64 sizee; // [rsp+8h] [rbp-130h]\n  size_t size; // [rsp+8h] [rbp-130h]\n  size_t sizea; // [rsp+8h] [rbp-130h]\n  size_t sizeb; // [rsp+8h] [rbp-130h]\n  int sizec; // [rsp+8h] [rbp-130h]\n  size_t sizef; // [rsp+8h] [rbp-130h]\n  void *v107; // [rsp+10h] [rbp-128h]\n  __int64 v108; // [rsp+10h] [rbp-128h]\n  unsigned int v109; // [rsp+2Ch] [rbp-10Ch]\n  __m128i v110; // [rsp+30h] [rbp-108h]\n  char v111; // [rsp+40h] [rbp-F8h]\n  __int64 v112; // [rsp+48h] [rbp-F0h]\n  void *ptr; // [rsp+50h] [rbp-E8h]\n  __int64 v114; // [rsp+60h] [rbp-D8h]\n  __int64 v115; // [rsp+68h] [rbp-D0h]\n  __int64 v116; // [rsp+88h] [rbp-B0h]\n  __int64 v117; // [rsp+90h] [rbp-A8h]\n  __int64 v118; // [rsp+98h] [rbp-A0h]\n  __int64 v119; // [rsp+A0h] [rbp-98h]\n  __int64 v120; // [rsp+A8h] [rbp-90h]\n  unsigned __int64 v121; // [rsp+B0h] [rbp-88h]\n  __int64 v122; // [rsp+B8h] [rbp-80h]\n  unsigned __int64 v123; // [rsp+C0h] [rbp-78h]\n  unsigned __int64 v124; // [rsp+C8h] [rbp-70h]\n  __int64 v125; // [rsp+D8h] [rbp-60h]\n  bool v126; // [rsp+E8h] [rbp-50h]\n  char v127; // [rsp+E9h] [rbp-4Fh]\n  char v128; // [rsp+EAh] [rbp-4Eh]\n  bool v129; // [rsp+EBh] [rbp-4Dh]\n  int v130; // [rsp+F0h] [rbp-48h]\n\n  v4 = a2;\n  v5 = a4;\n  v6 = a3;\n  v7 = a1;\n  *(_BYTE *)(a1 + 56) &= 0x90u;\n  v8 = *(_QWORD *)(a1 + 8) <= 0xE7uLL;\n  v109 = 0;\n  v9 = *(int **)a1;\n  *(_QWORD *)(a1 + 24) = a4;\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_QWORD *)(a1 + 48) = 0LL;\n  if ( v8 )\n  {\n    v91 = (int *)realloc(v9, 0xE8uLL);\n    v9 = v91;\n    if ( !v91 )\n      return 12LL;\n    *(_QWORD *)(a1 + 8) = 232LL;\n    *(_QWORD *)a1 = v91;\n  }\n  *(_QWORD *)(a1 + 16) = 232LL;\n  *(_QWORD *)v9 = 0LL;\n  *((_QWORD *)v9 + 28) = 0LL;\n  memset(\n    (void *)((unsigned __int64)(v9 + 2) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v9 - (((_DWORD)v9 + 8) & 0xFFFFFFF8) + 232) >> 3));\n  v9[32] = 15;\n  if ( v6 > 0x555555555555554LL )\n    goto LABEL_112;\n  *((_QWORD *)v9 + 1) = v6 + 1;\n  *(_QWORD *)v9 = malloc(16 * (v6 + 1));\n  if ( v6 )\n  {\n    for ( i = 1LL; i <= v6; i *= 2LL )\n      ;\n    v11 = i - 1;\n  }\n  else\n  {\n    v11 = 0LL;\n    i = 1LL;\n  }\n  v12 = calloc(0x18uLL, i);\n  *((_QWORD *)v9 + 17) = v11;\n  *((_QWORD *)v9 + 8) = v12;\n  v9[45] = __ctype_get_mb_cur_max();\n  v13 = nl_langinfo(14);\n  if ( (*v13 & 0xDF) == 85 && (v13[1] & 0xDF) == 84 && (v13[2] & 0xDF) == 70 )\n  {\n    v14 = v13[3] == 45;\n    if ( !memcmp(&v13[v14 + 3], \"8\", 2uLL) )\n      *((_BYTE *)v9 + 176) |= 4u;\n  }\n  v15 = *((_BYTE *)v9 + 176);\n  v8 = v9[45] <= 1;\n  *((_BYTE *)v9 + 176) &= 0xF7u;\n  if ( !v8 )\n  {\n    if ( v15 & 4 )\n    {\n      *((_QWORD *)v9 + 15) = &unk_41E560;\n      goto LABEL_15;\n    }\n    v79 = calloc(0x20uLL, 1uLL);\n    *((_QWORD *)v9 + 15) = v79;\n    if ( !v79 )\n    {\nLABEL_112:\n      v109 = 12;\nLABEL_111:\n      sub_40FE70(v9);\n      *(_QWORD *)v7 = 0LL;\n      result = v109;\n      *(_QWORD *)(v7 + 8) = 0LL;\n      return result;\n    }\n    v80 = 0LL;\nLABEL_115:\n    v81 = 8 * v80;\n    v82 = 0;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        sizec = v82;\n        v99 = v81;\n        v83 = btowc(v81);\n        v84 = v99 & 0xFFFFFF80;\n        if ( v83 != -1 )\n          break;\n        if ( !v84 )\n          goto LABEL_117;\nLABEL_118:\n        v82 = sizec + 1;\n        v81 = v99 + 1;\n        if ( sizec == 63 )\n          goto LABEL_123;\n      }\n      *(_QWORD *)(v80 + *((_QWORD *)v9 + 15)) |= 1LL << sizec;\n      if ( v84 )\n        goto LABEL_118;\n      if ( v83 != v99 )\n      {\nLABEL_117:\n        *((_BYTE *)v9 + 176) |= 8u;\n        goto LABEL_118;\n      }\n      v82 = sizec + 1;\n      v81 = v99 + 1;\n      if ( sizec == 63 )\n      {\nLABEL_123:\n        v80 += 8LL;\n        if ( v80 == 32 )\n          break;\n        goto LABEL_115;\n      }\n    }\n  }\nLABEL_15:\n  if ( !*(_QWORD *)v9 || !*((_QWORD *)v9 + 8) )\n    goto LABEL_112;\n  v16 = *(_QWORD *)(v7 + 40);\n  v109 = 0;\n  memset(&v115, 0, 0x90uLL);\n  v125 = v16;\n  v17 = v9[45];\n  v114 = v4;\n  v98 = v5 & 0x400000;\n  v126 = (v5 & 0x400000) != 0;\n  v18 = v98 | v16;\n  v19 = *((_BYTE *)v9 + 176);\n  v20 = v18 != 0;\n  v122 = v6;\n  v21 = v18;\n  v121 = v6;\n  v129 = v18 != 0;\n  v130 = v17;\n  v127 = (v19 >> 2) & 1;\n  v128 = (v19 >> 3) & 1;\n  v124 = v6;\n  v123 = v6;\n  if ( v6 )\n  {\n    v22 = sub_40B170((__int64)&v114, v6 + 1);\n    if ( v22 )\n    {\nLABEL_83:\n      v109 = v22;\n      v35 = *(_QWORD *)v7;\nLABEL_108:\n      v76 = *(_QWORD **)(v35 + 112);\n      if ( v76 )\n      {\n        do\n        {\n          v77 = (_QWORD *)*v76;\n          free(v76);\n          v76 = v77;\n        }\n        while ( v77 );\n      }\n      *(_QWORD *)(v35 + 112) = 0LL;\n      v78 = *(void **)(v35 + 32);\n      *(_DWORD *)(v35 + 128) = 15;\n      *(_QWORD *)(v35 + 104) = 0LL;\n      free(v78);\n      *(_QWORD *)(v35 + 32) = 0LL;\n      sub_40C4C0((__int64)&v114);\n      goto LABEL_111;\n    }\n    v20 = v129;\n    v17 = v9[45];\n  }\n  if ( v20 )\n    v4 = v115;\n  v115 = v4;\n  if ( v5 & 0x400000 )\n  {\n    if ( v17 <= 1 )\n    {\n      sub_40B4E0(&v114);\n      v109 = 0;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v22 = sub_40B710((__int64)&v114);\n        if ( v22 )\n          goto LABEL_83;\n        if ( (__int64)v6 <= v118 || v119 > v117 + v9[45] )\n          break;\n        v22 = sub_40B170((__int64)&v114, 2 * v119);\n        if ( v22 )\n          goto LABEL_83;\n      }\n      v109 = 0;\n    }\n  }\n  else if ( v17 > 1 )\n  {\n    sub_40B560((mbstate_t *)&v114);\n    v109 = 0;\n  }\n  else\n  {\n    v23 = v119;\n    if ( v21 )\n    {\n      v24 = v117;\n      if ( v122 <= v119 )\n        v23 = v122;\n      if ( v23 > v117 )\n      {\n        while ( 1 )\n        {\n          *(_BYTE *)(v4 + v24) = *(_BYTE *)(v125 + *(unsigned __int8 *)(v116 + v24 + v114));\n          if ( v23 == ++v24 )\n            break;\n          v4 = v115;\n        }\n      }\n      else\n      {\n        v23 = v117;\n      }\n    }\n    v117 = v23;\n    v118 = v23;\n    v109 = 0;\n  }\n  v25 = *(_QWORD *)v7;\n  *(_QWORD *)(v7 + 48) = 0LL;\n  *(_QWORD *)(v25 + 216) = v5;\n  v26 = sub_415350((unsigned __int8 *)&v110, &v114, v5 | 0x800000);\n  v120 += v26;\n  v27 = sub_4170F0(&v114, (__int64 *)v7, &v110, v5, 0LL, &v109);\n  if ( v109 )\n  {\n    if ( !v27 )\n    {\n      *((_QWORD *)v9 + 13) = 0LL;\n      v35 = *(_QWORD *)v7;\n      goto LABEL_108;\n    }\n    v28 = (_QWORD *)(v25 + 112);\n    sizef = (size_t)v27;\n    v29 = (int *)(v25 + 128);\n    LOBYTE(v112) = 2;\n    v92 = sub_40D500((_QWORD *)(v25 + 112), (int *)(v25 + 128), 0LL, 0LL, (const __m128i *)&v111);\n    v31 = (_QWORD *)sizef;\n    v32 = v92;\n  }\n  else\n  {\n    v28 = (_QWORD *)(v25 + 112);\n    sized = (size_t)v27;\n    v29 = (int *)(v25 + 128);\n    LOBYTE(v112) = 2;\n    v30 = sub_40D500((_QWORD *)(v25 + 112), (int *)(v25 + 128), 0LL, 0LL, (const __m128i *)&v111);\n    v31 = (_QWORD *)sized;\n    v32 = v30;\n    v33 = v30;\n    if ( !sized )\n      goto LABEL_39;\n  }\n  LOBYTE(v112) = 16;\n  v34 = sub_40D500(v28, v29, v31, v32, (const __m128i *)&v111);\n  v33 = v32;\n  v32 = v34;\nLABEL_39:\n  v35 = *(_QWORD *)v7;\n  if ( v32 == 0LL || v33 == 0LL )\n  {\n    v109 = 12;\n    *((_QWORD *)v9 + 13) = 0LL;\n    goto LABEL_108;\n  }\n  v36 = *(_QWORD *)(v35 + 8);\n  *((_QWORD *)v9 + 13) = v32;\n  sizee = 8 * v36;\n  v36 *= 24LL;\n  v37 = malloc(sizee);\n  *(_QWORD *)(v35 + 24) = v37;\n  v38 = v37;\n  v39 = malloc(sizee);\n  *(_QWORD *)(v35 + 32) = v39;\n  v107 = v39;\n  v40 = malloc(v36);\n  *(_QWORD *)(v35 + 40) = v40;\n  size = (size_t)v40;\n  v41 = malloc(v36);\n  *(_QWORD *)(v35 + 48) = v41;\n  if ( !v38 || !v107 || !size || !v41 )\n  {\n    v109 = 12;\n    goto LABEL_108;\n  }\n  v42 = *(_QWORD *)(v7 + 48);\n  v43 = malloc(8 * v42);\n  *(_QWORD *)(v35 + 224) = v43;\n  if ( v43 )\n  {\n    v44 = 0LL;\n    if ( v42 )\n    {\n      do\n      {\n        v43[v44] = v44;\n        ++v44;\n      }\n      while ( v44 != v42 );\n    }\n    sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40CA30, v35);\n    v45 = *(_QWORD *)(v7 + 48);\n    if ( v45 )\n    {\n      v46 = *(__int64 **)(v35 + 224);\n      v47 = *v46;\n      if ( *v46 )\n        goto LABEL_53;\n      while ( ++v47 != v45 )\n      {\n        if ( v46[v47] != v47 )\n          goto LABEL_53;\n      }\n    }\n    else\n    {\n      v46 = *(__int64 **)(v35 + 224);\n    }\n    free(v46);\n    *(_QWORD *)(v35 + 224) = 0LL;\n  }\nLABEL_53:\n  v22 = sub_40AD30(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40D8B0, v7);\n  if ( v22 )\n    goto LABEL_83;\n  v22 = sub_40AD30(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40FDE0, v35);\n  if ( v22 )\n    goto LABEL_83;\n  sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40CAC0, v35);\n  v22 = sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40C5C0, v35);\n  if ( v22 )\n    goto LABEL_83;\n  v48 = 0;\n  v49 = 0LL;\n  while ( *(_QWORD *)(v35 + 16) != v49 )\n  {\n    while ( 1 )\n    {\n      while ( *(_QWORD *)(*(_QWORD *)(v35 + 48) + 24 * v49 + 8) )\n      {\n        if ( *(_QWORD *)(v35 + 16) == ++v49 )\n          goto LABEL_60;\n      }\n      sizea = 24 * v49;\n      v22 = sub_40CFA0((__m128i *)&v111, (__int64 *)v35, v49, 1);\n      if ( v22 )\n        goto LABEL_83;\n      ++v49;\n      if ( *(_QWORD *)(*(_QWORD *)(v35 + 48) + sizea + 8) )\n        break;\n      v48 = 1;\n      free(ptr);\n      if ( *(_QWORD *)(v35 + 16) == v49 )\n      {\nLABEL_61:\n        v48 = 0;\n        v49 = 0LL;\n      }\n    }\n  }\nLABEL_60:\n  if ( v48 )\n    goto LABEL_61;\n  if ( !(*(_BYTE *)(v7 + 56) & 0x10) && *(_QWORD *)(v7 + 48) && *(_BYTE *)(v35 + 176) & 1 || *(_QWORD *)(v35 + 152) )\n  {\n    v50 = (char *)malloc(24 * v49);\n    *(_QWORD *)(v35 + 56) = v50;\n    if ( !v50 )\n    {\n      v109 = 12;\n      v35 = *(_QWORD *)v7;\n      goto LABEL_108;\n    }\n    v51 = 0LL;\n    if ( !v49 )\n      goto LABEL_85;\n    while ( 1 )\n    {\n      v52 = 3 * v51++;\n      v53 = (__int64)&v50[8 * v52];\n      *(_OWORD *)v53 = 0LL;\n      *(_QWORD *)(v53 + 16) = 0LL;\n      v54 = *(_QWORD *)(v35 + 16);\n      if ( v54 <= v51 )\n        break;\n      v50 = *(char **)(v35 + 56);\n    }\n    if ( !v54 )\n      goto LABEL_85;\n    v108 = 0LL;\n    v55 = *(_QWORD *)(v35 + 48);\n    while ( 1 )\n    {\n      v56 = 0LL;\n      v57 = v55 + 24 * v108;\n      v58 = *(_QWORD *)(v57 + 16);\n      if ( *(_QWORD *)(v57 + 8) > 0LL )\n        break;\nLABEL_138:\n      if ( *(_QWORD *)(v35 + 16) <= (unsigned __int64)++v108 )\n        goto LABEL_85;\n    }\n    while ( 1 )\n    {\n      sizeb = v58;\n      if ( !(unsigned __int8)sub_40B210((_QWORD *)(*(_QWORD *)(v35 + 56) + 24LL * *(_QWORD *)(v58 + 8 * v56)), v108) )\n        break;\n      v55 = *(_QWORD *)(v35 + 48);\n      ++v56;\n      v58 = sizeb;\n      if ( v56 >= *(_QWORD *)(v55 + 24 * v108 + 8) )\n        goto LABEL_138;\n    }\n    v22 = 12;\n    goto LABEL_83;\n  }\nLABEL_85:\n  v59 = *((_BYTE *)v9 + 176);\n  v109 = 0;\n  v60 = (v98 == 0) & (v59 >> 2);\n  if ( v60 && !*(_QWORD *)(v7 + 40) )\n  {\n    v85 = *((_QWORD *)v9 + 2);\n    if ( v85 )\n    {\n      v86 = *(unsigned __int8 **)v9;\n      v87 = 0;\n      v88 = 0LL;\n      v89 = *(unsigned __int8 **)v9;\n      while ( 2 )\n      {\n        switch ( (unsigned __int64)v89[8] )\n        {\n          case 1uLL:\n            if ( (*v89 & 0x80u) != 0 )\n              v48 = v60;\n            goto LABEL_145;\n          case 2uLL:\n          case 4uLL:\n          case 8uLL:\n          case 9uLL:\n          case 0xAuLL:\n          case 0xBuLL:\n            goto LABEL_145;\n          case 3uLL:\n            if ( *(_QWORD *)(*(_QWORD *)v89 + 16LL) || *(_QWORD *)(*(_QWORD *)v89 + 24LL) )\n              goto LABEL_86;\n            goto LABEL_145;\n          case 5uLL:\n            v87 = v60;\n            goto LABEL_145;\n          case 6uLL:\n            goto LABEL_86;\n          case 0xCuLL:\n            v95 = *(_DWORD *)v89;\n            if ( *(_DWORD *)v89 == 32 )\n              goto LABEL_145;\n            if ( v95 <= 0x20 )\n            {\n              if ( v95 != 16 )\n                goto LABEL_86;\n            }\n            else if ( v95 != 64 && v95 != 128 )\n            {\n              goto LABEL_86;\n            }\nLABEL_145:\n            ++v88;\n            v89 += 16;\n            if ( v88 != v85 )\n              continue;\n            if ( !((unsigned __int8)v87 | (unsigned __int8)v48) )\n              goto LABEL_172;\n            v93 = (__int64)&v86[16 * v88];\n            do\n            {\n              v94 = v86[8];\n              if ( v94 == 1 )\n              {\n                if ( (*v86 & 0x80u) != 0 )\n                  v86[10] &= 0xDFu;\n              }\n              else if ( v94 == 5 )\n              {\n                v86[8] = 7;\n              }\n              v86 += 16;\n            }\n            while ( (unsigned __int8 *)v93 != v86 );\n            break;\n          default:\n            abort();\n            return result;\n        }\n        break;\n      }\n    }\n    else\n    {\nLABEL_172:\n      v87 = 0;\n    }\n    v14 = *((_QWORD *)v9 + 19) == 0LL;\n    v96 = *((_QWORD *)v9 + 19) < 0;\n    v97 = *((_BYTE *)v9 + 176);\n    v9[45] = 1;\n    *((_BYTE *)v9 + 176) = v97 & 0xF9 | (2 * ((v87 | (!v96 && !v14)) & 1));\n  }\nLABEL_86:\n  v61 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 13) + 24LL) + 56LL);\n  *((_QWORD *)v9 + 18) = v61;\n  v62 = sub_40D930((__int64)&v111, *((_QWORD *)v9 + 6) + 24 * v61);\n  v110.m128i_i32[0] = v62;\n  if ( !v62 )\n  {\n    if ( *((_QWORD *)v9 + 19) > 0LL )\n    {\n      v63 = v112;\n      if ( v112 > 0 )\n      {\n        v64 = 0LL;\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            v65 = *(_QWORD *)v9 + 16LL * *((_QWORD *)ptr + v64);\n            if ( *(_BYTE *)(v65 + 8) == 4 )\n            {\n              v66 = 0LL;\n              while ( 1 )\n              {\n                v67 = *(_QWORD *)v9 + 16LL * *((_QWORD *)ptr + v66);\n                if ( *(_BYTE *)(v67 + 8) == 9 && *(_QWORD *)v67 == *(_QWORD *)v65 )\n                  break;\n                if ( v63 == ++v66 )\n                  goto LABEL_90;\n              }\n              if ( !sub_40C890(\n                      v63,\n                      (__int64 *)&ptr,\n                      **(_QWORD **)(*((_QWORD *)v9 + 5) + 24LL * *((_QWORD *)ptr + v64) + 16)) )\n                break;\n            }\nLABEL_90:\n            if ( v63 <= ++v64 )\n              goto LABEL_99;\n          }\n          v69 = sub_40CDD0((__int64)&v111, *((_QWORD *)v9 + 6) + 24 * v68);\n          if ( v69 )\n            break;\n          v63 = v112;\n          v64 = 1LL;\n          if ( v112 <= 1 )\n            goto LABEL_99;\n        }\n        v62 = v69;\n        goto LABEL_103;\n      }\n    }\nLABEL_99:\n    v70 = sub_40DB40(&v110, v9, (__int64)&v111, 0);\n    *((_QWORD *)v9 + 9) = v70;\n    if ( v70 )\n    {\n      if ( *((_BYTE *)v70 + 104) >= 0 )\n      {\n        *((_QWORD *)v9 + 12) = v70;\n        *((_QWORD *)v9 + 11) = v70;\n        *((_QWORD *)v9 + 10) = v70;\nLABEL_102:\n        free(ptr);\n        goto LABEL_103;\n      }\n      *((_QWORD *)v9 + 10) = sub_40DB40(&v110, v9, (__int64)&v111, 1u);\n      *((_QWORD *)v9 + 11) = sub_40DB40(&v110, v9, (__int64)&v111, 2u);\n      v90 = sub_40DB40(&v110, v9, (__int64)&v111, 6u);\n      v14 = *((_QWORD *)v9 + 10) == 0LL;\n      *((_QWORD *)v9 + 12) = v90;\n      if ( !v14 && *((_QWORD *)v9 + 11) && v90 )\n        goto LABEL_102;\n    }\n    v62 = v110.m128i_i32[0];\n  }\nLABEL_103:\n  v71 = *(_QWORD *)v7;\n  v109 = v62;\n  v72 = *(_QWORD **)(v71 + 112);\n  if ( v72 )\n  {\n    do\n    {\n      v73 = (_QWORD *)*v72;\n      free(v72);\n      v72 = v73;\n    }\n    while ( v73 );\n  }\n  *(_QWORD *)(v71 + 112) = 0LL;\n  v74 = *(void **)(v71 + 32);\n  *(_DWORD *)(v71 + 128) = 15;\n  *(_QWORD *)(v71 + 104) = 0LL;\n  free(v74);\n  *(_QWORD *)(v71 + 32) = 0LL;\n  sub_40C4C0((__int64)&v114);\n  result = v109;\n  if ( v109 )\n    goto LABEL_111;\n  return result;\n}\n", 
            "funcStartAddr": "0x401ff3L", 
            "funcEndAddr": "0x401ff8L", 
            "funcName": "sub_417250"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_417250(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14\n  __int64 v5; // r13\n  unsigned __int64 v6; // r12\n  __int64 v7; // rbp\n  bool v8; // cc\n  int *v9; // rbx\n  size_t i; // rsi\n  __int64 v11; // r15\n  void *v12; // rax\n  char *v13; // rax\n  bool v14; // zf\n  char v15; // al\n  __int64 v16; // rdx\n  int v17; // edi\n  __int64 v18; // rdx\n  unsigned __int8 v19; // al\n  char v20; // si\n  __int64 v21; // r15\n  unsigned int v22; // eax\n  __int64 v23; // rcx\n  __int64 v24; // rax\n  __int64 v25; // r12\n  int v26; // eax\n  char *v27; // rax\n  _QWORD *v28; // r15\n  int *v29; // r13\n  char *v30; // rax\n  _QWORD *v31; // r9\n  char *v32; // r14\n  char *v33; // rdx\n  char *v34; // rax\n  __int64 v35; // r15\n  size_t v36; // r13\n  void *v37; // rax\n  void *v38; // r14\n  void *v39; // rax\n  void *v40; // rax\n  void *v41; // rax\n  __int64 v42; // r13\n  _QWORD *v43; // rax\n  __int64 v44; // rdx\n  __int64 v45; // rdx\n  __int64 *v46; // rdi\n  __int64 v47; // rax\n  char v48; // r13\n  __int64 v49; // r14\n  char *v50; // rax\n  unsigned __int64 v51; // rdx\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  unsigned __int64 v54; // rax\n  __int64 v55; // rax\n  __int64 v56; // r14\n  __int64 v57; // rsi\n  size_t v58; // rcx\n  unsigned __int8 v59; // al\n  char v60; // al\n  __int64 v61; // rax\n  unsigned int v62; // er13\n  __int64 v63; // r10\n  __int64 v64; // r9\n  __int64 v65; // rcx\n  __int64 v66; // rdx\n  __int64 v67; // rax\n  __int64 v68; // r11\n  unsigned int v69; // eax\n  __int64 *v70; // rax\n  __int64 v71; // r12\n  _QWORD *v72; // rdi\n  _QWORD *v73; // r13\n  void *v74; // rdi\n  __int64 result; // rax\n  _QWORD *v76; // rdi\n  _QWORD *v77; // r12\n  void *v78; // rdi\n  void *v79; // rax\n  __int64 v80; // r15\n  int v81; // edx\n  int v82; // ecx\n  wint_t v83; // eax\n  unsigned int v84; // edi\n  __int64 v85; // rdi\n  unsigned __int8 *v86; // r8\n  char v87; // r9\n  __int64 v88; // rcx\n  unsigned __int8 *v89; // rdx\n  __int64 *v90; // rax\n  int *v91; // rax\n  char *v92; // rax\n  __int64 v93; // rax\n  unsigned __int8 v94; // dl\n  unsigned int v95; // esi\n  bool v96; // sf\n  char v97; // dl\n  __int64 v98; // [rsp+0h] [rbp-138h]\n  int v99; // [rsp+0h] [rbp-138h]\n  size_t sized; // [rsp+8h] [rbp-130h]\n  __int64 sizee; // [rsp+8h] [rbp-130h]\n  size_t size; // [rsp+8h] [rbp-130h]\n  size_t sizea; // [rsp+8h] [rbp-130h]\n  size_t sizeb; // [rsp+8h] [rbp-130h]\n  int sizec; // [rsp+8h] [rbp-130h]\n  size_t sizef; // [rsp+8h] [rbp-130h]\n  void *v107; // [rsp+10h] [rbp-128h]\n  __int64 v108; // [rsp+10h] [rbp-128h]\n  unsigned int v109; // [rsp+2Ch] [rbp-10Ch]\n  __m128i v110; // [rsp+30h] [rbp-108h]\n  char v111; // [rsp+40h] [rbp-F8h]\n  __int64 v112; // [rsp+48h] [rbp-F0h]\n  void *ptr; // [rsp+50h] [rbp-E8h]\n  __int64 v114; // [rsp+60h] [rbp-D8h]\n  __int64 v115; // [rsp+68h] [rbp-D0h]\n  __int64 v116; // [rsp+88h] [rbp-B0h]\n  __int64 v117; // [rsp+90h] [rbp-A8h]\n  __int64 v118; // [rsp+98h] [rbp-A0h]\n  __int64 v119; // [rsp+A0h] [rbp-98h]\n  __int64 v120; // [rsp+A8h] [rbp-90h]\n  unsigned __int64 v121; // [rsp+B0h] [rbp-88h]\n  __int64 v122; // [rsp+B8h] [rbp-80h]\n  unsigned __int64 v123; // [rsp+C0h] [rbp-78h]\n  unsigned __int64 v124; // [rsp+C8h] [rbp-70h]\n  __int64 v125; // [rsp+D8h] [rbp-60h]\n  bool v126; // [rsp+E8h] [rbp-50h]\n  char v127; // [rsp+E9h] [rbp-4Fh]\n  char v128; // [rsp+EAh] [rbp-4Eh]\n  bool v129; // [rsp+EBh] [rbp-4Dh]\n  int v130; // [rsp+F0h] [rbp-48h]\n\n  v4 = a2;\n  v5 = a4;\n  v6 = a3;\n  v7 = a1;\n  *(_BYTE *)(a1 + 56) &= 0x90u;\n  v8 = *(_QWORD *)(a1 + 8) <= 0xE7uLL;\n  v109 = 0;\n  v9 = *(int **)a1;\n  *(_QWORD *)(a1 + 24) = a4;\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_QWORD *)(a1 + 48) = 0LL;\n  if ( v8 )\n  {\n    v91 = (int *)realloc(v9, 0xE8uLL);\n    v9 = v91;\n    if ( !v91 )\n      return 12LL;\n    *(_QWORD *)(a1 + 8) = 232LL;\n    *(_QWORD *)a1 = v91;\n  }\n  *(_QWORD *)(a1 + 16) = 232LL;\n  *(_QWORD *)v9 = 0LL;\n  *((_QWORD *)v9 + 28) = 0LL;\n  memset(\n    (void *)((unsigned __int64)(v9 + 2) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v9 - (((_DWORD)v9 + 8) & 0xFFFFFFF8) + 232) >> 3));\n  v9[32] = 15;\n  if ( v6 > 0x555555555555554LL )\n    goto LABEL_112;\n  *((_QWORD *)v9 + 1) = v6 + 1;\n  *(_QWORD *)v9 = malloc(16 * (v6 + 1));\n  if ( v6 )\n  {\n    for ( i = 1LL; i <= v6; i *= 2LL )\n      ;\n    v11 = i - 1;\n  }\n  else\n  {\n    v11 = 0LL;\n    i = 1LL;\n  }\n  v12 = calloc(0x18uLL, i);\n  *((_QWORD *)v9 + 17) = v11;\n  *((_QWORD *)v9 + 8) = v12;\n  v9[45] = __ctype_get_mb_cur_max();\n  v13 = nl_langinfo(14);\n  if ( (*v13 & 0xDF) == 85 && (v13[1] & 0xDF) == 84 && (v13[2] & 0xDF) == 70 )\n  {\n    v14 = v13[3] == 45;\n    if ( !memcmp(&v13[v14 + 3], \"8\", 2uLL) )\n      *((_BYTE *)v9 + 176) |= 4u;\n  }\n  v15 = *((_BYTE *)v9 + 176);\n  v8 = v9[45] <= 1;\n  *((_BYTE *)v9 + 176) &= 0xF7u;\n  if ( !v8 )\n  {\n    if ( v15 & 4 )\n    {\n      *((_QWORD *)v9 + 15) = &unk_41E560;\n      goto LABEL_15;\n    }\n    v79 = calloc(0x20uLL, 1uLL);\n    *((_QWORD *)v9 + 15) = v79;\n    if ( !v79 )\n    {\nLABEL_112:\n      v109 = 12;\nLABEL_111:\n      sub_40FE70(v9);\n      *(_QWORD *)v7 = 0LL;\n      result = v109;\n      *(_QWORD *)(v7 + 8) = 0LL;\n      return result;\n    }\n    v80 = 0LL;\nLABEL_115:\n    v81 = 8 * v80;\n    v82 = 0;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        sizec = v82;\n        v99 = v81;\n        v83 = btowc(v81);\n        v84 = v99 & 0xFFFFFF80;\n        if ( v83 != -1 )\n          break;\n        if ( !v84 )\n          goto LABEL_117;\nLABEL_118:\n        v82 = sizec + 1;\n        v81 = v99 + 1;\n        if ( sizec == 63 )\n          goto LABEL_123;\n      }\n      *(_QWORD *)(v80 + *((_QWORD *)v9 + 15)) |= 1LL << sizec;\n      if ( v84 )\n        goto LABEL_118;\n      if ( v83 != v99 )\n      {\nLABEL_117:\n        *((_BYTE *)v9 + 176) |= 8u;\n        goto LABEL_118;\n      }\n      v82 = sizec + 1;\n      v81 = v99 + 1;\n      if ( sizec == 63 )\n      {\nLABEL_123:\n        v80 += 8LL;\n        if ( v80 == 32 )\n          break;\n        goto LABEL_115;\n      }\n    }\n  }\nLABEL_15:\n  if ( !*(_QWORD *)v9 || !*((_QWORD *)v9 + 8) )\n    goto LABEL_112;\n  v16 = *(_QWORD *)(v7 + 40);\n  v109 = 0;\n  memset(&v115, 0, 0x90uLL);\n  v125 = v16;\n  v17 = v9[45];\n  v114 = v4;\n  v98 = v5 & 0x400000;\n  v126 = (v5 & 0x400000) != 0;\n  v18 = v98 | v16;\n  v19 = *((_BYTE *)v9 + 176);\n  v20 = v18 != 0;\n  v122 = v6;\n  v21 = v18;\n  v121 = v6;\n  v129 = v18 != 0;\n  v130 = v17;\n  v127 = (v19 >> 2) & 1;\n  v128 = (v19 >> 3) & 1;\n  v124 = v6;\n  v123 = v6;\n  if ( v6 )\n  {\n    v22 = sub_40B170((__int64)&v114, v6 + 1);\n    if ( v22 )\n    {\nLABEL_83:\n      v109 = v22;\n      v35 = *(_QWORD *)v7;\nLABEL_108:\n      v76 = *(_QWORD **)(v35 + 112);\n      if ( v76 )\n      {\n        do\n        {\n          v77 = (_QWORD *)*v76;\n          free(v76);\n          v76 = v77;\n        }\n        while ( v77 );\n      }\n      *(_QWORD *)(v35 + 112) = 0LL;\n      v78 = *(void **)(v35 + 32);\n      *(_DWORD *)(v35 + 128) = 15;\n      *(_QWORD *)(v35 + 104) = 0LL;\n      free(v78);\n      *(_QWORD *)(v35 + 32) = 0LL;\n      sub_40C4C0((__int64)&v114);\n      goto LABEL_111;\n    }\n    v20 = v129;\n    v17 = v9[45];\n  }\n  if ( v20 )\n    v4 = v115;\n  v115 = v4;\n  if ( v5 & 0x400000 )\n  {\n    if ( v17 <= 1 )\n    {\n      sub_40B4E0(&v114);\n      v109 = 0;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v22 = sub_40B710((__int64)&v114);\n        if ( v22 )\n          goto LABEL_83;\n        if ( (__int64)v6 <= v118 || v119 > v117 + v9[45] )\n          break;\n        v22 = sub_40B170((__int64)&v114, 2 * v119);\n        if ( v22 )\n          goto LABEL_83;\n      }\n      v109 = 0;\n    }\n  }\n  else if ( v17 > 1 )\n  {\n    sub_40B560((mbstate_t *)&v114);\n    v109 = 0;\n  }\n  else\n  {\n    v23 = v119;\n    if ( v21 )\n    {\n      v24 = v117;\n      if ( v122 <= v119 )\n        v23 = v122;\n      if ( v23 > v117 )\n      {\n        while ( 1 )\n        {\n          *(_BYTE *)(v4 + v24) = *(_BYTE *)(v125 + *(unsigned __int8 *)(v116 + v24 + v114));\n          if ( v23 == ++v24 )\n            break;\n          v4 = v115;\n        }\n      }\n      else\n      {\n        v23 = v117;\n      }\n    }\n    v117 = v23;\n    v118 = v23;\n    v109 = 0;\n  }\n  v25 = *(_QWORD *)v7;\n  *(_QWORD *)(v7 + 48) = 0LL;\n  *(_QWORD *)(v25 + 216) = v5;\n  v26 = sub_415350((unsigned __int8 *)&v110, &v114, v5 | 0x800000);\n  v120 += v26;\n  v27 = sub_4170F0(&v114, (__int64 *)v7, &v110, v5, 0LL, &v109);\n  if ( v109 )\n  {\n    if ( !v27 )\n    {\n      *((_QWORD *)v9 + 13) = 0LL;\n      v35 = *(_QWORD *)v7;\n      goto LABEL_108;\n    }\n    v28 = (_QWORD *)(v25 + 112);\n    sizef = (size_t)v27;\n    v29 = (int *)(v25 + 128);\n    LOBYTE(v112) = 2;\n    v92 = sub_40D500((_QWORD *)(v25 + 112), (int *)(v25 + 128), 0LL, 0LL, (const __m128i *)&v111);\n    v31 = (_QWORD *)sizef;\n    v32 = v92;\n  }\n  else\n  {\n    v28 = (_QWORD *)(v25 + 112);\n    sized = (size_t)v27;\n    v29 = (int *)(v25 + 128);\n    LOBYTE(v112) = 2;\n    v30 = sub_40D500((_QWORD *)(v25 + 112), (int *)(v25 + 128), 0LL, 0LL, (const __m128i *)&v111);\n    v31 = (_QWORD *)sized;\n    v32 = v30;\n    v33 = v30;\n    if ( !sized )\n      goto LABEL_39;\n  }\n  LOBYTE(v112) = 16;\n  v34 = sub_40D500(v28, v29, v31, v32, (const __m128i *)&v111);\n  v33 = v32;\n  v32 = v34;\nLABEL_39:\n  v35 = *(_QWORD *)v7;\n  if ( v32 == 0LL || v33 == 0LL )\n  {\n    v109 = 12;\n    *((_QWORD *)v9 + 13) = 0LL;\n    goto LABEL_108;\n  }\n  v36 = *(_QWORD *)(v35 + 8);\n  *((_QWORD *)v9 + 13) = v32;\n  sizee = 8 * v36;\n  v36 *= 24LL;\n  v37 = malloc(sizee);\n  *(_QWORD *)(v35 + 24) = v37;\n  v38 = v37;\n  v39 = malloc(sizee);\n  *(_QWORD *)(v35 + 32) = v39;\n  v107 = v39;\n  v40 = malloc(v36);\n  *(_QWORD *)(v35 + 40) = v40;\n  size = (size_t)v40;\n  v41 = malloc(v36);\n  *(_QWORD *)(v35 + 48) = v41;\n  if ( !v38 || !v107 || !size || !v41 )\n  {\n    v109 = 12;\n    goto LABEL_108;\n  }\n  v42 = *(_QWORD *)(v7 + 48);\n  v43 = malloc(8 * v42);\n  *(_QWORD *)(v35 + 224) = v43;\n  if ( v43 )\n  {\n    v44 = 0LL;\n    if ( v42 )\n    {\n      do\n      {\n        v43[v44] = v44;\n        ++v44;\n      }\n      while ( v44 != v42 );\n    }\n    sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40CA30, v35);\n    v45 = *(_QWORD *)(v7 + 48);\n    if ( v45 )\n    {\n      v46 = *(__int64 **)(v35 + 224);\n      v47 = *v46;\n      if ( *v46 )\n        goto LABEL_53;\n      while ( ++v47 != v45 )\n      {\n        if ( v46[v47] != v47 )\n          goto LABEL_53;\n      }\n    }\n    else\n    {\n      v46 = *(__int64 **)(v35 + 224);\n    }\n    free(v46);\n    *(_QWORD *)(v35 + 224) = 0LL;\n  }\nLABEL_53:\n  v22 = sub_40AD30(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40D8B0, v7);\n  if ( v22 )\n    goto LABEL_83;\n  v22 = sub_40AD30(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40FDE0, v35);\n  if ( v22 )\n    goto LABEL_83;\n  sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40CAC0, v35);\n  v22 = sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40C5C0, v35);\n  if ( v22 )\n    goto LABEL_83;\n  v48 = 0;\n  v49 = 0LL;\n  while ( *(_QWORD *)(v35 + 16) != v49 )\n  {\n    while ( 1 )\n    {\n      while ( *(_QWORD *)(*(_QWORD *)(v35 + 48) + 24 * v49 + 8) )\n      {\n        if ( *(_QWORD *)(v35 + 16) == ++v49 )\n          goto LABEL_60;\n      }\n      sizea = 24 * v49;\n      v22 = sub_40CFA0((__m128i *)&v111, (__int64 *)v35, v49, 1);\n      if ( v22 )\n        goto LABEL_83;\n      ++v49;\n      if ( *(_QWORD *)(*(_QWORD *)(v35 + 48) + sizea + 8) )\n        break;\n      v48 = 1;\n      free(ptr);\n      if ( *(_QWORD *)(v35 + 16) == v49 )\n      {\nLABEL_61:\n        v48 = 0;\n        v49 = 0LL;\n      }\n    }\n  }\nLABEL_60:\n  if ( v48 )\n    goto LABEL_61;\n  if ( !(*(_BYTE *)(v7 + 56) & 0x10) && *(_QWORD *)(v7 + 48) && *(_BYTE *)(v35 + 176) & 1 || *(_QWORD *)(v35 + 152) )\n  {\n    v50 = (char *)malloc(24 * v49);\n    *(_QWORD *)(v35 + 56) = v50;\n    if ( !v50 )\n    {\n      v109 = 12;\n      v35 = *(_QWORD *)v7;\n      goto LABEL_108;\n    }\n    v51 = 0LL;\n    if ( !v49 )\n      goto LABEL_85;\n    while ( 1 )\n    {\n      v52 = 3 * v51++;\n      v53 = (__int64)&v50[8 * v52];\n      *(_OWORD *)v53 = 0LL;\n      *(_QWORD *)(v53 + 16) = 0LL;\n      v54 = *(_QWORD *)(v35 + 16);\n      if ( v54 <= v51 )\n        break;\n      v50 = *(char **)(v35 + 56);\n    }\n    if ( !v54 )\n      goto LABEL_85;\n    v108 = 0LL;\n    v55 = *(_QWORD *)(v35 + 48);\n    while ( 1 )\n    {\n      v56 = 0LL;\n      v57 = v55 + 24 * v108;\n      v58 = *(_QWORD *)(v57 + 16);\n      if ( *(_QWORD *)(v57 + 8) > 0LL )\n        break;\nLABEL_138:\n      if ( *(_QWORD *)(v35 + 16) <= (unsigned __int64)++v108 )\n        goto LABEL_85;\n    }\n    while ( 1 )\n    {\n      sizeb = v58;\n      if ( !(unsigned __int8)sub_40B210((_QWORD *)(*(_QWORD *)(v35 + 56) + 24LL * *(_QWORD *)(v58 + 8 * v56)), v108) )\n        break;\n      v55 = *(_QWORD *)(v35 + 48);\n      ++v56;\n      v58 = sizeb;\n      if ( v56 >= *(_QWORD *)(v55 + 24 * v108 + 8) )\n        goto LABEL_138;\n    }\n    v22 = 12;\n    goto LABEL_83;\n  }\nLABEL_85:\n  v59 = *((_BYTE *)v9 + 176);\n  v109 = 0;\n  v60 = (v98 == 0) & (v59 >> 2);\n  if ( v60 && !*(_QWORD *)(v7 + 40) )\n  {\n    v85 = *((_QWORD *)v9 + 2);\n    if ( v85 )\n    {\n      v86 = *(unsigned __int8 **)v9;\n      v87 = 0;\n      v88 = 0LL;\n      v89 = *(unsigned __int8 **)v9;\n      while ( 2 )\n      {\n        switch ( (unsigned __int64)v89[8] )\n        {\n          case 1uLL:\n            if ( (*v89 & 0x80u) != 0 )\n              v48 = v60;\n            goto LABEL_145;\n          case 2uLL:\n          case 4uLL:\n          case 8uLL:\n          case 9uLL:\n          case 0xAuLL:\n          case 0xBuLL:\n            goto LABEL_145;\n          case 3uLL:\n            if ( *(_QWORD *)(*(_QWORD *)v89 + 16LL) || *(_QWORD *)(*(_QWORD *)v89 + 24LL) )\n              goto LABEL_86;\n            goto LABEL_145;\n          case 5uLL:\n            v87 = v60;\n            goto LABEL_145;\n          case 6uLL:\n            goto LABEL_86;\n          case 0xCuLL:\n            v95 = *(_DWORD *)v89;\n            if ( *(_DWORD *)v89 == 32 )\n              goto LABEL_145;\n            if ( v95 <= 0x20 )\n            {\n              if ( v95 != 16 )\n                goto LABEL_86;\n            }\n            else if ( v95 != 64 && v95 != 128 )\n            {\n              goto LABEL_86;\n            }\nLABEL_145:\n            ++v88;\n            v89 += 16;\n            if ( v88 != v85 )\n              continue;\n            if ( !((unsigned __int8)v87 | (unsigned __int8)v48) )\n              goto LABEL_172;\n            v93 = (__int64)&v86[16 * v88];\n            do\n            {\n              v94 = v86[8];\n              if ( v94 == 1 )\n              {\n                if ( (*v86 & 0x80u) != 0 )\n                  v86[10] &= 0xDFu;\n              }\n              else if ( v94 == 5 )\n              {\n                v86[8] = 7;\n              }\n              v86 += 16;\n            }\n            while ( (unsigned __int8 *)v93 != v86 );\n            break;\n          default:\n            abort();\n            return result;\n        }\n        break;\n      }\n    }\n    else\n    {\nLABEL_172:\n      v87 = 0;\n    }\n    v14 = *((_QWORD *)v9 + 19) == 0LL;\n    v96 = *((_QWORD *)v9 + 19) < 0;\n    v97 = *((_BYTE *)v9 + 176);\n    v9[45] = 1;\n    *((_BYTE *)v9 + 176) = v97 & 0xF9 | (2 * ((v87 | (!v96 && !v14)) & 1));\n  }\nLABEL_86:\n  v61 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 13) + 24LL) + 56LL);\n  *((_QWORD *)v9 + 18) = v61;\n  v62 = sub_40D930((__int64)&v111, *((_QWORD *)v9 + 6) + 24 * v61);\n  v110.m128i_i32[0] = v62;\n  if ( !v62 )\n  {\n    if ( *((_QWORD *)v9 + 19) > 0LL )\n    {\n      v63 = v112;\n      if ( v112 > 0 )\n      {\n        v64 = 0LL;\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            v65 = *(_QWORD *)v9 + 16LL * *((_QWORD *)ptr + v64);\n            if ( *(_BYTE *)(v65 + 8) == 4 )\n            {\n              v66 = 0LL;\n              while ( 1 )\n              {\n                v67 = *(_QWORD *)v9 + 16LL * *((_QWORD *)ptr + v66);\n                if ( *(_BYTE *)(v67 + 8) == 9 && *(_QWORD *)v67 == *(_QWORD *)v65 )\n                  break;\n                if ( v63 == ++v66 )\n                  goto LABEL_90;\n              }\n              if ( !sub_40C890(\n                      v63,\n                      (__int64 *)&ptr,\n                      **(_QWORD **)(*((_QWORD *)v9 + 5) + 24LL * *((_QWORD *)ptr + v64) + 16)) )\n                break;\n            }\nLABEL_90:\n            if ( v63 <= ++v64 )\n              goto LABEL_99;\n          }\n          v69 = sub_40CDD0((__int64)&v111, *((_QWORD *)v9 + 6) + 24 * v68);\n          if ( v69 )\n            break;\n          v63 = v112;\n          v64 = 1LL;\n          if ( v112 <= 1 )\n            goto LABEL_99;\n        }\n        v62 = v69;\n        goto LABEL_103;\n      }\n    }\nLABEL_99:\n    v70 = sub_40DB40(&v110, v9, (__int64)&v111, 0);\n    *((_QWORD *)v9 + 9) = v70;\n    if ( v70 )\n    {\n      if ( *((_BYTE *)v70 + 104) >= 0 )\n      {\n        *((_QWORD *)v9 + 12) = v70;\n        *((_QWORD *)v9 + 11) = v70;\n        *((_QWORD *)v9 + 10) = v70;\nLABEL_102:\n        free(ptr);\n        goto LABEL_103;\n      }\n      *((_QWORD *)v9 + 10) = sub_40DB40(&v110, v9, (__int64)&v111, 1u);\n      *((_QWORD *)v9 + 11) = sub_40DB40(&v110, v9, (__int64)&v111, 2u);\n      v90 = sub_40DB40(&v110, v9, (__int64)&v111, 6u);\n      v14 = *((_QWORD *)v9 + 10) == 0LL;\n      *((_QWORD *)v9 + 12) = v90;\n      if ( !v14 && *((_QWORD *)v9 + 11) && v90 )\n        goto LABEL_102;\n    }\n    v62 = v110.m128i_i32[0];\n  }\nLABEL_103:\n  v71 = *(_QWORD *)v7;\n  v109 = v62;\n  v72 = *(_QWORD **)(v71 + 112);\n  if ( v72 )\n  {\n    do\n    {\n      v73 = (_QWORD *)*v72;\n      free(v72);\n      v72 = v73;\n    }\n    while ( v73 );\n  }\n  *(_QWORD *)(v71 + 112) = 0LL;\n  v74 = *(void **)(v71 + 32);\n  *(_DWORD *)(v71 + 128) = 15;\n  *(_QWORD *)(v71 + 104) = 0LL;\n  free(v74);\n  *(_QWORD *)(v71 + 32) = 0LL;\n  sub_40C4C0((__int64)&v114);\n  result = v109;\n  if ( v109 )\n    goto LABEL_111;\n  return result;\n}\n\n__int64 __fastcall sub_417250(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  __int64 v4; // r14\n  __int64 v5; // r13\n  unsigned __int64 v6; // r12\n  __int64 v7; // rbp\n  bool v8; // cc\n  int *v9; // rbx\n  size_t i; // rsi\n  __int64 v11; // r15\n  void *v12; // rax\n  char *v13; // rax\n  bool v14; // zf\n  char v15; // al\n  __int64 v16; // rdx\n  int v17; // edi\n  __int64 v18; // rdx\n  unsigned __int8 v19; // al\n  char v20; // si\n  __int64 v21; // r15\n  unsigned int v22; // eax\n  __int64 v23; // rcx\n  __int64 v24; // rax\n  __int64 v25; // r12\n  int v26; // eax\n  char *v27; // rax\n  _QWORD *v28; // r15\n  int *v29; // r13\n  char *v30; // rax\n  _QWORD *v31; // r9\n  char *v32; // r14\n  char *v33; // rdx\n  char *v34; // rax\n  __int64 v35; // r15\n  size_t v36; // r13\n  void *v37; // rax\n  void *v38; // r14\n  void *v39; // rax\n  void *v40; // rax\n  void *v41; // rax\n  __int64 v42; // r13\n  _QWORD *v43; // rax\n  __int64 v44; // rdx\n  __int64 v45; // rdx\n  __int64 *v46; // rdi\n  __int64 v47; // rax\n  char v48; // r13\n  __int64 v49; // r14\n  char *v50; // rax\n  unsigned __int64 v51; // rdx\n  __int64 v52; // rcx\n  __int64 v53; // rax\n  unsigned __int64 v54; // rax\n  __int64 v55; // rax\n  __int64 v56; // r14\n  __int64 v57; // rsi\n  size_t v58; // rcx\n  unsigned __int8 v59; // al\n  char v60; // al\n  __int64 v61; // rax\n  unsigned int v62; // er13\n  __int64 v63; // r10\n  __int64 v64; // r9\n  __int64 v65; // rcx\n  __int64 v66; // rdx\n  __int64 v67; // rax\n  __int64 v68; // r11\n  unsigned int v69; // eax\n  __int64 *v70; // rax\n  __int64 v71; // r12\n  _QWORD *v72; // rdi\n  _QWORD *v73; // r13\n  void *v74; // rdi\n  __int64 result; // rax\n  _QWORD *v76; // rdi\n  _QWORD *v77; // r12\n  void *v78; // rdi\n  void *v79; // rax\n  __int64 v80; // r15\n  int v81; // edx\n  int v82; // ecx\n  wint_t v83; // eax\n  unsigned int v84; // edi\n  __int64 v85; // rdi\n  unsigned __int8 *v86; // r8\n  char v87; // r9\n  __int64 v88; // rcx\n  unsigned __int8 *v89; // rdx\n  __int64 *v90; // rax\n  int *v91; // rax\n  char *v92; // rax\n  __int64 v93; // rax\n  unsigned __int8 v94; // dl\n  unsigned int v95; // esi\n  bool v96; // sf\n  char v97; // dl\n  __int64 v98; // [rsp+0h] [rbp-138h]\n  int v99; // [rsp+0h] [rbp-138h]\n  size_t sized; // [rsp+8h] [rbp-130h]\n  __int64 sizee; // [rsp+8h] [rbp-130h]\n  size_t size; // [rsp+8h] [rbp-130h]\n  size_t sizea; // [rsp+8h] [rbp-130h]\n  size_t sizeb; // [rsp+8h] [rbp-130h]\n  int sizec; // [rsp+8h] [rbp-130h]\n  size_t sizef; // [rsp+8h] [rbp-130h]\n  void *v107; // [rsp+10h] [rbp-128h]\n  __int64 v108; // [rsp+10h] [rbp-128h]\n  unsigned int v109; // [rsp+2Ch] [rbp-10Ch]\n  __m128i v110; // [rsp+30h] [rbp-108h]\n  char v111; // [rsp+40h] [rbp-F8h]\n  __int64 v112; // [rsp+48h] [rbp-F0h]\n  void *ptr; // [rsp+50h] [rbp-E8h]\n  __int64 v114; // [rsp+60h] [rbp-D8h]\n  __int64 v115; // [rsp+68h] [rbp-D0h]\n  __int64 v116; // [rsp+88h] [rbp-B0h]\n  __int64 v117; // [rsp+90h] [rbp-A8h]\n  __int64 v118; // [rsp+98h] [rbp-A0h]\n  __int64 v119; // [rsp+A0h] [rbp-98h]\n  __int64 v120; // [rsp+A8h] [rbp-90h]\n  unsigned __int64 v121; // [rsp+B0h] [rbp-88h]\n  __int64 v122; // [rsp+B8h] [rbp-80h]\n  unsigned __int64 v123; // [rsp+C0h] [rbp-78h]\n  unsigned __int64 v124; // [rsp+C8h] [rbp-70h]\n  __int64 v125; // [rsp+D8h] [rbp-60h]\n  bool v126; // [rsp+E8h] [rbp-50h]\n  char v127; // [rsp+E9h] [rbp-4Fh]\n  char v128; // [rsp+EAh] [rbp-4Eh]\n  bool v129; // [rsp+EBh] [rbp-4Dh]\n  int v130; // [rsp+F0h] [rbp-48h]\n\n  v4 = a2;\n  v5 = a4;\n  v6 = a3;\n  v7 = a1;\n  *(_BYTE *)(a1 + 56) &= 0x90u;\n  v8 = *(_QWORD *)(a1 + 8) <= 0xE7uLL;\n  v109 = 0;\n  v9 = *(int **)a1;\n  *(_QWORD *)(a1 + 24) = a4;\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_QWORD *)(a1 + 48) = 0LL;\n  if ( v8 )\n  {\n    v91 = (int *)realloc(v9, 0xE8uLL);\n    v9 = v91;\n    if ( !v91 )\n      return 12LL;\n    *(_QWORD *)(a1 + 8) = 232LL;\n    *(_QWORD *)a1 = v91;\n  }\n  *(_QWORD *)(a1 + 16) = 232LL;\n  *(_QWORD *)v9 = 0LL;\n  *((_QWORD *)v9 + 28) = 0LL;\n  memset(\n    (void *)((unsigned __int64)(v9 + 2) & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v9 - (((_DWORD)v9 + 8) & 0xFFFFFFF8) + 232) >> 3));\n  v9[32] = 15;\n  if ( v6 > 0x555555555555554LL )\n    goto LABEL_112;\n  *((_QWORD *)v9 + 1) = v6 + 1;\n  *(_QWORD *)v9 = malloc(16 * (v6 + 1));\n  if ( v6 )\n  {\n    for ( i = 1LL; i <= v6; i *= 2LL )\n      ;\n    v11 = i - 1;\n  }\n  else\n  {\n    v11 = 0LL;\n    i = 1LL;\n  }\n  v12 = calloc(0x18uLL, i);\n  *((_QWORD *)v9 + 17) = v11;\n  *((_QWORD *)v9 + 8) = v12;\n  v9[45] = __ctype_get_mb_cur_max();\n  v13 = nl_langinfo(14);\n  if ( (*v13 & 0xDF) == 85 && (v13[1] & 0xDF) == 84 && (v13[2] & 0xDF) == 70 )\n  {\n    v14 = v13[3] == 45;\n    if ( !memcmp(&v13[v14 + 3], \"8\", 2uLL) )\n      *((_BYTE *)v9 + 176) |= 4u;\n  }\n  v15 = *((_BYTE *)v9 + 176);\n  v8 = v9[45] <= 1;\n  *((_BYTE *)v9 + 176) &= 0xF7u;\n  if ( !v8 )\n  {\n    if ( v15 & 4 )\n    {\n      *((_QWORD *)v9 + 15) = &unk_41E560;\n      goto LABEL_15;\n    }\n    v79 = calloc(0x20uLL, 1uLL);\n    *((_QWORD *)v9 + 15) = v79;\n    if ( !v79 )\n    {\nLABEL_112:\n      v109 = 12;\nLABEL_111:\n      sub_40FE70(v9);\n      *(_QWORD *)v7 = 0LL;\n      result = v109;\n      *(_QWORD *)(v7 + 8) = 0LL;\n      return result;\n    }\n    v80 = 0LL;\nLABEL_115:\n    v81 = 8 * v80;\n    v82 = 0;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        sizec = v82;\n        v99 = v81;\n        v83 = btowc(v81);\n        v84 = v99 & 0xFFFFFF80;\n        if ( v83 != -1 )\n          break;\n        if ( !v84 )\n          goto LABEL_117;\nLABEL_118:\n        v82 = sizec + 1;\n        v81 = v99 + 1;\n        if ( sizec == 63 )\n          goto LABEL_123;\n      }\n      *(_QWORD *)(v80 + *((_QWORD *)v9 + 15)) |= 1LL << sizec;\n      if ( v84 )\n        goto LABEL_118;\n      if ( v83 != v99 )\n      {\nLABEL_117:\n        *((_BYTE *)v9 + 176) |= 8u;\n        goto LABEL_118;\n      }\n      v82 = sizec + 1;\n      v81 = v99 + 1;\n      if ( sizec == 63 )\n      {\nLABEL_123:\n        v80 += 8LL;\n        if ( v80 == 32 )\n          break;\n        goto LABEL_115;\n      }\n    }\n  }\nLABEL_15:\n  if ( !*(_QWORD *)v9 || !*((_QWORD *)v9 + 8) )\n    goto LABEL_112;\n  v16 = *(_QWORD *)(v7 + 40);\n  v109 = 0;\n  memset(&v115, 0, 0x90uLL);\n  v125 = v16;\n  v17 = v9[45];\n  v114 = v4;\n  v98 = v5 & 0x400000;\n  v126 = (v5 & 0x400000) != 0;\n  v18 = v98 | v16;\n  v19 = *((_BYTE *)v9 + 176);\n  v20 = v18 != 0;\n  v122 = v6;\n  v21 = v18;\n  v121 = v6;\n  v129 = v18 != 0;\n  v130 = v17;\n  v127 = (v19 >> 2) & 1;\n  v128 = (v19 >> 3) & 1;\n  v124 = v6;\n  v123 = v6;\n  if ( v6 )\n  {\n    v22 = sub_40B170((__int64)&v114, v6 + 1);\n    if ( v22 )\n    {\nLABEL_83:\n      v109 = v22;\n      v35 = *(_QWORD *)v7;\nLABEL_108:\n      v76 = *(_QWORD **)(v35 + 112);\n      if ( v76 )\n      {\n        do\n        {\n          v77 = (_QWORD *)*v76;\n          free(v76);\n          v76 = v77;\n        }\n        while ( v77 );\n      }\n      *(_QWORD *)(v35 + 112) = 0LL;\n      v78 = *(void **)(v35 + 32);\n      *(_DWORD *)(v35 + 128) = 15;\n      *(_QWORD *)(v35 + 104) = 0LL;\n      free(v78);\n      *(_QWORD *)(v35 + 32) = 0LL;\n      sub_40C4C0((__int64)&v114);\n      goto LABEL_111;\n    }\n    v20 = v129;\n    v17 = v9[45];\n  }\n  if ( v20 )\n    v4 = v115;\n  v115 = v4;\n  if ( v5 & 0x400000 )\n  {\n    if ( v17 <= 1 )\n    {\n      sub_40B4E0(&v114);\n      v109 = 0;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v22 = sub_40B710((__int64)&v114);\n        if ( v22 )\n          goto LABEL_83;\n        if ( (__int64)v6 <= v118 || v119 > v117 + v9[45] )\n          break;\n        v22 = sub_40B170((__int64)&v114, 2 * v119);\n        if ( v22 )\n          goto LABEL_83;\n      }\n      v109 = 0;\n    }\n  }\n  else if ( v17 > 1 )\n  {\n    sub_40B560((mbstate_t *)&v114);\n    v109 = 0;\n  }\n  else\n  {\n    v23 = v119;\n    if ( v21 )\n    {\n      v24 = v117;\n      if ( v122 <= v119 )\n        v23 = v122;\n      if ( v23 > v117 )\n      {\n        while ( 1 )\n        {\n          *(_BYTE *)(v4 + v24) = *(_BYTE *)(v125 + *(unsigned __int8 *)(v116 + v24 + v114));\n          if ( v23 == ++v24 )\n            break;\n          v4 = v115;\n        }\n      }\n      else\n      {\n        v23 = v117;\n      }\n    }\n    v117 = v23;\n    v118 = v23;\n    v109 = 0;\n  }\n  v25 = *(_QWORD *)v7;\n  *(_QWORD *)(v7 + 48) = 0LL;\n  *(_QWORD *)(v25 + 216) = v5;\n  v26 = sub_415350((unsigned __int8 *)&v110, &v114, v5 | 0x800000);\n  v120 += v26;\n  v27 = sub_4170F0(&v114, (__int64 *)v7, &v110, v5, 0LL, &v109);\n  if ( v109 )\n  {\n    if ( !v27 )\n    {\n      *((_QWORD *)v9 + 13) = 0LL;\n      v35 = *(_QWORD *)v7;\n      goto LABEL_108;\n    }\n    v28 = (_QWORD *)(v25 + 112);\n    sizef = (size_t)v27;\n    v29 = (int *)(v25 + 128);\n    LOBYTE(v112) = 2;\n    v92 = sub_40D500((_QWORD *)(v25 + 112), (int *)(v25 + 128), 0LL, 0LL, (const __m128i *)&v111);\n    v31 = (_QWORD *)sizef;\n    v32 = v92;\n  }\n  else\n  {\n    v28 = (_QWORD *)(v25 + 112);\n    sized = (size_t)v27;\n    v29 = (int *)(v25 + 128);\n    LOBYTE(v112) = 2;\n    v30 = sub_40D500((_QWORD *)(v25 + 112), (int *)(v25 + 128), 0LL, 0LL, (const __m128i *)&v111);\n    v31 = (_QWORD *)sized;\n    v32 = v30;\n    v33 = v30;\n    if ( !sized )\n      goto LABEL_39;\n  }\n  LOBYTE(v112) = 16;\n  v34 = sub_40D500(v28, v29, v31, v32, (const __m128i *)&v111);\n  v33 = v32;\n  v32 = v34;\nLABEL_39:\n  v35 = *(_QWORD *)v7;\n  if ( v32 == 0LL || v33 == 0LL )\n  {\n    v109 = 12;\n    *((_QWORD *)v9 + 13) = 0LL;\n    goto LABEL_108;\n  }\n  v36 = *(_QWORD *)(v35 + 8);\n  *((_QWORD *)v9 + 13) = v32;\n  sizee = 8 * v36;\n  v36 *= 24LL;\n  v37 = malloc(sizee);\n  *(_QWORD *)(v35 + 24) = v37;\n  v38 = v37;\n  v39 = malloc(sizee);\n  *(_QWORD *)(v35 + 32) = v39;\n  v107 = v39;\n  v40 = malloc(v36);\n  *(_QWORD *)(v35 + 40) = v40;\n  size = (size_t)v40;\n  v41 = malloc(v36);\n  *(_QWORD *)(v35 + 48) = v41;\n  if ( !v38 || !v107 || !size || !v41 )\n  {\n    v109 = 12;\n    goto LABEL_108;\n  }\n  v42 = *(_QWORD *)(v7 + 48);\n  v43 = malloc(8 * v42);\n  *(_QWORD *)(v35 + 224) = v43;\n  if ( v43 )\n  {\n    v44 = 0LL;\n    if ( v42 )\n    {\n      do\n      {\n        v43[v44] = v44;\n        ++v44;\n      }\n      while ( v44 != v42 );\n    }\n    sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40CA30, v35);\n    v45 = *(_QWORD *)(v7 + 48);\n    if ( v45 )\n    {\n      v46 = *(__int64 **)(v35 + 224);\n      v47 = *v46;\n      if ( *v46 )\n        goto LABEL_53;\n      while ( ++v47 != v45 )\n      {\n        if ( v46[v47] != v47 )\n          goto LABEL_53;\n      }\n    }\n    else\n    {\n      v46 = *(__int64 **)(v35 + 224);\n    }\n    free(v46);\n    *(_QWORD *)(v35 + 224) = 0LL;\n  }\nLABEL_53:\n  v22 = sub_40AD30(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40D8B0, v7);\n  if ( v22 )\n    goto LABEL_83;\n  v22 = sub_40AD30(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40FDE0, v35);\n  if ( v22 )\n    goto LABEL_83;\n  sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40CAC0, v35);\n  v22 = sub_40CD70(*(_QWORD **)(v35 + 104), (__int64 (__fastcall *)(__int64, _QWORD *))sub_40C5C0, v35);\n  if ( v22 )\n    goto LABEL_83;\n  v48 = 0;\n  v49 = 0LL;\n  while ( *(_QWORD *)(v35 + 16) != v49 )\n  {\n    while ( 1 )\n    {\n      while ( *(_QWORD *)(*(_QWORD *)(v35 + 48) + 24 * v49 + 8) )\n      {\n        if ( *(_QWORD *)(v35 + 16) == ++v49 )\n          goto LABEL_60;\n      }\n      sizea = 24 * v49;\n      v22 = sub_40CFA0((__m128i *)&v111, (__int64 *)v35, v49, 1);\n      if ( v22 )\n        goto LABEL_83;\n      ++v49;\n      if ( *(_QWORD *)(*(_QWORD *)(v35 + 48) + sizea + 8) )\n        break;\n      v48 = 1;\n      free(ptr);\n      if ( *(_QWORD *)(v35 + 16) == v49 )\n      {\nLABEL_61:\n        v48 = 0;\n        v49 = 0LL;\n      }\n    }\n  }\nLABEL_60:\n  if ( v48 )\n    goto LABEL_61;\n  if ( !(*(_BYTE *)(v7 + 56) & 0x10) && *(_QWORD *)(v7 + 48) && *(_BYTE *)(v35 + 176) & 1 || *(_QWORD *)(v35 + 152) )\n  {\n    v50 = (char *)malloc(24 * v49);\n    *(_QWORD *)(v35 + 56) = v50;\n    if ( !v50 )\n    {\n      v109 = 12;\n      v35 = *(_QWORD *)v7;\n      goto LABEL_108;\n    }\n    v51 = 0LL;\n    if ( !v49 )\n      goto LABEL_85;\n    while ( 1 )\n    {\n      v52 = 3 * v51++;\n      v53 = (__int64)&v50[8 * v52];\n      *(_OWORD *)v53 = 0LL;\n      *(_QWORD *)(v53 + 16) = 0LL;\n      v54 = *(_QWORD *)(v35 + 16);\n      if ( v54 <= v51 )\n        break;\n      v50 = *(char **)(v35 + 56);\n    }\n    if ( !v54 )\n      goto LABEL_85;\n    v108 = 0LL;\n    v55 = *(_QWORD *)(v35 + 48);\n    while ( 1 )\n    {\n      v56 = 0LL;\n      v57 = v55 + 24 * v108;\n      v58 = *(_QWORD *)(v57 + 16);\n      if ( *(_QWORD *)(v57 + 8) > 0LL )\n        break;\nLABEL_138:\n      if ( *(_QWORD *)(v35 + 16) <= (unsigned __int64)++v108 )\n        goto LABEL_85;\n    }\n    while ( 1 )\n    {\n      sizeb = v58;\n      if ( !(unsigned __int8)sub_40B210((_QWORD *)(*(_QWORD *)(v35 + 56) + 24LL * *(_QWORD *)(v58 + 8 * v56)), v108) )\n        break;\n      v55 = *(_QWORD *)(v35 + 48);\n      ++v56;\n      v58 = sizeb;\n      if ( v56 >= *(_QWORD *)(v55 + 24 * v108 + 8) )\n        goto LABEL_138;\n    }\n    v22 = 12;\n    goto LABEL_83;\n  }\nLABEL_85:\n  v59 = *((_BYTE *)v9 + 176);\n  v109 = 0;\n  v60 = (v98 == 0) & (v59 >> 2);\n  if ( v60 && !*(_QWORD *)(v7 + 40) )\n  {\n    v85 = *((_QWORD *)v9 + 2);\n    if ( v85 )\n    {\n      v86 = *(unsigned __int8 **)v9;\n      v87 = 0;\n      v88 = 0LL;\n      v89 = *(unsigned __int8 **)v9;\n      while ( 2 )\n      {\n        switch ( (unsigned __int64)v89[8] )\n        {\n          case 1uLL:\n            if ( (*v89 & 0x80u) != 0 )\n              v48 = v60;\n            goto LABEL_145;\n          case 2uLL:\n          case 4uLL:\n          case 8uLL:\n          case 9uLL:\n          case 0xAuLL:\n          case 0xBuLL:\n            goto LABEL_145;\n          case 3uLL:\n            if ( *(_QWORD *)(*(_QWORD *)v89 + 16LL) || *(_QWORD *)(*(_QWORD *)v89 + 24LL) )\n              goto LABEL_86;\n            goto LABEL_145;\n          case 5uLL:\n            v87 = v60;\n            goto LABEL_145;\n          case 6uLL:\n            goto LABEL_86;\n          case 0xCuLL:\n            v95 = *(_DWORD *)v89;\n            if ( *(_DWORD *)v89 == 32 )\n              goto LABEL_145;\n            if ( v95 <= 0x20 )\n            {\n              if ( v95 != 16 )\n                goto LABEL_86;\n            }\n            else if ( v95 != 64 && v95 != 128 )\n            {\n              goto LABEL_86;\n            }\nLABEL_145:\n            ++v88;\n            v89 += 16;\n            if ( v88 != v85 )\n              continue;\n            if ( !((unsigned __int8)v87 | (unsigned __int8)v48) )\n              goto LABEL_172;\n            v93 = (__int64)&v86[16 * v88];\n            do\n            {\n              v94 = v86[8];\n              if ( v94 == 1 )\n              {\n                if ( (*v86 & 0x80u) != 0 )\n                  v86[10] &= 0xDFu;\n              }\n              else if ( v94 == 5 )\n              {\n                v86[8] = 7;\n              }\n              v86 += 16;\n            }\n            while ( (unsigned __int8 *)v93 != v86 );\n            break;\n          default:\n            abort();\n            return result;\n        }\n        break;\n      }\n    }\n    else\n    {\nLABEL_172:\n      v87 = 0;\n    }\n    v14 = *((_QWORD *)v9 + 19) == 0LL;\n    v96 = *((_QWORD *)v9 + 19) < 0;\n    v97 = *((_BYTE *)v9 + 176);\n    v9[45] = 1;\n    *((_BYTE *)v9 + 176) = v97 & 0xF9 | (2 * ((v87 | (!v96 && !v14)) & 1));\n  }\nLABEL_86:\n  v61 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 13) + 24LL) + 56LL);\n  *((_QWORD *)v9 + 18) = v61;\n  v62 = sub_40D930((__int64)&v111, *((_QWORD *)v9 + 6) + 24 * v61);\n  v110.m128i_i32[0] = v62;\n  if ( !v62 )\n  {\n    if ( *((_QWORD *)v9 + 19) > 0LL )\n    {\n      v63 = v112;\n      if ( v112 > 0 )\n      {\n        v64 = 0LL;\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            v65 = *(_QWORD *)v9 + 16LL * *((_QWORD *)ptr + v64);\n            if ( *(_BYTE *)(v65 + 8) == 4 )\n            {\n              v66 = 0LL;\n              while ( 1 )\n              {\n                v67 = *(_QWORD *)v9 + 16LL * *((_QWORD *)ptr + v66);\n                if ( *(_BYTE *)(v67 + 8) == 9 && *(_QWORD *)v67 == *(_QWORD *)v65 )\n                  break;\n                if ( v63 == ++v66 )\n                  goto LABEL_90;\n              }\n              if ( !sub_40C890(\n                      v63,\n                      (__int64 *)&ptr,\n                      **(_QWORD **)(*((_QWORD *)v9 + 5) + 24LL * *((_QWORD *)ptr + v64) + 16)) )\n                break;\n            }\nLABEL_90:\n            if ( v63 <= ++v64 )\n              goto LABEL_99;\n          }\n          v69 = sub_40CDD0((__int64)&v111, *((_QWORD *)v9 + 6) + 24 * v68);\n          if ( v69 )\n            break;\n          v63 = v112;\n          v64 = 1LL;\n          if ( v112 <= 1 )\n            goto LABEL_99;\n        }\n        v62 = v69;\n        goto LABEL_103;\n      }\n    }\nLABEL_99:\n    v70 = sub_40DB40(&v110, v9, (__int64)&v111, 0);\n    *((_QWORD *)v9 + 9) = v70;\n    if ( v70 )\n    {\n      if ( *((_BYTE *)v70 + 104) >= 0 )\n      {\n        *((_QWORD *)v9 + 12) = v70;\n        *((_QWORD *)v9 + 11) = v70;\n        *((_QWORD *)v9 + 10) = v70;\nLABEL_102:\n        free(ptr);\n        goto LABEL_103;\n      }\n      *((_QWORD *)v9 + 10) = sub_40DB40(&v110, v9, (__int64)&v111, 1u);\n      *((_QWORD *)v9 + 11) = sub_40DB40(&v110, v9, (__int64)&v111, 2u);\n      v90 = sub_40DB40(&v110, v9, (__int64)&v111, 6u);\n      v14 = *((_QWORD *)v9 + 10) == 0LL;\n      *((_QWORD *)v9 + 12) = v90;\n      if ( !v14 && *((_QWORD *)v9 + 11) && v90 )\n        goto LABEL_102;\n    }\n    v62 = v110.m128i_i32[0];\n  }\nLABEL_103:\n  v71 = *(_QWORD *)v7;\n  v109 = v62;\n  v72 = *(_QWORD **)(v71 + 112);\n  if ( v72 )\n  {\n    do\n    {\n      v73 = (_QWORD *)*v72;\n      free(v72);\n      v72 = v73;\n    }\n    while ( v73 );\n  }\n  *(_QWORD *)(v71 + 112) = 0LL;\n  v74 = *(void **)(v71 + 32);\n  *(_DWORD *)(v71 + 128) = 15;\n  *(_QWORD *)(v71 + 104) = 0LL;\n  free(v74);\n  *(_QWORD *)(v71 + 32) = 0LL;\n  sub_40C4C0((__int64)&v114);\n  result = v109;\n  if ( v109 )\n    goto LABEL_111;\n  return result;\n}\n", 
            "funcStartAddr": "0x401ff3L", 
            "funcEndAddr": "0x401ff8L", 
            "funcName": "sub_417250"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_418000(__int64 a1, unsigned __int64 a2, __int64 a3)\n{\n  __int64 v3; // rcx\n  int v4; // eax\n  char *result; // rax\n\n  v3 = qword_6244D0;\n  *(_BYTE *)(a3 + 56) = (16 * (((unsigned __int64)qword_6244D0 >> 25) & 1)) | *(_BYTE *)(a3 + 56) & 0xEF | 0x80;\n  v4 = sub_417250(a3, a1, a2, v3);\n  if ( v4 )\n    result = dcgettext(0LL, (const char *)(qword_41E580[v4] + 4318752), 5);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x418000L", 
            "funcEndAddr": "0x418067L", 
            "funcName": "sub_418000"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_418080(__int64 a1)\n{\n  __m128i *v1; // rbp\n  _QWORD *v2; // r12\n  __int64 v3; // rax\n  __int64 v4; // rsi\n  __int64 v5; // rsi\n\n  v1 = *(__m128i **)(a1 + 32);\n  v2 = *(_QWORD **)a1;\n  v1->m128i_i64[0] = 0LL;\n  v1[15].m128i_i64[1] = 0LL;\n  memset(\n    (void *)((unsigned __int64)&v1->m128i_u64[1] & 0xFFFFFFFFFFFFFFF8LL),\n    0,\n    8LL * (((unsigned int)v1 - (((_DWORD)v1 + 8) & 0xFFFFFFF8) + 256) >> 3));\n  sub_410B30(a1, (_QWORD *)(v2[9] + 16LL), (_QWORD *)(v2[9] + 24LL), v1);\n  v3 = v2[10];\n  if ( v2[9] != v3 )\n  {\n    sub_410B30(a1, (_QWORD *)(v3 + 16), (_QWORD *)(v3 + 24), v1);\n    v3 = v2[9];\n  }\n  v4 = v2[11];\n  if ( v4 != v3 )\n  {\n    sub_410B30(a1, (_QWORD *)(v4 + 16), (_QWORD *)(v4 + 24), v1);\n    v3 = v2[9];\n  }\n  v5 = v2[12];\n  if ( v5 != v3 )\n    sub_410B30(a1, (_QWORD *)(v5 + 16), (_QWORD *)(v5 + 24), v1);\n  *(_BYTE *)(a1 + 56) |= 8u;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x418080L", 
            "funcEndAddr": "0x418143L", 
            "funcName": "sub_418080"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_418150(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int64 *a7, char a8)\n{\n  __int64 v8; // rax\n  void *v9; // r8\n  unsigned __int64 *v10; // r12\n  __int64 v11; // rbx\n  __int64 v12; // r15\n  char v13; // al\n  unsigned __int64 v14; // rcx\n  unsigned __int64 v15; // r14\n  __int64 v16; // r13\n  size_t v17; // rdi\n  __int64 *v18; // rbp\n  int v19; // eax\n  __int64 v20; // r12\n  unsigned __int64 v22; // rdx\n  int v23; // eax\n  int v24; // er9\n  unsigned __int64 v25; // r8\n  unsigned __int64 v26; // rdi\n  unsigned __int64 v27; // rdx\n  __int64 v28; // rax\n  unsigned __int64 v29; // rsi\n  unsigned __int64 v30; // rcx\n  int v31; // eax\n  size_t v32; // r14\n  void *v33; // rax\n  void *v34; // rax\n  void *v35; // r14\n  void *v36; // rax\n  __int64 size; // [rsp+8h] [rbp-60h]\n  void *ptr; // [rsp+10h] [rbp-58h]\n  void *ptrb; // [rsp+10h] [rbp-58h]\n  void *ptra; // [rsp+10h] [rbp-58h]\n  __int64 v41; // [rsp+18h] [rbp-50h]\n  __int64 v42; // [rsp+18h] [rbp-50h]\n  __int64 v43; // [rsp+20h] [rbp-48h]\n  __int64 v44; // [rsp+20h] [rbp-48h]\n  int v45; // [rsp+2Ch] [rbp-3Ch]\n\n  v8 = a5;\n  v9 = (void *)(a4 + a5);\n  v10 = a7;\n  if ( a4 < 0 || a4 > a3 )\n    return -1LL;\n  v11 = a4;\n  v12 = a1;\n  if ( (__int64)v9 > a3 || v8 >= 0 && a4 > (__int64)v9 )\n  {\n    v9 = (void *)a3;\n  }\n  else if ( (__int64)v9 < 0 || v8 < 0 && a4 <= (__int64)v9 )\n  {\n    v13 = *(_BYTE *)(a1 + 56);\n    v9 = 0LL;\n    v45 = (*(_BYTE *)(a1 + 56) >> 5) & 3;\n    goto LABEL_13;\n  }\n  v13 = *(_BYTE *)(a1 + 56);\n  v45 = (*(_BYTE *)(a1 + 56) >> 5) & 3;\n  if ( (__int64)v9 > a4 && *(_QWORD *)(a1 + 32) && !(v13 & 8) )\n  {\n    v44 = a6;\n    v42 = a3;\n    ptrb = v9;\n    sub_418080(a1);\n    v13 = *(_BYTE *)(a1 + 56);\n    a6 = v44;\n    a3 = v42;\n    v9 = ptrb;\n  }\nLABEL_13:\n  if ( v13 & 0x10 || !a7 )\n    goto LABEL_42;\n  v14 = *(_QWORD *)(a1 + 48);\n  if ( (v13 & 6) != 4 || (v15 = *a7, *a7 > v14) )\n  {\n    v15 = v14 + 1;\n    v16 = v14 + 1;\nLABEL_17:\n    v17 = 16 * v15;\n    goto LABEL_18;\n  }\n  v16 = *a7;\n  if ( (__int64)v15 > 0 )\n    goto LABEL_17;\nLABEL_42:\n  v17 = 16LL;\n  v15 = 1LL;\n  v16 = 1LL;\n  v10 = 0LL;\nLABEL_18:\n  v43 = a6;\n  v41 = a3;\n  ptr = v9;\n  v18 = (__int64 *)malloc(v17);\n  if ( !v18 )\n    return -2LL;\n  v19 = sub_4131A0(v12, a2, v41, v11, (__int64)ptr, v43, v15, v18, v45);\n  if ( !v19 )\n  {\n    if ( !v10 )\n      goto LABEL_37;\n    v22 = v16 + 1;\n    v23 = (*(_BYTE *)(v12 + 56) >> 1) & 3;\n    if ( (*(_BYTE *)(v12 + 56) >> 1) & 3 )\n    {\n      if ( v23 != 1 )\n      {\n        if ( v23 != 2 )\n          __assert_fail(\"regs_allocated == REGS_FIXED\", \"lib/regexec.c\", 0x1F8u, \"re_copy_regs\");\n        if ( v15 > *v10 )\n          __assert_fail(\"regs->num_regs >= nregs\", \"lib/regexec.c\", 0x1FAu, \"re_copy_regs\");\n        v24 = 2;\n        goto LABEL_30;\n      }\n      v24 = 1;\n      if ( *v10 >= v22 )\n      {\nLABEL_30:\n        if ( v16 <= 0 )\n        {\n          v27 = 0LL;\n          v16 = 0LL;\n        }\n        else\n        {\n          v25 = v10[1];\n          v26 = v10[2];\n          v27 = v16;\n          v28 = 0LL;\n          do\n          {\n            *(_QWORD *)(v25 + v28 * 4) = v18[v28];\n            *(_QWORD *)(v26 + v28 * 4) = v18[v28 + 1];\n            v28 += 2LL;\n          }\n          while ( v28 != 2 * v16 );\n        }\n        if ( *v10 > v27 )\n        {\n          v29 = v10[2];\n          v30 = v10[1];\n          do\n          {\n            ++v16;\n            *(_QWORD *)(v29 + 8 * v27) = -1LL;\n            *(_QWORD *)(v30 + 8 * v27) = -1LL;\n            v27 = v16;\n          }\n          while ( *v10 > v16 );\n        }\nLABEL_36:\n        v31 = (2 * v24) | *(_BYTE *)(v12 + 56) & 0xF9;\n        *(_BYTE *)(v12 + 56) = (2 * v24) | *(_BYTE *)(v12 + 56) & 0xF9;\n        if ( !(v31 & 6) )\n          goto LABEL_21;\nLABEL_37:\n        v20 = *v18;\n        if ( a8 )\n        {\n          if ( v11 != v20 )\n            __assert_fail(\"pmatch[0].rm_so == start\", \"lib/regexec.c\", 0x1BDu, \"re_search_stub\");\n          v20 = v18[1] - v20;\n        }\n        goto LABEL_22;\n      }\n      size = 8 * v22;\n      v35 = realloc((void *)v10[1], 8 * v22);\n      if ( v35 )\n      {\n        v36 = realloc((void *)v10[2], size);\n        v24 = 1;\n        if ( !v36 )\n        {\n          free(v35);\n          v24 = 0;\n          goto LABEL_36;\n        }\n        v10[1] = (unsigned __int64)v35;\n        v10[2] = (unsigned __int64)v36;\n        *v10 = v16 + 1;\n        goto LABEL_30;\n      }\n    }\n    else\n    {\n      v32 = 8 * v22;\n      v33 = malloc(8 * v22);\n      v10[1] = (unsigned __int64)v33;\n      if ( v33 )\n      {\n        ptra = v33;\n        v34 = malloc(v32);\n        v10[2] = (unsigned __int64)v34;\n        if ( v34 )\n        {\n          *v10 = v16 + 1;\n          v24 = 1;\n          goto LABEL_30;\n        }\n        free(ptra);\n      }\n    }\n    v24 = 0;\n    goto LABEL_36;\n  }\n  v20 = -1LL;\n  if ( v19 != 1 )\nLABEL_21:\n    v20 = -2LL;\nLABEL_22:\n  free(v18);\n  return v20;\n}\n", 
            "funcStartAddr": "0x418150L", 
            "funcEndAddr": "0x4185a5L", 
            "funcName": "sub_418150"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4185B0(__int64 a1, const void *a2, signed __int64 a3, const void *a4, size_t a5, __int64 a6, __int64 a7, unsigned __int64 *a8, __int64 a9, char a10)\n{\n  const void *v10; // r14\n  __int64 v11; // rcx\n  __int64 v12; // r12\n  size_t v13; // rbp\n  size_t v14; // rbx\n  int v15; // edi\n  __int64 v16; // r9\n  char v17; // r8\n  char *v18; // r13\n  __int64 v19; // rbx\n  char *v21; // rax\n  __int64 v22; // [rsp+10h] [rbp-48h]\n\n  v10 = a4;\n  v11 = a6;\n  v12 = a1;\n  v13 = a5;\n  v14 = a3;\n  v15 = a5 >> 63;\n  v16 = a9;\n  v17 = a10;\n  if ( (a9 < 0) | (unsigned __int8)v15 || a3 < 0 || __OFADD__(v13, a3) )\n    return -2LL;\n  if ( !v13 )\n  {\n    v10 = a2;\n    v18 = 0LL;\n    goto LABEL_6;\n  }\n  v18 = 0LL;\n  if ( a3 )\n  {\n    v22 = v11;\n    v21 = (char *)malloc(v13 + a3);\n    v18 = v21;\n    if ( v21 )\n    {\n      memcpy(v21, a2, v14);\n      memcpy(&v18[v14], v10, v13);\n      v10 = v18;\n      v11 = v22;\n      v16 = a9;\n      v17 = a10;\n      goto LABEL_6;\n    }\n    return -2LL;\n  }\nLABEL_6:\n  v19 = sub_418150(v12, (__int64)v10, v13 + v14, v11, a7, v16, a8, v17);\n  free(v18);\n  return v19;\n}\n", 
            "funcStartAddr": "0x4185b0L", 
            "funcEndAddr": "0x4186dbL", 
            "funcName": "sub_4185B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_418870(void **a1)\n{\n  void **v1; // rbx\n  void *v2; // rdi\n  void *v3; // rdi\n\n  v1 = a1;\n  v2 = *a1;\n  if ( v2 )\n    sub_40FE70(v2);\n  *v1 = 0LL;\n  v3 = v1[4];\n  v1[1] = 0LL;\n  free(v3);\n  v1[4] = 0LL;\n  free(v1[5]);\n  v1[5] = 0LL;\n}\n", 
            "funcStartAddr": "0x418870L", 
            "funcEndAddr": "0x4188b4L", 
            "funcName": "sub_418870"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_418960(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 *a5)\n{\n  return sub_418150(a1, a2, a3, a4, 0LL, a3, a5, 1);\n}\n", 
            "funcStartAddr": "0x418960L", 
            "funcEndAddr": "0x418978L", 
            "funcName": "sub_418960"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_418980(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int64 *a6)\n{\n  return sub_418150(a1, a2, a3, a4, a5, a3, a6, 0);\n}\n", 
            "funcStartAddr": "0x418980L", 
            "funcEndAddr": "0x418995L", 
            "funcName": "sub_418980"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4189A0(__int64 a1, const void *a2, signed __int64 a3, const void *a4, size_t a5, __int64 a6, unsigned __int64 *a7, __int64 a8)\n{\n  return sub_4185B0(a1, a2, a3, a4, a5, a6, 0LL, a7, a8, 1);\n}\n", 
            "funcStartAddr": "0x4189a0L", 
            "funcEndAddr": "0x4189baL", 
            "funcName": "sub_4189A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4189C0(__int64 a1, const void *a2, signed __int64 a3, const void *a4, size_t a5, __int64 a6, __int64 a7, unsigned __int64 *a8, __int64 a9)\n{\n  return sub_4185B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0);\n}\n", 
            "funcStartAddr": "0x4189c0L", 
            "funcEndAddr": "0x4189dcL", 
            "funcName": "sub_4189C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_418A20(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n  int v4; // er8\n  char v5; // al\n  int v6; // er9\n  char v7; // cl\n\n  result = 0LL;\n  if ( a1 != a2 )\n  {\n    v3 = 0LL;\n    do\n    {\n      v4 = *(unsigned __int8 *)(a1 + v3);\n      v5 = *(_BYTE *)(a1 + v3);\n      if ( (unsigned int)(v4 - 65) <= 0x19 )\n      {\n        LOBYTE(v4) = v4 + 32;\n        v5 += 32;\n      }\n      v6 = *(unsigned __int8 *)(a2 + v3);\n      v7 = *(_BYTE *)(a2 + v3);\n      if ( (unsigned int)(v6 - 65) <= 0x19 )\n      {\n        LOBYTE(v6) = v6 + 32;\n        v7 += 32;\n      }\n      if ( !v5 )\n        break;\n      ++v3;\n    }\n    while ( v5 == v7 );\n    result = (unsigned __int8)v4 - (unsigned int)(unsigned __int8)v6;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x418a20L", 
            "funcEndAddr": "0x418a79L", 
            "funcName": "sub_418A20"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_418A80(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_409BC0(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n  }\n  else\n  {\n    if ( !result )\n      return result;\n    if ( !v1 )\n      return -(*__errno_location() != 9);\n  }\n  return -1;\n}\n", 
            "funcStartAddr": "0x418a80L", 
            "funcEndAddr": "0x418addL", 
            "funcName": "sub_418A80"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_418AE0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, (const char *)&unk_41E7B0) )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x418ae0L", 
            "funcEndAddr": "0x418b3eL", 
            "funcName": "sub_418AE0"
        }, 
        {
            "decompiledFuncCode": "const char *sub_418B40()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = qword_623CB8;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_623CB8 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          qword_623CB8 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_409BC0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_409BC0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x418b40L", 
            "funcEndAddr": "0x4190a2L", 
            "funcName": "sub_418B40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4190E0(__int64 a1, const void **a2)\n{\n  const void **v2; // rbx\n  __int64 v3; // rax\n  const void *v4; // rsi\n  size_t v5; // rdx\n  __int64 result; // rax\n  void *v7; // rax\n\n  v2 = a2;\n  v3 = (__int64)(a2 + 3);\n  v4 = *a2;\n  v5 = (size_t)v2[1];\n  if ( v4 == (const void *)v3 )\n  {\n    v7 = memcpy((void *)(a1 + 24), v4, v5);\n    v5 = (size_t)v2[1];\n    *(_QWORD *)a1 = v7;\n  }\n  else\n  {\n    *(_QWORD *)a1 = v4;\n  }\n  result = *((unsigned __int8 *)v2 + 16);\n  *(_QWORD *)(a1 + 8) = v5;\n  *(_BYTE *)(a1 + 16) = result;\n  if ( (_BYTE)result )\n  {\n    result = *((unsigned int *)v2 + 5);\n    *(_DWORD *)(a1 + 20) = result;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4190e0L", 
            "funcEndAddr": "0x419136L", 
            "funcName": "sub_4190E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_419160(unsigned __int8 *a1, __int64 a2, unsigned __int64 a3, _QWORD *a4)\n{\n  unsigned __int8 *v4; // rbx\n  unsigned __int64 v5; // rdi\n  void *v6; // rsp\n  unsigned __int64 v7; // rdi\n  __int64 v8; // r8\n  __int64 v9; // r9\n  char v10; // al\n  __int64 v11; // r8\n  unsigned __int8 *v12; // r9\n  __int64 v13; // rax\n  __int64 v14; // r10\n  __int64 v16; // rax\n  _QWORD *v17; // [rsp+8h] [rbp-28h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-20h]\n  __int64 v19; // [rsp+18h] [rbp-18h]\n\n  v4 = a1;\n  v5 = 8 * a3;\n  if ( a3 & 0x1000000000000000LL || a3 >> 61 != 0 )\n    return 0LL;\n  if ( v5 > 0xFAF )\n  {\n    v17 = a4;\n    v18 = a3;\n    v19 = a2;\n    v16 = sub_41B0D0();\n    a4 = v17;\n    a3 = v18;\n    v7 = v16;\n    if ( v16 )\n      goto LABEL_5;\n    return 0LL;\n  }\n  v6 = alloca(v5 + 24);\n  v7 = (((unsigned __int64)&v17 + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  if ( (((unsigned __int64)&v17 + 7) & 0xFFFFFFFFFFFFFFF0LL) == -16LL )\n    return 0LL;\nLABEL_5:\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v8 = 0LL;\n  v9 = 2LL;\n  if ( a3 > 2 )\n  {\n    do\n    {\n      v10 = *(_BYTE *)(a2 + v9 - 1);\n      if ( v10 == *(_BYTE *)(a2 + v8) )\n      {\nLABEL_23:\n        *(_QWORD *)(v7 + 8 * v9) = v9 - ++v8;\n      }\n      else\n      {\n        while ( v8 )\n        {\n          v8 -= *(_QWORD *)(v7 + 8 * v8);\n          if ( *(_BYTE *)(a2 + v8) == v10 )\n            goto LABEL_23;\n        }\n        *(_QWORD *)(v7 + 8 * v9) = v9;\n        v8 = 0LL;\n      }\n      ++v9;\n    }\n    while ( a3 != v9 );\n  }\n  *a4 = 0LL;\n  v11 = *v4;\n  v12 = v4;\n  v13 = 0LL;\nLABEL_13:\n  while ( 2 )\n  {\n    if ( (_BYTE)v11 )\n    {\n      while ( *(_BYTE *)(a2 + v13) != (_BYTE)v11 )\n      {\n        if ( !v13 )\n        {\n          v11 = v12[1];\n          ++v4;\n          ++v12;\n          goto LABEL_13;\n        }\n        v14 = *(_QWORD *)(v7 + 8 * v13);\n        v4 += v14;\n        v13 -= v14;\n      }\n      if ( a3 != ++v13 )\n      {\n        v11 = *++v12;\n        continue;\n      }\n      *a4 = v4;\n    }\n    break;\n  }\n  sub_41B140(v7, a2, a3, a4, v11, v12);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x419160L", 
            "funcEndAddr": "0x4192e3L", 
            "funcName": "sub_419160"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4192F0()\n{\n  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n}\n", 
            "funcStartAddr": "0x4192f0L", 
            "funcEndAddr": "0x41930dL", 
            "funcName": "sub_4192F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_419310(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbx\n  __int64 v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  __int64 v13; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  __int64 v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  __int64 v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char *v24; // rax\n  char v25; // al\n  __int64 v26; // rax\n  size_t v27; // rdx\n  unsigned int v28; // eax\n  unsigned int v29; // eax\n  __int64 v30; // rdx\n  void *v32; // rax\n  size_t v33; // rax\n  __int64 v34; // rax\n  char *v35; // rbx\n  __int64 v36; // rax\n  size_t v37; // rax\n  __int64 v38; // rbx\n  __int64 v39; // r14\n  unsigned int v40; // eax\n  __int64 v41; // rax\n  char *v42; // r15\n  __int64 v43; // rax\n  size_t v44; // rax\n  size_t v45; // rax\n  __int64 v46; // rax\n  char *v47; // rbx\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  size_t v51; // rax\n  char **v52; // [rsp+0h] [rbp-110h]\n  mbstate_t *ps; // [rsp+8h] [rbp-108h]\n  unsigned __int64 v54; // [rsp+10h] [rbp-100h]\n  mbstate_t *v55; // [rsp+18h] [rbp-F8h]\n  char v56; // [rsp+20h] [rbp-F0h]\n  __int64 v57; // [rsp+24h] [rbp-ECh]\n  char v58; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v61; // [rsp+40h] [rbp-D0h]\n  unsigned int v62; // [rsp+44h] [rbp-CCh]\n  __int64 v63; // [rsp+48h] [rbp-C8h]\n  char v64; // [rsp+60h] [rbp-B0h]\n  __int64 v65; // [rsp+64h] [rbp-ACh]\n  char v66; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v68; // [rsp+78h] [rbp-98h]\n  char v69; // [rsp+80h] [rbp-90h]\n  unsigned int v70; // [rsp+84h] [rbp-8Ch]\n  char v71; // [rsp+A0h] [rbp-70h]\n  __int64 v72; // [rsp+A4h] [rbp-6Ch]\n  char v73; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v75; // [rsp+B8h] [rbp-58h]\n  char v76; // [rsp+C0h] [rbp-50h]\n  unsigned int v77; // [rsp+C4h] [rbp-4Ch]\n\n  ps = a1;\n  v52 = a3;\n  v54 = sub_41B1D0(a2);\n  if ( ((56 * v54) & 0x8000000000000000LL) != 0LL || (v54 * (unsigned __int128)0x38uLL) >> 64 != 0 )\n    return 0LL;\n  if ( 56 * v54 > 0xFAF )\n  {\n    v5 = sub_41B0D0();\n  }\n  else\n  {\n    v4 = alloca(56 * v54 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v56 = 0;\n  v58 = 0;\n  v57 = 0LL;\n  v7 = v5 + 48 * v54;\n  while ( 1 )\n  {\n    if ( !v56 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( ((unsigned int)dword_41E840[(*(_BYTE *)src >> 5) & 7] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v61 = 1;\n        v62 = v9;\n        v10 = v9;\n        v58 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit((const mbstate_t *)&v57) )\n        goto LABEL_115;\n      v56 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_4085C0((__int64)src, v13);\n    a2 = v14;\n    v16 = sub_40AB50((wchar_t *)&v62, v14, v15, (mbstate_t *)&v57);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v61 = 0;\n      v58 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v33 = strlen((const char *)src);\n    v61 = 0;\n    n = v33;\n    v11 = 0;\n    v58 = 1;\nLABEL_10:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v63 )\n    {\n      v32 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v32;\n      v11 = v61;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v62;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v58 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v62 )\n      goto LABEL_116;\n  }\n  v61 = 1;\n  if ( mbsinit((const mbstate_t *)&v57) )\n    v56 = 0;\n  v10 = v62;\n  v58 = 1;\n  if ( v62 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v54 <= 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v55 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v21 = v5 + 48 * v17;\n        if ( v20 && *(_BYTE *)(v21 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v21 + 20) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v22 = *(_QWORD *)(v18 + 8);\n          if ( v22 == *(_QWORD *)(v21 + 8) )\n          {\n            a2 = *(char **)v21;\n            if ( !memcmp(*(const void **)v18, *(const void **)v21, v22) )\n            {\nLABEL_33:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = (char *)v55 - ++v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = v55;\nLABEL_34:\n      v55 = (mbstate_t *)((char *)v55 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v54 != v55 );\n  }\n  v64 = 0;\n  v23 = 0LL;\n  v66 = 0;\n  *v52 = 0LL;\n  v24 = (char *)ps;\n  ps = (mbstate_t *)&v72;\n  v71 = 0;\n  v65 = 0LL;\n  v72 = 0LL;\n  v73 = 0;\n  v55 = (mbstate_t *)&v65;\n  s = v24;\n  s2 = v24;\n  v25 = 0;\nLABEL_36:\n  if ( v25 )\n  {\n    if ( !v76 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v71 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( ((unsigned int)dword_41E840[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1 )\n        {\n          v75 = 1LL;\n          v29 = *(char *)s2;\n          v76 = 1;\n          v77 = v29;\n          v73 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_115;\n        v71 = 1;\n      }\n      v34 = __ctype_get_mb_cur_max();\n      v35 = (char *)s2;\n      v36 = sub_4085C0((__int64)s2, v34);\n      a2 = v35;\n      v37 = sub_40AB50((wchar_t *)&v77, v35, v36, (mbstate_t *)&v72);\n      v75 = v37;\n      switch ( v37 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          v75 = 1LL;\n          v76 = 0;\n          v73 = 1;\nLABEL_38:\n          v26 = v5 + 48 * v23;\n          goto LABEL_39;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v50 = strlen((const char *)s2);\n          v76 = 0;\n          v75 = v50;\n          v73 = 1;\n          goto LABEL_38;\n        case 0uLL:\n          v75 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_114;\n          if ( v77 )\n            goto LABEL_116;\n          break;\n      }\n      v76 = 1;\n      if ( mbsinit((const mbstate_t *)&v72) )\n        v71 = 0;\n      v73 = 1;\nLABEL_50:\n      v30 = v77;\n      if ( !v77 )\n        goto LABEL_55;\n      v26 = v5 + 48 * v23;\n      if ( *(_BYTE *)(v26 + 16) )\n      {\n        if ( *(_DWORD *)(v26 + 20) != v77 )\n        {\nLABEL_40:\n          if ( !v23 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v27 = *(_QWORD *)(v26 + 8);\n        if ( v27 != v75 )\n          goto LABEL_40;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v26, s2, v27) )\n        {\n          if ( !v23 )\n          {\nLABEL_41:\n            if ( v66 )\n            {\n              if ( v69 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v64 )\n            {\n              if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n              {\n                v68 = 1LL;\n                v28 = *s;\n                v69 = 1;\n                v70 = v28;\n                v66 = 1;\nLABEL_45:\n                if ( !v70 )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v68;\n                s2 = (char *)s2 + v75;\n                v66 = 0;\n                v73 = 0;\n                continue;\n              }\n              if ( mbsinit(v55) )\n              {\n                v64 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v46 = __ctype_get_mb_cur_max();\n            v47 = s;\n            v48 = sub_4085C0((__int64)s, v46);\n            a2 = v47;\n            v49 = sub_40AB50((wchar_t *)&v70, v47, v48, (mbstate_t *)&v65);\n            v68 = v49;\n            if ( v49 == -1LL )\n            {\n              v68 = 1LL;\n              v69 = 0;\n              goto LABEL_46;\n            }\n            if ( v49 == -2LL )\n            {\n              v51 = strlen(s);\n              v69 = 0;\n              v68 = v51;\n              goto LABEL_46;\n            }\n            if ( v49 )\n            {\nLABEL_105:\n              v69 = 1;\n              if ( mbsinit((const mbstate_t *)&v65) )\n                v64 = 0;\n              v66 = 1;\n              goto LABEL_45;\n            }\n            v68 = 1LL;\n            if ( !*s )\n            {\n              if ( !v70 )\n                goto LABEL_105;\nLABEL_116:\n              sub_4192F0();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v38 = *(_QWORD *)(v7 + 8 * v23);\n          v25 = v73;\n          v39 = v23 - v38;\n          if ( !v38 )\n            goto LABEL_36;\n          if ( !v66 )\n            goto LABEL_79;\n          if ( v69 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v66 = 0;\n              s += v68;\n              if ( !--v38 )\n              {\n                v25 = v73;\n                v23 = v39;\n                goto LABEL_36;\n              }\nLABEL_79:\n              if ( !v64 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> v8) & 1 )\n                {\n                  v68 = 1LL;\n                  v40 = *s;\n                  v69 = 1;\n                  v70 = v40;\n                  v66 = 1;\nLABEL_82:\n                  a2 = (char *)v70;\n                  if ( !v70 )\n                    goto LABEL_118;\n                  continue;\n                }\n                if ( !mbsinit(v55) )\n                  goto LABEL_115;\n                v64 = 1;\n              }\n              break;\n            }\n            v41 = __ctype_get_mb_cur_max();\n            v42 = s;\n            v43 = sub_4085C0((__int64)s, v41);\n            a2 = v42;\n            v44 = sub_40AB50((wchar_t *)&v70, v42, v43, (mbstate_t *)&v65);\n            v68 = v44;\n            switch ( v44 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v68 = 1LL;\n                v69 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v45 = strlen(s);\n                v69 = 0;\n                v68 = v45;\n                continue;\n              case 0uLL:\n                v68 = 1LL;\n                if ( *s )\n                  goto LABEL_114;\n                if ( v70 )\n                  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v69 = 1;\n          if ( mbsinit((const mbstate_t *)&v65) )\n            v64 = 0;\n          v66 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v75;\n    v73 = 0;\n    if ( v54 != v23 )\n      continue;\n    break;\n  }\n  *v52 = s;\nLABEL_55:\n  sub_41B140(v5, a2, v30, v8, v10, v3);\n  return 1LL;\n}\n\n__int64 __fastcall sub_419310(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbx\n  __int64 v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  __int64 v13; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  __int64 v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  __int64 v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char *v24; // rax\n  char v25; // al\n  __int64 v26; // rax\n  size_t v27; // rdx\n  unsigned int v28; // eax\n  unsigned int v29; // eax\n  __int64 v30; // rdx\n  void *v32; // rax\n  size_t v33; // rax\n  __int64 v34; // rax\n  char *v35; // rbx\n  __int64 v36; // rax\n  size_t v37; // rax\n  __int64 v38; // rbx\n  __int64 v39; // r14\n  unsigned int v40; // eax\n  __int64 v41; // rax\n  char *v42; // r15\n  __int64 v43; // rax\n  size_t v44; // rax\n  size_t v45; // rax\n  __int64 v46; // rax\n  char *v47; // rbx\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  size_t v51; // rax\n  char **v52; // [rsp+0h] [rbp-110h]\n  mbstate_t *ps; // [rsp+8h] [rbp-108h]\n  unsigned __int64 v54; // [rsp+10h] [rbp-100h]\n  mbstate_t *v55; // [rsp+18h] [rbp-F8h]\n  char v56; // [rsp+20h] [rbp-F0h]\n  __int64 v57; // [rsp+24h] [rbp-ECh]\n  char v58; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v61; // [rsp+40h] [rbp-D0h]\n  unsigned int v62; // [rsp+44h] [rbp-CCh]\n  __int64 v63; // [rsp+48h] [rbp-C8h]\n  char v64; // [rsp+60h] [rbp-B0h]\n  __int64 v65; // [rsp+64h] [rbp-ACh]\n  char v66; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v68; // [rsp+78h] [rbp-98h]\n  char v69; // [rsp+80h] [rbp-90h]\n  unsigned int v70; // [rsp+84h] [rbp-8Ch]\n  char v71; // [rsp+A0h] [rbp-70h]\n  __int64 v72; // [rsp+A4h] [rbp-6Ch]\n  char v73; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v75; // [rsp+B8h] [rbp-58h]\n  char v76; // [rsp+C0h] [rbp-50h]\n  unsigned int v77; // [rsp+C4h] [rbp-4Ch]\n\n  ps = a1;\n  v52 = a3;\n  v54 = sub_41B1D0(a2);\n  if ( ((56 * v54) & 0x8000000000000000LL) != 0LL || (v54 * (unsigned __int128)0x38uLL) >> 64 != 0 )\n    return 0LL;\n  if ( 56 * v54 > 0xFAF )\n  {\n    v5 = sub_41B0D0();\n  }\n  else\n  {\n    v4 = alloca(56 * v54 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v56 = 0;\n  v58 = 0;\n  v57 = 0LL;\n  v7 = v5 + 48 * v54;\n  while ( 1 )\n  {\n    if ( !v56 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( ((unsigned int)dword_41E840[(*(_BYTE *)src >> 5) & 7] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v61 = 1;\n        v62 = v9;\n        v10 = v9;\n        v58 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit((const mbstate_t *)&v57) )\n        goto LABEL_115;\n      v56 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_4085C0((__int64)src, v13);\n    a2 = v14;\n    v16 = sub_40AB50((wchar_t *)&v62, v14, v15, (mbstate_t *)&v57);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v61 = 0;\n      v58 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v33 = strlen((const char *)src);\n    v61 = 0;\n    n = v33;\n    v11 = 0;\n    v58 = 1;\nLABEL_10:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v63 )\n    {\n      v32 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v32;\n      v11 = v61;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v62;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v58 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v62 )\n      goto LABEL_116;\n  }\n  v61 = 1;\n  if ( mbsinit((const mbstate_t *)&v57) )\n    v56 = 0;\n  v10 = v62;\n  v58 = 1;\n  if ( v62 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v54 <= 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v55 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v21 = v5 + 48 * v17;\n        if ( v20 && *(_BYTE *)(v21 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v21 + 20) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v22 = *(_QWORD *)(v18 + 8);\n          if ( v22 == *(_QWORD *)(v21 + 8) )\n          {\n            a2 = *(char **)v21;\n            if ( !memcmp(*(const void **)v18, *(const void **)v21, v22) )\n            {\nLABEL_33:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = (char *)v55 - ++v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = v55;\nLABEL_34:\n      v55 = (mbstate_t *)((char *)v55 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v54 != v55 );\n  }\n  v64 = 0;\n  v23 = 0LL;\n  v66 = 0;\n  *v52 = 0LL;\n  v24 = (char *)ps;\n  ps = (mbstate_t *)&v72;\n  v71 = 0;\n  v65 = 0LL;\n  v72 = 0LL;\n  v73 = 0;\n  v55 = (mbstate_t *)&v65;\n  s = v24;\n  s2 = v24;\n  v25 = 0;\nLABEL_36:\n  if ( v25 )\n  {\n    if ( !v76 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v71 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( ((unsigned int)dword_41E840[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1 )\n        {\n          v75 = 1LL;\n          v29 = *(char *)s2;\n          v76 = 1;\n          v77 = v29;\n          v73 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_115;\n        v71 = 1;\n      }\n      v34 = __ctype_get_mb_cur_max();\n      v35 = (char *)s2;\n      v36 = sub_4085C0((__int64)s2, v34);\n      a2 = v35;\n      v37 = sub_40AB50((wchar_t *)&v77, v35, v36, (mbstate_t *)&v72);\n      v75 = v37;\n      switch ( v37 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          v75 = 1LL;\n          v76 = 0;\n          v73 = 1;\nLABEL_38:\n          v26 = v5 + 48 * v23;\n          goto LABEL_39;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v50 = strlen((const char *)s2);\n          v76 = 0;\n          v75 = v50;\n          v73 = 1;\n          goto LABEL_38;\n        case 0uLL:\n          v75 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_114;\n          if ( v77 )\n            goto LABEL_116;\n          break;\n      }\n      v76 = 1;\n      if ( mbsinit((const mbstate_t *)&v72) )\n        v71 = 0;\n      v73 = 1;\nLABEL_50:\n      v30 = v77;\n      if ( !v77 )\n        goto LABEL_55;\n      v26 = v5 + 48 * v23;\n      if ( *(_BYTE *)(v26 + 16) )\n      {\n        if ( *(_DWORD *)(v26 + 20) != v77 )\n        {\nLABEL_40:\n          if ( !v23 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v27 = *(_QWORD *)(v26 + 8);\n        if ( v27 != v75 )\n          goto LABEL_40;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v26, s2, v27) )\n        {\n          if ( !v23 )\n          {\nLABEL_41:\n            if ( v66 )\n            {\n              if ( v69 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v64 )\n            {\n              if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n              {\n                v68 = 1LL;\n                v28 = *s;\n                v69 = 1;\n                v70 = v28;\n                v66 = 1;\nLABEL_45:\n                if ( !v70 )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v68;\n                s2 = (char *)s2 + v75;\n                v66 = 0;\n                v73 = 0;\n                continue;\n              }\n              if ( mbsinit(v55) )\n              {\n                v64 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v46 = __ctype_get_mb_cur_max();\n            v47 = s;\n            v48 = sub_4085C0((__int64)s, v46);\n            a2 = v47;\n            v49 = sub_40AB50((wchar_t *)&v70, v47, v48, (mbstate_t *)&v65);\n            v68 = v49;\n            if ( v49 == -1LL )\n            {\n              v68 = 1LL;\n              v69 = 0;\n              goto LABEL_46;\n            }\n            if ( v49 == -2LL )\n            {\n              v51 = strlen(s);\n              v69 = 0;\n              v68 = v51;\n              goto LABEL_46;\n            }\n            if ( v49 )\n            {\nLABEL_105:\n              v69 = 1;\n              if ( mbsinit((const mbstate_t *)&v65) )\n                v64 = 0;\n              v66 = 1;\n              goto LABEL_45;\n            }\n            v68 = 1LL;\n            if ( !*s )\n            {\n              if ( !v70 )\n                goto LABEL_105;\nLABEL_116:\n              sub_4192F0();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v38 = *(_QWORD *)(v7 + 8 * v23);\n          v25 = v73;\n          v39 = v23 - v38;\n          if ( !v38 )\n            goto LABEL_36;\n          if ( !v66 )\n            goto LABEL_79;\n          if ( v69 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v66 = 0;\n              s += v68;\n              if ( !--v38 )\n              {\n                v25 = v73;\n                v23 = v39;\n                goto LABEL_36;\n              }\nLABEL_79:\n              if ( !v64 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> v8) & 1 )\n                {\n                  v68 = 1LL;\n                  v40 = *s;\n                  v69 = 1;\n                  v70 = v40;\n                  v66 = 1;\nLABEL_82:\n                  a2 = (char *)v70;\n                  if ( !v70 )\n                    goto LABEL_118;\n                  continue;\n                }\n                if ( !mbsinit(v55) )\n                  goto LABEL_115;\n                v64 = 1;\n              }\n              break;\n            }\n            v41 = __ctype_get_mb_cur_max();\n            v42 = s;\n            v43 = sub_4085C0((__int64)s, v41);\n            a2 = v42;\n            v44 = sub_40AB50((wchar_t *)&v70, v42, v43, (mbstate_t *)&v65);\n            v68 = v44;\n            switch ( v44 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v68 = 1LL;\n                v69 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v45 = strlen(s);\n                v69 = 0;\n                v68 = v45;\n                continue;\n              case 0uLL:\n                v68 = 1LL;\n                if ( *s )\n                  goto LABEL_114;\n                if ( v70 )\n                  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v69 = 1;\n          if ( mbsinit((const mbstate_t *)&v65) )\n            v64 = 0;\n          v66 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v75;\n    v73 = 0;\n    if ( v54 != v23 )\n      continue;\n    break;\n  }\n  *v52 = s;\nLABEL_55:\n  sub_41B140(v5, a2, v30, v8, v10, v3);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x401ffdL", 
            "funcEndAddr": "0x402002L", 
            "funcName": "sub_419310"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_419310(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbx\n  __int64 v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  __int64 v13; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  __int64 v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  __int64 v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char *v24; // rax\n  char v25; // al\n  __int64 v26; // rax\n  size_t v27; // rdx\n  unsigned int v28; // eax\n  unsigned int v29; // eax\n  __int64 v30; // rdx\n  void *v32; // rax\n  size_t v33; // rax\n  __int64 v34; // rax\n  char *v35; // rbx\n  __int64 v36; // rax\n  size_t v37; // rax\n  __int64 v38; // rbx\n  __int64 v39; // r14\n  unsigned int v40; // eax\n  __int64 v41; // rax\n  char *v42; // r15\n  __int64 v43; // rax\n  size_t v44; // rax\n  size_t v45; // rax\n  __int64 v46; // rax\n  char *v47; // rbx\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  size_t v51; // rax\n  char **v52; // [rsp+0h] [rbp-110h]\n  mbstate_t *ps; // [rsp+8h] [rbp-108h]\n  unsigned __int64 v54; // [rsp+10h] [rbp-100h]\n  mbstate_t *v55; // [rsp+18h] [rbp-F8h]\n  char v56; // [rsp+20h] [rbp-F0h]\n  __int64 v57; // [rsp+24h] [rbp-ECh]\n  char v58; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v61; // [rsp+40h] [rbp-D0h]\n  unsigned int v62; // [rsp+44h] [rbp-CCh]\n  __int64 v63; // [rsp+48h] [rbp-C8h]\n  char v64; // [rsp+60h] [rbp-B0h]\n  __int64 v65; // [rsp+64h] [rbp-ACh]\n  char v66; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v68; // [rsp+78h] [rbp-98h]\n  char v69; // [rsp+80h] [rbp-90h]\n  unsigned int v70; // [rsp+84h] [rbp-8Ch]\n  char v71; // [rsp+A0h] [rbp-70h]\n  __int64 v72; // [rsp+A4h] [rbp-6Ch]\n  char v73; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v75; // [rsp+B8h] [rbp-58h]\n  char v76; // [rsp+C0h] [rbp-50h]\n  unsigned int v77; // [rsp+C4h] [rbp-4Ch]\n\n  ps = a1;\n  v52 = a3;\n  v54 = sub_41B1D0(a2);\n  if ( ((56 * v54) & 0x8000000000000000LL) != 0LL || (v54 * (unsigned __int128)0x38uLL) >> 64 != 0 )\n    return 0LL;\n  if ( 56 * v54 > 0xFAF )\n  {\n    v5 = sub_41B0D0();\n  }\n  else\n  {\n    v4 = alloca(56 * v54 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v56 = 0;\n  v58 = 0;\n  v57 = 0LL;\n  v7 = v5 + 48 * v54;\n  while ( 1 )\n  {\n    if ( !v56 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( ((unsigned int)dword_41E840[(*(_BYTE *)src >> 5) & 7] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v61 = 1;\n        v62 = v9;\n        v10 = v9;\n        v58 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit((const mbstate_t *)&v57) )\n        goto LABEL_115;\n      v56 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_4085C0((__int64)src, v13);\n    a2 = v14;\n    v16 = sub_40AB50((wchar_t *)&v62, v14, v15, (mbstate_t *)&v57);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v61 = 0;\n      v58 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v33 = strlen((const char *)src);\n    v61 = 0;\n    n = v33;\n    v11 = 0;\n    v58 = 1;\nLABEL_10:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v63 )\n    {\n      v32 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v32;\n      v11 = v61;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v62;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v58 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v62 )\n      goto LABEL_116;\n  }\n  v61 = 1;\n  if ( mbsinit((const mbstate_t *)&v57) )\n    v56 = 0;\n  v10 = v62;\n  v58 = 1;\n  if ( v62 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v54 <= 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v55 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v21 = v5 + 48 * v17;\n        if ( v20 && *(_BYTE *)(v21 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v21 + 20) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v22 = *(_QWORD *)(v18 + 8);\n          if ( v22 == *(_QWORD *)(v21 + 8) )\n          {\n            a2 = *(char **)v21;\n            if ( !memcmp(*(const void **)v18, *(const void **)v21, v22) )\n            {\nLABEL_33:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = (char *)v55 - ++v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = v55;\nLABEL_34:\n      v55 = (mbstate_t *)((char *)v55 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v54 != v55 );\n  }\n  v64 = 0;\n  v23 = 0LL;\n  v66 = 0;\n  *v52 = 0LL;\n  v24 = (char *)ps;\n  ps = (mbstate_t *)&v72;\n  v71 = 0;\n  v65 = 0LL;\n  v72 = 0LL;\n  v73 = 0;\n  v55 = (mbstate_t *)&v65;\n  s = v24;\n  s2 = v24;\n  v25 = 0;\nLABEL_36:\n  if ( v25 )\n  {\n    if ( !v76 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v71 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( ((unsigned int)dword_41E840[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1 )\n        {\n          v75 = 1LL;\n          v29 = *(char *)s2;\n          v76 = 1;\n          v77 = v29;\n          v73 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_115;\n        v71 = 1;\n      }\n      v34 = __ctype_get_mb_cur_max();\n      v35 = (char *)s2;\n      v36 = sub_4085C0((__int64)s2, v34);\n      a2 = v35;\n      v37 = sub_40AB50((wchar_t *)&v77, v35, v36, (mbstate_t *)&v72);\n      v75 = v37;\n      switch ( v37 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          v75 = 1LL;\n          v76 = 0;\n          v73 = 1;\nLABEL_38:\n          v26 = v5 + 48 * v23;\n          goto LABEL_39;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v50 = strlen((const char *)s2);\n          v76 = 0;\n          v75 = v50;\n          v73 = 1;\n          goto LABEL_38;\n        case 0uLL:\n          v75 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_114;\n          if ( v77 )\n            goto LABEL_116;\n          break;\n      }\n      v76 = 1;\n      if ( mbsinit((const mbstate_t *)&v72) )\n        v71 = 0;\n      v73 = 1;\nLABEL_50:\n      v30 = v77;\n      if ( !v77 )\n        goto LABEL_55;\n      v26 = v5 + 48 * v23;\n      if ( *(_BYTE *)(v26 + 16) )\n      {\n        if ( *(_DWORD *)(v26 + 20) != v77 )\n        {\nLABEL_40:\n          if ( !v23 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v27 = *(_QWORD *)(v26 + 8);\n        if ( v27 != v75 )\n          goto LABEL_40;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v26, s2, v27) )\n        {\n          if ( !v23 )\n          {\nLABEL_41:\n            if ( v66 )\n            {\n              if ( v69 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v64 )\n            {\n              if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n              {\n                v68 = 1LL;\n                v28 = *s;\n                v69 = 1;\n                v70 = v28;\n                v66 = 1;\nLABEL_45:\n                if ( !v70 )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v68;\n                s2 = (char *)s2 + v75;\n                v66 = 0;\n                v73 = 0;\n                continue;\n              }\n              if ( mbsinit(v55) )\n              {\n                v64 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v46 = __ctype_get_mb_cur_max();\n            v47 = s;\n            v48 = sub_4085C0((__int64)s, v46);\n            a2 = v47;\n            v49 = sub_40AB50((wchar_t *)&v70, v47, v48, (mbstate_t *)&v65);\n            v68 = v49;\n            if ( v49 == -1LL )\n            {\n              v68 = 1LL;\n              v69 = 0;\n              goto LABEL_46;\n            }\n            if ( v49 == -2LL )\n            {\n              v51 = strlen(s);\n              v69 = 0;\n              v68 = v51;\n              goto LABEL_46;\n            }\n            if ( v49 )\n            {\nLABEL_105:\n              v69 = 1;\n              if ( mbsinit((const mbstate_t *)&v65) )\n                v64 = 0;\n              v66 = 1;\n              goto LABEL_45;\n            }\n            v68 = 1LL;\n            if ( !*s )\n            {\n              if ( !v70 )\n                goto LABEL_105;\nLABEL_116:\n              sub_4192F0();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v38 = *(_QWORD *)(v7 + 8 * v23);\n          v25 = v73;\n          v39 = v23 - v38;\n          if ( !v38 )\n            goto LABEL_36;\n          if ( !v66 )\n            goto LABEL_79;\n          if ( v69 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v66 = 0;\n              s += v68;\n              if ( !--v38 )\n              {\n                v25 = v73;\n                v23 = v39;\n                goto LABEL_36;\n              }\nLABEL_79:\n              if ( !v64 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> v8) & 1 )\n                {\n                  v68 = 1LL;\n                  v40 = *s;\n                  v69 = 1;\n                  v70 = v40;\n                  v66 = 1;\nLABEL_82:\n                  a2 = (char *)v70;\n                  if ( !v70 )\n                    goto LABEL_118;\n                  continue;\n                }\n                if ( !mbsinit(v55) )\n                  goto LABEL_115;\n                v64 = 1;\n              }\n              break;\n            }\n            v41 = __ctype_get_mb_cur_max();\n            v42 = s;\n            v43 = sub_4085C0((__int64)s, v41);\n            a2 = v42;\n            v44 = sub_40AB50((wchar_t *)&v70, v42, v43, (mbstate_t *)&v65);\n            v68 = v44;\n            switch ( v44 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v68 = 1LL;\n                v69 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v45 = strlen(s);\n                v69 = 0;\n                v68 = v45;\n                continue;\n              case 0uLL:\n                v68 = 1LL;\n                if ( *s )\n                  goto LABEL_114;\n                if ( v70 )\n                  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v69 = 1;\n          if ( mbsinit((const mbstate_t *)&v65) )\n            v64 = 0;\n          v66 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v75;\n    v73 = 0;\n    if ( v54 != v23 )\n      continue;\n    break;\n  }\n  *v52 = s;\nLABEL_55:\n  sub_41B140(v5, a2, v30, v8, v10, v3);\n  return 1LL;\n}\n\n__int64 __fastcall sub_419310(mbstate_t *a1, char *a2, char **a3)\n{\n  __int64 v3; // r9\n  void *v4; // rsp\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbx\n  __int64 v7; // r13\n  __int64 v8; // rcx\n  unsigned int v9; // eax\n  __int64 v10; // r8\n  char v11; // al\n  size_t v12; // rdx\n  __int64 v13; // rax\n  char *v14; // r14\n  __int64 v15; // rax\n  size_t v16; // rax\n  __int64 v17; // r15\n  __int64 v18; // r14\n  bool v19; // cc\n  char v20; // bl\n  __int64 v21; // rax\n  size_t v22; // rdx\n  __int64 v23; // r15\n  char *v24; // rax\n  char v25; // al\n  __int64 v26; // rax\n  size_t v27; // rdx\n  unsigned int v28; // eax\n  unsigned int v29; // eax\n  __int64 v30; // rdx\n  void *v32; // rax\n  size_t v33; // rax\n  __int64 v34; // rax\n  char *v35; // rbx\n  __int64 v36; // rax\n  size_t v37; // rax\n  __int64 v38; // rbx\n  __int64 v39; // r14\n  unsigned int v40; // eax\n  __int64 v41; // rax\n  char *v42; // r15\n  __int64 v43; // rax\n  size_t v44; // rax\n  size_t v45; // rax\n  __int64 v46; // rax\n  char *v47; // rbx\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  size_t v51; // rax\n  char **v52; // [rsp+0h] [rbp-110h]\n  mbstate_t *ps; // [rsp+8h] [rbp-108h]\n  unsigned __int64 v54; // [rsp+10h] [rbp-100h]\n  mbstate_t *v55; // [rsp+18h] [rbp-F8h]\n  char v56; // [rsp+20h] [rbp-F0h]\n  __int64 v57; // [rsp+24h] [rbp-ECh]\n  char v58; // [rsp+2Ch] [rbp-E4h]\n  void *src; // [rsp+30h] [rbp-E0h]\n  size_t n; // [rsp+38h] [rbp-D8h]\n  char v61; // [rsp+40h] [rbp-D0h]\n  unsigned int v62; // [rsp+44h] [rbp-CCh]\n  __int64 v63; // [rsp+48h] [rbp-C8h]\n  char v64; // [rsp+60h] [rbp-B0h]\n  __int64 v65; // [rsp+64h] [rbp-ACh]\n  char v66; // [rsp+6Ch] [rbp-A4h]\n  char *s; // [rsp+70h] [rbp-A0h]\n  size_t v68; // [rsp+78h] [rbp-98h]\n  char v69; // [rsp+80h] [rbp-90h]\n  unsigned int v70; // [rsp+84h] [rbp-8Ch]\n  char v71; // [rsp+A0h] [rbp-70h]\n  __int64 v72; // [rsp+A4h] [rbp-6Ch]\n  char v73; // [rsp+ACh] [rbp-64h]\n  void *s2; // [rsp+B0h] [rbp-60h]\n  size_t v75; // [rsp+B8h] [rbp-58h]\n  char v76; // [rsp+C0h] [rbp-50h]\n  unsigned int v77; // [rsp+C4h] [rbp-4Ch]\n\n  ps = a1;\n  v52 = a3;\n  v54 = sub_41B1D0(a2);\n  if ( ((56 * v54) & 0x8000000000000000LL) != 0LL || (v54 * (unsigned __int128)0x38uLL) >> 64 != 0 )\n    return 0LL;\n  if ( 56 * v54 > 0xFAF )\n  {\n    v5 = sub_41B0D0();\n  }\n  else\n  {\n    v4 = alloca(56 * v54 + 24);\n    v5 = (((unsigned __int64)&ps + 7) & 0xFFFFFFFFFFFFFFF0LL) + 16;\n  }\n  if ( !v5 )\n    return 0LL;\n  src = a2;\n  v6 = v5;\n  v56 = 0;\n  v58 = 0;\n  v57 = 0LL;\n  v7 = v5 + 48 * v54;\n  while ( 1 )\n  {\n    if ( !v56 )\n    {\n      v8 = *(unsigned __int8 *)src;\n      if ( ((unsigned int)dword_41E840[(*(_BYTE *)src >> 5) & 7] >> v8) & 1 )\n      {\n        n = 1LL;\n        v9 = *(char *)src;\n        v61 = 1;\n        v62 = v9;\n        v10 = v9;\n        v58 = 1;\n        if ( !v9 )\n          goto LABEL_24;\n        goto LABEL_9;\n      }\n      if ( !mbsinit((const mbstate_t *)&v57) )\n        goto LABEL_115;\n      v56 = 1;\n    }\n    v13 = __ctype_get_mb_cur_max();\n    v14 = (char *)src;\n    v15 = sub_4085C0((__int64)src, v13);\n    a2 = v14;\n    v16 = sub_40AB50((wchar_t *)&v62, v14, v15, (mbstate_t *)&v57);\n    n = v16;\n    if ( v16 == -1LL )\n    {\n      n = 1LL;\n      v11 = 0;\n      v61 = 0;\n      v58 = 1;\n      goto LABEL_10;\n    }\n    if ( v16 != -2LL )\n      break;\n    v33 = strlen((const char *)src);\n    v61 = 0;\n    n = v33;\n    v11 = 0;\n    v58 = 1;\nLABEL_10:\n    a2 = (char *)src;\n    v12 = n;\n    if ( src == &v63 )\n    {\n      v32 = memcpy((void *)(v6 + 24), src, n);\n      v12 = n;\n      *(_QWORD *)v6 = v32;\n      v11 = v61;\n    }\n    else\n    {\n      *(_QWORD *)v6 = src;\n    }\n    *(_QWORD *)(v6 + 8) = v12;\n    *(_BYTE *)(v6 + 16) = v11;\n    if ( v11 )\n      *(_DWORD *)(v6 + 20) = v62;\n    src = (char *)src + v12;\n    v6 += 48LL;\n    v58 = 0;\n  }\n  if ( !v16 )\n  {\n    n = 1LL;\n    if ( *(_BYTE *)src )\n      goto LABEL_114;\n    if ( v62 )\n      goto LABEL_116;\n  }\n  v61 = 1;\n  if ( mbsinit((const mbstate_t *)&v57) )\n    v56 = 0;\n  v10 = v62;\n  v58 = 1;\n  if ( v62 )\n  {\nLABEL_9:\n    v11 = 1;\n    goto LABEL_10;\n  }\nLABEL_24:\n  v17 = 0LL;\n  v18 = v5 + 48;\n  v19 = v54 <= 2;\n  *(_QWORD *)(v7 + 8) = 1LL;\n  v55 = (mbstate_t *)2;\n  if ( !v19 )\n  {\n    do\n    {\n      v20 = *(_BYTE *)(v18 + 16);\n      while ( 1 )\n      {\n        v21 = v5 + 48 * v17;\n        if ( v20 && *(_BYTE *)(v21 + 16) )\n        {\n          if ( *(_DWORD *)(v18 + 20) == *(_DWORD *)(v21 + 20) )\n            goto LABEL_33;\n        }\n        else\n        {\n          v22 = *(_QWORD *)(v18 + 8);\n          if ( v22 == *(_QWORD *)(v21 + 8) )\n          {\n            a2 = *(char **)v21;\n            if ( !memcmp(*(const void **)v18, *(const void **)v21, v22) )\n            {\nLABEL_33:\n              *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = (char *)v55 - ++v17;\n              goto LABEL_34;\n            }\n          }\n        }\n        if ( !v17 )\n          break;\n        v17 -= *(_QWORD *)(v7 + 8 * v17);\n      }\n      *(_QWORD *)(v7 + 8LL * (_QWORD)v55) = v55;\nLABEL_34:\n      v55 = (mbstate_t *)((char *)v55 + 1);\n      v18 += 48LL;\n    }\n    while ( (mbstate_t *)v54 != v55 );\n  }\n  v64 = 0;\n  v23 = 0LL;\n  v66 = 0;\n  *v52 = 0LL;\n  v24 = (char *)ps;\n  ps = (mbstate_t *)&v72;\n  v71 = 0;\n  v65 = 0LL;\n  v72 = 0LL;\n  v73 = 0;\n  v55 = (mbstate_t *)&v65;\n  s = v24;\n  s2 = v24;\n  v25 = 0;\nLABEL_36:\n  if ( v25 )\n  {\n    if ( !v76 )\n      goto LABEL_38;\n    goto LABEL_50;\n  }\n  while ( 2 )\n  {\n    while ( 2 )\n    {\n      if ( !v71 )\n      {\n        v8 = *(unsigned __int8 *)s2;\n        if ( ((unsigned int)dword_41E840[(*(_BYTE *)s2 >> 5) & 7] >> v8) & 1 )\n        {\n          v75 = 1LL;\n          v29 = *(char *)s2;\n          v76 = 1;\n          v77 = v29;\n          v73 = 1;\n          goto LABEL_50;\n        }\n        if ( !mbsinit(ps) )\n          goto LABEL_115;\n        v71 = 1;\n      }\n      v34 = __ctype_get_mb_cur_max();\n      v35 = (char *)s2;\n      v36 = sub_4085C0((__int64)s2, v34);\n      a2 = v35;\n      v37 = sub_40AB50((wchar_t *)&v77, v35, v36, (mbstate_t *)&v72);\n      v75 = v37;\n      switch ( v37 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          v75 = 1LL;\n          v76 = 0;\n          v73 = 1;\nLABEL_38:\n          v26 = v5 + 48 * v23;\n          goto LABEL_39;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v50 = strlen((const char *)s2);\n          v76 = 0;\n          v75 = v50;\n          v73 = 1;\n          goto LABEL_38;\n        case 0uLL:\n          v75 = 1LL;\n          if ( *(_BYTE *)s2 )\n            goto LABEL_114;\n          if ( v77 )\n            goto LABEL_116;\n          break;\n      }\n      v76 = 1;\n      if ( mbsinit((const mbstate_t *)&v72) )\n        v71 = 0;\n      v73 = 1;\nLABEL_50:\n      v30 = v77;\n      if ( !v77 )\n        goto LABEL_55;\n      v26 = v5 + 48 * v23;\n      if ( *(_BYTE *)(v26 + 16) )\n      {\n        if ( *(_DWORD *)(v26 + 20) != v77 )\n        {\nLABEL_40:\n          if ( !v23 )\n            goto LABEL_41;\n          goto LABEL_75;\n        }\n      }\n      else\n      {\nLABEL_39:\n        v27 = *(_QWORD *)(v26 + 8);\n        if ( v27 != v75 )\n          goto LABEL_40;\n        a2 = (char *)s2;\n        if ( memcmp(*(const void **)v26, s2, v27) )\n        {\n          if ( !v23 )\n          {\nLABEL_41:\n            if ( v66 )\n            {\n              if ( v69 )\n                goto LABEL_45;\n              goto LABEL_46;\n            }\n            if ( !v64 )\n            {\n              if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n              {\n                v68 = 1LL;\n                v28 = *s;\n                v69 = 1;\n                v70 = v28;\n                v66 = 1;\nLABEL_45:\n                if ( !v70 )\nLABEL_118:\n                  abort();\nLABEL_46:\n                s += v68;\n                s2 = (char *)s2 + v75;\n                v66 = 0;\n                v73 = 0;\n                continue;\n              }\n              if ( mbsinit(v55) )\n              {\n                v64 = 1;\n                goto LABEL_100;\n              }\nLABEL_115:\n              __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n            }\nLABEL_100:\n            v46 = __ctype_get_mb_cur_max();\n            v47 = s;\n            v48 = sub_4085C0((__int64)s, v46);\n            a2 = v47;\n            v49 = sub_40AB50((wchar_t *)&v70, v47, v48, (mbstate_t *)&v65);\n            v68 = v49;\n            if ( v49 == -1LL )\n            {\n              v68 = 1LL;\n              v69 = 0;\n              goto LABEL_46;\n            }\n            if ( v49 == -2LL )\n            {\n              v51 = strlen(s);\n              v69 = 0;\n              v68 = v51;\n              goto LABEL_46;\n            }\n            if ( v49 )\n            {\nLABEL_105:\n              v69 = 1;\n              if ( mbsinit((const mbstate_t *)&v65) )\n                v64 = 0;\n              v66 = 1;\n              goto LABEL_45;\n            }\n            v68 = 1LL;\n            if ( !*s )\n            {\n              if ( !v70 )\n                goto LABEL_105;\nLABEL_116:\n              sub_4192F0();\n            }\nLABEL_114:\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          }\nLABEL_75:\n          v38 = *(_QWORD *)(v7 + 8 * v23);\n          v25 = v73;\n          v39 = v23 - v38;\n          if ( !v38 )\n            goto LABEL_36;\n          if ( !v66 )\n            goto LABEL_79;\n          if ( v69 )\n            goto LABEL_82;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v66 = 0;\n              s += v68;\n              if ( !--v38 )\n              {\n                v25 = v73;\n                v23 = v39;\n                goto LABEL_36;\n              }\nLABEL_79:\n              if ( !v64 )\n              {\n                v8 = (unsigned __int8)*s;\n                if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> v8) & 1 )\n                {\n                  v68 = 1LL;\n                  v40 = *s;\n                  v69 = 1;\n                  v70 = v40;\n                  v66 = 1;\nLABEL_82:\n                  a2 = (char *)v70;\n                  if ( !v70 )\n                    goto LABEL_118;\n                  continue;\n                }\n                if ( !mbsinit(v55) )\n                  goto LABEL_115;\n                v64 = 1;\n              }\n              break;\n            }\n            v41 = __ctype_get_mb_cur_max();\n            v42 = s;\n            v43 = sub_4085C0((__int64)s, v41);\n            a2 = v42;\n            v44 = sub_40AB50((wchar_t *)&v70, v42, v43, (mbstate_t *)&v65);\n            v68 = v44;\n            switch ( v44 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v68 = 1LL;\n                v69 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v45 = strlen(s);\n                v69 = 0;\n                v68 = v45;\n                continue;\n              case 0uLL:\n                v68 = 1LL;\n                if ( *s )\n                  goto LABEL_114;\n                if ( v70 )\n                  __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n                break;\n            }\n            break;\n          }\n          v69 = 1;\n          if ( mbsinit((const mbstate_t *)&v65) )\n            v64 = 0;\n          v66 = 1;\n          goto LABEL_82;\n        }\n      }\n      break;\n    }\n    ++v23;\n    s2 = (char *)s2 + v75;\n    v73 = 0;\n    if ( v54 != v23 )\n      continue;\n    break;\n  }\n  *v52 = s;\nLABEL_55:\n  sub_41B140(v5, a2, v30, v8, v10, v3);\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x401ffdL", 
            "funcEndAddr": "0x402002L", 
            "funcName": "sub_419310"
        }, 
        {
            "decompiledFuncCode": "mbstate_t __fastcall sub_419CF0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13\n  char *v3; // rbp\n  char v4; // r15\n  mbstate_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  char *v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  char v16; // bp\n  wchar_t v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  __int64 v20; // rdi\n  char *v21; // rdx\n  char v22; // si\n  char v23; // cl\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rbx\n  char v26; // r14\n  int v27; // eax\n  wchar_t v28; // ecx\n  __m128i v29; // xmm1\n  __m128i v30; // xmm0\n  __m128i v31; // xmm2\n  __m128i v32; // xmm3\n  unsigned int v33; // eax\n  wchar_t v34; // eax\n  __int32 v35; // eax\n  __int32 v36; // eax\n  bool v37; // al\n  __int64 v38; // rax\n  char *v39; // r15\n  __int64 v40; // rax\n  size_t v41; // rax\n  size_t v42; // r15\n  __int64 v43; // rax\n  char *v44; // r15\n  __int64 v45; // rax\n  void *v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  void *v51; // rax\n  unsigned __int64 v52; // r14\n  int v53; // eax\n  char v54; // dl\n  __int64 v55; // rax\n  char *v56; // r15\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  size_t v60; // rax\n  int v61; // eax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  __int64 v65; // rax\n  char *v66; // r14\n  __int64 v67; // rax\n  size_t v68; // rax\n  __int64 v69; // rax\n  char *v70; // r12\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  size_t v75; // rax\n  char *v76; // [rsp+0h] [rbp-188h]\n  char *v77; // [rsp+0h] [rbp-188h]\n  char *v78; // [rsp+0h] [rbp-188h]\n  char *v79; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v80; // [rsp+8h] [rbp-180h]\n  mbstate_t v81; // [rsp+14h] [rbp-174h]\n  char v82; // [rsp+1Ch] [rbp-16Ch]\n  char *v83; // [rsp+20h] [rbp-168h]\n  size_t v84; // [rsp+28h] [rbp-160h]\n  char v85; // [rsp+30h] [rbp-158h]\n  wchar_t v86; // [rsp+34h] [rbp-154h]\n  char v87; // [rsp+50h] [rbp-138h]\n  mbstate_t v88; // [rsp+54h] [rbp-134h]\n  char v89; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v91; // [rsp+68h] [rbp-120h]\n  char v92; // [rsp+70h] [rbp-118h]\n  int v93; // [rsp+74h] [rbp-114h]\n  __int128 v94; // [rsp+90h] [rbp-F8h]\n  size_t n[2]; // [rsp+A0h] [rbp-E8h]\n  __int128 v96; // [rsp+B0h] [rbp-D8h]\n  __int128 v97; // [rsp+C0h] [rbp-C8h]\n  mbstate_t v98[2]; // [rsp+D0h] [rbp-B8h]\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __m128i v100; // [rsp+F0h] [rbp-98h]\n  __m128i v101; // [rsp+100h] [rbp-88h]\n  mbstate_t ps; // [rsp+110h] [rbp-78h]\n  char v103; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v105; // [rsp+128h] [rbp-60h]\n  char v106; // [rsp+130h] [rbp-58h]\n  wchar_t pwc; // [rsp+134h] [rbp-54h]\n\n  v2 = (__int64)a2;\n  v3 = (char *)a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v83 = a2;\n    v82 = 0;\n    v81 = 0LL;\n    if ( ((unsigned int)dword_41E840[(unsigned __int8)v17 >> 5] >> v17) & 1 )\n    {\n      v84 = 1LL;\n      v86 = v17;\n      v85 = 1;\n      v82 = 1;\nLABEL_17:\n      if ( !v86 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v81) )\n      goto LABEL_173;\n    v69 = __ctype_get_mb_cur_max();\n    v70 = v83;\n    v71 = sub_4085C0((__int64)v83, v69);\n    v72 = sub_40AB50(&v86, v70, v71, &v81);\n    v84 = v72;\n    if ( v72 == -1LL )\n    {\n      v84 = 1LL;\n      v85 = 0;\n      v82 = 1;\n    }\n    else\n    {\n      if ( v72 != -2LL )\n      {\n        if ( !v72 )\n        {\n          v84 = 1LL;\n          if ( *v83 )\n            goto LABEL_174;\n          if ( v86 )\n            goto LABEL_162;\n        }\n        v85 = 1;\n        mbsinit(&v81);\n        v82 = 1;\n        goto LABEL_17;\n      }\n      v75 = strlen(v83);\n      v85 = 0;\n      v84 = v75;\n      v82 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v24 = 0LL;\n    v25 = 0LL;\n    v26 = 1;\n    v87 = 0;\n    v88 = 0LL;\n    v89 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v94) = 0;\n    *(_QWORD *)((char *)&v94 + 4) = 0LL;\n    BYTE12(v94) = 0;\n    v80 = 0LL;\n    while ( 1 )\n    {\n      if ( !(_BYTE)v94 )\n      {\n        if ( ((unsigned int)dword_41E840[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v27 = *(char *)n[0];\n          LOBYTE(v96) = 1;\n          DWORD1(v96) = v27;\n          BYTE12(v94) = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)&v94 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v94) = 1;\n      }\n      v47 = __ctype_get_mb_cur_max();\n      v78 = (char *)n[0];\n      v48 = sub_4085C0(n[0], v47);\n      v49 = sub_40AB50((wchar_t *)&v96 + 1, v78, v48, (mbstate_t *)((char *)&v94 + 4));\n      n[1] = v49;\n      switch ( v49 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          n[1] = 1LL;\n          LOBYTE(v96) = 0;\n          BYTE12(v94) = 1;\n          goto LABEL_85;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v60 = strlen((const char *)n[0]);\n          LOBYTE(v96) = 0;\n          n[1] = v60;\n          BYTE12(v94) = 1;\nLABEL_85:\n          if ( !((unsigned __int8)v26 & (v24 > 9)) )\n          {\n            ++v25;\n            goto LABEL_88;\n          }\n          if ( v25 < 5 * v24 )\n          {\n            ++v25;\n            v26 &= v24 > 9;\n            goto LABEL_88;\n          }\nLABEL_106:\n          v52 = v25 - v80;\n          if ( v25 == v80 )\n          {\n            if ( !v89 )\n              goto LABEL_130;\n            if ( !v92 )\n              goto LABEL_134;\nLABEL_133:\n            if ( v93 )\n              goto LABEL_134;\nLABEL_115:\n            v26 = sub_419310(a1, a2, (char **)&ps);\n            if ( v26 )\n              return ps;\n            v54 = v96;\nLABEL_135:\n            v80 = v25++;\n            if ( !v54 )\n              goto LABEL_88;\n            goto LABEL_37;\n          }\n          if ( !v89 )\n            goto LABEL_110;\n          if ( v92 )\n            goto LABEL_113;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v89 = 0;\n              s += v91;\n              if ( !--v52 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v87 )\n              {\n                if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                {\n                  v91 = 1LL;\n                  v53 = *s;\n                  v92 = 1;\n                  v93 = v53;\n                  v89 = 1;\nLABEL_113:\n                  if ( !v93 )\n                  {\n                    if ( v89 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v87 )\n                    {\n                      if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                      {\n                        v91 = 1LL;\n                        v61 = *s;\n                        v92 = 1;\n                        v93 = v61;\n                        v89 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v88) )\n                        goto LABEL_173;\n                      v87 = 1;\n                    }\n                    v65 = __ctype_get_mb_cur_max();\n                    v66 = s;\n                    v67 = sub_4085C0((__int64)s, v65);\n                    v68 = sub_40AB50(&v93, v66, v67, &v88);\n                    v91 = v68;\n                    if ( v68 == -1LL )\n                    {\n                      v91 = 1LL;\n                      v92 = 0;\n                      v89 = 1;\n                    }\n                    else\n                    {\n                      if ( v68 != -2LL )\n                      {\n                        if ( !v68 )\n                        {\n                          v91 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v93 )\n                            goto LABEL_162;\n                        }\n                        v92 = 1;\n                        if ( mbsinit(&v88) )\n                          v87 = 0;\n                        v89 = 1;\n                        goto LABEL_133;\n                      }\n                      v74 = strlen(s);\n                      v92 = 0;\n                      v91 = v74;\n                      v89 = 1;\n                    }\nLABEL_134:\n                    v54 = v96;\n                    v26 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v88) )\n                  goto LABEL_173;\n                v87 = 1;\n              }\n              break;\n            }\n            v55 = __ctype_get_mb_cur_max();\n            v56 = s;\n            v57 = sub_4085C0((__int64)s, v55);\n            v58 = sub_40AB50(&v93, v56, v57, &v88);\n            v91 = v58;\n            switch ( v58 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v91 = 1LL;\n                v92 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v59 = strlen(s);\n                v92 = 0;\n                v91 = v59;\n                continue;\n              case 0uLL:\n                v91 = 1LL;\n                if ( *s )\n                  goto LABEL_174;\n                if ( v93 )\n                  goto LABEL_162;\n                break;\n            }\n            break;\n          }\n          v92 = 1;\n          if ( mbsinit(&v88) )\n            v87 = 0;\n          v89 = 1;\n          goto LABEL_113;\n        case 0uLL:\n          n[1] = 1LL;\n          if ( *(_BYTE *)n[0] )\n            goto LABEL_174;\n          if ( DWORD1(v96) )\n            goto LABEL_162;\n          break;\n      }\n      LOBYTE(v96) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)&v94 + 4)) )\n        LOBYTE(v94) = 0;\n      BYTE12(v94) = 1;\nLABEL_33:\n      if ( !DWORD1(v96) )\n        return 0LL;\n      if ( (unsigned __int8)v26 & (v24 > 9) )\n      {\n        if ( v25 >= 5 * v24 )\n          goto LABEL_106;\n        ++v25;\n        v26 &= v24 > 9;\n      }\n      else\n      {\n        ++v25;\n      }\nLABEL_37:\n      if ( v85 )\n      {\n        if ( DWORD1(v96) == v86 )\n          goto LABEL_39;\nLABEL_66:\n        v42 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v42 = n[1];\n      if ( n[1] == v84 && !memcmp((const void *)n[0], v83, n[1]) )\n      {\nLABEL_39:\n        v28 = *a2;\n        v29 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v30 = _mm_load_si128((const __m128i *)&v94);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v29;\n        v31 = _mm_load_si128((const __m128i *)&v96);\n        s1[0] = (void *)(v29.m128i_i64[1] + v29.m128i_i64[0]);\n        v32 = _mm_load_si128((const __m128i *)&v97);\n        *(__m128i *)&v98[0].__count = v30;\n        v100 = v31;\n        v33 = dword_41E840[(unsigned __int8)v28 >> 5];\n        v101 = v32;\n        v98[1].__wchb[0] = 0;\n        v103 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v33 >> v28) & 1 )\n        {\n          v105 = 1LL;\n          pwc = v28;\n          v106 = 1;\n          v103 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v62 = __ctype_get_mb_cur_max();\n          v79 = (char *)s2;\n          v63 = sub_4085C0((__int64)s2, v62);\n          v64 = sub_40AB50(&pwc, v79, v63, (mbstate_t *)((char *)&ps + 4));\n          v105 = v64;\n          if ( v64 == -1LL )\n          {\n            v105 = 1LL;\n            v106 = 0;\n          }\n          else if ( v64 == -2LL )\n          {\n            v73 = strlen((const char *)s2);\n            v106 = 0;\n            v105 = v73;\n          }\n          else\n          {\n            if ( !v64 )\n            {\n              v105 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc )\n                  goto LABEL_143;\nLABEL_162:\n                sub_4192F0();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v106 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v103 = 1;\nLABEL_41:\n            if ( !pwc )\n              abort();\n          }\n          v103 = 0;\n          ++v25;\n          s2 = (char *)s2 + v105;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v38 = __ctype_get_mb_cur_max();\n              v39 = (char *)s2;\n              v40 = sub_4085C0((__int64)s2, v38);\n              v41 = sub_40AB50(&pwc, v39, v40, (mbstate_t *)((char *)&ps + 4));\n              v105 = v41;\n              if ( v41 == -1LL )\n              {\n                v105 = 1LL;\n                v106 = 0;\n                v103 = 1;\n              }\n              else if ( v41 == -2LL )\n              {\n                v50 = strlen((const char *)s2);\n                v106 = 0;\n                v105 = v50;\n                v103 = 1;\n              }\n              else\n              {\n                if ( !v41 )\n                {\n                  v105 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( pwc )\n                    goto LABEL_162;\n                }\n                v106 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v103 = 1;\n                if ( !pwc )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_41E840[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  goto LABEL_173;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v105 = 1LL;\n              v34 = *(char *)s2;\n              v106 = 1;\n              pwc = v34;\n              v103 = 1;\n              if ( !v34 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v98[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v98[0].__count) )\n              {\n                if ( ((unsigned int)dword_41E840[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v35 = *(char *)s1[0];\n                  v100.m128i_i8[0] = 1;\n                  v100.m128i_i32[1] = v35;\n                  v98[1].__wchb[0] = 1;\nLABEL_49:\n                  v36 = v100.m128i_i32[1];\n                  if ( !v100.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v106 )\n                  {\n                    v37 = pwc != v36;\nLABEL_52:\n                    if ( v37 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v25;\n                    s2 = (char *)s2 + v105;\n                    v98[1].__wchb[0] = 0;\n                    v103 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v105 )\n                    goto LABEL_66;\n                  v37 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v98 + 4)) )\n                  goto LABEL_173;\n                LOBYTE(v98[0].__count) = 1;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = (char *)s1[0];\n              v45 = sub_4085C0((__int64)s1[0], v43);\n              v46 = (void *)sub_40AB50(&v100.m128i_i32[1], v44, v45, (mbstate_t *)((char *)v98 + 4));\n              s1[1] = v46;\n              if ( v46 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                v100.m128i_i8[0] = 0;\n                v98[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v46 != (void *)-2LL )\n                {\n                  if ( !v46 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v100.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v100.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v98 + 4)) )\n                    LOBYTE(v98[0].__count) = 0;\n                  v36 = v100.m128i_i32[1];\n                  v98[1].__wchb[0] = 1;\n                  if ( !v100.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v51 = (void *)strlen((const char *)s1[0]);\n                v100.m128i_i8[0] = 0;\n                s1[1] = v51;\n                v98[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v100.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v42;\n      ++v24;\n      BYTE12(v94) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = *(_BYTE *)(v2 + 1);\n    if ( !v18 )\n      return (mbstate_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    v16 = v11 & (v8 > 9);\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v14 < 5 * v8\n        || v7 && (v76 = (char *)v7, v12 = strnlen(v7, v14 - (_QWORD)v10), v10 = (char *)v14, v7 = &v76[v12], v76[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v77 = v10;\n        v13 = strlen((const char *)v2);\n        v11 = sub_419160(v15, v2, v13, &ps);\n        v10 = v77;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = v2 + v19;\n  v21 = &v3[v19];\n  while ( 1 )\n  {\n    v23 = *(_BYTE *)(v20 + v14);\n    if ( !v23 )\n      return (mbstate_t)v3;\n    v22 = v21[v14];\n    if ( !v22 )\n      return 0LL;\n    ++v14;\n    if ( v23 != v22 )\n      goto LABEL_12;\n  }\n}\n\nmbstate_t __fastcall sub_419CF0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13\n  char *v3; // rbp\n  char v4; // r15\n  mbstate_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  char *v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  char v16; // bp\n  wchar_t v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  __int64 v20; // rdi\n  char *v21; // rdx\n  char v22; // si\n  char v23; // cl\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rbx\n  char v26; // r14\n  int v27; // eax\n  wchar_t v28; // ecx\n  __m128i v29; // xmm1\n  __m128i v30; // xmm0\n  __m128i v31; // xmm2\n  __m128i v32; // xmm3\n  unsigned int v33; // eax\n  wchar_t v34; // eax\n  __int32 v35; // eax\n  __int32 v36; // eax\n  bool v37; // al\n  __int64 v38; // rax\n  char *v39; // r15\n  __int64 v40; // rax\n  size_t v41; // rax\n  size_t v42; // r15\n  __int64 v43; // rax\n  char *v44; // r15\n  __int64 v45; // rax\n  void *v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  void *v51; // rax\n  unsigned __int64 v52; // r14\n  int v53; // eax\n  char v54; // dl\n  __int64 v55; // rax\n  char *v56; // r15\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  size_t v60; // rax\n  int v61; // eax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  __int64 v65; // rax\n  char *v66; // r14\n  __int64 v67; // rax\n  size_t v68; // rax\n  __int64 v69; // rax\n  char *v70; // r12\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  size_t v75; // rax\n  char *v76; // [rsp+0h] [rbp-188h]\n  char *v77; // [rsp+0h] [rbp-188h]\n  char *v78; // [rsp+0h] [rbp-188h]\n  char *v79; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v80; // [rsp+8h] [rbp-180h]\n  mbstate_t v81; // [rsp+14h] [rbp-174h]\n  char v82; // [rsp+1Ch] [rbp-16Ch]\n  char *v83; // [rsp+20h] [rbp-168h]\n  size_t v84; // [rsp+28h] [rbp-160h]\n  char v85; // [rsp+30h] [rbp-158h]\n  wchar_t v86; // [rsp+34h] [rbp-154h]\n  char v87; // [rsp+50h] [rbp-138h]\n  mbstate_t v88; // [rsp+54h] [rbp-134h]\n  char v89; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v91; // [rsp+68h] [rbp-120h]\n  char v92; // [rsp+70h] [rbp-118h]\n  int v93; // [rsp+74h] [rbp-114h]\n  __int128 v94; // [rsp+90h] [rbp-F8h]\n  size_t n[2]; // [rsp+A0h] [rbp-E8h]\n  __int128 v96; // [rsp+B0h] [rbp-D8h]\n  __int128 v97; // [rsp+C0h] [rbp-C8h]\n  mbstate_t v98[2]; // [rsp+D0h] [rbp-B8h]\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __m128i v100; // [rsp+F0h] [rbp-98h]\n  __m128i v101; // [rsp+100h] [rbp-88h]\n  mbstate_t ps; // [rsp+110h] [rbp-78h]\n  char v103; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v105; // [rsp+128h] [rbp-60h]\n  char v106; // [rsp+130h] [rbp-58h]\n  wchar_t pwc; // [rsp+134h] [rbp-54h]\n\n  v2 = (__int64)a2;\n  v3 = (char *)a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v83 = a2;\n    v82 = 0;\n    v81 = 0LL;\n    if ( ((unsigned int)dword_41E840[(unsigned __int8)v17 >> 5] >> v17) & 1 )\n    {\n      v84 = 1LL;\n      v86 = v17;\n      v85 = 1;\n      v82 = 1;\nLABEL_17:\n      if ( !v86 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v81) )\n      goto LABEL_173;\n    v69 = __ctype_get_mb_cur_max();\n    v70 = v83;\n    v71 = sub_4085C0((__int64)v83, v69);\n    v72 = sub_40AB50(&v86, v70, v71, &v81);\n    v84 = v72;\n    if ( v72 == -1LL )\n    {\n      v84 = 1LL;\n      v85 = 0;\n      v82 = 1;\n    }\n    else\n    {\n      if ( v72 != -2LL )\n      {\n        if ( !v72 )\n        {\n          v84 = 1LL;\n          if ( *v83 )\n            goto LABEL_174;\n          if ( v86 )\n            goto LABEL_162;\n        }\n        v85 = 1;\n        mbsinit(&v81);\n        v82 = 1;\n        goto LABEL_17;\n      }\n      v75 = strlen(v83);\n      v85 = 0;\n      v84 = v75;\n      v82 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v24 = 0LL;\n    v25 = 0LL;\n    v26 = 1;\n    v87 = 0;\n    v88 = 0LL;\n    v89 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v94) = 0;\n    *(_QWORD *)((char *)&v94 + 4) = 0LL;\n    BYTE12(v94) = 0;\n    v80 = 0LL;\n    while ( 1 )\n    {\n      if ( !(_BYTE)v94 )\n      {\n        if ( ((unsigned int)dword_41E840[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v27 = *(char *)n[0];\n          LOBYTE(v96) = 1;\n          DWORD1(v96) = v27;\n          BYTE12(v94) = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)&v94 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v94) = 1;\n      }\n      v47 = __ctype_get_mb_cur_max();\n      v78 = (char *)n[0];\n      v48 = sub_4085C0(n[0], v47);\n      v49 = sub_40AB50((wchar_t *)&v96 + 1, v78, v48, (mbstate_t *)((char *)&v94 + 4));\n      n[1] = v49;\n      switch ( v49 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          n[1] = 1LL;\n          LOBYTE(v96) = 0;\n          BYTE12(v94) = 1;\n          goto LABEL_85;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v60 = strlen((const char *)n[0]);\n          LOBYTE(v96) = 0;\n          n[1] = v60;\n          BYTE12(v94) = 1;\nLABEL_85:\n          if ( !((unsigned __int8)v26 & (v24 > 9)) )\n          {\n            ++v25;\n            goto LABEL_88;\n          }\n          if ( v25 < 5 * v24 )\n          {\n            ++v25;\n            v26 &= v24 > 9;\n            goto LABEL_88;\n          }\nLABEL_106:\n          v52 = v25 - v80;\n          if ( v25 == v80 )\n          {\n            if ( !v89 )\n              goto LABEL_130;\n            if ( !v92 )\n              goto LABEL_134;\nLABEL_133:\n            if ( v93 )\n              goto LABEL_134;\nLABEL_115:\n            v26 = sub_419310(a1, a2, (char **)&ps);\n            if ( v26 )\n              return ps;\n            v54 = v96;\nLABEL_135:\n            v80 = v25++;\n            if ( !v54 )\n              goto LABEL_88;\n            goto LABEL_37;\n          }\n          if ( !v89 )\n            goto LABEL_110;\n          if ( v92 )\n            goto LABEL_113;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v89 = 0;\n              s += v91;\n              if ( !--v52 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v87 )\n              {\n                if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                {\n                  v91 = 1LL;\n                  v53 = *s;\n                  v92 = 1;\n                  v93 = v53;\n                  v89 = 1;\nLABEL_113:\n                  if ( !v93 )\n                  {\n                    if ( v89 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v87 )\n                    {\n                      if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                      {\n                        v91 = 1LL;\n                        v61 = *s;\n                        v92 = 1;\n                        v93 = v61;\n                        v89 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v88) )\n                        goto LABEL_173;\n                      v87 = 1;\n                    }\n                    v65 = __ctype_get_mb_cur_max();\n                    v66 = s;\n                    v67 = sub_4085C0((__int64)s, v65);\n                    v68 = sub_40AB50(&v93, v66, v67, &v88);\n                    v91 = v68;\n                    if ( v68 == -1LL )\n                    {\n                      v91 = 1LL;\n                      v92 = 0;\n                      v89 = 1;\n                    }\n                    else\n                    {\n                      if ( v68 != -2LL )\n                      {\n                        if ( !v68 )\n                        {\n                          v91 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v93 )\n                            goto LABEL_162;\n                        }\n                        v92 = 1;\n                        if ( mbsinit(&v88) )\n                          v87 = 0;\n                        v89 = 1;\n                        goto LABEL_133;\n                      }\n                      v74 = strlen(s);\n                      v92 = 0;\n                      v91 = v74;\n                      v89 = 1;\n                    }\nLABEL_134:\n                    v54 = v96;\n                    v26 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v88) )\n                  goto LABEL_173;\n                v87 = 1;\n              }\n              break;\n            }\n            v55 = __ctype_get_mb_cur_max();\n            v56 = s;\n            v57 = sub_4085C0((__int64)s, v55);\n            v58 = sub_40AB50(&v93, v56, v57, &v88);\n            v91 = v58;\n            switch ( v58 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v91 = 1LL;\n                v92 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v59 = strlen(s);\n                v92 = 0;\n                v91 = v59;\n                continue;\n              case 0uLL:\n                v91 = 1LL;\n                if ( *s )\n                  goto LABEL_174;\n                if ( v93 )\n                  goto LABEL_162;\n                break;\n            }\n            break;\n          }\n          v92 = 1;\n          if ( mbsinit(&v88) )\n            v87 = 0;\n          v89 = 1;\n          goto LABEL_113;\n        case 0uLL:\n          n[1] = 1LL;\n          if ( *(_BYTE *)n[0] )\n            goto LABEL_174;\n          if ( DWORD1(v96) )\n            goto LABEL_162;\n          break;\n      }\n      LOBYTE(v96) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)&v94 + 4)) )\n        LOBYTE(v94) = 0;\n      BYTE12(v94) = 1;\nLABEL_33:\n      if ( !DWORD1(v96) )\n        return 0LL;\n      if ( (unsigned __int8)v26 & (v24 > 9) )\n      {\n        if ( v25 >= 5 * v24 )\n          goto LABEL_106;\n        ++v25;\n        v26 &= v24 > 9;\n      }\n      else\n      {\n        ++v25;\n      }\nLABEL_37:\n      if ( v85 )\n      {\n        if ( DWORD1(v96) == v86 )\n          goto LABEL_39;\nLABEL_66:\n        v42 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v42 = n[1];\n      if ( n[1] == v84 && !memcmp((const void *)n[0], v83, n[1]) )\n      {\nLABEL_39:\n        v28 = *a2;\n        v29 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v30 = _mm_load_si128((const __m128i *)&v94);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v29;\n        v31 = _mm_load_si128((const __m128i *)&v96);\n        s1[0] = (void *)(v29.m128i_i64[1] + v29.m128i_i64[0]);\n        v32 = _mm_load_si128((const __m128i *)&v97);\n        *(__m128i *)&v98[0].__count = v30;\n        v100 = v31;\n        v33 = dword_41E840[(unsigned __int8)v28 >> 5];\n        v101 = v32;\n        v98[1].__wchb[0] = 0;\n        v103 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v33 >> v28) & 1 )\n        {\n          v105 = 1LL;\n          pwc = v28;\n          v106 = 1;\n          v103 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v62 = __ctype_get_mb_cur_max();\n          v79 = (char *)s2;\n          v63 = sub_4085C0((__int64)s2, v62);\n          v64 = sub_40AB50(&pwc, v79, v63, (mbstate_t *)((char *)&ps + 4));\n          v105 = v64;\n          if ( v64 == -1LL )\n          {\n            v105 = 1LL;\n            v106 = 0;\n          }\n          else if ( v64 == -2LL )\n          {\n            v73 = strlen((const char *)s2);\n            v106 = 0;\n            v105 = v73;\n          }\n          else\n          {\n            if ( !v64 )\n            {\n              v105 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc )\n                  goto LABEL_143;\nLABEL_162:\n                sub_4192F0();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v106 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v103 = 1;\nLABEL_41:\n            if ( !pwc )\n              abort();\n          }\n          v103 = 0;\n          ++v25;\n          s2 = (char *)s2 + v105;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v38 = __ctype_get_mb_cur_max();\n              v39 = (char *)s2;\n              v40 = sub_4085C0((__int64)s2, v38);\n              v41 = sub_40AB50(&pwc, v39, v40, (mbstate_t *)((char *)&ps + 4));\n              v105 = v41;\n              if ( v41 == -1LL )\n              {\n                v105 = 1LL;\n                v106 = 0;\n                v103 = 1;\n              }\n              else if ( v41 == -2LL )\n              {\n                v50 = strlen((const char *)s2);\n                v106 = 0;\n                v105 = v50;\n                v103 = 1;\n              }\n              else\n              {\n                if ( !v41 )\n                {\n                  v105 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( pwc )\n                    goto LABEL_162;\n                }\n                v106 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v103 = 1;\n                if ( !pwc )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_41E840[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  goto LABEL_173;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v105 = 1LL;\n              v34 = *(char *)s2;\n              v106 = 1;\n              pwc = v34;\n              v103 = 1;\n              if ( !v34 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v98[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v98[0].__count) )\n              {\n                if ( ((unsigned int)dword_41E840[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v35 = *(char *)s1[0];\n                  v100.m128i_i8[0] = 1;\n                  v100.m128i_i32[1] = v35;\n                  v98[1].__wchb[0] = 1;\nLABEL_49:\n                  v36 = v100.m128i_i32[1];\n                  if ( !v100.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v106 )\n                  {\n                    v37 = pwc != v36;\nLABEL_52:\n                    if ( v37 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v25;\n                    s2 = (char *)s2 + v105;\n                    v98[1].__wchb[0] = 0;\n                    v103 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v105 )\n                    goto LABEL_66;\n                  v37 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v98 + 4)) )\n                  goto LABEL_173;\n                LOBYTE(v98[0].__count) = 1;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = (char *)s1[0];\n              v45 = sub_4085C0((__int64)s1[0], v43);\n              v46 = (void *)sub_40AB50(&v100.m128i_i32[1], v44, v45, (mbstate_t *)((char *)v98 + 4));\n              s1[1] = v46;\n              if ( v46 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                v100.m128i_i8[0] = 0;\n                v98[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v46 != (void *)-2LL )\n                {\n                  if ( !v46 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v100.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v100.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v98 + 4)) )\n                    LOBYTE(v98[0].__count) = 0;\n                  v36 = v100.m128i_i32[1];\n                  v98[1].__wchb[0] = 1;\n                  if ( !v100.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v51 = (void *)strlen((const char *)s1[0]);\n                v100.m128i_i8[0] = 0;\n                s1[1] = v51;\n                v98[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v100.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v42;\n      ++v24;\n      BYTE12(v94) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = *(_BYTE *)(v2 + 1);\n    if ( !v18 )\n      return (mbstate_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    v16 = v11 & (v8 > 9);\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v14 < 5 * v8\n        || v7 && (v76 = (char *)v7, v12 = strnlen(v7, v14 - (_QWORD)v10), v10 = (char *)v14, v7 = &v76[v12], v76[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v77 = v10;\n        v13 = strlen((const char *)v2);\n        v11 = sub_419160(v15, v2, v13, &ps);\n        v10 = v77;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = v2 + v19;\n  v21 = &v3[v19];\n  while ( 1 )\n  {\n    v23 = *(_BYTE *)(v20 + v14);\n    if ( !v23 )\n      return (mbstate_t)v3;\n    v22 = v21[v14];\n    if ( !v22 )\n      return 0LL;\n    ++v14;\n    if ( v23 != v22 )\n      goto LABEL_12;\n  }\n}\n", 
            "funcStartAddr": "0x402002L", 
            "funcEndAddr": "0x402007L", 
            "funcName": "sub_419CF0"
        }, 
        {
            "decompiledFuncCode": "mbstate_t __fastcall sub_419CF0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13\n  char *v3; // rbp\n  char v4; // r15\n  mbstate_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  char *v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  char v16; // bp\n  wchar_t v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  __int64 v20; // rdi\n  char *v21; // rdx\n  char v22; // si\n  char v23; // cl\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rbx\n  char v26; // r14\n  int v27; // eax\n  wchar_t v28; // ecx\n  __m128i v29; // xmm1\n  __m128i v30; // xmm0\n  __m128i v31; // xmm2\n  __m128i v32; // xmm3\n  unsigned int v33; // eax\n  wchar_t v34; // eax\n  __int32 v35; // eax\n  __int32 v36; // eax\n  bool v37; // al\n  __int64 v38; // rax\n  char *v39; // r15\n  __int64 v40; // rax\n  size_t v41; // rax\n  size_t v42; // r15\n  __int64 v43; // rax\n  char *v44; // r15\n  __int64 v45; // rax\n  void *v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  void *v51; // rax\n  unsigned __int64 v52; // r14\n  int v53; // eax\n  char v54; // dl\n  __int64 v55; // rax\n  char *v56; // r15\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  size_t v60; // rax\n  int v61; // eax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  __int64 v65; // rax\n  char *v66; // r14\n  __int64 v67; // rax\n  size_t v68; // rax\n  __int64 v69; // rax\n  char *v70; // r12\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  size_t v75; // rax\n  char *v76; // [rsp+0h] [rbp-188h]\n  char *v77; // [rsp+0h] [rbp-188h]\n  char *v78; // [rsp+0h] [rbp-188h]\n  char *v79; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v80; // [rsp+8h] [rbp-180h]\n  mbstate_t v81; // [rsp+14h] [rbp-174h]\n  char v82; // [rsp+1Ch] [rbp-16Ch]\n  char *v83; // [rsp+20h] [rbp-168h]\n  size_t v84; // [rsp+28h] [rbp-160h]\n  char v85; // [rsp+30h] [rbp-158h]\n  wchar_t v86; // [rsp+34h] [rbp-154h]\n  char v87; // [rsp+50h] [rbp-138h]\n  mbstate_t v88; // [rsp+54h] [rbp-134h]\n  char v89; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v91; // [rsp+68h] [rbp-120h]\n  char v92; // [rsp+70h] [rbp-118h]\n  int v93; // [rsp+74h] [rbp-114h]\n  __int128 v94; // [rsp+90h] [rbp-F8h]\n  size_t n[2]; // [rsp+A0h] [rbp-E8h]\n  __int128 v96; // [rsp+B0h] [rbp-D8h]\n  __int128 v97; // [rsp+C0h] [rbp-C8h]\n  mbstate_t v98[2]; // [rsp+D0h] [rbp-B8h]\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __m128i v100; // [rsp+F0h] [rbp-98h]\n  __m128i v101; // [rsp+100h] [rbp-88h]\n  mbstate_t ps; // [rsp+110h] [rbp-78h]\n  char v103; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v105; // [rsp+128h] [rbp-60h]\n  char v106; // [rsp+130h] [rbp-58h]\n  wchar_t pwc; // [rsp+134h] [rbp-54h]\n\n  v2 = (__int64)a2;\n  v3 = (char *)a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v83 = a2;\n    v82 = 0;\n    v81 = 0LL;\n    if ( ((unsigned int)dword_41E840[(unsigned __int8)v17 >> 5] >> v17) & 1 )\n    {\n      v84 = 1LL;\n      v86 = v17;\n      v85 = 1;\n      v82 = 1;\nLABEL_17:\n      if ( !v86 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v81) )\n      goto LABEL_173;\n    v69 = __ctype_get_mb_cur_max();\n    v70 = v83;\n    v71 = sub_4085C0((__int64)v83, v69);\n    v72 = sub_40AB50(&v86, v70, v71, &v81);\n    v84 = v72;\n    if ( v72 == -1LL )\n    {\n      v84 = 1LL;\n      v85 = 0;\n      v82 = 1;\n    }\n    else\n    {\n      if ( v72 != -2LL )\n      {\n        if ( !v72 )\n        {\n          v84 = 1LL;\n          if ( *v83 )\n            goto LABEL_174;\n          if ( v86 )\n            goto LABEL_162;\n        }\n        v85 = 1;\n        mbsinit(&v81);\n        v82 = 1;\n        goto LABEL_17;\n      }\n      v75 = strlen(v83);\n      v85 = 0;\n      v84 = v75;\n      v82 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v24 = 0LL;\n    v25 = 0LL;\n    v26 = 1;\n    v87 = 0;\n    v88 = 0LL;\n    v89 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v94) = 0;\n    *(_QWORD *)((char *)&v94 + 4) = 0LL;\n    BYTE12(v94) = 0;\n    v80 = 0LL;\n    while ( 1 )\n    {\n      if ( !(_BYTE)v94 )\n      {\n        if ( ((unsigned int)dword_41E840[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v27 = *(char *)n[0];\n          LOBYTE(v96) = 1;\n          DWORD1(v96) = v27;\n          BYTE12(v94) = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)&v94 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v94) = 1;\n      }\n      v47 = __ctype_get_mb_cur_max();\n      v78 = (char *)n[0];\n      v48 = sub_4085C0(n[0], v47);\n      v49 = sub_40AB50((wchar_t *)&v96 + 1, v78, v48, (mbstate_t *)((char *)&v94 + 4));\n      n[1] = v49;\n      switch ( v49 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          n[1] = 1LL;\n          LOBYTE(v96) = 0;\n          BYTE12(v94) = 1;\n          goto LABEL_85;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v60 = strlen((const char *)n[0]);\n          LOBYTE(v96) = 0;\n          n[1] = v60;\n          BYTE12(v94) = 1;\nLABEL_85:\n          if ( !((unsigned __int8)v26 & (v24 > 9)) )\n          {\n            ++v25;\n            goto LABEL_88;\n          }\n          if ( v25 < 5 * v24 )\n          {\n            ++v25;\n            v26 &= v24 > 9;\n            goto LABEL_88;\n          }\nLABEL_106:\n          v52 = v25 - v80;\n          if ( v25 == v80 )\n          {\n            if ( !v89 )\n              goto LABEL_130;\n            if ( !v92 )\n              goto LABEL_134;\nLABEL_133:\n            if ( v93 )\n              goto LABEL_134;\nLABEL_115:\n            v26 = sub_419310(a1, a2, (char **)&ps);\n            if ( v26 )\n              return ps;\n            v54 = v96;\nLABEL_135:\n            v80 = v25++;\n            if ( !v54 )\n              goto LABEL_88;\n            goto LABEL_37;\n          }\n          if ( !v89 )\n            goto LABEL_110;\n          if ( v92 )\n            goto LABEL_113;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v89 = 0;\n              s += v91;\n              if ( !--v52 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v87 )\n              {\n                if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                {\n                  v91 = 1LL;\n                  v53 = *s;\n                  v92 = 1;\n                  v93 = v53;\n                  v89 = 1;\nLABEL_113:\n                  if ( !v93 )\n                  {\n                    if ( v89 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v87 )\n                    {\n                      if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                      {\n                        v91 = 1LL;\n                        v61 = *s;\n                        v92 = 1;\n                        v93 = v61;\n                        v89 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v88) )\n                        goto LABEL_173;\n                      v87 = 1;\n                    }\n                    v65 = __ctype_get_mb_cur_max();\n                    v66 = s;\n                    v67 = sub_4085C0((__int64)s, v65);\n                    v68 = sub_40AB50(&v93, v66, v67, &v88);\n                    v91 = v68;\n                    if ( v68 == -1LL )\n                    {\n                      v91 = 1LL;\n                      v92 = 0;\n                      v89 = 1;\n                    }\n                    else\n                    {\n                      if ( v68 != -2LL )\n                      {\n                        if ( !v68 )\n                        {\n                          v91 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v93 )\n                            goto LABEL_162;\n                        }\n                        v92 = 1;\n                        if ( mbsinit(&v88) )\n                          v87 = 0;\n                        v89 = 1;\n                        goto LABEL_133;\n                      }\n                      v74 = strlen(s);\n                      v92 = 0;\n                      v91 = v74;\n                      v89 = 1;\n                    }\nLABEL_134:\n                    v54 = v96;\n                    v26 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v88) )\n                  goto LABEL_173;\n                v87 = 1;\n              }\n              break;\n            }\n            v55 = __ctype_get_mb_cur_max();\n            v56 = s;\n            v57 = sub_4085C0((__int64)s, v55);\n            v58 = sub_40AB50(&v93, v56, v57, &v88);\n            v91 = v58;\n            switch ( v58 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v91 = 1LL;\n                v92 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v59 = strlen(s);\n                v92 = 0;\n                v91 = v59;\n                continue;\n              case 0uLL:\n                v91 = 1LL;\n                if ( *s )\n                  goto LABEL_174;\n                if ( v93 )\n                  goto LABEL_162;\n                break;\n            }\n            break;\n          }\n          v92 = 1;\n          if ( mbsinit(&v88) )\n            v87 = 0;\n          v89 = 1;\n          goto LABEL_113;\n        case 0uLL:\n          n[1] = 1LL;\n          if ( *(_BYTE *)n[0] )\n            goto LABEL_174;\n          if ( DWORD1(v96) )\n            goto LABEL_162;\n          break;\n      }\n      LOBYTE(v96) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)&v94 + 4)) )\n        LOBYTE(v94) = 0;\n      BYTE12(v94) = 1;\nLABEL_33:\n      if ( !DWORD1(v96) )\n        return 0LL;\n      if ( (unsigned __int8)v26 & (v24 > 9) )\n      {\n        if ( v25 >= 5 * v24 )\n          goto LABEL_106;\n        ++v25;\n        v26 &= v24 > 9;\n      }\n      else\n      {\n        ++v25;\n      }\nLABEL_37:\n      if ( v85 )\n      {\n        if ( DWORD1(v96) == v86 )\n          goto LABEL_39;\nLABEL_66:\n        v42 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v42 = n[1];\n      if ( n[1] == v84 && !memcmp((const void *)n[0], v83, n[1]) )\n      {\nLABEL_39:\n        v28 = *a2;\n        v29 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v30 = _mm_load_si128((const __m128i *)&v94);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v29;\n        v31 = _mm_load_si128((const __m128i *)&v96);\n        s1[0] = (void *)(v29.m128i_i64[1] + v29.m128i_i64[0]);\n        v32 = _mm_load_si128((const __m128i *)&v97);\n        *(__m128i *)&v98[0].__count = v30;\n        v100 = v31;\n        v33 = dword_41E840[(unsigned __int8)v28 >> 5];\n        v101 = v32;\n        v98[1].__wchb[0] = 0;\n        v103 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v33 >> v28) & 1 )\n        {\n          v105 = 1LL;\n          pwc = v28;\n          v106 = 1;\n          v103 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v62 = __ctype_get_mb_cur_max();\n          v79 = (char *)s2;\n          v63 = sub_4085C0((__int64)s2, v62);\n          v64 = sub_40AB50(&pwc, v79, v63, (mbstate_t *)((char *)&ps + 4));\n          v105 = v64;\n          if ( v64 == -1LL )\n          {\n            v105 = 1LL;\n            v106 = 0;\n          }\n          else if ( v64 == -2LL )\n          {\n            v73 = strlen((const char *)s2);\n            v106 = 0;\n            v105 = v73;\n          }\n          else\n          {\n            if ( !v64 )\n            {\n              v105 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc )\n                  goto LABEL_143;\nLABEL_162:\n                sub_4192F0();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v106 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v103 = 1;\nLABEL_41:\n            if ( !pwc )\n              abort();\n          }\n          v103 = 0;\n          ++v25;\n          s2 = (char *)s2 + v105;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v38 = __ctype_get_mb_cur_max();\n              v39 = (char *)s2;\n              v40 = sub_4085C0((__int64)s2, v38);\n              v41 = sub_40AB50(&pwc, v39, v40, (mbstate_t *)((char *)&ps + 4));\n              v105 = v41;\n              if ( v41 == -1LL )\n              {\n                v105 = 1LL;\n                v106 = 0;\n                v103 = 1;\n              }\n              else if ( v41 == -2LL )\n              {\n                v50 = strlen((const char *)s2);\n                v106 = 0;\n                v105 = v50;\n                v103 = 1;\n              }\n              else\n              {\n                if ( !v41 )\n                {\n                  v105 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( pwc )\n                    goto LABEL_162;\n                }\n                v106 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v103 = 1;\n                if ( !pwc )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_41E840[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  goto LABEL_173;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v105 = 1LL;\n              v34 = *(char *)s2;\n              v106 = 1;\n              pwc = v34;\n              v103 = 1;\n              if ( !v34 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v98[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v98[0].__count) )\n              {\n                if ( ((unsigned int)dword_41E840[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v35 = *(char *)s1[0];\n                  v100.m128i_i8[0] = 1;\n                  v100.m128i_i32[1] = v35;\n                  v98[1].__wchb[0] = 1;\nLABEL_49:\n                  v36 = v100.m128i_i32[1];\n                  if ( !v100.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v106 )\n                  {\n                    v37 = pwc != v36;\nLABEL_52:\n                    if ( v37 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v25;\n                    s2 = (char *)s2 + v105;\n                    v98[1].__wchb[0] = 0;\n                    v103 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v105 )\n                    goto LABEL_66;\n                  v37 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v98 + 4)) )\n                  goto LABEL_173;\n                LOBYTE(v98[0].__count) = 1;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = (char *)s1[0];\n              v45 = sub_4085C0((__int64)s1[0], v43);\n              v46 = (void *)sub_40AB50(&v100.m128i_i32[1], v44, v45, (mbstate_t *)((char *)v98 + 4));\n              s1[1] = v46;\n              if ( v46 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                v100.m128i_i8[0] = 0;\n                v98[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v46 != (void *)-2LL )\n                {\n                  if ( !v46 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v100.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v100.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v98 + 4)) )\n                    LOBYTE(v98[0].__count) = 0;\n                  v36 = v100.m128i_i32[1];\n                  v98[1].__wchb[0] = 1;\n                  if ( !v100.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v51 = (void *)strlen((const char *)s1[0]);\n                v100.m128i_i8[0] = 0;\n                s1[1] = v51;\n                v98[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v100.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v42;\n      ++v24;\n      BYTE12(v94) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = *(_BYTE *)(v2 + 1);\n    if ( !v18 )\n      return (mbstate_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    v16 = v11 & (v8 > 9);\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v14 < 5 * v8\n        || v7 && (v76 = (char *)v7, v12 = strnlen(v7, v14 - (_QWORD)v10), v10 = (char *)v14, v7 = &v76[v12], v76[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v77 = v10;\n        v13 = strlen((const char *)v2);\n        v11 = sub_419160(v15, v2, v13, &ps);\n        v10 = v77;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = v2 + v19;\n  v21 = &v3[v19];\n  while ( 1 )\n  {\n    v23 = *(_BYTE *)(v20 + v14);\n    if ( !v23 )\n      return (mbstate_t)v3;\n    v22 = v21[v14];\n    if ( !v22 )\n      return 0LL;\n    ++v14;\n    if ( v23 != v22 )\n      goto LABEL_12;\n  }\n}\n\nmbstate_t __fastcall sub_419CF0(mbstate_t *a1, char *a2)\n{\n  __int64 v2; // r13\n  char *v3; // rbp\n  char v4; // r15\n  mbstate_t result; // rax\n  unsigned __int8 v6; // cl\n  const char *v7; // r9\n  unsigned __int64 v8; // r12\n  unsigned __int64 v9; // rdx\n  char *v10; // r8\n  char v11; // al\n  size_t v12; // rax\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rbx\n  unsigned __int8 *v15; // r14\n  char v16; // bp\n  wchar_t v17; // ecx\n  char v18; // cl\n  __int64 v19; // rdx\n  __int64 v20; // rdi\n  char *v21; // rdx\n  char v22; // si\n  char v23; // cl\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rbx\n  char v26; // r14\n  int v27; // eax\n  wchar_t v28; // ecx\n  __m128i v29; // xmm1\n  __m128i v30; // xmm0\n  __m128i v31; // xmm2\n  __m128i v32; // xmm3\n  unsigned int v33; // eax\n  wchar_t v34; // eax\n  __int32 v35; // eax\n  __int32 v36; // eax\n  bool v37; // al\n  __int64 v38; // rax\n  char *v39; // r15\n  __int64 v40; // rax\n  size_t v41; // rax\n  size_t v42; // r15\n  __int64 v43; // rax\n  char *v44; // r15\n  __int64 v45; // rax\n  void *v46; // rax\n  __int64 v47; // rax\n  __int64 v48; // rax\n  size_t v49; // rax\n  size_t v50; // rax\n  void *v51; // rax\n  unsigned __int64 v52; // r14\n  int v53; // eax\n  char v54; // dl\n  __int64 v55; // rax\n  char *v56; // r15\n  __int64 v57; // rax\n  size_t v58; // rax\n  size_t v59; // rax\n  size_t v60; // rax\n  int v61; // eax\n  __int64 v62; // rax\n  __int64 v63; // rax\n  size_t v64; // rax\n  __int64 v65; // rax\n  char *v66; // r14\n  __int64 v67; // rax\n  size_t v68; // rax\n  __int64 v69; // rax\n  char *v70; // r12\n  __int64 v71; // rax\n  size_t v72; // rax\n  size_t v73; // rax\n  size_t v74; // rax\n  size_t v75; // rax\n  char *v76; // [rsp+0h] [rbp-188h]\n  char *v77; // [rsp+0h] [rbp-188h]\n  char *v78; // [rsp+0h] [rbp-188h]\n  char *v79; // [rsp+0h] [rbp-188h]\n  unsigned __int64 v80; // [rsp+8h] [rbp-180h]\n  mbstate_t v81; // [rsp+14h] [rbp-174h]\n  char v82; // [rsp+1Ch] [rbp-16Ch]\n  char *v83; // [rsp+20h] [rbp-168h]\n  size_t v84; // [rsp+28h] [rbp-160h]\n  char v85; // [rsp+30h] [rbp-158h]\n  wchar_t v86; // [rsp+34h] [rbp-154h]\n  char v87; // [rsp+50h] [rbp-138h]\n  mbstate_t v88; // [rsp+54h] [rbp-134h]\n  char v89; // [rsp+5Ch] [rbp-12Ch]\n  char *s; // [rsp+60h] [rbp-128h]\n  size_t v91; // [rsp+68h] [rbp-120h]\n  char v92; // [rsp+70h] [rbp-118h]\n  int v93; // [rsp+74h] [rbp-114h]\n  __int128 v94; // [rsp+90h] [rbp-F8h]\n  size_t n[2]; // [rsp+A0h] [rbp-E8h]\n  __int128 v96; // [rsp+B0h] [rbp-D8h]\n  __int128 v97; // [rsp+C0h] [rbp-C8h]\n  mbstate_t v98[2]; // [rsp+D0h] [rbp-B8h]\n  void *s1[2]; // [rsp+E0h] [rbp-A8h]\n  __m128i v100; // [rsp+F0h] [rbp-98h]\n  __m128i v101; // [rsp+100h] [rbp-88h]\n  mbstate_t ps; // [rsp+110h] [rbp-78h]\n  char v103; // [rsp+11Ch] [rbp-6Ch]\n  void *s2; // [rsp+120h] [rbp-68h]\n  size_t v105; // [rsp+128h] [rbp-60h]\n  char v106; // [rsp+130h] [rbp-58h]\n  wchar_t pwc; // [rsp+134h] [rbp-54h]\n\n  v2 = (__int64)a2;\n  v3 = (char *)a1;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    v17 = *a2;\n    v83 = a2;\n    v82 = 0;\n    v81 = 0LL;\n    if ( ((unsigned int)dword_41E840[(unsigned __int8)v17 >> 5] >> v17) & 1 )\n    {\n      v84 = 1LL;\n      v86 = v17;\n      v85 = 1;\n      v82 = 1;\nLABEL_17:\n      if ( !v86 )\n        return (mbstate_t)v3;\n      goto LABEL_29;\n    }\n    if ( !mbsinit(&v81) )\n      goto LABEL_173;\n    v69 = __ctype_get_mb_cur_max();\n    v70 = v83;\n    v71 = sub_4085C0((__int64)v83, v69);\n    v72 = sub_40AB50(&v86, v70, v71, &v81);\n    v84 = v72;\n    if ( v72 == -1LL )\n    {\n      v84 = 1LL;\n      v85 = 0;\n      v82 = 1;\n    }\n    else\n    {\n      if ( v72 != -2LL )\n      {\n        if ( !v72 )\n        {\n          v84 = 1LL;\n          if ( *v83 )\n            goto LABEL_174;\n          if ( v86 )\n            goto LABEL_162;\n        }\n        v85 = 1;\n        mbsinit(&v81);\n        v82 = 1;\n        goto LABEL_17;\n      }\n      v75 = strlen(v83);\n      v85 = 0;\n      v84 = v75;\n      v82 = 1;\n    }\nLABEL_29:\n    s = a2;\n    v24 = 0LL;\n    v25 = 0LL;\n    v26 = 1;\n    v87 = 0;\n    v88 = 0LL;\n    v89 = 0;\n    n[0] = (size_t)a1;\n    LOBYTE(v94) = 0;\n    *(_QWORD *)((char *)&v94 + 4) = 0LL;\n    BYTE12(v94) = 0;\n    v80 = 0LL;\n    while ( 1 )\n    {\n      if ( !(_BYTE)v94 )\n      {\n        if ( ((unsigned int)dword_41E840[(*(_BYTE *)n[0] >> 5) & 7] >> *(_BYTE *)n[0]) & 1 )\n        {\n          n[1] = 1LL;\n          v27 = *(char *)n[0];\n          LOBYTE(v96) = 1;\n          DWORD1(v96) = v27;\n          BYTE12(v94) = 1;\n          goto LABEL_33;\n        }\n        if ( !mbsinit((const mbstate_t *)((char *)&v94 + 4)) )\n          goto LABEL_173;\n        LOBYTE(v94) = 1;\n      }\n      v47 = __ctype_get_mb_cur_max();\n      v78 = (char *)n[0];\n      v48 = sub_4085C0(n[0], v47);\n      v49 = sub_40AB50((wchar_t *)&v96 + 1, v78, v48, (mbstate_t *)((char *)&v94 + 4));\n      n[1] = v49;\n      switch ( v49 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          n[1] = 1LL;\n          LOBYTE(v96) = 0;\n          BYTE12(v94) = 1;\n          goto LABEL_85;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v60 = strlen((const char *)n[0]);\n          LOBYTE(v96) = 0;\n          n[1] = v60;\n          BYTE12(v94) = 1;\nLABEL_85:\n          if ( !((unsigned __int8)v26 & (v24 > 9)) )\n          {\n            ++v25;\n            goto LABEL_88;\n          }\n          if ( v25 < 5 * v24 )\n          {\n            ++v25;\n            v26 &= v24 > 9;\n            goto LABEL_88;\n          }\nLABEL_106:\n          v52 = v25 - v80;\n          if ( v25 == v80 )\n          {\n            if ( !v89 )\n              goto LABEL_130;\n            if ( !v92 )\n              goto LABEL_134;\nLABEL_133:\n            if ( v93 )\n              goto LABEL_134;\nLABEL_115:\n            v26 = sub_419310(a1, a2, (char **)&ps);\n            if ( v26 )\n              return ps;\n            v54 = v96;\nLABEL_135:\n            v80 = v25++;\n            if ( !v54 )\n              goto LABEL_88;\n            goto LABEL_37;\n          }\n          if ( !v89 )\n            goto LABEL_110;\n          if ( v92 )\n            goto LABEL_113;\n          while ( 2 )\n          {\n            while ( 2 )\n            {\n              v89 = 0;\n              s += v91;\n              if ( !--v52 )\n                goto LABEL_130;\nLABEL_110:\n              if ( !v87 )\n              {\n                if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                {\n                  v91 = 1LL;\n                  v53 = *s;\n                  v92 = 1;\n                  v93 = v53;\n                  v89 = 1;\nLABEL_113:\n                  if ( !v93 )\n                  {\n                    if ( v89 )\n                      goto LABEL_115;\nLABEL_130:\n                    if ( !v87 )\n                    {\n                      if ( ((unsigned int)dword_41E840[((unsigned __int8)*s >> 5) & 7] >> *s) & 1 )\n                      {\n                        v91 = 1LL;\n                        v61 = *s;\n                        v92 = 1;\n                        v93 = v61;\n                        v89 = 1;\n                        goto LABEL_133;\n                      }\n                      if ( !mbsinit(&v88) )\n                        goto LABEL_173;\n                      v87 = 1;\n                    }\n                    v65 = __ctype_get_mb_cur_max();\n                    v66 = s;\n                    v67 = sub_4085C0((__int64)s, v65);\n                    v68 = sub_40AB50(&v93, v66, v67, &v88);\n                    v91 = v68;\n                    if ( v68 == -1LL )\n                    {\n                      v91 = 1LL;\n                      v92 = 0;\n                      v89 = 1;\n                    }\n                    else\n                    {\n                      if ( v68 != -2LL )\n                      {\n                        if ( !v68 )\n                        {\n                          v91 = 1LL;\n                          if ( *s )\n                            goto LABEL_174;\n                          if ( v93 )\n                            goto LABEL_162;\n                        }\n                        v92 = 1;\n                        if ( mbsinit(&v88) )\n                          v87 = 0;\n                        v89 = 1;\n                        goto LABEL_133;\n                      }\n                      v74 = strlen(s);\n                      v92 = 0;\n                      v91 = v74;\n                      v89 = 1;\n                    }\nLABEL_134:\n                    v54 = v96;\n                    v26 = 1;\n                    goto LABEL_135;\n                  }\n                  continue;\n                }\n                if ( !mbsinit(&v88) )\n                  goto LABEL_173;\n                v87 = 1;\n              }\n              break;\n            }\n            v55 = __ctype_get_mb_cur_max();\n            v56 = s;\n            v57 = sub_4085C0((__int64)s, v55);\n            v58 = sub_40AB50(&v93, v56, v57, &v88);\n            v91 = v58;\n            switch ( v58 )\n            {\n              case 0xFFFFFFFFFFFFFFFFLL:\n                v91 = 1LL;\n                v92 = 0;\n                continue;\n              case 0xFFFFFFFFFFFFFFFELL:\n                v59 = strlen(s);\n                v92 = 0;\n                v91 = v59;\n                continue;\n              case 0uLL:\n                v91 = 1LL;\n                if ( *s )\n                  goto LABEL_174;\n                if ( v93 )\n                  goto LABEL_162;\n                break;\n            }\n            break;\n          }\n          v92 = 1;\n          if ( mbsinit(&v88) )\n            v87 = 0;\n          v89 = 1;\n          goto LABEL_113;\n        case 0uLL:\n          n[1] = 1LL;\n          if ( *(_BYTE *)n[0] )\n            goto LABEL_174;\n          if ( DWORD1(v96) )\n            goto LABEL_162;\n          break;\n      }\n      LOBYTE(v96) = 1;\n      if ( mbsinit((const mbstate_t *)((char *)&v94 + 4)) )\n        LOBYTE(v94) = 0;\n      BYTE12(v94) = 1;\nLABEL_33:\n      if ( !DWORD1(v96) )\n        return 0LL;\n      if ( (unsigned __int8)v26 & (v24 > 9) )\n      {\n        if ( v25 >= 5 * v24 )\n          goto LABEL_106;\n        ++v25;\n        v26 &= v24 > 9;\n      }\n      else\n      {\n        ++v25;\n      }\nLABEL_37:\n      if ( v85 )\n      {\n        if ( DWORD1(v96) == v86 )\n          goto LABEL_39;\nLABEL_66:\n        v42 = n[1];\n        goto LABEL_67;\n      }\nLABEL_88:\n      v42 = n[1];\n      if ( n[1] == v84 && !memcmp((const void *)n[0], v83, n[1]) )\n      {\nLABEL_39:\n        v28 = *a2;\n        v29 = _mm_load_si128((const __m128i *)n);\n        s2 = a2;\n        v30 = _mm_load_si128((const __m128i *)&v94);\n        LOBYTE(ps.__count) = 0;\n        *(__m128i *)s1 = v29;\n        v31 = _mm_load_si128((const __m128i *)&v96);\n        s1[0] = (void *)(v29.m128i_i64[1] + v29.m128i_i64[0]);\n        v32 = _mm_load_si128((const __m128i *)&v97);\n        *(__m128i *)&v98[0].__count = v30;\n        v100 = v31;\n        v33 = dword_41E840[(unsigned __int8)v28 >> 5];\n        v101 = v32;\n        v98[1].__wchb[0] = 0;\n        v103 = 0;\n        *(mbstate_t *)((char *)&ps + 4) = 0LL;\n        if ( (v33 >> v28) & 1 )\n        {\n          v105 = 1LL;\n          pwc = v28;\n          v106 = 1;\n          v103 = 1;\n          goto LABEL_41;\n        }\n        if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n        {\n          LOBYTE(ps.__count) = 1;\n          v62 = __ctype_get_mb_cur_max();\n          v79 = (char *)s2;\n          v63 = sub_4085C0((__int64)s2, v62);\n          v64 = sub_40AB50(&pwc, v79, v63, (mbstate_t *)((char *)&ps + 4));\n          v105 = v64;\n          if ( v64 == -1LL )\n          {\n            v105 = 1LL;\n            v106 = 0;\n          }\n          else if ( v64 == -2LL )\n          {\n            v73 = strlen((const char *)s2);\n            v106 = 0;\n            v105 = v73;\n          }\n          else\n          {\n            if ( !v64 )\n            {\n              v105 = 1LL;\n              if ( !*(_BYTE *)s2 )\n              {\n                if ( !pwc )\n                  goto LABEL_143;\nLABEL_162:\n                sub_4192F0();\n              }\nLABEL_174:\n              __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n            }\nLABEL_143:\n            v106 = 1;\n            if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n              LOBYTE(ps.__count) = 0;\n            v103 = 1;\nLABEL_41:\n            if ( !pwc )\n              abort();\n          }\n          v103 = 0;\n          ++v25;\n          s2 = (char *)s2 + v105;\n          while ( 2 )\n          {\n            if ( LOBYTE(ps.__count) )\n            {\nLABEL_55:\n              v38 = __ctype_get_mb_cur_max();\n              v39 = (char *)s2;\n              v40 = sub_4085C0((__int64)s2, v38);\n              v41 = sub_40AB50(&pwc, v39, v40, (mbstate_t *)((char *)&ps + 4));\n              v105 = v41;\n              if ( v41 == -1LL )\n              {\n                v105 = 1LL;\n                v106 = 0;\n                v103 = 1;\n              }\n              else if ( v41 == -2LL )\n              {\n                v50 = strlen((const char *)s2);\n                v106 = 0;\n                v105 = v50;\n                v103 = 1;\n              }\n              else\n              {\n                if ( !v41 )\n                {\n                  v105 = 1LL;\n                  if ( *(_BYTE *)s2 )\n                    goto LABEL_174;\n                  if ( pwc )\n                    goto LABEL_162;\n                }\n                v106 = 1;\n                if ( mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  LOBYTE(ps.__count) = 0;\n                v103 = 1;\n                if ( !pwc )\n                  return (mbstate_t)n[0];\n              }\n            }\n            else\n            {\n              if ( !(((unsigned int)dword_41E840[(*(_BYTE *)s2 >> 5) & 7] >> *(_BYTE *)s2) & 1) )\n              {\n                if ( !mbsinit((mbstate_t *)((char *)&ps + 4)) )\n                  goto LABEL_173;\n                LOBYTE(ps.__count) = 1;\n                goto LABEL_55;\n              }\n              v105 = 1LL;\n              v34 = *(char *)s2;\n              v106 = 1;\n              pwc = v34;\n              v103 = 1;\n              if ( !v34 )\n                return (mbstate_t)n[0];\n            }\n            if ( !v98[1].__wchb[0] )\n            {\n              if ( !LOBYTE(v98[0].__count) )\n              {\n                if ( ((unsigned int)dword_41E840[(*(_BYTE *)s1[0] >> 5) & 7] >> *(_BYTE *)s1[0]) & 1 )\n                {\n                  s1[1] = (void *)1;\n                  v35 = *(char *)s1[0];\n                  v100.m128i_i8[0] = 1;\n                  v100.m128i_i32[1] = v35;\n                  v98[1].__wchb[0] = 1;\nLABEL_49:\n                  v36 = v100.m128i_i32[1];\n                  if ( !v100.m128i_i32[1] )\n                    return 0LL;\nLABEL_50:\n                  if ( v106 )\n                  {\n                    v37 = pwc != v36;\nLABEL_52:\n                    if ( v37 )\n                      goto LABEL_66;\n                    s1[0] = (char *)s1[0] + (unsigned __int64)s1[1];\n                    ++v25;\n                    s2 = (char *)s2 + v105;\n                    v98[1].__wchb[0] = 0;\n                    v103 = 0;\n                    continue;\n                  }\nLABEL_65:\n                  if ( s1[1] != (void *)v105 )\n                    goto LABEL_66;\n                  v37 = memcmp(s1[0], s2, (size_t)s1[1]) != 0;\n                  goto LABEL_52;\n                }\n                if ( !mbsinit((mbstate_t *)((char *)v98 + 4)) )\n                  goto LABEL_173;\n                LOBYTE(v98[0].__count) = 1;\n              }\n              v43 = __ctype_get_mb_cur_max();\n              v44 = (char *)s1[0];\n              v45 = sub_4085C0((__int64)s1[0], v43);\n              v46 = (void *)sub_40AB50(&v100.m128i_i32[1], v44, v45, (mbstate_t *)((char *)v98 + 4));\n              s1[1] = v46;\n              if ( v46 == (void *)-1LL )\n              {\n                s1[1] = (void *)1;\n                v100.m128i_i8[0] = 0;\n                v98[1].__wchb[0] = 1;\n              }\n              else\n              {\n                if ( v46 != (void *)-2LL )\n                {\n                  if ( !v46 )\n                  {\n                    s1[1] = (void *)1;\n                    if ( *(_BYTE *)s1[0] )\n                      goto LABEL_174;\n                    if ( v100.m128i_i32[1] )\n                      goto LABEL_162;\n                  }\n                  v100.m128i_i8[0] = 1;\n                  if ( mbsinit((mbstate_t *)((char *)v98 + 4)) )\n                    LOBYTE(v98[0].__count) = 0;\n                  v36 = v100.m128i_i32[1];\n                  v98[1].__wchb[0] = 1;\n                  if ( !v100.m128i_i32[1] )\n                    return 0LL;\n                  goto LABEL_50;\n                }\n                v51 = (void *)strlen((const char *)s1[0]);\n                v100.m128i_i8[0] = 0;\n                s1[1] = v51;\n                v98[1].__wchb[0] = 1;\n              }\n              goto LABEL_65;\n            }\n            break;\n          }\n          if ( v100.m128i_i8[0] )\n            goto LABEL_49;\n          goto LABEL_65;\n        }\nLABEL_173:\n        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n      }\nLABEL_67:\n      n[0] += v42;\n      ++v24;\n      BYTE12(v94) = 0;\n    }\n  }\n  v4 = *a2;\n  result = (mbstate_t)a1;\n  if ( !*a2 )\n    return result;\n  v6 = a1->__count;\n  if ( !LOBYTE(a1->__count) )\n    return 0LL;\n  v7 = a2;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 1;\n  while ( 1 )\n  {\n    ++v8;\n    v14 = v9 + 1;\n    v15 = (unsigned __int8 *)(v3 + 1);\n    if ( v4 != v6 )\n    {\n      if ( !v3[1] )\n        return 0LL;\n      goto LABEL_12;\n    }\n    v18 = *(_BYTE *)(v2 + 1);\n    if ( !v18 )\n      return (mbstate_t)v3;\n    if ( !*v15 )\n      return 0LL;\n    v14 = v9 + 2;\n    if ( v18 == *v15 )\n      break;\nLABEL_12:\n    v16 = v11 & (v8 > 9);\n    if ( (unsigned __int8)v11 & (v8 > 9) )\n    {\n      if ( v14 < 5 * v8\n        || v7 && (v76 = (char *)v7, v12 = strnlen(v7, v14 - (_QWORD)v10), v10 = (char *)v14, v7 = &v76[v12], v76[v12]) )\n      {\n        v11 = v16;\n      }\n      else\n      {\n        v77 = v10;\n        v13 = strlen((const char *)v2);\n        v11 = sub_419160(v15, v2, v13, &ps);\n        v10 = v77;\n        if ( v11 )\n          return ps;\n        v7 = 0LL;\n      }\n    }\n    v6 = *v15;\n    v3 = (char *)v15;\n    v9 = v14;\n  }\n  v19 = -(__int64)v9;\n  v20 = v2 + v19;\n  v21 = &v3[v19];\n  while ( 1 )\n  {\n    v23 = *(_BYTE *)(v20 + v14);\n    if ( !v23 )\n      return (mbstate_t)v3;\n    v22 = v21[v14];\n    if ( !v22 )\n      return 0LL;\n    ++v14;\n    if ( v23 != v22 )\n      goto LABEL_12;\n  }\n}\n", 
            "funcStartAddr": "0x402002L", 
            "funcEndAddr": "0x402007L", 
            "funcName": "sub_419CF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41ABC0(char *a1, char *a2, void *a3, void **a4, unsigned __int64 *a5)\n{\n  char *v5; // r13\n  void *v6; // rbx\n  __int64 v7; // r14\n  int v8; // eax\n  void *v9; // r14\n  unsigned int v10; // ebx\n  int *v12; // rax\n  int v13; // er12\n  int *v14; // rbp\n  unsigned __int64 size; // [rsp+0h] [rbp-1078h]\n  void **v16; // [rsp+8h] [rbp-1070h]\n  unsigned __int64 *v17; // [rsp+10h] [rbp-1068h]\n  char *inbuf; // [rsp+20h] [rbp-1058h]\n  size_t inbytesleft; // [rsp+28h] [rbp-1050h]\n  char *outbuf; // [rsp+30h] [rbp-1048h]\n  size_t outbytesleft; // [rsp+38h] [rbp-1040h]\n  size_t v22; // [rsp+40h] [rbp-1038h]\n\n  v5 = a2;\n  v6 = a3;\n  v16 = a4;\n  v17 = a5;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)&v22;\n      outbytesleft = 4096LL;\n      if ( iconv(v6, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)&v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      return (unsigned int)-1;\n  }\nLABEL_7:\n  outbuf = (char *)&v22;\n  outbytesleft = 4096LL;\n  if ( iconv(v6, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\n    return (unsigned int)-1;\n  size = v7 + outbuf - (char *)&v22;\n  if ( !(v7 + outbuf - (char *)&v22) )\n  {\n    v10 = 0;\n    *v17 = 0LL;\n    return v10;\n  }\n  v9 = *v16;\n  if ( !*v16 || *v17 < size )\n  {\n    v9 = malloc(size);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      return (unsigned int)-1;\n    }\n  }\n  iconv(v6, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22 = size;\n  while ( v5 )\n  {\n    if ( iconv(v6, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, &v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(v6, 0LL, 0LL, (char **)&outbytesleft, &v22) != -1LL )\n  {\n    if ( v22 )\n      abort();\n    v10 = 0;\n    *v16 = v9;\n    *v17 = size;\n    return v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *v16 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return v10;\n}\n\n__int64 __fastcall sub_41ABC0(char *a1, char *a2, void *a3, void **a4, unsigned __int64 *a5)\n{\n  char *v5; // r13\n  void *v6; // rbx\n  __int64 v7; // r14\n  int v8; // eax\n  void *v9; // r14\n  unsigned int v10; // ebx\n  int *v12; // rax\n  int v13; // er12\n  int *v14; // rbp\n  unsigned __int64 size; // [rsp+0h] [rbp-1078h]\n  void **v16; // [rsp+8h] [rbp-1070h]\n  unsigned __int64 *v17; // [rsp+10h] [rbp-1068h]\n  char *inbuf; // [rsp+20h] [rbp-1058h]\n  size_t inbytesleft; // [rsp+28h] [rbp-1050h]\n  char *outbuf; // [rsp+30h] [rbp-1048h]\n  size_t outbytesleft; // [rsp+38h] [rbp-1040h]\n  size_t v22; // [rsp+40h] [rbp-1038h]\n\n  v5 = a2;\n  v6 = a3;\n  v16 = a4;\n  v17 = a5;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)&v22;\n      outbytesleft = 4096LL;\n      if ( iconv(v6, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)&v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      return (unsigned int)-1;\n  }\nLABEL_7:\n  outbuf = (char *)&v22;\n  outbytesleft = 4096LL;\n  if ( iconv(v6, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\n    return (unsigned int)-1;\n  size = v7 + outbuf - (char *)&v22;\n  if ( !(v7 + outbuf - (char *)&v22) )\n  {\n    v10 = 0;\n    *v17 = 0LL;\n    return v10;\n  }\n  v9 = *v16;\n  if ( !*v16 || *v17 < size )\n  {\n    v9 = malloc(size);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      return (unsigned int)-1;\n    }\n  }\n  iconv(v6, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22 = size;\n  while ( v5 )\n  {\n    if ( iconv(v6, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, &v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(v6, 0LL, 0LL, (char **)&outbytesleft, &v22) != -1LL )\n  {\n    if ( v22 )\n      abort();\n    v10 = 0;\n    *v16 = v9;\n    *v17 = size;\n    return v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *v16 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return v10;\n}\n", 
            "funcStartAddr": "0x402007L", 
            "funcEndAddr": "0x40200cL", 
            "funcName": "sub_41ABC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41ABC0(char *a1, char *a2, void *a3, void **a4, unsigned __int64 *a5)\n{\n  char *v5; // r13\n  void *v6; // rbx\n  __int64 v7; // r14\n  int v8; // eax\n  void *v9; // r14\n  unsigned int v10; // ebx\n  int *v12; // rax\n  int v13; // er12\n  int *v14; // rbp\n  unsigned __int64 size; // [rsp+0h] [rbp-1078h]\n  void **v16; // [rsp+8h] [rbp-1070h]\n  unsigned __int64 *v17; // [rsp+10h] [rbp-1068h]\n  char *inbuf; // [rsp+20h] [rbp-1058h]\n  size_t inbytesleft; // [rsp+28h] [rbp-1050h]\n  char *outbuf; // [rsp+30h] [rbp-1048h]\n  size_t outbytesleft; // [rsp+38h] [rbp-1040h]\n  size_t v22; // [rsp+40h] [rbp-1038h]\n\n  v5 = a2;\n  v6 = a3;\n  v16 = a4;\n  v17 = a5;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)&v22;\n      outbytesleft = 4096LL;\n      if ( iconv(v6, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)&v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      return (unsigned int)-1;\n  }\nLABEL_7:\n  outbuf = (char *)&v22;\n  outbytesleft = 4096LL;\n  if ( iconv(v6, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\n    return (unsigned int)-1;\n  size = v7 + outbuf - (char *)&v22;\n  if ( !(v7 + outbuf - (char *)&v22) )\n  {\n    v10 = 0;\n    *v17 = 0LL;\n    return v10;\n  }\n  v9 = *v16;\n  if ( !*v16 || *v17 < size )\n  {\n    v9 = malloc(size);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      return (unsigned int)-1;\n    }\n  }\n  iconv(v6, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22 = size;\n  while ( v5 )\n  {\n    if ( iconv(v6, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, &v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(v6, 0LL, 0LL, (char **)&outbytesleft, &v22) != -1LL )\n  {\n    if ( v22 )\n      abort();\n    v10 = 0;\n    *v16 = v9;\n    *v17 = size;\n    return v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *v16 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return v10;\n}\n\n__int64 __fastcall sub_41ABC0(char *a1, char *a2, void *a3, void **a4, unsigned __int64 *a5)\n{\n  char *v5; // r13\n  void *v6; // rbx\n  __int64 v7; // r14\n  int v8; // eax\n  void *v9; // r14\n  unsigned int v10; // ebx\n  int *v12; // rax\n  int v13; // er12\n  int *v14; // rbp\n  unsigned __int64 size; // [rsp+0h] [rbp-1078h]\n  void **v16; // [rsp+8h] [rbp-1070h]\n  unsigned __int64 *v17; // [rsp+10h] [rbp-1068h]\n  char *inbuf; // [rsp+20h] [rbp-1058h]\n  size_t inbytesleft; // [rsp+28h] [rbp-1050h]\n  char *outbuf; // [rsp+30h] [rbp-1048h]\n  size_t outbytesleft; // [rsp+38h] [rbp-1040h]\n  size_t v22; // [rsp+40h] [rbp-1038h]\n\n  v5 = a2;\n  v6 = a3;\n  v16 = a4;\n  v17 = a5;\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  v7 = 0LL;\n  inbytesleft = (size_t)a2;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      outbuf = (char *)&v22;\n      outbytesleft = 4096LL;\n      if ( iconv(v6, &inbuf, &inbytesleft, &outbuf, &outbytesleft) == -1LL )\n      {\n        v8 = *__errno_location();\n        if ( v8 != 7 )\n          break;\n      }\n      v7 += outbuf - (char *)&v22;\n      if ( !inbytesleft )\n        goto LABEL_7;\n    }\n    if ( v8 != 22 )\n      return (unsigned int)-1;\n  }\nLABEL_7:\n  outbuf = (char *)&v22;\n  outbytesleft = 4096LL;\n  if ( iconv(v6, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\n    return (unsigned int)-1;\n  size = v7 + outbuf - (char *)&v22;\n  if ( !(v7 + outbuf - (char *)&v22) )\n  {\n    v10 = 0;\n    *v17 = 0LL;\n    return v10;\n  }\n  v9 = *v16;\n  if ( !*v16 || *v17 < size )\n  {\n    v9 = malloc(size);\n    if ( !v9 )\n    {\n      *__errno_location() = 12;\n      return (unsigned int)-1;\n    }\n  }\n  iconv(v6, 0LL, 0LL, 0LL, 0LL);\n  outbuf = a2;\n  outbytesleft = (size_t)v9;\n  inbytesleft = (size_t)a1;\n  v22 = size;\n  while ( v5 )\n  {\n    if ( iconv(v6, (char **)&inbytesleft, (size_t *)&outbuf, (char **)&outbytesleft, &v22) == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_24;\n      break;\n    }\n    v5 = outbuf;\n  }\n  if ( iconv(v6, 0LL, 0LL, (char **)&outbytesleft, &v22) != -1LL )\n  {\n    if ( v22 )\n      abort();\n    v10 = 0;\n    *v16 = v9;\n    *v17 = size;\n    return v10;\n  }\nLABEL_24:\n  v10 = -1;\n  if ( *v16 != v9 )\n  {\n    v12 = __errno_location();\n    v13 = *v12;\n    v14 = v12;\n    free(v9);\n    *v14 = v13;\n  }\n  return v10;\n}\n", 
            "funcStartAddr": "0x402007L", 
            "funcEndAddr": "0x40200cL", 
            "funcName": "sub_41ABC0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_41AE10(const char *a1, void *a2)\n{\n  size_t v2; // rax\n  size_t v3; // rbx\n  unsigned __int64 v4; // r13\n  char *v5; // r12\n  int *v6; // rax\n  int *v7; // r15\n  int v8; // eax\n  __int64 v9; // rbp\n  char *v10; // rbx\n  char *v11; // rax\n  __int64 v12; // rbp\n  char *v13; // rbx\n  char *v14; // rax\n  char *v15; // rax\n  char *v16; // rax\n  void *v17; // rdi\n  const char *v19; // [rsp+0h] [rbp-58h]\n  size_t inbytesleft; // [rsp+8h] [rbp-50h]\n  char *outbuf; // [rsp+10h] [rbp-48h]\n  size_t outbytesleft; // [rsp+18h] [rbp-40h]\n\n  v19 = a1;\n  v2 = strlen(a1);\n  inbytesleft = v2;\n  v3 = 16 * v2;\n  if ( v2 >= 0x10000000 )\n    v3 = v2;\n  v4 = v3 + 1;\n  v5 = (char *)malloc(v3 + 1);\n  if ( v5 )\n  {\n    iconv(a2, 0LL, 0LL, 0LL, 0LL);\n    outbuf = v5;\n    for ( outbytesleft = v3;\n          iconv(a2, (char **)&v19, &inbytesleft, &outbuf, &outbytesleft) == -1LL;\n          outbytesleft = v9 - 1 - (_QWORD)v10 )\n    {\n      v6 = __errno_location();\n      v7 = v6;\n      v8 = *v6;\n      if ( v8 == 22 )\n        break;\n      if ( v8 != 7 )\n        goto LABEL_22;\n      v9 = 2 * v4;\n      v10 = (char *)(outbuf - v5);\n      if ( v4 >= 2 * v4 || (v11 = (char *)realloc(v5, 2 * v4)) == 0LL )\n      {\nLABEL_21:\n        *v7 = 12;\nLABEL_22:\n        v17 = v5;\n        v5 = 0LL;\n        free(v17);\n        return v5;\n      }\n      v5 = v11;\n      v4 *= 2LL;\n      outbuf = &v10[(_QWORD)v11];\n    }\n    while ( iconv(a2, 0LL, 0LL, &outbuf, &outbytesleft) == -1LL )\n    {\n      v7 = __errno_location();\n      if ( *v7 != 7 )\n        goto LABEL_22;\n      v12 = 2 * v4;\n      v13 = (char *)(outbuf - v5);\n      if ( v4 >= 2 * v4 )\n        goto LABEL_21;\n      v14 = (char *)realloc(v5, 2 * v4);\n      if ( !v14 )\n        goto LABEL_21;\n      v4 *= 2LL;\n      v5 = v14;\n      outbuf = &v13[(_QWORD)v14];\n      outbytesleft = v12 - 1 - (_QWORD)v13;\n    }\n    v15 = outbuf++;\n    *v15 = 0;\n    if ( v4 > outbuf - v5 )\n    {\n      v16 = (char *)realloc(v5, outbuf - v5);\n      if ( v16 )\n        v5 = v16;\n    }\n  }\n  else\n  {\n    *__errno_location() = 12;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x41ae10L", 
            "funcEndAddr": "0x41afd5L", 
            "funcName": "sub_41AE10"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_41AFE0(char *s, char *fromcode, char *tocode)\n{\n  char *v3; // rbp\n  char *v4; // rbx\n  iconv_t v6; // rax\n  void *v7; // rbp\n  int *v8; // rax\n  char *v9; // rdi\n  int v10; // er12\n  int *v11; // rbp\n  int *v12; // rax\n  int v13; // er13\n  int *v14; // r12\n\n  if ( *s )\n  {\n    v3 = tocode;\n    if ( (unsigned int)sub_418A20((__int64)fromcode, (__int64)tocode) )\n    {\n      v6 = iconv_open(v3, fromcode);\n      v7 = v6;\n      if ( v6 == (iconv_t)-1LL )\n        return 0LL;\n      v4 = sub_41AE10(s, v6);\n      if ( v4 )\n      {\n        if ( iconv_close(v7) < 0 )\n        {\n          v8 = __errno_location();\n          v9 = v4;\n          v4 = 0LL;\n          v10 = *v8;\n          v11 = v8;\n          free(v9);\n          *v11 = v10;\n        }\n      }\n      else\n      {\n        v12 = __errno_location();\n        v13 = *v12;\n        v14 = v12;\n        iconv_close(v7);\n        *v14 = v13;\n      }\n      return v4;\n    }\n  }\n  v4 = strdup(s);\n  if ( v4 )\n    return v4;\n  *__errno_location() = 12;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x41afe0L", 
            "funcEndAddr": "0x41b0ccL", 
            "funcName": "sub_41AFE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41B0D0(__int64 a1)\n{\n  bool v1; // cf\n  size_t v2; // rdi\n  __int64 *v3; // rax\n  __int64 v4; // rcx\n  __int64 *v5; // rsi\n  unsigned __int64 v6; // rax\n  unsigned __int64 v7; // rdx\n  __int64 v8; // rax\n\n  v1 = __CFADD__(a1, 16LL);\n  v2 = a1 + 16;\n  if ( v1 )\n    return 0LL;\n  v3 = (__int64 *)malloc(v2);\n  v4 = 0LL;\n  v5 = v3;\n  if ( v3 )\n  {\n    *((_DWORD *)v3 + 3) = 336984906;\n    v4 = (__int64)(v3 + 2);\n    v6 = (unsigned __int64)(v3 + 2) % 0x101;\n    v7 = v6;\n    v8 = qword_623CC0[v6];\n    qword_623CC0[v7] = v4;\n    *v5 = v8;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x41b0d0L", 
            "funcEndAddr": "0x41b13cL", 
            "funcName": "sub_41B0D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_41B140(unsigned __int64 a1)\n{\n  __int64 v1; // rcx\n  __int64 v2; // rax\n  __int64 *v3; // rcx\n\n  if ( a1 )\n  {\n    if ( *(_DWORD *)(a1 - 4) == 336984906 )\n    {\n      v1 = qword_623CC0[a1 % 0x101];\n      if ( v1 )\n      {\n        if ( v1 == a1 )\n        {\n          v3 = &qword_623CC0[a1 % 0x101];\nLABEL_12:\n          *v3 = *(_QWORD *)(a1 - 16);\n          free((void *)(a1 - 16));\n        }\n        else\n        {\n          while ( 1 )\n          {\n            v2 = *(_QWORD *)(v1 - 16);\n            if ( !v2 )\n              break;\n            if ( a1 == v2 )\n            {\n              v3 = (__int64 *)(v1 - 16);\n              goto LABEL_12;\n            }\n            v1 = *(_QWORD *)(v1 - 16);\n          }\n        }\n      }\n    }\n  }\n}\n", 
            "funcStartAddr": "0x41b140L", 
            "funcEndAddr": "0x41b1c6L", 
            "funcName": "sub_41B140"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_41B1D0(char *s)\n{\n  __int64 v1; // rbx\n  wchar_t v3; // eax\n  __int64 v4; // rax\n  char *v5; // rbp\n  __int64 v6; // rax\n  size_t v7; // rax\n  size_t v8; // rax\n  char v9; // [rsp+0h] [rbp-58h]\n  mbstate_t ps; // [rsp+4h] [rbp-54h]\n  char i; // [rsp+Ch] [rbp-4Ch]\n  char *sa; // [rsp+10h] [rbp-48h]\n  size_t v13; // [rsp+18h] [rbp-40h]\n  char v14; // [rsp+20h] [rbp-38h]\n  wchar_t pwc; // [rsp+24h] [rbp-34h]\n\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    sa = s;\n    v1 = 0LL;\n    v9 = 0;\n    ps = 0LL;\n    for ( i = 0; ; i = 0 )\n    {\n      if ( !v9 )\n      {\n        if ( ((unsigned int)dword_41E840[((unsigned __int8)*sa >> 5) & 7] >> *sa) & 1 )\n        {\n          v13 = 1LL;\n          v3 = *sa;\n          v14 = 1;\n          pwc = v3;\n          goto LABEL_7;\n        }\n        if ( !mbsinit(&ps) )\n          __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 0x96u, \"mbuiter_multi_next\");\n        v9 = 1;\n      }\n      v4 = __ctype_get_mb_cur_max();\n      v5 = sa;\n      v6 = sub_4085C0((__int64)sa, v4);\n      v7 = sub_40AB50(&pwc, v5, v6, &ps);\n      v13 = v7;\n      switch ( v7 )\n      {\n        case 0xFFFFFFFFFFFFFFFFLL:\n          v13 = 1LL;\n          v14 = 0;\n          goto LABEL_8;\n        case 0xFFFFFFFFFFFFFFFELL:\n          v8 = strlen(sa);\n          v14 = 0;\n          v13 = v8;\n          goto LABEL_8;\n        case 0uLL:\n          v13 = 1LL;\n          if ( *sa )\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 0xB2u, \"mbuiter_multi_next\");\n          if ( pwc )\n            __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 0xB3u, \"mbuiter_multi_next\");\n          break;\n      }\n      v14 = 1;\n      if ( mbsinit(&ps) )\n        v9 = 0;\nLABEL_7:\n      if ( !pwc )\n        return v1;\nLABEL_8:\n      sa += v13;\n      ++v1;\n    }\n  }\n  return strlen(s);\n}\n", 
            "funcStartAddr": "0x41b1d0L", 
            "funcEndAddr": "0x41b39cL", 
            "funcName": "sub_41B1D0"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x41b3a0L", 
            "funcEndAddr": "0x41b3fdL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x41b400L", 
            "funcEndAddr": "0x41b401L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_41B410(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_6232A8 )\n    v1 = (void *)unk_6232A8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x41b410L", 
            "funcEndAddr": "0x41b428L", 
            "funcName": "sub_41B410"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_41B428(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_622E30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x41b428L", 
            "funcEndAddr": "0x41b448L", 
            "funcName": "sub_41B428"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_ptx.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 191, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}