{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  unsigned int v3; // er13\n  char *v4; // rdi\n  unsigned __int64 v5; // r14\n  int v6; // er15\n  int v7; // er12\n  char *v8; // rax\n  char *v9; // rbp\n  int v10; // eax\n  char *v12; // rbp\n  int *v13; // rax\n  const char *v14; // r14\n  int *v15; // rax\n  int *v16; // r15\n  char *v17; // r8\n  char *v18; // rax\n  char *v19; // rax\n  int v20; // er13\n  int v21; // eax\n  char *v22; // rsi\n  char *v23; // rax\n  char *v24; // rdi\n  int v25; // er14\n  int v26; // ebx\n  _IO_FILE *v27; // r15\n  char *v28; // rax\n  size_t v29; // rcx\n  char *v30; // rbx\n  int *v31; // rax\n  char *v32; // rax\n  char *v33; // rax\n  char *v34; // [rsp+0h] [rbp-68h]\n  size_t v35; // [rsp+0h] [rbp-68h]\n  char *v36; // [rsp+8h] [rbp-60h]\n  char *lineptr; // [rsp+18h] [rbp-50h]\n  size_t n; // [rsp+20h] [rbp-48h]\n  char *endptr; // [rsp+28h] [rbp-40h]\n\n  v3 = a1;\n  v4 = *a2;\n  if ( !*a2 )\n    v4 = \"frcode\";\n  sub_401CB0(v4, a2, a3);\n  if ( (unsigned int)sub_405810(sub_401C10) )\n  {\n    v12 = dcgettext(0LL, \"The atexit library function failed\", 5);\n    v13 = __errno_location();\n    error(1, *v13, v12);\n  }\n  v5 = 0LL;\n  v6 = 0;\n  v7 = 10;\n  n = 1026LL;\n  lineptr = (char *)sub_403C70(1026LL);\n  v8 = (char *)sub_403C70(1026LL);\n  *v8 = 0;\n  v9 = v8;\n  while ( 1 )\n  {\n    v10 = sub_405110(v3, a2, \"hv0S:\", &off_405A60, 0LL);\n    if ( v10 == -1 )\n      break;\n    if ( v10 == 83 )\n    {\n      v14 = nptr;\n      v34 = nptr;\n      v15 = __errno_location();\n      *v15 = 0;\n      v16 = v15;\n      v5 = strtol(v14, &endptr, 10);\n      if ( v5 )\n      {\n        if ( v5 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL )\n        {\n          if ( *v16 )\n          {\n            v32 = dcgettext(0LL, \"Security level %s is outside the convertible range.\", 5);\n            error(1, 0, v32, v34);\n            goto LABEL_25;\n          }\n          v17 = endptr;\n          if ( *endptr )\n          {\nLABEL_24:\n            v36 = v17;\n            v19 = dcgettext(0LL, \"Security level %s has unexpected suffix %s.\", 5);\n            error(1, 0, v19, v34, v36);\n            goto LABEL_25;\n          }\nLABEL_19:\n          v18 = dcgettext(0LL, \"slocate security level %ld is unsupported.\", 5);\n          error(1, 0, v18, v5);\n          goto LABEL_20;\n        }\n        v17 = endptr;\n        if ( *endptr )\n          goto LABEL_24;\n        if ( v5 != 1 )\n          goto LABEL_19;\n      }\n      else\n      {\n        v17 = endptr;\n        if ( endptr == nptr )\n        {\n          v33 = dcgettext(0LL, \"You need to specify a security level as a decimal integer.\", 5);\n          error(1, 0, v33);\nLABEL_25:\n          v5 = -1LL;\n          goto LABEL_19;\n        }\n        if ( *endptr )\n          goto LABEL_24;\n      }\nLABEL_20:\n      v6 = 1;\n    }\n    else\n    {\n      if ( v10 > 83 )\n      {\n        if ( v10 == 104 )\n        {\n          sub_401B10(stdout);\n          return 0LL;\n        }\n        if ( v10 == 118 )\n        {\n          sub_401B70(\"frcode\");\n          return 0LL;\n        }\nLABEL_14:\n        sub_401B10(stderr);\n        return 1LL;\n      }\n      v7 = 0;\n      if ( v10 != 48 )\n        goto LABEL_14;\n    }\n  }\n  if ( dword_60821C != v3 )\n    goto LABEL_14;\n  if ( v6 )\n  {\n    fputc(49 - (v5 < 1), stdout);\n    fputc(0, stdout);\n  }\n  else if ( fwrite(&unk_405A40, 1uLL, 0xAuLL, stdout) != 10 )\n  {\n    v30 = dcgettext(0LL, \"Failed to write to standard output\", 5);\n    v31 = __errno_location();\n    error(1, *v31, v30);\n  }\n  v35 = 1026LL;\n  v20 = 0;\n  while ( 2 )\n  {\n    v21 = getdelim(&lineptr, &n, v7, stdin);\n    if ( v21 > 0 )\n    {\n      lineptr[v21 - 1] = 0;\n      v22 = lineptr;\n      v23 = lineptr;\n      if ( *lineptr == *v9 && *v9 )\n      {\n        v24 = v9;\n        do\n        {\n          ++v24;\n          ++v23;\n        }\n        while ( *v23 == *v24 && *v24 && v24 != v9 + 2147483646 );\n      }\n      else\n      {\n        LODWORD(v24) = (_DWORD)v9;\n      }\n      v25 = (_DWORD)v24 - (_DWORD)v9;\n      v26 = (_DWORD)v24 - (_DWORD)v9 - v20;\n      if ( (unsigned int)(v26 + 0x8000) > 0xFFFF )\n      {\n        v25 = 0;\n        v26 = -v20;\n      }\n      if ( v6 )\n        goto LABEL_48;\n      if ( (unsigned int)(v26 + 127) <= 0xFE )\n      {\n        if ( _IO_putc(v26, stdout) != -1 )\n          goto LABEL_47;\n      }\n      else\n      {\n        if ( _IO_putc(128, stdout) == -1 )\n          sub_401AE0();\n        v27 = stdout;\n        if ( v26 > 0x7FFF )\n          __assert_fail(\"c <= SHRT_MAX\", \"frcode.c\", 0x7Bu, \"put_short\");\n        if ( v26 < -32768 )\n          __assert_fail(\"c >= SHRT_MIN\", \"frcode.c\", 0x7Cu, \"put_short\");\n        if ( _IO_putc(v26 >> 8, stdout) != -1 && _IO_putc(v26, v27) != -1 )\n        {\nLABEL_47:\n          v22 = lineptr;\n          goto LABEL_48;\n        }\n      }\n      sub_401AE0();\n      v22 = lineptr;\nLABEL_48:\n      if ( fputs(&v22[v25], stdout) == -1 || _IO_putc(0, stdout) == -1 )\n        sub_401AE0();\n      v28 = lineptr;\n      v6 = 0;\n      v20 = v25;\n      v29 = v35;\n      lineptr = v9;\n      v35 = n;\n      v9 = v28;\n      n = v29;\n      continue;\n    }\n    break;\n  }\n  free(lineptr);\n  free(v9);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x401510L", 
            "funcEndAddr": "0x4019f2L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x401a00L", 
            "funcEndAddr": "0x401a2bL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_401A2B()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x401a2bL", 
            "funcEndAddr": "0x401a4aL", 
            "funcName": "sub_401A2B"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_401A4A()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x401a4aL", 
            "funcEndAddr": "0x401a81L", 
            "funcName": "sub_401A4A"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_401A81()\n{\n  __int64 *result; // rax\n\n  if ( !byte_608248 )\n  {\n    while ( qword_608250 < (unsigned __int64)(&qword_607E48 - qword_607E40 - 1) )\n      ((void (*)(void))qword_607E40[++qword_608250])();\n    result = sub_401A2B();\n    byte_608248 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x401a81L", 
            "funcEndAddr": "0x401ad8L", 
            "funcName": "sub_401A81"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_401AD8()\n{\n  return sub_401A4A();\n}\n", 
            "funcStartAddr": "0x401ad8L", 
            "funcEndAddr": "0x401addL", 
            "funcName": "sub_401AD8"
        }, 
        {
            "decompiledFuncCode": "void sub_401AE0()\n{\n  char *v0; // rbx\n  int *v1; // rax\n\n  v0 = dcgettext(0LL, \"write error\", 5);\n  v1 = __errno_location();\n  error(1, *v1, v0);\n}\n", 
            "funcStartAddr": "0x401ae0L", 
            "funcEndAddr": "0x401b0cL", 
            "funcName": "sub_401AE0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_401B10(FILE *stream)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n\n  v1 = qword_608268;\n  v2 = dcgettext(0LL, \"Usage: %s [-0 | --null] [--version] [--help]\\n\", 5);\n  fprintf(stream, v2, v1);\n  v3 = dcgettext(0LL, \"\\nReport bugs to <bug-findutils@gnu.org>.\\n\", 5);\n  return fputs(v3, stream);\n}\n", 
            "funcStartAddr": "0x401b10L", 
            "funcEndAddr": "0x401b63L", 
            "funcName": "sub_401B10"
        }, 
        {
            "decompiledFuncCode": "char *sub_401B70()\n{\n  char *v0; // r12\n\n  sub_403ED0(stderr);\n  v0 = dcgettext(0LL, \"Kevin Dalley\", 5);\n  dcgettext(0LL, \"James Youngman\", 5);\n  dcgettext(0LL, \"Eric B. Decker\", 5);\n  sub_403B40((char)stdout);\n  return v0;\n}\n", 
            "funcStartAddr": "0x401b70L", 
            "funcEndAddr": "0x401beaL", 
            "funcName": "sub_401B70"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_401C10()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_4051C0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_608258 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_608260 )\n      {\n        v5 = sub_403500();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_4051C0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x401c10L", 
            "funcEndAddr": "0x401caeL", 
            "funcName": "sub_401C10"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_401CB0(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_608268 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x401cb0L", 
            "funcEndAddr": "0x401d49L", 
            "funcName": "sub_401CB0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_401D50(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_405230();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_405B79;\n      if ( !v5 )\n        v2 = (char *)&unk_405B6E;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_405B75;\n    if ( !v5 )\n      v2 = (char *)&unk_405B72;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x401d50L", 
            "funcEndAddr": "0x401e42L", 
            "funcName": "sub_401D50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_401E50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  __int64 v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // ebp\n  char v12; // zf\n  size_t v13; // rax\n  int v14; // edx\n  int v15; // er11\n  unsigned __int64 v16; // r10\n  unsigned __int64 v17; // rbx\n  int v18; // eax\n  unsigned __int64 v19; // r11\n  int v20; // er10\n  unsigned __int64 v21; // r13\n  int v22; // er8\n  char *v23; // r9\n  size_t v24; // rax\n  int v25; // eax\n  unsigned __int64 v26; // r12\n  bool v27; // al\n  char *v28; // rax\n  char i; // al\n  size_t v30; // rax\n  bool v31; // al\n  char v32; // cl\n  int v33; // eax\n  __int64 v34; // rcx\n  unsigned __int64 v35; // rax\n  const unsigned __int16 **v36; // rax\n  unsigned __int64 v37; // rcx\n  int v38; // edx\n  unsigned __int64 result; // rax\n  __int64 v40; // rsi\n  char v41; // dl\n  char *v42; // rax\n  size_t v43; // rax\n  unsigned __int64 v44; // rbx\n  unsigned __int64 v45; // r14\n  __int64 v46; // rax\n  __int64 v47; // r15\n  char *v48; // rdx\n  unsigned __int64 v49; // rcx\n  int v50; // eax\n  char v51; // si\n  unsigned __int64 v52; // rsi\n  char *v53; // rdi\n  unsigned __int64 v54; // rax\n  int v55; // [rsp+Ch] [rbp-ACh]\n  unsigned __int8 v56; // [rsp+Ch] [rbp-ACh]\n  unsigned __int64 v57; // [rsp+10h] [rbp-A8h]\n  char v58; // [rsp+10h] [rbp-A8h]\n  unsigned __int64 v59; // [rsp+10h] [rbp-A8h]\n  char *s; // [rsp+18h] [rbp-A0h]\n  size_t n; // [rsp+20h] [rbp-98h]\n  char *v62; // [rsp+28h] [rbp-90h]\n  int v63; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v64; // [rsp+28h] [rbp-90h]\n  char *v65; // [rsp+28h] [rbp-90h]\n  unsigned __int64 v66; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-88h]\n  unsigned __int8 v68; // [rsp+30h] [rbp-88h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-88h]\n  char v70; // [rsp+30h] [rbp-88h]\n  int v71; // [rsp+30h] [rbp-88h]\n  int v72; // [rsp+38h] [rbp-80h]\n  unsigned __int64 v73; // [rsp+38h] [rbp-80h]\n  int v74; // [rsp+38h] [rbp-80h]\n  int v75; // [rsp+38h] [rbp-80h]\n  __int64 v76; // [rsp+38h] [rbp-80h]\n  int v77; // [rsp+40h] [rbp-78h]\n  unsigned __int64 v78; // [rsp+40h] [rbp-78h]\n  char *s2; // [rsp+48h] [rbp-70h]\n  size_t v80; // [rsp+50h] [rbp-68h]\n  char v81; // [rsp+58h] [rbp-60h]\n  bool v82; // [rsp+5Dh] [rbp-5Bh]\n  unsigned __int8 v83; // [rsp+5Eh] [rbp-5Ah]\n  unsigned __int64 v84; // [rsp+60h] [rbp-58h]\n  char *v85; // [rsp+68h] [rbp-50h]\n  wint_t wc; // [rsp+74h] [rbp-44h]\n  mbstate_t ps; // [rsp+78h] [rbp-40h]\n\n  v9 = (__int64)a1;\n  v10 = a2;\n  v11 = a6 & 2;\n  s = a3;\n  v57 = a4;\n  v55 = a5;\n  v81 = a6;\n  v13 = __ctype_get_mb_cur_max();\n  v15 = v55;\n  v80 = v13;\n  v16 = v57;\n  switch ( v55 )\n  {\n    case 0:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v11 )\n      {\n        v56 = 0;\n        goto LABEL_38;\n      }\n      v82 = 1;\n      v17 = 0LL;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      break;\n    case 3:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 2;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      break;\n    case 4:\n      if ( v11 )\n      {\nLABEL_2:\n        v82 = 1;\n        v17 = 0LL;\n        v15 = 2;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n      }\n      else\n      {\n        v56 = 1;\nLABEL_38:\n        if ( a2 )\n          *a1 = 39;\n        v82 = 0;\n        v17 = 1LL;\n        v15 = 2;\n        n = 1LL;\n        s2 = \"'\";\n      }\n      break;\n    case 5:\n      if ( v11 )\n      {\n        v82 = 1;\n        v17 = 0LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n          *a1 = 34;\n        v82 = 0;\n        v17 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      break;\n    case 6:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 5;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      break;\n    case 7:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 8:\n    case 9:\n    case 10:\n      if ( !v12 )\n      {\n        a8 = sub_401D50(\"`\", v55);\n        v28 = sub_401D50(\"'\", v55);\n        v16 = v57;\n        v15 = v55;\n        a9 = v28;\n      }\n      v17 = 0LL;\n      if ( !v11 )\n      {\n        for ( i = *a8; i; i = a8[v17] )\n        {\n          if ( a2 > v17 )\n            a1[v17] = i;\n          ++v17;\n        }\n      }\n      v63 = v15;\n      v59 = v16;\n      v82 = v11 != 0;\n      v30 = strlen(a9);\n      v56 = 1;\n      v16 = v59;\n      n = v30;\n      v15 = v63;\n      s2 = a9;\n      break;\n    default:\n      abort();\n      return result;\n  }\n  v18 = v15;\n  v19 = v16;\n  v20 = v18;\n  v21 = 0LL;\n  v22 = 0;\nLABEL_4:\n  while ( 2 )\n  {\n    LOBYTE(v11) = v19 != v21;\n    if ( v19 == -1LL )\n      LOBYTE(v11) = s[v21] != 0;\n    if ( !(_BYTE)v11 )\n    {\n      if ( v17 == 0 && v82 && v20 == 2 )\n        return sub_401E50(v9, v10, s);\n      if ( s2 )\n      {\n        if ( !v82 )\n        {\n          v41 = *s2;\n          if ( *s2 )\n          {\n            v42 = &s2[-v17];\n            do\n            {\n              if ( v10 > v17 )\n                *(_BYTE *)(v9 + v17) = v41;\n              v41 = v42[++v17];\n            }\n            while ( v41 );\n          }\n        }\n      }\n      if ( v17 < v10 )\n        *(_BYTE *)(v9 + v17) = 0;\n      return v17;\n    }\n    v23 = &s[v21];\n    v58 = v56 & (v20 != 2);\n    if ( v56 & (v20 != 2) )\n    {\n      if ( !n )\n        goto LABEL_271;\n      if ( v19 == -1LL && n > 1 )\n      {\n        v72 = v20;\n        v67 = v22;\n        v24 = strlen(s);\n        v20 = v72;\n        v22 = v67;\n        v23 = &s[v21];\n        v19 = v24;\n      }\n      if ( v21 + n > v19 )\n        goto LABEL_271;\n      v77 = v20;\n      v73 = v19;\n      v68 = v22;\n      v62 = v23;\n      v25 = memcmp(v23, s2, n);\n      v23 = v62;\n      v22 = v68;\n      v19 = v73;\n      v20 = v77;\n      if ( v25 )\n      {\nLABEL_271:\n        LOBYTE(v26) = *v23;\n        switch ( *v23 )\n        {\n          case 0:\n            goto LABEL_103;\n          case 7:\nLABEL_94:\n            LOBYTE(v26) = 97;\n            v27 = 0;\n            goto LABEL_91;\n          case 8:\nLABEL_93:\n            LOBYTE(v26) = 98;\n            v27 = 0;\n            goto LABEL_91;\n          case 9:\nLABEL_102:\n            LOBYTE(v26) = 116;\n            v27 = 0;\n            goto LABEL_91;\n          case 10:\nLABEL_90:\n            LOBYTE(v26) = 110;\n            v27 = 0;\n            goto LABEL_91;\n          case 11:\nLABEL_101:\n            LOBYTE(v26) = 118;\n            v27 = 0;\n            goto LABEL_91;\n          case 12:\nLABEL_100:\n            LOBYTE(v26) = 102;\n            v27 = 0;\nLABEL_91:\n            if ( v82 )\n              return sub_401E50(v9, v10, s);\n            goto LABEL_21;\n          case 13:\n            v58 = 0;\nLABEL_96:\n            LOBYTE(v26) = 13;\n            v32 = 114;\n            LOBYTE(v14) = v20 == 2;\n            goto LABEL_88;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v58 = 0;\nLABEL_85:\n            v14 = 0;\n            goto LABEL_65;\n          case 35:\n          case 126:\n            v58 = 0;\nLABEL_98:\n            if ( v21 )\n              goto LABEL_17;\n            v14 = 0;\n            goto LABEL_65;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v58 = 0;\n            goto LABEL_17;\n          case 39:\n            v58 = 0;\n            goto LABEL_73;\n          case 63:\n            v58 = 0;\n            goto LABEL_69;\n          case 92:\n            v58 = 0;\n            goto LABEL_87;\n          case 123:\n          case 125:\n            v58 = 0;\n            goto LABEL_60;\n          default:\n            v58 = 0;\n            goto LABEL_124;\n        }\n      }\n      if ( !v82 )\n      {\n        LOBYTE(v26) = *v62;\n        switch ( *v62 )\n        {\n          case 0:\n            goto LABEL_105;\n          case 7:\n            goto LABEL_94;\n          case 8:\n            goto LABEL_93;\n          case 9:\n            goto LABEL_102;\n          case 10:\n            goto LABEL_90;\n          case 11:\n            goto LABEL_101;\n          case 12:\n            goto LABEL_100;\n          case 13:\n            goto LABEL_96;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            goto LABEL_85;\n          case 35:\n          case 126:\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            goto LABEL_17;\n          case 39:\n            goto LABEL_73;\n          case 63:\n            goto LABEL_69;\n          case 92:\n            goto LABEL_87;\n          case 123:\n          case 125:\n            goto LABEL_60;\n          default:\n            goto LABEL_124;\n        }\n      }\n      return sub_401E50(v9, v10, s);\n    }\n    LOBYTE(v26) = *v23;\n    switch ( *v23 )\n    {\n      case 0:\n        if ( !v56 )\n        {\n          if ( v81 & 1 )\n          {\n            ++v21;\n            continue;\n          }\n          if ( !v82 )\n          {\n            ++v21;\n            v11 = v22;\n            LOBYTE(v26) = 0;\n            goto LABEL_144;\n          }\n          v11 = 0;\n          if ( a7 )\n          {\n            v58 = 0;\n            LOBYTE(v26) = 0;\n            goto LABEL_18;\n          }\n          LOBYTE(v26) = 0;\n          goto LABEL_122;\n        }\nLABEL_103:\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        v58 = 0;\nLABEL_105:\n        LOBYTE(v14) = v20 == 2;\n        v33 = v22 ^ 1;\n        LOBYTE(v33) = (v20 == 2) & (v22 ^ 1);\n        if ( (_BYTE)v33 )\n        {\n          if ( v17 < v10 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v34 = v17 + 3;\n          if ( v10 <= v17 + 3 )\n          {\n            v17 += 4LL;\n            ++v21;\n            v22 = v33;\n            LOBYTE(v26) = 48;\n            goto LABEL_82;\n          }\n          v22 = v33;\n        }\n        else\n        {\n          v34 = v17;\n          if ( v17 >= v10 )\n            goto LABEL_115;\n        }\n        *(_BYTE *)(v9 + v34) = 92;\nLABEL_115:\n        v17 = v34 + 1;\n        v35 = v21 + 1;\n        if ( v20 == 2 )\n        {\n          ++v21;\n          LOBYTE(v26) = 48;\n          goto LABEL_82;\n        }\n        LOBYTE(v26) = 48;\n        if ( v35 < v19 && (unsigned __int8)(s[v35] - 48) <= 9u )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 48;\n          if ( v10 > v34 + 2 )\n            *(_BYTE *)(v9 + v34 + 2) = 48;\n          v17 = v34 + 3;\n          LOBYTE(v26) = 48;\n        }\n        goto LABEL_118;\n      case 7:\n        LOBYTE(v26) = 7;\n        v32 = 97;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 8:\n        LOBYTE(v26) = 8;\n        v32 = 98;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 9:\n        LOBYTE(v26) = 9;\n        v32 = 116;\n        goto LABEL_130;\n      case 10:\n        LOBYTE(v26) = 10;\n        v32 = 110;\n        goto LABEL_130;\n      case 11:\n        LOBYTE(v26) = 11;\n        v32 = 118;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 12:\n        LOBYTE(v26) = 12;\n        v32 = 102;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 13:\n        LOBYTE(v26) = 13;\n        v32 = 114;\nLABEL_130:\n        LOBYTE(v14) = v20 == 2;\n        v58 = v20 == 2 && v82;\n        if ( v58 )\n          return sub_401E50(v9, v10, s);\n        goto LABEL_88;\n      case 32:\n      case 33:\n      case 34:\n      case 36:\n      case 38:\n      case 40:\n      case 41:\n      case 42:\n      case 59:\n      case 60:\n      case 61:\n      case 62:\n      case 91:\n      case 94:\n      case 96:\n      case 124:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_64;\n      case 35:\n      case 126:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_63;\n      case 37:\n      case 43:\n      case 44:\n      case 45:\n      case 46:\n      case 47:\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n      case 58:\n      case 65:\n      case 66:\n      case 67:\n      case 68:\n      case 69:\n      case 70:\n      case 71:\n      case 72:\n      case 73:\n      case 74:\n      case 75:\n      case 76:\n      case 77:\n      case 78:\n      case 79:\n      case 80:\n      case 81:\n      case 82:\n      case 83:\n      case 84:\n      case 85:\n      case 86:\n      case 87:\n      case 88:\n      case 89:\n      case 90:\n      case 93:\n      case 95:\n      case 97:\n      case 98:\n      case 99:\n      case 100:\n      case 101:\n      case 102:\n      case 103:\n      case 104:\n      case 105:\n      case 106:\n      case 107:\n      case 108:\n      case 109:\n      case 110:\n      case 111:\n      case 112:\n      case 113:\n      case 114:\n      case 115:\n      case 116:\n      case 117:\n      case 118:\n      case 119:\n      case 120:\n      case 121:\n      case 122:\n        goto LABEL_127;\n      case 39:\nLABEL_73:\n        v14 = 0;\n        LOBYTE(v26) = 39;\n        if ( v20 != 2 )\n          goto LABEL_65;\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 39;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 92;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 39;\n        v17 += 3LL;\n        ++v21;\n        v22 = 0;\n        LOBYTE(v26) = 39;\nLABEL_82:\n        if ( !v58 )\n          goto LABEL_33;\n        goto LABEL_67;\n      case 63:\nLABEL_69:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_401E50(v9, v10, s);\n          v11 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_66;\n        }\n        if ( v20 != 5 )\n        {\n          LOBYTE(v26) = 63;\n          LOBYTE(v14) = v20 == 2;\n          goto LABEL_65;\n        }\n        if ( !(v81 & 4) )\n        {\n          v14 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        v14 = 0;\n        LOBYTE(v26) = 63;\n        if ( v21 + 2 >= v19 || s[v21 + 1] != 63 )\n          goto LABEL_65;\n        v26 = (unsigned __int8)s[v21 + 2];\n        if ( (unsigned __int8)v26 > 0x3Eu || (v40 = 8070630310989004800LL, !_bittest64(&v40, v26)) )\n        {\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 63;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 34;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 34;\n        if ( v10 > v17 + 3 )\n          *(_BYTE *)(v9 + v17 + 3) = 63;\n        v17 += 4LL;\n        v14 = 0;\n        v11 = 0;\n        v21 += 2LL;\nLABEL_118:\n        if ( !v56 || (_BYTE)v14 )\n          goto LABEL_66;\n        if ( a7 )\n          goto LABEL_18;\n        goto LABEL_121;\n      case 92:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_401E50(v9, v10, s);\n          ++v21;\n          v11 = v22;\n          LOBYTE(v26) = 92;\n          goto LABEL_144;\n        }\nLABEL_87:\n        v11 = v82 & v56;\n        LOBYTE(v26) = 92;\n        v32 = 92;\n        v14 = v82 & v56;\n        LOBYTE(v14) = (n != 0) & v14;\n        if ( (_BYTE)v14 )\n        {\n          ++v21;\n          v11 = v22;\n          goto LABEL_144;\n        }\nLABEL_88:\n        if ( !v56 )\n          goto LABEL_65;\n        v27 = v14;\n        LOBYTE(v26) = v32;\n        goto LABEL_20;\n      case 123:\n      case 125:\nLABEL_60:\n        v31 = v19 != 1;\n        if ( v19 == -1LL )\n          v31 = s[1] != 0;\n        LOBYTE(v14) = v20 == 2;\n        if ( v31 )\n          goto LABEL_65;\nLABEL_63:\n        if ( v21 )\n          goto LABEL_65;\nLABEL_64:\n        if ( !((unsigned __int8)v14 & v82) )\n          goto LABEL_65;\n        return sub_401E50(v9, v10, s);\n      default:\nLABEL_124:\n        if ( v80 == 1 )\n        {\n          v74 = v20;\n          v69 = v19;\n          v64 = v22;\n          v36 = __ctype_b_loc();\n          v22 = v64;\n          v19 = v69;\n          v20 = v74;\n          v37 = 1LL;\n          v38 = (*v36)[(unsigned __int8)v26];\n          LOWORD(v38) = (unsigned __int16)v38 >> 14;\n          v14 = v38 ^ 1;\n          LOBYTE(v14) = v56 & v14;\n          goto LABEL_126;\n        }\n        ps = 0LL;\n        if ( v19 == -1LL )\n        {\n          v75 = v20;\n          v70 = v22;\n          v65 = v23;\n          v43 = strlen(s);\n          v20 = v75;\n          LOBYTE(v22) = v70;\n          v23 = v65;\n          v19 = v43;\n        }\n        v84 = v17;\n        v83 = v22;\n        v44 = 0LL;\n        v85 = v23;\n        v76 = v9;\n        v78 = v10;\n        v66 = v19;\n        v71 = v20;\n        break;\n    }\n    break;\n  }\n  while ( 1 )\n  {\n    v45 = v21 + v44;\n    v46 = sub_405190(&wc, &s[v21 + v44], v66 - (v21 + v44), &ps);\n    v47 = v46;\n    switch ( v46 )\n    {\n      case 0LL:\n        v11 ^= 1u;\n        v37 = v44;\n        v9 = v76;\n        v22 = v83;\n        v17 = v84;\n        v10 = v78;\n        v14 = (unsigned __int8)(v11 & v56);\n        v19 = v66;\n        v20 = v71;\n        goto LABEL_252;\n      case -1LL:\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v19 = v66;\n        v20 = v71;\n        v14 = v56;\n        goto LABEL_252;\n      case -2LL:\n        v19 = v66;\n        v52 = v21 + v44;\n        v53 = &s[v21 + v44];\n        v54 = v44;\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v20 = v71;\n        if ( v52 < v66 && *v53 )\n        {\n          do\n            ++v54;\n          while ( v66 > v21 + v54 && v85[v54] );\n          v37 = v54;\n        }\n        v14 = v56;\nLABEL_252:\n        if ( v37 > 1 )\n          goto LABEL_206;\nLABEL_126:\n        if ( (_BYTE)v14 )\n        {\n          v14 = v56;\nLABEL_206:\n          v49 = v21 + v37;\n          v50 = 0;\n          v51 = v58;\n          while ( 1 )\n          {\n            if ( (_BYTE)v14 )\n            {\n              if ( v82 )\n                return sub_401E50(v9, v10, s);\n              if ( (v20 == 2) & ((unsigned __int8)v22 ^ 1) )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 36;\n                if ( v10 > v17 + 2 )\n                  *(_BYTE *)(v9 + v17 + 2) = 39;\n                v17 += 3LL;\n                v22 ^= 1u;\n              }\n              if ( v17 < v10 )\n                *(_BYTE *)(v9 + v17) = 92;\n              if ( v10 > v17 + 1 )\n                *(_BYTE *)(v9 + v17 + 1) = ((unsigned __int8)v26 >> 6) + 48;\n              if ( v10 > v17 + 2 )\n                *(_BYTE *)(v9 + v17 + 2) = (((unsigned __int8)v26 >> 3) & 7) + 48;\n              ++v21;\n              v17 += 3LL;\n              LOBYTE(v26) = (v26 & 7) + 48;\n              if ( v49 <= v21 )\n                goto LABEL_33;\n              v50 = v14;\n            }\n            else\n            {\n              v11 = v22 & (v50 ^ 1);\n              if ( v51 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 92;\n                ++v17;\n              }\n              if ( ++v21 >= v49 )\n                goto LABEL_144;\n              if ( (_BYTE)v11 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 39;\n                v17 += 2LL;\n                v51 = 0;\n                v22 = 0;\n              }\n              else\n              {\n                v51 = 0;\n              }\n            }\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = v26;\n            LOBYTE(v26) = s[v21];\n            ++v17;\n          }\n        }\nLABEL_127:\n        LOBYTE(v14) = v20 == 2;\nLABEL_65:\n        v11 = (v14 | v56 ^ 1) ^ 1;\n        LOBYTE(v11) = v82 | (v14 | v56 ^ 1) ^ 1;\n        if ( v82 | (unsigned __int8)(v14 | v56 ^ 1) ^ 1 )\n        {\nLABEL_17:\n          v11 = 0;\n          if ( a7 )\n          {\nLABEL_18:\n            if ( (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v26 >> 5)) >> v26) & 1 )\n            {\n              v27 = v20 == 2;\nLABEL_20:\n              if ( v82 )\n                return sub_401E50(v9, v10, s);\nLABEL_21:\n              ++v21;\n              goto LABEL_22;\n            }\n          }\nLABEL_121:\n          v27 = v20 == 2;\n          if ( v58 )\n            goto LABEL_20;\nLABEL_122:\n          ++v21;\n          v11 = v22 & (v11 ^ 1);\nLABEL_144:\n          if ( (_BYTE)v11 )\n          {\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = 39;\n            if ( v10 > v17 + 1 )\n              *(_BYTE *)(v9 + v17 + 1) = 39;\n            v17 += 2LL;\n            v22 = 0;\n          }\n          goto LABEL_33;\n        }\nLABEL_66:\n        ++v21;\n        if ( !v58 )\n        {\n          v11 = v22 & (v11 ^ 1);\n          goto LABEL_144;\n        }\nLABEL_67:\n        v27 = v20 == 2;\nLABEL_22:\n        v14 = v22 ^ 1;\n        if ( v27 & ((unsigned __int8)v22 ^ 1) )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v17 += 3LL;\n          LOBYTE(v14) = v27 & (v22 ^ 1);\n          v22 = v14;\n        }\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 92;\n        ++v17;\nLABEL_33:\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = v26;\n        ++v17;\n        goto LABEL_4;\n    }\n    if ( v82 && v71 == 2 && v46 != 1 )\n      break;\nLABEL_187:\n    if ( !iswprint(wc) )\n      v11 = 0;\n    v44 += v47;\n    if ( mbsinit(&ps) )\n    {\n      v37 = v44;\n      v22 = v83;\n      v17 = v84;\n      v14 = v11 ^ 1;\n      v9 = v76;\n      v10 = v78;\n      v19 = v66;\n      v20 = v71;\n      LOBYTE(v14) = v56 & (v11 ^ 1);\n      goto LABEL_252;\n    }\n  }\n  v48 = &s[v45 + 1];\n  while ( (unsigned __int8)(*v48 - 91) > 0x21u || !((1LL << (*v48 - 91)) & 0x20000002BLL) )\n  {\n    if ( &s[v46 + v45] == ++v48 )\n      goto LABEL_187;\n  }\n  v9 = v76;\n  v10 = v78;\n  return sub_401E50(v9, v10, s);\n}\n\nunsigned __int64 __fastcall sub_401E50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  __int64 v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // ebp\n  char v12; // zf\n  size_t v13; // rax\n  int v14; // edx\n  int v15; // er11\n  unsigned __int64 v16; // r10\n  unsigned __int64 v17; // rbx\n  int v18; // eax\n  unsigned __int64 v19; // r11\n  int v20; // er10\n  unsigned __int64 v21; // r13\n  int v22; // er8\n  char *v23; // r9\n  size_t v24; // rax\n  int v25; // eax\n  unsigned __int64 v26; // r12\n  bool v27; // al\n  char *v28; // rax\n  char i; // al\n  size_t v30; // rax\n  bool v31; // al\n  char v32; // cl\n  int v33; // eax\n  __int64 v34; // rcx\n  unsigned __int64 v35; // rax\n  const unsigned __int16 **v36; // rax\n  unsigned __int64 v37; // rcx\n  int v38; // edx\n  unsigned __int64 result; // rax\n  __int64 v40; // rsi\n  char v41; // dl\n  char *v42; // rax\n  size_t v43; // rax\n  unsigned __int64 v44; // rbx\n  unsigned __int64 v45; // r14\n  __int64 v46; // rax\n  __int64 v47; // r15\n  char *v48; // rdx\n  unsigned __int64 v49; // rcx\n  int v50; // eax\n  char v51; // si\n  unsigned __int64 v52; // rsi\n  char *v53; // rdi\n  unsigned __int64 v54; // rax\n  int v55; // [rsp+Ch] [rbp-ACh]\n  unsigned __int8 v56; // [rsp+Ch] [rbp-ACh]\n  unsigned __int64 v57; // [rsp+10h] [rbp-A8h]\n  char v58; // [rsp+10h] [rbp-A8h]\n  unsigned __int64 v59; // [rsp+10h] [rbp-A8h]\n  char *s; // [rsp+18h] [rbp-A0h]\n  size_t n; // [rsp+20h] [rbp-98h]\n  char *v62; // [rsp+28h] [rbp-90h]\n  int v63; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v64; // [rsp+28h] [rbp-90h]\n  char *v65; // [rsp+28h] [rbp-90h]\n  unsigned __int64 v66; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-88h]\n  unsigned __int8 v68; // [rsp+30h] [rbp-88h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-88h]\n  char v70; // [rsp+30h] [rbp-88h]\n  int v71; // [rsp+30h] [rbp-88h]\n  int v72; // [rsp+38h] [rbp-80h]\n  unsigned __int64 v73; // [rsp+38h] [rbp-80h]\n  int v74; // [rsp+38h] [rbp-80h]\n  int v75; // [rsp+38h] [rbp-80h]\n  __int64 v76; // [rsp+38h] [rbp-80h]\n  int v77; // [rsp+40h] [rbp-78h]\n  unsigned __int64 v78; // [rsp+40h] [rbp-78h]\n  char *s2; // [rsp+48h] [rbp-70h]\n  size_t v80; // [rsp+50h] [rbp-68h]\n  char v81; // [rsp+58h] [rbp-60h]\n  bool v82; // [rsp+5Dh] [rbp-5Bh]\n  unsigned __int8 v83; // [rsp+5Eh] [rbp-5Ah]\n  unsigned __int64 v84; // [rsp+60h] [rbp-58h]\n  char *v85; // [rsp+68h] [rbp-50h]\n  wint_t wc; // [rsp+74h] [rbp-44h]\n  mbstate_t ps; // [rsp+78h] [rbp-40h]\n\n  v9 = (__int64)a1;\n  v10 = a2;\n  v11 = a6 & 2;\n  s = a3;\n  v57 = a4;\n  v55 = a5;\n  v81 = a6;\n  v13 = __ctype_get_mb_cur_max();\n  v15 = v55;\n  v80 = v13;\n  v16 = v57;\n  switch ( v55 )\n  {\n    case 0:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v11 )\n      {\n        v56 = 0;\n        goto LABEL_38;\n      }\n      v82 = 1;\n      v17 = 0LL;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      break;\n    case 3:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 2;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      break;\n    case 4:\n      if ( v11 )\n      {\nLABEL_2:\n        v82 = 1;\n        v17 = 0LL;\n        v15 = 2;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n      }\n      else\n      {\n        v56 = 1;\nLABEL_38:\n        if ( a2 )\n          *a1 = 39;\n        v82 = 0;\n        v17 = 1LL;\n        v15 = 2;\n        n = 1LL;\n        s2 = \"'\";\n      }\n      break;\n    case 5:\n      if ( v11 )\n      {\n        v82 = 1;\n        v17 = 0LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n          *a1 = 34;\n        v82 = 0;\n        v17 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      break;\n    case 6:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 5;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      break;\n    case 7:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 8:\n    case 9:\n    case 10:\n      if ( !v12 )\n      {\n        a8 = sub_401D50(\"`\", v55);\n        v28 = sub_401D50(\"'\", v55);\n        v16 = v57;\n        v15 = v55;\n        a9 = v28;\n      }\n      v17 = 0LL;\n      if ( !v11 )\n      {\n        for ( i = *a8; i; i = a8[v17] )\n        {\n          if ( a2 > v17 )\n            a1[v17] = i;\n          ++v17;\n        }\n      }\n      v63 = v15;\n      v59 = v16;\n      v82 = v11 != 0;\n      v30 = strlen(a9);\n      v56 = 1;\n      v16 = v59;\n      n = v30;\n      v15 = v63;\n      s2 = a9;\n      break;\n    default:\n      abort();\n      return result;\n  }\n  v18 = v15;\n  v19 = v16;\n  v20 = v18;\n  v21 = 0LL;\n  v22 = 0;\nLABEL_4:\n  while ( 2 )\n  {\n    LOBYTE(v11) = v19 != v21;\n    if ( v19 == -1LL )\n      LOBYTE(v11) = s[v21] != 0;\n    if ( !(_BYTE)v11 )\n    {\n      if ( v17 == 0 && v82 && v20 == 2 )\n        return sub_401E50(v9, v10, s);\n      if ( s2 )\n      {\n        if ( !v82 )\n        {\n          v41 = *s2;\n          if ( *s2 )\n          {\n            v42 = &s2[-v17];\n            do\n            {\n              if ( v10 > v17 )\n                *(_BYTE *)(v9 + v17) = v41;\n              v41 = v42[++v17];\n            }\n            while ( v41 );\n          }\n        }\n      }\n      if ( v17 < v10 )\n        *(_BYTE *)(v9 + v17) = 0;\n      return v17;\n    }\n    v23 = &s[v21];\n    v58 = v56 & (v20 != 2);\n    if ( v56 & (v20 != 2) )\n    {\n      if ( !n )\n        goto LABEL_271;\n      if ( v19 == -1LL && n > 1 )\n      {\n        v72 = v20;\n        v67 = v22;\n        v24 = strlen(s);\n        v20 = v72;\n        v22 = v67;\n        v23 = &s[v21];\n        v19 = v24;\n      }\n      if ( v21 + n > v19 )\n        goto LABEL_271;\n      v77 = v20;\n      v73 = v19;\n      v68 = v22;\n      v62 = v23;\n      v25 = memcmp(v23, s2, n);\n      v23 = v62;\n      v22 = v68;\n      v19 = v73;\n      v20 = v77;\n      if ( v25 )\n      {\nLABEL_271:\n        LOBYTE(v26) = *v23;\n        switch ( *v23 )\n        {\n          case 0:\n            goto LABEL_103;\n          case 7:\nLABEL_94:\n            LOBYTE(v26) = 97;\n            v27 = 0;\n            goto LABEL_91;\n          case 8:\nLABEL_93:\n            LOBYTE(v26) = 98;\n            v27 = 0;\n            goto LABEL_91;\n          case 9:\nLABEL_102:\n            LOBYTE(v26) = 116;\n            v27 = 0;\n            goto LABEL_91;\n          case 10:\nLABEL_90:\n            LOBYTE(v26) = 110;\n            v27 = 0;\n            goto LABEL_91;\n          case 11:\nLABEL_101:\n            LOBYTE(v26) = 118;\n            v27 = 0;\n            goto LABEL_91;\n          case 12:\nLABEL_100:\n            LOBYTE(v26) = 102;\n            v27 = 0;\nLABEL_91:\n            if ( v82 )\n              return sub_401E50(v9, v10, s);\n            goto LABEL_21;\n          case 13:\n            v58 = 0;\nLABEL_96:\n            LOBYTE(v26) = 13;\n            v32 = 114;\n            LOBYTE(v14) = v20 == 2;\n            goto LABEL_88;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v58 = 0;\nLABEL_85:\n            v14 = 0;\n            goto LABEL_65;\n          case 35:\n          case 126:\n            v58 = 0;\nLABEL_98:\n            if ( v21 )\n              goto LABEL_17;\n            v14 = 0;\n            goto LABEL_65;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v58 = 0;\n            goto LABEL_17;\n          case 39:\n            v58 = 0;\n            goto LABEL_73;\n          case 63:\n            v58 = 0;\n            goto LABEL_69;\n          case 92:\n            v58 = 0;\n            goto LABEL_87;\n          case 123:\n          case 125:\n            v58 = 0;\n            goto LABEL_60;\n          default:\n            v58 = 0;\n            goto LABEL_124;\n        }\n      }\n      if ( !v82 )\n      {\n        LOBYTE(v26) = *v62;\n        switch ( *v62 )\n        {\n          case 0:\n            goto LABEL_105;\n          case 7:\n            goto LABEL_94;\n          case 8:\n            goto LABEL_93;\n          case 9:\n            goto LABEL_102;\n          case 10:\n            goto LABEL_90;\n          case 11:\n            goto LABEL_101;\n          case 12:\n            goto LABEL_100;\n          case 13:\n            goto LABEL_96;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            goto LABEL_85;\n          case 35:\n          case 126:\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            goto LABEL_17;\n          case 39:\n            goto LABEL_73;\n          case 63:\n            goto LABEL_69;\n          case 92:\n            goto LABEL_87;\n          case 123:\n          case 125:\n            goto LABEL_60;\n          default:\n            goto LABEL_124;\n        }\n      }\n      return sub_401E50(v9, v10, s);\n    }\n    LOBYTE(v26) = *v23;\n    switch ( *v23 )\n    {\n      case 0:\n        if ( !v56 )\n        {\n          if ( v81 & 1 )\n          {\n            ++v21;\n            continue;\n          }\n          if ( !v82 )\n          {\n            ++v21;\n            v11 = v22;\n            LOBYTE(v26) = 0;\n            goto LABEL_144;\n          }\n          v11 = 0;\n          if ( a7 )\n          {\n            v58 = 0;\n            LOBYTE(v26) = 0;\n            goto LABEL_18;\n          }\n          LOBYTE(v26) = 0;\n          goto LABEL_122;\n        }\nLABEL_103:\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        v58 = 0;\nLABEL_105:\n        LOBYTE(v14) = v20 == 2;\n        v33 = v22 ^ 1;\n        LOBYTE(v33) = (v20 == 2) & (v22 ^ 1);\n        if ( (_BYTE)v33 )\n        {\n          if ( v17 < v10 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v34 = v17 + 3;\n          if ( v10 <= v17 + 3 )\n          {\n            v17 += 4LL;\n            ++v21;\n            v22 = v33;\n            LOBYTE(v26) = 48;\n            goto LABEL_82;\n          }\n          v22 = v33;\n        }\n        else\n        {\n          v34 = v17;\n          if ( v17 >= v10 )\n            goto LABEL_115;\n        }\n        *(_BYTE *)(v9 + v34) = 92;\nLABEL_115:\n        v17 = v34 + 1;\n        v35 = v21 + 1;\n        if ( v20 == 2 )\n        {\n          ++v21;\n          LOBYTE(v26) = 48;\n          goto LABEL_82;\n        }\n        LOBYTE(v26) = 48;\n        if ( v35 < v19 && (unsigned __int8)(s[v35] - 48) <= 9u )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 48;\n          if ( v10 > v34 + 2 )\n            *(_BYTE *)(v9 + v34 + 2) = 48;\n          v17 = v34 + 3;\n          LOBYTE(v26) = 48;\n        }\n        goto LABEL_118;\n      case 7:\n        LOBYTE(v26) = 7;\n        v32 = 97;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 8:\n        LOBYTE(v26) = 8;\n        v32 = 98;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 9:\n        LOBYTE(v26) = 9;\n        v32 = 116;\n        goto LABEL_130;\n      case 10:\n        LOBYTE(v26) = 10;\n        v32 = 110;\n        goto LABEL_130;\n      case 11:\n        LOBYTE(v26) = 11;\n        v32 = 118;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 12:\n        LOBYTE(v26) = 12;\n        v32 = 102;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 13:\n        LOBYTE(v26) = 13;\n        v32 = 114;\nLABEL_130:\n        LOBYTE(v14) = v20 == 2;\n        v58 = v20 == 2 && v82;\n        if ( v58 )\n          return sub_401E50(v9, v10, s);\n        goto LABEL_88;\n      case 32:\n      case 33:\n      case 34:\n      case 36:\n      case 38:\n      case 40:\n      case 41:\n      case 42:\n      case 59:\n      case 60:\n      case 61:\n      case 62:\n      case 91:\n      case 94:\n      case 96:\n      case 124:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_64;\n      case 35:\n      case 126:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_63;\n      case 37:\n      case 43:\n      case 44:\n      case 45:\n      case 46:\n      case 47:\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n      case 58:\n      case 65:\n      case 66:\n      case 67:\n      case 68:\n      case 69:\n      case 70:\n      case 71:\n      case 72:\n      case 73:\n      case 74:\n      case 75:\n      case 76:\n      case 77:\n      case 78:\n      case 79:\n      case 80:\n      case 81:\n      case 82:\n      case 83:\n      case 84:\n      case 85:\n      case 86:\n      case 87:\n      case 88:\n      case 89:\n      case 90:\n      case 93:\n      case 95:\n      case 97:\n      case 98:\n      case 99:\n      case 100:\n      case 101:\n      case 102:\n      case 103:\n      case 104:\n      case 105:\n      case 106:\n      case 107:\n      case 108:\n      case 109:\n      case 110:\n      case 111:\n      case 112:\n      case 113:\n      case 114:\n      case 115:\n      case 116:\n      case 117:\n      case 118:\n      case 119:\n      case 120:\n      case 121:\n      case 122:\n        goto LABEL_127;\n      case 39:\nLABEL_73:\n        v14 = 0;\n        LOBYTE(v26) = 39;\n        if ( v20 != 2 )\n          goto LABEL_65;\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 39;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 92;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 39;\n        v17 += 3LL;\n        ++v21;\n        v22 = 0;\n        LOBYTE(v26) = 39;\nLABEL_82:\n        if ( !v58 )\n          goto LABEL_33;\n        goto LABEL_67;\n      case 63:\nLABEL_69:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_401E50(v9, v10, s);\n          v11 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_66;\n        }\n        if ( v20 != 5 )\n        {\n          LOBYTE(v26) = 63;\n          LOBYTE(v14) = v20 == 2;\n          goto LABEL_65;\n        }\n        if ( !(v81 & 4) )\n        {\n          v14 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        v14 = 0;\n        LOBYTE(v26) = 63;\n        if ( v21 + 2 >= v19 || s[v21 + 1] != 63 )\n          goto LABEL_65;\n        v26 = (unsigned __int8)s[v21 + 2];\n        if ( (unsigned __int8)v26 > 0x3Eu || (v40 = 8070630310989004800LL, !_bittest64(&v40, v26)) )\n        {\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 63;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 34;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 34;\n        if ( v10 > v17 + 3 )\n          *(_BYTE *)(v9 + v17 + 3) = 63;\n        v17 += 4LL;\n        v14 = 0;\n        v11 = 0;\n        v21 += 2LL;\nLABEL_118:\n        if ( !v56 || (_BYTE)v14 )\n          goto LABEL_66;\n        if ( a7 )\n          goto LABEL_18;\n        goto LABEL_121;\n      case 92:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_401E50(v9, v10, s);\n          ++v21;\n          v11 = v22;\n          LOBYTE(v26) = 92;\n          goto LABEL_144;\n        }\nLABEL_87:\n        v11 = v82 & v56;\n        LOBYTE(v26) = 92;\n        v32 = 92;\n        v14 = v82 & v56;\n        LOBYTE(v14) = (n != 0) & v14;\n        if ( (_BYTE)v14 )\n        {\n          ++v21;\n          v11 = v22;\n          goto LABEL_144;\n        }\nLABEL_88:\n        if ( !v56 )\n          goto LABEL_65;\n        v27 = v14;\n        LOBYTE(v26) = v32;\n        goto LABEL_20;\n      case 123:\n      case 125:\nLABEL_60:\n        v31 = v19 != 1;\n        if ( v19 == -1LL )\n          v31 = s[1] != 0;\n        LOBYTE(v14) = v20 == 2;\n        if ( v31 )\n          goto LABEL_65;\nLABEL_63:\n        if ( v21 )\n          goto LABEL_65;\nLABEL_64:\n        if ( !((unsigned __int8)v14 & v82) )\n          goto LABEL_65;\n        return sub_401E50(v9, v10, s);\n      default:\nLABEL_124:\n        if ( v80 == 1 )\n        {\n          v74 = v20;\n          v69 = v19;\n          v64 = v22;\n          v36 = __ctype_b_loc();\n          v22 = v64;\n          v19 = v69;\n          v20 = v74;\n          v37 = 1LL;\n          v38 = (*v36)[(unsigned __int8)v26];\n          LOWORD(v38) = (unsigned __int16)v38 >> 14;\n          v14 = v38 ^ 1;\n          LOBYTE(v14) = v56 & v14;\n          goto LABEL_126;\n        }\n        ps = 0LL;\n        if ( v19 == -1LL )\n        {\n          v75 = v20;\n          v70 = v22;\n          v65 = v23;\n          v43 = strlen(s);\n          v20 = v75;\n          LOBYTE(v22) = v70;\n          v23 = v65;\n          v19 = v43;\n        }\n        v84 = v17;\n        v83 = v22;\n        v44 = 0LL;\n        v85 = v23;\n        v76 = v9;\n        v78 = v10;\n        v66 = v19;\n        v71 = v20;\n        break;\n    }\n    break;\n  }\n  while ( 1 )\n  {\n    v45 = v21 + v44;\n    v46 = sub_405190(&wc, &s[v21 + v44], v66 - (v21 + v44), &ps);\n    v47 = v46;\n    switch ( v46 )\n    {\n      case 0LL:\n        v11 ^= 1u;\n        v37 = v44;\n        v9 = v76;\n        v22 = v83;\n        v17 = v84;\n        v10 = v78;\n        v14 = (unsigned __int8)(v11 & v56);\n        v19 = v66;\n        v20 = v71;\n        goto LABEL_252;\n      case -1LL:\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v19 = v66;\n        v20 = v71;\n        v14 = v56;\n        goto LABEL_252;\n      case -2LL:\n        v19 = v66;\n        v52 = v21 + v44;\n        v53 = &s[v21 + v44];\n        v54 = v44;\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v20 = v71;\n        if ( v52 < v66 && *v53 )\n        {\n          do\n            ++v54;\n          while ( v66 > v21 + v54 && v85[v54] );\n          v37 = v54;\n        }\n        v14 = v56;\nLABEL_252:\n        if ( v37 > 1 )\n          goto LABEL_206;\nLABEL_126:\n        if ( (_BYTE)v14 )\n        {\n          v14 = v56;\nLABEL_206:\n          v49 = v21 + v37;\n          v50 = 0;\n          v51 = v58;\n          while ( 1 )\n          {\n            if ( (_BYTE)v14 )\n            {\n              if ( v82 )\n                return sub_401E50(v9, v10, s);\n              if ( (v20 == 2) & ((unsigned __int8)v22 ^ 1) )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 36;\n                if ( v10 > v17 + 2 )\n                  *(_BYTE *)(v9 + v17 + 2) = 39;\n                v17 += 3LL;\n                v22 ^= 1u;\n              }\n              if ( v17 < v10 )\n                *(_BYTE *)(v9 + v17) = 92;\n              if ( v10 > v17 + 1 )\n                *(_BYTE *)(v9 + v17 + 1) = ((unsigned __int8)v26 >> 6) + 48;\n              if ( v10 > v17 + 2 )\n                *(_BYTE *)(v9 + v17 + 2) = (((unsigned __int8)v26 >> 3) & 7) + 48;\n              ++v21;\n              v17 += 3LL;\n              LOBYTE(v26) = (v26 & 7) + 48;\n              if ( v49 <= v21 )\n                goto LABEL_33;\n              v50 = v14;\n            }\n            else\n            {\n              v11 = v22 & (v50 ^ 1);\n              if ( v51 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 92;\n                ++v17;\n              }\n              if ( ++v21 >= v49 )\n                goto LABEL_144;\n              if ( (_BYTE)v11 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 39;\n                v17 += 2LL;\n                v51 = 0;\n                v22 = 0;\n              }\n              else\n              {\n                v51 = 0;\n              }\n            }\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = v26;\n            LOBYTE(v26) = s[v21];\n            ++v17;\n          }\n        }\nLABEL_127:\n        LOBYTE(v14) = v20 == 2;\nLABEL_65:\n        v11 = (v14 | v56 ^ 1) ^ 1;\n        LOBYTE(v11) = v82 | (v14 | v56 ^ 1) ^ 1;\n        if ( v82 | (unsigned __int8)(v14 | v56 ^ 1) ^ 1 )\n        {\nLABEL_17:\n          v11 = 0;\n          if ( a7 )\n          {\nLABEL_18:\n            if ( (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v26 >> 5)) >> v26) & 1 )\n            {\n              v27 = v20 == 2;\nLABEL_20:\n              if ( v82 )\n                return sub_401E50(v9, v10, s);\nLABEL_21:\n              ++v21;\n              goto LABEL_22;\n            }\n          }\nLABEL_121:\n          v27 = v20 == 2;\n          if ( v58 )\n            goto LABEL_20;\nLABEL_122:\n          ++v21;\n          v11 = v22 & (v11 ^ 1);\nLABEL_144:\n          if ( (_BYTE)v11 )\n          {\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = 39;\n            if ( v10 > v17 + 1 )\n              *(_BYTE *)(v9 + v17 + 1) = 39;\n            v17 += 2LL;\n            v22 = 0;\n          }\n          goto LABEL_33;\n        }\nLABEL_66:\n        ++v21;\n        if ( !v58 )\n        {\n          v11 = v22 & (v11 ^ 1);\n          goto LABEL_144;\n        }\nLABEL_67:\n        v27 = v20 == 2;\nLABEL_22:\n        v14 = v22 ^ 1;\n        if ( v27 & ((unsigned __int8)v22 ^ 1) )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v17 += 3LL;\n          LOBYTE(v14) = v27 & (v22 ^ 1);\n          v22 = v14;\n        }\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 92;\n        ++v17;\nLABEL_33:\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = v26;\n        ++v17;\n        goto LABEL_4;\n    }\n    if ( v82 && v71 == 2 && v46 != 1 )\n      break;\nLABEL_187:\n    if ( !iswprint(wc) )\n      v11 = 0;\n    v44 += v47;\n    if ( mbsinit(&ps) )\n    {\n      v37 = v44;\n      v22 = v83;\n      v17 = v84;\n      v14 = v11 ^ 1;\n      v9 = v76;\n      v10 = v78;\n      v19 = v66;\n      v20 = v71;\n      LOBYTE(v14) = v56 & (v11 ^ 1);\n      goto LABEL_252;\n    }\n  }\n  v48 = &s[v45 + 1];\n  while ( (unsigned __int8)(*v48 - 91) > 0x21u || !((1LL << (*v48 - 91)) & 0x20000002BLL) )\n  {\n    if ( &s[v46 + v45] == ++v48 )\n      goto LABEL_187;\n  }\n  v9 = v76;\n  v10 = v78;\n  return sub_401E50(v9, v10, s);\n}\n", 
            "funcStartAddr": "0x4014f0L", 
            "funcEndAddr": "0x4014f5L", 
            "funcName": "sub_401E50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_401E50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  __int64 v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // ebp\n  char v12; // zf\n  size_t v13; // rax\n  int v14; // edx\n  int v15; // er11\n  unsigned __int64 v16; // r10\n  unsigned __int64 v17; // rbx\n  int v18; // eax\n  unsigned __int64 v19; // r11\n  int v20; // er10\n  unsigned __int64 v21; // r13\n  int v22; // er8\n  char *v23; // r9\n  size_t v24; // rax\n  int v25; // eax\n  unsigned __int64 v26; // r12\n  bool v27; // al\n  char *v28; // rax\n  char i; // al\n  size_t v30; // rax\n  bool v31; // al\n  char v32; // cl\n  int v33; // eax\n  __int64 v34; // rcx\n  unsigned __int64 v35; // rax\n  const unsigned __int16 **v36; // rax\n  unsigned __int64 v37; // rcx\n  int v38; // edx\n  unsigned __int64 result; // rax\n  __int64 v40; // rsi\n  char v41; // dl\n  char *v42; // rax\n  size_t v43; // rax\n  unsigned __int64 v44; // rbx\n  unsigned __int64 v45; // r14\n  __int64 v46; // rax\n  __int64 v47; // r15\n  char *v48; // rdx\n  unsigned __int64 v49; // rcx\n  int v50; // eax\n  char v51; // si\n  unsigned __int64 v52; // rsi\n  char *v53; // rdi\n  unsigned __int64 v54; // rax\n  int v55; // [rsp+Ch] [rbp-ACh]\n  unsigned __int8 v56; // [rsp+Ch] [rbp-ACh]\n  unsigned __int64 v57; // [rsp+10h] [rbp-A8h]\n  char v58; // [rsp+10h] [rbp-A8h]\n  unsigned __int64 v59; // [rsp+10h] [rbp-A8h]\n  char *s; // [rsp+18h] [rbp-A0h]\n  size_t n; // [rsp+20h] [rbp-98h]\n  char *v62; // [rsp+28h] [rbp-90h]\n  int v63; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v64; // [rsp+28h] [rbp-90h]\n  char *v65; // [rsp+28h] [rbp-90h]\n  unsigned __int64 v66; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-88h]\n  unsigned __int8 v68; // [rsp+30h] [rbp-88h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-88h]\n  char v70; // [rsp+30h] [rbp-88h]\n  int v71; // [rsp+30h] [rbp-88h]\n  int v72; // [rsp+38h] [rbp-80h]\n  unsigned __int64 v73; // [rsp+38h] [rbp-80h]\n  int v74; // [rsp+38h] [rbp-80h]\n  int v75; // [rsp+38h] [rbp-80h]\n  __int64 v76; // [rsp+38h] [rbp-80h]\n  int v77; // [rsp+40h] [rbp-78h]\n  unsigned __int64 v78; // [rsp+40h] [rbp-78h]\n  char *s2; // [rsp+48h] [rbp-70h]\n  size_t v80; // [rsp+50h] [rbp-68h]\n  char v81; // [rsp+58h] [rbp-60h]\n  bool v82; // [rsp+5Dh] [rbp-5Bh]\n  unsigned __int8 v83; // [rsp+5Eh] [rbp-5Ah]\n  unsigned __int64 v84; // [rsp+60h] [rbp-58h]\n  char *v85; // [rsp+68h] [rbp-50h]\n  wint_t wc; // [rsp+74h] [rbp-44h]\n  mbstate_t ps; // [rsp+78h] [rbp-40h]\n\n  v9 = (__int64)a1;\n  v10 = a2;\n  v11 = a6 & 2;\n  s = a3;\n  v57 = a4;\n  v55 = a5;\n  v81 = a6;\n  v13 = __ctype_get_mb_cur_max();\n  v15 = v55;\n  v80 = v13;\n  v16 = v57;\n  switch ( v55 )\n  {\n    case 0:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v11 )\n      {\n        v56 = 0;\n        goto LABEL_38;\n      }\n      v82 = 1;\n      v17 = 0LL;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      break;\n    case 3:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 2;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      break;\n    case 4:\n      if ( v11 )\n      {\nLABEL_2:\n        v82 = 1;\n        v17 = 0LL;\n        v15 = 2;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n      }\n      else\n      {\n        v56 = 1;\nLABEL_38:\n        if ( a2 )\n          *a1 = 39;\n        v82 = 0;\n        v17 = 1LL;\n        v15 = 2;\n        n = 1LL;\n        s2 = \"'\";\n      }\n      break;\n    case 5:\n      if ( v11 )\n      {\n        v82 = 1;\n        v17 = 0LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n          *a1 = 34;\n        v82 = 0;\n        v17 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      break;\n    case 6:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 5;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      break;\n    case 7:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 8:\n    case 9:\n    case 10:\n      if ( !v12 )\n      {\n        a8 = sub_401D50(\"`\", v55);\n        v28 = sub_401D50(\"'\", v55);\n        v16 = v57;\n        v15 = v55;\n        a9 = v28;\n      }\n      v17 = 0LL;\n      if ( !v11 )\n      {\n        for ( i = *a8; i; i = a8[v17] )\n        {\n          if ( a2 > v17 )\n            a1[v17] = i;\n          ++v17;\n        }\n      }\n      v63 = v15;\n      v59 = v16;\n      v82 = v11 != 0;\n      v30 = strlen(a9);\n      v56 = 1;\n      v16 = v59;\n      n = v30;\n      v15 = v63;\n      s2 = a9;\n      break;\n    default:\n      abort();\n      return result;\n  }\n  v18 = v15;\n  v19 = v16;\n  v20 = v18;\n  v21 = 0LL;\n  v22 = 0;\nLABEL_4:\n  while ( 2 )\n  {\n    LOBYTE(v11) = v19 != v21;\n    if ( v19 == -1LL )\n      LOBYTE(v11) = s[v21] != 0;\n    if ( !(_BYTE)v11 )\n    {\n      if ( v17 == 0 && v82 && v20 == 2 )\n        return sub_401E50(v9, v10, s);\n      if ( s2 )\n      {\n        if ( !v82 )\n        {\n          v41 = *s2;\n          if ( *s2 )\n          {\n            v42 = &s2[-v17];\n            do\n            {\n              if ( v10 > v17 )\n                *(_BYTE *)(v9 + v17) = v41;\n              v41 = v42[++v17];\n            }\n            while ( v41 );\n          }\n        }\n      }\n      if ( v17 < v10 )\n        *(_BYTE *)(v9 + v17) = 0;\n      return v17;\n    }\n    v23 = &s[v21];\n    v58 = v56 & (v20 != 2);\n    if ( v56 & (v20 != 2) )\n    {\n      if ( !n )\n        goto LABEL_271;\n      if ( v19 == -1LL && n > 1 )\n      {\n        v72 = v20;\n        v67 = v22;\n        v24 = strlen(s);\n        v20 = v72;\n        v22 = v67;\n        v23 = &s[v21];\n        v19 = v24;\n      }\n      if ( v21 + n > v19 )\n        goto LABEL_271;\n      v77 = v20;\n      v73 = v19;\n      v68 = v22;\n      v62 = v23;\n      v25 = memcmp(v23, s2, n);\n      v23 = v62;\n      v22 = v68;\n      v19 = v73;\n      v20 = v77;\n      if ( v25 )\n      {\nLABEL_271:\n        LOBYTE(v26) = *v23;\n        switch ( *v23 )\n        {\n          case 0:\n            goto LABEL_103;\n          case 7:\nLABEL_94:\n            LOBYTE(v26) = 97;\n            v27 = 0;\n            goto LABEL_91;\n          case 8:\nLABEL_93:\n            LOBYTE(v26) = 98;\n            v27 = 0;\n            goto LABEL_91;\n          case 9:\nLABEL_102:\n            LOBYTE(v26) = 116;\n            v27 = 0;\n            goto LABEL_91;\n          case 10:\nLABEL_90:\n            LOBYTE(v26) = 110;\n            v27 = 0;\n            goto LABEL_91;\n          case 11:\nLABEL_101:\n            LOBYTE(v26) = 118;\n            v27 = 0;\n            goto LABEL_91;\n          case 12:\nLABEL_100:\n            LOBYTE(v26) = 102;\n            v27 = 0;\nLABEL_91:\n            if ( v82 )\n              return sub_401E50(v9, v10, s);\n            goto LABEL_21;\n          case 13:\n            v58 = 0;\nLABEL_96:\n            LOBYTE(v26) = 13;\n            v32 = 114;\n            LOBYTE(v14) = v20 == 2;\n            goto LABEL_88;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v58 = 0;\nLABEL_85:\n            v14 = 0;\n            goto LABEL_65;\n          case 35:\n          case 126:\n            v58 = 0;\nLABEL_98:\n            if ( v21 )\n              goto LABEL_17;\n            v14 = 0;\n            goto LABEL_65;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v58 = 0;\n            goto LABEL_17;\n          case 39:\n            v58 = 0;\n            goto LABEL_73;\n          case 63:\n            v58 = 0;\n            goto LABEL_69;\n          case 92:\n            v58 = 0;\n            goto LABEL_87;\n          case 123:\n          case 125:\n            v58 = 0;\n            goto LABEL_60;\n          default:\n            v58 = 0;\n            goto LABEL_124;\n        }\n      }\n      if ( !v82 )\n      {\n        LOBYTE(v26) = *v62;\n        switch ( *v62 )\n        {\n          case 0:\n            goto LABEL_105;\n          case 7:\n            goto LABEL_94;\n          case 8:\n            goto LABEL_93;\n          case 9:\n            goto LABEL_102;\n          case 10:\n            goto LABEL_90;\n          case 11:\n            goto LABEL_101;\n          case 12:\n            goto LABEL_100;\n          case 13:\n            goto LABEL_96;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            goto LABEL_85;\n          case 35:\n          case 126:\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            goto LABEL_17;\n          case 39:\n            goto LABEL_73;\n          case 63:\n            goto LABEL_69;\n          case 92:\n            goto LABEL_87;\n          case 123:\n          case 125:\n            goto LABEL_60;\n          default:\n            goto LABEL_124;\n        }\n      }\n      return sub_401E50(v9, v10, s);\n    }\n    LOBYTE(v26) = *v23;\n    switch ( *v23 )\n    {\n      case 0:\n        if ( !v56 )\n        {\n          if ( v81 & 1 )\n          {\n            ++v21;\n            continue;\n          }\n          if ( !v82 )\n          {\n            ++v21;\n            v11 = v22;\n            LOBYTE(v26) = 0;\n            goto LABEL_144;\n          }\n          v11 = 0;\n          if ( a7 )\n          {\n            v58 = 0;\n            LOBYTE(v26) = 0;\n            goto LABEL_18;\n          }\n          LOBYTE(v26) = 0;\n          goto LABEL_122;\n        }\nLABEL_103:\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        v58 = 0;\nLABEL_105:\n        LOBYTE(v14) = v20 == 2;\n        v33 = v22 ^ 1;\n        LOBYTE(v33) = (v20 == 2) & (v22 ^ 1);\n        if ( (_BYTE)v33 )\n        {\n          if ( v17 < v10 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v34 = v17 + 3;\n          if ( v10 <= v17 + 3 )\n          {\n            v17 += 4LL;\n            ++v21;\n            v22 = v33;\n            LOBYTE(v26) = 48;\n            goto LABEL_82;\n          }\n          v22 = v33;\n        }\n        else\n        {\n          v34 = v17;\n          if ( v17 >= v10 )\n            goto LABEL_115;\n        }\n        *(_BYTE *)(v9 + v34) = 92;\nLABEL_115:\n        v17 = v34 + 1;\n        v35 = v21 + 1;\n        if ( v20 == 2 )\n        {\n          ++v21;\n          LOBYTE(v26) = 48;\n          goto LABEL_82;\n        }\n        LOBYTE(v26) = 48;\n        if ( v35 < v19 && (unsigned __int8)(s[v35] - 48) <= 9u )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 48;\n          if ( v10 > v34 + 2 )\n            *(_BYTE *)(v9 + v34 + 2) = 48;\n          v17 = v34 + 3;\n          LOBYTE(v26) = 48;\n        }\n        goto LABEL_118;\n      case 7:\n        LOBYTE(v26) = 7;\n        v32 = 97;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 8:\n        LOBYTE(v26) = 8;\n        v32 = 98;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 9:\n        LOBYTE(v26) = 9;\n        v32 = 116;\n        goto LABEL_130;\n      case 10:\n        LOBYTE(v26) = 10;\n        v32 = 110;\n        goto LABEL_130;\n      case 11:\n        LOBYTE(v26) = 11;\n        v32 = 118;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 12:\n        LOBYTE(v26) = 12;\n        v32 = 102;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 13:\n        LOBYTE(v26) = 13;\n        v32 = 114;\nLABEL_130:\n        LOBYTE(v14) = v20 == 2;\n        v58 = v20 == 2 && v82;\n        if ( v58 )\n          return sub_401E50(v9, v10, s);\n        goto LABEL_88;\n      case 32:\n      case 33:\n      case 34:\n      case 36:\n      case 38:\n      case 40:\n      case 41:\n      case 42:\n      case 59:\n      case 60:\n      case 61:\n      case 62:\n      case 91:\n      case 94:\n      case 96:\n      case 124:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_64;\n      case 35:\n      case 126:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_63;\n      case 37:\n      case 43:\n      case 44:\n      case 45:\n      case 46:\n      case 47:\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n      case 58:\n      case 65:\n      case 66:\n      case 67:\n      case 68:\n      case 69:\n      case 70:\n      case 71:\n      case 72:\n      case 73:\n      case 74:\n      case 75:\n      case 76:\n      case 77:\n      case 78:\n      case 79:\n      case 80:\n      case 81:\n      case 82:\n      case 83:\n      case 84:\n      case 85:\n      case 86:\n      case 87:\n      case 88:\n      case 89:\n      case 90:\n      case 93:\n      case 95:\n      case 97:\n      case 98:\n      case 99:\n      case 100:\n      case 101:\n      case 102:\n      case 103:\n      case 104:\n      case 105:\n      case 106:\n      case 107:\n      case 108:\n      case 109:\n      case 110:\n      case 111:\n      case 112:\n      case 113:\n      case 114:\n      case 115:\n      case 116:\n      case 117:\n      case 118:\n      case 119:\n      case 120:\n      case 121:\n      case 122:\n        goto LABEL_127;\n      case 39:\nLABEL_73:\n        v14 = 0;\n        LOBYTE(v26) = 39;\n        if ( v20 != 2 )\n          goto LABEL_65;\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 39;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 92;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 39;\n        v17 += 3LL;\n        ++v21;\n        v22 = 0;\n        LOBYTE(v26) = 39;\nLABEL_82:\n        if ( !v58 )\n          goto LABEL_33;\n        goto LABEL_67;\n      case 63:\nLABEL_69:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_401E50(v9, v10, s);\n          v11 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_66;\n        }\n        if ( v20 != 5 )\n        {\n          LOBYTE(v26) = 63;\n          LOBYTE(v14) = v20 == 2;\n          goto LABEL_65;\n        }\n        if ( !(v81 & 4) )\n        {\n          v14 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        v14 = 0;\n        LOBYTE(v26) = 63;\n        if ( v21 + 2 >= v19 || s[v21 + 1] != 63 )\n          goto LABEL_65;\n        v26 = (unsigned __int8)s[v21 + 2];\n        if ( (unsigned __int8)v26 > 0x3Eu || (v40 = 8070630310989004800LL, !_bittest64(&v40, v26)) )\n        {\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 63;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 34;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 34;\n        if ( v10 > v17 + 3 )\n          *(_BYTE *)(v9 + v17 + 3) = 63;\n        v17 += 4LL;\n        v14 = 0;\n        v11 = 0;\n        v21 += 2LL;\nLABEL_118:\n        if ( !v56 || (_BYTE)v14 )\n          goto LABEL_66;\n        if ( a7 )\n          goto LABEL_18;\n        goto LABEL_121;\n      case 92:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_401E50(v9, v10, s);\n          ++v21;\n          v11 = v22;\n          LOBYTE(v26) = 92;\n          goto LABEL_144;\n        }\nLABEL_87:\n        v11 = v82 & v56;\n        LOBYTE(v26) = 92;\n        v32 = 92;\n        v14 = v82 & v56;\n        LOBYTE(v14) = (n != 0) & v14;\n        if ( (_BYTE)v14 )\n        {\n          ++v21;\n          v11 = v22;\n          goto LABEL_144;\n        }\nLABEL_88:\n        if ( !v56 )\n          goto LABEL_65;\n        v27 = v14;\n        LOBYTE(v26) = v32;\n        goto LABEL_20;\n      case 123:\n      case 125:\nLABEL_60:\n        v31 = v19 != 1;\n        if ( v19 == -1LL )\n          v31 = s[1] != 0;\n        LOBYTE(v14) = v20 == 2;\n        if ( v31 )\n          goto LABEL_65;\nLABEL_63:\n        if ( v21 )\n          goto LABEL_65;\nLABEL_64:\n        if ( !((unsigned __int8)v14 & v82) )\n          goto LABEL_65;\n        return sub_401E50(v9, v10, s);\n      default:\nLABEL_124:\n        if ( v80 == 1 )\n        {\n          v74 = v20;\n          v69 = v19;\n          v64 = v22;\n          v36 = __ctype_b_loc();\n          v22 = v64;\n          v19 = v69;\n          v20 = v74;\n          v37 = 1LL;\n          v38 = (*v36)[(unsigned __int8)v26];\n          LOWORD(v38) = (unsigned __int16)v38 >> 14;\n          v14 = v38 ^ 1;\n          LOBYTE(v14) = v56 & v14;\n          goto LABEL_126;\n        }\n        ps = 0LL;\n        if ( v19 == -1LL )\n        {\n          v75 = v20;\n          v70 = v22;\n          v65 = v23;\n          v43 = strlen(s);\n          v20 = v75;\n          LOBYTE(v22) = v70;\n          v23 = v65;\n          v19 = v43;\n        }\n        v84 = v17;\n        v83 = v22;\n        v44 = 0LL;\n        v85 = v23;\n        v76 = v9;\n        v78 = v10;\n        v66 = v19;\n        v71 = v20;\n        break;\n    }\n    break;\n  }\n  while ( 1 )\n  {\n    v45 = v21 + v44;\n    v46 = sub_405190(&wc, &s[v21 + v44], v66 - (v21 + v44), &ps);\n    v47 = v46;\n    switch ( v46 )\n    {\n      case 0LL:\n        v11 ^= 1u;\n        v37 = v44;\n        v9 = v76;\n        v22 = v83;\n        v17 = v84;\n        v10 = v78;\n        v14 = (unsigned __int8)(v11 & v56);\n        v19 = v66;\n        v20 = v71;\n        goto LABEL_252;\n      case -1LL:\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v19 = v66;\n        v20 = v71;\n        v14 = v56;\n        goto LABEL_252;\n      case -2LL:\n        v19 = v66;\n        v52 = v21 + v44;\n        v53 = &s[v21 + v44];\n        v54 = v44;\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v20 = v71;\n        if ( v52 < v66 && *v53 )\n        {\n          do\n            ++v54;\n          while ( v66 > v21 + v54 && v85[v54] );\n          v37 = v54;\n        }\n        v14 = v56;\nLABEL_252:\n        if ( v37 > 1 )\n          goto LABEL_206;\nLABEL_126:\n        if ( (_BYTE)v14 )\n        {\n          v14 = v56;\nLABEL_206:\n          v49 = v21 + v37;\n          v50 = 0;\n          v51 = v58;\n          while ( 1 )\n          {\n            if ( (_BYTE)v14 )\n            {\n              if ( v82 )\n                return sub_401E50(v9, v10, s);\n              if ( (v20 == 2) & ((unsigned __int8)v22 ^ 1) )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 36;\n                if ( v10 > v17 + 2 )\n                  *(_BYTE *)(v9 + v17 + 2) = 39;\n                v17 += 3LL;\n                v22 ^= 1u;\n              }\n              if ( v17 < v10 )\n                *(_BYTE *)(v9 + v17) = 92;\n              if ( v10 > v17 + 1 )\n                *(_BYTE *)(v9 + v17 + 1) = ((unsigned __int8)v26 >> 6) + 48;\n              if ( v10 > v17 + 2 )\n                *(_BYTE *)(v9 + v17 + 2) = (((unsigned __int8)v26 >> 3) & 7) + 48;\n              ++v21;\n              v17 += 3LL;\n              LOBYTE(v26) = (v26 & 7) + 48;\n              if ( v49 <= v21 )\n                goto LABEL_33;\n              v50 = v14;\n            }\n            else\n            {\n              v11 = v22 & (v50 ^ 1);\n              if ( v51 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 92;\n                ++v17;\n              }\n              if ( ++v21 >= v49 )\n                goto LABEL_144;\n              if ( (_BYTE)v11 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 39;\n                v17 += 2LL;\n                v51 = 0;\n                v22 = 0;\n              }\n              else\n              {\n                v51 = 0;\n              }\n            }\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = v26;\n            LOBYTE(v26) = s[v21];\n            ++v17;\n          }\n        }\nLABEL_127:\n        LOBYTE(v14) = v20 == 2;\nLABEL_65:\n        v11 = (v14 | v56 ^ 1) ^ 1;\n        LOBYTE(v11) = v82 | (v14 | v56 ^ 1) ^ 1;\n        if ( v82 | (unsigned __int8)(v14 | v56 ^ 1) ^ 1 )\n        {\nLABEL_17:\n          v11 = 0;\n          if ( a7 )\n          {\nLABEL_18:\n            if ( (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v26 >> 5)) >> v26) & 1 )\n            {\n              v27 = v20 == 2;\nLABEL_20:\n              if ( v82 )\n                return sub_401E50(v9, v10, s);\nLABEL_21:\n              ++v21;\n              goto LABEL_22;\n            }\n          }\nLABEL_121:\n          v27 = v20 == 2;\n          if ( v58 )\n            goto LABEL_20;\nLABEL_122:\n          ++v21;\n          v11 = v22 & (v11 ^ 1);\nLABEL_144:\n          if ( (_BYTE)v11 )\n          {\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = 39;\n            if ( v10 > v17 + 1 )\n              *(_BYTE *)(v9 + v17 + 1) = 39;\n            v17 += 2LL;\n            v22 = 0;\n          }\n          goto LABEL_33;\n        }\nLABEL_66:\n        ++v21;\n        if ( !v58 )\n        {\n          v11 = v22 & (v11 ^ 1);\n          goto LABEL_144;\n        }\nLABEL_67:\n        v27 = v20 == 2;\nLABEL_22:\n        v14 = v22 ^ 1;\n        if ( v27 & ((unsigned __int8)v22 ^ 1) )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v17 += 3LL;\n          LOBYTE(v14) = v27 & (v22 ^ 1);\n          v22 = v14;\n        }\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 92;\n        ++v17;\nLABEL_33:\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = v26;\n        ++v17;\n        goto LABEL_4;\n    }\n    if ( v82 && v71 == 2 && v46 != 1 )\n      break;\nLABEL_187:\n    if ( !iswprint(wc) )\n      v11 = 0;\n    v44 += v47;\n    if ( mbsinit(&ps) )\n    {\n      v37 = v44;\n      v22 = v83;\n      v17 = v84;\n      v14 = v11 ^ 1;\n      v9 = v76;\n      v10 = v78;\n      v19 = v66;\n      v20 = v71;\n      LOBYTE(v14) = v56 & (v11 ^ 1);\n      goto LABEL_252;\n    }\n  }\n  v48 = &s[v45 + 1];\n  while ( (unsigned __int8)(*v48 - 91) > 0x21u || !((1LL << (*v48 - 91)) & 0x20000002BLL) )\n  {\n    if ( &s[v46 + v45] == ++v48 )\n      goto LABEL_187;\n  }\n  v9 = v76;\n  v10 = v78;\n  return sub_401E50(v9, v10, s);\n}\n\nunsigned __int64 __fastcall sub_401E50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  __int64 v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // ebp\n  char v12; // zf\n  size_t v13; // rax\n  int v14; // edx\n  int v15; // er11\n  unsigned __int64 v16; // r10\n  unsigned __int64 v17; // rbx\n  int v18; // eax\n  unsigned __int64 v19; // r11\n  int v20; // er10\n  unsigned __int64 v21; // r13\n  int v22; // er8\n  char *v23; // r9\n  size_t v24; // rax\n  int v25; // eax\n  unsigned __int64 v26; // r12\n  bool v27; // al\n  char *v28; // rax\n  char i; // al\n  size_t v30; // rax\n  bool v31; // al\n  char v32; // cl\n  int v33; // eax\n  __int64 v34; // rcx\n  unsigned __int64 v35; // rax\n  const unsigned __int16 **v36; // rax\n  unsigned __int64 v37; // rcx\n  int v38; // edx\n  unsigned __int64 result; // rax\n  __int64 v40; // rsi\n  char v41; // dl\n  char *v42; // rax\n  size_t v43; // rax\n  unsigned __int64 v44; // rbx\n  unsigned __int64 v45; // r14\n  __int64 v46; // rax\n  __int64 v47; // r15\n  char *v48; // rdx\n  unsigned __int64 v49; // rcx\n  int v50; // eax\n  char v51; // si\n  unsigned __int64 v52; // rsi\n  char *v53; // rdi\n  unsigned __int64 v54; // rax\n  int v55; // [rsp+Ch] [rbp-ACh]\n  unsigned __int8 v56; // [rsp+Ch] [rbp-ACh]\n  unsigned __int64 v57; // [rsp+10h] [rbp-A8h]\n  char v58; // [rsp+10h] [rbp-A8h]\n  unsigned __int64 v59; // [rsp+10h] [rbp-A8h]\n  char *s; // [rsp+18h] [rbp-A0h]\n  size_t n; // [rsp+20h] [rbp-98h]\n  char *v62; // [rsp+28h] [rbp-90h]\n  int v63; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v64; // [rsp+28h] [rbp-90h]\n  char *v65; // [rsp+28h] [rbp-90h]\n  unsigned __int64 v66; // [rsp+28h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-88h]\n  unsigned __int8 v68; // [rsp+30h] [rbp-88h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-88h]\n  char v70; // [rsp+30h] [rbp-88h]\n  int v71; // [rsp+30h] [rbp-88h]\n  int v72; // [rsp+38h] [rbp-80h]\n  unsigned __int64 v73; // [rsp+38h] [rbp-80h]\n  int v74; // [rsp+38h] [rbp-80h]\n  int v75; // [rsp+38h] [rbp-80h]\n  __int64 v76; // [rsp+38h] [rbp-80h]\n  int v77; // [rsp+40h] [rbp-78h]\n  unsigned __int64 v78; // [rsp+40h] [rbp-78h]\n  char *s2; // [rsp+48h] [rbp-70h]\n  size_t v80; // [rsp+50h] [rbp-68h]\n  char v81; // [rsp+58h] [rbp-60h]\n  bool v82; // [rsp+5Dh] [rbp-5Bh]\n  unsigned __int8 v83; // [rsp+5Eh] [rbp-5Ah]\n  unsigned __int64 v84; // [rsp+60h] [rbp-58h]\n  char *v85; // [rsp+68h] [rbp-50h]\n  wint_t wc; // [rsp+74h] [rbp-44h]\n  mbstate_t ps; // [rsp+78h] [rbp-40h]\n\n  v9 = (__int64)a1;\n  v10 = a2;\n  v11 = a6 & 2;\n  s = a3;\n  v57 = a4;\n  v55 = a5;\n  v81 = a6;\n  v13 = __ctype_get_mb_cur_max();\n  v15 = v55;\n  v80 = v13;\n  v16 = v57;\n  switch ( v55 )\n  {\n    case 0:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v11 )\n      {\n        v56 = 0;\n        goto LABEL_38;\n      }\n      v82 = 1;\n      v17 = 0LL;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      break;\n    case 3:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 2;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      break;\n    case 4:\n      if ( v11 )\n      {\nLABEL_2:\n        v82 = 1;\n        v17 = 0LL;\n        v15 = 2;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n      }\n      else\n      {\n        v56 = 1;\nLABEL_38:\n        if ( a2 )\n          *a1 = 39;\n        v82 = 0;\n        v17 = 1LL;\n        v15 = 2;\n        n = 1LL;\n        s2 = \"'\";\n      }\n      break;\n    case 5:\n      if ( v11 )\n      {\n        v82 = 1;\n        v17 = 0LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n          *a1 = 34;\n        v82 = 0;\n        v17 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      break;\n    case 6:\n      v82 = 1;\n      v17 = 0LL;\n      v15 = 5;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      break;\n    case 7:\n      v82 = 0;\n      v17 = 0LL;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      break;\n    case 8:\n    case 9:\n    case 10:\n      if ( !v12 )\n      {\n        a8 = sub_401D50(\"`\", v55);\n        v28 = sub_401D50(\"'\", v55);\n        v16 = v57;\n        v15 = v55;\n        a9 = v28;\n      }\n      v17 = 0LL;\n      if ( !v11 )\n      {\n        for ( i = *a8; i; i = a8[v17] )\n        {\n          if ( a2 > v17 )\n            a1[v17] = i;\n          ++v17;\n        }\n      }\n      v63 = v15;\n      v59 = v16;\n      v82 = v11 != 0;\n      v30 = strlen(a9);\n      v56 = 1;\n      v16 = v59;\n      n = v30;\n      v15 = v63;\n      s2 = a9;\n      break;\n    default:\n      abort();\n      return result;\n  }\n  v18 = v15;\n  v19 = v16;\n  v20 = v18;\n  v21 = 0LL;\n  v22 = 0;\nLABEL_4:\n  while ( 2 )\n  {\n    LOBYTE(v11) = v19 != v21;\n    if ( v19 == -1LL )\n      LOBYTE(v11) = s[v21] != 0;\n    if ( !(_BYTE)v11 )\n    {\n      if ( v17 == 0 && v82 && v20 == 2 )\n        return sub_401E50(v9, v10, s);\n      if ( s2 )\n      {\n        if ( !v82 )\n        {\n          v41 = *s2;\n          if ( *s2 )\n          {\n            v42 = &s2[-v17];\n            do\n            {\n              if ( v10 > v17 )\n                *(_BYTE *)(v9 + v17) = v41;\n              v41 = v42[++v17];\n            }\n            while ( v41 );\n          }\n        }\n      }\n      if ( v17 < v10 )\n        *(_BYTE *)(v9 + v17) = 0;\n      return v17;\n    }\n    v23 = &s[v21];\n    v58 = v56 & (v20 != 2);\n    if ( v56 & (v20 != 2) )\n    {\n      if ( !n )\n        goto LABEL_271;\n      if ( v19 == -1LL && n > 1 )\n      {\n        v72 = v20;\n        v67 = v22;\n        v24 = strlen(s);\n        v20 = v72;\n        v22 = v67;\n        v23 = &s[v21];\n        v19 = v24;\n      }\n      if ( v21 + n > v19 )\n        goto LABEL_271;\n      v77 = v20;\n      v73 = v19;\n      v68 = v22;\n      v62 = v23;\n      v25 = memcmp(v23, s2, n);\n      v23 = v62;\n      v22 = v68;\n      v19 = v73;\n      v20 = v77;\n      if ( v25 )\n      {\nLABEL_271:\n        LOBYTE(v26) = *v23;\n        switch ( *v23 )\n        {\n          case 0:\n            goto LABEL_103;\n          case 7:\nLABEL_94:\n            LOBYTE(v26) = 97;\n            v27 = 0;\n            goto LABEL_91;\n          case 8:\nLABEL_93:\n            LOBYTE(v26) = 98;\n            v27 = 0;\n            goto LABEL_91;\n          case 9:\nLABEL_102:\n            LOBYTE(v26) = 116;\n            v27 = 0;\n            goto LABEL_91;\n          case 10:\nLABEL_90:\n            LOBYTE(v26) = 110;\n            v27 = 0;\n            goto LABEL_91;\n          case 11:\nLABEL_101:\n            LOBYTE(v26) = 118;\n            v27 = 0;\n            goto LABEL_91;\n          case 12:\nLABEL_100:\n            LOBYTE(v26) = 102;\n            v27 = 0;\nLABEL_91:\n            if ( v82 )\n              return sub_401E50(v9, v10, s);\n            goto LABEL_21;\n          case 13:\n            v58 = 0;\nLABEL_96:\n            LOBYTE(v26) = 13;\n            v32 = 114;\n            LOBYTE(v14) = v20 == 2;\n            goto LABEL_88;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v58 = 0;\nLABEL_85:\n            v14 = 0;\n            goto LABEL_65;\n          case 35:\n          case 126:\n            v58 = 0;\nLABEL_98:\n            if ( v21 )\n              goto LABEL_17;\n            v14 = 0;\n            goto LABEL_65;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v58 = 0;\n            goto LABEL_17;\n          case 39:\n            v58 = 0;\n            goto LABEL_73;\n          case 63:\n            v58 = 0;\n            goto LABEL_69;\n          case 92:\n            v58 = 0;\n            goto LABEL_87;\n          case 123:\n          case 125:\n            v58 = 0;\n            goto LABEL_60;\n          default:\n            v58 = 0;\n            goto LABEL_124;\n        }\n      }\n      if ( !v82 )\n      {\n        LOBYTE(v26) = *v62;\n        switch ( *v62 )\n        {\n          case 0:\n            goto LABEL_105;\n          case 7:\n            goto LABEL_94;\n          case 8:\n            goto LABEL_93;\n          case 9:\n            goto LABEL_102;\n          case 10:\n            goto LABEL_90;\n          case 11:\n            goto LABEL_101;\n          case 12:\n            goto LABEL_100;\n          case 13:\n            goto LABEL_96;\n          case 32:\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            goto LABEL_85;\n          case 35:\n          case 126:\n            goto LABEL_98;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            goto LABEL_17;\n          case 39:\n            goto LABEL_73;\n          case 63:\n            goto LABEL_69;\n          case 92:\n            goto LABEL_87;\n          case 123:\n          case 125:\n            goto LABEL_60;\n          default:\n            goto LABEL_124;\n        }\n      }\n      return sub_401E50(v9, v10, s);\n    }\n    LOBYTE(v26) = *v23;\n    switch ( *v23 )\n    {\n      case 0:\n        if ( !v56 )\n        {\n          if ( v81 & 1 )\n          {\n            ++v21;\n            continue;\n          }\n          if ( !v82 )\n          {\n            ++v21;\n            v11 = v22;\n            LOBYTE(v26) = 0;\n            goto LABEL_144;\n          }\n          v11 = 0;\n          if ( a7 )\n          {\n            v58 = 0;\n            LOBYTE(v26) = 0;\n            goto LABEL_18;\n          }\n          LOBYTE(v26) = 0;\n          goto LABEL_122;\n        }\nLABEL_103:\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        v58 = 0;\nLABEL_105:\n        LOBYTE(v14) = v20 == 2;\n        v33 = v22 ^ 1;\n        LOBYTE(v33) = (v20 == 2) & (v22 ^ 1);\n        if ( (_BYTE)v33 )\n        {\n          if ( v17 < v10 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v34 = v17 + 3;\n          if ( v10 <= v17 + 3 )\n          {\n            v17 += 4LL;\n            ++v21;\n            v22 = v33;\n            LOBYTE(v26) = 48;\n            goto LABEL_82;\n          }\n          v22 = v33;\n        }\n        else\n        {\n          v34 = v17;\n          if ( v17 >= v10 )\n            goto LABEL_115;\n        }\n        *(_BYTE *)(v9 + v34) = 92;\nLABEL_115:\n        v17 = v34 + 1;\n        v35 = v21 + 1;\n        if ( v20 == 2 )\n        {\n          ++v21;\n          LOBYTE(v26) = 48;\n          goto LABEL_82;\n        }\n        LOBYTE(v26) = 48;\n        if ( v35 < v19 && (unsigned __int8)(s[v35] - 48) <= 9u )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 48;\n          if ( v10 > v34 + 2 )\n            *(_BYTE *)(v9 + v34 + 2) = 48;\n          v17 = v34 + 3;\n          LOBYTE(v26) = 48;\n        }\n        goto LABEL_118;\n      case 7:\n        LOBYTE(v26) = 7;\n        v32 = 97;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 8:\n        LOBYTE(v26) = 8;\n        v32 = 98;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 9:\n        LOBYTE(v26) = 9;\n        v32 = 116;\n        goto LABEL_130;\n      case 10:\n        LOBYTE(v26) = 10;\n        v32 = 110;\n        goto LABEL_130;\n      case 11:\n        LOBYTE(v26) = 11;\n        v32 = 118;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 12:\n        LOBYTE(v26) = 12;\n        v32 = 102;\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_88;\n      case 13:\n        LOBYTE(v26) = 13;\n        v32 = 114;\nLABEL_130:\n        LOBYTE(v14) = v20 == 2;\n        v58 = v20 == 2 && v82;\n        if ( v58 )\n          return sub_401E50(v9, v10, s);\n        goto LABEL_88;\n      case 32:\n      case 33:\n      case 34:\n      case 36:\n      case 38:\n      case 40:\n      case 41:\n      case 42:\n      case 59:\n      case 60:\n      case 61:\n      case 62:\n      case 91:\n      case 94:\n      case 96:\n      case 124:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_64;\n      case 35:\n      case 126:\n        LOBYTE(v14) = v20 == 2;\n        goto LABEL_63;\n      case 37:\n      case 43:\n      case 44:\n      case 45:\n      case 46:\n      case 47:\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n      case 58:\n      case 65:\n      case 66:\n      case 67:\n      case 68:\n      case 69:\n      case 70:\n      case 71:\n      case 72:\n      case 73:\n      case 74:\n      case 75:\n      case 76:\n      case 77:\n      case 78:\n      case 79:\n      case 80:\n      case 81:\n      case 82:\n      case 83:\n      case 84:\n      case 85:\n      case 86:\n      case 87:\n      case 88:\n      case 89:\n      case 90:\n      case 93:\n      case 95:\n      case 97:\n      case 98:\n      case 99:\n      case 100:\n      case 101:\n      case 102:\n      case 103:\n      case 104:\n      case 105:\n      case 106:\n      case 107:\n      case 108:\n      case 109:\n      case 110:\n      case 111:\n      case 112:\n      case 113:\n      case 114:\n      case 115:\n      case 116:\n      case 117:\n      case 118:\n      case 119:\n      case 120:\n      case 121:\n      case 122:\n        goto LABEL_127;\n      case 39:\nLABEL_73:\n        v14 = 0;\n        LOBYTE(v26) = 39;\n        if ( v20 != 2 )\n          goto LABEL_65;\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 39;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 92;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 39;\n        v17 += 3LL;\n        ++v21;\n        v22 = 0;\n        LOBYTE(v26) = 39;\nLABEL_82:\n        if ( !v58 )\n          goto LABEL_33;\n        goto LABEL_67;\n      case 63:\nLABEL_69:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_401E50(v9, v10, s);\n          v11 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_66;\n        }\n        if ( v20 != 5 )\n        {\n          LOBYTE(v26) = 63;\n          LOBYTE(v14) = v20 == 2;\n          goto LABEL_65;\n        }\n        if ( !(v81 & 4) )\n        {\n          v14 = 0;\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        v14 = 0;\n        LOBYTE(v26) = 63;\n        if ( v21 + 2 >= v19 || s[v21 + 1] != 63 )\n          goto LABEL_65;\n        v26 = (unsigned __int8)s[v21 + 2];\n        if ( (unsigned __int8)v26 > 0x3Eu || (v40 = 8070630310989004800LL, !_bittest64(&v40, v26)) )\n        {\n          LOBYTE(v26) = 63;\n          goto LABEL_65;\n        }\n        if ( v82 )\n          return sub_401E50(v9, v10, s);\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 63;\n        if ( v10 > v17 + 1 )\n          *(_BYTE *)(v9 + v17 + 1) = 34;\n        if ( v10 > v17 + 2 )\n          *(_BYTE *)(v9 + v17 + 2) = 34;\n        if ( v10 > v17 + 3 )\n          *(_BYTE *)(v9 + v17 + 3) = 63;\n        v17 += 4LL;\n        v14 = 0;\n        v11 = 0;\n        v21 += 2LL;\nLABEL_118:\n        if ( !v56 || (_BYTE)v14 )\n          goto LABEL_66;\n        if ( a7 )\n          goto LABEL_18;\n        goto LABEL_121;\n      case 92:\n        if ( v20 == 2 )\n        {\n          if ( v82 )\n            return sub_401E50(v9, v10, s);\n          ++v21;\n          v11 = v22;\n          LOBYTE(v26) = 92;\n          goto LABEL_144;\n        }\nLABEL_87:\n        v11 = v82 & v56;\n        LOBYTE(v26) = 92;\n        v32 = 92;\n        v14 = v82 & v56;\n        LOBYTE(v14) = (n != 0) & v14;\n        if ( (_BYTE)v14 )\n        {\n          ++v21;\n          v11 = v22;\n          goto LABEL_144;\n        }\nLABEL_88:\n        if ( !v56 )\n          goto LABEL_65;\n        v27 = v14;\n        LOBYTE(v26) = v32;\n        goto LABEL_20;\n      case 123:\n      case 125:\nLABEL_60:\n        v31 = v19 != 1;\n        if ( v19 == -1LL )\n          v31 = s[1] != 0;\n        LOBYTE(v14) = v20 == 2;\n        if ( v31 )\n          goto LABEL_65;\nLABEL_63:\n        if ( v21 )\n          goto LABEL_65;\nLABEL_64:\n        if ( !((unsigned __int8)v14 & v82) )\n          goto LABEL_65;\n        return sub_401E50(v9, v10, s);\n      default:\nLABEL_124:\n        if ( v80 == 1 )\n        {\n          v74 = v20;\n          v69 = v19;\n          v64 = v22;\n          v36 = __ctype_b_loc();\n          v22 = v64;\n          v19 = v69;\n          v20 = v74;\n          v37 = 1LL;\n          v38 = (*v36)[(unsigned __int8)v26];\n          LOWORD(v38) = (unsigned __int16)v38 >> 14;\n          v14 = v38 ^ 1;\n          LOBYTE(v14) = v56 & v14;\n          goto LABEL_126;\n        }\n        ps = 0LL;\n        if ( v19 == -1LL )\n        {\n          v75 = v20;\n          v70 = v22;\n          v65 = v23;\n          v43 = strlen(s);\n          v20 = v75;\n          LOBYTE(v22) = v70;\n          v23 = v65;\n          v19 = v43;\n        }\n        v84 = v17;\n        v83 = v22;\n        v44 = 0LL;\n        v85 = v23;\n        v76 = v9;\n        v78 = v10;\n        v66 = v19;\n        v71 = v20;\n        break;\n    }\n    break;\n  }\n  while ( 1 )\n  {\n    v45 = v21 + v44;\n    v46 = sub_405190(&wc, &s[v21 + v44], v66 - (v21 + v44), &ps);\n    v47 = v46;\n    switch ( v46 )\n    {\n      case 0LL:\n        v11 ^= 1u;\n        v37 = v44;\n        v9 = v76;\n        v22 = v83;\n        v17 = v84;\n        v10 = v78;\n        v14 = (unsigned __int8)(v11 & v56);\n        v19 = v66;\n        v20 = v71;\n        goto LABEL_252;\n      case -1LL:\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v19 = v66;\n        v20 = v71;\n        v14 = v56;\n        goto LABEL_252;\n      case -2LL:\n        v19 = v66;\n        v52 = v21 + v44;\n        v53 = &s[v21 + v44];\n        v54 = v44;\n        v37 = v44;\n        v22 = v83;\n        v17 = v84;\n        v9 = v76;\n        v10 = v78;\n        v20 = v71;\n        if ( v52 < v66 && *v53 )\n        {\n          do\n            ++v54;\n          while ( v66 > v21 + v54 && v85[v54] );\n          v37 = v54;\n        }\n        v14 = v56;\nLABEL_252:\n        if ( v37 > 1 )\n          goto LABEL_206;\nLABEL_126:\n        if ( (_BYTE)v14 )\n        {\n          v14 = v56;\nLABEL_206:\n          v49 = v21 + v37;\n          v50 = 0;\n          v51 = v58;\n          while ( 1 )\n          {\n            if ( (_BYTE)v14 )\n            {\n              if ( v82 )\n                return sub_401E50(v9, v10, s);\n              if ( (v20 == 2) & ((unsigned __int8)v22 ^ 1) )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 36;\n                if ( v10 > v17 + 2 )\n                  *(_BYTE *)(v9 + v17 + 2) = 39;\n                v17 += 3LL;\n                v22 ^= 1u;\n              }\n              if ( v17 < v10 )\n                *(_BYTE *)(v9 + v17) = 92;\n              if ( v10 > v17 + 1 )\n                *(_BYTE *)(v9 + v17 + 1) = ((unsigned __int8)v26 >> 6) + 48;\n              if ( v10 > v17 + 2 )\n                *(_BYTE *)(v9 + v17 + 2) = (((unsigned __int8)v26 >> 3) & 7) + 48;\n              ++v21;\n              v17 += 3LL;\n              LOBYTE(v26) = (v26 & 7) + 48;\n              if ( v49 <= v21 )\n                goto LABEL_33;\n              v50 = v14;\n            }\n            else\n            {\n              v11 = v22 & (v50 ^ 1);\n              if ( v51 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 92;\n                ++v17;\n              }\n              if ( ++v21 >= v49 )\n                goto LABEL_144;\n              if ( (_BYTE)v11 )\n              {\n                if ( v17 < v10 )\n                  *(_BYTE *)(v9 + v17) = 39;\n                if ( v10 > v17 + 1 )\n                  *(_BYTE *)(v9 + v17 + 1) = 39;\n                v17 += 2LL;\n                v51 = 0;\n                v22 = 0;\n              }\n              else\n              {\n                v51 = 0;\n              }\n            }\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = v26;\n            LOBYTE(v26) = s[v21];\n            ++v17;\n          }\n        }\nLABEL_127:\n        LOBYTE(v14) = v20 == 2;\nLABEL_65:\n        v11 = (v14 | v56 ^ 1) ^ 1;\n        LOBYTE(v11) = v82 | (v14 | v56 ^ 1) ^ 1;\n        if ( v82 | (unsigned __int8)(v14 | v56 ^ 1) ^ 1 )\n        {\nLABEL_17:\n          v11 = 0;\n          if ( a7 )\n          {\nLABEL_18:\n            if ( (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v26 >> 5)) >> v26) & 1 )\n            {\n              v27 = v20 == 2;\nLABEL_20:\n              if ( v82 )\n                return sub_401E50(v9, v10, s);\nLABEL_21:\n              ++v21;\n              goto LABEL_22;\n            }\n          }\nLABEL_121:\n          v27 = v20 == 2;\n          if ( v58 )\n            goto LABEL_20;\nLABEL_122:\n          ++v21;\n          v11 = v22 & (v11 ^ 1);\nLABEL_144:\n          if ( (_BYTE)v11 )\n          {\n            if ( v17 < v10 )\n              *(_BYTE *)(v9 + v17) = 39;\n            if ( v10 > v17 + 1 )\n              *(_BYTE *)(v9 + v17 + 1) = 39;\n            v17 += 2LL;\n            v22 = 0;\n          }\n          goto LABEL_33;\n        }\nLABEL_66:\n        ++v21;\n        if ( !v58 )\n        {\n          v11 = v22 & (v11 ^ 1);\n          goto LABEL_144;\n        }\nLABEL_67:\n        v27 = v20 == 2;\nLABEL_22:\n        v14 = v22 ^ 1;\n        if ( v27 & ((unsigned __int8)v22 ^ 1) )\n        {\n          if ( v10 > v17 )\n            *(_BYTE *)(v9 + v17) = 39;\n          if ( v10 > v17 + 1 )\n            *(_BYTE *)(v9 + v17 + 1) = 36;\n          if ( v10 > v17 + 2 )\n            *(_BYTE *)(v9 + v17 + 2) = 39;\n          v17 += 3LL;\n          LOBYTE(v14) = v27 & (v22 ^ 1);\n          v22 = v14;\n        }\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = 92;\n        ++v17;\nLABEL_33:\n        if ( v17 < v10 )\n          *(_BYTE *)(v9 + v17) = v26;\n        ++v17;\n        goto LABEL_4;\n    }\n    if ( v82 && v71 == 2 && v46 != 1 )\n      break;\nLABEL_187:\n    if ( !iswprint(wc) )\n      v11 = 0;\n    v44 += v47;\n    if ( mbsinit(&ps) )\n    {\n      v37 = v44;\n      v22 = v83;\n      v17 = v84;\n      v14 = v11 ^ 1;\n      v9 = v76;\n      v10 = v78;\n      v19 = v66;\n      v20 = v71;\n      LOBYTE(v14) = v56 & (v11 ^ 1);\n      goto LABEL_252;\n    }\n  }\n  v48 = &s[v45 + 1];\n  while ( (unsigned __int8)(*v48 - 91) > 0x21u || !((1LL << (*v48 - 91)) & 0x20000002BLL) )\n  {\n    if ( &s[v46 + v45] == ++v48 )\n      goto LABEL_187;\n  }\n  v9 = v76;\n  v10 = v78;\n  return sub_401E50(v9, v10, s);\n}\n", 
            "funcStartAddr": "0x4014f0L", 
            "funcEndAddr": "0x4014f5L", 
            "funcName": "sub_401E50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_402E60(signed int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  __int128 *v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 *v12; // rbx\n  _BYTE *v13; // r12\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rsi\n  _BYTE *v16; // rax\n  int v17; // er8\n  __int128 *v19; // rax\n  char *v20; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v21; // [rsp+10h] [rbp-48h]\n  __int64 v22; // [rsp+10h] [rbp-48h]\n  int v23; // [rsp+18h] [rbp-40h]\n  int v24; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v20 = a2;\n  v6 = __errno_location();\n  v7 = off_6081F8;\n  v8 = v6;\n  v23 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_608210 <= (unsigned int)a1 )\n  {\n    v9 = 16LL * (unsigned int)(a1 + 1);\n    if ( off_6081F8 == &xmmword_608200 )\n    {\n      v19 = (__int128 *)sub_403CC0(0LL, v9);\n      v11 = (unsigned int)(a1 + 1);\n      v7 = v19;\n      off_6081F8 = v19;\n      *v19 = (__int128)_mm_load_si128((const __m128i *)&xmmword_608200);\n    }\n    else\n    {\n      v10 = (__int128 *)sub_403CC0(off_6081F8, v9);\n      v11 = (unsigned int)(a1 + 1);\n      off_6081F8 = v10;\n      v7 = v10;\n    }\n    memset(&v7[dword_608210], 0, 16 * (v11 - (unsigned int)dword_608210));\n    dword_608210 = a1 + 1;\n  }\n  v12 = (unsigned __int64 *)&v7[a1];\n  v13 = (_BYTE *)v12[1];\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v21 = *v12;\n  v14 = sub_401E50(v13, *v12, v20, v4, *(_DWORD *)v5, v24, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v21 <= v14 )\n  {\n    v15 = v14 + 1;\n    *v12 = v14 + 1;\n    if ( v13 != (_BYTE *)&unk_608280 )\n    {\n      v22 = v14 + 1;\n      free(v13);\n      v15 = v22;\n    }\n    v16 = (_BYTE *)sub_403C70(v15);\n    v17 = *(_DWORD *)v5;\n    v12[1] = (unsigned __int64)v16;\n    v13 = v16;\n    sub_401E50(v16, v15, v20, v4, v17, v24, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v23;\n  return v13;\n}\n\n_BYTE *__fastcall sub_402E60(signed int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  __int128 *v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 *v12; // rbx\n  _BYTE *v13; // r12\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rsi\n  _BYTE *v16; // rax\n  int v17; // er8\n  __int128 *v19; // rax\n  char *v20; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v21; // [rsp+10h] [rbp-48h]\n  __int64 v22; // [rsp+10h] [rbp-48h]\n  int v23; // [rsp+18h] [rbp-40h]\n  int v24; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v20 = a2;\n  v6 = __errno_location();\n  v7 = off_6081F8;\n  v8 = v6;\n  v23 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_608210 <= (unsigned int)a1 )\n  {\n    v9 = 16LL * (unsigned int)(a1 + 1);\n    if ( off_6081F8 == &xmmword_608200 )\n    {\n      v19 = (__int128 *)sub_403CC0(0LL, v9);\n      v11 = (unsigned int)(a1 + 1);\n      v7 = v19;\n      off_6081F8 = v19;\n      *v19 = (__int128)_mm_load_si128((const __m128i *)&xmmword_608200);\n    }\n    else\n    {\n      v10 = (__int128 *)sub_403CC0(off_6081F8, v9);\n      v11 = (unsigned int)(a1 + 1);\n      off_6081F8 = v10;\n      v7 = v10;\n    }\n    memset(&v7[dword_608210], 0, 16 * (v11 - (unsigned int)dword_608210));\n    dword_608210 = a1 + 1;\n  }\n  v12 = (unsigned __int64 *)&v7[a1];\n  v13 = (_BYTE *)v12[1];\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v21 = *v12;\n  v14 = sub_401E50(v13, *v12, v20, v4, *(_DWORD *)v5, v24, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v21 <= v14 )\n  {\n    v15 = v14 + 1;\n    *v12 = v14 + 1;\n    if ( v13 != (_BYTE *)&unk_608280 )\n    {\n      v22 = v14 + 1;\n      free(v13);\n      v15 = v22;\n    }\n    v16 = (_BYTE *)sub_403C70(v15);\n    v17 = *(_DWORD *)v5;\n    v12[1] = (unsigned __int64)v16;\n    v13 = v16;\n    sub_401E50(v16, v15, v20, v4, v17, v24, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v23;\n  return v13;\n}\n", 
            "funcStartAddr": "0x4014f5L", 
            "funcEndAddr": "0x4014faL", 
            "funcName": "sub_402E60"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_402E60(signed int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  __int128 *v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 *v12; // rbx\n  _BYTE *v13; // r12\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rsi\n  _BYTE *v16; // rax\n  int v17; // er8\n  __int128 *v19; // rax\n  char *v20; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v21; // [rsp+10h] [rbp-48h]\n  __int64 v22; // [rsp+10h] [rbp-48h]\n  int v23; // [rsp+18h] [rbp-40h]\n  int v24; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v20 = a2;\n  v6 = __errno_location();\n  v7 = off_6081F8;\n  v8 = v6;\n  v23 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_608210 <= (unsigned int)a1 )\n  {\n    v9 = 16LL * (unsigned int)(a1 + 1);\n    if ( off_6081F8 == &xmmword_608200 )\n    {\n      v19 = (__int128 *)sub_403CC0(0LL, v9);\n      v11 = (unsigned int)(a1 + 1);\n      v7 = v19;\n      off_6081F8 = v19;\n      *v19 = (__int128)_mm_load_si128((const __m128i *)&xmmword_608200);\n    }\n    else\n    {\n      v10 = (__int128 *)sub_403CC0(off_6081F8, v9);\n      v11 = (unsigned int)(a1 + 1);\n      off_6081F8 = v10;\n      v7 = v10;\n    }\n    memset(&v7[dword_608210], 0, 16 * (v11 - (unsigned int)dword_608210));\n    dword_608210 = a1 + 1;\n  }\n  v12 = (unsigned __int64 *)&v7[a1];\n  v13 = (_BYTE *)v12[1];\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v21 = *v12;\n  v14 = sub_401E50(v13, *v12, v20, v4, *(_DWORD *)v5, v24, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v21 <= v14 )\n  {\n    v15 = v14 + 1;\n    *v12 = v14 + 1;\n    if ( v13 != (_BYTE *)&unk_608280 )\n    {\n      v22 = v14 + 1;\n      free(v13);\n      v15 = v22;\n    }\n    v16 = (_BYTE *)sub_403C70(v15);\n    v17 = *(_DWORD *)v5;\n    v12[1] = (unsigned __int64)v16;\n    v13 = v16;\n    sub_401E50(v16, v15, v20, v4, v17, v24, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v23;\n  return v13;\n}\n\n_BYTE *__fastcall sub_402E60(signed int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  __int128 *v10; // rax\n  __int64 v11; // rdx\n  unsigned __int64 *v12; // rbx\n  _BYTE *v13; // r12\n  unsigned __int64 v14; // rax\n  unsigned __int64 v15; // rsi\n  _BYTE *v16; // rax\n  int v17; // er8\n  __int128 *v19; // rax\n  char *v20; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v21; // [rsp+10h] [rbp-48h]\n  __int64 v22; // [rsp+10h] [rbp-48h]\n  int v23; // [rsp+18h] [rbp-40h]\n  int v24; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v20 = a2;\n  v6 = __errno_location();\n  v7 = off_6081F8;\n  v8 = v6;\n  v23 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_608210 <= (unsigned int)a1 )\n  {\n    v9 = 16LL * (unsigned int)(a1 + 1);\n    if ( off_6081F8 == &xmmword_608200 )\n    {\n      v19 = (__int128 *)sub_403CC0(0LL, v9);\n      v11 = (unsigned int)(a1 + 1);\n      v7 = v19;\n      off_6081F8 = v19;\n      *v19 = (__int128)_mm_load_si128((const __m128i *)&xmmword_608200);\n    }\n    else\n    {\n      v10 = (__int128 *)sub_403CC0(off_6081F8, v9);\n      v11 = (unsigned int)(a1 + 1);\n      off_6081F8 = v10;\n      v7 = v10;\n    }\n    memset(&v7[dword_608210], 0, 16 * (v11 - (unsigned int)dword_608210));\n    dword_608210 = a1 + 1;\n  }\n  v12 = (unsigned __int64 *)&v7[a1];\n  v13 = (_BYTE *)v12[1];\n  v24 = *(_DWORD *)(v5 + 4) | 1;\n  v21 = *v12;\n  v14 = sub_401E50(v13, *v12, v20, v4, *(_DWORD *)v5, v24, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v21 <= v14 )\n  {\n    v15 = v14 + 1;\n    *v12 = v14 + 1;\n    if ( v13 != (_BYTE *)&unk_608280 )\n    {\n      v22 = v14 + 1;\n      free(v13);\n      v15 = v22;\n    }\n    v16 = (_BYTE *)sub_403C70(v15);\n    v17 = *(_DWORD *)v5;\n    v12[1] = (unsigned __int64)v16;\n    v13 = v16;\n    sub_401E50(v16, v15, v20, v4, v17, v24, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v23;\n  return v13;\n}\n", 
            "funcStartAddr": "0x4014f5L", 
            "funcEndAddr": "0x4014faL", 
            "funcName": "sub_402E60"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_403380(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_402E60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_403380(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_402E60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x4014faL", 
            "funcEndAddr": "0x4014ffL", 
            "funcName": "sub_403380"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_403380(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_402E60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_403380(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_402E60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x4014faL", 
            "funcEndAddr": "0x4014ffL", 
            "funcName": "sub_403380"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4033F0(signed int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_402E60(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_4033F0(signed int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_402E60(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x4014ffL", 
            "funcEndAddr": "0x401504L", 
            "funcName": "sub_4033F0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4033F0(signed int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_402E60(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_4033F0(signed int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_402E60(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x4014ffL", 
            "funcEndAddr": "0x401504L", 
            "funcName": "sub_4033F0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_403480(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_6083B0;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_608380);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_608390);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_6083A0);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_402E60(0, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x403480L", 
            "funcEndAddr": "0x4034f0L", 
            "funcName": "sub_403480"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_403500(char *a1)\n{\n  return sub_403480(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x403500L", 
            "funcEndAddr": "0x403511L", 
            "funcName": "sub_403500"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_403530(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_402E60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_403530(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_402E60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401504L", 
            "funcEndAddr": "0x401509L", 
            "funcName": "sub_403530"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_403530(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_402E60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_403530(signed int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_402E60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401504L", 
            "funcEndAddr": "0x401509L", 
            "funcName": "sub_403530"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4035A0(signed int a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_608380);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_608390);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_6083A0);\n  v9 = qword_6083B0;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_402E60(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x4035a0L", 
            "funcEndAddr": "0x40360cL", 
            "funcName": "sub_4035A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4036D0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // r14\n  __int64 v11; // r13\n  __int64 v12; // r12\n  __int64 v13; // r15\n  __int64 v14; // r8\n  __int64 v15; // rcx\n  __int64 v16; // rbx\n  char *v17; // rax\n  int result; // eax\n  const char *v19; // rsi\n  __int64 v20; // rcx\n  __int64 v21; // r14\n  __int64 v22; // r13\n  __int64 v23; // r12\n  __int64 v24; // r15\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // rcx\n  __int64 v48; // r15\n  __int64 v49; // r14\n  __int64 v50; // r13\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // r13\n  __int64 v54; // r12\n  __int64 v55; // r15\n  __int64 v56; // r14\n  __int64 v57; // rbx\n  char *v58; // rax\n  __int64 v59; // rcx\n  int v60; // [rsp-10h] [rbp-68h]\n  __int64 v61; // [rsp+0h] [rbp-58h]\n  __int64 v62; // [rsp+0h] [rbp-58h]\n  __int64 v63; // [rsp+0h] [rbp-58h]\n  __int64 v64; // [rsp+0h] [rbp-58h]\n  __int64 v65; // [rsp+8h] [rbp-50h]\n  __int64 v66; // [rsp+8h] [rbp-50h]\n  __int64 v67; // [rsp+8h] [rbp-50h]\n  __int64 v68; // [rsp+10h] [rbp-48h]\n  __int64 v69; // [rsp+10h] [rbp-48h]\n  __int64 v70; // [rsp+18h] [rbp-40h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    fprintf(stream, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(stream, \"%s %s\\n\");\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  fprintf(stream, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2015LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v27 = *v7;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return fprintf(stream, v28, v27);\n    case 2LL:\n      v29 = v7[1];\n      v30 = *v7;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return fprintf(stream, v31, v30, v29);\n    case 3LL:\n      v32 = v7[2];\n      v33 = v7[1];\n      v34 = *v7;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v35, v34, v33, v32);\n    case 4LL:\n      v36 = v7[3];\n      v37 = v7[2];\n      v38 = v7[1];\n      v39 = *v7;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v40, v39, v38, v37, v36);\n    case 5LL:\n      v41 = v7[4];\n      v42 = v7[3];\n      v43 = v7[2];\n      v44 = v7[1];\n      v45 = *v7;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\n      fprintf(stream, v46, v45, v44, v43, v42, v41);\n      return v60;\n    case 6LL:\n      v47 = v7[1];\n      v48 = v7[4];\n      v49 = v7[3];\n      v50 = v7[2];\n      v51 = *v7;\n      v63 = v47;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      fprintf(stream, v52, v51, v63, v50, v49, v48);\n      return v60;\n    case 7LL:\n      v53 = v7[6];\n      v54 = v7[5];\n      v55 = v7[4];\n      v56 = v7[3];\n      v67 = v7[2];\n      v64 = v7[1];\n      v57 = *v7;\n      v58 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v58, v57, v64, v67, v56, v55, v54, v53);\n    case 8LL:\n      v10 = v7[7];\n      v11 = v7[6];\n      v12 = v7[5];\n      v13 = v7[4];\n      v14 = v7[2];\n      v68 = v7[3];\n      v15 = v7[1];\n      v16 = *v7;\n      v65 = v14;\n      v61 = v15;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v17, v16, v61, v65, v68, v13, v12, v11, v10);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v59;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return fprintf(stream, v26, v25, v62, v66, v69, v24, v23, v22, v21, v70);\n  }\n}\n\nint __fastcall sub_4036D0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // r14\n  __int64 v11; // r13\n  __int64 v12; // r12\n  __int64 v13; // r15\n  __int64 v14; // r8\n  __int64 v15; // rcx\n  __int64 v16; // rbx\n  char *v17; // rax\n  int result; // eax\n  const char *v19; // rsi\n  __int64 v20; // rcx\n  __int64 v21; // r14\n  __int64 v22; // r13\n  __int64 v23; // r12\n  __int64 v24; // r15\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // rcx\n  __int64 v48; // r15\n  __int64 v49; // r14\n  __int64 v50; // r13\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // r13\n  __int64 v54; // r12\n  __int64 v55; // r15\n  __int64 v56; // r14\n  __int64 v57; // rbx\n  char *v58; // rax\n  __int64 v59; // rcx\n  int v60; // [rsp-10h] [rbp-68h]\n  __int64 v61; // [rsp+0h] [rbp-58h]\n  __int64 v62; // [rsp+0h] [rbp-58h]\n  __int64 v63; // [rsp+0h] [rbp-58h]\n  __int64 v64; // [rsp+0h] [rbp-58h]\n  __int64 v65; // [rsp+8h] [rbp-50h]\n  __int64 v66; // [rsp+8h] [rbp-50h]\n  __int64 v67; // [rsp+8h] [rbp-50h]\n  __int64 v68; // [rsp+10h] [rbp-48h]\n  __int64 v69; // [rsp+10h] [rbp-48h]\n  __int64 v70; // [rsp+18h] [rbp-40h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    fprintf(stream, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(stream, \"%s %s\\n\");\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  fprintf(stream, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2015LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v27 = *v7;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return fprintf(stream, v28, v27);\n    case 2LL:\n      v29 = v7[1];\n      v30 = *v7;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return fprintf(stream, v31, v30, v29);\n    case 3LL:\n      v32 = v7[2];\n      v33 = v7[1];\n      v34 = *v7;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v35, v34, v33, v32);\n    case 4LL:\n      v36 = v7[3];\n      v37 = v7[2];\n      v38 = v7[1];\n      v39 = *v7;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v40, v39, v38, v37, v36);\n    case 5LL:\n      v41 = v7[4];\n      v42 = v7[3];\n      v43 = v7[2];\n      v44 = v7[1];\n      v45 = *v7;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\n      fprintf(stream, v46, v45, v44, v43, v42, v41);\n      return v60;\n    case 6LL:\n      v47 = v7[1];\n      v48 = v7[4];\n      v49 = v7[3];\n      v50 = v7[2];\n      v51 = *v7;\n      v63 = v47;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      fprintf(stream, v52, v51, v63, v50, v49, v48);\n      return v60;\n    case 7LL:\n      v53 = v7[6];\n      v54 = v7[5];\n      v55 = v7[4];\n      v56 = v7[3];\n      v67 = v7[2];\n      v64 = v7[1];\n      v57 = *v7;\n      v58 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v58, v57, v64, v67, v56, v55, v54, v53);\n    case 8LL:\n      v10 = v7[7];\n      v11 = v7[6];\n      v12 = v7[5];\n      v13 = v7[4];\n      v14 = v7[2];\n      v68 = v7[3];\n      v15 = v7[1];\n      v16 = *v7;\n      v65 = v14;\n      v61 = v15;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v17, v16, v61, v65, v68, v13, v12, v11, v10);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v59;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return fprintf(stream, v26, v25, v62, v66, v69, v24, v23, v22, v21, v70);\n  }\n}\n", 
            "funcStartAddr": "0x401509L", 
            "funcEndAddr": "0x40150eL", 
            "funcName": "sub_4036D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4036D0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // r14\n  __int64 v11; // r13\n  __int64 v12; // r12\n  __int64 v13; // r15\n  __int64 v14; // r8\n  __int64 v15; // rcx\n  __int64 v16; // rbx\n  char *v17; // rax\n  int result; // eax\n  const char *v19; // rsi\n  __int64 v20; // rcx\n  __int64 v21; // r14\n  __int64 v22; // r13\n  __int64 v23; // r12\n  __int64 v24; // r15\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // rcx\n  __int64 v48; // r15\n  __int64 v49; // r14\n  __int64 v50; // r13\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // r13\n  __int64 v54; // r12\n  __int64 v55; // r15\n  __int64 v56; // r14\n  __int64 v57; // rbx\n  char *v58; // rax\n  __int64 v59; // rcx\n  int v60; // [rsp-10h] [rbp-68h]\n  __int64 v61; // [rsp+0h] [rbp-58h]\n  __int64 v62; // [rsp+0h] [rbp-58h]\n  __int64 v63; // [rsp+0h] [rbp-58h]\n  __int64 v64; // [rsp+0h] [rbp-58h]\n  __int64 v65; // [rsp+8h] [rbp-50h]\n  __int64 v66; // [rsp+8h] [rbp-50h]\n  __int64 v67; // [rsp+8h] [rbp-50h]\n  __int64 v68; // [rsp+10h] [rbp-48h]\n  __int64 v69; // [rsp+10h] [rbp-48h]\n  __int64 v70; // [rsp+18h] [rbp-40h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    fprintf(stream, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(stream, \"%s %s\\n\");\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  fprintf(stream, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2015LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v27 = *v7;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return fprintf(stream, v28, v27);\n    case 2LL:\n      v29 = v7[1];\n      v30 = *v7;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return fprintf(stream, v31, v30, v29);\n    case 3LL:\n      v32 = v7[2];\n      v33 = v7[1];\n      v34 = *v7;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v35, v34, v33, v32);\n    case 4LL:\n      v36 = v7[3];\n      v37 = v7[2];\n      v38 = v7[1];\n      v39 = *v7;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v40, v39, v38, v37, v36);\n    case 5LL:\n      v41 = v7[4];\n      v42 = v7[3];\n      v43 = v7[2];\n      v44 = v7[1];\n      v45 = *v7;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\n      fprintf(stream, v46, v45, v44, v43, v42, v41);\n      return v60;\n    case 6LL:\n      v47 = v7[1];\n      v48 = v7[4];\n      v49 = v7[3];\n      v50 = v7[2];\n      v51 = *v7;\n      v63 = v47;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      fprintf(stream, v52, v51, v63, v50, v49, v48);\n      return v60;\n    case 7LL:\n      v53 = v7[6];\n      v54 = v7[5];\n      v55 = v7[4];\n      v56 = v7[3];\n      v67 = v7[2];\n      v64 = v7[1];\n      v57 = *v7;\n      v58 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v58, v57, v64, v67, v56, v55, v54, v53);\n    case 8LL:\n      v10 = v7[7];\n      v11 = v7[6];\n      v12 = v7[5];\n      v13 = v7[4];\n      v14 = v7[2];\n      v68 = v7[3];\n      v15 = v7[1];\n      v16 = *v7;\n      v65 = v14;\n      v61 = v15;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v17, v16, v61, v65, v68, v13, v12, v11, v10);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v59;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return fprintf(stream, v26, v25, v62, v66, v69, v24, v23, v22, v21, v70);\n  }\n}\n\nint __fastcall sub_4036D0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // r14\n  __int64 v11; // r13\n  __int64 v12; // r12\n  __int64 v13; // r15\n  __int64 v14; // r8\n  __int64 v15; // rcx\n  __int64 v16; // rbx\n  char *v17; // rax\n  int result; // eax\n  const char *v19; // rsi\n  __int64 v20; // rcx\n  __int64 v21; // r14\n  __int64 v22; // r13\n  __int64 v23; // r12\n  __int64 v24; // r15\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // rcx\n  __int64 v48; // r15\n  __int64 v49; // r14\n  __int64 v50; // r13\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // r13\n  __int64 v54; // r12\n  __int64 v55; // r15\n  __int64 v56; // r14\n  __int64 v57; // rbx\n  char *v58; // rax\n  __int64 v59; // rcx\n  int v60; // [rsp-10h] [rbp-68h]\n  __int64 v61; // [rsp+0h] [rbp-58h]\n  __int64 v62; // [rsp+0h] [rbp-58h]\n  __int64 v63; // [rsp+0h] [rbp-58h]\n  __int64 v64; // [rsp+0h] [rbp-58h]\n  __int64 v65; // [rsp+8h] [rbp-50h]\n  __int64 v66; // [rsp+8h] [rbp-50h]\n  __int64 v67; // [rsp+8h] [rbp-50h]\n  __int64 v68; // [rsp+10h] [rbp-48h]\n  __int64 v69; // [rsp+10h] [rbp-48h]\n  __int64 v70; // [rsp+18h] [rbp-40h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    fprintf(stream, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(stream, \"%s %s\\n\");\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  fprintf(stream, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2015LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v27 = *v7;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return fprintf(stream, v28, v27);\n    case 2LL:\n      v29 = v7[1];\n      v30 = *v7;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return fprintf(stream, v31, v30, v29);\n    case 3LL:\n      v32 = v7[2];\n      v33 = v7[1];\n      v34 = *v7;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v35, v34, v33, v32);\n    case 4LL:\n      v36 = v7[3];\n      v37 = v7[2];\n      v38 = v7[1];\n      v39 = *v7;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v40, v39, v38, v37, v36);\n    case 5LL:\n      v41 = v7[4];\n      v42 = v7[3];\n      v43 = v7[2];\n      v44 = v7[1];\n      v45 = *v7;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\n      fprintf(stream, v46, v45, v44, v43, v42, v41);\n      return v60;\n    case 6LL:\n      v47 = v7[1];\n      v48 = v7[4];\n      v49 = v7[3];\n      v50 = v7[2];\n      v51 = *v7;\n      v63 = v47;\n      v52 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      fprintf(stream, v52, v51, v63, v50, v49, v48);\n      return v60;\n    case 7LL:\n      v53 = v7[6];\n      v54 = v7[5];\n      v55 = v7[4];\n      v56 = v7[3];\n      v67 = v7[2];\n      v64 = v7[1];\n      v57 = *v7;\n      v58 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return fprintf(stream, v58, v57, v64, v67, v56, v55, v54, v53);\n    case 8LL:\n      v10 = v7[7];\n      v11 = v7[6];\n      v12 = v7[5];\n      v13 = v7[4];\n      v14 = v7[2];\n      v68 = v7[3];\n      v15 = v7[1];\n      v16 = *v7;\n      v65 = v14;\n      v61 = v15;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return fprintf(stream, v17, v16, v61, v65, v68, v13, v12, v11, v10);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v59 = v7[1];\n      v21 = v7[7];\n      v22 = v7[6];\n      v70 = v7[8];\n      v23 = v7[5];\n      v24 = v7[4];\n      v69 = v7[3];\n      v66 = v7[2];\n      v25 = *v7;\n      v62 = v59;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return fprintf(stream, v26, v25, v62, v66, v69, v24, v23, v22, v21, v70);\n  }\n}\n", 
            "funcStartAddr": "0x401509L", 
            "funcEndAddr": "0x40150eL", 
            "funcName": "sub_4036D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_403AE0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_4036D0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_4036D0(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x403ae0L", 
            "funcEndAddr": "0x403b40L", 
            "funcName": "sub_403AE0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_403B40(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_4036D0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_4036D0(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x403b40L", 
            "funcEndAddr": "0x403bfcL", 
            "funcName": "sub_403B40"
        }, 
        {
            "decompiledFuncCode": "int sub_403C00()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  printf(v0, \"bug-findutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  printf(v1, \"GNU findutils\", \"http://www.gnu.org/software/findutils/\");\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs(v3, v2);\n}\n", 
            "funcStartAddr": "0x403c00L", 
            "funcEndAddr": "0x403c6aL", 
            "funcName": "sub_403C00"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_403C70(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_403E90();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403c70L", 
            "funcEndAddr": "0x403c8aL", 
            "funcName": "sub_403C70"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_403CC0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_403E90();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403cc0L", 
            "funcEndAddr": "0x403cf6L", 
            "funcName": "sub_403CC0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_403E10(size_t a1, size_t a2)\n{\n  void *result; // rax\n\n  result = calloc(a1, a2);\n  if ( !result )\n    sub_403E90();\n  return result;\n}\n", 
            "funcStartAddr": "0x403e10L", 
            "funcEndAddr": "0x403e28L", 
            "funcName": "sub_403E10"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_403E30(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_403C70(n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x403e30L", 
            "funcEndAddr": "0x403e58L", 
            "funcName": "sub_403E30"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_403E60(void *src)\n{\n  size_t v1; // rax\n  size_t v2; // rbx\n  void *v3; // rax\n\n  v1 = strlen((const char *)src);\n  v2 = v1 + 1;\n  v3 = sub_403C70(v1 + 1);\n  return memcpy(v3, src, v2);\n}\n", 
            "funcStartAddr": "0x403e60L", 
            "funcEndAddr": "0x403e8eL", 
            "funcName": "sub_403E60"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_403E90()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x403e90L", 
            "funcEndAddr": "0x403ec1L", 
            "funcName": "sub_403E90"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_403ED0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_403F10(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x403ed0L", 
            "funcEndAddr": "0x403f10L", 
            "funcName": "sub_403ED0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_403F10(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x403f10L", 
            "funcEndAddr": "0x403f67L", 
            "funcName": "sub_403F10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403F70(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[12];\n  v4 = *a2;\n  v5 = a2[13];\n  v6 = a2[12];\n  v7 = *a2;\n  v8 = a2[13];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[13] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[12] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x403f70L", 
            "funcEndAddr": "0x40404fL", 
            "funcName": "sub_403F70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404050(int a1, __int64 a2, char *a3, const char **a4, int *a5, int a6, int *a7, int a8)\n{\n  int *v8; // r12\n  int v9; // eax\n  int v10; // ebp\n  _BYTE *v11; // r8\n  char v12; // al\n  bool v13; // zf\n  int v14; // eax\n  __int64 v15; // rax\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  char *v18; // rax\n  const char *v19; // rbx\n  unsigned int v20; // er13\n  char v21; // r14\n  char *v22; // rax\n  char v23; // dl\n  char v24; // dl\n  __int64 v25; // rax\n  int v26; // eax\n  _BYTE *v27; // rdx\n  int v28; // edx\n  int v29; // ecx\n  int v30; // eax\n  int v32; // edx\n  __int64 v33; // rax\n  _BYTE *v34; // rcx\n  int v35; // esi\n  char v36; // cl\n  __int64 v37; // rax\n  char v38; // r13\n  const char *i; // r14\n  int v40; // er13\n  size_t v41; // r14\n  const char **v42; // rbp\n  const char *v43; // r12\n  const char **v44; // r15\n  _BYTE *v45; // r13\n  unsigned int v46; // eax\n  const char **v47; // rbx\n  const char *v48; // r15\n  __int64 v49; // r14\n  const char *v50; // rsi\n  size_t v51; // r13\n  int v52; // ebp\n  _QWORD *v53; // rax\n  _BYTE *v54; // r13\n  bool v55; // si\n  int v56; // eax\n  int v57; // ecx\n  __int64 v58; // rbx\n  unsigned int *v59; // rax\n  int v60; // er15\n  _QWORD *v61; // rdi\n  _QWORD *v62; // r14\n  char *v63; // rbx\n  char *v64; // rax\n  unsigned int v65; // ebp\n  __int64 v66; // rbx\n  char *v67; // rax\n  char *v68; // rax\n  const char *v69; // rbp\n  __int64 v70; // rbx\n  unsigned int v71; // er13\n  char *v72; // rax\n  __int64 v73; // rbx\n  void *v74; // rdi\n  __int64 v75; // rbx\n  char *v76; // rax\n  __int64 v77; // rbp\n  __int64 v78; // rbx\n  char *v79; // rax\n  char *v80; // rbx\n  const char **j; // rax\n  __int64 v82; // rbx\n  size_t v83; // rax\n  __int64 v84; // rbx\n  size_t v85; // rax\n  _QWORD *v86; // rdi\n  _QWORD *v87; // rbx\n  int v88; // eax\n  char v89; // r13\n  const char *v90; // r14\n  int v91; // ebp\n  int v92; // eax\n  __int64 v93; // rbp\n  __int64 v94; // rbx\n  char *v95; // rax\n  int v96; // eax\n  const char **v97; // rsi\n  __int64 v98; // rbp\n  __int64 v99; // rbx\n  char *v100; // rax\n  __int64 v101; // rbx\n  size_t v102; // rax\n  __int64 v103; // rbx\n  char *v104; // rax\n  __int64 v105; // rax\n  char *v106; // rax\n  const char *v107; // rbp\n  __int64 v108; // rbx\n  char *v109; // rax\n  __int64 v110; // rbp\n  char *v111; // rax\n  __int64 v112; // rbx\n  char *v113; // rax\n  const char *v114; // rbp\n  __int64 v115; // rbx\n  char *v116; // rax\n  const char *v117; // rbp\n  __int64 v118; // rbx\n  char *v119; // rax\n  char *s; // [rsp+0h] [rbp-98h]\n  char *sa; // [rsp+0h] [rbp-98h]\n  int sb; // [rsp+0h] [rbp-98h]\n  int v123; // [rsp+Ch] [rbp-8Ch]\n  int v124; // [rsp+Ch] [rbp-8Ch]\n  __int64 *v125; // [rsp+10h] [rbp-88h]\n  _BYTE *v126; // [rsp+18h] [rbp-80h]\n  _BYTE *v127; // [rsp+18h] [rbp-80h]\n  const char **v128; // [rsp+18h] [rbp-80h]\n  _BYTE *v129; // [rsp+18h] [rbp-80h]\n  const char **v130; // [rsp+20h] [rbp-78h]\n  int v131; // [rsp+20h] [rbp-78h]\n  int v132; // [rsp+28h] [rbp-70h]\n  int v133; // [rsp+2Ch] [rbp-6Ch]\n  int v134; // [rsp+2Ch] [rbp-6Ch]\n  int v135; // [rsp+2Ch] [rbp-6Ch]\n  int v136; // [rsp+2Ch] [rbp-6Ch]\n  int *v137; // [rsp+30h] [rbp-68h]\n  const char *v138; // [rsp+38h] [rbp-60h]\n  int v139; // [rsp+38h] [rbp-60h]\n  int v140; // [rsp+40h] [rbp-58h]\n  _BYTE *v141; // [rsp+40h] [rbp-58h]\n  char v142; // [rsp+48h] [rbp-50h]\n  int v143; // [rsp+48h] [rbp-50h]\n  int v144; // [rsp+4Ch] [rbp-4Ch]\n  char v145; // [rsp+50h] [rbp-48h]\n  __int64 v146; // [rsp+58h] [rbp-40h]\n\n  v8 = a7;\n  v125 = (__int64 *)a2;\n  s = a3;\n  v130 = a4;\n  v137 = a5;\n  v132 = a6;\n  v123 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  *((_QWORD *)a7 + 2) = 0LL;\n  v9 = *a7;\n  v10 = a1;\n  if ( !*a7 )\n  {\n    *a7 = 1;\n    v9 = 1;\n    goto LABEL_4;\n  }\n  if ( !a7[6] )\n  {\nLABEL_4:\n    a7[13] = v9;\n    a7[12] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( a8 )\n    {\n      a7[11] = 1;\n      v11 = 0LL;\n      if ( *a3 != 45 )\n      {\n        if ( *a3 != 43 )\n        {\nLABEL_7:\n          a7[10] = 0;\nLABEL_8:\n          a7[6] = 1;\n          v12 = *s;\n          goto LABEL_9;\n        }\nLABEL_68:\n        a7[10] = 0;\n        ++s;\n        goto LABEL_8;\n      }\n    }\n    else if ( getenv(\"POSIXLY_CORRECT\") )\n    {\n      v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n      a7[11] = 1;\n      if ( *s != 45 )\n      {\n        if ( *s != 43 )\n          goto LABEL_7;\n        goto LABEL_68;\n      }\n    }\n    else\n    {\n      a7[11] = 0;\n      if ( *s != 45 )\n      {\n        if ( *s != 43 )\n        {\n          a7[10] = 1;\n          v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_8;\n        }\n        v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n        goto LABEL_68;\n      }\n      v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n    }\n    a7[10] = 2;\n    ++s;\n    goto LABEL_8;\n  }\n  v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n  v12 = *a3;\n  if ( !((*a3 - 43) & 0xFD) )\n  {\n    v12 = a3[1];\n    s = a3 + 1;\n  }\nLABEL_9:\n  v13 = v12 == 58;\n  v14 = 0;\n  if ( !v13 )\n    v14 = v123;\n  v124 = v14;\n  if ( !v11 || !*v11 )\n  {\n    v26 = *a7;\n    if ( a7[13] > *a7 )\n      a7[13] = v26;\n    if ( v26 < a7[12] )\n      a7[12] = v26;\n    if ( a7[10] == 1 )\n    {\n      v32 = a7[13];\n      if ( a7[12] == v32 )\n      {\n        if ( v26 != v32 )\n        {\n          a7[12] = v26;\n          v32 = v26;\n        }\n      }\n      else if ( v26 != v32 )\n      {\n        sub_403F70(a2, a7);\n        v32 = *a7;\n      }\n      if ( a1 <= v32 )\n      {\nLABEL_117:\n        v26 = v32;\n      }\n      else\n      {\n        v33 = v32;\n        while ( 1 )\n        {\n          v34 = (_BYTE *)v125[v33];\n          v35 = v33;\n          v32 = v33;\n          if ( *v34 == 45 )\n          {\n            if ( v34[1] )\n              break;\n          }\n          v32 = ++v33;\n          *a7 = v35 + 1;\n          if ( a1 <= (int)v33 )\n            goto LABEL_117;\n        }\n        v26 = *a7;\n      }\n      a7[13] = v32;\n    }\n    if ( a1 == v26 )\n    {\n      v10 = a7[13];\n      v28 = a7[12];\nLABEL_51:\n      if ( v28 != v10 )\n        *a7 = v28;\n      return (unsigned int)-1;\n    }\n    v27 = (_BYTE *)v125[v26];\n    if ( !strcmp((const char *)v125[v26], \"--\") )\n    {\n      v28 = a7[12];\n      v29 = a7[13];\n      v30 = v26 + 1;\n      *a7 = v30;\n      if ( v28 == v29 )\n      {\n        a7[12] = v30;\n        v28 = v30;\n      }\n      else if ( v30 != v29 )\n      {\n        sub_403F70((__int64)v125, a7);\n        v28 = a7[12];\n      }\n      a7[13] = a1;\n      *a7 = a1;\n      goto LABEL_51;\n    }\n    if ( *v27 == 45 )\n    {\n      v36 = v27[1];\n      if ( v36 )\n      {\n        v11 = &v27[(v130 != 0LL && v36 == 45) + 1];\n        *((_QWORD *)a7 + 4) = v11;\n        goto LABEL_13;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v27;\n      v20 = 1;\n      *a7 = v26 + 1;\n      return v20;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_13:\n  if ( !v130 )\n    goto LABEL_18;\n  v15 = *a7;\n  v16 = v15;\n  v17 = v125[v15];\n  if ( *(_BYTE *)(v17 + 1) != 45 )\n  {\n    if ( !v132 )\n      goto LABEL_18;\n    if ( !*(_BYTE *)(v17 + 2) )\n    {\n      v133 = v16;\n      v126 = v11;\n      v18 = strchr(s, *(char *)(v17 + 1));\n      v11 = v126;\n      v16 = v133;\n      if ( v18 )\n        goto LABEL_18;\n    }\n  }\n  v45 = v11;\n  if ( *v11 && *v11 != 61 )\n  {\n    do\n      ++v45;\n    while ( *v45 && *v45 != 61 );\n    v46 = (_DWORD)v45 - (_DWORD)v11;\n    v135 = (_DWORD)v45 - (_DWORD)v11;\n  }\n  else\n  {\n    v135 = 0;\n    v46 = 0;\n  }\n  v47 = v130;\n  v48 = *v130;\n  if ( !*v130 )\n  {\nLABEL_134:\n    if ( v132 )\n    {\n      v63 = (char *)v125[(int)v16];\n      if ( v63[1] != 45 )\n      {\n        v136 = v16;\n        v129 = (_BYTE *)*((_QWORD *)a7 + 4);\n        v64 = strchr(s, **((char **)a7 + 4));\n        v11 = v129;\n        LODWORD(v16) = v136;\n        if ( v64 )\n        {\nLABEL_18:\n          v19 = v11 + 1;\n          v127 = v11;\n          *((_QWORD *)a7 + 4) = v11 + 1;\n          v20 = (char)*v11;\n          v21 = *v11;\n          v22 = strchr(s, v20);\n          if ( !v127[1] )\n            ++*a7;\n          if ( (unsigned __int8)(v21 - 58) <= 1u || !v22 )\n          {\n            if ( v124 )\n            {\n              v75 = *v125;\n              v76 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n              fprintf(stderr, v76, v75, v20);\n            }\n            a7[2] = v20;\n            return 63;\n          }\n          v23 = v22[1];\n          if ( *v22 != 87 || v23 != 59 )\n          {\n            if ( v23 == 58 )\n            {\n              v24 = v127[1];\n              if ( v22[2] == 58 )\n              {\n                if ( v24 )\n                {\n                  *((_QWORD *)a7 + 2) = v19;\n                  ++*a7;\n                }\n                else\n                {\n                  *((_QWORD *)a7 + 2) = 0LL;\n                }\n              }\n              else\n              {\n                v25 = *a7;\n                if ( v24 )\n                {\n                  *((_QWORD *)a7 + 2) = v19;\n                  *a7 = v25 + 1;\n                }\n                else if ( v10 == (_DWORD)v25 )\n                {\n                  if ( v124 )\n                  {\n                    v103 = *v125;\n                    v104 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n                    fprintf(stderr, v104, v103, v20);\n                  }\n                  a7[2] = v20;\n                  v20 = 5 * (*s != 58) + 58;\n                }\n                else\n                {\n                  *a7 = v25 + 1;\n                  *((_QWORD *)a7 + 2) = v125[v25];\n                }\n              }\n              *((_QWORD *)a7 + 4) = 0LL;\n            }\n            return v20;\n          }\n          if ( !v130 )\n            goto LABEL_204;\n          v37 = *a7;\n          if ( v127[1] )\n          {\n            *((_QWORD *)a7 + 2) = v19;\n            *a7 = v37 + 1;\n          }\n          else\n          {\n            if ( v10 == (_DWORD)v37 )\n            {\n              if ( v124 )\n              {\n                v112 = *v125;\n                v113 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n                fprintf(stderr, v113, v112, v20);\n              }\n              a7[2] = v20;\n              return 5 * (unsigned int)(*s != 58) + 58;\n            }\n            *a7 = v37 + 1;\n            v19 = (const char *)v125[v37];\n            *((_QWORD *)a7 + 2) = v19;\n          }\n          *((_QWORD *)a7 + 4) = v19;\n          v38 = *v19;\n          for ( i = v19; *i; v38 = *++i )\n          {\n            if ( v38 == 61 )\n              break;\n          }\n          if ( !*v130 )\n          {\nLABEL_204:\n            *((_QWORD *)v8 + 4) = 0LL;\n            return 87;\n          }\n          v142 = v38;\n          v138 = i;\n          v40 = 0;\n          v140 = v10;\n          v41 = i - v19;\n          v42 = v130;\n          v43 = *v130;\n          v44 = 0LL;\n          v134 = 0;\n          v131 = 0;\n          do\n          {\n            if ( !strncmp(v43, v19, v41) )\n            {\n              if ( (unsigned int)v41 == strlen(v43) )\n              {\n                v96 = v40;\n                v97 = v42;\n                v90 = v138;\n                v89 = v142;\n                v91 = v140;\n                v8 = a7;\n                v134 = v96;\n                v44 = v97;\n                goto LABEL_174;\n              }\n              if ( v44 )\n              {\n                if ( v132 || *((_DWORD *)v44 + 2) != *((_DWORD *)v42 + 2) || v44[2] != v42[2] )\n                {\n                  v131 = 1;\n                }\n                else\n                {\n                  v88 = 1;\n                  if ( *((_DWORD *)v44 + 6) == *((_DWORD *)v42 + 6) )\n                    v88 = v131;\n                  v131 = v88;\n                }\n              }\n              else\n              {\n                v134 = v40;\n                v44 = v42;\n              }\n            }\n            v42 += 4;\n            v43 = *v42;\n            ++v40;\n          }\n          while ( *v42 );\n          v89 = v142;\n          v90 = v138;\n          v91 = v140;\n          v8 = a7;\n          if ( v131 )\n          {\n            if ( v124 )\n            {\n              v110 = *v125;\n              v111 = dcgettext(0LL, \"%s: option '-W %s' is ambiguous\\n\", 5);\n              fprintf(stderr, v111, v110, v19);\n              v19 = (const char *)*((_QWORD *)a7 + 4);\n            }\n            v20 = 63;\n            v102 = strlen(v19);\n            ++*a7;\n            *((_QWORD *)a7 + 4) = &v19[v102];\n            return v20;\n          }\n          if ( !v44 )\n            goto LABEL_204;\nLABEL_174:\n          v92 = *((_DWORD *)v44 + 2);\n          if ( v89 )\n          {\n            if ( !v92 )\n            {\n              if ( v124 )\n              {\n                v114 = *v44;\n                v115 = *v125;\n                v116 = dcgettext(0LL, \"%s: option '-W %s' doesn't allow an argument\\n\", 5);\n                fprintf(stderr, v116, v115, v114);\n                v19 = (const char *)*((_QWORD *)v8 + 4);\n              }\n              v20 = 63;\n              *((_QWORD *)v8 + 4) = &v19[strlen(v19)];\n              return v20;\n            }\n            *((_QWORD *)v8 + 2) = v90 + 1;\n            goto LABEL_177;\n          }\n          if ( v92 != 1 )\n          {\n            *((_QWORD *)v8 + 2) = 0LL;\n            goto LABEL_177;\n          }\n          v105 = *v8;\n          if ( (int)v105 < v91 )\n          {\n            *v8 = v105 + 1;\n            *((_QWORD *)v8 + 2) = v125[v105];\nLABEL_177:\n            *((_QWORD *)v8 + 4) = &v19[strlen(v19)];\n            if ( v137 )\n              *v137 = v134;\n            v59 = (unsigned int *)v44[2];\n            v20 = *((_DWORD *)v44 + 6);\n            if ( v59 )\n              goto LABEL_116;\n            return v20;\n          }\n          if ( v124 )\n          {\n            v117 = *v44;\n            v118 = *v125;\n            v119 = dcgettext(0LL, \"%s: option '-W %s' requires an argument\\n\", 5);\n            fprintf(stderr, v119, v118, v117);\n          }\n          *((_QWORD *)v8 + 4) += strlen(*((const char **)v8 + 4));\n          if ( *s != 58 )\n            return 63;\n          return 58;\n        }\n        if ( !v124 )\n        {\nLABEL_139:\n          v20 = 63;\n          *((_QWORD *)a7 + 4) = \"\";\n          *a7 = v16 + 1;\n          a7[2] = 0;\n          return v20;\n        }\nLABEL_138:\n        v65 = *v63;\n        sa = v11;\n        v66 = *v125;\n        v67 = dcgettext(0LL, \"%s: unrecognized option '%c%s'\\n\", 5);\n        fprintf(stderr, v67, v66, v65, sa);\n        LODWORD(v16) = *a7;\n        goto LABEL_139;\n      }\n      if ( !v124 )\n        goto LABEL_139;\n      v93 = *((_QWORD *)a7 + 4);\n    }\n    else\n    {\n      if ( !v124 )\n        goto LABEL_139;\n      v93 = *((_QWORD *)a7 + 4);\n      v63 = (char *)v125[v16];\n      v11 = (_BYTE *)*((_QWORD *)a7 + 4);\n      if ( v63[1] != 45 )\n        goto LABEL_138;\n    }\n    v94 = *v125;\n    v95 = dcgettext(0LL, \"%s: unrecognized option '--%s'\\n\", 5);\n    fprintf(stderr, v95, v94, v93);\n    LODWORD(v16) = *a7;\n    goto LABEL_139;\n  }\n  v141 = v45;\n  v49 = 0LL;\n  v144 = a1;\n  v50 = v11;\n  v51 = v46;\n  v52 = 0;\n  v139 = -1;\n  v143 = 0;\n  v128 = 0LL;\n  while ( 1 )\n  {\n    if ( strncmp(v48, v50, v51) )\n      goto LABEL_101;\n    if ( v135 == (unsigned int)strlen(v48) )\n    {\n      v60 = v52;\n      v54 = v141;\n      v10 = v144;\n      if ( v143 || v49 )\n      {\n        v61 = (_QWORD *)v49;\n        if ( v49 )\n        {\n          do\n          {\n            v62 = (_QWORD *)v61[1];\n            free(v61);\n            v61 = v62;\n          }\n          while ( v62 );\n        }\n      }\n      LODWORD(v16) = *a7;\n      v139 = v60;\n      v128 = v47;\n      goto LABEL_110;\n    }\n    if ( !v128 )\n      break;\n    if ( !v143 )\n    {\n      if ( v132\n        || *((_DWORD *)v128 + 2) != *((_DWORD *)v47 + 2)\n        || v128[2] != v47[2]\n        || *((_DWORD *)v128 + 6) != *((_DWORD *)v47 + 6) )\n      {\n        v53 = malloc(0x10uLL);\n        if ( v53 )\n        {\n          *v53 = v47;\n          v53[1] = v49;\n          v49 = (__int64)v53;\n        }\n        else\n        {\n          if ( v49 )\n          {\n            v74 = (void *)v49;\n            do\n            {\n              v49 = *(_QWORD *)(v49 + 8);\n              free(v74);\n              v74 = (void *)v49;\n            }\n            while ( v49 );\n          }\n          v143 = 1;\n        }\n      }\n      else\n      {\n        v143 = 0;\n      }\n    }\nLABEL_101:\n    v47 += 4;\n    v48 = *v47;\n    ++v52;\n    if ( !*v47 )\n      goto LABEL_107;\nLABEL_102:\n    v50 = (const char *)*((_QWORD *)a7 + 4);\n  }\n  v128 = v47;\n  v47 += 4;\n  v48 = *v47;\n  v139 = v52++;\n  if ( *v47 )\n    goto LABEL_102;\nLABEL_107:\n  v54 = v141;\n  v10 = v144;\n  v55 = v49 != 0;\n  v16 = *a7;\n  if ( (_BYTE)v143 || v55 )\n  {\n    if ( v124 )\n    {\n      if ( v55 )\n      {\n        v146 = v49;\n        v77 = v125[v16];\n        v78 = *v125;\n        v79 = dcgettext(0LL, \"%s: option '%s' is ambiguous; possibilities:\", 5);\n        fprintf(stderr, v79, v78, v77);\n        v80 = &v145;\n        for ( j = v128; ; j = *(const char ***)v80 )\n        {\n          fprintf(stderr, \" '--%s'\", *j);\n          v80 = (char *)*((_QWORD *)v80 + 1);\n          if ( !v80 )\n            break;\n        }\n        fputc(10, stderr);\n        goto LABEL_161;\n      }\n      if ( (_BYTE)v143 )\n      {\n        v98 = v125[v16];\n        v99 = *v125;\n        v100 = dcgettext(0LL, \"%s: option '%s' is ambiguous\\n\", 5);\n        fprintf(stderr, v100, v99, v98);\nLABEL_161:\n        v82 = *((_QWORD *)a7 + 4);\n        v83 = strlen(*((const char **)a7 + 4));\n        ++*a7;\n        a7[2] = 0;\n        *((_QWORD *)a7 + 4) = v83 + v82;\n        return 63;\n      }\n    }\n    v84 = *((_QWORD *)a7 + 4);\n    sb = *a7;\n    v85 = strlen(*((const char **)a7 + 4));\n    a7[2] = 0;\n    *((_QWORD *)a7 + 4) = v85 + v84;\n    *a7 = sb + 1;\n    if ( v49 )\n    {\n      v86 = (_QWORD *)v49;\n      do\n      {\n        v87 = (_QWORD *)v86[1];\n        free(v86);\n        v86 = v87;\n      }\n      while ( v87 );\n    }\n    return 63;\n  }\n  if ( !v128 )\n    goto LABEL_134;\nLABEL_110:\n  v56 = v16 + 1;\n  *a7 = v16 + 1;\n  v57 = *((_DWORD *)v128 + 2);\n  if ( !*v54 )\n  {\n    if ( v57 != 1 )\n      goto LABEL_113;\n    if ( v56 < v10 )\n    {\n      *a7 = v16 + 2;\n      *((_QWORD *)a7 + 2) = v125[v56];\n      goto LABEL_113;\n    }\n    if ( v124 )\n    {\n      v107 = *v128;\n      v108 = *v125;\n      v109 = dcgettext(0LL, \"%s: option '--%s' requires an argument\\n\", 5);\n      fprintf(stderr, v109, v108, v107);\n    }\n    v101 = *((_QWORD *)a7 + 4);\n    *((_QWORD *)a7 + 4) = strlen(*((const char **)a7 + 4)) + v101;\n    a7[2] = *((_DWORD *)v128 + 6);\n    if ( *s == 58 )\n      return 58;\n    return 63;\n  }\n  if ( v57 )\n  {\n    *((_QWORD *)a7 + 2) = v54 + 1;\nLABEL_113:\n    v58 = *((_QWORD *)a7 + 4);\n    *((_QWORD *)a7 + 4) = strlen(*((const char **)a7 + 4)) + v58;\n    if ( v137 )\n      *v137 = v139;\n    v59 = (unsigned int *)v128[2];\n    v20 = *((_DWORD *)v128 + 6);\n    if ( v59 )\n    {\nLABEL_116:\n      *v59 = v20;\n      v20 = 0;\n    }\n  }\n  else\n  {\n    if ( v124 )\n    {\n      v68 = (char *)v125[v56 - 1];\n      v69 = *v128;\n      v70 = *v125;\n      if ( v68[1] == 45 )\n      {\n        v106 = dcgettext(0LL, \"%s: option '--%s' doesn't allow an argument\\n\", 5);\n        fprintf(stderr, v106, v70, v69);\n      }\n      else\n      {\n        v71 = *v68;\n        v72 = dcgettext(0LL, \"%s: option '%c%s' doesn't allow an argument\\n\", 5);\n        fprintf(stderr, v72, v70, v71, v69);\n      }\n    }\n    v73 = *((_QWORD *)a7 + 4);\n    v20 = 63;\n    *((_QWORD *)a7 + 4) = strlen(*((const char **)a7 + 4)) + v73;\n    a7[2] = *((_DWORD *)v128 + 6);\n  }\n  return v20;\n}\n", 
            "funcStartAddr": "0x404050L", 
            "funcEndAddr": "0x405083L", 
            "funcName": "sub_404050"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405090(int a1, __int64 a2, char *a3, const char **a4, int *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_6083C0 = dword_60821C;\n  dword_6083C4 = dword_608218;\n  result = sub_404050(a1, a2, a3, a4, a5, a6, &dword_6083C0, a7);\n  dword_60821C = dword_6083C0;\n  nptr = (char *)qword_6083D0;\n  dword_608214 = dword_6083C8;\n  return result;\n}\n", 
            "funcStartAddr": "0x405090L", 
            "funcEndAddr": "0x4050e6L", 
            "funcName": "sub_405090"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4050F0(int a1, __int64 a2, char *a3)\n{\n  return sub_405090(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x4050f0L", 
            "funcEndAddr": "0x405108L", 
            "funcName": "sub_4050F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405110(int a1, __int64 a2, char *a3, const char **a4, int *a5)\n{\n  return sub_405090(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x405110L", 
            "funcEndAddr": "0x405123L", 
            "funcName": "sub_405110"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405130(int a1, __int64 a2, char *a3, const char **a4, int *a5, int *a6)\n{\n  return sub_404050(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x405130L", 
            "funcEndAddr": "0x405145L", 
            "funcName": "sub_405130"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405150(int a1, __int64 a2, char *a3, const char **a4, int *a5)\n{\n  return sub_405090(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x405150L", 
            "funcEndAddr": "0x405166L", 
            "funcName": "sub_405150"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405170(int a1, __int64 a2, char *a3, const char **a4, int *a5, int *a6)\n{\n  return sub_404050(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x405170L", 
            "funcEndAddr": "0x405188L", 
            "funcName": "sub_405170"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_405190(wchar_t *a1, const char *a2, size_t a3, mbstate_t *a4)\n{\n  if ( a2 )\n  {\n    if ( !a3 )\n      return -2LL;\n  }\n  else\n  {\n    a3 = 1LL;\n    a2 = \"\";\n    a1 = 0LL;\n  }\n  return mbrtowc(a1, a2, a3, a4);\n}\n", 
            "funcStartAddr": "0x405190L", 
            "funcEndAddr": "0x4051b9L", 
            "funcName": "sub_405190"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4051C0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebp\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = ferror(stream);\n  result = fclose(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n  }\n  else\n  {\n    if ( !result )\n      return result;\n    if ( !v1 )\n      return -(*__errno_location() != 9);\n  }\n  return -1;\n}\n", 
            "funcStartAddr": "0x4051c0L", 
            "funcEndAddr": "0x405225L", 
            "funcName": "sub_4051C0"
        }, 
        {
            "decompiledFuncCode": "const char *sub_405230()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                fclose(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            fclose(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 116LL;\n      v9 = 102LL;\n      v10 = 101LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x405230L", 
            "funcEndAddr": "0x405792L", 
            "funcName": "sub_405230"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x4057a0L", 
            "funcEndAddr": "0x4057fdL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x405800L", 
            "funcEndAddr": "0x405801L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405810(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_6081A8 )\n    v1 = (void *)unk_6081A8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x405810L", 
            "funcEndAddr": "0x405828L", 
            "funcName": "sub_405810"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405828(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_607E30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x405828L", 
            "funcEndAddr": "0x405848L", 
            "funcName": "sub_405828"
        }
    ], 
    "binaryInfo": {
        "binaryName": "findutils_strip-4.6.0_gcc-8.2.0_x86_64_O2_frcode.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 53, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}