{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __usercall main@<rax>(char **a1@<rsi>, char **a2@<rdx>, unsigned int a3@<edi>, unsigned __int64 a4@<r15>)\n{\n  unsigned int v4; // er12\n  char **v5; // rbp\n  __int64 i; // rax\n  __int64 j; // rax\n  char *v8; // rbx\n  char *v9; // r14\n  char v10; // r13\n  unsigned __int64 v11; // rsi\n  char *v12; // rdi\n  int v13; // eax\n  __int64 v14; // rdx\n  int v15; // eax\n  unsigned int v16; // eax\n  unsigned int v17; // eax\n  unsigned int v18; // eax\n  unsigned int v19; // eax\n  char v20; // r13\n  __int64 v21; // rax\n  char *v22; // rdx\n  int v23; // er12\n  void **v24; // rax\n  __int64 v25; // rax\n  __int64 v26; // r10\n  __int64 v27; // r11\n  int v28; // er8\n  unsigned int *v29; // rdi\n  unsigned __int64 v30; // rax\n  unsigned __int64 k; // rcx\n  unsigned __int64 v32; // rdx\n  __int64 v33; // r12\n  char *v34; // rax\n  unsigned int *v35; // rcx\n  unsigned __int64 v36; // r8\n  unsigned __int64 v37; // rdi\n  unsigned int *v38; // rsi\n  __int64 v39; // r9\n  int v40; // edx\n  __int64 v41; // rax\n  int v42; // er12\n  __int64 v43; // rdi\n  __int64 v44; // rax\n  unsigned __int64 v45; // r13\n  unsigned __int64 v46; // rsi\n  unsigned __int64 v47; // rbx\n  const unsigned __int16 **v48; // rax\n  int v49; // eax\n  int v50; // ebp\n  __int64 result; // rax\n  int v52; // eax\n  __int64 v53; // rbx\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  int v57; // er13\n  __int64 v58; // rbp\n  int v59; // eax\n  unsigned __int64 v60; // rbx\n  __int64 v61; // rdi\n  int v62; // er8\n  unsigned __int64 v63; // rsi\n  unsigned __int64 v64; // rax\n  unsigned __int64 l; // rcx\n  unsigned __int64 v66; // rdx\n  __int64 v67; // rdi\n  __int64 v68; // rbp\n  int v69; // eax\n  unsigned __int64 v70; // rdi\n  char *v71; // rbx\n  char v72; // dl\n  char *v73; // rax\n  char *v74; // rax\n  char *v75; // rax\n  char *v76; // rax\n  char *v77; // rax\n  unsigned int v78; // [rsp+4h] [rbp-64h]\n  char *v79; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-50h]\n  void *ptr; // [rsp+20h] [rbp-48h]\n  char *v82; // [rsp+28h] [rbp-40h]\n\n  v4 = a3;\n  v5 = a1;\n  sub_4055F0(*a1);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40C270(sub_4051B0);\n  for ( i = 0LL; i != 9; ++i )\n    dword_6123A0[i] = 0;\n  dword_6123B0 = 3;\n  dword_6123C0 = 5;\n  qword_6123A4 = 8589934593LL;\n  for ( j = 0LL; j != 17; ++j )\n    dword_612340[j] = 0;\n  dword_612350 = 6;\n  LODWORD(v8) = 1;\n  LOBYTE(v9) = 0;\n  v10 = 0;\n  dword_612380 = 8;\n  dword_612360 = 7;\n  qword_6123F0 = 0LL;\n  qword_6123E8 = 0LL;\n  qword_6123F8 = 0LL;\n  qword_612420 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_402D50;\n  dword_612444 = 8;\n  dword_612440 = 7;\n  byte_612432 = 0;\n  while ( 1 )\n  {\n    v11 = (unsigned __int64)v5;\n    v12 = (char *)v4;\n    LODWORD(v80) = -1;\n    v13 = sub_408F90(v4, v5, \"A:aBbcDdeFfHhIij:LlN:OoS:st:vw::Xx\", &off_40CF80, &v80);\n    if ( v13 == -1 )\n      break;\n    switch ( v13 + 131 )\n    {\n      case 0:\n        sub_407690((char)stdout);\n        exit(0);\n        return result;\n      case 1:\n        sub_404960(0);\n        return result;\n      case 196:\n        v20 = *nptr;\n        if ( *nptr == 110 )\n        {\n          dword_612440 = 0;\n          v10 = 1;\n          qword_612420 = (__int64 (__fastcall *)(_QWORD, _QWORD))nullsub_1;\n        }\n        else if ( v20 <= 110 )\n        {\n          if ( v20 != 100 )\n          {\nLABEL_209:\n            v77 = dcgettext(0LL, \"invalid output address radix '%c'; it must be one character from [doxn]\", 5);\n            error(1, 0, v77, (unsigned int)v20);\nLABEL_210:\n            __assert_fail(\"s != NULL\", \"src/od.c\", 0x3D7u, \"decode_format_string\");\n          }\n          dword_612444 = 10;\n          v10 = 1;\n          qword_612420 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_402D50;\n          dword_612440 = 7;\n        }\n        else if ( v20 == 111 )\n        {\n          dword_612444 = 8;\n          v10 = 1;\n          qword_612420 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_402D50;\n          dword_612440 = 7;\n        }\n        else\n        {\n          if ( v20 != 120 )\n            goto LABEL_209;\n          dword_612444 = 16;\n          v10 = 1;\n          qword_612420 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_402D50;\n          dword_612440 = 6;\n        }\n        break;\n      case 197:\n      case 242:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"o2\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 199:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"u4\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 201:\n      case 232:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"fD\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 203:\n      case 219:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"x4\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 204:\n      case 207:\n      case 239:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"dL\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 209:\n        byte_612410 = 1;\n        v19 = sub_407CE0(nptr);\n        if ( v19 )\n          sub_407C50(v19, (unsigned int)v80, 78LL, &off_40CF80, nptr);\n        goto LABEL_20;\n      case 210:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"o4\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 214:\n        if ( nptr )\n        {\n          v18 = sub_407CE0(nptr);\n          if ( v18 )\n            sub_407C50(v18, (unsigned int)v80, 83LL, &off_40CF80, nptr);\n          qword_612438 = (__int64)ptr;\n        }\n        else\n        {\n          qword_612438 = 3LL;\n        }\n        byte_612432 = 1;\n        v10 = 1;\n        continue;\n      case 228:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"a\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 229:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"o1\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 230:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"c\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 231:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"u2\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 233:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"fF\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 235:\n      case 251:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"x2\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 236:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"dI\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 237:\n        v17 = sub_407CE0(nptr);\n        if ( v17 )\n          sub_407C50(v17, (unsigned int)v80, 106LL, &off_40CF80, nptr);\nLABEL_20:\n        v10 = 1;\n        continue;\n      case 246:\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(\"d2\", v5, v14) & (unsigned int)v8;\n        continue;\n      case 247:\n        if ( !nptr )\n          goto LABEL_210;\n        v10 = 1;\n        LODWORD(v8) = (unsigned __int64)sub_4040C0(nptr, v5, v14) & (unsigned int)v8;\n        continue;\n      case 249:\n        byte_612251 = 0;\n        v10 = 1;\n        continue;\n      case 250:\n        if ( nptr )\n        {\n          v16 = sub_407CE0(nptr);\n          if ( v16 )\n            goto LABEL_208;\n          a4 = (unsigned __int64)ptr;\n          LOBYTE(v9) = 1;\n          v10 = 1;\n        }\n        else\n        {\n          LOBYTE(v9) = 1;\n          v10 = 1;\n          a4 = 32LL;\n        }\n        continue;\n      case 259:\n        byte_612431 = 1;\n        continue;\n      case 260:\n        v15 = dword_40D100[sub_4050D0(\"--endian\", nptr, off_40D110, dword_40D100, 4LL, off_612260)];\n        if ( v15 )\n        {\n          if ( v15 == 1 )\n            byte_612321 = 1;\n        }\n        else\n        {\n          byte_612321 = 0;\n        }\n        continue;\n      default:\n        goto LABEL_132;\n    }\n  }\n  if ( (_BYTE)v8 )\n  {\n    if ( byte_612432 && qword_6123F0 )\n    {\n      v76 = dcgettext(0LL, \"no type may be specified when dumping strings\", 5);\n      error(1, 0, v76);\nLABEL_208:\n      sub_407C50(v16, (unsigned int)v80, 119LL, &off_40CF80, nptr);\n    }\n    v21 = dword_6122DC;\n    v22 = (char *)(unsigned __int8)byte_612431;\n    v23 = v4 - dword_6122DC;\n    if ( v10 )\n    {\n      if ( !byte_612431 )\n        goto LABEL_60;\n      if ( v23 != 2 )\n      {\n        if ( v23 != 3 )\n        {\n          if ( v23 != 1 )\n            goto LABEL_59;\n          goto LABEL_113;\n        }\n        goto LABEL_133;\n      }\n    }\n    else if ( v23 != 2 )\n    {\n      if ( v23 != 3 )\n      {\n        if ( v23 != 1 )\n        {\nLABEL_59:\n          if ( v23 > 1 && byte_612431 )\n            goto LABEL_131;\n          goto LABEL_60;\n        }\n        if ( !byte_612431 && *v5[dword_6122DC] != 43 )\n        {\nLABEL_175:\n          v23 = 1;\n          goto LABEL_60;\n        }\nLABEL_113:\n        v12 = v5[dword_6122DC];\n        v11 = (unsigned __int64)&v80;\n        if ( (unsigned __int8)sub_402E40(v12) )\n        {\n          ++v5;\n          v23 = 0;\n          qword_612418 = v80;\n          goto LABEL_60;\n        }\n        goto LABEL_175;\n      }\nLABEL_133:\n      v23 = 3;\n      if ( !byte_612431 )\n        goto LABEL_60;\n      v12 = v5[dword_6122DC + 1];\n      v11 = (unsigned __int64)&v80;\n      if ( (unsigned __int8)sub_402E40(v12) )\n      {\n        v11 = (unsigned __int64)&ptr;\n        v12 = v5[dword_6122DC + 2];\n        if ( (unsigned __int8)sub_402E40(v12) )\n        {\n          byte_612430 = 1;\n          v23 = 1;\n          qword_612418 = v80;\n          v79 = (char *)ptr;\n          v22 = v5[dword_6122DC];\n          v5[dword_6122DC + 2] = v22;\n          v5 += 2;\n          goto LABEL_60;\n        }\n      }\n      v23 = 3;\n      goto LABEL_136;\n    }\n    v12 = v5[dword_6122DC + 1];\n    if ( !byte_612431 && *v12 != 43 && (unsigned int)(*v12 - 48) > 9 )\n    {\n      v23 = 2;\n      goto LABEL_60;\n    }\n    v11 = (unsigned __int64)&ptr;\n    if ( (unsigned __int8)sub_402E40(v12) )\n    {\n      if ( byte_612431 && (v11 = (unsigned __int64)&v80, v12 = v5[dword_6122DC], (unsigned __int8)sub_402E40(v12)) )\n      {\n        byte_612430 = 1;\n        v5 += 2;\n        v23 = 0;\n        qword_612418 = v80;\n        v79 = (char *)ptr;\n      }\n      else\n      {\n        v23 = 1;\n        qword_612418 = (__int64)ptr;\n        v22 = v5[dword_6122DC];\n        v5[dword_6122DC + 1] = v22;\n        ++v5;\n      }\nLABEL_60:\n      if ( byte_612430 )\n      {\n        if ( (char *)qword_612420 == (char *)nullsub_1 )\n        {\n          dword_612444 = 8;\n          dword_612440 = 7;\n          qword_612420 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_404010;\n        }\n        else\n        {\n          qword_612420 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_404090;\n        }\n      }\n      if ( byte_612410 )\n      {\n        qword_612400 = qword_612418 + qword_612408;\n        if ( __CFADD__(qword_612418, qword_612408) )\n        {\n          v75 = dcgettext(0LL, \"skip-bytes + read-bytes is too large\", 5);\n          error(1, 0, v75);\nLABEL_204:\n          __assert_fail(\"n_bytes_read == bytes_per_block\", \"src/od.c\", 0x575u, \"dump\");\n        }\n      }\n      if ( !qword_6123F0 )\n        goto LABEL_118;\n      while ( 1 )\n      {\n        v24 = &off_40D170;\n        if ( v23 > 0 )\n          v24 = (void **)&v5[dword_6122DC];\n        qword_6123D0 = (__int64)v24;\n        v23 = sub_403A50(v12, v11, v22);\n        if ( !stream )\n          goto LABEL_104;\n        v23 &= sub_403B50(qword_612418);\n        v78 = (unsigned __int8)v23;\n        if ( !stream )\n          goto LABEL_104;\n        v25 = 0LL;\n        if ( byte_612430 )\n          v25 = (__int64)&v79[-qword_612418];\n        v26 = qword_6123F0;\n        qword_612428 = v25;\n        if ( qword_6123F0 )\n        {\n          v27 = qword_6123F8;\n          v28 = 1;\n          v29 = (unsigned int *)(qword_6123F8 + 4);\n          do\n          {\n            v11 = dword_40D220[*v29];\n            v30 = v28;\n            for ( k = dword_40D220[*v29]; ; k = v32 )\n            {\n              v32 = v30 % k;\n              v30 = k;\n              if ( !v32 )\n                break;\n            }\n            v29 += 10;\n            v28 *= (unsigned int)(v11 / k);\n          }\n          while ( (unsigned int *)(qword_6123F8 + 40 * qword_6123F0 + 4) != v29 );\n          if ( !(_BYTE)v9 )\n          {\n            if ( v28 > 15 )\n            {\n              qword_6123E0 = v28;\nLABEL_83:\n              v35 = (unsigned int *)(v27 + 4);\n              v36 = qword_6123E0;\n              v37 = 0LL;\n              v38 = (unsigned int *)(v27 + 4);\n              v39 = v27 + 40 * v26 + 4;\n              do\n              {\n                v40 = qword_6123E0 / (unsigned __int64)dword_40D220[*v38] * (v38[6] + 1);\n                if ( v37 < v40 )\n                  v37 = v40;\n                v38 += 10;\n              }\n              while ( (unsigned int *)v39 != v38 );\n              do\n              {\n                v41 = *v35;\n                v35 += 10;\n                v11 = (unsigned int)v37 - *(v35 - 4) * (unsigned int)(v36 / dword_40D220[v41]);\n                *(v35 - 3) = v11;\n              }\n              while ( (unsigned int *)v39 != v35 );\n              goto LABEL_88;\n            }\nLABEL_129:\n            qword_6123E0 = v28 * (16 / v28);\n            goto LABEL_82;\n          }\n          v33 = v28;\n          if ( !a4 || a4 % v28 )\n            goto LABEL_81;\n        }\n        else\n        {\n          v28 = 1;\n          if ( !(_BYTE)v9 )\n            goto LABEL_129;\n          if ( !a4 )\n          {\n            v33 = 1LL;\n            v28 = 1;\nLABEL_81:\n            LODWORD(v79) = v28;\n            v34 = dcgettext(0LL, \"warning: invalid width %lu; using %d instead\", 5);\n            v11 = 0LL;\n            error(0, 0, v34, a4, (unsigned int)v79);\n            qword_6123E0 = v33;\n            v26 = qword_6123F0;\n            goto LABEL_82;\n          }\n        }\n        qword_6123E0 = a4;\nLABEL_82:\n        v27 = qword_6123F8;\n        if ( v26 )\n          goto LABEL_83;\nLABEL_88:\n        v42 = (unsigned __int8)byte_612432;\n        if ( byte_612432 )\n        {\n          v43 = 100LL;\n          if ( (unsigned __int64)qword_612438 >= 0x64 )\n            v43 = qword_612438;\n          ptr = (void *)v43;\n          v44 = sub_4077D0(v43);\n          v45 = qword_612418;\n          v9 = (char *)v44;\nLABEL_92:\n          v46 = qword_612438;\n          while ( 1 )\n          {\nLABEL_93:\n            v47 = v46;\n            if ( byte_612410 && (qword_612400 < v46 || qword_612400 - v46 <= v45) )\n            {\n              free(v9);\n              LOBYTE(v42) = (unsigned __int64)sub_4038F0(0) & v42;\n              goto LABEL_102;\n            }\n            if ( v46 )\n              break;\nLABEL_125:\n            while ( !byte_612410 || v45 < qword_612400 )\n            {\n              if ( ptr == (void *)v47 )\n                v9 = (char *)sub_407930(v9, &ptr);\n              ++v45;\n              v52 = sub_403D20(&v80);\n              a4 = (unsigned int)v80;\n              v42 &= v52;\n              if ( (v80 & 0x80000000) != 0LL )\n                goto LABEL_101;\n              if ( !(_DWORD)v80 )\n                break;\n              if ( !((*__ctype_b_loc())[(int)a4] & 0x4000) )\n                goto LABEL_92;\n              v9[v47++] = a4;\n            }\n            v9[v47] = 0;\n            v70 = ~v47;\n            v71 = v9;\n            qword_612420(v45 + v70, 32LL);\n            while ( 1 )\n            {\n              v72 = *v71;\n              LODWORD(v80) = *v71;\n              if ( !v72 )\n                break;\n              switch ( v72 )\n              {\n                case 7:\n                  fwrite_unlocked(\"\\\\a\", 1uLL, 2uLL, stdout);\n                  break;\n                case 8:\n                  fwrite_unlocked(\"\\\\b\", 1uLL, 2uLL, stdout);\n                  break;\n                case 9:\n                  fwrite_unlocked(\"\\\\t\", 1uLL, 2uLL, stdout);\n                  break;\n                case 10:\n                  fwrite_unlocked(\"\\\\n\", 1uLL, 2uLL, stdout);\n                  break;\n                case 11:\n                  fwrite_unlocked(\"\\\\v\", 1uLL, 2uLL, stdout);\n                  break;\n                case 12:\n                  fwrite_unlocked(\"\\\\f\", 1uLL, 2uLL, stdout);\n                  break;\n                case 13:\n                  fwrite_unlocked(&unk_40C2F4, 1uLL, 2uLL, stdout);\n                  break;\n                default:\n                  v73 = stdout->_IO_write_ptr;\n                  if ( v73 >= stdout->_IO_write_end )\n                  {\n                    __overflow(stdout, 2);\n                  }\n                  else\n                  {\n                    stdout->_IO_write_ptr = v73 + 1;\n                    *v73 = 2;\n                  }\n                  break;\n              }\n              ++v71;\n            }\n            v74 = stdout->_IO_write_ptr;\n            if ( v74 >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, 10);\n              v46 = qword_612438;\n            }\n            else\n            {\n              v46 = qword_612438;\n              stdout->_IO_write_ptr = v74 + 1;\n              *v74 = 10;\n            }\n          }\n          v47 = 0LL;\n          a4 = v45 + 1;\n          while ( 1 )\n          {\n            v45 = a4 + v47;\n            v49 = sub_403D20(&v80);\n            v50 = v80;\n            v42 &= v49;\n            if ( (v80 & 0x80000000) != 0LL )\n              break;\n            v48 = __ctype_b_loc();\n            v46 = qword_612438;\n            if ( !((*v48)[v50] & 0x4000) )\n              goto LABEL_93;\n            v9[v47++] = v50;\n            if ( v47 >= v46 )\n              goto LABEL_125;\n          }\nLABEL_101:\n          free(v9);\nLABEL_102:\n          v42 = (unsigned __int8)v42;\n        }\n        else\n        {\n          if ( qword_6123E0 & 0x4000000000000000LL\n            || ((unsigned __int64)qword_6123E0 * (unsigned __int128)2uLL) >> 64 != 0 )\n          {\n            sub_407A20(qword_6123E0, v11, ((unsigned __int64)qword_6123E0 * (unsigned __int128)2uLL) >> 64 != 0);\n          }\n          v56 = (char *)sub_4077D0(2 * qword_6123E0);\n          v57 = (unsigned __int8)byte_612410;\n          v9 = (char *)qword_612418;\n          ptr = v56;\n          v82 = &v56[qword_6123E0];\n          if ( byte_612410 )\n          {\n            while ( qword_612400 > (unsigned __int64)v9 )\n            {\n              v67 = qword_612400 - (_QWORD)v9;\n              v68 = (__int64)*(&ptr + (unsigned __int8)v42);\n              a4 = (unsigned __int8)v42;\n              if ( qword_612400 - (__int64)v9 > (unsigned __int64)qword_6123E0 )\n                v67 = qword_6123E0;\n              v69 = sub_4048A0(v67, *(&ptr + (unsigned __int8)v42), &v80);\n              v60 = v80;\n              v57 &= v69;\n              if ( v80 < qword_6123E0 )\n                goto LABEL_150;\n              if ( v80 != qword_6123E0 )\n                goto LABEL_204;\n              LOBYTE(v42) = v42 ^ 1;\n              sub_403D80(v9, v80, *(&ptr + (unsigned __int8)v42), v68);\n              v9 += v80;\n            }\n            v80 = 0LL;\n          }\n          else\n          {\n            a4 = 0LL;\n            while ( 1 )\n            {\n              v58 = (__int64)*(&ptr + (int)a4);\n              v59 = (unsigned int)v8 & (unsigned __int64)sub_4048A0(qword_6123E0, *(&ptr + (int)a4), &v80);\n              v60 = v80;\n              v57 = v59;\n              if ( v80 < qword_6123E0 )\n                break;\n              if ( v80 != qword_6123E0 )\n                __assert_fail(\"n_bytes_read == bytes_per_block\", \"src/od.c\", 0x583u, \"dump\");\n              LOBYTE(v42) = v42 ^ 1;\n              LODWORD(v8) = v59;\n              a4 = (unsigned __int8)v42;\n              sub_403D80(v9, v80, *(&ptr + (unsigned __int8)v42), v58);\n              v9 += v80;\n            }\nLABEL_150:\n            if ( v60 )\n            {\n              v61 = 0LL;\n              v62 = 1;\n              while ( v61 != qword_6123F0 )\n              {\n                v63 = dword_40D220[*(unsigned int *)(qword_6123F8 + 40 * v61 + 4)];\n                v64 = v62;\n                for ( l = dword_40D220[*(unsigned int *)(qword_6123F8 + 40 * v61 + 4)]; ; l = v66 )\n                {\n                  v66 = v64 % l;\n                  v64 = l;\n                  if ( !v66 )\n                    break;\n                }\n                ++v61;\n                v62 *= (unsigned int)(v63 / l);\n              }\n              a4 = (unsigned __int64)*(&ptr + a4);\n              memset((void *)(a4 + v60), 0, v62 * ((v62 + v60 - 1) / v62) - v60);\n              sub_403D80(v9, v60, *(&ptr + ((unsigned __int8)v42 ^ 1u)), a4);\n              v9 += v80;\n            }\n          }\n          qword_612420(v9, 10LL);\n          if ( byte_612410 && (unsigned __int64)v9 >= qword_612400 )\n            v57 &= sub_4038F0(0);\n          v42 = (unsigned __int8)v57;\n          free(ptr);\n        }\n        v5 = (char **)(v42 & v78);\n        v23 = (unsigned __int8)v42 & (unsigned __int8)v78 & 1;\nLABEL_104:\n        if ( !byte_6123C4 || (unsigned int)sub_408120(stdin) != -1 )\n          return (unsigned __int8)v23 ^ 1u;\n        v8 = dcgettext(0LL, \"standard input\", 5);\n        v11 = (unsigned int)*__errno_location();\n        error(1, v11, v8);\nLABEL_118:\n        v12 = \"oS\";\n        sub_4040C0(\"oS\", v11, v22);\n      }\n    }\n    v23 = 2;\nLABEL_136:\n    if ( byte_612431 )\n    {\n      v21 = dword_6122DC;\nLABEL_131:\n      v53 = sub_407210(v5[v21 + 1]);\n      v54 = dcgettext(0LL, \"extra operand %s\", 5);\n      error(0, 0, v54, v53);\n      v55 = dcgettext(0LL, \"compatibility mode supports at most one file\", 5);\n      error(0, 0, \"%s\", v55);\nLABEL_132:\n      sub_404960(1);\n    }\n    goto LABEL_60;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x401be0L", 
            "funcEndAddr": "0x402c5fL", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x402c60L", 
            "funcEndAddr": "0x402c8bL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_402C8B()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x402c8bL", 
            "funcEndAddr": "0x402caaL", 
            "funcName": "sub_402C8B"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402CAA()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x402caaL", 
            "funcEndAddr": "0x402ce1L", 
            "funcName": "sub_402CAA"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_402CE1()\n{\n  __int64 *result; // rax\n\n  if ( !byte_612308 )\n  {\n    while ( qword_612310 < (unsigned __int64)(&qword_611E48 - qword_611E40 - 1) )\n      ((void (*)(void))qword_611E40[++qword_612310])();\n    result = sub_402C8B();\n    byte_612308 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x402ce1L", 
            "funcEndAddr": "0x402d38L", 
            "funcName": "sub_402CE1"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402D38()\n{\n  return sub_402CAA();\n}\n", 
            "funcStartAddr": "0x402d38L", 
            "funcEndAddr": "0x402d3dL", 
            "funcName": "sub_402D38"
        }, 
        {
            "decompiledFuncCode": "void nullsub_1()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x402d40L", 
            "funcEndAddr": "0x402d41L", 
            "funcName": "nullsub_1"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_402D50(unsigned __int64 a1, char a2)\n{\n  unsigned __int64 v2; // r8\n  char *v3; // rcx\n  const char *v4; // rdi\n  unsigned __int64 v6; // rax\n  char v7; // al\n  char v8; // [rsp+17h] [rbp-11h]\n  char v9; // [rsp+18h] [rbp-10h]\n\n  v2 = a1;\n  v3 = &v8;\n  v9 = 0;\n  v8 = a2;\n  v4 = &v8 - dword_612440;\n  if ( dword_612444 != 10 )\n  {\n    if ( dword_612444 == 16 )\n    {\n      do\n      {\n        --v3;\n        v6 = v2 & 0xF;\n        v2 >>= 4;\n        *v3 = byte_40C2C4[v6];\n      }\n      while ( v2 );\n    }\n    else if ( dword_612444 == 8 )\n    {\n      do\n      {\n        --v3;\n        v7 = (v2 & 7) + 48;\n        v2 >>= 3;\n        *v3 = v7;\n      }\n      while ( v2 );\n    }\n    if ( v4 < v3 )\n      goto LABEL_5;\nLABEL_15:\n    v4 = v3;\n    return fputs_unlocked(v4, stdout);\n  }\n  while ( 1 )\n  {\n    *--v3 = v2 % 0xA + 48;\n    if ( v2 <= 9 )\n      break;\n    v2 /= 0xAuLL;\n  }\n  if ( v4 >= v3 )\n    goto LABEL_15;\n  do\nLABEL_5:\n    *--v3 = 48;\n  while ( v4 != v3 );\n  return fputs_unlocked(v4, stdout);\n}\n", 
            "funcStartAddr": "0x402d50L", 
            "funcEndAddr": "0x402e3dL", 
            "funcName": "sub_402D50"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_402E40(char *nptr)\n{\n  char *v1; // rbx\n\n  if ( !*nptr )\n    return 0;\n  v1 = nptr;\n  if ( *nptr == 43 )\n    v1 = nptr + 1;\n  strchr(v1, 46);\n  return (unsigned int)sub_407CE0(v1) == 0;\n}\n", 
            "funcStartAddr": "0x402e40L", 
            "funcEndAddr": "0x402eb2L", 
            "funcName": "sub_402E40"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_402EC0(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6)\n{\n  __int64 v6; // r14\n  __int64 v7; // r12\n  __int64 v8; // r15\n  __int64 v9; // [rsp+0h] [rbp-50h]\n\n  if ( a1 > a2 )\n  {\n    v6 = a3;\n    v7 = a6;\n    v8 = a6 * (a1 - 1);\n    v9 = a3 + a1 - a2;\n    do\n    {\n      ++v6;\n      v8 -= v7;\n      sub_407AC0((unsigned __int64)\"%*s\");\n    }\n    while ( v6 != v9 );\n  }\n}\n", 
            "funcStartAddr": "0x402ec0L", 
            "funcEndAddr": "0x402f71L", 
            "funcName": "sub_402EC0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_402F80(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, char a4, __int64 a5, int a6)\n{\n  __int64 v6; // r13\n  unsigned __int64 v7; // r14\n  __int64 v8; // r15\n  char *v9; // rdx\n  char *v10; // rax\n  char v11; // di\n  char v12; // [rsp+8h] [rbp-60h]\n  __int64 v13; // [rsp+18h] [rbp-50h]\n  __int64 v14; // [rsp+28h] [rbp-40h]\n  char v15; // [rsp+30h] [rbp-38h]\n\n  v12 = a4;\n  if ( a1 > a2 )\n  {\n    v6 = a3;\n    v13 = a6;\n    v7 = a1;\n    v8 = a6 * (a1 - 1);\n    do\n    {\n      --v7;\n      if ( byte_612321 )\n      {\n        v9 = (char *)(v6 + 7);\n        v10 = (char *)&v14;\n        do\n        {\n          v11 = *v9;\n          ++v10;\n          --v9;\n          *(v10 - 1) = v11;\n        }\n        while ( &v15 != v10 );\n      }\n      v6 += 8LL;\n      sub_407AC0(v12);\n      v8 -= v13;\n    }\n    while ( v7 != a2 );\n  }\n}\n", 
            "funcStartAddr": "0x402f80L", 
            "funcEndAddr": "0x40304fL", 
            "funcName": "sub_402F80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_403050(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, char a4, __int64 a5, int a6)\n{\n  __int64 v6; // r13\n  unsigned __int64 v7; // r14\n  __int64 v8; // r15\n  char *v9; // rdx\n  char *v10; // rax\n  char v11; // di\n  char v12; // [rsp+8h] [rbp-60h]\n  __int64 v13; // [rsp+18h] [rbp-50h]\n  __int64 v14; // [rsp+28h] [rbp-40h]\n  char v15; // [rsp+30h] [rbp-38h]\n\n  v12 = a4;\n  if ( a1 > a2 )\n  {\n    v6 = a3;\n    v13 = a6;\n    v7 = a1;\n    v8 = a6 * (a1 - 1);\n    do\n    {\n      --v7;\n      if ( byte_612321 )\n      {\n        v9 = (char *)(v6 + 7);\n        v10 = (char *)&v14;\n        do\n        {\n          v11 = *v9;\n          ++v10;\n          --v9;\n          *(v10 - 1) = v11;\n        }\n        while ( &v15 != v10 );\n      }\n      v6 += 8LL;\n      sub_407AC0(v12);\n      v8 -= v13;\n    }\n    while ( v7 != a2 );\n  }\n}\n", 
            "funcStartAddr": "0x403050L", 
            "funcEndAddr": "0x40311fL", 
            "funcName": "sub_403050"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403120(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, char a4, __int64 a5, int a6)\n{\n  __int64 v6; // r15\n  __int64 v7; // r13\n  __int64 result; // rax\n  char v9; // [rsp+0h] [rbp-58h]\n  __int64 v10; // [rsp+18h] [rbp-40h]\n\n  v9 = a4;\n  if ( a1 > a2 )\n  {\n    v10 = a6;\n    v6 = 0LL;\n    v7 = a6 * (a1 - 1);\n    do\n    {\n      ++v6;\n      result = sub_407AC0(v9);\n      v7 -= v10;\n    }\n    while ( a1 - a2 != v6 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403120L", 
            "funcEndAddr": "0x4031ffL", 
            "funcName": "sub_403120"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_403200@<rax>(__int64 a1@<rdx>, char a2@<cl>, unsigned __int64 a3@<rdi>, unsigned __int64 a4@<rsi>, int a5@<r9d>, int a6@<r14d>)\n{\n  __int64 v6; // rbp\n  __int64 v7; // r15\n  __int64 v8; // r13\n  __int64 result; // rax\n  int v10; // ecx\n  char v11; // [rsp+0h] [rbp-58h]\n  __int64 v12; // [rsp+18h] [rbp-40h]\n\n  v11 = a2;\n  if ( a3 > a4 )\n  {\n    v6 = a1;\n    v12 = a5;\n    v7 = 0LL;\n    v8 = a5 * (a3 - 1);\n    do\n    {\n      if ( byte_612321 )\n      {\n        LOBYTE(a6) = *(_BYTE *)(v6 + 2 * v7 + 1);\n        v10 = a6;\n        BYTE1(v10) = *(_BYTE *)(v6 + 2 * v7);\n        a6 = v10;\n      }\n      ++v7;\n      result = sub_407AC0(v11);\n      v8 -= v12;\n    }\n    while ( a3 - a4 != v7 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403200L", 
            "funcEndAddr": "0x4032bfL", 
            "funcName": "sub_403200"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_4032C0@<rax>(__int64 a1@<rdx>, char a2@<cl>, unsigned __int64 a3@<rdi>, unsigned __int64 a4@<rsi>, int a5@<r9d>, int a6@<r14d>)\n{\n  __int64 v6; // rbp\n  __int64 v7; // r15\n  __int64 v8; // r13\n  __int64 result; // rax\n  int v10; // ecx\n  char v11; // [rsp+0h] [rbp-58h]\n  __int64 v12; // [rsp+18h] [rbp-40h]\n\n  v11 = a2;\n  if ( a3 > a4 )\n  {\n    v6 = a1;\n    v12 = a5;\n    v7 = 0LL;\n    v8 = a5 * (a3 - 1);\n    do\n    {\n      if ( byte_612321 )\n      {\n        LOBYTE(a6) = *(_BYTE *)(v6 + 2 * v7 + 1);\n        v10 = a6;\n        BYTE1(v10) = *(_BYTE *)(v6 + 2 * v7);\n        a6 = v10;\n      }\n      ++v7;\n      result = sub_407AC0(v11);\n      v8 -= v12;\n    }\n    while ( a3 - a4 != v7 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4032c0L", 
            "funcEndAddr": "0x40337fL", 
            "funcName": "sub_4032C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403380(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, char a4, __int64 a5, int a6)\n{\n  __int64 v6; // r12\n  __int64 v7; // r15\n  __int64 v8; // r13\n  __int64 result; // rax\n  char v10; // [rsp+0h] [rbp-48h]\n  __int64 v11; // [rsp+8h] [rbp-40h]\n\n  v10 = a4;\n  if ( a1 > a2 )\n  {\n    v6 = a6;\n    v7 = a3;\n    v11 = a3 + a1 - a2;\n    v8 = a6 * (a1 - 1);\n    do\n    {\n      ++v7;\n      v8 -= v6;\n      result = sub_407AC0(v10);\n    }\n    while ( v7 != v11 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403380L", 
            "funcEndAddr": "0x403402L", 
            "funcName": "sub_403380"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403410(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, char a4, __int64 a5, int a6)\n{\n  __int64 v6; // r12\n  __int64 v7; // r15\n  __int64 v8; // r13\n  __int64 result; // rax\n  char v10; // [rsp+0h] [rbp-48h]\n  __int64 v11; // [rsp+8h] [rbp-40h]\n\n  v10 = a4;\n  if ( a1 > a2 )\n  {\n    v6 = a6;\n    v7 = a3;\n    v11 = a3 + a1 - a2;\n    v8 = a6 * (a1 - 1);\n    do\n    {\n      ++v7;\n      v8 -= v6;\n      result = sub_407AC0(v10);\n    }\n    while ( v7 != v11 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403410L", 
            "funcEndAddr": "0x403492L", 
            "funcName": "sub_403410"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4034A0(unsigned __int64 a1, unsigned __int64 a2, long double *a3, __int64 a4, __int64 a5, int a6)\n{\n  unsigned __int64 v6; // r15\n  long double *v7; // r13\n  __int64 v8; // r14\n  long double v9; // fst7\n  char *v10; // rdx\n  char *v11; // rax\n  char v12; // cl\n  long double v13; // [rsp+0h] [rbp-98h]\n  __int64 v14; // [rsp+28h] [rbp-70h]\n  long double nptr; // [rsp+30h] [rbp-68h]\n  char v16; // [rsp+40h] [rbp-58h]\n\n  if ( a1 > a2 )\n  {\n    v6 = a1;\n    v7 = a3;\n    v14 = a6;\n    v8 = a6 * (a1 - 1);\n    do\n    {\n      --v6;\n      if ( byte_612321 )\n      {\n        v10 = (char *)v7 + 15;\n        v11 = (char *)&nptr;\n        do\n        {\n          v12 = *v10;\n          ++v11;\n          --v10;\n          *(v11 - 1) = v12;\n        }\n        while ( &v16 != v11 );\n        v9 = nptr;\n      }\n      else\n      {\n        v9 = *v7;\n      }\n      v13 = v9;\n      ++v7;\n      sub_4054D0((char *)&nptr, *(_TBYTE *)&v13);\n      sub_407AC0((unsigned __int64)\"%*s\");\n      v8 -= v14;\n    }\n    while ( v6 != a2 );\n  }\n}\n", 
            "funcStartAddr": "0x4034a0L", 
            "funcEndAddr": "0x40358fL", 
            "funcName": "sub_4034A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_403590(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6)\n{\n  unsigned __int64 v6; // r15\n  __int64 v7; // r13\n  __int64 v8; // r14\n  char *v9; // rdx\n  char *v10; // rax\n  char v11; // cl\n  __int64 v12; // [rsp+18h] [rbp-70h]\n  char nptr[8]; // [rsp+20h] [rbp-68h]\n  char v14; // [rsp+28h] [rbp-60h]\n\n  if ( a1 > a2 )\n  {\n    v6 = a1;\n    v7 = a3;\n    v12 = a6;\n    v8 = a6 * (a1 - 1);\n    do\n    {\n      --v6;\n      if ( byte_612321 )\n      {\n        v9 = (char *)(v7 + 7);\n        v10 = nptr;\n        do\n        {\n          v11 = *v9;\n          ++v10;\n          --v9;\n          *(v10 - 1) = v11;\n        }\n        while ( &v14 != v10 );\n      }\n      v7 += 8LL;\n      sub_405250(nptr);\n      sub_407AC0((unsigned __int64)\"%*s\");\n      v8 -= v12;\n    }\n    while ( v6 != a2 );\n  }\n}\n", 
            "funcStartAddr": "0x403590L", 
            "funcEndAddr": "0x40367fL", 
            "funcName": "sub_403590"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403680(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6)\n{\n  __int64 v6; // r15\n  __int64 v7; // r14\n  __int64 result; // rax\n  __int64 v9; // [rsp+10h] [rbp-68h]\n  char nptr; // [rsp+20h] [rbp-58h]\n\n  if ( a1 > a2 )\n  {\n    v9 = a6;\n    v6 = 0LL;\n    v7 = a6 * (a1 - 1);\n    do\n    {\n      ++v6;\n      sub_405390(&nptr);\n      result = sub_407AC0((unsigned __int64)\"%*s\");\n      v7 -= v9;\n    }\n    while ( a1 - a2 != v6 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403680L", 
            "funcEndAddr": "0x40377fL", 
            "funcName": "sub_403680"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_403780(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6)\n{\n  __int64 v6; // r13\n  __int64 v7; // r15\n  __int64 v8; // r14\n  unsigned __int8 v9; // r8\n  const unsigned __int16 **v10; // rax\n  const char *v11; // rcx\n  __int64 v12; // [rsp+8h] [rbp-60h]\n  unsigned __int8 v13; // [rsp+17h] [rbp-51h]\n  __int64 v14; // [rsp+18h] [rbp-50h]\n  char v15; // [rsp+2Ch] [rbp-3Ch]\n\n  if ( a1 > a2 )\n  {\n    v6 = a6;\n    v7 = a6 * (a1 - 1);\n    v8 = a3;\n    v12 = a3 + a1 - a2;\n    do\n    {\n      v9 = *(_BYTE *)(++v8 - 1);\n      switch ( v9 )\n      {\n        case 0u:\n        case 7u:\n        case 8u:\n        case 9u:\n        case 0xAu:\n        case 0xBu:\n        case 0xCu:\n        case 0xDu:\n          break;\n        default:\n          v14 = v9;\n          v13 = *(_BYTE *)(v8 - 1);\n          v10 = __ctype_b_loc();\n          v11 = \"%c\";\n          if ( !((*v10)[v14] & 0x4000) )\n            v11 = \"%03o\";\n          __sprintf_chk(&v15, 1LL, 4LL, v11, v13);\n          break;\n      }\n      v7 -= v6;\n      sub_407AC0((unsigned __int64)\"%*s\");\n    }\n    while ( v8 != v12 );\n  }\n}\n", 
            "funcStartAddr": "0x403780L", 
            "funcEndAddr": "0x4038f0L", 
            "funcName": "sub_403780"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4038F0(int errnum)\n{\n  unsigned int v1; // ebx\n  __int64 v3; // rbx\n  char *v4; // rax\n  char *v5; // rax\n  __int64 v6; // rbx\n  int *v7; // rax\n  __int64 v8; // rcx\n\n  v1 = 1;\n  if ( stream )\n  {\n    if ( stream->_flags & 0x20 )\n    {\n      v3 = sub_407090(0LL, 3LL, qword_6123D8);\n      v4 = dcgettext(0LL, \"%s: read error\", 5);\n      error(0, errnum, v4, v3);\n      v1 = 0;\n      if ( strcmp(*(const char **)(qword_6123D0 - 8), \"-\") )\n        sub_408120(stream);\n    }\n    else if ( !strcmp(*(const char **)(qword_6123D0 - 8), \"-\") || !(unsigned int)sub_408120(stream) )\n    {\n      v1 = 1;\n    }\n    else\n    {\n      v6 = sub_407090(0LL, 3LL, qword_6123D8);\n      v7 = __errno_location();\n      v8 = v6;\n      v1 = 0;\n      error(0, *v7, \"%s\", v8);\n    }\n    stream = 0LL;\n  }\n  if ( !(stdout->_flags & 0x20) )\n    return v1;\n  v5 = dcgettext(0LL, \"write error\", 5);\n  error(0, 0, v5);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4038f0L", 
            "funcEndAddr": "0x403a45L", 
            "funcName": "sub_4038F0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403A50()\n{\n  unsigned int v0; // ebx\n  char *v1; // rax\n  FILE *v2; // rax\n  const char *v3; // rdx\n  __int64 v5; // rbx\n  int *v6; // rax\n  __int64 v7; // rcx\n\n  v0 = 1;\n  while ( 1 )\n  {\n    v3 = *(const char **)qword_6123D0;\n    qword_6123D8 = (__int64)v3;\n    if ( !v3 )\n      return v0;\n    qword_6123D0 += 8LL;\n    if ( !strcmp(v3, \"-\") )\n    {\n      v1 = dcgettext(0LL, \"standard input\", 5);\n      byte_6123C4 = 1;\n      qword_6123D8 = (__int64)v1;\n      v2 = stdin;\n      stream = stdin;\n    }\n    else\n    {\n      v2 = fopen(v3, \"r\");\n      stream = v2;\n      if ( v2 )\n      {\nLABEL_7:\n        if ( byte_612410 && !byte_612432 )\n          setvbuf(v2, 0LL, 2, 0LL);\n        return v0;\n      }\n      v5 = sub_407090(0LL, 3LL, qword_6123D8);\n      v6 = __errno_location();\n      v7 = v5;\n      v0 = 0;\n      error(0, *v6, \"%s\", v7);\n      v2 = stream;\n    }\n    if ( v2 )\n      goto LABEL_7;\n  }\n}\n", 
            "funcStartAddr": "0x403a50L", 
            "funcEndAddr": "0x403b4fL", 
            "funcName": "sub_403A50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403B50(unsigned __int64 a1)\n{\n  FILE *v1; // rbp\n  unsigned __int64 v2; // rbx\n  unsigned int v3; // er12\n  __int64 v4; // rax\n  int v5; // er12\n  int v6; // eax\n  int v7; // eax\n  __int64 v8; // rbp\n  int *v9; // rax\n  unsigned __int64 v10; // rbp\n  __int64 v11; // rax\n  char *v13; // rax\n  __int64 v14; // [rsp+0h] [rbp-20B8h]\n  int v15; // [rsp+18h] [rbp-20A0h]\n  unsigned __int64 v16; // [rsp+30h] [rbp-2088h]\n  __int64 v17; // [rsp+38h] [rbp-2080h]\n  char v18; // [rsp+90h] [rbp-2028h]\n\n  if ( !a1 )\n    return 1;\n  v1 = stream;\n  if ( !stream )\n  {\nLABEL_27:\n    v13 = dcgettext(0LL, \"cannot skip past end of combined input\", 5);\n    error(1, 0, v13);\n    return 1;\n  }\n  v2 = a1;\n  v3 = 1;\n  while ( 1 )\n  {\n    v7 = fileno(v1);\n    if ( __fxstat(1, v7, (struct stat *)&v14) )\n    {\n      v3 = 0;\n      v8 = sub_407090(0LL, 3LL, qword_6123D8);\n      v9 = __errno_location();\n      error(0, *v9, \"%s\", v8);\n      goto LABEL_10;\n    }\n    if ( (v15 & 0xD000) != 0x8000 )\n      break;\n    v4 = v17;\n    if ( (unsigned __int64)(v17 - 1) > 0x1FFFFFFFFFFFFFFFLL )\n      v4 = 512LL;\n    if ( (__int64)v16 <= v4 )\n      break;\n    if ( v16 >= v2 )\n    {\n      if ( (unsigned int)sub_4081E0(v1, v2, 1LL) )\n        v3 = 0;\n      return v3;\n    }\n    v2 -= v16;\nLABEL_10:\n    v5 = (unsigned __int64)sub_4038F0(0) & v3;\n    v6 = sub_403A50();\n    v1 = stream;\n    v3 = v6 & v5;\n    if ( !stream )\n      goto LABEL_27;\n  }\n  v10 = 0x2000LL;\n  while ( 1 )\n  {\n    if ( v10 > v2 )\n      v10 = v2;\n    v11 = __fread_unlocked_chk(&v18, 0x2000LL, 1LL, v10, stream);\n    v2 -= v11;\n    if ( v11 != v10 )\n    {\n      if ( stream->_flags & 0x20 )\n        return 0;\n      if ( stream->_flags & 0x10 )\n        break;\n    }\n    if ( !v2 )\n      return v3;\n  }\n  if ( v2 )\n    goto LABEL_10;\n  return v3;\n}\n", 
            "funcStartAddr": "0x403b50L", 
            "funcEndAddr": "0x403d14L", 
            "funcName": "sub_403B50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403D20(int *a1)\n{\n  int *v1; // r12\n  unsigned int v2; // ebp\n  FILE *i; // rdi\n  int *v4; // rax\n  int v5; // ebx\n  int v6; // eax\n  int v7; // eax\n\n  v1 = a1;\n  v2 = 1;\n  *a1 = -1;\n  for ( i = stream; stream; v2 &= v6 & v5 )\n  {\n    v7 = fgetc(i);\n    *v1 = v7;\n    if ( v7 != -1 )\n      break;\n    v4 = __errno_location();\n    v5 = sub_4038F0(*v4);\n    v6 = sub_403A50();\n    i = stream;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x403d20L", 
            "funcEndAddr": "0x403d78L", 
            "funcName": "sub_403D20"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_403D80(__int64 a1, size_t a2, const void *a3, char *a4)\n{\n  char *v4; // r15\n  size_t v5; // r14\n  unsigned __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rax\n  __int64 v9; // rbx\n  unsigned __int64 v10; // rcx\n  unsigned __int64 v11; // r13\n  unsigned __int64 v12; // r12\n  char *v13; // rbx\n  const unsigned __int16 **v14; // r12\n  __int64 v15; // rax\n  int v16; // esi\n  char *v17; // rdx\n  char *v18; // rax\n  int v19; // [rsp+Ch] [rbp-4Ch]\n  size_t v20; // [rsp+10h] [rbp-48h]\n\n  v4 = a4;\n  v5 = a2;\n  if ( byte_612251 && !byte_612250 && qword_6123E0 == a2 && !memcmp(a3, a4, a2) )\n  {\n    if ( !byte_612320 )\n    {\n      puts(\"*\");\n      byte_612320 = 1;\n    }\n  }\n  else\n  {\n    byte_612320 = 0;\n    if ( qword_6123F0 )\n    {\n      v6 = 0LL;\n      v20 = (size_t)&v4[a2];\n      do\n      {\n        v9 = 40 * v6;\n        v10 = dword_40D220[*(unsigned int *)(qword_6123F8 + 40 * v6 + 4)];\n        v11 = qword_6123E0 / v10;\n        v19 = qword_6123E0 / v10;\n        v12 = (qword_6123E0 - v5) / v10;\n        if ( v6 )\n          __printf_chk(1LL, \"%*s\", (unsigned int)dword_612440, \"\");\n        else\n          qword_612420(a1, 0LL);\n        (*(void (__fastcall **)(_QWORD, _QWORD, char *, __int64, _QWORD, _QWORD))(v9 + qword_6123F8 + 8))(\n          (int)v11,\n          (int)v12,\n          v4,\n          v9 + qword_6123F8 + 16,\n          *(unsigned int *)(v9 + qword_6123F8 + 28),\n          *(unsigned int *)(v9 + qword_6123F8 + 32));\n        v7 = qword_6123F8 + v9;\n        if ( *(_BYTE *)(v7 + 24) )\n        {\n          __printf_chk(\n            1LL,\n            \"%*s\",\n            (unsigned int)((int)v12 * *(_DWORD *)(v7 + 32) / v19 + *(_DWORD *)(v7 + 28) * v12),\n            \"\");\n          fwrite_unlocked(\"  >\", 1uLL, 3uLL, stdout);\n          if ( v5 )\n          {\n            v13 = v4;\n            v14 = __ctype_b_loc();\n            do\n            {\n              v15 = (unsigned __int8)*(++v13 - 1);\n              v16 = (unsigned __int8)v15;\n              if ( !((*v14)[v15] & 0x4000) )\n              {\n                v16 = 46;\n                LOBYTE(v15) = 46;\n              }\n              v17 = stdout->_IO_write_ptr;\n              if ( v17 >= stdout->_IO_write_end )\n              {\n                __overflow(stdout, v16);\n              }\n              else\n              {\n                stdout->_IO_write_ptr = v17 + 1;\n                *v17 = v15;\n              }\n            }\n            while ( v13 != (char *)v20 );\n          }\n          v18 = stdout->_IO_write_ptr;\n          if ( v18 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 60);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v18 + 1;\n            *v18 = 60;\n          }\n        }\n        v8 = stdout->_IO_write_ptr;\n        if ( v8 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 10);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v8 + 1;\n          *v8 = 10;\n        }\n        ++v6;\n      }\n      while ( qword_6123F0 > v6 );\n    }\n  }\n  byte_612250 = 0;\n}\n", 
            "funcStartAddr": "0x403d80L", 
            "funcEndAddr": "0x40400fL", 
            "funcName": "sub_403D80"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_404010(unsigned __int64 a1, unsigned __int8 a2)\n{\n  char *v2; // rax\n  char *v3; // rax\n\n  v2 = stdout->_IO_write_ptr;\n  if ( v2 >= stdout->_IO_write_end )\n  {\n    __overflow(stdout, 40);\n  }\n  else\n  {\n    stdout->_IO_write_ptr = v2 + 1;\n    *v2 = 40;\n  }\n  LODWORD(v3) = sub_402D50(a1, 41);\n  if ( a2 )\n  {\n    v3 = stdout->_IO_write_ptr;\n    if ( v3 >= stdout->_IO_write_end )\n    {\n      LODWORD(v3) = __overflow(stdout, a2);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v3 + 1;\n      *v3 = a2;\n    }\n  }\n  return (int)v3;\n}\n", 
            "funcStartAddr": "0x404010L", 
            "funcEndAddr": "0x40408cL", 
            "funcName": "sub_404010"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_404090(unsigned __int64 a1, unsigned __int8 a2)\n{\n  sub_402D50(a1, 32);\n  return sub_404010(qword_612428 + a1, a2);\n}\n", 
            "funcStartAddr": "0x404090L", 
            "funcEndAddr": "0x4040beL", 
            "funcName": "sub_404090"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4040C0(char *a1, __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  char *v4; // r15\n  char *v5; // r13\n  unsigned __int64 v6; // rcx\n  __int64 v7; // rdi\n  __int64 v8; // rbp\n  char v9; // cl\n  char v10; // al\n  __int64 v11; // rcx\n  char *v12; // rbx\n  unsigned __int64 v13; // r8\n  int v14; // er14\n  const char *v15; // rsi\n  __int64 v16; // rbx\n  char *v17; // rax\n  int v19; // eax\n  unsigned __int64 v20; // r8\n  bool v21; // cc\n  int v22; // er11\n  char *v23; // r8\n  int v24; // er11\n  int v25; // eax\n  bool v26; // al\n  char *v27; // rbx\n  bool v28; // zf\n  __int64 v29; // rax\n  unsigned int v30; // ebx\n  __int64 v31; // rbp\n  char *v32; // rax\n  __int64 v33; // rax\n  int v34; // er11\n  char *v35; // r8\n  char *v36; // rdi\n  int v37; // eax\n  int v38; // eax\n  __int64 v39; // rdi\n  int v40; // eax\n  __int64 v41; // rbx\n  char *v42; // rax\n  unsigned __int64 v43; // [rsp+0h] [rbp-40h]\n  int v44; // [rsp+0h] [rbp-40h]\n  unsigned int v45; // [rsp+0h] [rbp-40h]\n  unsigned int v46; // [rsp+0h] [rbp-40h]\n  int v47; // [rsp+0h] [rbp-40h]\n\n  v3 = qword_6123F0;\n  if ( *a1 )\n  {\n    v4 = a1;\n    v5 = a1;\n    while ( 2 )\n    {\n      v6 = qword_6123E8;\n      v7 = qword_6123F8;\n      if ( qword_6123E8 > v3 )\n        goto LABEL_4;\n      if ( qword_6123F8 )\n      {\n        if ( (unsigned __int64)qword_6123E8 > 0x222222222222221LL )\n          goto LABEL_53;\n        v6 = qword_6123E8 + ((unsigned __int64)qword_6123E8 >> 1) + 1;\n      }\n      else\n      {\n        if ( !qword_6123E8 )\n        {\n          a2 = 120LL;\n          v6 = 3LL;\n          goto LABEL_40;\n        }\n        a3 = ((unsigned __int64)qword_6123E8 * (unsigned __int128)0x28uLL) >> 64 != 0;\n        if ( 40 * qword_6123E8 < 0 || ((unsigned __int64)qword_6123E8 * (unsigned __int128)0x28uLL) >> 64 != 0 )\nLABEL_53:\n          sub_407A20(qword_6123F8, a2, a3);\n      }\n      a2 = 40 * v6;\nLABEL_40:\n      qword_6123E8 = v6;\n      v33 = sub_407830(qword_6123F8, a2);\n      v7 = v33;\n      qword_6123F8 = v33;\n      v3 = qword_6123F0;\nLABEL_4:\n      v8 = v7 + 40 * v3;\n      if ( !v8 )\n        __assert_fail(\"tspec != NULL\", \"src/od.c\", 0x285u, \"decode_one_format\");\n      v9 = *v4;\n      switch ( *v4 )\n      {\n        case 97:\n          v12 = v4 + 1;\n          v24 = 3;\n          a3 = (unsigned __int64)sub_402EC0;\n          v25 = 5;\n          v14 = 1;\n          goto LABEL_31;\n        case 99:\n          v12 = v4 + 1;\n          v24 = 3;\n          a3 = (unsigned __int64)sub_403780;\n          v25 = 6;\n          v14 = 1;\n          goto LABEL_31;\n        case 100:\n        case 111:\n        case 117:\n        case 120:\n          v19 = v4[1];\n          if ( v4[1] == 73 )\n          {\n            v12 = v4 + 2;\n            v14 = dword_6123B0;\n            v20 = 4LL;\n            goto LABEL_23;\n          }\n          if ( v4[1] <= 73 )\n          {\n            if ( (_BYTE)v19 == 67 )\n            {\n              v12 = v4 + 2;\n              v14 = qword_6123A4;\n              v20 = 1LL;\n              v21 = v9 <= 111;\n              if ( v9 != 111 )\n              {\nLABEL_24:\n                if ( v21 )\n                {\n                  if ( v9 == 100 )\n                  {\n                    v34 = dword_40D320[v20];\n                    v35 = \"ld\";\n                    if ( (unsigned int)(v14 - 4) >= 2 )\n                      v35 = \"d\";\n                    a2 = 1LL;\n                    v47 = v34;\n                    __sprintf_chk(v8 + 16, 1LL, 8LL, \"%%*%s\", v35);\n                    v24 = v47;\n                    switch ( v14 )\n                    {\n                      case 1:\n                        a3 = (unsigned __int64)sub_403410;\n                        v25 = 0;\n                        goto LABEL_31;\n                      case 2:\n                        a3 = (unsigned __int64)sub_4032C0;\n                        v25 = 0;\n                        goto LABEL_31;\n                      case 3:\n                        a3 = (unsigned __int64)sub_403120;\n                        v25 = 0;\n                        goto LABEL_31;\n                      case 4:\n                        a3 = (unsigned __int64)sub_403050;\n                        v25 = 0;\n                        goto LABEL_31;\n                      case 5:\n                        a3 = (unsigned __int64)sub_402F80;\n                        v25 = 0;\n                        goto LABEL_31;\n                      default:\n                        break;\n                    }\n                  }\n                }\n                else\n                {\n                  if ( v9 == 117 )\n                  {\n                    v22 = dword_40D2C0[v20];\n                    v23 = \"lu\";\n                    if ( (unsigned int)(v14 - 4) >= 2 )\n                      v23 = \"u\";\n                    a2 = 1LL;\n                    v44 = v22;\n                    __sprintf_chk(v8 + 16, 1LL, 8LL, \"%%*%s\", v23);\n                    v24 = v44;\n                    v25 = 1;\nLABEL_29:\n                    switch ( v14 )\n                    {\n                      case 1:\n                        a3 = (unsigned __int64)sub_403380;\n                        goto LABEL_31;\n                      case 2:\n                        a3 = (unsigned __int64)sub_403200;\n                        goto LABEL_31;\n                      case 3:\n                        a3 = (unsigned __int64)sub_403120;\n                        goto LABEL_31;\n                      case 4:\n                        a3 = (unsigned __int64)sub_403050;\n                        goto LABEL_31;\n                      case 5:\n                        a3 = (unsigned __int64)sub_402F80;\n                        goto LABEL_31;\n                      default:\n                        goto LABEL_61;\n                    }\n                  }\n                  if ( v9 == 120 )\n                  {\n                    a2 = 1LL;\n                    v46 = dword_40D260[v20];\n                    __sprintf_chk(v8 + 16, 1LL, 8LL, \"%%*.%d%s\", v46);\n                    v24 = v46;\n                    switch ( v14 )\n                    {\n                      case 1:\n                        a3 = (unsigned __int64)sub_403380;\n                        v25 = 3;\n                        goto LABEL_31;\n                      case 2:\n                        a3 = (unsigned __int64)sub_403200;\n                        v25 = 3;\n                        goto LABEL_31;\n                      case 3:\n                        a3 = (unsigned __int64)sub_403120;\n                        v25 = 3;\n                        goto LABEL_31;\n                      case 4:\n                        a3 = (unsigned __int64)sub_403050;\n                        v25 = 3;\n                        goto LABEL_31;\n                      case 5:\n                        a3 = (unsigned __int64)sub_402F80;\n                        v25 = 3;\n                        goto LABEL_31;\n                      default:\n                        break;\n                    }\n                  }\n                }\nLABEL_61:\n                abort();\n              }\nLABEL_43:\n              a2 = 1LL;\n              v45 = dword_40D380[v20];\n              __sprintf_chk(v8 + 16, 1LL, 8LL, \"%%*.%d%s\", v45);\n              v25 = 2;\n              v24 = v45;\n              goto LABEL_29;\n            }\n          }\n          else\n          {\n            if ( (_BYTE)v19 == 76 )\n            {\n              v12 = v4 + 2;\n              v14 = dword_6123C0;\n              v20 = 8LL;\n              goto LABEL_23;\n            }\n            if ( (_BYTE)v19 == 83 )\n            {\n              v14 = HIDWORD(qword_6123A4);\n              v12 = v4 + 2;\n              v20 = 2LL;\n              goto LABEL_23;\n            }\n          }\n          v38 = v19 - 48;\n          if ( (unsigned int)v38 > 9 )\n          {\n            v14 = dword_6123B0;\n            v12 = v4 + 1;\n            v20 = 4LL;\n          }\n          else\n          {\n            v12 = v4 + 2;\n            v39 = v38;\n            v20 = 0LL;\n            while ( 1 )\n            {\n              v20 = v39 + 10 * v20;\n              v40 = *v12 - 48;\n              if ( (unsigned int)v40 > 9 )\n                break;\n              v39 = v40;\n              ++v12;\n              if ( ~(__int64)v40 / 0xAuLL < v20 )\n                goto LABEL_83;\n            }\n            if ( v12 == v4 + 1 )\n            {\n              v14 = dword_6123B0;\n              v20 = 4LL;\n            }\n            else if ( v20 > 8 || (v14 = dword_6123A0[v20]) == 0 )\n            {\n              v43 = v20;\n              v15 = \"invalid type string %s;\\nthis system doesn't provide a %lu-byte integral type\";\n              v16 = sub_407210(v5);\n              goto LABEL_17;\n            }\n          }\nLABEL_23:\n          v21 = v9 <= 111;\n          if ( v9 != 111 )\n            goto LABEL_24;\n          goto LABEL_43;\n        case 102:\n          v10 = v4[1];\n          switch ( v10 )\n          {\n            case 70:\n              v12 = v4 + 2;\n              v14 = dword_612350;\n              break;\n            case 76:\n              v12 = v4 + 2;\n              v14 = dword_612380;\n              break;\n            case 68:\n              v14 = dword_612360;\n              v12 = v4 + 2;\n              break;\n            default:\n              a2 = (__int64)(v4 + 1);\n              LODWORD(v11) = v10 - 48;\n              if ( (unsigned int)v11 > 9 )\n              {\n                v14 = dword_612360;\n                v12 = v4 + 1;\n              }\n              else\n              {\n                v12 = v4 + 2;\n                v11 = (int)v11;\n                v13 = 0LL;\n                while ( 1 )\n                {\n                  v13 = v11 + 10 * v13;\n                  LODWORD(v11) = *v12 - 48;\n                  if ( (unsigned int)v11 > 9 )\n                    break;\n                  v11 = (int)v11;\n                  ++v12;\n                  if ( ~(__int64)(int)v11 / 0xAuLL < v13 )\n                  {\nLABEL_83:\n                    v41 = sub_407210(v5);\n                    v42 = dcgettext(0LL, \"invalid type string %s\", 5);\n                    error(0, 0, v42, v41);\n                    return 0LL;\n                  }\n                }\n                v14 = dword_612360;\n                if ( (char *)a2 != v12 )\n                {\n                  if ( v13 > 0x10 || (v14 = dword_612340[v13]) == 0 )\n                  {\n                    v43 = v13;\n                    v15 = \"invalid type string %s;\\nthis system doesn't provide a %lu-byte floating point type\";\n                    v16 = sub_407210(v5);\nLABEL_17:\n                    v17 = dcgettext(0LL, v15, 5);\n                    error(0, 0, v17, v16, v43);\n                    return 0LL;\n                  }\n                }\n              }\n              break;\n          }\n          v36 = localeconv()->decimal_point;\n          v37 = 1;\n          if ( *v36 )\n            v37 = strlen(v36);\n          switch ( v14 )\n          {\n            case 7:\n              v24 = v37 + 23;\n              a3 = (unsigned __int64)sub_403590;\n              v25 = 4;\n              break;\n            case 8:\n              v24 = v37 + 28;\n              a3 = (unsigned __int64)sub_4034A0;\n              v25 = 4;\n              break;\n            case 6:\n              v24 = v37 + 14;\n              a3 = (unsigned __int64)sub_403680;\n              v25 = 4;\n              break;\n            default:\n              goto LABEL_61;\n          }\nLABEL_31:\n          *(_DWORD *)v8 = v25;\n          *(_DWORD *)(v8 + 4) = v14;\n          *(_QWORD *)(v8 + 8) = a3;\n          *(_DWORD *)(v8 + 28) = v24;\n          v26 = *v12 == 122;\n          *(_BYTE *)(v8 + 24) = v26;\n          v27 = &v12[v26];\n          if ( v27 == v4 )\n            __assert_fail(\"s != next\", \"src/od.c\", 0x3E3u, \"decode_format_string\");\n          v4 = v27;\n          v3 = qword_6123F0 + 1;\n          v28 = *v27 == 0;\n          ++qword_6123F0;\n          if ( v28 )\n            return 1LL;\n          continue;\n        default:\n          v29 = sub_407210(v5);\n          v30 = *v4;\n          v31 = v29;\n          v32 = dcgettext(0LL, \"invalid character '%c' in type string %s\", 5);\n          error(0, 0, v32, v30, v31);\n          return 0LL;\n      }\n    }\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x4040c0L", 
            "funcEndAddr": "0x404894L", 
            "funcName": "sub_4040C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4048A0(unsigned __int64 a1, __int64 a2, __int64 *a3)\n{\n  unsigned __int64 v3; // r12\n  FILE *v4; // rcx\n  __int64 *v5; // rbx\n  __int64 v6; // rdi\n  unsigned int v7; // ebp\n  int *v8; // rax\n  int v9; // er14\n  int v10; // eax\n  size_t v11; // rax\n\n  if ( !a1 || (v3 = a1, qword_6123E0 < a1) )\n    __assert_fail(\"0 < n && n <= bytes_per_block\", \"src/od.c\", 0x507u, \"read_block\");\n  v4 = stream;\n  v5 = a3;\n  *a3 = 0LL;\n  if ( v4 )\n  {\n    v6 = 0LL;\n    v7 = 1;\n    while ( 1 )\n    {\n      v11 = fread_unlocked((void *)(a2 + v6), 1uLL, v3 - v6, v4);\n      *v5 += v11;\n      if ( v3 - v6 == v11 )\n        break;\n      v8 = __errno_location();\n      v9 = sub_4038F0(*v8);\n      v10 = sub_403A50();\n      v4 = stream;\n      v7 &= v10 & v9;\n      if ( !stream )\n        break;\n      v6 = *v5;\n    }\n  }\n  else\n  {\n    v7 = 1;\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x4048a0L", 
            "funcEndAddr": "0x404952L", 
            "funcName": "sub_4048A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_404960(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  FILE *v24; // rbp\n  char *v25; // rax\n  FILE *v26; // rbp\n  char *v27; // rax\n  FILE *v28; // rbp\n  char *v29; // rax\n  FILE *v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rbp\n  char *v33; // rax\n  const char **v34; // rax\n  char *v35; // rbp\n  char *v36; // rax\n  char *v37; // rax\n  char *v38; // r12\n  char *v39; // rax\n  char *v40; // rax\n  char *v41; // rax\n  char *v42; // rax\n  char *v43; // rax\n  char *v44; // rax\n  __int64 v45; // rcx\n  const char *v46; // [rsp+0h] [rbp-88h]\n  const char *v47; // [rsp+8h] [rbp-80h]\n  const char *v48; // [rsp+10h] [rbp-78h]\n  const char *v49; // [rsp+18h] [rbp-70h]\n  const char *v50; // [rsp+20h] [rbp-68h]\n  const char *v51; // [rsp+28h] [rbp-60h]\n  const char *v52; // [rsp+30h] [rbp-58h]\n  const char *v53; // [rsp+38h] [rbp-50h]\n  const char *v54; // [rsp+40h] [rbp-48h]\n  const char *v55; // [rsp+48h] [rbp-40h]\n  const char *v56; // [rsp+50h] [rbp-38h]\n  const char *v57; // [rsp+58h] [rbp-30h]\n  __int64 v58; // [rsp+60h] [rbp-28h]\n  __int64 v59; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_612458;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(\n         0LL,\n         \"Usage: %s [OPTION]... [FILE]...\\n\"\n         \"  or:  %s [-abcdfilosx]... [FILE] [[+]OFFSET[.][b]]\\n\"\n         \"  or:  %s --traditional [OPTION]... [FILE] [[+]OFFSET[.][b] [+][LABEL][.][b]]\\n\",\n         5);\n  __printf_chk(1LL, v3, v1, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"Write an unambiguous representation, octal bytes by default,\\n\"\n         \"of FILE to standard output.  With more than one FILE argument,\\n\"\n         \"concatenate them in the listed order to form the input.\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"If first and second call formats both apply, the second format is assumed\\n\"\n         \"if the last operand begins with + or (if there are 2 operands) a digit.\\n\"\n         \"An OFFSET operand means -j OFFSET.  LABEL is the pseudo-address\\n\"\n         \"at first byte printed, incremented when dump is progressing.\\n\"\n         \"For OFFSET and LABEL, a 0x or 0X prefix indicates hexadecimal;\\n\"\n         \"suffixes may be . for octal and b for multiply by 512.\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  -A, --address-radix=RADIX   output format for file offsets; RADIX is one\\n\"\n          \"                                of [doxn], for Decimal, Octal, Hex or None\\n\"\n          \"      --endian={big|little}   swap input bytes according the specified order\\n\"\n          \"  -j, --skip-bytes=BYTES      skip BYTES input bytes first\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"  -N, --read-bytes=BYTES      limit dump to BYTES input bytes\\n\"\n          \"  -S BYTES, --strings[=BYTES]  output strings of at least BYTES graphic chars;\\n\"\n          \"                                3 is implied when BYTES is not specified\\n\"\n          \"  -t, --format=TYPE           select output format or formats\\n\"\n          \"  -v, --output-duplicates     do not use * to mark line suppression\\n\"\n          \"  -w[BYTES], --width[=BYTES]  output BYTES bytes per output line;\\n\"\n          \"                                32 is implied when BYTES is not specified\\n\"\n          \"      --traditional           accept arguments in third form above\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"\\n\"\n          \"Traditional format specifications may be intermixed; they accumulate:\\n\"\n          \"  -a   same as -t a,  select named characters, ignoring high-order bit\\n\"\n          \"  -b   same as -t o1, select octal bytes\\n\"\n          \"  -c   same as -t c,  select printable characters or backslash escapes\\n\"\n          \"  -d   same as -t u2, select unsigned decimal 2-byte units\\n\",\n          5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(\n          0LL,\n          \"  -f   same as -t fF, select floats\\n\"\n          \"  -i   same as -t dI, select decimal ints\\n\"\n          \"  -l   same as -t dL, select decimal longs\\n\"\n          \"  -o   same as -t o2, select octal 2-byte units\\n\"\n          \"  -s   same as -t d2, select decimal 2-byte units\\n\"\n          \"  -x   same as -t x2, select hexadecimal 2-byte units\\n\",\n          5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"\\n\"\n          \"TYPE is made up of one or more of these specifications:\\n\"\n          \"  a          named character, ignoring high-order bit\\n\"\n          \"  c          printable character or backslash escape\\n\",\n          5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(\n          0LL,\n          \"  d[SIZE]    signed decimal, SIZE bytes per integer\\n\"\n          \"  f[SIZE]    floating point, SIZE bytes per float\\n\"\n          \"  o[SIZE]    octal, SIZE bytes per integer\\n\"\n          \"  u[SIZE]    unsigned decimal, SIZE bytes per integer\\n\"\n          \"  x[SIZE]    hexadecimal, SIZE bytes per integer\\n\",\n          5);\n  fputs_unlocked(v27, v26);\n  v28 = stdout;\n  v29 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"SIZE is a number.  For TYPE in [doux], SIZE may also be C for\\n\"\n          \"sizeof(char), S for sizeof(short), I for sizeof(int) or L for\\n\"\n          \"sizeof(long).  If TYPE is f, SIZE may also be F for sizeof(float), D\\n\"\n          \"for sizeof(double) or L for sizeof(long double).\\n\",\n          5);\n  fputs_unlocked(v29, v28);\n  v30 = stdout;\n  v31 = dcgettext(\n          0LL,\n          \"\\nAdding a z suffix to any type displays printable characters at the end of\\neach output line.\\n\",\n          5);\n  fputs_unlocked(v31, v30);\n  v32 = stdout;\n  v33 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"\\n\"\n          \"BYTES is hex with 0x or 0X prefix, and may have a multiplier suffix:\\n\"\n          \"  b    512\\n\"\n          \"  KB   1000\\n\"\n          \"  K    1024\\n\"\n          \"  MB   1000*1000\\n\"\n          \"  M    1024*1024\\n\"\n          \"and so on for G, T, P, E, Z, Y.\\n\",\n          5);\n  fputs_unlocked(v33, v32);\n  v46 = \"[\";\n  v34 = &v46;\n  v47 = \"test invocation\";\n  v48 = \"coreutils\";\n  v49 = \"Multi-call invocation\";\n  v50 = \"sha224sum\";\n  v51 = \"sha2 utilities\";\n  v52 = \"sha256sum\";\n  v53 = \"sha2 utilities\";\n  v54 = \"sha384sum\";\n  v55 = \"sha2 utilities\";\n  v56 = \"sha512sum\";\n  v57 = \"sha2 utilities\";\n  v58 = 0LL;\n  v59 = 0LL;\n  do\n    v34 += 2;\n  while ( *v34 && strcmp(\"od\", *v34) );\n  v35 = (char *)v34[1];\n  if ( v35 )\n  {\n    v36 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v36, &unk_40C41A, \"https://www.gnu.org/software/coreutils/\");\n    v37 = setlocale(5, 0LL);\n    if ( !v37 || !strncmp(v37, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v41 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v41, &unk_40C41A, \"https://www.gnu.org/software/coreutils/\");\n    v42 = setlocale(5, 0LL);\n    if ( !v42 || !strncmp(v42, \"en_\", 3uLL) )\n    {\n      v35 = \"od\";\n      v43 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v38 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v43, \"https://www.gnu.org/software/coreutils/\", \"od\");\nLABEL_12:\n      v40 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v40, v35, v38);\nLABEL_3:\n      exit(status);\n    }\n    v35 = \"od\";\n  }\n  v44 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v44, \"od\", v45);\nLABEL_10:\n  v38 = \"Multi-call invocation\" + 10;\n  v39 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v39, \"https://www.gnu.org/software/coreutils/\", \"od\");\n  if ( v35 != \"od\" )\n    v38 = \"\";\n  goto LABEL_12;\n}\n", 
            "funcStartAddr": "0x404960L", 
            "funcEndAddr": "0x404dfdL", 
            "funcName": "sub_404960"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_404E00()\n{\n  sub_404960(1);\n}\n", 
            "funcStartAddr": "0x404e00L", 
            "funcEndAddr": "0x404e0aL", 
            "funcName": "sub_404E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404E10(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  size_t v4; // r13\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n  char *v16; // [rsp+18h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  v16 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += v4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( v16 )\n      {\n        v10 = memcmp(&v16[v4 * v14], v5, v4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += v4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    v12 = v14;\n  return v12;\n}\n", 
            "funcStartAddr": "0x404e10L", 
            "funcEndAddr": "0x404f26L", 
            "funcName": "sub_404E10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_404F30(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_4071F0(1LL, a1);\n  v5 = sub_406EE0(0LL, 8LL, a2);\n  error(0, 0, v3, v5, v4);\n}\n", 
            "funcStartAddr": "0x404f30L", 
            "funcEndAddr": "0x404fa1L", 
            "funcName": "sub_404F30"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_404FB0(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  size_t v4; // r13\n  char *v5; // rbp\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  __int64 v11; // rax\n  __int64 v12; // rax\n  char *v13; // rax\n\n  v3 = 0LL;\n  v4 = a3;\n  v5 = a2;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, v5, v4) )\n    {\n      ++v9;\n      v3 = v5;\n      v5 += v4;\n      v11 = sub_407210(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    v5 += v4;\n    v12 = sub_407210(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  v13 = stderr->_IO_write_ptr;\n  if ( v13 >= stderr->_IO_write_end )\n  {\n    LODWORD(v13) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = v13 + 1;\n    *v13 = 10;\n  }\n  return (int)v13;\n}\n", 
            "funcStartAddr": "0x404fb0L", 
            "funcEndAddr": "0x4050c8L", 
            "funcName": "sub_404FB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4050D0(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  size_t v6; // r15\n  void (*v7)(void); // r13\n  char *v8; // rbp\n  __int64 *v9; // rbx\n  __int64 result; // rax\n\n  v6 = a5;\n  v7 = a6;\n  v8 = a4;\n  v9 = (__int64 *)a3;\n  result = sub_404E10(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_404F30(a1, (__int64)a2, result);\n    sub_404FB0(v9, v8, v6);\n    v7();\n    result = -1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4050d0L", 
            "funcEndAddr": "0x405140L", 
            "funcName": "sub_4050D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405140(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  size_t v5; // r12\n  __int64 *v6; // rbx\n  char *v7; // rbp\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v5 = a4;\n    v6 = a2 + 1;\n    v7 = a3;\n    do\n    {\n      if ( !memcmp(s1, v7, v5) )\n        break;\n      v4 = *v6;\n      v7 += v5;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x405140L", 
            "funcEndAddr": "0x40518dL", 
            "funcName": "sub_405140"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4051B0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_409170(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_612448 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_612450 )\n      {\n        v5 = sub_407060();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_409170(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x4051b0L", 
            "funcEndAddr": "0x40524eL", 
            "funcName": "sub_4051B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405250(char *nptr, unsigned __int64 a2, unsigned int a3, unsigned int a4, double a5)\n{\n  __m128d v5; // xmm1\n  unsigned int v6; // er14\n  char *v7; // r13\n  __m128d v8; // xmm4\n  unsigned __int64 v9; // r12\n  __int64 v10; // rbx\n  _BYTE *v11; // rdi\n  _BYTE *v12; // rsi\n  _BYTE *v13; // rcx\n  _BYTE *v14; // rax\n  unsigned int v15; // ebp\n  double v17; // [rsp+0h] [rbp-50h]\n  __int16 v18; // [rsp+Dh] [rbp-43h]\n\n  v5.m128d_f64[0] = 0.0;\n  v6 = a4;\n  v7 = nptr;\n  v8.m128d_f64[0] = a5;\n  *(_QWORD *)&v8.m128d_f64[0] = (unsigned __int128)_mm_cmplt_sd(v8, v5);\n  v9 = a2;\n  v10 = 1LL;\n  v18 = 11557;\n  v11 = (char *)&v18 + (a3 & 1) + 1;\n  v17 = a5;\n  *v11 = 43;\n  v12 = &v11[(a3 >> 1) & 1];\n  v13 = &v12[(a3 >> 2) & 1];\n  *v12 = 32;\n  *v13 = 48;\n  v14 = &v13[(a3 >> 3) & 1];\n  *(_WORD *)v14 = 11818;\n  v14[2] = 42;\n  *(_WORD *)(v14 + 3) = (unsigned __int8)((a3 & 0x10) < 1 ? 103 : 71);\n  if ( COERCE_DOUBLE(COERCE_UNSIGNED_INT64(-a5) & *(_QWORD *)&v8.m128d_f64[0] | ~*(_QWORD *)&v8.m128d_f64[0] & *(_QWORD *)&a5) >= 2.225073858507201e-308 )\n    v10 = 15LL;\n  while ( 1 )\n  {\n    v15 = __snprintf_chk(v7, v9, 1LL, -1LL, &v18, v6, v17, v10);\n    if ( (v15 & 0x80000000) != 0 || (int)v10 > 16 || (int)v15 < v9 && strtod(v7, 0LL) == v17 )\n      break;\n    v10 = (unsigned int)(v10 + 1);\n  }\n  return v15;\n}\n", 
            "funcStartAddr": "0x405250L", 
            "funcEndAddr": "0x405388L", 
            "funcName": "sub_405250"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405390(char *nptr, unsigned __int64 a2, unsigned int a3, unsigned int a4, __m128 a5)\n{\n  unsigned int v5; // er15\n  __m128 v6; // xmm1\n  char *v7; // r13\n  __m128 v8; // xmm3\n  __m128 v9; // xmm3\n  unsigned __int64 v10; // r12\n  _BYTE *v11; // rdi\n  _BYTE *v12; // rsi\n  _BYTE *v13; // rcx\n  _BYTE *v14; // rax\n  __int64 i; // rbx\n  unsigned int v16; // ebp\n  double v18; // [rsp+0h] [rbp-58h]\n  float v19; // [rsp+Ch] [rbp-4Ch]\n  __int16 v20; // [rsp+15h] [rbp-43h]\n\n  v5 = a4;\n  v6.m128_i32[0] = 0;\n  v7 = nptr;\n  v8.m128_i32[0] = a5.m128_i32[0];\n  v9 = _mm_cmplt_ss(v8, v6);\n  v10 = a2;\n  v20 = 11557;\n  v11 = (char *)&v20 + (a3 & 1) + 1;\n  v19 = a5.m128_f32[0];\n  *v11 = 43;\n  v12 = &v11[(a3 >> 1) & 1];\n  v18 = a5.m128_f32[0];\n  v13 = &v12[(a3 >> 2) & 1];\n  *v12 = 32;\n  *v13 = 48;\n  v14 = &v13[(a3 >> 3) & 1];\n  *(_WORD *)v14 = 11818;\n  v14[2] = 42;\n  *(_WORD *)(v14 + 3) = (unsigned __int8)((a3 & 0x10) < 1 ? 103 : 71);\n  for ( i = 5\n          * (unsigned int)(COERCE_FLOAT(COERCE_UNSIGNED_INT(-a5.m128_f32[0]) & v9.m128_i32[0] | *(unsigned __int128 *)&_mm_andnot_ps(v9, a5)) >= 1.1754944e-38)\n          + 1; ; i = (unsigned int)(i + 1) )\n  {\n    v16 = __snprintf_chk(v7, v10, 1LL, -1LL, &v20, v5, v18, i);\n    if ( (v16 & 0x80000000) != 0 || (int)i > 8 || (int)v16 < v10 && strtof(v7, 0LL) == v19 )\n      break;\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x405390L", 
            "funcEndAddr": "0x4054c7L", 
            "funcName": "sub_405390"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_4054D0@<rax>(char *nptr@<rdi>, unsigned int a2@<edx>, unsigned int a3@<ecx>, unsigned __int64 a4@<rsi>, double a5@<xmm0>, long double a6)\n{\n  unsigned int v6; // er14\n  char *v7; // r13\n  unsigned __int64 v8; // r12\n  __int64 v9; // rbx\n  long double v10; // fst6\n  _BYTE *v11; // rdi\n  _BYTE *v12; // rsi\n  _BYTE *v13; // rcx\n  _BYTE *v14; // rax\n  int v15; // eax\n  unsigned int v16; // ebp\n  __int16 v18; // [rsp+5h] [rbp-43h]\n\n  v6 = a3;\n  v7 = nptr;\n  v8 = a4;\n  v9 = 1LL;\n  v18 = 11557;\n  v10 = a6;\n  if ( a6 < 0.0 )\n    v10 = -a6;\n  v11 = (char *)&v18 + (a2 & 1) + 1;\n  v12 = &v11[(a2 >> 1) & 1];\n  *v11 = 43;\n  *v12 = 32;\n  v13 = &v12[(a2 >> 2) & 1];\n  *v13 = 48;\n  v14 = &v13[(a2 >> 3) & 1];\n  *(_DWORD *)v14 = 1277832746;\n  v14[5] = 0;\n  v14[4] = (a2 & 0x10) < 1 ? 103 : 71;\n  if ( v10 >= 3.3621031431120935063e-4932 )\n    v9 = 18LL;\n  while ( 1 )\n  {\n    v15 = __snprintf_chk(v7, v8, 1LL, -1LL, &v18, v6, a5, v9);\n    v16 = v15;\n    if ( v15 < 0 || (int)v9 > 20 || v15 < v8 && strtold(v7, 0LL) == a6 )\n      break;\n    v9 = (unsigned int)(v9 + 1);\n  }\n  return v16;\n}\n", 
            "funcStartAddr": "0x4054d0L", 
            "funcEndAddr": "0x4055e4L", 
            "funcName": "sub_4054D0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4055F0(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_612458 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x4055f0L", 
            "funcEndAddr": "0x405689L", 
            "funcName": "sub_4055F0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_405690(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_409230();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40E581;\n      if ( !v5 )\n        v2 = (char *)&unk_40E576;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40E57D;\n    if ( !v5 )\n      v2 = (char *)&unk_40E57A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x405690L", 
            "funcEndAddr": "0x405782L", 
            "funcName": "sub_405690"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405790(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_405790((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_405790((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_405790((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_405790((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_405790((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409010((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_405790((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_405790((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405690(\"`\", v11);\n        v47 = sub_405690(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_405790(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_405790((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_405790((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_405790((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_405790((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_405790((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409010((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_405790((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_405790((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405690(\"`\", v11);\n        v47 = sub_405690(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401bb0L", 
            "funcEndAddr": "0x401bb5L", 
            "funcName": "sub_405790"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405790(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_405790((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_405790((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_405790((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_405790((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_405790((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409010((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_405790((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_405790((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405690(\"`\", v11);\n        v47 = sub_405690(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_405790(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_405790((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_405790((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_405790((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_405790((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405790((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405790((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_405790((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409010((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_405790((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_405790((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405690(\"`\", v11);\n        v47 = sub_405690(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401bb0L", 
            "funcEndAddr": "0x401bb5L", 
            "funcName": "sub_405790"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4069C0(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_6122B8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_6122D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_407A20(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_6122B8 == &xmmword_6122C0 )\n    {\n      v8 = (__int128 *)sub_407830(0LL, v10);\n      off_6122B8 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_6122C0);\n    }\n    else\n    {\n      off_6122B8 = (__int128 *)sub_407830(off_6122B8, v10);\n      v8 = off_6122B8;\n    }\n    memset(&v8[dword_6122D0], 0, 16LL * ((int)a1 + 1 - dword_6122D0));\n    dword_6122D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_405790(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_612460 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4077D0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_405790(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_4069C0(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_6122B8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_6122D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_407A20(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_6122B8 == &xmmword_6122C0 )\n    {\n      v8 = (__int128 *)sub_407830(0LL, v10);\n      off_6122B8 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_6122C0);\n    }\n    else\n    {\n      off_6122B8 = (__int128 *)sub_407830(off_6122B8, v10);\n      v8 = off_6122B8;\n    }\n    memset(&v8[dword_6122D0], 0, 16LL * ((int)a1 + 1 - dword_6122D0));\n    dword_6122D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_405790(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_612460 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4077D0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_405790(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x401bb5L", 
            "funcEndAddr": "0x401bbaL", 
            "funcName": "sub_4069C0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4069C0(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_6122B8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_6122D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_407A20(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_6122B8 == &xmmword_6122C0 )\n    {\n      v8 = (__int128 *)sub_407830(0LL, v10);\n      off_6122B8 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_6122C0);\n    }\n    else\n    {\n      off_6122B8 = (__int128 *)sub_407830(off_6122B8, v10);\n      v8 = off_6122B8;\n    }\n    memset(&v8[dword_6122D0], 0, 16LL * ((int)a1 + 1 - dword_6122D0));\n    dword_6122D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_405790(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_612460 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4077D0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_405790(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_4069C0(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_6122B8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_6122D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_407A20(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_6122B8 == &xmmword_6122C0 )\n    {\n      v8 = (__int128 *)sub_407830(0LL, v10);\n      off_6122B8 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_6122C0);\n    }\n    else\n    {\n      off_6122B8 = (__int128 *)sub_407830(off_6122B8, v10);\n      v8 = off_6122B8;\n    }\n    memset(&v8[dword_6122D0], 0, 16LL * ((int)a1 + 1 - dword_6122D0));\n    dword_6122D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_405790(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_612460 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4077D0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_405790(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x401bb5L", 
            "funcEndAddr": "0x401bbaL", 
            "funcName": "sub_4069C0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406EE0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4069C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_406EE0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4069C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401bbaL", 
            "funcEndAddr": "0x401bbfL", 
            "funcName": "sub_406EE0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406EE0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4069C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_406EE0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4069C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401bbaL", 
            "funcEndAddr": "0x401bbfL", 
            "funcName": "sub_406EE0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406F50(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4069C0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_406F50(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4069C0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401bbfL", 
            "funcEndAddr": "0x401bc4L", 
            "funcName": "sub_406F50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406F50(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4069C0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_406F50(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4069C0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401bbfL", 
            "funcEndAddr": "0x401bc4L", 
            "funcName": "sub_406F50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406FE0(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_612590;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_612560);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_612570);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_612580);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_4069C0(0LL, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x406fe0L", 
            "funcEndAddr": "0x407050L", 
            "funcName": "sub_406FE0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407060(char *a1)\n{\n  return sub_406FE0(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x407060L", 
            "funcEndAddr": "0x407071L", 
            "funcName": "sub_407060"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407090(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4069C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_407090(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4069C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401bc4L", 
            "funcEndAddr": "0x401bc9L", 
            "funcName": "sub_407090"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407090(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4069C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_407090(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4069C0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401bc4L", 
            "funcEndAddr": "0x401bc9L", 
            "funcName": "sub_407090"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407100(__int64 a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_612560);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_612570);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_612580);\n  v9 = qword_612590;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_4069C0(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x407100L", 
            "funcEndAddr": "0x40716cL", 
            "funcName": "sub_407100"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4071F0(__int64 a1, char *a2)\n{\n  return sub_4069C0(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_612280);\n}\n", 
            "funcStartAddr": "0x4071f0L", 
            "funcEndAddr": "0x407201L", 
            "funcName": "sub_4071F0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407210(char *a1)\n{\n  return sub_4069C0(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_612280);\n}\n", 
            "funcStartAddr": "0x407210L", 
            "funcEndAddr": "0x407226L", 
            "funcName": "sub_407210"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407230(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_407230(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401bc9L", 
            "funcEndAddr": "0x401bceL", 
            "funcName": "sub_407230"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407230(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_407230(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401bc9L", 
            "funcEndAddr": "0x401bceL", 
            "funcName": "sub_407230"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407630(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_407230(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_407230(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x407630L", 
            "funcEndAddr": "0x407690L", 
            "funcName": "sub_407630"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407690(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_407230(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_407230(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x407690L", 
            "funcEndAddr": "0x40774cL", 
            "funcName": "sub_407690"
        }, 
        {
            "decompiledFuncCode": "int sub_407750()\n{\n  char *v0; // rax\n  __int64 v1; // rcx\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\", v1);\n  v2 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v2, &unk_40C41A, \"https://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v4, v3);\n}\n", 
            "funcStartAddr": "0x407750L", 
            "funcEndAddr": "0x4077c4L", 
            "funcName": "sub_407750"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4077D0(size_t a1, __int64 a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_407A20(a1, a2, v3);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4077d0L", 
            "funcEndAddr": "0x4077eaL", 
            "funcName": "sub_4077D0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_407830(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_407A20(a1, a2, v3);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407830L", 
            "funcEndAddr": "0x407866L", 
            "funcName": "sub_407830"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_407930(void *a1, size_t *a2, __int64 a3)\n{\n  size_t v3; // rax\n\n  v3 = *a2;\n  if ( a1 )\n  {\n    a3 = 6148914691236517203LL;\n    if ( v3 <= 0x5555555555555553LL )\n    {\n      v3 += (v3 >> 1) + 1;\nLABEL_4:\n      *a2 = v3;\n      return sub_407830(a1, v3);\n    }\nLABEL_8:\n    sub_407A20(a1, a2, a3);\n  }\n  if ( v3 )\n  {\n    if ( (v3 & 0x8000000000000000LL) == 0LL )\n      goto LABEL_4;\n    goto LABEL_8;\n  }\n  *a2 = 128LL;\n  return sub_407830(0LL, 0x80uLL);\n}\n", 
            "funcStartAddr": "0x407930L", 
            "funcEndAddr": "0x407980L", 
            "funcName": "sub_407930"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4079D0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_4077D0(n, n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x4079d0L", 
            "funcEndAddr": "0x4079f8L", 
            "funcName": "sub_4079D0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_407A20()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x407a20L", 
            "funcEndAddr": "0x407a51L", 
            "funcName": "sub_407A20"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_407A60()\n{\n  unsigned int v0; // ebx\n  char *v2; // rbp\n  int *v3; // rax\n\n  v0 = sub_409150();\n  if ( (v0 & 0x80000000) != 0 && !ferror(stdout) )\n  {\n    v2 = dcgettext(0LL, \"cannot perform formatted output\", 5);\n    v3 = __errno_location();\n    error(status, *v3, v2);\n  }\n  return v0;\n}\n", 
            "funcStartAddr": "0x407a60L", 
            "funcEndAddr": "0x407abdL", 
            "funcName": "sub_407A60"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_407AC0()\n{\n  return sub_407A60();\n}\n", 
            "funcStartAddr": "0x407ac0L", 
            "funcEndAddr": "0x407b54L", 
            "funcName": "sub_407AC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407B60(FILE *stream)\n{\n  unsigned int v1; // ebx\n  char *v3; // rbp\n  int *v4; // rax\n\n  v1 = sub_409090(stream);\n  if ( (v1 & 0x80000000) != 0 && !ferror(stream) )\n  {\n    v3 = dcgettext(0LL, \"cannot perform formatted output\", 5);\n    v4 = __errno_location();\n    error(status, *v4, v3);\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x407b60L", 
            "funcEndAddr": "0x407bb9L", 
            "funcName": "sub_407B60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407BC0(FILE *a1)\n{\n  return sub_407B60(a1);\n}\n", 
            "funcStartAddr": "0x407bc0L", 
            "funcEndAddr": "0x407c4fL", 
            "funcName": "sub_407BC0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_407C50(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  int v7; // er10\n  __int64 v8; // rbp\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13; // [rsp+Eh] [rbp-2Ah]\n  char v14; // [rsp+Fh] [rbp-29h]\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v7 = a2;\n    v8 = a5;\n    v9 = (&off_40F700)[v5];\n    if ( v7 < 0 )\n    {\n      v13 = a3;\n      v11 = &v13;\n      v10 = &asc_40F680[-v7];\n      v14 = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * v7);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, v8);\n    abort();\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_407C50(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  int v7; // er10\n  __int64 v8; // rbp\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13; // [rsp+Eh] [rbp-2Ah]\n  char v14; // [rsp+Fh] [rbp-29h]\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v7 = a2;\n    v8 = a5;\n    v9 = (&off_40F700)[v5];\n    if ( v7 < 0 )\n    {\n      v13 = a3;\n      v11 = &v13;\n      v10 = &asc_40F680[-v7];\n      v14 = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * v7);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, v8);\n    abort();\n  }\n  abort();\n}\n", 
            "funcStartAddr": "0x401bceL", 
            "funcEndAddr": "0x401bd3L", 
            "funcName": "sub_407C50"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_407C50(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  int v7; // er10\n  __int64 v8; // rbp\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13; // [rsp+Eh] [rbp-2Ah]\n  char v14; // [rsp+Fh] [rbp-29h]\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v7 = a2;\n    v8 = a5;\n    v9 = (&off_40F700)[v5];\n    if ( v7 < 0 )\n    {\n      v13 = a3;\n      v11 = &v13;\n      v10 = &asc_40F680[-v7];\n      v14 = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * v7);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, v8);\n    abort();\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_407C50(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  int v7; // er10\n  __int64 v8; // rbp\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13; // [rsp+Eh] [rbp-2Ah]\n  char v14; // [rsp+Fh] [rbp-29h]\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v7 = a2;\n    v8 = a5;\n    v9 = (&off_40F700)[v5];\n    if ( v7 < 0 )\n    {\n      v13 = a3;\n      v11 = &v13;\n      v10 = &asc_40F680[-v7];\n      v14 = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * v7);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, v8);\n    abort();\n  }\n  abort();\n}\n", 
            "funcStartAddr": "0x401bceL", 
            "funcEndAddr": "0x401bd3L", 
            "funcName": "sub_407C50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407CE0(char *nptr, char **a2, unsigned int a3, unsigned __int64 *a4, const char *a5)\n{\n  char **v5; // r15\n  unsigned __int64 *v6; // r14\n  const char *v7; // r13\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  unsigned __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // er12\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // er9\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  int base; // [rsp+0h] [rbp-58h]\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h]\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  v5 = a2;\n  base = a3;\n  v6 = a4;\n  v7 = a5;\n  if ( !a2 )\n    v5 = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( v11[v10] & 0x2000 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, v5, base, 0);\n  if ( *v5 == nptr )\n  {\n    basea = *v5;\n    if ( v7 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(v7, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( v7 )\n  {\n    v15 = (unsigned __int8)**v5;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *v5;\n      v26 = strchr(v7, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_39:\n        *v6 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      v19 = 142129060940101LL;\n      if ( !_bittest64(&v19, (unsigned int)(v15 - 69)) || (v37 = v18, v20 = strchr(v7, 48), v18 = v37, !v20) )\n      {\nLABEL_26:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_27;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_27:\n          switch ( (_BYTE)v15 )\n          {\n            case 0x42:\n              if ( v13 >> 54 )\n                goto LABEL_37;\n              v13 <<= 10;\n              break;\n            case 0x45:\n              goto LABEL_70;\n            case 0x47:\n            case 0x67:\n              goto LABEL_76;\n            case 0x4B:\n            case 0x6B:\n              goto LABEL_36;\n            case 0x4D:\n            case 0x6D:\n              goto LABEL_29;\n            case 0x50:\n              goto LABEL_64;\n            case 0x54:\n            case 0x74:\n              goto LABEL_58;\n            case 0x59:\n              goto LABEL_52;\n            case 0x5A:\n              goto LABEL_46;\n            case 0x62:\n              goto LABEL_43;\n            case 0x63:\n              break;\n            case 0x77:\n              if ( (v13 & 0x8000000000000000LL) != 0LL )\n                goto LABEL_37;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_39;\n          }\nLABEL_32:\n          v24 = &v18[v22];\n          *v5 = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (_BYTE)v15 )\n          {\n            case 0x45:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_70:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_50;\n            case 0x46:\n            case 0x48:\n            case 0x49:\n            case 0x4A:\n            case 0x4C:\n            case 0x4E:\n            case 0x4F:\n            case 0x51:\n            case 0x52:\n            case 0x53:\n            case 0x55:\n            case 0x56:\n            case 0x57:\n            case 0x58:\n            case 0x5B:\n            case 0x5C:\n            case 0x5D:\n            case 0x5E:\n            case 0x5F:\n            case 0x60:\n            case 0x61:\n            case 0x64:\n            case 0x65:\n            case 0x66:\n            case 0x68:\n            case 0x69:\n            case 0x6A:\n            case 0x6C:\n            case 0x6E:\n            case 0x6F:\n            case 0x70:\n            case 0x71:\n            case 0x72:\n            case 0x73:\n              goto LABEL_39;\n            case 0x47:\n            case 0x67:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_76:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_32;\n            case 0x4B:\n            case 0x6B:\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_36:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_32;\n              goto LABEL_37;\n            case 0x4D:\n            case 0x6D:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_29:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_37;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 0x50:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_64:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_50;\n            case 0x54:\n            case 0x74:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_58:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_50;\n            case 0x59:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_52:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_50;\n            case 0x5A:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_46:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_50:\n              v14 |= v28;\n              break;\n            case 0x62:\n              v22 = 1;\nLABEL_43:\n              if ( v13 >> 55 )\n              {\nLABEL_37:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 0x63:\n              v22 = 1;\n              goto LABEL_32;\n            default:\n              goto LABEL_26;\n          }\n          goto LABEL_32;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_27;\n    }\n  }\nLABEL_13:\n  *v6 = v13;\n  return v14;\n}\n", 
            "funcStartAddr": "0x407ce0L", 
            "funcEndAddr": "0x408114L", 
            "funcName": "sub_407CE0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408120(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_4081A0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408120L", 
            "funcEndAddr": "0x40819bL", 
            "funcName": "sub_408120"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4081A0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_4081E0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x4081a0L", 
            "funcEndAddr": "0x4081e0L", 
            "funcName": "sub_4081A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4081E0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x4081e0L", 
            "funcEndAddr": "0x408237L", 
            "funcName": "sub_4081E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408240(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x408240L", 
            "funcEndAddr": "0x40831fL", 
            "funcName": "sub_408240"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408320(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408320L", 
            "funcEndAddr": "0x40893cL", 
            "funcName": "sub_408320"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408940(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_408240(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_408240((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_408320(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_408320(a1, v11, v12, v45, v46, a6, a7, v8, 4257409LL);\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_408320(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x408940L", 
            "funcEndAddr": "0x408f06L", 
            "funcName": "sub_408940"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408F10(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_6125A0 = dword_6122DC;\n  dword_6125A4 = dword_6122D8;\n  result = sub_408940(a1, a2, a3, a4, a5, a6, &dword_6125A0, a7);\n  dword_6122DC = dword_6125A0;\n  nptr = (char *)qword_6125B0;\n  dword_6122D4 = dword_6125A8;\n  return result;\n}\n", 
            "funcStartAddr": "0x408f10L", 
            "funcEndAddr": "0x408f66L", 
            "funcName": "sub_408F10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408F70(int a1, __int64 a2, char *a3)\n{\n  return sub_408F10(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x408f70L", 
            "funcEndAddr": "0x408f88L", 
            "funcName": "sub_408F70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408F90(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_408F10(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x408f90L", 
            "funcEndAddr": "0x408fa3L", 
            "funcName": "sub_408F90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408FB0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408940(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x408fb0L", 
            "funcEndAddr": "0x408fc5L", 
            "funcName": "sub_408FB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408FD0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_408F10(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x408fd0L", 
            "funcEndAddr": "0x408fe6L", 
            "funcName": "sub_408FD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408FF0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408940(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x408ff0L", 
            "funcEndAddr": "0x409008L", 
            "funcName": "sub_408FF0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_409010(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_4091D0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x409010L", 
            "funcEndAddr": "0x40908aL", 
            "funcName": "sub_409010"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409090(FILE *s, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  size_t v4; // rbx\n  char *v5; // rbp\n  int *v7; // rax\n  int v8; // er13\n  int *v9; // r12\n  size_t n; // [rsp+8h] [rbp-800h]\n  char v11; // [rsp+10h] [rbp-7F8h]\n\n  n = 2000LL;\n  v3 = (char *)sub_4097B0(&v11, &n, a2, a3);\n  v4 = n;\n  if ( !v3 )\n    goto LABEL_10;\n  v5 = v3;\n  if ( fwrite(v3, 1uLL, n, s) >= v4 )\n  {\n    if ( v5 != &v11 )\n      free(v5);\n    if ( v4 <= 0x7FFFFFFF )\n      return (unsigned int)v4;\n    *__errno_location() = 75;\nLABEL_10:\n    LODWORD(v4) = -1;\n    sub_4097A0(s);\n    return (unsigned int)v4;\n  }\n  LODWORD(v4) = -1;\n  if ( v5 != &v11 )\n  {\n    v7 = __errno_location();\n    v8 = *v7;\n    v9 = v7;\n    free(v5);\n    *v9 = v8;\n  }\n  return (unsigned int)v4;\n}\n", 
            "funcStartAddr": "0x409090L", 
            "funcEndAddr": "0x40914dL", 
            "funcName": "sub_409090"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409150(__int64 a1, __int64 a2)\n{\n  return sub_409090(stdout, a1, a2);\n}\n", 
            "funcStartAddr": "0x409150L", 
            "funcEndAddr": "0x409162L", 
            "funcName": "sub_409150"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409170(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_408120(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n  }\n  else\n  {\n    if ( !result )\n      return result;\n    if ( !v1 )\n      return -(*__errno_location() != 9);\n  }\n  return -1;\n}\n", 
            "funcStartAddr": "0x409170L", 
            "funcEndAddr": "0x4091cdL", 
            "funcName": "sub_409170"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_4091D0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4091d0L", 
            "funcEndAddr": "0x40922eL", 
            "funcName": "sub_4091D0"
        }, 
        {
            "decompiledFuncCode": "const char *sub_409230()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = qword_6125D8;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_6125D8 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          qword_6125D8 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_408120(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_408120(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x409230L", 
            "funcEndAddr": "0x409792L", 
            "funcName": "sub_409230"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4097A0(_DWORD *a1)\n{\n  *a1 |= 0x20u;\n}\n", 
            "funcStartAddr": "0x4097a0L", 
            "funcEndAddr": "0x4097a4L", 
            "funcName": "sub_4097A0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4097B0(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // er8\n  __int16 v91; // ax\n  unsigned __int64 v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  unsigned __int64 v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  unsigned __int64 v100; // rdi\n  __int64 v101; // rax\n  unsigned __int64 v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  __int64 v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  unsigned __int64 v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  unsigned __int64 v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  unsigned __int64 v125; // rax\n  __int64 v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  __int64 v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  __int64 v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  char *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  __int64 v150; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v151; // [rsp+28h] [rbp-6E8h]\n  char *v152; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v154; // [rsp+40h] [rbp-6D0h]\n  void *v155; // [rsp+48h] [rbp-6C8h]\n  char *v156; // [rsp+50h] [rbp-6C0h]\n  __int64 v157; // [rsp+58h] [rbp-6B8h]\n  char *v158; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v159; // [rsp+68h] [rbp-6A8h]\n  long double v160; // [rsp+70h] [rbp-6A0h]\n  void *v161; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v163; // [rsp+94h] [rbp-67Ch]\n  unsigned int v164; // [rsp+98h] [rbp-678h]\n  unsigned int v165; // [rsp+9Ch] [rbp-674h]\n  char v166; // [rsp+A0h] [rbp-670h]\n  void *v167; // [rsp+A8h] [rbp-668h]\n  __int64 v168; // [rsp+B0h] [rbp-660h]\n  __int64 v169; // [rsp+190h] [rbp-580h]\n  void *v170; // [rsp+198h] [rbp-578h]\n  __int64 v171; // [rsp+1A0h] [rbp-570h]\n  __int64 v172; // [rsp+1A8h] [rbp-568h]\n  __int64 v173; // [rsp+1B0h] [rbp-560h]\n  char v174; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v154 = a2;\n  if ( (int)sub_40B4F0(a3, &v169, &v166) < 0 )\n    return 0LL;\n  if ( (int)sub_40B2D0(v6, &v166) >= 0 )\n  {\n    v7 = v171 + 7;\n    if ( (unsigned __int64)(v171 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v172, v7);\n    v8 = v172 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v159 = (_BYTE *)(((unsigned __int64)&v151 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v159 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v154;\n    v12 = (char *)v170;\n    v13 = v5;\n    v14 = (char *)src;\n    v157 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v170;\n    if ( *(char **)v170 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v158 = v13;\n          LOBYTE(v160) = v20;\n          v161 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v161;\n          v13 = v158;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v160) )\n          {\n            *(_QWORD *)&v160 = v158;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v161;\n            v13 = *(char **)&v160;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v160 = v13;\n          v161 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v161;\n          v13 = *(char **)&v160;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v169 != v157 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v160 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v161) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v161 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v167;\n      v28 = (long double *)((char *)v167 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v161) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v161 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v161 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = (__int64)(v66 + 1);\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = (char *)v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v161;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v167 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v129 )\n                {\n                  v130 = (char *)v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v167 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v161 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = &v174;\n                  }\n                  else\n                  {\n                    v155 = (void *)v50;\n                    v156 = (char *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v158;\n                    _FST7 = v160;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v156;\n                    v50 = (unsigned __int64)v155;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v164;\n                  LOBYTE(v91) = v164;\n                  HIBYTE(v91) = BYTE1(v164) | 3;\n                  LOWORD(v164) = v91;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = (unsigned __int64)(v89 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v92 = (unsigned __int64)(v89 + 1);\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = (unsigned __int64)v89;\n                    if ( v68 & 8 )\n                    {\n                      v92 = (unsigned __int64)(v89 + 1);\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v92 + 2) = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v92 + 2) = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 70:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LOWORD(v151) = v90;\n                        v152 = (char *)v50;\n                        v155 = v89;\n                        v156 = (char *)v55;\n                        LODWORD(v158) = v68;\n                        *(_QWORD *)&v160 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v156;\n                        v97 = *(_QWORD *)&v160;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v158;\n                        v89 = (char *)v155;\n                        v50 = (unsigned __int64)v152;\n                        LOWORD(v90) = v151;\n                        if ( !v124 )\n                          v124 = 46;\n                        *(_BYTE *)(v92 + 1) = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *(_BYTE *)(++v125 - 1) = 48;\n                          while ( v125 != v92 + v123 + 2 );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 69:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 || (v105 = v92 + 1, v55) )\n                      {\n                        LOWORD(v151) = v90;\n                        v152 = (char *)v50;\n                        v155 = v89;\n                        v156 = (char *)v55;\n                        LODWORD(v158) = v68;\n                        *(_QWORD *)&v160 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v156;\n                        v105 = *(_QWORD *)&v160;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v158;\n                        v89 = (char *)v155;\n                        v50 = (unsigned __int64)v152;\n                        LOWORD(v90) = v151;\n                        if ( !v140 )\n                          v140 = 46;\n                        *(_BYTE *)(v92 + 1) = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *(_BYTE *)(++v141 - 1) = 48;\n                          while ( v141 != v92 + v139 + 2 );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      *(_BYTE *)(v105 + 3) = 48;\n                      *(_BYTE *)v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 71:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v150) = v90;\n                          v151 = v50;\n                          v152 = (char *)(v92 + 2);\n                          v155 = v89;\n                          LODWORD(v156) = v68;\n                          v158 = (char *)v55;\n                          *(_QWORD *)&v160 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v160;\n                          v118 = (__int64)v158;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v156;\n                          v89 = (char *)v155;\n                          v97 = (unsigned __int64)v152;\n                          v50 = v151;\n                          LOWORD(v90) = WORD2(v150);\n                          if ( !v119 )\n                            v119 = 46;\n                          *(_BYTE *)(v92 + 1) = v119;\n                          if ( v117 )\n                          {\n                            v120 = v92 + v118 + 1;\n                            v121 = v97;\n                            do\n                              *(_BYTE *)(++v121 - 1) = 48;\n                            while ( v121 != v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v152) = v90;\n                          v155 = (void *)v50;\n                          v156 = (char *)(v92 + 2);\n                          v158 = v89;\n                          LODWORD(v160) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v160);\n                          v89 = v158;\n                          v148 = *v147;\n                          v97 = (unsigned __int64)v156;\n                          v50 = (unsigned __int64)v155;\n                          LOWORD(v90) = (_WORD)v152;\n                          if ( !v148 )\n                            v148 = 46;\n                          *(_BYTE *)(v92 + 1) = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v92 = 48;\n                  *(_QWORD *)&v160 = v92 + 2;\n                  v135 = v12[72];\n                  *(_BYTE *)(v92 + 2) = 48;\n                  *(_BYTE *)(v92 + 1) = v135 + 23;\n                  if ( v68 & 0x10 || (v136 = v92 + 3, v55) )\n                  {\n                    HIDWORD(v150) = v90;\n                    v151 = v50;\n                    v152 = v89;\n                    v155 = (void *)v55;\n                    LODWORD(v156) = v68;\n                    v158 = (char *)(v92 + 4);\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v155;\n                    v136 = (__int64)v158;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v156;\n                    v89 = v152;\n                    v50 = v151;\n                    LOWORD(v90) = WORD2(v150);\n                    if ( !v145 )\n                      v145 = 46;\n                    *(_BYTE *)(v92 + 3) = v145;\n                    if ( v144 )\n                    {\n                      v146 = (char *)v136;\n                      do\n                        *(++v146 - 1) = 48;\n                      while ( v146 != (char *)v144 + v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = v136 + 3;\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(_QWORD *)&v160;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v164) = v90;\n                  v98 = v97 - (_QWORD)v89;\n                  if ( v50 > v97 - (unsigned __int64)v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = v97 + v99;\n                    v98 = v97 + v99 - (_QWORD)v89;\n                    if ( v68 & 2 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *(_BYTE *)(++v97 - 1) = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v100 + v101) = *(_BYTE *)(v97 + v101);\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = v92 + v99;\n                        do\n                          *(_BYTE *)(++v92 - 1) = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( (unsigned __int64)v89 < v97 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v100 + v112) = *(_BYTE *)(v97 + v112);\n                          --v112;\n                        }\n                        while ( &v89[-v97 - 1] != (char *)v112 );\n                        v97 = (unsigned __int64)v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = v97 + v99;\n                        do\n                          *(_BYTE *)(++v97 - 1) = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v161 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v160 = v98;\n                        v161 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v161;\n                        v98 = *(_QWORD *)&v160;\n                        v14 = v104;\n                      }\n                      else\n                      {\n                        LOBYTE(v158) = v14 == src;\n                        *(_QWORD *)&v160 = v98;\n                        v161 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v161;\n                        v98 = *(_QWORD *)&v160;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v158 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v161;\n                          v98 = *(_QWORD *)&v160;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                    }\n                  }\n                  v161 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v161 != &v174 )\n                    free(v161);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v159 + 1;\n        *v159 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v159;\n          v159[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v158 = v27;\n          *(_QWORD *)&v160 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v158;\n          v32 += *(_QWORD *)&v160;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v158 = v27;\n          *(_QWORD *)&v160 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v158;\n          v32 += *(_QWORD *)&v160;\n        }\n        if ( (unsigned int)v161 <= 0x10 )\n        {\n          v38 = 1LL << (char)v161;\n          if ( (1LL << (char)v161) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v158) = 1;\n            v164 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v158) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v158;\n          *(&v164 + (unsigned int)v158) = *((_DWORD *)v43 + 4);\n          LODWORD(v158) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v160 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v170 != &v173 )\n                    free(v170);\n                  if ( v167 != &v168 )\n                    free(v167);\n                  v14 = 0LL;\n                  **(_DWORD **)&v160 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v160 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v160) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v160) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v156 = v46;\n            v47 = __errno_location();\n            v48 = v156;\n            v156 = v32;\n            *(_QWORD *)&v160 = v47;\n            LODWORD(v152) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v163 = -1;\n              **(_DWORD **)&v160 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v161 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v167 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v167 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v167 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v167 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v167 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v155 = v48;\n                  if ( (_DWORD)v158 != 1 )\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v149 = &v163;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v149 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v167 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v155 = v48;\n                  if ( (_DWORD)v158 != 1 )\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v72, a5, &v163);\nLABEL_131:\n                      v48 = (char *)v155;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v164, a5, v165);\nLABEL_210:\n                    v48 = (char *)v155;\nLABEL_132:\n                    v74 = v163;\n                    if ( v163 < 0 )\n                    {\nLABEL_154:\n                      if ( v156[1] )\n                      {\n                        v156[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v160;\n                        if ( !**(_DWORD **)&v160 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v170 != &v173 )\n                          free(v170);\n                        if ( v167 != &v168 )\n                          free(v167);\n                        **(_DWORD **)&v160 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v163 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v160 = (_DWORD)v152;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v170 != &v173 )\n                          free(v170);\n                        if ( v167 != &v168 )\n                          free(v167);\n                        v14 = 0LL;\n                        **(_DWORD **)&v160 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v155 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v155;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v155, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v155 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v155;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v149 = v72;\n                  break;\n                case 0xB:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v155 = v48;\n                  a5 = *((double *)v167 + 4 * v84 + 2);\n                  if ( (_DWORD)v158 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, v164, a5, &v163);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, &v163, a5, v150);\n                      v48 = (char *)v155;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, v164, a5, v165);\n                  }\n                  v48 = (char *)v155;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v155 = v48;\n                  if ( (_DWORD)v158 == 1 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v159,\n                            v164,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v167 + 2 * v82 + 1)));\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v158 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v159,\n                            &v163,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v167 + 2 * v82 + 1)));\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v159, v164, a5, v165);\n                  v48 = (char *)v155;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v80 = v164;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v80, a5, v149);\n            v74 = v163;\n            v48 = (char *)v155;\n            if ( v163 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v157;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v109 )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v170 != &v173 )\n      free(v170);\n    if ( v167 != &v168 )\n      free(v167);\n    *v154 = v107;\n    return v14;\n  }\n  if ( v170 != &v173 )\n    free(v170);\n  if ( v167 != &v168 )\n    free(v167);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_4097B0(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // er8\n  __int16 v91; // ax\n  unsigned __int64 v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  unsigned __int64 v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  unsigned __int64 v100; // rdi\n  __int64 v101; // rax\n  unsigned __int64 v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  __int64 v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  unsigned __int64 v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  unsigned __int64 v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  unsigned __int64 v125; // rax\n  __int64 v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  __int64 v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  __int64 v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  char *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  __int64 v150; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v151; // [rsp+28h] [rbp-6E8h]\n  char *v152; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v154; // [rsp+40h] [rbp-6D0h]\n  void *v155; // [rsp+48h] [rbp-6C8h]\n  char *v156; // [rsp+50h] [rbp-6C0h]\n  __int64 v157; // [rsp+58h] [rbp-6B8h]\n  char *v158; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v159; // [rsp+68h] [rbp-6A8h]\n  long double v160; // [rsp+70h] [rbp-6A0h]\n  void *v161; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v163; // [rsp+94h] [rbp-67Ch]\n  unsigned int v164; // [rsp+98h] [rbp-678h]\n  unsigned int v165; // [rsp+9Ch] [rbp-674h]\n  char v166; // [rsp+A0h] [rbp-670h]\n  void *v167; // [rsp+A8h] [rbp-668h]\n  __int64 v168; // [rsp+B0h] [rbp-660h]\n  __int64 v169; // [rsp+190h] [rbp-580h]\n  void *v170; // [rsp+198h] [rbp-578h]\n  __int64 v171; // [rsp+1A0h] [rbp-570h]\n  __int64 v172; // [rsp+1A8h] [rbp-568h]\n  __int64 v173; // [rsp+1B0h] [rbp-560h]\n  char v174; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v154 = a2;\n  if ( (int)sub_40B4F0(a3, &v169, &v166) < 0 )\n    return 0LL;\n  if ( (int)sub_40B2D0(v6, &v166) >= 0 )\n  {\n    v7 = v171 + 7;\n    if ( (unsigned __int64)(v171 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v172, v7);\n    v8 = v172 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v159 = (_BYTE *)(((unsigned __int64)&v151 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v159 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v154;\n    v12 = (char *)v170;\n    v13 = v5;\n    v14 = (char *)src;\n    v157 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v170;\n    if ( *(char **)v170 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v158 = v13;\n          LOBYTE(v160) = v20;\n          v161 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v161;\n          v13 = v158;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v160) )\n          {\n            *(_QWORD *)&v160 = v158;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v161;\n            v13 = *(char **)&v160;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v160 = v13;\n          v161 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v161;\n          v13 = *(char **)&v160;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v169 != v157 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v160 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v161) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v161 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v167;\n      v28 = (long double *)((char *)v167 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v161) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v161 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v161 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = (__int64)(v66 + 1);\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = (char *)v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v161;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v167 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v129 )\n                {\n                  v130 = (char *)v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v167 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v161 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = &v174;\n                  }\n                  else\n                  {\n                    v155 = (void *)v50;\n                    v156 = (char *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v158;\n                    _FST7 = v160;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v156;\n                    v50 = (unsigned __int64)v155;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v164;\n                  LOBYTE(v91) = v164;\n                  HIBYTE(v91) = BYTE1(v164) | 3;\n                  LOWORD(v164) = v91;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = (unsigned __int64)(v89 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v92 = (unsigned __int64)(v89 + 1);\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = (unsigned __int64)v89;\n                    if ( v68 & 8 )\n                    {\n                      v92 = (unsigned __int64)(v89 + 1);\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v92 + 2) = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v92 + 2) = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 70:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LOWORD(v151) = v90;\n                        v152 = (char *)v50;\n                        v155 = v89;\n                        v156 = (char *)v55;\n                        LODWORD(v158) = v68;\n                        *(_QWORD *)&v160 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v156;\n                        v97 = *(_QWORD *)&v160;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v158;\n                        v89 = (char *)v155;\n                        v50 = (unsigned __int64)v152;\n                        LOWORD(v90) = v151;\n                        if ( !v124 )\n                          v124 = 46;\n                        *(_BYTE *)(v92 + 1) = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *(_BYTE *)(++v125 - 1) = 48;\n                          while ( v125 != v92 + v123 + 2 );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 69:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 || (v105 = v92 + 1, v55) )\n                      {\n                        LOWORD(v151) = v90;\n                        v152 = (char *)v50;\n                        v155 = v89;\n                        v156 = (char *)v55;\n                        LODWORD(v158) = v68;\n                        *(_QWORD *)&v160 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v156;\n                        v105 = *(_QWORD *)&v160;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v158;\n                        v89 = (char *)v155;\n                        v50 = (unsigned __int64)v152;\n                        LOWORD(v90) = v151;\n                        if ( !v140 )\n                          v140 = 46;\n                        *(_BYTE *)(v92 + 1) = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *(_BYTE *)(++v141 - 1) = 48;\n                          while ( v141 != v92 + v139 + 2 );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      *(_BYTE *)(v105 + 3) = 48;\n                      *(_BYTE *)v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 71:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v150) = v90;\n                          v151 = v50;\n                          v152 = (char *)(v92 + 2);\n                          v155 = v89;\n                          LODWORD(v156) = v68;\n                          v158 = (char *)v55;\n                          *(_QWORD *)&v160 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v160;\n                          v118 = (__int64)v158;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v156;\n                          v89 = (char *)v155;\n                          v97 = (unsigned __int64)v152;\n                          v50 = v151;\n                          LOWORD(v90) = WORD2(v150);\n                          if ( !v119 )\n                            v119 = 46;\n                          *(_BYTE *)(v92 + 1) = v119;\n                          if ( v117 )\n                          {\n                            v120 = v92 + v118 + 1;\n                            v121 = v97;\n                            do\n                              *(_BYTE *)(++v121 - 1) = 48;\n                            while ( v121 != v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v152) = v90;\n                          v155 = (void *)v50;\n                          v156 = (char *)(v92 + 2);\n                          v158 = v89;\n                          LODWORD(v160) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v160);\n                          v89 = v158;\n                          v148 = *v147;\n                          v97 = (unsigned __int64)v156;\n                          v50 = (unsigned __int64)v155;\n                          LOWORD(v90) = (_WORD)v152;\n                          if ( !v148 )\n                            v148 = 46;\n                          *(_BYTE *)(v92 + 1) = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v92 = 48;\n                  *(_QWORD *)&v160 = v92 + 2;\n                  v135 = v12[72];\n                  *(_BYTE *)(v92 + 2) = 48;\n                  *(_BYTE *)(v92 + 1) = v135 + 23;\n                  if ( v68 & 0x10 || (v136 = v92 + 3, v55) )\n                  {\n                    HIDWORD(v150) = v90;\n                    v151 = v50;\n                    v152 = v89;\n                    v155 = (void *)v55;\n                    LODWORD(v156) = v68;\n                    v158 = (char *)(v92 + 4);\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v155;\n                    v136 = (__int64)v158;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v156;\n                    v89 = v152;\n                    v50 = v151;\n                    LOWORD(v90) = WORD2(v150);\n                    if ( !v145 )\n                      v145 = 46;\n                    *(_BYTE *)(v92 + 3) = v145;\n                    if ( v144 )\n                    {\n                      v146 = (char *)v136;\n                      do\n                        *(++v146 - 1) = 48;\n                      while ( v146 != (char *)v144 + v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = v136 + 3;\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(_QWORD *)&v160;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v164) = v90;\n                  v98 = v97 - (_QWORD)v89;\n                  if ( v50 > v97 - (unsigned __int64)v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = v97 + v99;\n                    v98 = v97 + v99 - (_QWORD)v89;\n                    if ( v68 & 2 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *(_BYTE *)(++v97 - 1) = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v100 + v101) = *(_BYTE *)(v97 + v101);\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = v92 + v99;\n                        do\n                          *(_BYTE *)(++v92 - 1) = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( (unsigned __int64)v89 < v97 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v100 + v112) = *(_BYTE *)(v97 + v112);\n                          --v112;\n                        }\n                        while ( &v89[-v97 - 1] != (char *)v112 );\n                        v97 = (unsigned __int64)v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = v97 + v99;\n                        do\n                          *(_BYTE *)(++v97 - 1) = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v161 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v160 = v98;\n                        v161 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v161;\n                        v98 = *(_QWORD *)&v160;\n                        v14 = v104;\n                      }\n                      else\n                      {\n                        LOBYTE(v158) = v14 == src;\n                        *(_QWORD *)&v160 = v98;\n                        v161 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v161;\n                        v98 = *(_QWORD *)&v160;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v158 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v161;\n                          v98 = *(_QWORD *)&v160;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                    }\n                  }\n                  v161 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v161 != &v174 )\n                    free(v161);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v159 + 1;\n        *v159 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v159;\n          v159[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v158 = v27;\n          *(_QWORD *)&v160 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v158;\n          v32 += *(_QWORD *)&v160;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v158 = v27;\n          *(_QWORD *)&v160 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v158;\n          v32 += *(_QWORD *)&v160;\n        }\n        if ( (unsigned int)v161 <= 0x10 )\n        {\n          v38 = 1LL << (char)v161;\n          if ( (1LL << (char)v161) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v158) = 1;\n            v164 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v158) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v158;\n          *(&v164 + (unsigned int)v158) = *((_DWORD *)v43 + 4);\n          LODWORD(v158) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v160 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v170 != &v173 )\n                    free(v170);\n                  if ( v167 != &v168 )\n                    free(v167);\n                  v14 = 0LL;\n                  **(_DWORD **)&v160 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v160 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v160) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v160) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v156 = v46;\n            v47 = __errno_location();\n            v48 = v156;\n            v156 = v32;\n            *(_QWORD *)&v160 = v47;\n            LODWORD(v152) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v163 = -1;\n              **(_DWORD **)&v160 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v161 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v167 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v167 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v167 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v167 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v167 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v155 = v48;\n                  if ( (_DWORD)v158 != 1 )\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v149 = &v163;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v149 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v167 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v155 = v48;\n                  if ( (_DWORD)v158 != 1 )\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v72, a5, &v163);\nLABEL_131:\n                      v48 = (char *)v155;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v164, a5, v165);\nLABEL_210:\n                    v48 = (char *)v155;\nLABEL_132:\n                    v74 = v163;\n                    if ( v163 < 0 )\n                    {\nLABEL_154:\n                      if ( v156[1] )\n                      {\n                        v156[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v160;\n                        if ( !**(_DWORD **)&v160 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v170 != &v173 )\n                          free(v170);\n                        if ( v167 != &v168 )\n                          free(v167);\n                        **(_DWORD **)&v160 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v163 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v160 = (_DWORD)v152;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v170 != &v173 )\n                          free(v170);\n                        if ( v167 != &v168 )\n                          free(v167);\n                        v14 = 0LL;\n                        **(_DWORD **)&v160 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v155 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v155;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v155, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v155 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v155;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v149 = v72;\n                  break;\n                case 0xB:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v155 = v48;\n                  a5 = *((double *)v167 + 4 * v84 + 2);\n                  if ( (_DWORD)v158 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, v164, a5, &v163);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, &v163, a5, v150);\n                      v48 = (char *)v155;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, v164, a5, v165);\n                  }\n                  v48 = (char *)v155;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v155 = v48;\n                  if ( (_DWORD)v158 == 1 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v159,\n                            v164,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v167 + 2 * v82 + 1)));\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v158 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v159,\n                            &v163,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v167 + 2 * v82 + 1)));\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v159, v164, a5, v165);\n                  v48 = (char *)v155;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v80 = v164;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v80, a5, v149);\n            v74 = v163;\n            v48 = (char *)v155;\n            if ( v163 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v157;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v109 )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v170 != &v173 )\n      free(v170);\n    if ( v167 != &v168 )\n      free(v167);\n    *v154 = v107;\n    return v14;\n  }\n  if ( v170 != &v173 )\n    free(v170);\n  if ( v167 != &v168 )\n    free(v167);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n", 
            "funcStartAddr": "0x401bd3L", 
            "funcEndAddr": "0x401bd8L", 
            "funcName": "sub_4097B0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4097B0(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // er8\n  __int16 v91; // ax\n  unsigned __int64 v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  unsigned __int64 v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  unsigned __int64 v100; // rdi\n  __int64 v101; // rax\n  unsigned __int64 v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  __int64 v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  unsigned __int64 v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  unsigned __int64 v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  unsigned __int64 v125; // rax\n  __int64 v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  __int64 v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  __int64 v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  char *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  __int64 v150; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v151; // [rsp+28h] [rbp-6E8h]\n  char *v152; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v154; // [rsp+40h] [rbp-6D0h]\n  void *v155; // [rsp+48h] [rbp-6C8h]\n  char *v156; // [rsp+50h] [rbp-6C0h]\n  __int64 v157; // [rsp+58h] [rbp-6B8h]\n  char *v158; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v159; // [rsp+68h] [rbp-6A8h]\n  long double v160; // [rsp+70h] [rbp-6A0h]\n  void *v161; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v163; // [rsp+94h] [rbp-67Ch]\n  unsigned int v164; // [rsp+98h] [rbp-678h]\n  unsigned int v165; // [rsp+9Ch] [rbp-674h]\n  char v166; // [rsp+A0h] [rbp-670h]\n  void *v167; // [rsp+A8h] [rbp-668h]\n  __int64 v168; // [rsp+B0h] [rbp-660h]\n  __int64 v169; // [rsp+190h] [rbp-580h]\n  void *v170; // [rsp+198h] [rbp-578h]\n  __int64 v171; // [rsp+1A0h] [rbp-570h]\n  __int64 v172; // [rsp+1A8h] [rbp-568h]\n  __int64 v173; // [rsp+1B0h] [rbp-560h]\n  char v174; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v154 = a2;\n  if ( (int)sub_40B4F0(a3, &v169, &v166) < 0 )\n    return 0LL;\n  if ( (int)sub_40B2D0(v6, &v166) >= 0 )\n  {\n    v7 = v171 + 7;\n    if ( (unsigned __int64)(v171 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v172, v7);\n    v8 = v172 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v159 = (_BYTE *)(((unsigned __int64)&v151 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v159 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v154;\n    v12 = (char *)v170;\n    v13 = v5;\n    v14 = (char *)src;\n    v157 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v170;\n    if ( *(char **)v170 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v158 = v13;\n          LOBYTE(v160) = v20;\n          v161 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v161;\n          v13 = v158;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v160) )\n          {\n            *(_QWORD *)&v160 = v158;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v161;\n            v13 = *(char **)&v160;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v160 = v13;\n          v161 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v161;\n          v13 = *(char **)&v160;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v169 != v157 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v160 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v161) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v161 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v167;\n      v28 = (long double *)((char *)v167 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v161) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v161 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v161 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = (__int64)(v66 + 1);\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = (char *)v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v161;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v167 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v129 )\n                {\n                  v130 = (char *)v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v167 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v161 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = &v174;\n                  }\n                  else\n                  {\n                    v155 = (void *)v50;\n                    v156 = (char *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v158;\n                    _FST7 = v160;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v156;\n                    v50 = (unsigned __int64)v155;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v164;\n                  LOBYTE(v91) = v164;\n                  HIBYTE(v91) = BYTE1(v164) | 3;\n                  LOWORD(v164) = v91;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = (unsigned __int64)(v89 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v92 = (unsigned __int64)(v89 + 1);\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = (unsigned __int64)v89;\n                    if ( v68 & 8 )\n                    {\n                      v92 = (unsigned __int64)(v89 + 1);\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v92 + 2) = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v92 + 2) = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 70:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LOWORD(v151) = v90;\n                        v152 = (char *)v50;\n                        v155 = v89;\n                        v156 = (char *)v55;\n                        LODWORD(v158) = v68;\n                        *(_QWORD *)&v160 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v156;\n                        v97 = *(_QWORD *)&v160;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v158;\n                        v89 = (char *)v155;\n                        v50 = (unsigned __int64)v152;\n                        LOWORD(v90) = v151;\n                        if ( !v124 )\n                          v124 = 46;\n                        *(_BYTE *)(v92 + 1) = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *(_BYTE *)(++v125 - 1) = 48;\n                          while ( v125 != v92 + v123 + 2 );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 69:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 || (v105 = v92 + 1, v55) )\n                      {\n                        LOWORD(v151) = v90;\n                        v152 = (char *)v50;\n                        v155 = v89;\n                        v156 = (char *)v55;\n                        LODWORD(v158) = v68;\n                        *(_QWORD *)&v160 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v156;\n                        v105 = *(_QWORD *)&v160;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v158;\n                        v89 = (char *)v155;\n                        v50 = (unsigned __int64)v152;\n                        LOWORD(v90) = v151;\n                        if ( !v140 )\n                          v140 = 46;\n                        *(_BYTE *)(v92 + 1) = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *(_BYTE *)(++v141 - 1) = 48;\n                          while ( v141 != v92 + v139 + 2 );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      *(_BYTE *)(v105 + 3) = 48;\n                      *(_BYTE *)v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 71:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v150) = v90;\n                          v151 = v50;\n                          v152 = (char *)(v92 + 2);\n                          v155 = v89;\n                          LODWORD(v156) = v68;\n                          v158 = (char *)v55;\n                          *(_QWORD *)&v160 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v160;\n                          v118 = (__int64)v158;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v156;\n                          v89 = (char *)v155;\n                          v97 = (unsigned __int64)v152;\n                          v50 = v151;\n                          LOWORD(v90) = WORD2(v150);\n                          if ( !v119 )\n                            v119 = 46;\n                          *(_BYTE *)(v92 + 1) = v119;\n                          if ( v117 )\n                          {\n                            v120 = v92 + v118 + 1;\n                            v121 = v97;\n                            do\n                              *(_BYTE *)(++v121 - 1) = 48;\n                            while ( v121 != v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v152) = v90;\n                          v155 = (void *)v50;\n                          v156 = (char *)(v92 + 2);\n                          v158 = v89;\n                          LODWORD(v160) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v160);\n                          v89 = v158;\n                          v148 = *v147;\n                          v97 = (unsigned __int64)v156;\n                          v50 = (unsigned __int64)v155;\n                          LOWORD(v90) = (_WORD)v152;\n                          if ( !v148 )\n                            v148 = 46;\n                          *(_BYTE *)(v92 + 1) = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v92 = 48;\n                  *(_QWORD *)&v160 = v92 + 2;\n                  v135 = v12[72];\n                  *(_BYTE *)(v92 + 2) = 48;\n                  *(_BYTE *)(v92 + 1) = v135 + 23;\n                  if ( v68 & 0x10 || (v136 = v92 + 3, v55) )\n                  {\n                    HIDWORD(v150) = v90;\n                    v151 = v50;\n                    v152 = v89;\n                    v155 = (void *)v55;\n                    LODWORD(v156) = v68;\n                    v158 = (char *)(v92 + 4);\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v155;\n                    v136 = (__int64)v158;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v156;\n                    v89 = v152;\n                    v50 = v151;\n                    LOWORD(v90) = WORD2(v150);\n                    if ( !v145 )\n                      v145 = 46;\n                    *(_BYTE *)(v92 + 3) = v145;\n                    if ( v144 )\n                    {\n                      v146 = (char *)v136;\n                      do\n                        *(++v146 - 1) = 48;\n                      while ( v146 != (char *)v144 + v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = v136 + 3;\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(_QWORD *)&v160;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v164) = v90;\n                  v98 = v97 - (_QWORD)v89;\n                  if ( v50 > v97 - (unsigned __int64)v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = v97 + v99;\n                    v98 = v97 + v99 - (_QWORD)v89;\n                    if ( v68 & 2 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *(_BYTE *)(++v97 - 1) = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v100 + v101) = *(_BYTE *)(v97 + v101);\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = v92 + v99;\n                        do\n                          *(_BYTE *)(++v92 - 1) = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( (unsigned __int64)v89 < v97 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v100 + v112) = *(_BYTE *)(v97 + v112);\n                          --v112;\n                        }\n                        while ( &v89[-v97 - 1] != (char *)v112 );\n                        v97 = (unsigned __int64)v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = v97 + v99;\n                        do\n                          *(_BYTE *)(++v97 - 1) = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v161 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v160 = v98;\n                        v161 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v161;\n                        v98 = *(_QWORD *)&v160;\n                        v14 = v104;\n                      }\n                      else\n                      {\n                        LOBYTE(v158) = v14 == src;\n                        *(_QWORD *)&v160 = v98;\n                        v161 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v161;\n                        v98 = *(_QWORD *)&v160;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v158 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v161;\n                          v98 = *(_QWORD *)&v160;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                    }\n                  }\n                  v161 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v161 != &v174 )\n                    free(v161);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v159 + 1;\n        *v159 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v159;\n          v159[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v158 = v27;\n          *(_QWORD *)&v160 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v158;\n          v32 += *(_QWORD *)&v160;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v158 = v27;\n          *(_QWORD *)&v160 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v158;\n          v32 += *(_QWORD *)&v160;\n        }\n        if ( (unsigned int)v161 <= 0x10 )\n        {\n          v38 = 1LL << (char)v161;\n          if ( (1LL << (char)v161) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v158) = 1;\n            v164 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v158) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v158;\n          *(&v164 + (unsigned int)v158) = *((_DWORD *)v43 + 4);\n          LODWORD(v158) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v160 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v170 != &v173 )\n                    free(v170);\n                  if ( v167 != &v168 )\n                    free(v167);\n                  v14 = 0LL;\n                  **(_DWORD **)&v160 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v160 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v160) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v160) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v156 = v46;\n            v47 = __errno_location();\n            v48 = v156;\n            v156 = v32;\n            *(_QWORD *)&v160 = v47;\n            LODWORD(v152) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v163 = -1;\n              **(_DWORD **)&v160 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v161 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v167 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v167 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v167 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v167 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v167 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v155 = v48;\n                  if ( (_DWORD)v158 != 1 )\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v149 = &v163;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v149 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v167 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v155 = v48;\n                  if ( (_DWORD)v158 != 1 )\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v72, a5, &v163);\nLABEL_131:\n                      v48 = (char *)v155;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v164, a5, v165);\nLABEL_210:\n                    v48 = (char *)v155;\nLABEL_132:\n                    v74 = v163;\n                    if ( v163 < 0 )\n                    {\nLABEL_154:\n                      if ( v156[1] )\n                      {\n                        v156[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v160;\n                        if ( !**(_DWORD **)&v160 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v170 != &v173 )\n                          free(v170);\n                        if ( v167 != &v168 )\n                          free(v167);\n                        **(_DWORD **)&v160 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v163 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v160 = (_DWORD)v152;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v170 != &v173 )\n                          free(v170);\n                        if ( v167 != &v168 )\n                          free(v167);\n                        v14 = 0LL;\n                        **(_DWORD **)&v160 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v155 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v155;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v155, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v155 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v155;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v149 = v72;\n                  break;\n                case 0xB:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v155 = v48;\n                  a5 = *((double *)v167 + 4 * v84 + 2);\n                  if ( (_DWORD)v158 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, v164, a5, &v163);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, &v163, a5, v150);\n                      v48 = (char *)v155;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, v164, a5, v165);\n                  }\n                  v48 = (char *)v155;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v155 = v48;\n                  if ( (_DWORD)v158 == 1 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v159,\n                            v164,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v167 + 2 * v82 + 1)));\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v158 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v159,\n                            &v163,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v167 + 2 * v82 + 1)));\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v159, v164, a5, v165);\n                  v48 = (char *)v155;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v80 = v164;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v80, a5, v149);\n            v74 = v163;\n            v48 = (char *)v155;\n            if ( v163 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v157;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v109 )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v170 != &v173 )\n      free(v170);\n    if ( v167 != &v168 )\n      free(v167);\n    *v154 = v107;\n    return v14;\n  }\n  if ( v170 != &v173 )\n    free(v170);\n  if ( v167 != &v168 )\n    free(v167);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_4097B0(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // er8\n  __int16 v91; // ax\n  unsigned __int64 v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  unsigned __int64 v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  unsigned __int64 v100; // rdi\n  __int64 v101; // rax\n  unsigned __int64 v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  __int64 v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  unsigned __int64 v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  unsigned __int64 v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  unsigned __int64 v125; // rax\n  __int64 v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  __int64 v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  __int64 v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  char *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  __int64 v150; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v151; // [rsp+28h] [rbp-6E8h]\n  char *v152; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v154; // [rsp+40h] [rbp-6D0h]\n  void *v155; // [rsp+48h] [rbp-6C8h]\n  char *v156; // [rsp+50h] [rbp-6C0h]\n  __int64 v157; // [rsp+58h] [rbp-6B8h]\n  char *v158; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v159; // [rsp+68h] [rbp-6A8h]\n  long double v160; // [rsp+70h] [rbp-6A0h]\n  void *v161; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v163; // [rsp+94h] [rbp-67Ch]\n  unsigned int v164; // [rsp+98h] [rbp-678h]\n  unsigned int v165; // [rsp+9Ch] [rbp-674h]\n  char v166; // [rsp+A0h] [rbp-670h]\n  void *v167; // [rsp+A8h] [rbp-668h]\n  __int64 v168; // [rsp+B0h] [rbp-660h]\n  __int64 v169; // [rsp+190h] [rbp-580h]\n  void *v170; // [rsp+198h] [rbp-578h]\n  __int64 v171; // [rsp+1A0h] [rbp-570h]\n  __int64 v172; // [rsp+1A8h] [rbp-568h]\n  __int64 v173; // [rsp+1B0h] [rbp-560h]\n  char v174; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v154 = a2;\n  if ( (int)sub_40B4F0(a3, &v169, &v166) < 0 )\n    return 0LL;\n  if ( (int)sub_40B2D0(v6, &v166) >= 0 )\n  {\n    v7 = v171 + 7;\n    if ( (unsigned __int64)(v171 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v172, v7);\n    v8 = v172 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v159 = (_BYTE *)(((unsigned __int64)&v151 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v159 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v154;\n    v12 = (char *)v170;\n    v13 = v5;\n    v14 = (char *)src;\n    v157 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v170;\n    if ( *(char **)v170 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v158 = v13;\n          LOBYTE(v160) = v20;\n          v161 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v161;\n          v13 = v158;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v160) )\n          {\n            *(_QWORD *)&v160 = v158;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v161;\n            v13 = *(char **)&v160;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v160 = v13;\n          v161 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v161;\n          v13 = *(char **)&v160;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v169 != v157 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v160 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v161) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v161 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v167;\n      v28 = (long double *)((char *)v167 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v161) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v161 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v161 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = (__int64)(v66 + 1);\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = (char *)v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v161;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v167 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v129 )\n                {\n                  v130 = (char *)v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v167 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v161 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = &v174;\n                  }\n                  else\n                  {\n                    v155 = (void *)v50;\n                    v156 = (char *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v158;\n                    _FST7 = v160;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v156;\n                    v50 = (unsigned __int64)v155;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v164;\n                  LOBYTE(v91) = v164;\n                  HIBYTE(v91) = BYTE1(v164) | 3;\n                  LOWORD(v164) = v91;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = (unsigned __int64)(v89 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v92 = (unsigned __int64)(v89 + 1);\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = (unsigned __int64)v89;\n                    if ( v68 & 8 )\n                    {\n                      v92 = (unsigned __int64)(v89 + 1);\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v92 + 2) = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v92 + 2) = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 70:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LOWORD(v151) = v90;\n                        v152 = (char *)v50;\n                        v155 = v89;\n                        v156 = (char *)v55;\n                        LODWORD(v158) = v68;\n                        *(_QWORD *)&v160 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v156;\n                        v97 = *(_QWORD *)&v160;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v158;\n                        v89 = (char *)v155;\n                        v50 = (unsigned __int64)v152;\n                        LOWORD(v90) = v151;\n                        if ( !v124 )\n                          v124 = 46;\n                        *(_BYTE *)(v92 + 1) = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *(_BYTE *)(++v125 - 1) = 48;\n                          while ( v125 != v92 + v123 + 2 );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 69:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 || (v105 = v92 + 1, v55) )\n                      {\n                        LOWORD(v151) = v90;\n                        v152 = (char *)v50;\n                        v155 = v89;\n                        v156 = (char *)v55;\n                        LODWORD(v158) = v68;\n                        *(_QWORD *)&v160 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v156;\n                        v105 = *(_QWORD *)&v160;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v158;\n                        v89 = (char *)v155;\n                        v50 = (unsigned __int64)v152;\n                        LOWORD(v90) = v151;\n                        if ( !v140 )\n                          v140 = 46;\n                        *(_BYTE *)(v92 + 1) = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *(_BYTE *)(++v141 - 1) = 48;\n                          while ( v141 != v92 + v139 + 2 );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      *(_BYTE *)(v105 + 3) = 48;\n                      *(_BYTE *)v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 71:\n                      *(_BYTE *)v92 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v150) = v90;\n                          v151 = v50;\n                          v152 = (char *)(v92 + 2);\n                          v155 = v89;\n                          LODWORD(v156) = v68;\n                          v158 = (char *)v55;\n                          *(_QWORD *)&v160 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v160;\n                          v118 = (__int64)v158;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v156;\n                          v89 = (char *)v155;\n                          v97 = (unsigned __int64)v152;\n                          v50 = v151;\n                          LOWORD(v90) = WORD2(v150);\n                          if ( !v119 )\n                            v119 = 46;\n                          *(_BYTE *)(v92 + 1) = v119;\n                          if ( v117 )\n                          {\n                            v120 = v92 + v118 + 1;\n                            v121 = v97;\n                            do\n                              *(_BYTE *)(++v121 - 1) = 48;\n                            while ( v121 != v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v152) = v90;\n                          v155 = (void *)v50;\n                          v156 = (char *)(v92 + 2);\n                          v158 = v89;\n                          LODWORD(v160) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v160);\n                          v89 = v158;\n                          v148 = *v147;\n                          v97 = (unsigned __int64)v156;\n                          v50 = (unsigned __int64)v155;\n                          LOWORD(v90) = (_WORD)v152;\n                          if ( !v148 )\n                            v148 = 46;\n                          *(_BYTE *)(v92 + 1) = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v92 = 48;\n                  *(_QWORD *)&v160 = v92 + 2;\n                  v135 = v12[72];\n                  *(_BYTE *)(v92 + 2) = 48;\n                  *(_BYTE *)(v92 + 1) = v135 + 23;\n                  if ( v68 & 0x10 || (v136 = v92 + 3, v55) )\n                  {\n                    HIDWORD(v150) = v90;\n                    v151 = v50;\n                    v152 = v89;\n                    v155 = (void *)v55;\n                    LODWORD(v156) = v68;\n                    v158 = (char *)(v92 + 4);\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v155;\n                    v136 = (__int64)v158;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v156;\n                    v89 = v152;\n                    v50 = v151;\n                    LOWORD(v90) = WORD2(v150);\n                    if ( !v145 )\n                      v145 = 46;\n                    *(_BYTE *)(v92 + 3) = v145;\n                    if ( v144 )\n                    {\n                      v146 = (char *)v136;\n                      do\n                        *(++v146 - 1) = 48;\n                      while ( v146 != (char *)v144 + v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = v136 + 3;\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(_QWORD *)&v160;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v164) = v90;\n                  v98 = v97 - (_QWORD)v89;\n                  if ( v50 > v97 - (unsigned __int64)v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = v97 + v99;\n                    v98 = v97 + v99 - (_QWORD)v89;\n                    if ( v68 & 2 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *(_BYTE *)(++v97 - 1) = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v100 + v101) = *(_BYTE *)(v97 + v101);\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = v92 + v99;\n                        do\n                          *(_BYTE *)(++v92 - 1) = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( (unsigned __int64)v89 < v97 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v100 + v112) = *(_BYTE *)(v97 + v112);\n                          --v112;\n                        }\n                        while ( &v89[-v97 - 1] != (char *)v112 );\n                        v97 = (unsigned __int64)v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = v97 + v99;\n                        do\n                          *(_BYTE *)(++v97 - 1) = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v161 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v160 = v98;\n                        v161 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v161;\n                        v98 = *(_QWORD *)&v160;\n                        v14 = v104;\n                      }\n                      else\n                      {\n                        LOBYTE(v158) = v14 == src;\n                        *(_QWORD *)&v160 = v98;\n                        v161 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v161;\n                        v98 = *(_QWORD *)&v160;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v158 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v161;\n                          v98 = *(_QWORD *)&v160;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                    }\n                  }\n                  v161 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v161 != &v174 )\n                    free(v161);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v159 + 1;\n        *v159 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v159;\n          v159[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v158 = v27;\n          *(_QWORD *)&v160 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v158;\n          v32 += *(_QWORD *)&v160;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v158 = v27;\n          *(_QWORD *)&v160 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v158;\n          v32 += *(_QWORD *)&v160;\n        }\n        if ( (unsigned int)v161 <= 0x10 )\n        {\n          v38 = 1LL << (char)v161;\n          if ( (1LL << (char)v161) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v158) = 1;\n            v164 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v158) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v158;\n          *(&v164 + (unsigned int)v158) = *((_DWORD *)v43 + 4);\n          LODWORD(v158) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v160 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v170 != &v173 )\n                    free(v170);\n                  if ( v167 != &v168 )\n                    free(v167);\n                  v14 = 0LL;\n                  **(_DWORD **)&v160 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v160 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v160) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v160) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v156 = v46;\n            v47 = __errno_location();\n            v48 = v156;\n            v156 = v32;\n            *(_QWORD *)&v160 = v47;\n            LODWORD(v152) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v163 = -1;\n              **(_DWORD **)&v160 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v161 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v167 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v167 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v167 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v167 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v167 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v155 = v48;\n                  if ( (_DWORD)v158 != 1 )\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v149 = &v163;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v149 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v167 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v155 = v48;\n                  if ( (_DWORD)v158 != 1 )\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v72, a5, &v163);\nLABEL_131:\n                      v48 = (char *)v155;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v164, a5, v165);\nLABEL_210:\n                    v48 = (char *)v155;\nLABEL_132:\n                    v74 = v163;\n                    if ( v163 < 0 )\n                    {\nLABEL_154:\n                      if ( v156[1] )\n                      {\n                        v156[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v160;\n                        if ( !**(_DWORD **)&v160 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v170 != &v173 )\n                          free(v170);\n                        if ( v167 != &v168 )\n                          free(v167);\n                        **(_DWORD **)&v160 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v163 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v160 = (_DWORD)v152;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v170 != &v173 )\n                          free(v170);\n                        if ( v167 != &v168 )\n                          free(v167);\n                        v14 = 0LL;\n                        **(_DWORD **)&v160 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v155 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v155;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v155, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v155 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v155;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v149 = v72;\n                  break;\n                case 0xB:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v155 = v48;\n                  a5 = *((double *)v167 + 4 * v84 + 2);\n                  if ( (_DWORD)v158 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, v164, a5, &v163);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v158 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, &v163, a5, v150);\n                      v48 = (char *)v155;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v159, v164, a5, v165);\n                  }\n                  v48 = (char *)v155;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v155 = v48;\n                  if ( (_DWORD)v158 == 1 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v159,\n                            v164,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v167 + 2 * v82 + 1)));\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v158 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v159,\n                            &v163,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v167 + 2 * v82 + 1)));\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v159, v164, a5, v165);\n                  v48 = (char *)v155;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v80 = v164;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v159, v80, a5, v149);\n            v74 = v163;\n            v48 = (char *)v155;\n            if ( v163 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v157;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v109 )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v170 != &v173 )\n      free(v170);\n    if ( v167 != &v168 )\n      free(v167);\n    *v154 = v107;\n    return v14;\n  }\n  if ( v170 != &v173 )\n    free(v170);\n  if ( v167 != &v168 )\n    free(v167);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n", 
            "funcStartAddr": "0x401bd3L", 
            "funcEndAddr": "0x401bd8L", 
            "funcName": "sub_4097B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B2D0(int *a1, unsigned __int64 *a2)\n{\n  unsigned int *v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  unsigned int *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = (unsigned int *)a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( (unsigned __int64)*v2 )\n      {\n        case 1uLL:\n        case 2uLL:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *((_BYTE *)v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3uLL:\n        case 4uLL:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *((_WORD *)v2 + 8) = *v10;\n          goto LABEL_7;\n        case 5uLL:\n        case 6uLL:\n        case 0xDuLL:\n        case 0xEuLL:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (unsigned int *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (unsigned int *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          v2[4] = *v8;\n          goto LABEL_7;\n        case 7uLL:\n        case 8uLL:\n        case 9uLL:\n        case 0xAuLL:\n        case 0x11uLL:\n        case 0x12uLL:\n        case 0x13uLL:\n        case 0x14uLL:\n        case 0x15uLL:\n        case 0x16uLL:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *((_QWORD *)v2 + 2) = *v5;\n          goto LABEL_7;\n        case 0xBuLL:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *((_QWORD *)v2 + 2) = *v14;\n          goto LABEL_7;\n        case 0xCuLL:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *((long double *)v2 + 1) = *v15;\n          goto LABEL_7;\n        case 0xFuLL:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *((_QWORD *)v2 + 2) = v21;\n          goto LABEL_7;\n        case 0x10uLL:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_40FDE0;\n          *((_QWORD *)v2 + 2) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 8;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b2d0L", 
            "funcEndAddr": "0x40b4e9L", 
            "funcName": "sub_40B2D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B4F0(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 *v5; // r15\n  unsigned __int64 v6; // r9\n  unsigned __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  __int64 v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  void *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  void *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  __int64 v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  void *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  __int64 v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v94; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v95; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v96; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v97; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v5 = a3;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = (__int64)(a2 + 4);\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (__int64)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *(_DWORD *)(v12 + 16) = 0;\n  *(_QWORD *)(v12 + 24) = 0LL;\n  *(_QWORD *)(v12 + 32) = 0LL;\n  *(_QWORD *)(v12 + 40) = -1LL;\n  *(_QWORD *)(v12 + 48) = 0LL;\n  *(_QWORD *)(v12 + 56) = 0LL;\n  *(_QWORD *)(v12 + 64) = -1LL;\n  *(_QWORD *)(v12 + 80) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_17;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_17;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_131;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_131;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_17:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case 39:\n        *(_DWORD *)(v12 + 16) |= 1u;\n        goto LABEL_16;\n      case 45:\n        *(_DWORD *)(v12 + 16) |= 2u;\n        goto LABEL_16;\n      case 43:\n        *(_DWORD *)(v12 + 16) |= 4u;\n        goto LABEL_16;\n      case 32:\n        *(_DWORD *)(v12 + 16) |= 8u;\n        goto LABEL_16;\n      case 35:\n        *(_DWORD *)(v12 + 16) |= 0x10u;\n        goto LABEL_16;\n    }\n    if ( v13 != 48 )\n      break;\n    *(_DWORD *)(v12 + 16) |= 0x20u;\nLABEL_16:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *(_DWORD *)(v12 + 16) |= 0x40u;\n    goto LABEL_16;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *(_QWORD *)(v12 + 24) = v9;\n    *(_QWORD *)(v12 + 32) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_215;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 != 36 )\n    {\nLABEL_215:\n      v18 = *(_QWORD *)(v12 + 40);\n      if ( v18 == -1LL )\n      {\n        *(_QWORD *)(v12 + 40) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v18 = v81++;\n      }\n    }\n    else\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_131;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_131;\n      *(_QWORD *)(v12 + 40) = v18;\n      v14 = v47 + 2;\n    }\n    v19 = (_DWORD *)v5[1];\n    if ( v6 > v18 )\n    {\n      v20 = *v5;\nLABEL_43:\n      if ( v20 <= v18 )\n      {\n        do\n          v19[8 * ++v20 - 8] = 0;\n        while ( v20 <= v18 );\n        *v5 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_26;\n        }\n        goto LABEL_132;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_27;\nLABEL_48:\n      v22 = v9[1] == 42;\n      *(_QWORD *)(v12 + 48) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *(_QWORD *)(v12 + 56) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_27;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *(_QWORD *)(v12 + 56) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_216;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 != 36 )\n      {\nLABEL_216:\n        v26 = *(_QWORD *)(v12 + 64);\n        if ( v26 != -1LL )\n          goto LABEL_53;\n        *(_QWORD *)(v12 + 64) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_53;\n        }\n      }\n      else\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_131;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *(_QWORD *)(v12 + 64) = v26;\n          v24 = v72 + 2;\nLABEL_53:\n          v19 = (_DWORD *)v5[1];\n          if ( v6 > v26 )\n          {\n            v27 = *v5;\n            goto LABEL_55;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_163;\n              v27 = *v5;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)v5[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_161;\n              v27 = *v5;\n              if ( src != v40 )\n                goto LABEL_172;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *v5;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_172:\n            v5[1] = (unsigned __int64)v19;\nLABEL_55:\n            if ( v27 <= v26 )\n            {\n              do\n                v19[8 * ++v27 - 8] = 0;\n              while ( v27 <= v26 );\n              *v5 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_27;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_27;\n            }\n            goto LABEL_132;\n          }\nLABEL_160:\n          v40 = v19;\n          goto LABEL_161;\n        }\n      }\nLABEL_131:\n      v19 = (_DWORD *)v5[1];\nLABEL_132:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (void *)v4[1];\n      if ( (void *)v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_160;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_163;\n      v20 = *v5;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)v5[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_161;\n      v20 = *v5;\n      if ( src != v40 )\n        goto LABEL_94;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *v5;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_94:\n    v5[1] = (unsigned __int64)v19;\n    goto LABEL_43;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *(_QWORD *)(v12 + 24) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = (__int64)(i + 1);\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - (_QWORD)v9;\n      v9 = (char *)v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *(_QWORD *)(v12 + 32) = v9;\n    v13 = *v9;\n  }\nLABEL_26:\n  if ( v13 == 46 )\n    goto LABEL_48;\nLABEL_27:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_34;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_34;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_34:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case 37:\n      goto LABEL_71;\n    case 65:\n    case 69:\n    case 70:\n    case 71:\n    case 97:\n    case 101:\n    case 102:\n    case 103:\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_63;\n    case 67:\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_63;\n    case 83:\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_63;\n    case 88:\n    case 111:\n    case 117:\n    case 120:\n      v29 = 10;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 6 : 4;\n        }\n      }\n      goto LABEL_63;\n    case 99:\n      v29 = (v15 > 7) + 13;\n      goto LABEL_63;\n    case 100:\n    case 105:\n      v29 = 9;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 5 : 3;\n        }\n      }\n      goto LABEL_63;\n    case 110:\n      v29 = 22;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( !(v15 & 2) )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_63;\n    case 112:\n      v29 = 17;\n      goto LABEL_63;\n    case 115:\n      v29 = (v15 > 7) + 15;\nLABEL_63:\n      if ( v11 == -1LL )\n      {\n        *(_QWORD *)(v12 + 80) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v11 = v81++;\n      }\n      else\n      {\n        *(_QWORD *)(v12 + 80) = v11;\n      }\n      v19 = (_DWORD *)v5[1];\n      if ( v6 > v11 )\n        goto LABEL_66;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_160;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_163;\n        goto LABEL_159;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_211;\n      if ( src == (_DWORD *)v5[1] )\n      {\n        v19 = src;\nLABEL_159:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *v5);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      v5[1] = (unsigned __int64)v19;\nLABEL_66:\n      v30 = *v5;\n      if ( *v5 <= v11 )\n      {\n        do\n          v19[8 * ++v30 - 8] = 0;\n        while ( v30 <= v11 );\n        *v5 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_132;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_71:\n      *(_BYTE *)(v12 + 72) = v13;\n      v32 = *v4;\n      *(_QWORD *)(v12 + 8) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > v32 + 1 )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( (v7 & 0x8000000000000000LL) == 0LL )\n      {\n        v33 = 2 * v7;\n        if ( 2 * v7 <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (void *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( (void *)v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)v5[1];\n              if ( src != v40 )\n                goto LABEL_162;\n              goto LABEL_165;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_211;\n            v34 = (void *)v91[1];\n            v8 = *v91;\n            if ( (void *)v82 != v34 )\n              goto LABEL_78;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_78:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_211:\n      v40 = (_DWORD *)v5[1];\nLABEL_161:\n      if ( src != v40 )\n      {\nLABEL_162:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_163:\n      v58 = (void *)v4[1];\n      if ( (void *)v82 != v58 )\n        free(v58);\nLABEL_165:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_131;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b4f0L", 
            "funcEndAddr": "0x40c1f9L", 
            "funcName": "sub_40B4F0"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x40c200L", 
            "funcEndAddr": "0x40c25dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x40c260L", 
            "funcEndAddr": "0x40c261L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40C270(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_612248 )\n    v1 = (void *)unk_612248;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x40c270L", 
            "funcEndAddr": "0x40c288L", 
            "funcName": "sub_40C270"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C288(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_611E30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x40c288L", 
            "funcEndAddr": "0x40c2a8L", 
            "funcName": "sub_40C288"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_od.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 102, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}