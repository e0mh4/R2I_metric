{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  char v3; // r14\n  char *v4; // r13\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbp\n  const char *v7; // rbx\n  int v8; // eax\n  const char *v9; // rsi\n  __int64 v10; // rax\n  unsigned int v11; // eax\n  char *v12; // rax\n  __int64 v13; // rbx\n  __ssize_t v14; // rax\n  __int64 v15; // r8\n  char *v16; // r15\n  unsigned __int64 v17; // rcx\n  __int64 v18; // rdx\n  char v19; // r10\n  bool v20; // cf\n  bool v21; // zf\n  const char *v22; // rdi\n  __int64 v23; // rcx\n  const char *v24; // rsi\n  char v25; // al\n  char *v26; // rax\n  __int64 v27; // rdx\n  char v28; // al\n  __int64 v29; // rax\n  char v30; // si\n  const char *v31; // r15\n  bool v32; // cf\n  bool v33; // zf\n  char *v34; // rdi\n  const char *v35; // rsi\n  _BOOL8 v36; // r14\n  unsigned int v37; // eax\n  char *v38; // rax\n  const char *v39; // rsi\n  char *v40; // rax\n  __int64 v41; // rcx\n  __int64 v42; // r8\n  int v43; // ebx\n  char v44; // al\n  __int64 v45; // r15\n  char *v46; // rax\n  const __int32_t **v47; // rax\n  unsigned __int64 v48; // rdx\n  const __int32_t *v49; // rdi\n  char *v50; // rax\n  __int64 v52; // r11\n  const char *v53; // rdx\n  __int64 v54; // rbx\n  int *v55; // rax\n  char *v56; // rax\n  unsigned int v57; // ebx\n  __int64 v58; // rdx\n  char *v59; // rax\n  char *v60; // rax\n  char *v61; // rax\n  char v62; // dl\n  __int64 v63; // rax\n  const char *v64; // rax\n  char v65; // dl\n  char v66; // al\n  char *v67; // rax\n  __int64 v68; // rbx\n  char *v69; // rax\n  __int64 v70; // rax\n  int *v71; // rax\n  char *v72; // rax\n  char *v73; // rax\n  char *v74; // rax\n  char *v75; // rax\n  char *v76; // rax\n  char *v77; // rax\n  const char **v78; // [rsp+0h] [rbp-128h]\n  char *s; // [rsp+8h] [rbp-120h]\n  char v80; // [rsp+13h] [rbp-115h]\n  int v81; // [rsp+14h] [rbp-114h]\n  unsigned __int64 v82; // [rsp+18h] [rbp-110h]\n  __int64 v83; // [rsp+20h] [rbp-108h]\n  unsigned __int8 v84; // [rsp+20h] [rbp-108h]\n  unsigned __int64 v85; // [rsp+20h] [rbp-108h]\n  unsigned __int8 v86; // [rsp+20h] [rbp-108h]\n  const char *v87; // [rsp+20h] [rbp-108h]\n  unsigned __int64 v88; // [rsp+20h] [rbp-108h]\n  char v89; // [rsp+28h] [rbp-100h]\n  unsigned __int64 v90; // [rsp+28h] [rbp-100h]\n  unsigned __int64 v91; // [rsp+28h] [rbp-100h]\n  unsigned __int64 v92; // [rsp+28h] [rbp-100h]\n  __int64 v93; // [rsp+30h] [rbp-F8h]\n  const char **v94; // [rsp+38h] [rbp-F0h]\n  unsigned __int64 v95; // [rsp+40h] [rbp-E8h]\n  char v96; // [rsp+48h] [rbp-E0h]\n  char v97; // [rsp+49h] [rbp-DFh]\n  char v98; // [rsp+4Ah] [rbp-DEh]\n  char v99; // [rsp+4Bh] [rbp-DDh]\n  int v100; // [rsp+4Ch] [rbp-DCh]\n  char v101; // [rsp+5Fh] [rbp-C9h]\n  char *lineptr; // [rsp+60h] [rbp-C8h]\n  size_t n; // [rsp+68h] [rbp-C0h]\n  char v104[64]; // [rsp+70h] [rbp-B8h]\n  char v105[120]; // [rsp+B0h] [rbp-78h]\n\n  v3 = 0;\n  LOBYTE(v4) = 0;\n  LODWORD(v5) = -1;\n  LODWORD(v6) = a1;\n  v7 = (const char *)a2;\n  sub_407930(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40B500(sub_403080);\n  setvbuf(stdout, 0LL, 1, 0LL);\n  while ( 1 )\n  {\n    v8 = sub_40AD60(a1, a2, \"bctw\", &off_40C0C0, 0LL);\n    if ( v8 == -1 )\n      break;\n    if ( v8 == 119 )\n    {\n      byte_60F2DC = 0;\n      byte_60F2DB = 1;\n      byte_60F2D9 = 0;\n    }\n    else if ( v8 <= 119 )\n    {\n      if ( v8 == 98 )\n        goto LABEL_15;\n      if ( v8 <= 98 )\n      {\n        if ( v8 == -131 )\n        {\n          sub_4099E0((char)stdout);\n          exit(0);\n        }\n        if ( v8 == -130 )\n          sub_402C90(0);\nLABEL_204:\n        sub_402C90(1);\n      }\n      if ( v8 == 99 )\n      {\n        LOBYTE(v4) = 1;\n      }\n      else\n      {\n        if ( v8 != 116 )\n          goto LABEL_204;\n        LODWORD(v5) = 0;\n      }\n    }\n    else if ( v8 == 130 )\n    {\n      byte_60F2DC = 0;\n      byte_60F2DB = 0;\n      byte_60F2D9 = 1;\n    }\n    else if ( v8 > 130 )\n    {\n      if ( v8 == 131 )\n      {\n        byte_60F2D8 = 1;\n      }\n      else\n      {\n        if ( v8 != 132 )\n          goto LABEL_204;\n        v3 = 1;\nLABEL_15:\n        LODWORD(v5) = 1;\n      }\n    }\n    else if ( v8 == 128 )\n    {\n      byte_60F2DA = 1;\n    }\n    else\n    {\n      if ( v8 != 129 )\n        goto LABEL_204;\n      byte_60F2DC = 1;\n      byte_60F2DB = 0;\n      byte_60F2D9 = 0;\n    }\n  }\n  qword_60F2E8 = 98LL;\n  qword_60F2E0 = 96LL;\n  if ( !(_DWORD)v5 && v3 )\n  {\n    v9 = \"--tag does not support --text mode\";\n    goto LABEL_203;\n  }\n  if ( (_BYTE)v4 )\n  {\n    v9 = \"the --tag option is meaningless when verifying checksums\";\n    if ( v3 )\n      goto LABEL_203;\n  }\n  v9 = \"the --binary and --text options are meaningless when verifying checksums\";\n  if ( ((v5 & 0x80000000) == 0LL) & (unsigned __int8)v4 )\n    goto LABEL_203;\n  if ( byte_60F2DA )\n    goto LABEL_71;\n  if ( !byte_60F2DC )\n  {\n    if ( !byte_60F2DB )\n      goto LABEL_201;\n    v9 = \"the --warn option is meaningful only when verifying checksums\";\n    if ( (_BYTE)v4 )\n      goto LABEL_40;\n    goto LABEL_203;\n  }\n  v9 = \"the --status option is meaningful only when verifying checksums\";\n  if ( !(_BYTE)v4 )\n  {\nLABEL_203:\n    v72 = dcgettext(0LL, v9, 5);\n    error(0, 0, v72);\n    goto LABEL_204;\n  }\nLABEL_37:\n  if ( !byte_60F2DB )\n    goto LABEL_38;\n  while ( 1 )\n  {\nLABEL_40:\n    if ( (_DWORD)v5 == -1 )\n      LODWORD(v5) = 0;\n    v94 = (const char **)&v7[8 * (int)v6];\n    v10 = dword_60F29C;\n    if ( dword_60F29C == (_DWORD)v6 )\n    {\n      *v94 = \"-\";\n      ++v94;\n    }\n    v78 = (const char **)&v7[8 * v10];\n    if ( v94 <= v78 )\n    {\n      v96 = 1;\n      goto LABEL_130;\n    }\n    v96 = 1;\n    v80 = (char)v4;\n    v11 = (unsigned int)v5 < 1 ? 0xFFFFFFF6 : 0;\n    v98 = v3;\n    v100 = v11 + 42;\n    v99 = v11 + 42;\n    do\n    {\n      s = (char *)*v78;\n      if ( !v80 )\n      {\n        if ( !(unsigned __int8)sub_402AF0(s, v104, v105) )\n        {\n          v96 = 0;\n          goto LABEL_129;\n        }\n        if ( strchr(s, 92) || strchr(s, 10) )\n        {\n          if ( v98 )\n          {\n            v77 = stdout->_IO_write_ptr;\n            v57 = 1;\n            if ( stdout->_IO_write_end <= v77 )\n            {\n              __overflow(stdout, 92);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v77 + 1;\n              *v77 = 92;\n            }\nLABEL_197:\n            fwrite_unlocked(\"SHA384\", 1uLL, 6uLL, stdout);\n            fwrite_unlocked(\" (\", 1uLL, 2uLL, stdout);\n            sub_402A40(s, v57);\n            fwrite_unlocked(\") = \", 1uLL, 4uLL, stdout);\n            if ( !((unsigned __int64)qword_60F2E0 >> 1) )\n              goto LABEL_153;\n            goto LABEL_151;\n          }\n          v56 = stdout->_IO_write_ptr;\n          if ( v56 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 92);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v56 + 1;\n            *v56 = 92;\n          }\n          v57 = 1;\n          if ( !((unsigned __int64)qword_60F2E0 >> 1) )\n            goto LABEL_157;\n        }\n        else\n        {\n          v57 = 0;\n          if ( v98 )\n            goto LABEL_197;\n          if ( !((unsigned __int64)qword_60F2E0 >> 1) )\n            goto LABEL_157;\n        }\nLABEL_151:\n        v6 = 0LL;\n        do\n        {\n          v58 = (unsigned __int8)v104[v6++];\n          __printf_chk(1LL, \"%02x\", v58);\n        }\n        while ( (unsigned __int64)qword_60F2E0 >> 1 > v6 );\nLABEL_153:\n        if ( v98 )\n        {\nLABEL_154:\n          v59 = stdout->_IO_write_ptr;\n          if ( v59 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 10);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v59 + 1;\n            *v59 = 10;\n          }\n          goto LABEL_129;\n        }\nLABEL_157:\n        v60 = stdout->_IO_write_ptr;\n        if ( v60 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 32);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v60 + 1;\n          *v60 = 32;\n        }\n        v61 = stdout->_IO_write_ptr;\n        if ( v61 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v100);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v61 + 1;\n          *v61 = v99;\n        }\n        sub_402A40(s, v57);\n        goto LABEL_154;\n      }\n      v81 = strcmp(*v78, \"-\");\n      if ( v81 )\n      {\n        v6 = sub_407890(s, 4240911LL);\n        if ( !v6 )\n          goto LABEL_141;\n      }\n      else\n      {\n        byte_60F2F0 = 1;\n        v12 = dcgettext(0LL, \"standard input\", 5);\n        v6 = (unsigned __int64)stdin;\n        s = v12;\n      }\n      v97 = 0;\n      v3 = 0;\n      v5 = 0LL;\n      v13 = 1LL;\n      lineptr = 0LL;\n      n = 0LL;\n      v95 = 0LL;\n      v82 = 0LL;\n      while ( 1 )\n      {\n        v14 = __getdelim(&lineptr, &n, 10, (FILE *)v6);\n        if ( v14 <= 0 )\n          break;\n        v16 = lineptr;\n        v17 = (unsigned __int8)*lineptr;\n        if ( (_BYTE)v17 == 35 )\n          goto LABEL_68;\n        v15 = v14;\n        if ( lineptr[v14 - 1] == 10 )\n        {\n          v15 = v14 - 1;\n          lineptr[v14 - 1] = 0;\n          v16 = lineptr;\n          LOBYTE(v17) = *lineptr;\n        }\n        v18 = 0LL;\n        while ( (_BYTE)v17 == 32 )\nLABEL_55:\n          LOBYTE(v17) = v16[++v18];\n        if ( (_BYTE)v17 == 9 )\n          goto LABEL_55;\n        v19 = 0;\n        v20 = (unsigned __int8)v17 < 0x5Cu;\n        v21 = (_BYTE)v17 == 92;\n        if ( (_BYTE)v17 == 92 )\n        {\n          v19 = v80;\n          v20 = __CFADD__(v18, 1LL);\n          v21 = v18++ == -1;\n        }\n        v4 = &v16[v18];\n        v22 = \"SHA384\";\n        v23 = 6LL;\n        v24 = &v16[v18];\n        do\n        {\n          if ( !v23 )\n            break;\n          v20 = *v24 < (unsigned int)*v22;\n          v21 = *v24++ == *v22++;\n          --v23;\n        }\n        while ( v21 );\n        if ( (!v20 && !v21) == v20 )\n        {\n          v25 = v16[v18 + 6];\n          v17 = v18 + 6;\n          if ( v25 == 32 )\n          {\n            v25 = v16[v18 + 7];\n            v17 = v18 + 7;\n          }\n          if ( v25 != 40 || (++v17, (v15 -= v17) == 0) )\n          {\nLABEL_66:\n            ++v5;\n            if ( byte_60F2DB )\n            {\n              v45 = sub_4093D0(0LL, 3LL, s, v17, v15);\n              v46 = dcgettext(0LL, \"%s: %lu: improperly formatted %s checksum line\", 5);\n              error(0, 0, v46, v45, v13, \"SHA384\", v78);\n            }\nLABEL_68:\n            if ( *(_BYTE *)v6 & 0x30 )\n              break;\n            goto LABEL_69;\n          }\n          v31 = &v16[v17];\n          v52 = v15 - 1;\n          if ( v15 != 1 )\n          {\n            if ( v31[v15 - 1] == 41 )\n            {\nLABEL_162:\n              v53 = &v31[v52];\nLABEL_163:\n              if ( v19 )\n              {\n                v24 = (const char *)v52;\n                v87 = v53;\n                v70 = sub_4029B0(v31, v52);\n                v53 = v87;\n                if ( !v70 )\n                  goto LABEL_66;\n              }\n              *v53 = 0;\n              v62 = v31[v52 + 1];\n              v63 = v52 + 1;\n              if ( v62 == 9 || v62 == 32 )\n              {\n                do\n                {\n                  do\n                    v62 = v31[++v63];\n                  while ( v62 == 32 );\n                }\n                while ( v62 == 9 );\n              }\n              if ( v62 != 61 )\n                goto LABEL_66;\n              v4 = (char *)&v31[v63 + 1];\n              if ( *v4 == 32 || *v4 == 9 )\n              {\n                v64 = &v31[v63 + 2];\n                do\n                {\n                  do\n                  {\n                    v65 = *v64;\n                    v4 = (char *)v64++;\n                  }\n                  while ( v65 == 32 );\n                }\n                while ( v65 == 9 );\n              }\n              v66 = sub_402950(v4, v24);\n              goto LABEL_175;\n            }\n            while ( --v52 )\n            {\n              if ( v31[v52] == 41 )\n                goto LABEL_162;\n            }\n          }\n          if ( *v31 != 41 )\n            goto LABEL_66;\n          v53 = v31;\n          v52 = 0LL;\n          goto LABEL_163;\n        }\n        v17 = v15 - v18;\n        if ( v15 - v18 < qword_60F2E8 + (unsigned __int64)(*v4 == 92) )\n          goto LABEL_66;\n        v27 = qword_60F2E0 + v18;\n        v17 = (unsigned __int64)&v16[v27];\n        v28 = v16[v27];\n        if ( v28 != 32 && v28 != 9 )\n          goto LABEL_66;\n        *(_BYTE *)v17 = 0;\n        v93 = v27;\n        v89 = v19;\n        v83 = v15;\n        if ( !(unsigned __int8)sub_402950(v4, v24) )\n          goto LABEL_66;\n        v15 = v83;\n        v17 = (unsigned int)dword_60F210;\n        v29 = v93 + 1;\n        if ( v83 - (v93 + 1) != 1 && ((v30 = v16[v93 + 1], v30 == 32) || v30 == 42) )\n        {\n          if ( dword_60F210 != 1 )\n          {\n            dword_60F210 = 0;\n            v29 = v93 + 2;\n          }\n        }\n        else\n        {\n          if ( !dword_60F210 )\n            goto LABEL_66;\n          dword_60F210 = 1;\n        }\n        v31 = &v16[v29];\n        if ( v89 )\n        {\n          v66 = sub_4029B0(v31, v83 - v29) != 0;\nLABEL_175:\n          if ( !v66 )\n            goto LABEL_66;\n        }\n        v32 = 0;\n        v33 = v81 == 0;\n        if ( !v81 )\n        {\n          v34 = \"-\";\n          v17 = 2LL;\n          v35 = v31;\n          do\n          {\n            if ( !v17 )\n              break;\n            v32 = (unsigned int)*v35 < (unsigned __int8)*v34;\n            v33 = *v35++ == *v34++;\n            --v17;\n          }\n          while ( v33 );\n          if ( (!v32 && !v33) == v32 )\n            goto LABEL_66;\n        }\n        LODWORD(v36) = 0;\n        if ( !byte_60F2DC )\n          v36 = strchr(v31, 10) != 0LL;\n        v37 = sub_402AF0(v31, v105, &v101);\n        v15 = v37;\n        if ( !(_BYTE)v37 )\n        {\n          ++v82;\n          if ( byte_60F2DC )\n            goto LABEL_97;\n          if ( v36 )\n          {\n            v38 = stdout->_IO_write_ptr;\n            if ( v38 >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, 92);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v38 + 1;\n              *v38 = 92;\n            }\n          }\n          sub_402A40(v31, v36);\n          v39 = \"FAILED open or read\";\n          goto LABEL_96;\n        }\n        if ( byte_60F2DA && v101 )\n          goto LABEL_97;\n        v17 = (unsigned __int64)qword_60F2E0 >> 1;\n        if ( (unsigned __int64)qword_60F2E0 >> 1 )\n        {\n          v90 = (unsigned __int64)qword_60F2E0 >> 1;\n          v84 = v37;\n          v47 = __ctype_tolower_loc();\n          v48 = 0LL;\n          v15 = v84;\n          v17 = v90;\n          v49 = *v47;\n          while ( v49[(unsigned __int8)v4[2 * v48]] == byte_40C0A0[((unsigned __int8)v105[v48] >> 4) & 0xF]\n               && v49[(unsigned __int8)v4[2 * v48 + 1]] == byte_40C0A0[v105[v48] & 0xF] )\n          {\n            if ( v90 == ++v48 )\n            {\n              v48 = v90;\n              goto LABEL_180;\n            }\n          }\n          ++v95;\n          if ( byte_60F2DC )\n            goto LABEL_97;\n          if ( v36 )\n          {\nLABEL_123:\n            v50 = stdout->_IO_write_ptr;\n            if ( v50 >= stdout->_IO_write_end )\n            {\n              v92 = v48;\n              v88 = v17;\n              __overflow(stdout, 92);\n              v17 = v88;\n              v48 = v92;\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v50 + 1;\n              *v50 = 92;\n            }\n          }\n          v91 = v48;\n          v85 = v17;\n          sub_402A40(v31, v36);\n          v17 = v85;\n          if ( v85 != v91 )\n          {\n            v39 = \"FAILED\";\nLABEL_96:\n            v40 = dcgettext(0LL, v39, 5);\n            __printf_chk(1LL, \": %s\\n\", v40);\n            goto LABEL_97;\n          }\n          goto LABEL_188;\n        }\n        v48 = 0LL;\nLABEL_180:\n        v97 = byte_60F2DC;\n        if ( byte_60F2DC )\n          goto LABEL_97;\n        v97 = byte_60F2D9;\n        if ( byte_60F2D9 )\n          goto LABEL_97;\n        if ( v36 )\n        {\n          v97 = v15;\n          goto LABEL_123;\n        }\n        v86 = v15;\n        sub_402A40(v31, 0LL);\n        v15 = v86;\n        v97 = v86;\nLABEL_188:\n        if ( !byte_60F2D9 )\n        {\n          v39 = \"OK\";\n          goto LABEL_96;\n        }\nLABEL_97:\n        v3 = v80;\n        if ( *(_BYTE *)v6 & 0x30 )\n          break;\nLABEL_69:\n        if ( !++v13 )\n        {\n          v7 = (const char *)sub_4093D0(0LL, 3LL, s, v17, v15);\n          v26 = dcgettext(0LL, \"%s: too many checksum lines\", 5);\n          error(1, 0, v26, v7);\nLABEL_71:\n          v9 = \"the --ignore-missing option is meaningful only when verifying checksums\";\n          if ( !(_BYTE)v4 )\n            goto LABEL_203;\n          goto LABEL_37;\n        }\n      }\n      free(lineptr);\n      v43 = *(_DWORD *)v6 & 0x20;\n      if ( v43 )\n      {\n        v68 = sub_4093D0(0LL, 3LL, s, v41, v42);\n        v69 = dcgettext(0LL, \"%s: read error\", 5);\n        error(0, 0, v69, v68);\n        v44 = 0;\n        goto LABEL_113;\n      }\n      if ( !v81 || !(unsigned int)sub_409DB0((FILE *)v6) )\n      {\n        if ( v3 )\n        {\n          if ( byte_60F2DC )\n            goto LABEL_220;\n          if ( v5 )\n          {\n            v76 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu line is improperly formatted\",\n                    \"WARNING: %lu lines are improperly formatted\",\n                    v5,\n                    5);\n            error(0, 0, v76, v5);\n          }\n          if ( v82 )\n          {\n            v3 = v82;\n            v75 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu listed file could not be read\",\n                    \"WARNING: %lu listed files could not be read\",\n                    v82,\n                    5);\n            error(0, 0, v75, v82);\n          }\n          if ( v95 )\n          {\n            v3 = v95;\n            v74 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu computed checksum did NOT match\",\n                    \"WARNING: %lu computed checksums did NOT match\",\n                    v95,\n                    5);\n            error(0, 0, v74, v95);\n          }\n          if ( !byte_60F2DA )\n          {\nLABEL_220:\n            if ( v97 )\n              goto LABEL_110;\n          }\n          else if ( v97 )\n          {\nLABEL_110:\n            if ( !(v95 | v82) )\n              LOBYTE(v43) = (v5 == 0) | byte_60F2D8 ^ 1;\n          }\n          else\n          {\n            v6 = sub_4093D0(0LL, 3LL, s, v41, v42);\n            v73 = dcgettext(0LL, \"%s: no file was verified\", 5);\n            error(0, 0, v73, v6);\n          }\n        }\n        else\n        {\n          v6 = sub_4093D0(0LL, 3LL, s, v41, v42);\n          v67 = dcgettext(0LL, \"%s: no properly formatted %s checksum lines found\", 5);\n          error(0, 0, v67, v6, \"SHA384\");\n        }\n        v44 = v43 & 1;\n        goto LABEL_113;\n      }\nLABEL_141:\n      v54 = sub_4093D0(0LL, 3LL, s, v41, v42);\n      v55 = __errno_location();\n      error(0, *v55, \"%s\", v54);\n      v44 = 0;\nLABEL_113:\n      v96 &= v44;\nLABEL_129:\n      ++v78;\n    }\n    while ( v94 > v78 );\nLABEL_130:\n    if ( !byte_60F2F0 || (unsigned int)sub_409DB0(stdin) != -1 )\n      return (unsigned __int8)v96 ^ 1u;\n    v7 = dcgettext(0LL, \"standard input\", 5);\n    v71 = __errno_location();\n    error(1, *v71, v7);\nLABEL_201:\n    if ( byte_60F2D9 == 1 )\n    {\n      v9 = \"the --quiet option is meaningful only when verifying checksums\";\n      if ( !(_BYTE)v4 )\n        goto LABEL_203;\n    }\nLABEL_38:\n    if ( byte_60F2D8 )\n    {\n      v9 = \"the --strict option is meaningful only when verifying checksums\";\n      if ( !(_BYTE)v4 )\n        goto LABEL_203;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x401940L", 
            "funcEndAddr": "0x402869L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x402870L", 
            "funcEndAddr": "0x40289bL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_40289B()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x40289bL", 
            "funcEndAddr": "0x4028baL", 
            "funcName": "sub_40289B"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4028BA()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4028baL", 
            "funcEndAddr": "0x4028f1L", 
            "funcName": "sub_4028BA"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_4028F1()\n{\n  __int64 *result; // rax\n\n  if ( !byte_60F2C8 )\n  {\n    while ( qword_60F2D0 < (unsigned __int64)(&qword_60EE48 - qword_60EE40 - 1) )\n      ((void (*)(void))qword_60EE40[++qword_60F2D0])();\n    result = sub_40289B();\n    byte_60F2C8 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4028f1L", 
            "funcEndAddr": "0x402948L", 
            "funcName": "sub_4028F1"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402948()\n{\n  return sub_4028BA();\n}\n", 
            "funcStartAddr": "0x402948L", 
            "funcEndAddr": "0x40294dL", 
            "funcName": "sub_402948"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_402950(_BYTE *a1)\n{\n  _BYTE *v1; // rbx\n  unsigned __int64 v2; // rbp\n  const unsigned __int16 *v3; // rcx\n  unsigned __int64 v4; // rax\n\n  v1 = a1;\n  v2 = qword_60F2E0;\n  if ( !qword_60F2E0 )\n    return *v1 == 0;\n  v3 = *__ctype_b_loc();\n  LODWORD(v4) = 0;\n  while ( v3[(unsigned __int8)*v1] & 0x1000 )\n  {\n    ++v1;\n    v4 = (unsigned int)(v4 + 1);\n    if ( v4 >= v2 )\n      return *v1 == 0;\n  }\n  return 0;\n}\n", 
            "funcStartAddr": "0x402950L", 
            "funcEndAddr": "0x4029adL", 
            "funcName": "sub_402950"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4029B0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // rax\n  unsigned __int64 v3; // rdx\n  char v4; // cl\n  char v5; // cl\n  _BYTE *v7; // r9\n\n  v2 = a1 + 1;\n  v3 = 0LL;\n  if ( a2 )\n  {\n    do\n    {\n      v4 = *(_BYTE *)(a1 + v3);\n      if ( !v4 )\n        return 0LL;\n      if ( v4 == 92 )\n      {\n        if ( a2 - 1 == v3 )\n          return 0LL;\n        v5 = *(_BYTE *)(a1 + ++v3);\n        if ( v5 == 92 )\n        {\n          v7 = (_BYTE *)v2;\n          *(_BYTE *)(v2 - 1) = 92;\n        }\n        else\n        {\n          if ( v5 != 110 )\n            return 0LL;\n          v7 = (_BYTE *)v2;\n          *(_BYTE *)(v2 - 1) = 10;\n        }\n      }\n      else\n      {\n        *(_BYTE *)(v2 - 1) = v4;\n        v7 = (_BYTE *)v2;\n      }\n      ++v3;\n      ++v2;\n    }\n    while ( a2 > v3 );\n    if ( (unsigned __int64)v7 < a1 + a2 )\n      *v7 = 0;\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x4029b0L", 
            "funcEndAddr": "0x402a31L", 
            "funcName": "sub_4029B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_402A40(const char *a1, char a2)\n{\n  const char *v2; // rbx\n  char *v3; // rax\n  int v4; // esi\n\n  v2 = a1;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      v4 = *(unsigned __int8 *)v2;\n      if ( !(_BYTE)v4 )\n        break;\n      if ( (_BYTE)v4 == 10 )\n      {\n        fwrite_unlocked(&unk_40B564, 1uLL, 2uLL, stdout);\n      }\n      else if ( (_BYTE)v4 == 92 )\n      {\n        fwrite_unlocked(&unk_40B567, 1uLL, 2uLL, stdout);\n      }\n      else\n      {\n        v3 = stdout->_IO_write_ptr;\n        if ( v3 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v4);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v3 + 1;\n          *v3 = v4;\n        }\n      }\n      ++v2;\n    }\n  }\n  else\n  {\n    fputs_unlocked(a1, stdout);\n  }\n}\n", 
            "funcStartAddr": "0x402a40L", 
            "funcEndAddr": "0x402ae5L", 
            "funcName": "sub_402A40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402AF0(const char *a1, __int64 a2, _BYTE *a3)\n{\n  FILE *v3; // rbx\n  __int64 v4; // rcx\n  __int64 v5; // r8\n  unsigned int v6; // er12\n  _BYTE *v8; // r13\n  __int64 v9; // rax\n  __int64 v10; // rcx\n  __int64 v11; // r8\n  __int64 v12; // rbx\n  int *v13; // rax\n  __int64 v14; // rbp\n  int *v15; // rax\n  int *v16; // rax\n  __int64 v17; // rcx\n  __int64 v18; // r8\n  int *v19; // rbx\n  __int64 v20; // rax\n\n  *a3 = 0;\n  if ( !strcmp(a1, \"-\") )\n  {\n    v3 = stdin;\n    byte_60F2F0 = 1;\n    sub_407860(stdin, 2LL);\n    if ( !(unsigned int)sub_4076B0(v3) )\n      return 1;\nLABEL_9:\n    v6 = 0;\n    v14 = sub_4093D0(0LL, 3LL, a1, v4, v5);\n    v15 = __errno_location();\n    error(0, *v15, \"%s\", v14);\n    if ( stdin != v3 )\n      sub_409DB0(v3);\n    return v6;\n  }\n  v8 = a3;\n  v9 = sub_407890(a1, 4240911LL);\n  v3 = (FILE *)v9;\n  if ( v9 )\n  {\n    sub_407860(v9, 2LL);\n    if ( !(unsigned int)sub_4076B0(v3) )\n    {\n      if ( (unsigned int)sub_409DB0(v3) )\n      {\n        v6 = 0;\n        v12 = sub_4093D0(0LL, 3LL, a1, v10, v11);\n        v13 = __errno_location();\n        error(0, *v13, \"%s\", v12);\n        return v6;\n      }\n      return 1;\n    }\n    goto LABEL_9;\n  }\n  v16 = __errno_location();\n  v6 = (unsigned __int8)byte_60F2DA;\n  v19 = v16;\n  if ( byte_60F2DA && *v16 == 2 )\n  {\n    *v8 = 1;\n  }\n  else\n  {\n    v6 = 0;\n    v20 = sub_4093D0(0LL, 3LL, a1, v17, v18);\n    error(0, *v19, \"%s\", v20);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x402af0L", 
            "funcEndAddr": "0x402c82L", 
            "funcName": "sub_402AF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_402C90(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  char *v8; // rax\n  FILE *v9; // rbp\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  FILE *v13; // rbp\n  char *v14; // rax\n  FILE *v15; // rbp\n  char *v16; // rax\n  FILE *v17; // rbp\n  char *v18; // rax\n  char *v19; // rax\n  const char **v20; // rax\n  const char *v21; // rbp\n  char *v22; // rax\n  char *v23; // rax\n  char *v24; // rax\n  char *v25; // rax\n  char *v26; // rax\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  const char *v30; // [rsp+0h] [rbp-88h]\n  const char *v31; // [rsp+8h] [rbp-80h]\n  const char *v32; // [rsp+10h] [rbp-78h]\n  const char *v33; // [rsp+18h] [rbp-70h]\n  const char *v34; // [rsp+20h] [rbp-68h]\n  const char *v35; // [rsp+28h] [rbp-60h]\n  const char *v36; // [rsp+30h] [rbp-58h]\n  const char *v37; // [rsp+38h] [rbp-50h]\n  const char *v38; // [rsp+40h] [rbp-48h]\n  const char *v39; // [rsp+48h] [rbp-40h]\n  const char *v40; // [rsp+50h] [rbp-38h]\n  const char *v41; // [rsp+58h] [rbp-30h]\n  __int64 v42; // [rsp+60h] [rbp-28h]\n  __int64 v43; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_60F308;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]...\\nPrint or check %s (%d-bit) checksums.\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\n  -b, --binary         read in binary mode\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = dcgettext(0LL, \"  -c, --check          read %s sums from the FILEs and check them\\n\", 5);\n  __printf_chk(1LL, v8, \"SHA384\");\n  v9 = stdout;\n  v10 = dcgettext(0LL, \"      --tag            create a BSD-style checksum\\n\", 5);\n  fputs_unlocked(v10, v9);\n  v11 = stdout;\n  v12 = dcgettext(0LL, \"  -t, --text           read in text mode (default)\\n\", 5);\n  fputs_unlocked(v12, v11);\n  v13 = stdout;\n  v14 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The following five options are useful only when verifying checksums:\\n\"\n          \"      --ignore-missing  don't fail or report status for missing files\\n\"\n          \"      --quiet          don't print OK for each successfully verified file\\n\"\n          \"      --status         don't output anything, status code shows success\\n\"\n          \"      --strict         exit non-zero for improperly formatted checksum lines\\n\"\n          \"  -w, --warn           warn about improperly formatted checksum lines\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v14, v13);\n  v15 = stdout;\n  v16 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v16, v15);\n  v17 = stdout;\n  v18 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v18, v17);\n  v19 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The sums are computed as described in %s.  When checking, the input\\n\"\n          \"should be a former output of this program.  The default mode is to print a\\n\"\n          \"line with checksum, a space, a character indicating input mode ('*' for binary,\\n\"\n          \"' ' for text or where binary is insignificant), and name for each FILE.\\n\",\n          5);\n  __printf_chk(1LL, v19, \"FIPS-180-2\");\n  v30 = \"[\";\n  v20 = &v30;\n  v31 = \"test invocation\";\n  v32 = \"coreutils\";\n  v33 = \"Multi-call invocation\";\n  v34 = \"sha224sum\";\n  v35 = \"sha2 utilities\";\n  v36 = \"sha256sum\";\n  v37 = \"sha2 utilities\";\n  v38 = \"sha384sum\";\n  v39 = \"sha2 utilities\";\n  v40 = \"sha512sum\";\n  v41 = \"sha2 utilities\";\n  v42 = 0LL;\n  v43 = 0LL;\n  do\n    v20 += 2;\n  while ( *v20 && strcmp(\"sha384sum\", *v20) );\n  v21 = v20[1];\n  if ( v21 )\n  {\n    v22 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v22, &unk_40B5F2);\n    v23 = setlocale(5, 0LL);\n    if ( !v23 || !strncmp(v23, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v26 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v26, &unk_40B5F2);\n    v27 = setlocale(5, 0LL);\n    if ( !v27 || !strncmp(v27, \"en_\", 3uLL) )\n    {\n      v21 = \"sha384sum\";\n      v28 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v28, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v21 = \"sha384sum\";\n  }\n  v29 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v29, \"sha384sum\");\nLABEL_10:\n  v24 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v24, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v25 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v25, v21);\nLABEL_3:\n  exit(status);\n}\n", 
            "funcStartAddr": "0x402c90L", 
            "funcEndAddr": "0x40305dL", 
            "funcName": "sub_402C90"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403080()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_40AE60(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60F2F8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60F300 )\n      {\n        v5 = sub_4093A0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_40AE60(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x403080L", 
            "funcEndAddr": "0x40311eL", 
            "funcName": "sub_403080"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403240(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 i; // rdx\n\n  result = a2;\n  for ( i = 0LL; i != 64; i += 8LL )\n    *(_QWORD *)(a2 + i) = _byteswap_uint64(*(_QWORD *)(a1 + i));\n  return result;\n}\n", 
            "funcStartAddr": "0x403240L", 
            "funcEndAddr": "0x40325eL", 
            "funcName": "sub_403240"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403260(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 i; // rdx\n\n  result = a2;\n  for ( i = 0LL; i != 48; i += 8LL )\n    *(_QWORD *)(a2 + i) = _byteswap_uint64(*(_QWORD *)(a1 + i));\n  return result;\n}\n", 
            "funcStartAddr": "0x403260L", 
            "funcEndAddr": "0x40327eL", 
            "funcName": "sub_403260"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403280(unsigned __int64 a1, __int64 a2, _QWORD *a3)\n{\n  unsigned __int64 v3; // r15\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // rcx\n  bool v6; // cf\n  __int64 v7; // r13\n  __int64 v8; // rbp\n  __int64 v9; // r9\n  __int64 v10; // r8\n  __int64 v11; // rdi\n  __int64 v12; // r10\n  __int64 result; // rax\n  __int64 v14; // r11\n  __int64 v15; // rcx\n  __int64 v16; // r14\n  __int64 v17; // r9\n  __int64 i; // rdx\n  __int64 v19; // rsi\n  __int64 v20; // r12\n  __int64 v21; // rdx\n  __int64 v22; // r10\n  __int64 v23; // rbp\n  __int64 v24; // rsi\n  __int64 v25; // r8\n  __int64 v26; // rdi\n  __int64 v27; // rbx\n  __int64 v28; // r8\n  __int64 v29; // rcx\n  __int64 v30; // r11\n  __int64 v31; // rax\n  __int64 v32; // rdx\n  __int64 v33; // r10\n  __int64 v34; // r8\n  __int64 v35; // r9\n  __int64 v36; // rax\n  __int64 v37; // rsi\n  __int64 v38; // rbx\n  __int64 v39; // r8\n  __int64 v40; // rcx\n  __int64 v41; // r11\n  __int64 v42; // rdi\n  __int64 v43; // rdx\n  __int64 v44; // r10\n  __int64 v45; // rsi\n  __int64 v46; // rdx\n  __int64 v47; // rax\n  __int64 v48; // rcx\n  __int64 v49; // r9\n  __int64 v50; // r8\n  __int64 v51; // rdx\n  __int64 v52; // r9\n  __int64 v53; // rdi\n  __int64 v54; // r13\n  __int64 v55; // r9\n  __int64 v56; // rsi\n  __int64 v57; // r14\n  __int64 v58; // rax\n  __int64 v59; // rcx\n  __int64 v60; // r12\n  __int64 v61; // rax\n  __int64 v62; // rdx\n  __int64 v63; // rbp\n  __int64 v64; // rax\n  __int64 v65; // r13\n  __int64 v66; // r8\n  unsigned __int64 v67; // rbx\n  __int64 v68; // rax\n  __int64 v69; // r14\n  __int64 v70; // rdi\n  unsigned __int64 v71; // r11\n  __int64 v72; // rax\n  __int64 v73; // r12\n  __int64 v74; // rsi\n  unsigned __int64 v75; // r10\n  __int64 v76; // rax\n  __int64 v77; // rbp\n  __int64 v78; // rcx\n  unsigned __int64 v79; // r9\n  __int64 v80; // rdx\n  __int64 v81; // r8\n  __int64 v82; // rax\n  __int64 v83; // r13\n  __int64 v84; // rdi\n  __int64 v85; // rdx\n  __int64 v86; // r12\n  __int64 v87; // rsi\n  __int64 v88; // r14\n  __int64 v89; // rbp\n  __int64 v90; // rcx\n  __int64 v91; // r13\n  __int64 v92; // r8\n  __int64 v93; // rax\n  __int64 v94; // r12\n  __int64 v95; // rdi\n  __int64 v96; // rdx\n  __int64 v97; // rbp\n  __int64 v98; // rsi\n  __int64 v99; // r14\n  __int64 v100; // r8\n  __int64 v101; // rcx\n  __int64 v102; // r13\n  __int64 v103; // rdi\n  __int64 v104; // rcx\n  __int64 v105; // r12\n  __int64 v106; // rax\n  __int64 v107; // rdx\n  __int64 v108; // rbp\n  __int64 v109; // rsi\n  __int64 v110; // rdx\n  __int64 v111; // r8\n  __int64 v112; // rcx\n  __int64 v113; // r14\n  __int64 v114; // r13\n  __int64 v115; // rdx\n  __int64 v116; // r12\n  __int64 v117; // rdi\n  __int64 v118; // r12\n  unsigned __int64 v119; // r15\n  __int64 v120; // rax\n  __int64 v121; // rsi\n  __int64 v122; // rbx\n  unsigned __int64 v123; // r14\n  __int64 v124; // rax\n  __int64 v125; // rcx\n  __int64 v126; // r8\n  __int64 v127; // rax\n  unsigned __int64 v128; // r13\n  __int64 v129; // rdx\n  __int64 v130; // r10\n  unsigned __int64 v131; // rbp\n  __int64 v132; // rax\n  __int64 v133; // r9\n  unsigned __int64 v134; // r12\n  __int64 v135; // rdi\n  unsigned __int64 v136; // r13\n  __int64 v137; // r11\n  unsigned __int64 v138; // r13\n  __int64 v139; // rax\n  __int64 v140; // rbx\n  __int64 v141; // rsi\n  unsigned __int64 v142; // rax\n  __int64 v143; // rax\n  __int64 v144; // r11\n  __int64 v145; // rcx\n  unsigned __int64 v146; // r13\n  __int64 v147; // r8\n  unsigned __int64 v148; // r13\n  __int64 v149; // rax\n  __int64 v150; // r10\n  __int64 v151; // rdx\n  unsigned __int64 v152; // rax\n  __int64 v153; // rax\n  __int64 v154; // r9\n  __int64 v155; // r12\n  unsigned __int64 v156; // r13\n  __int64 v157; // rax\n  __int64 v158; // rbx\n  __int64 v159; // rbp\n  __int64 v160; // rax\n  __int64 v161; // r11\n  __int64 v162; // r13\n  unsigned __int64 v163; // rax\n  __int64 v164; // rax\n  __int64 v165; // rdx\n  __int64 v166; // r10\n  __int64 v167; // rax\n  __int64 v168; // r12\n  __int64 v169; // r8\n  unsigned __int64 v170; // rdi\n  __int64 v171; // rsi\n  unsigned __int64 v172; // rbx\n  __int64 v173; // rax\n  __int64 v174; // rbp\n  __int64 v175; // r9\n  __int64 v176; // rax\n  __int64 v177; // r13\n  __int64 v178; // rdi\n  unsigned __int64 v179; // rax\n  unsigned __int64 v180; // rbx\n  __int64 v181; // rax\n  __int64 v182; // r10\n  __int64 v183; // rdx\n  unsigned __int64 v184; // r11\n  __int64 v185; // rax\n  __int64 v186; // r8\n  __int64 v187; // rcx\n  unsigned __int64 v188; // r12\n  unsigned __int64 v189; // r15\n  __int64 v190; // rax\n  __int64 v191; // r9\n  __int64 v192; // rsi\n  unsigned __int64 v193; // rax\n  unsigned __int64 v194; // r14\n  unsigned __int64 v195; // rax\n  __int64 v196; // rax\n  __int64 v197; // rdi\n  __int64 v198; // rbx\n  unsigned __int64 v199; // r13\n  __int64 v200; // rax\n  __int64 v201; // rdx\n  __int64 v202; // r10\n  unsigned __int64 v203; // rax\n  unsigned __int64 v204; // r13\n  __int64 v205; // rax\n  __int64 v206; // rcx\n  __int64 v207; // r8\n  unsigned __int64 v208; // r12\n  __int64 v209; // r11\n  unsigned __int64 v210; // r12\n  __int64 v211; // rax\n  __int64 v212; // rsi\n  __int64 v213; // r9\n  unsigned __int64 v214; // r11\n  unsigned __int64 v215; // rax\n  unsigned __int64 v216; // r13\n  __int64 v217; // rax\n  __int64 v218; // rbx\n  __int64 v219; // rdi\n  unsigned __int64 v220; // rbp\n  __int64 v221; // rax\n  __int64 v222; // r10\n  __int64 v223; // rdx\n  unsigned __int64 v224; // rax\n  unsigned __int64 v225; // r13\n  __int64 v226; // rax\n  __int64 v227; // r8\n  unsigned __int64 v228; // r14\n  __int64 v229; // r12\n  __int64 v230; // rax\n  unsigned __int64 v231; // r11\n  unsigned __int64 v232; // rbp\n  unsigned __int64 v233; // r11\n  __int64 v234; // rax\n  __int64 v235; // r9\n  __int64 v236; // rcx\n  unsigned __int64 v237; // r13\n  __int64 v238; // rax\n  __int64 v239; // rdi\n  __int64 v240; // r11\n  __int64 v241; // rax\n  __int64 v242; // rdx\n  __int64 v243; // r10\n  unsigned __int64 v244; // rbp\n  __int64 v245; // rsi\n  __int64 v246; // r8\n  unsigned __int64 v247; // r12\n  __int64 v248; // rbx\n  unsigned __int64 v249; // rax\n  __int64 v250; // rax\n  __int64 v251; // rcx\n  __int64 v252; // r13\n  unsigned __int64 v253; // rax\n  __int64 v254; // rax\n  __int64 v255; // r11\n  __int64 v256; // r14\n  unsigned __int64 v257; // rbp\n  __int64 v258; // rax\n  __int64 v259; // rsi\n  __int64 v260; // rdx\n  __int64 v261; // r8\n  __int64 v262; // rax\n  __int64 v263; // rdi\n  unsigned __int64 v264; // r15\n  __int64 v265; // r9\n  __int64 v266; // r8\n  __int64 v267; // rcx\n  __int64 v268; // r13\n  __int64 v269; // r10\n  __int64 v270; // rcx\n  __int64 v271; // r14\n  __int64 v272; // r9\n  unsigned __int64 v273; // rbp\n  __int64 v274; // rcx\n  __int64 v275; // rdx\n  __int64 v276; // r8\n  __int64 v277; // rcx\n  __int64 v278; // rdi\n  __int64 v279; // rax\n  unsigned __int64 v280; // r11\n  __int64 v281; // rcx\n  __int64 v282; // r10\n  __int64 v283; // rsi\n  __int64 v284; // r15\n  unsigned __int64 v285; // rcx\n  __int64 v286; // r13\n  __int64 v287; // r13\n  __int64 v288; // r9\n  __int64 v289; // rcx\n  unsigned __int64 v290; // r13\n  __int64 v291; // r13\n  __int64 v292; // r8\n  __int64 v293; // rdx\n  unsigned __int64 v294; // r13\n  __int64 v295; // r13\n  __int64 v296; // rdi\n  __int64 v297; // r13\n  __int64 v298; // rax\n  __int64 v299; // rsi\n  __int64 v300; // r10\n  unsigned __int64 v301; // rbp\n  __int64 v302; // rax\n  __int64 v303; // rcx\n  __int64 v304; // r9\n  __int64 v305; // r8\n  __int64 v306; // rdx\n  __int64 v307; // r8\n  unsigned __int64 v308; // r11\n  __int64 v309; // rax\n  __int64 v310; // r13\n  __int64 v311; // rax\n  unsigned __int64 v312; // rdi\n  __int64 v313; // rbx\n  __int64 v314; // r10\n  __int64 v315; // rbx\n  unsigned __int64 v316; // r11\n  __int64 v317; // rsi\n  __int64 v318; // r9\n  __int64 v319; // rsi\n  unsigned __int64 v320; // r14\n  __int64 v321; // rdx\n  __int64 v322; // r8\n  __int64 v323; // rdx\n  __int64 v324; // rcx\n  unsigned __int64 v325; // [rsp+0h] [rbp-1A0h]\n  unsigned __int64 v326; // [rsp+0h] [rbp-1A0h]\n  unsigned __int64 v327; // [rsp+0h] [rbp-1A0h]\n  unsigned __int64 v328; // [rsp+8h] [rbp-198h]\n  unsigned __int64 v329; // [rsp+8h] [rbp-198h]\n  unsigned __int64 v330; // [rsp+8h] [rbp-198h]\n  unsigned __int64 v331; // [rsp+10h] [rbp-190h]\n  unsigned __int64 v332; // [rsp+10h] [rbp-190h]\n  unsigned __int64 v333; // [rsp+10h] [rbp-190h]\n  unsigned __int64 v334; // [rsp+18h] [rbp-188h]\n  unsigned __int64 v335; // [rsp+18h] [rbp-188h]\n  unsigned __int64 v336; // [rsp+20h] [rbp-180h]\n  unsigned __int64 v337; // [rsp+20h] [rbp-180h]\n  unsigned __int64 v338; // [rsp+28h] [rbp-178h]\n  unsigned __int64 v339; // [rsp+28h] [rbp-178h]\n  unsigned __int64 v340; // [rsp+28h] [rbp-178h]\n  unsigned __int64 v341; // [rsp+30h] [rbp-170h]\n  unsigned __int64 v342; // [rsp+30h] [rbp-170h]\n  unsigned __int64 v343; // [rsp+30h] [rbp-170h]\n  unsigned __int64 v344; // [rsp+38h] [rbp-168h]\n  unsigned __int64 v345; // [rsp+38h] [rbp-168h]\n  unsigned __int64 v346; // [rsp+38h] [rbp-168h]\n  unsigned __int64 v347; // [rsp+38h] [rbp-168h]\n  unsigned __int64 v348; // [rsp+40h] [rbp-160h]\n  unsigned __int64 v349; // [rsp+40h] [rbp-160h]\n  unsigned __int64 v350; // [rsp+40h] [rbp-160h]\n  unsigned __int64 v351; // [rsp+40h] [rbp-160h]\n  unsigned __int64 v352; // [rsp+48h] [rbp-158h]\n  unsigned __int64 v353; // [rsp+48h] [rbp-158h]\n  unsigned __int64 v354; // [rsp+48h] [rbp-158h]\n  unsigned __int64 v355; // [rsp+50h] [rbp-150h]\n  unsigned __int64 v356; // [rsp+50h] [rbp-150h]\n  unsigned __int64 v357; // [rsp+50h] [rbp-150h]\n  unsigned __int64 v358; // [rsp+58h] [rbp-148h]\n  unsigned __int64 v359; // [rsp+58h] [rbp-148h]\n  unsigned __int64 v360; // [rsp+58h] [rbp-148h]\n  unsigned __int64 v361; // [rsp+60h] [rbp-140h]\n  unsigned __int64 v362; // [rsp+60h] [rbp-140h]\n  unsigned __int64 v363; // [rsp+68h] [rbp-138h]\n  unsigned __int64 v364; // [rsp+68h] [rbp-138h]\n  unsigned __int64 v365; // [rsp+70h] [rbp-130h]\n  unsigned __int64 v366; // [rsp+70h] [rbp-130h]\n  unsigned __int64 v367; // [rsp+78h] [rbp-128h]\n  unsigned __int64 v368; // [rsp+80h] [rbp-120h]\n  unsigned __int64 v369; // [rsp+88h] [rbp-118h]\n  __int64 v370; // [rsp+90h] [rbp-110h]\n  __int64 v371; // [rsp+98h] [rbp-108h]\n  __int64 v372; // [rsp+A0h] [rbp-100h]\n  __int64 v373; // [rsp+A8h] [rbp-F8h]\n  __int64 v374; // [rsp+B0h] [rbp-F0h]\n  __int64 v375; // [rsp+B8h] [rbp-E8h]\n  __int64 v376; // [rsp+C0h] [rbp-E0h]\n  unsigned __int64 v377; // [rsp+C8h] [rbp-D8h]\n  __int64 v378; // [rsp+D0h] [rbp-D0h]\n  unsigned __int64 v379; // [rsp+D8h] [rbp-C8h]\n  _QWORD *v380; // [rsp+E0h] [rbp-C0h]\n  unsigned __int64 v381; // [rsp+E8h] [rbp-B8h]\n  unsigned __int64 v382; // [rsp+F0h] [rbp-B0h]\n  unsigned __int64 v383; // [rsp+F8h] [rbp-A8h]\n  unsigned __int64 v384; // [rsp+100h] [rbp-A0h]\n  unsigned __int64 v385; // [rsp+108h] [rbp-98h]\n  unsigned __int64 v386; // [rsp+110h] [rbp-90h]\n  unsigned __int64 v387; // [rsp+118h] [rbp-88h]\n  unsigned __int64 v388; // [rsp+120h] [rbp-80h]\n  unsigned __int64 v389; // [rsp+128h] [rbp-78h]\n  unsigned __int64 v390; // [rsp+130h] [rbp-70h]\n  unsigned __int64 v391; // [rsp+138h] [rbp-68h]\n  unsigned __int64 v392; // [rsp+140h] [rbp-60h]\n  unsigned __int64 v393; // [rsp+148h] [rbp-58h]\n  unsigned __int64 v394; // [rsp+150h] [rbp-50h]\n  unsigned __int64 v395; // [rsp+158h] [rbp-48h]\n  unsigned __int64 v396; // [rsp+160h] [rbp-40h]\n\n  v3 = a1;\n  v4 = a1 + (a2 & 0xFFFFFFFFFFFFFFF8LL);\n  v5 = v4;\n  v6 = __CFADD__(a3[8], a2);\n  v7 = a3[2];\n  v8 = a3[3];\n  v9 = a3[4];\n  v369 = a1;\n  v10 = a3[5];\n  v11 = a3[1];\n  v379 = v4;\n  v12 = a3[6];\n  result = *a3;\n  v380 = a3;\n  v14 = a3[7];\n  a3[8] += a2;\n  a3[9] += v6;\n  if ( v3 < v5 )\n  {\n    v376 = v14;\n    v15 = v9;\n    v16 = v10;\n    v375 = v12;\n    v374 = v10;\n    v372 = v8;\n    v371 = v7;\n    v370 = v11;\n    v378 = result;\n    v373 = v9;\n    v17 = v12;\n    do\n    {\n      for ( i = 0LL; i != 128; i += 8LL )\n        *(unsigned __int64 *)((char *)&v381 + i) = _byteswap_uint64(*(_QWORD *)(v369 + i));\n      v369 += 128LL;\n      v19 = (__ROR8__(v15, 18) ^ __ROR8__(v15, 14) ^ __ROL8__(v15, 23))\n          + v381\n          + 4794697086780616226LL\n          + v14\n          + (v17 ^ v15 & (v17 ^ v16));\n      v20 = v19 + v8;\n      v21 = v19\n          + (__ROL8__(result, 25) ^ __ROR8__(result, 28) ^ __ROL8__(result, 30))\n          + (v11 & result | v7 & (v11 | result));\n      v22 = (v16 ^ (v19 + v8) & (v16 ^ v15))\n          + v17\n          + v382\n          + 8158064640168781261LL\n          + (__ROR8__(v19 + v8, 14) ^ __ROR8__(v19 + v8, 18) ^ __ROL8__(v19 + v8, 23));\n      v23 = v22 + v7;\n      v24 = v22 + (__ROL8__(v21, 25) ^ __ROR8__(v21, 28) ^ __ROL8__(v21, 30)) + (result & v21 | v11 & (result | v21));\n      v25 = (v15 ^ (v22 + v7) & (v15 ^ v20))\n          + v16\n          + v383\n          - 5349999486874862801LL\n          + (__ROR8__(v22 + v7, 14) ^ __ROR8__(v22 + v7, 18) ^ __ROL8__(v22 + v7, 23));\n      v26 = v25 + v11;\n      v27 = v25 + (__ROL8__(v24, 25) ^ __ROR8__(v24, 28) ^ __ROL8__(v24, 30)) + (v24 & v21 | result & (v24 | v21));\n      v28 = (v20 ^ v26 & ((v22 + v7) ^ v20))\n          + v384\n          - 1606136188198331460LL\n          + v15\n          + (__ROR8__(v26, 14) ^ __ROR8__(v26, 18) ^ __ROL8__(v26, 23));\n      v29 = v28 + result;\n      v30 = v28 + (__ROL8__(v27, 25) ^ __ROR8__(v27, 28) ^ __ROL8__(v27, 30)) + (v27 & v24 | v21 & (v27 | v24));\n      v31 = (v23 ^ v29 & (v26 ^ v23))\n          + v385\n          + 4131703408338449720LL\n          + v20\n          + (__ROR8__(v29, 14) ^ __ROR8__(v28 + result, 18) ^ __ROL8__(v29, 23));\n      v32 = v31 + v21;\n      v33 = v31 + (__ROL8__(v30, 25) ^ __ROR8__(v30, 28) ^ __ROL8__(v30, 30)) + (v30 & v27 | v24 & (v30 | v27));\n      v34 = (v26 ^ v32 & (v29 ^ v26))\n          + v386\n          + 6480981068601479193LL\n          + v23\n          + (__ROR8__(v32, 14) ^ __ROR8__(v32, 18) ^ __ROL8__(v32, 23));\n      v35 = v24 + v34;\n      v36 = v34 + (__ROL8__(v33, 25) ^ __ROR8__(v33, 28) ^ __ROL8__(v33, 30)) + (v33 & v30 | v27 & (v33 | v30));\n      v37 = (v29 ^ v35 & (v32 ^ v29))\n          + v387\n          - 7908458776815382629LL\n          + v26\n          + (__ROR8__(v24 + v34, 14) ^ __ROR8__(v24 + v34, 18) ^ __ROL8__(v35, 23));\n      v38 = v37 + v27;\n      v39 = v37 + (__ROL8__(v36, 25) ^ __ROR8__(v36, 28) ^ __ROL8__(v36, 30)) + (v36 & v33 | v30 & (v36 | v33));\n      v40 = v388\n          - 6116909921290321640LL\n          + v29\n          + (v32 ^ v38 & (v35 ^ v32))\n          + (__ROR8__(v38, 14) ^ __ROR8__(v38, 18) ^ __ROL8__(v38, 23));\n      v41 = v40 + v30;\n      v42 = v40 + (__ROL8__(v39, 25) ^ __ROR8__(v39, 28) ^ __ROL8__(v39, 30)) + (v39 & v36 | v33 & (v39 | v36));\n      v43 = v389\n          - 2880145864133508542LL\n          + v32\n          + (v35 ^ v41 & (v38 ^ v35))\n          + (__ROR8__(v41, 14) ^ __ROR8__(v41, 18) ^ __ROL8__(v41, 23));\n      v44 = v43 + v33;\n      v45 = v43 + (__ROL8__(v42, 25) ^ __ROR8__(v42, 28) ^ __ROL8__(v42, 30)) + (v42 & v39 | v36 & (v42 | v39));\n      v46 = (v38 ^ v44 & (v41 ^ v38))\n          + v390\n          + 1334009975649890238LL\n          + v35\n          + (__ROR8__(v44, 14) ^ __ROR8__(v44, 18) ^ __ROL8__(v44, 23));\n      v47 = v46 + v36;\n      v48 = v46 + (__ROL8__(v45, 25) ^ __ROR8__(v45, 28) ^ __ROL8__(v45, 30)) + (v45 & v42 | v39 & (v45 | v42));\n      v49 = (v41 ^ v47 & (v44 ^ v41))\n          + v391\n          + 2608012711638119052LL\n          + v38\n          + (__ROR8__(v47, 14) ^ __ROR8__(v47, 18) ^ __ROL8__(v47, 23));\n      v50 = v49 + v39;\n      v51 = v49 + (__ROL8__(v48, 25) ^ __ROR8__(v48, 28) ^ __ROL8__(v48, 30)) + (v48 & v45 | v42 & (v48 | v45));\n      v52 = (v44 ^ v50 & (v47 ^ v44))\n          + v392\n          + 6128411473006802146LL\n          + v41\n          + (__ROR8__(v50, 14) ^ __ROR8__(v50, 18) ^ __ROL8__(v50, 23));\n      v53 = v52 + v42;\n      v54 = v52 + (__ROL8__(v51, 25) ^ __ROR8__(v51, 28) ^ __ROL8__(v51, 30)) + (v51 & v48 | v45 & (v51 | v48));\n      v55 = (v47 ^ v53 & (v50 ^ v47))\n          + v393\n          + 8268148722764581231LL\n          + v44\n          + (__ROR8__(v53, 14) ^ __ROR8__(v53, 18) ^ __ROL8__(v53, 23));\n      v56 = v55 + v45;\n      v57 = v55 + (__ROL8__(v54, 25) ^ __ROR8__(v54, 28) ^ __ROL8__(v54, 30)) + (v54 & v51 | v48 & (v54 | v51));\n      v58 = (v50 ^ v56 & (v53 ^ v50))\n          + v394\n          - 9160688886553864527LL\n          + v47\n          + (__ROR8__(v56, 14) ^ __ROR8__(v56, 18) ^ __ROL8__(v56, 23));\n      v59 = v58 + v48;\n      v60 = v58 + (__ROL8__(v57, 25) ^ __ROR8__(v57, 28) ^ __ROL8__(v57, 30)) + (v57 & v54 | v51 & (v57 | v54));\n      v61 = (v53 ^ v59 & (v56 ^ v53))\n          + v395\n          - 7215885187991268811LL\n          + v50\n          + (__ROR8__(v59, 14) ^ __ROR8__(v59, 18) ^ __ROL8__(v59, 23));\n      v62 = v61 + v51;\n      v63 = v61 + (__ROL8__(v60, 25) ^ __ROR8__(v60, 28) ^ __ROL8__(v60, 30)) + (v60 & v57 | v54 & (v60 | v57));\n      v64 = (v56 ^ v62 & (v59 ^ v56))\n          + v396\n          - 4495734319001033068LL\n          + v53\n          + (__ROR8__(v62, 14) ^ __ROR8__(v62, 18) ^ __ROL8__(v62, 23));\n      v65 = v64 + v54;\n      v66 = v64 + (__ROL8__(v63, 25) ^ __ROR8__(v63, 28) ^ __ROL8__(v63, 30)) + (v63 & v60 | v57 & (v63 | v60));\n      v67 = (__ROR8__(v395, 19) ^ __ROL8__(v395, 3) ^ (v395 >> 6))\n          + v390\n          + v381\n          + ((v382 >> 7) ^ __ROR8__(v382, 1) ^ __ROR8__(v382, 8));\n      v68 = (v59 ^ v65 & (v62 ^ v59))\n          + v67\n          - 1973867731355612462LL\n          + v56\n          + (__ROR8__(v65, 14) ^ __ROR8__(v65, 18) ^ __ROL8__(v65, 23));\n      v69 = v68 + v57;\n      v70 = v68 + (__ROL8__(v66, 25) ^ __ROR8__(v66, 28) ^ __ROL8__(v66, 30)) + (v66 & v63 | v60 & (v66 | v63));\n      v71 = (__ROR8__(v396, 19) ^ __ROL8__(v396, 3) ^ (v396 >> 6))\n          + v382\n          + v391\n          + ((v383 >> 7) ^ __ROR8__(v383, 1) ^ __ROR8__(v383, 8));\n      v72 = (v62 ^ v69 & (v65 ^ v62))\n          + v71\n          - 1171420211273849373LL\n          + v59\n          + (__ROR8__(v69, 14) ^ __ROR8__(v69, 18) ^ __ROL8__(v69, 23));\n      v73 = v72 + v60;\n      v74 = v72 + (__ROL8__(v70, 25) ^ __ROR8__(v70, 28) ^ __ROL8__(v70, 30)) + (v70 & v66 | v63 & (v70 | v66));\n      v75 = (__ROR8__(v384, 1) ^ __ROR8__(v384, 8) ^ (v384 >> 7))\n          + v392\n          + v383\n          + ((v67 >> 6) ^ __ROR8__(v67, 19) ^ __ROL8__(v67, 3));\n      v76 = (v65 ^ v73 & (v69 ^ v65))\n          + v75\n          + 1135362057144423861LL\n          + v62\n          + (__ROR8__(v73, 14) ^ __ROR8__(v73, 18) ^ __ROL8__(v73, 23));\n      v77 = v76 + v63;\n      v78 = v76 + (__ROL8__(v74, 25) ^ __ROR8__(v74, 28) ^ __ROL8__(v74, 30)) + (v74 & v70 | v66 & (v74 | v70));\n      v79 = (__ROR8__(v385, 1) ^ __ROR8__(v385, 8) ^ (v385 >> 7))\n          + v393\n          + v384\n          + ((v71 >> 6) ^ __ROR8__(v71, 19) ^ __ROL8__(v71, 3));\n      v80 = (v69 ^ v77 & (v73 ^ v69))\n          + v79\n          + 2597628984639134821LL\n          + v65\n          + (__ROR8__(v77, 14) ^ __ROR8__(v77, 18) ^ __ROL8__(v77, 23));\n      v81 = v80 + v66;\n      v82 = v80 + (__ROL8__(v78, 25) ^ __ROR8__(v78, 28) ^ __ROL8__(v78, 30)) + (v78 & v74 | v70 & (v78 | v74));\n      v348 = v394\n           + v385\n           + (__ROR8__(v386, 8) ^ __ROR8__(v386, 1) ^ (v386 >> 7))\n           + ((v75 >> 6) ^ __ROR8__(v75, 19) ^ __ROL8__(v75, 3));\n      v83 = (v73 ^ v81 & (v77 ^ v73))\n          + v348\n          + 3308224258029322869LL\n          + v69\n          + (__ROR8__(v81, 14) ^ __ROR8__(v81, 18) ^ __ROL8__(v81, 23));\n      v84 = v83 + v70;\n      v85 = v83 + (__ROL8__(v82, 25) ^ __ROR8__(v82, 28) ^ __ROL8__(v82, 30)) + (v82 & v78 | v74 & (v82 | v78));\n      v338 = ((v79 >> 6) ^ __ROR8__(v79, 19) ^ __ROL8__(v79, 3))\n           + v395\n           + v386\n           + (__ROR8__(v387, 8) ^ __ROR8__(v387, 1) ^ (v387 >> 7));\n      v86 = (v77 ^ v84 & (v81 ^ v77))\n          + v338\n          + 5365058923640841347LL\n          + v73\n          + (__ROR8__(v84, 14) ^ __ROR8__(v84, 18) ^ __ROL8__(v84, 23));\n      v87 = v86 + v74;\n      v88 = v86 + (__ROL8__(v85, 25) ^ __ROR8__(v85, 28) ^ __ROL8__(v85, 30)) + (v85 & v82 | v78 & (v85 | v82));\n      v341 = v396\n           + v387\n           + (__ROR8__(v388, 8) ^ __ROR8__(v388, 1) ^ (v388 >> 7))\n           + ((v348 >> 6) ^ __ROR8__(v348, 19) ^ __ROL8__(v348, 3));\n      v89 = (v81 ^ v87 & (v84 ^ v81))\n          + v341\n          + 6679025012923562964LL\n          + v77\n          + (__ROR8__(v87, 14) ^ __ROR8__(v87, 18) ^ __ROL8__(v87, 23));\n      v90 = v89 + v78;\n      v91 = v89 + (__ROL8__(v88, 25) ^ __ROR8__(v88, 28) ^ __ROL8__(v88, 30)) + (v88 & v85 | v82 & (v88 | v85));\n      v325 = ((v338 >> 6) ^ __ROR8__(v338, 19) ^ __ROL8__(v338, 3))\n           + v67\n           + v388\n           + ((v389 >> 7) ^ __ROR8__(v389, 1) ^ __ROR8__(v389, 8));\n      v92 = (v84 ^ v90 & (v87 ^ v84))\n          + v325\n          + 8573033837759648693LL\n          + v81\n          + (__ROR8__(v90, 14) ^ __ROR8__(v90, 18) ^ __ROL8__(v90, 23));\n      v93 = v92 + v82;\n      v94 = v92 + (__ROL8__(v91, 25) ^ __ROR8__(v91, 28) ^ __ROL8__(v91, 30)) + (v91 & v88 | v85 & (v91 | v88));\n      v344 = ((v341 >> 6) ^ __ROR8__(v341, 19) ^ __ROL8__(v341, 3))\n           + v71\n           + v389\n           + ((v390 >> 7) ^ __ROR8__(v390, 1) ^ __ROR8__(v390, 8));\n      v95 = (v87 ^ v93 & (v90 ^ v87))\n          + v344\n          - 7476448914759557205LL\n          + v84\n          + (__ROR8__(v93, 14) ^ __ROR8__(v93, 18) ^ __ROL8__(v93, 23));\n      v96 = v95 + v85;\n      v97 = v95 + (__ROL8__(v94, 25) ^ __ROR8__(v94, 28) ^ __ROL8__(v94, 30)) + (v94 & v91 | v88 & (v94 | v91));\n      v328 = ((v325 >> 6) ^ __ROR8__(v325, 19) ^ __ROL8__(v325, 3))\n           + v75\n           + v390\n           + ((v391 >> 7) ^ __ROR8__(v391, 1) ^ __ROR8__(v391, 8));\n      v98 = (v90 ^ v96 & (v93 ^ v90))\n          + v328\n          - 6327057829258317296LL\n          + v87\n          + (__ROR8__(v96, 14) ^ __ROR8__(v96, 18) ^ __ROL8__(v96, 23));\n      v99 = v98 + v88;\n      v100 = v98 + (__ROL8__(v97, 25) ^ __ROR8__(v97, 28) ^ __ROL8__(v97, 30)) + (v97 & v94 | v91 & (v97 | v94));\n      v331 = ((v344 >> 6) ^ __ROR8__(v344, 19) ^ __ROL8__(v344, 3))\n           + v79\n           + v391\n           + ((v392 >> 7) ^ __ROR8__(v392, 1) ^ __ROR8__(v392, 8));\n      v101 = (v93 ^ v99 & (v96 ^ v93))\n           + v331\n           - 5763719355590565569LL\n           + v90\n           + (__ROR8__(v99, 14) ^ __ROR8__(v99, 18) ^ __ROL8__(v99, 23));\n      v102 = v101 + v91;\n      v103 = v101 + (__ROL8__(v100, 25) ^ __ROR8__(v100, 28) ^ __ROL8__(v100, 30)) + (v100 & v97 | v94 & (v100 | v97));\n      v352 = ((v328 >> 6) ^ __ROR8__(v328, 19) ^ __ROL8__(v328, 3))\n           + v348\n           + v392\n           + ((v393 >> 7) ^ __ROR8__(v393, 1) ^ __ROR8__(v393, 8));\n      v104 = (v96 ^ v102 & (v99 ^ v96))\n           + v352\n           - 4658551843659510044LL\n           + v93\n           + (__ROR8__(v102, 14) ^ __ROR8__(v102, 18) ^ __ROL8__(v102, 23));\n      v105 = v104 + v94;\n      v106 = v104 + (__ROL8__(v103, 25) ^ __ROR8__(v103, 28) ^ __ROL8__(v103, 30)) + (v103 & v100 | v97 & (v103 | v100));\n      v334 = ((v331 >> 6) ^ __ROR8__(v331, 19) ^ __ROL8__(v331, 3))\n           + v338\n           + v393\n           + ((v394 >> 7) ^ __ROR8__(v394, 1) ^ __ROR8__(v394, 8));\n      v107 = (v99 ^ v105 & (v102 ^ v99))\n           + v334\n           - 4116276920077217854LL\n           + v96\n           + (__ROR8__(v105, 14) ^ __ROR8__(v105, 18) ^ __ROL8__(v105, 23));\n      v108 = v107 + v97;\n      v109 = v107\n           + (__ROL8__(v106, 25) ^ __ROR8__(v106, 28) ^ __ROL8__(v106, 30))\n           + (v106 & v103 | v100 & (v106 | v103));\n      v336 = ((v352 >> 6) ^ __ROR8__(v352, 19) ^ __ROL8__(v352, 3))\n           + v341\n           + v394\n           + ((v395 >> 7) ^ __ROR8__(v395, 1) ^ __ROR8__(v395, 8));\n      v110 = (v102 ^ v108 & (v105 ^ v102))\n           + v336\n           - 3051310485924567259LL\n           + v99\n           + (__ROR8__(v108, 14) ^ __ROR8__(v108, 18) ^ __ROL8__(v108, 23));\n      v111 = v110 + v100;\n      v112 = v110\n           + (__ROL8__(v109, 25) ^ __ROR8__(v109, 28) ^ __ROL8__(v109, 30))\n           + (v109 & v106 | v103 & (v109 | v106));\n      v358 = ((v334 >> 6) ^ __ROR8__(v334, 19) ^ __ROL8__(v334, 3))\n           + v325\n           + v395\n           + ((v396 >> 7) ^ __ROR8__(v396, 1) ^ __ROR8__(v396, 8));\n      v113 = (v105 ^ v111 & (v108 ^ v105))\n           + v358\n           + 489312712824947311LL\n           + v102\n           + (__ROR8__(v111, 14) ^ __ROR8__(v111, 18) ^ __ROL8__(v111, 23));\n      v114 = v103 + v113;\n      v115 = v113\n           + (__ROL8__(v112, 25) ^ __ROR8__(v112, 28) ^ __ROL8__(v112, 30))\n           + (v112 & v109 | v106 & (v112 | v109));\n      v355 = ((v336 >> 6) ^ __ROR8__(v336, 19) ^ __ROL8__(v336, 3))\n           + v344\n           + v396\n           + ((v67 >> 7) ^ __ROR8__(v67, 1) ^ __ROR8__(v67, 8));\n      v116 = (v108 ^ (v103 + v113) & (v111 ^ v108))\n           + v355\n           + 1452737877330783856LL\n           + v105\n           + (__ROL8__(v114, 23) ^ __ROR8__(v114, 14) ^ __ROR8__(v114, 18));\n      v117 = v106 + v116;\n      v118 = (__ROL8__(v115, 25) ^ __ROR8__(v115, 28) ^ __ROL8__(v115, 30))\n           + (v115 & v112 | v109 & (v115 | v112))\n           + v116;\n      v119 = v328\n           + ((v71 >> 7) ^ __ROR8__(v71, 1) ^ __ROR8__(v71, 8))\n           + v67\n           + ((v358 >> 6) ^ __ROR8__(v358, 19) ^ __ROL8__(v358, 3));\n      v120 = (v111 ^ v117 & (v114 ^ v111))\n           + v119\n           + 2861767655752347644LL\n           + v108\n           + (__ROL8__(v117, 23) ^ __ROR8__(v117, 14) ^ __ROR8__(v117, 18));\n      v121 = v120 + v109;\n      v122 = v120\n           + (v118 & v115 | v112 & (v118 | v115))\n           + (__ROL8__(v118, 25) ^ __ROR8__(v118, 28) ^ __ROL8__(v118, 30));\n      v123 = v331\n           + ((v75 >> 7) ^ __ROR8__(v75, 1) ^ __ROR8__(v75, 8))\n           + v71\n           + ((v355 >> 6) ^ __ROR8__(v355, 19) ^ __ROL8__(v355, 3));\n      v124 = (v114 ^ v121 & (v117 ^ v114))\n           + v123\n           + 3322285676063803686LL\n           + v111\n           + (__ROL8__(v121, 23) ^ __ROR8__(v121, 14) ^ __ROR8__(v121, 18));\n      v125 = v124 + v112;\n      v126 = v124\n           + (v122 & v118 | v115 & (v122 | v118))\n           + (__ROL8__(v122, 25) ^ __ROR8__(v122, 28) ^ __ROL8__(v122, 30));\n      v361 = ((v119 >> 6) ^ __ROR8__(v119, 19) ^ __ROL8__(v119, 3))\n           + v352\n           + ((v79 >> 7) ^ __ROR8__(v79, 1) ^ __ROR8__(v79, 8))\n           + v75;\n      v127 = (v117 ^ v125 & (v121 ^ v117))\n           + v361\n           + 5560940570517711597LL\n           + v114\n           + (__ROL8__(v125, 23) ^ __ROR8__(v125, 14) ^ __ROR8__(v125, 18));\n      v128 = v348;\n      v129 = v127 + v115;\n      v130 = v127\n           + (v126 & v122 | v118 & (v126 | v122))\n           + (__ROL8__(v126, 25) ^ __ROR8__(v126, 28) ^ __ROL8__(v126, 30));\n      v131 = ((v123 >> 6) ^ __ROR8__(v123, 19) ^ __ROL8__(v123, 3))\n           + v334\n           + ((v348 >> 7) ^ __ROR8__(v348, 1) ^ __ROR8__(v348, 8))\n           + v79;\n      v349 = v131;\n      v132 = (v121 ^ v129 & (v125 ^ v121))\n           + v131\n           + 5996557281743188959LL\n           + v117\n           + (__ROL8__(v129, 23) ^ __ROR8__(v129, 14) ^ __ROR8__(v129, 18));\n      v133 = v118 + v132;\n      v134 = v338;\n      v135 = v132\n           + (v130 & v126 | v122 & (v130 | v126))\n           + (__ROL8__(v130, 25) ^ __ROR8__(v130, 28) ^ __ROL8__(v130, 30));\n      v136 = ((v361 >> 6) ^ __ROR8__(v361, 19) ^ __ROL8__(v361, 3))\n           + v336\n           + v128\n           + ((v338 >> 7) ^ __ROR8__(v338, 1) ^ __ROR8__(v338, 8));\n      v137 = v136 + 7280758554555802590LL;\n      v339 = v136;\n      v138 = v341;\n      v139 = (v125 ^ v133 & (v129 ^ v125))\n           + v137\n           + v121\n           + (__ROL8__(v133, 23) ^ __ROR8__(v133, 14) ^ __ROR8__(v133, 18));\n      v140 = v139 + v122;\n      v141 = v139\n           + (v135 & v130 | v126 & (v135 | v130))\n           + (__ROL8__(v135, 25) ^ __ROR8__(v135, 28) ^ __ROL8__(v135, 30));\n      v142 = ((v349 >> 6) ^ __ROR8__(v131, 19) ^ __ROL8__(v349, 3))\n           + v358\n           + v134\n           + ((v341 >> 7) ^ __ROR8__(v341, 1) ^ __ROR8__(v341, 8));\n      v342 = v142;\n      v143 = (v129 ^ v140 & (v133 ^ v129))\n           + v142\n           + 8532644243296465576LL\n           + v125\n           + (__ROL8__(v140, 23) ^ __ROR8__(v140, 14) ^ __ROR8__(v140, 18));\n      v144 = v126 + v143;\n      v145 = v143\n           + (v141 & v135 | v130 & (v141 | v135))\n           + (__ROL8__(v141, 25) ^ __ROR8__(v141, 28) ^ __ROL8__(v141, 30));\n      v146 = v355\n           + v138\n           + ((v325 >> 7) ^ __ROR8__(v325, 1) ^ __ROR8__(v325, 8))\n           + ((v339 >> 6) ^ __ROR8__(v339, 19) ^ __ROL8__(v339, 3));\n      v363 = v146;\n      v147 = v146 - 9096487096722542874LL;\n      v148 = v344;\n      v149 = (v133 ^ v144 & (v140 ^ v133))\n           + v147\n           + v129\n           + (__ROL8__(v144, 23) ^ __ROR8__(v144, 14) ^ __ROR8__(v144, 18));\n      v150 = v149 + v130;\n      v151 = v149\n           + (v145 & v141 | v135 & (v145 | v141))\n           + (__ROL8__(v145, 25) ^ __ROR8__(v145, 28) ^ __ROL8__(v145, 30));\n      v152 = v119\n           + v325\n           + ((v344 >> 7) ^ __ROR8__(v344, 1) ^ __ROR8__(v344, 8))\n           + ((v342 >> 6) ^ __ROR8__(v342, 19) ^ __ROL8__(v342, 3));\n      v345 = v152;\n      v153 = (v140 ^ v150 & (v144 ^ v140))\n           + v152\n           - 7894198246740708037LL\n           + v133\n           + (__ROL8__(v150, 23) ^ __ROR8__(v150, 14) ^ __ROR8__(v150, 18));\n      v154 = v135 + v153;\n      v155 = (__ROL8__(v151, 25) ^ __ROR8__(v151, 28) ^ __ROL8__(v151, 30))\n           + (v151 & v145 | v141 & (v151 | v145))\n           + v153;\n      v156 = v123\n           + v148\n           + ((v328 >> 7) ^ __ROR8__(v328, 1) ^ __ROR8__(v328, 8))\n           + ((v363 >> 6) ^ __ROR8__(v363, 19) ^ __ROL8__(v363, 3));\n      v326 = v156;\n      v157 = (v144 ^ v154 & (v150 ^ v144))\n           + v156\n           - 6719396339535248540LL\n           + v140\n           + (__ROL8__(v154, 23) ^ __ROR8__(v135 + v153, 14) ^ __ROR8__(v135 + v153, 18));\n      v158 = v141 + v157;\n      v159 = (__ROL8__(v155, 25) ^ __ROR8__(v155, 28) ^ __ROL8__(v155, 30))\n           + (v155 & v151 | v145 & (v155 | v151))\n           + v157;\n      v365 = v361\n           + v328\n           + ((v331 >> 7) ^ __ROR8__(v331, 1) ^ __ROR8__(v331, 8))\n           + ((v345 >> 6) ^ __ROR8__(v345, 19) ^ __ROL8__(v345, 3));\n      v160 = (v150 ^ v158 & (v154 ^ v150))\n           + v365\n           - 6333637450476146687LL\n           + v144\n           + (__ROL8__(v158, 23) ^ __ROR8__(v158, 14) ^ __ROR8__(v158, 18));\n      v161 = v145 + v160;\n      v162 = (__ROL8__(v159, 25) ^ __ROR8__(v159, 28) ^ __ROL8__(v159, 30))\n           + (v159 & v155 | v151 & (v159 | v155))\n           + v160;\n      v163 = v349\n           + v331\n           + ((v352 >> 7) ^ __ROR8__(v352, 1) ^ __ROR8__(v352, 8))\n           + ((v326 >> 6) ^ __ROR8__(v326, 19) ^ __ROL8__(v326, 3));\n      v332 = v163;\n      v164 = (v154 ^ v161 & (v158 ^ v154))\n           + v163\n           - 4446306890439682159LL\n           + v150\n           + (__ROL8__(v161, 23) ^ __ROR8__(v161, 14) ^ __ROR8__(v161, 18));\n      v165 = v164 + v151;\n      v166 = (__ROL8__(v162, 25) ^ __ROR8__(v162, 28) ^ __ROL8__(v162, 30))\n           + (v162 & v159 | v155 & (v162 | v159))\n           + v164;\n      v353 = v339\n           + v352\n           + ((v334 >> 7) ^ __ROR8__(v334, 1) ^ __ROR8__(v334, 8))\n           + ((v365 >> 6) ^ __ROR8__(v365, 19) ^ __ROL8__(v365, 3));\n      v167 = (v158 ^ v165 & (v161 ^ v158))\n           + v353\n           - 4076793802049405392LL\n           + v154\n           + (__ROL8__(v165, 23) ^ __ROR8__(v165, 14) ^ __ROR8__(v165, 18));\n      v168 = v167 + v155;\n      v169 = (__ROL8__(v166, 25) ^ __ROR8__(v166, 28) ^ __ROL8__(v166, 30))\n           + (v166 & v162 | v159 & (v166 | v162))\n           + v167;\n      v170 = v342\n           + v334\n           + ((v336 >> 7) ^ __ROR8__(v336, 1) ^ __ROR8__(v336, 8))\n           + ((v332 >> 6) ^ __ROR8__(v332, 19) ^ __ROL8__(v332, 3));\n      v367 = v170;\n      v171 = v170 - 3345356375505022440LL + v158;\n      v172 = v358;\n      v173 = (v161 ^ v168 & (v165 ^ v161)) + v171 + (__ROL8__(v168, 23) ^ __ROR8__(v168, 14) ^ __ROR8__(v168, 18));\n      v174 = v173 + v159;\n      v175 = (__ROL8__(v169, 25) ^ __ROR8__(v169, 28) ^ __ROL8__(v169, 30))\n           + (v169 & v166 | v162 & (v169 | v166))\n           + v173;\n      v359 = v363\n           + v336\n           + ((v358 >> 7) ^ __ROR8__(v358, 1) ^ __ROR8__(v358, 8))\n           + ((v353 >> 6) ^ __ROR8__(v353, 19) ^ __ROL8__(v353, 3));\n      v176 = (v165 ^ v174 & (v168 ^ v165))\n           + v161\n           + v359\n           - 2983346525034927856LL\n           + (__ROL8__(v174, 23) ^ __ROR8__(v174, 14) ^ __ROR8__(v174, 18));\n      v177 = v176 + v162;\n      v178 = v176\n           + (v175 & v169 | v166 & (v175 | v169))\n           + (__ROL8__(v175, 25) ^ __ROR8__(v175, 28) ^ __ROL8__(v175, 30));\n      v179 = ((v367 >> 6) ^ __ROR8__(v367, 19) ^ __ROL8__(v367, 3))\n           + v345\n           + v172\n           + ((v355 >> 7) ^ __ROR8__(v355, 1) ^ __ROR8__(v355, 8));\n      v180 = v179;\n      v377 = v179;\n      v181 = (v168 ^ v177 & (v174 ^ v168))\n           + v179\n           - 860691631967231958LL\n           + v165\n           + (__ROL8__(v177, 23) ^ __ROR8__(v177, 14) ^ __ROR8__(v177, 18));\n      v182 = v181 + v166;\n      v183 = v181\n           + (v178 & v175 | v169 & (v178 | v175))\n           + (__ROL8__(v178, 25) ^ __ROR8__(v178, 28) ^ __ROL8__(v178, 30));\n      v184 = ((v359 >> 6) ^ __ROR8__(v359, 19) ^ __ROL8__(v359, 3))\n           + v326\n           + v355\n           + ((v119 >> 7) ^ __ROR8__(v119, 1) ^ __ROR8__(v119, 8));\n      v356 = v184;\n      v185 = (v174 ^ v182 & (v177 ^ v174))\n           + v184\n           + 1182934255886127544LL\n           + v168\n           + (__ROL8__(v182, 23) ^ __ROR8__(v182, 14) ^ __ROR8__(v182, 18));\n      v186 = v185 + v169;\n      v187 = v185\n           + (v183 & v178 | v175 & (v183 | v178))\n           + (__ROL8__(v183, 25) ^ __ROR8__(v183, 28) ^ __ROL8__(v183, 30));\n      v188 = v361;\n      v189 = v365\n           + v119\n           + ((v123 >> 7) ^ __ROR8__(v123, 1) ^ __ROR8__(v123, 8))\n           + ((v180 >> 6) ^ __ROR8__(v180, 19) ^ __ROL8__(v180, 3));\n      v190 = (v177 ^ v186 & (v182 ^ v177))\n           + v189\n           + 1847814050463011016LL\n           + v174\n           + (__ROL8__(v186, 23) ^ __ROR8__(v186, 14) ^ __ROR8__(v186, 18));\n      v191 = v190 + v175;\n      v192 = v190\n           + (v187 & v183 | v178 & (v187 | v183))\n           + (__ROL8__(v187, 25) ^ __ROR8__(v187, 28) ^ __ROL8__(v187, 30));\n      v193 = v332 + v123 + ((v361 >> 7) ^ __ROR8__(v361, 1) ^ __ROR8__(v361, 8));\n      v194 = v349;\n      v195 = ((v184 >> 6) ^ __ROR8__(v184, 19) ^ __ROL8__(v184, 3)) + v193;\n      v362 = v195;\n      v196 = (v182 ^ v191 & (v186 ^ v182))\n           + v195\n           + 2177327727835720531LL\n           + v177\n           + (__ROL8__(v191, 23) ^ __ROR8__(v191, 14) ^ __ROR8__(v191, 18));\n      v197 = v196 + v178;\n      v198 = v196\n           + (__ROL8__(v192, 25) ^ __ROR8__(v192, 28) ^ __ROL8__(v192, 30))\n           + (v192 & v187 | v183 & (v192 | v187));\n      v199 = ((v189 >> 6) ^ __ROR8__(v189, 19) ^ __ROL8__(v189, 3))\n           + v353\n           + v188\n           + ((v349 >> 7) ^ __ROR8__(v349, 1) ^ __ROR8__(v349, 8));\n      v350 = v199;\n      v200 = (v186 ^ v197 & (v191 ^ v186))\n           + v199\n           + 2830643537854262169LL\n           + v182\n           + (__ROL8__(v197, 23) ^ __ROR8__(v197, 14) ^ __ROR8__(v197, 18));\n      v201 = v200 + v183;\n      v202 = v200\n           + (v198 & v192 | v187 & (v198 | v192))\n           + (__ROL8__(v198, 25) ^ __ROR8__(v198, 28) ^ __ROL8__(v198, 30));\n      v203 = ((v362 >> 6) ^ __ROR8__(v362, 19) ^ __ROL8__(v362, 3))\n           + v367\n           + v194\n           + ((v339 >> 7) ^ __ROR8__(v339, 1) ^ __ROR8__(v339, 8));\n      v204 = v203;\n      v205 = (v191 ^ v201 & (v197 ^ v191))\n           + v203\n           + 3796741975233480872LL\n           + v186\n           + (__ROL8__(v201, 23) ^ __ROR8__(v201, 14) ^ __ROR8__(v201, 18));\n      v206 = v205 + v187;\n      v207 = v205\n           + (v202 & v198 | v192 & (v202 | v198))\n           + (__ROL8__(v202, 25) ^ __ROR8__(v202, 28) ^ __ROL8__(v202, 30));\n      v208 = v359\n           + v339\n           + ((v342 >> 7) ^ __ROR8__(v342, 1) ^ __ROR8__(v342, 8))\n           + ((v350 >> 6) ^ __ROR8__(v350, 19) ^ __ROL8__(v350, 3));\n      v209 = v208 + 4115178125766777443LL;\n      v368 = v208;\n      v210 = v363;\n      v211 = (v197 ^ v206 & (v201 ^ v197))\n           + v209\n           + v191\n           + (__ROL8__(v206, 23) ^ __ROR8__(v206, 14) ^ __ROR8__(v206, 18));\n      v212 = v211 + v192;\n      v213 = v211\n           + (v207 & v202 | v198 & (v207 | v202))\n           + (__ROL8__(v207, 25) ^ __ROR8__(v207, 28) ^ __ROL8__(v207, 30));\n      v214 = (v363 >> 7) ^ __ROR8__(v363, 1) ^ __ROR8__(v363, 8);\n      v364 = v204;\n      v215 = v377 + v342 + v214 + ((v204 >> 6) ^ __ROR8__(v204, 19) ^ __ROL8__(v204, 3));\n      v216 = v215;\n      v217 = (v201 ^ v212 & (v206 ^ v201))\n           + v215\n           + 5681478168544905931LL\n           + v197\n           + (__ROL8__(v212, 23) ^ __ROR8__(v212, 14) ^ __ROR8__(v212, 18));\n      v218 = v217 + v198;\n      v219 = v217\n           + (v213 & v207 | v202 & (v213 | v207))\n           + (__ROL8__(v213, 25) ^ __ROR8__(v213, 28) ^ __ROL8__(v213, 30));\n      v220 = ((v368 >> 6) ^ __ROR8__(v368, 19) ^ __ROL8__(v368, 3))\n           + v356\n           + v210\n           + ((v345 >> 7) ^ __ROR8__(v345, 1) ^ __ROR8__(v345, 8));\n      v329 = v220;\n      v221 = (v206 ^ v218 & (v212 ^ v206))\n           + v220\n           + 6601373596472566643LL\n           + v201\n           + (__ROL8__(v218, 23) ^ __ROR8__(v218, 14) ^ __ROR8__(v218, 18));\n      v222 = v221 + v202;\n      v223 = v221\n           + (v219 & v213 | v207 & (v219 | v213))\n           + (__ROL8__(v219, 25) ^ __ROR8__(v219, 28) ^ __ROL8__(v219, 30));\n      v224 = v345 + ((v326 >> 7) ^ __ROR8__(v326, 1) ^ __ROR8__(v326, 8));\n      v346 = v216;\n      v225 = ((v216 >> 6) ^ __ROR8__(v216, 19) ^ __ROL8__(v216, 3)) + v189 + v224;\n      v226 = (v212 ^ v222 & (v218 ^ v212))\n           + v225\n           + 7507060721942968483LL\n           + v206\n           + (__ROL8__(v222, 23) ^ __ROR8__(v222, 14) ^ __ROR8__(v222, 18));\n      v227 = v226 + v207;\n      v228 = v365;\n      v366 = v225;\n      v229 = (__ROL8__(v223, 25) ^ __ROR8__(v223, 28) ^ __ROL8__(v223, 30))\n           + (v223 & v219 | v213 & (v223 | v219))\n           + v226;\n      v230 = __ROR8__(v220, 19) ^ __ROL8__(v220, 3);\n      v231 = v220;\n      v232 = v332;\n      v233 = v326 + ((v228 >> 7) ^ __ROR8__(v228, 1) ^ __ROR8__(v228, 8)) + v362 + ((v231 >> 6) ^ v230);\n      v327 = v233;\n      v234 = (v218 ^ v227 & (v222 ^ v218))\n           + v233\n           + 8399075790359081724LL\n           + v212\n           + (__ROR8__(v227, 14) ^ __ROR8__(v227, 18) ^ __ROL8__(v227, 23));\n      v235 = v234 + v213;\n      v236 = v234\n           + (__ROL8__(v229, 25) ^ __ROR8__(v229, 28) ^ __ROL8__(v229, 30))\n           + (v229 & v223 | v219 & (v229 | v223));\n      v237 = ((v225 >> 6) ^ __ROR8__(v225, 19) ^ __ROL8__(v225, 3))\n           + v228\n           + ((v332 >> 7) ^ __ROR8__(v332, 1) ^ __ROR8__(v332, 8))\n           + v350;\n      v333 = v237;\n      v238 = (v222 ^ v235 & (v227 ^ v222))\n           + v237\n           + 8693463985226723168LL\n           + v218\n           + (__ROR8__(v235, 14) ^ __ROR8__(v235, 18) ^ __ROL8__(v235, 23));\n      v239 = v238 + v219;\n      v240 = v238\n           + (__ROL8__(v236, 25) ^ __ROR8__(v236, 28) ^ __ROL8__(v236, 30))\n           + (v236 & v229 | v223 & (v236 | v229));\n      v335 = ((v327 >> 6) ^ __ROR8__(v327, 19) ^ __ROL8__(v327, 3))\n           + v232\n           + ((v353 >> 7) ^ __ROR8__(v353, 1) ^ __ROR8__(v353, 8))\n           + v364;\n      v241 = (v227 ^ v239 & (v235 ^ v227))\n           + v335\n           - 8878714635349349518LL\n           + v222\n           + (__ROR8__(v239, 14) ^ __ROR8__(v239, 18) ^ __ROL8__(v239, 23));\n      v242 = v241 + v223;\n      v243 = v241\n           + (__ROL8__(v240, 25) ^ __ROR8__(v240, 28) ^ __ROL8__(v240, 30))\n           + (v240 & v236 | v229 & (v240 | v236));\n      v244 = v353\n           + ((v367 >> 7) ^ __ROR8__(v367, 1) ^ __ROR8__(v367, 8))\n           + v368\n           + ((v237 >> 6) ^ __ROR8__(v237, 19) ^ __ROL8__(v237, 3));\n      v337 = v244;\n      v245 = (v235 ^ v242 & (v239 ^ v235))\n           + v244\n           - 8302665154208450068LL\n           + v227\n           + (__ROR8__(v242, 14) ^ __ROR8__(v242, 18) ^ __ROL8__(v242, 23));\n      v246 = v229 + v245;\n      v247 = v356;\n      v248 = (__ROL8__(v243, 25) ^ __ROR8__(v243, 28) ^ __ROL8__(v243, 30))\n           + (v243 & v240 | v236 & (v243 | v240))\n           + v245;\n      v249 = ((v335 >> 6) ^ __ROR8__(v335, 19) ^ __ROL8__(v335, 3))\n           + v346\n           + v367\n           + ((v359 >> 7) ^ __ROR8__(v359, 1) ^ __ROR8__(v359, 8));\n      v354 = v249;\n      v250 = (v239 ^ v246 & (v242 ^ v239))\n           + v249\n           - 8016688836872298968LL\n           + v235\n           + (__ROR8__(v246, 14) ^ __ROR8__(v246, 18) ^ __ROL8__(v246, 23));\n      v251 = v250 + v236;\n      v252 = v250\n           + (__ROL8__(v248, 25) ^ __ROR8__(v248, 28) ^ __ROL8__(v248, 30))\n           + (v248 & v243 | v240 & (v248 | v243));\n      v253 = ((v244 >> 6) ^ __ROR8__(v244, 19) ^ __ROL8__(v244, 3))\n           + v329\n           + v359\n           + ((v377 >> 7) ^ __ROR8__(v377, 1) ^ __ROR8__(v377, 8));\n      v340 = v253;\n      v254 = (v242 ^ v251 & (v246 ^ v242))\n           + v253\n           - 6606660893046293015LL\n           + v239\n           + (__ROR8__(v251, 14) ^ __ROR8__(v251, 18) ^ __ROL8__(v251, 23));\n      v255 = v254 + v240;\n      v256 = v254\n           + (__ROL8__(v252, 25) ^ __ROR8__(v252, 28) ^ __ROL8__(v252, 30))\n           + (v252 & v248 | v243 & (v252 | v248));\n      v257 = ((v354 >> 6) ^ __ROR8__(v354, 19) ^ __ROL8__(v354, 3))\n           + v366\n           + v377\n           + ((v356 >> 7) ^ __ROR8__(v356, 1) ^ __ROR8__(v356, 8));\n      v357 = v257;\n      v258 = (v246 ^ v255 & (v251 ^ v246))\n           + v257\n           - 4685533653050689259LL\n           + v242\n           + (__ROR8__(v255, 14) ^ __ROR8__(v255, 18) ^ __ROL8__(v255, 23));\n      v259 = v243 + v258;\n      v260 = v258\n           + (__ROL8__(v256, 25) ^ __ROR8__(v256, 28) ^ __ROL8__(v256, 30))\n           + (v256 & v252 | v248 & (v256 | v252));\n      v343 = ((v340 >> 6) ^ __ROR8__(v340, 19) ^ __ROL8__(v340, 3))\n           + v327\n           + v247\n           + ((v189 >> 7) ^ __ROR8__(v189, 1) ^ __ROR8__(v189, 8));\n      v261 = (v251 ^ (v243 + v258) & (v255 ^ v251))\n           + v343\n           - 4147400797238176981LL\n           + v246\n           + (__ROR8__(v259, 14) ^ __ROR8__(v243 + v258, 18) ^ __ROL8__(v259, 23));\n      v262 = v248 + v261;\n      v263 = v261\n           + (__ROL8__(v260, 25) ^ __ROR8__(v260, 28) ^ __ROL8__(v260, 30))\n           + (v260 & v256 | v252 & (v260 | v256));\n      v264 = v333 + ((v362 >> 7) ^ __ROR8__(v362, 1) ^ __ROR8__(v362, 8)) + v189;\n      v265 = __ROR8__(v257, 19);\n      v266 = __ROL8__(v257, 3);\n      v381 = v264 + ((v257 >> 6) ^ v265 ^ v266);\n      v360 = v264 + ((v257 >> 6) ^ v265 ^ v266);\n      v267 = (v255 ^ v262 & (v259 ^ v255))\n           + v381\n           - 3880063495543823972LL\n           + v251\n           + (__ROR8__(v262, 14) ^ __ROR8__(v262, 18) ^ __ROL8__(v262, 23));\n      v268 = v267 + v252;\n      v269 = v267\n           + (__ROL8__(v263, 25) ^ __ROR8__(v263, 28) ^ __ROL8__(v263, 30))\n           + (v263 & v260 | v256 & (v263 | v260));\n      v382 = v335\n           + v362\n           + ((v350 >> 7) ^ __ROR8__(v350, 1) ^ __ROR8__(v350, 8))\n           + ((v343 >> 6) ^ __ROR8__(v343, 19) ^ __ROL8__(v343, 3));\n      v270 = (v259 ^ v268 & (v262 ^ v259))\n           + v382\n           - 3348786107499101689LL\n           + v255\n           + (__ROR8__(v268, 14) ^ __ROR8__(v268, 18) ^ __ROL8__(v268, 23));\n      v271 = v270 + v256;\n      v272 = v270\n           + (__ROL8__(v269, 25) ^ __ROR8__(v269, 28) ^ __ROL8__(v269, 30))\n           + (v269 & v263 | v260 & (v269 | v263));\n      v273 = v337\n           + v350\n           + ((v364 >> 7) ^ __ROR8__(v364, 1) ^ __ROR8__(v364, 8))\n           + ((v360 >> 6) ^ __ROR8__(v360, 19) ^ __ROL8__(v360, 3));\n      v383 = v273;\n      v274 = (v262 ^ v271 & (v268 ^ v262))\n           + v273\n           - 1523767162380948706LL\n           + v259\n           + (__ROR8__(v271, 14) ^ __ROR8__(v271, 18) ^ __ROL8__(v271, 23));\n      v275 = v274 + v260;\n      v276 = v274\n           + (__ROL8__(v272, 25) ^ __ROR8__(v272, 28) ^ __ROL8__(v272, 30))\n           + (v272 & v269 | v263 & (v272 | v269));\n      v384 = v354\n           + v364\n           + ((v368 >> 7) ^ __ROR8__(v368, 1) ^ __ROR8__(v368, 8))\n           + ((v382 >> 6) ^ __ROR8__(v382, 19) ^ __ROL8__(v382, 3));\n      v277 = (v268 ^ v275 & (v271 ^ v268))\n           + v384\n           - 757361751448694408LL\n           + v262\n           + (__ROR8__(v275, 14) ^ __ROR8__(v275, 18) ^ __ROL8__(v275, 23));\n      v278 = v277 + v263;\n      v279 = v277\n           + (__ROL8__(v276, 25) ^ __ROR8__(v276, 28) ^ __ROL8__(v276, 30))\n           + (v276 & v272 | v269 & (v276 | v272));\n      v280 = ((v346 >> 7) ^ __ROR8__(v346, 1) ^ __ROR8__(v346, 8))\n           + v368\n           + v340\n           + ((v273 >> 6) ^ __ROR8__(v273, 19) ^ __ROL8__(v273, 3));\n      v385 = v280;\n      v281 = (v271 ^ v278 & (v275 ^ v271))\n           + v280\n           + 500013540394364858LL\n           + v268\n           + (__ROR8__(v278, 14) ^ __ROR8__(v278, 18) ^ __ROL8__(v278, 23));\n      v282 = v281 + v269;\n      v283 = v281\n           + (__ROL8__(v279, 25) ^ __ROR8__(v279, 28) ^ __ROL8__(v279, 30))\n           + (v279 & v276 | v272 & (v279 | v276));\n      v284 = __ROR8__(v384, 19);\n      v285 = v357 + v346 + ((v329 >> 7) ^ __ROR8__(v329, 1) ^ __ROR8__(v329, 8));\n      v286 = __ROL8__(v384, 3);\n      v347 = v285 + ((v384 >> 6) ^ v284 ^ v286);\n      v386 = v285 + ((v384 >> 6) ^ v284 ^ v286);\n      v287 = (v275 ^ v282 & (v278 ^ v275))\n           + v347\n           + 748580250866718886LL\n           + v271\n           + (__ROR8__(v282, 14) ^ __ROR8__(v282, 18) ^ __ROL8__(v282, 23));\n      v288 = v287 + v272;\n      v289 = v287\n           + (__ROL8__(v283, 25) ^ __ROR8__(v283, 28) ^ __ROL8__(v283, 30))\n           + (v283 & v279 | v276 & (v283 | v279));\n      v290 = ((v280 >> 6) ^ __ROR8__(v280, 19) ^ __ROL8__(v280, 3))\n           + v343\n           + v329\n           + ((v366 >> 7) ^ __ROR8__(v366, 1) ^ __ROR8__(v366, 8));\n      v387 = v290;\n      v330 = v290;\n      v291 = (v278 ^ v288 & (v282 ^ v278))\n           + v290\n           + 1242879168328830382LL\n           + v275\n           + (__ROR8__(v288, 14) ^ __ROR8__(v288, 18) ^ __ROL8__(v288, 23));\n      v292 = v291 + v276;\n      v293 = v291\n           + (__ROL8__(v289, 25) ^ __ROR8__(v289, 28) ^ __ROL8__(v289, 30))\n           + (v289 & v283 | v279 & (v289 | v283));\n      v294 = ((v347 >> 6) ^ __ROR8__(v347, 19) ^ __ROL8__(v347, 3))\n           + v360\n           + v366\n           + ((v327 >> 7) ^ __ROR8__(v327, 1) ^ __ROR8__(v327, 8));\n      v388 = v294;\n      v351 = v294;\n      v295 = (v282 ^ v292 & (v288 ^ v282))\n           + v294\n           + 1977374033974150939LL\n           + v278\n           + (__ROL8__(v292, 23) ^ __ROR8__(v292, 14) ^ __ROR8__(v292, 18));\n      v296 = v279 + v295;\n      v297 = (__ROL8__(v293, 25) ^ __ROR8__(v293, 28) ^ __ROL8__(v293, 30))\n           + (v293 & v289 | v283 & (v293 | v289))\n           + v295;\n      v389 = v327\n           + ((v333 >> 7) ^ __ROR8__(v333, 1) ^ __ROR8__(v333, 8))\n           + v382\n           + ((v330 >> 6) ^ __ROR8__(v330, 19) ^ __ROL8__(v330, 3));\n      v298 = (v288 ^ v296 & (v292 ^ v288))\n           + v389\n           + 2944078676154940804LL\n           + v282\n           + (__ROR8__(v296, 14) ^ __ROR8__(v296, 18) ^ __ROL8__(v296, 23));\n      v299 = v298 + v283;\n      v300 = v298\n           + (__ROL8__(v297, 25) ^ __ROR8__(v297, 28) ^ __ROL8__(v297, 30))\n           + (v297 & v293 | v289 & (v297 | v293));\n      v301 = v273\n           + v333\n           + ((v335 >> 7) ^ __ROR8__(v335, 1) ^ __ROR8__(v335, 8))\n           + ((v351 >> 6) ^ __ROR8__(v351, 19) ^ __ROL8__(v351, 3));\n      v390 = v301;\n      v302 = (v292 ^ v299 & (v296 ^ v292))\n           + v301\n           + 3659926193048069267LL\n           + v288\n           + (__ROR8__(v299, 14) ^ __ROR8__(v299, 18) ^ __ROL8__(v299, 23));\n      v303 = v302 + v289;\n      v304 = v302\n           + (__ROL8__(v300, 25) ^ __ROR8__(v300, 28) ^ __ROL8__(v300, 30))\n           + (v300 & v297 | v293 & (v300 | v297));\n      v391 = v384\n           + v335\n           + ((v337 >> 7) ^ __ROR8__(v337, 1) ^ __ROR8__(v337, 8))\n           + ((v389 >> 6) ^ __ROR8__(v389, 19) ^ __ROL8__(v389, 3));\n      v305 = (v296 ^ v303 & (v299 ^ v296))\n           + v391\n           + 4368137639120453308LL\n           + v292\n           + (__ROL8__(v303, 23) ^ __ROR8__(v303, 14) ^ __ROR8__(v303, 18));\n      v306 = v305 + v293;\n      v307 = (__ROL8__(v304, 25) ^ __ROR8__(v304, 28) ^ __ROL8__(v304, 30))\n           + (v304 & v300 | v297 & (v304 | v300))\n           + v305;\n      v308 = v280\n           + v337\n           + ((v354 >> 7) ^ __ROR8__(v354, 1) ^ __ROR8__(v354, 8))\n           + ((v301 >> 6) ^ __ROR8__(v301, 19) ^ __ROL8__(v301, 3));\n      v392 = v308;\n      v309 = (v299 ^ v306 & (v303 ^ v299))\n           + v308\n           + 4836135668995329356LL\n           + v296\n           + (__ROL8__(v306, 23) ^ __ROR8__(v306, 14) ^ __ROR8__(v306, 18));\n      v310 = v309 + v297;\n      v311 = (__ROL8__(v307, 25) ^ __ROR8__(v307, 28) ^ __ROL8__(v307, 30))\n           + (v307 & v304 | v300 & (v307 | v304))\n           + v309;\n      v312 = v354\n           + ((v340 >> 7) ^ __ROR8__(v340, 1) ^ __ROR8__(v340, 8))\n           + v347\n           + ((v391 >> 6) ^ __ROR8__(v391, 19) ^ __ROL8__(v391, 3));\n      v393 = v312;\n      v313 = (v303 ^ v310 & (v306 ^ v303))\n           + v312\n           + 5532061633213252278LL\n           + v299\n           + (__ROL8__(v310, 23) ^ __ROR8__(v310, 14) ^ __ROR8__(v310, 18));\n      v314 = v313 + v300;\n      v315 = (__ROL8__(v311, 25) ^ __ROR8__(v311, 28) ^ __ROL8__(v311, 30))\n           + (v311 & v307 | v304 & (v311 | v307))\n           + v313;\n      v316 = v330\n           + v340\n           + ((v357 >> 7) ^ __ROR8__(v357, 1) ^ __ROR8__(v357, 8))\n           + (__ROR8__(v308, 19) ^ __ROL8__(v308, 3) ^ (v308 >> 6));\n      v394 = v316;\n      v317 = (v306 ^ v314 & (v310 ^ v306))\n           + v316\n           + 6448918945643986474LL\n           + v303\n           + (__ROL8__(v314, 23) ^ __ROR8__(v314, 14) ^ __ROR8__(v314, 18));\n      v318 = v317 + v304;\n      v319 = (__ROL8__(v315, 25) ^ __ROR8__(v315, 28) ^ __ROL8__(v315, 30))\n           + (v315 & v311 | v307 & (v315 | v311))\n           + v317;\n      v320 = ((v312 >> 6) ^ __ROR8__(v312, 19) ^ __ROL8__(v312, 3))\n           + v357\n           + ((v343 >> 7) ^ __ROR8__(v343, 1) ^ __ROR8__(v343, 8))\n           + v351;\n      v395 = v320;\n      v321 = v320\n           + 6902733635092675308LL\n           + v306\n           + (v310 ^ v318 & (v314 ^ v310))\n           + (__ROL8__(v318, 23) ^ __ROR8__(v318, 14) ^ __ROR8__(v318, 18));\n      v322 = v321 + v307;\n      v323 = (__ROL8__(v319, 25) ^ __ROR8__(v319, 28) ^ __ROL8__(v319, 30))\n           + (v319 & v315 | v311 & (v319 | v315))\n           + v321;\n      v370 += v323;\n      v396 = ((v316 >> 6) ^ __ROR8__(v316, 19) ^ __ROL8__(v316, 3))\n           + v343\n           + ((v360 >> 7) ^ __ROR8__(v360, 1) ^ __ROR8__(v360, 8))\n           + v389;\n      v324 = (v314 ^ v322 & (v318 ^ v314))\n           + v396\n           + 7801388544844847127LL\n           + v310\n           + (__ROL8__(v322, 23) ^ __ROR8__(v322, 14) ^ __ROR8__(v322, 18));\n      v378 += (v323 & v319 | v315 & (v323 | v319))\n            + (__ROL8__(v323, 25) ^ __ROR8__(v323, 28) ^ __ROL8__(v323, 30))\n            + v324;\n      *v380 = v378;\n      v11 = v370;\n      v380[1] = v370;\n      v371 += v319;\n      v7 = v371;\n      v372 += v315;\n      v8 = v372;\n      v373 += v324 + v311;\n      v15 = v373;\n      result = v378;\n      v374 += v322;\n      v16 = v374;\n      v375 += v318;\n      v17 = v375;\n      v376 += v314;\n      v14 = v376;\n      v380[2] = v371;\n      v380[3] = v372;\n      v380[4] = v373;\n      v380[5] = v374;\n      v380[6] = v375;\n      v380[7] = v376;\n    }\n    while ( v369 < v379 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403280L", 
            "funcEndAddr": "0x406eceL", 
            "funcName": "sub_403280"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406ED0(_QWORD *a1)\n{\n  unsigned __int64 v1; // rcx\n  __int64 v2; // rax\n  __int64 v3; // rdx\n  __int64 v4; // rbp\n  bool v5; // cf\n  unsigned __int64 v6; // rdx\n\n  v1 = a1[10];\n  v2 = a1[9];\n  v3 = a1[10];\n  v4 = (-(__int64)(v1 < 0x70) & 0xFFFFFFFFFFFFFF80LL) + 256;\n  v5 = __CFADD__(a1[8], v3);\n  v6 = a1[8] + v3;\n  a1[8] = v6;\n  if ( v5 )\n    a1[9] = ++v2;\n  a1[(-(__int64)(v1 < 0x70) & 0xFFFFFFFFFFFFFFF0LL) + 41] = _byteswap_uint64((v6 >> 61) | (8 * v2));\n  a1[(-(__int64)(v1 < 0x70) & 0xFFFFFFFFFFFFFFF0LL) + 42] = ((8 * v6) >> 40) & 0xFF00 | ((8 * v6) >> 24) & 0xFF0000 | ((8 * v6) >> 8) & 0xFF000000 | ((8 * v6) >> 56) | (v6 << 11) & 0xFF00000000LL | (v6 << 59) | (v6 << 27) & 0xFF0000000000LL | (v6 << 43) & 0xFF000000000000LL;\n  memcpy((char *)a1 + v1 + 88, &unk_40C260, v4 - v1 - 16);\n  return sub_403280((unsigned __int64)(a1 + 11), v4, a1);\n}\n", 
            "funcStartAddr": "0x406ed0L", 
            "funcEndAddr": "0x406ff5L", 
            "funcName": "sub_406ED0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407000(_QWORD *a1, __int64 a2)\n{\n  sub_406ED0(a1);\n  return sub_403240((__int64)a1, a2);\n}\n", 
            "funcStartAddr": "0x407000L", 
            "funcEndAddr": "0x407022L", 
            "funcName": "sub_407000"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407030(_QWORD *a1, __int64 a2)\n{\n  sub_406ED0(a1);\n  return sub_403260((__int64)a1, a2);\n}\n", 
            "funcStartAddr": "0x407030L", 
            "funcEndAddr": "0x407052L", 
            "funcName": "sub_407030"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_407060(void *src, size_t n, __int64 a3)\n{\n  size_t v3; // r13\n  __int64 v4; // r12\n  const __m128i *v5; // rbx\n  __int64 v6; // rbp\n  __m128i *v7; // rbp\n  const __m128i *v8; // r14\n  __m128i v9; // xmm0\n  __int64 v10; // rdx\n  char *v11; // rsi\n  size_t v12; // r13\n  size_t v13; // rbp\n  unsigned __int64 v14; // rdi\n  unsigned __int64 v15; // r15\n  __int64 v16; // r14\n  unsigned __int64 v17; // rsi\n  char *v18; // rdi\n  unsigned int v19; // ecx\n  unsigned __int64 v20; // rbp\n  _QWORD *v21; // rsi\n  __int64 v22; // rcx\n\n  v3 = n;\n  v4 = a3;\n  v5 = (const __m128i *)src;\n  v6 = *(_QWORD *)(a3 + 80);\n  if ( v6 )\n  {\n    v15 = a3 + 88;\n    v16 = 256 - v6;\n    if ( 256 - v6 > n )\n      v16 = n;\n    memcpy((void *)(a3 + 88 + v6), src, v16);\n    v17 = v16 + *(_QWORD *)(v4 + 80);\n    *(_QWORD *)(v4 + 80) = v17;\n    if ( v17 > 0x80 )\n    {\n      sub_403280(v15, v17 & 0xFFFFFFFFFFFFFF80LL, (_QWORD *)v4);\n      v20 = (v16 + v6) & 0xFFFFFFFFFFFFFF80LL;\n      v21 = (_QWORD *)(v15 + v20);\n      v22 = *(_QWORD *)(v4 + 80) & 0x7FLL;\n      *(_QWORD *)(v4 + 80) = v22;\n      if ( (unsigned int)v22 >= 8 )\n      {\n        *(_QWORD *)(v4 + 88) = *v21;\n        *(_QWORD *)(v15 + (unsigned int)v22 - 8) = *(_QWORD *)((char *)v21 + (unsigned int)v22 - 8);\n        qmemcpy(\n          (void *)((v4 + 96) & 0xFFFFFFFFFFFFFFF8LL),\n          (const void *)(v20 + ((v4 + 96) & 0xFFFFFFFFFFFFFFF8LL)),\n          8LL * (((unsigned int)v15 - (((_DWORD)v4 + 96) & 0xFFFFFFF8) + (unsigned int)v22) >> 3));\n      }\n      else if ( v22 & 4 )\n      {\n        *(_DWORD *)(v4 + 88) = *(_DWORD *)v21;\n        *(_DWORD *)(v15 + (unsigned int)v22 - 4) = *(_DWORD *)((char *)v21 + (unsigned int)v22 - 4);\n      }\n      else if ( (_DWORD)v22 )\n      {\n        *(_BYTE *)(v4 + 88) = *(_BYTE *)v21;\n        if ( v22 & 2 )\n          *(_WORD *)(v15 + (unsigned int)v22 - 2) = *(_WORD *)((char *)v21 + (unsigned int)v22 - 2);\n      }\n    }\n    v5 = (const __m128i *)((char *)src + v16);\n    v3 -= v16;\n  }\n  if ( v3 > 0x7F )\n  {\n    if ( (unsigned __int8)v5 & 7 )\n    {\n      v7 = (__m128i *)(v4 + 88);\n      if ( v3 == 128 )\n      {\n        v8 = v5;\n      }\n      else\n      {\n        v8 = &v5[8 * ((v3 - 129) >> 7) + 8];\n        do\n        {\n          v9 = _mm_loadu_si128(v5);\n          v5 += 8;\n          *v7 = v9;\n          *(__m128i *)(v4 + 104) = _mm_loadu_si128(v5 - 7);\n          *(__m128i *)(v4 + 120) = _mm_loadu_si128(v5 - 6);\n          *(__m128i *)(v4 + 136) = _mm_loadu_si128(v5 - 5);\n          *(__m128i *)(v4 + 152) = _mm_loadu_si128(v5 - 4);\n          *(__m128i *)(v4 + 168) = _mm_loadu_si128(v5 - 3);\n          *(__m128i *)(v4 + 184) = _mm_loadu_si128(v5 - 2);\n          *(__m128i *)(v4 + 200) = _mm_loadu_si128(v5 - 1);\n          sub_403280(v4 + 88, 128LL, (_QWORD *)v4);\n        }\n        while ( v5 != v8 );\n        v3 = v3 - ((v3 - 129) >> 7 << 7) - 128;\n      }\nLABEL_8:\n      v10 = *(_QWORD *)(v4 + 80);\n      v11 = (char *)v7->m128i_i64 + v10;\n      if ( (unsigned int)v3 >= 8 )\n      {\n        v18 = (char *)((unsigned __int64)(v11 + 8) & 0xFFFFFFFFFFFFFFF8LL);\n        *(_QWORD *)v11 = v8->m128i_i64[0];\n        *(_QWORD *)&v11[(unsigned int)v3 - 8] = *(__int64 *)((char *)&v8->m128i_i64[-1] + (unsigned int)v3);\n        v19 = v3 + (_DWORD)v11 - (_DWORD)v18;\n        v12 = v10 + v3;\n        qmemcpy(v18, (char *)v8 - (v11 - v18), 8LL * (v19 >> 3));\n        if ( v12 <= 0x7F )\n        {\nLABEL_14:\n          *(_QWORD *)(v4 + 80) = v12;\n          return;\n        }\n      }\n      else\n      {\n        if ( v3 & 4 )\n        {\n          *(_DWORD *)v11 = v8->m128i_i64[0];\n          *(_DWORD *)&v11[(unsigned int)v3 - 4] = *(_DWORD *)((char *)v8->m128i_i64 + (unsigned int)v3 - 4);\n        }\n        else if ( (_DWORD)v3 )\n        {\n          *v11 = v8->m128i_i64[0];\n          if ( v3 & 2 )\n            *(_WORD *)&v11[(unsigned int)v3 - 2] = *(_WORD *)((char *)v8->m128i_i64 + (unsigned int)v3 - 2);\n        }\n        v12 = v10 + v3;\n        if ( v12 <= 0x7F )\n          goto LABEL_14;\n      }\n      v12 -= 128LL;\n      sub_403280((unsigned __int64)v7, 128LL, (_QWORD *)v4);\n      memcpy(v7, (const void *)(v4 + 216), v12);\n      goto LABEL_14;\n    }\n    v13 = v3;\n    v14 = (unsigned __int64)v5;\n    v3 &= 0x7Fu;\n    v5 = (const __m128i *)((char *)v5 + (v13 & 0xFFFFFFFFFFFFFF80LL));\n    sub_403280(v14, v13 & 0xFFFFFFFFFFFFFF80LL, (_QWORD *)v4);\n  }\n  if ( v3 )\n  {\n    v7 = (__m128i *)(v4 + 88);\n    v8 = v5;\n    goto LABEL_8;\n  }\n}\n", 
            "funcStartAddr": "0x407060L", 
            "funcEndAddr": "0x40736eL", 
            "funcName": "sub_407060"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4076B0(FILE *stream, __int64 a2)\n{\n  char *v2; // rax\n  char *v3; // r12\n  size_t v4; // rbx\n  int v5; // edx\n  size_t v6; // rax\n  __int64 v8; // [rsp+0h] [rbp-188h]\n  __int64 v9; // [rsp+8h] [rbp-180h]\n  __int64 v10; // [rsp+10h] [rbp-178h]\n  __int64 v11; // [rsp+18h] [rbp-170h]\n  __int64 v12; // [rsp+20h] [rbp-168h]\n  __int64 v13; // [rsp+28h] [rbp-160h]\n  __int64 v14; // [rsp+30h] [rbp-158h]\n  __int64 v15; // [rsp+38h] [rbp-150h]\n  __int64 v16; // [rsp+40h] [rbp-148h]\n  __int64 v17; // [rsp+48h] [rbp-140h]\n  __int64 v18; // [rsp+50h] [rbp-138h]\n\n  v2 = (char *)malloc(0x8048uLL);\n  if ( !v2 )\n    return 1LL;\n  v17 = 0LL;\n  v3 = v2;\n  v8 = -3766243637369397544LL;\n  v9 = 7105036623409894663LL;\n  v10 = -7973340178411365097LL;\n  v11 = 1526699215303891257LL;\n  v12 = 7436329637833083697LL;\n  v13 = -8163818279084223215LL;\n  v14 = -2662702644619276377LL;\n  v15 = 5167115440072839076LL;\n  v16 = 0LL;\n  v18 = 0LL;\nLABEL_3:\n  v4 = 0LL;\n  while ( 1 )\n  {\n    v6 = fread_unlocked(&v3[v4], 1uLL, 0x8000 - v4, stream);\n    v4 += v6;\n    if ( v4 == 0x8000 )\n    {\n      sub_403280((unsigned __int64)v3, 0x8000LL, &v8);\n      goto LABEL_3;\n    }\n    v5 = stream->_flags;\n    if ( !v6 )\n      break;\n    if ( v5 & 0x10 )\n      goto LABEL_9;\n  }\n  if ( v5 & 0x20 )\n  {\n    free(v3);\n    return 1LL;\n  }\nLABEL_9:\n  if ( v4 )\n    sub_407060(v3, v4, (__int64)&v8);\n  sub_406ED0(&v8);\n  sub_403260((__int64)&v8, a2);\n  free(v3);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4076b0L", 
            "funcEndAddr": "0x407845L", 
            "funcName": "sub_4076B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_407860(FILE *a1, int a2)\n{\n  int v2; // eax\n\n  if ( a1 )\n  {\n    v2 = fileno(a1);\n    posix_fadvise(v2, 0LL, 0LL, a2);\n  }\n}\n", 
            "funcStartAddr": "0x407860L", 
            "funcEndAddr": "0x407881L", 
            "funcName": "sub_407860"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_407890(const char *a1, const char *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  unsigned int v4; // eax\n  int v6; // er12\n  int *v7; // rax\n  int v8; // ebp\n  int *v9; // rbx\n  int *v10; // rax\n  FILE *v11; // rdi\n  int v12; // er12\n  int *v13; // rbp\n\n  v2 = fopen(a1, a2);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = fileno(v2);\n    if ( v4 <= 2 )\n    {\n      v6 = sub_409570(v4);\n      if ( v6 < 0 )\n      {\n        v10 = __errno_location();\n        v11 = v3;\n        v3 = 0LL;\n        v12 = *v10;\n        v13 = v10;\n        sub_409DB0(v11);\n        *v13 = v12;\n      }\n      else if ( (unsigned int)sub_409DB0(v3) || (v3 = fdopen(v6, a2)) == 0LL )\n      {\n        v7 = __errno_location();\n        v8 = *v7;\n        v9 = v7;\n        close(v6);\n        *v9 = v8;\n        v3 = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x407890L", 
            "funcEndAddr": "0x407923L", 
            "funcName": "sub_407890"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_407930(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60F308 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x407930L", 
            "funcEndAddr": "0x4079c9L", 
            "funcName": "sub_407930"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4079D0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40AF20();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40C331;\n      if ( !v5 )\n        v2 = (char *)&unk_40C326;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40C32D;\n    if ( !v5 )\n      v2 = (char *)&unk_40C32A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x4079d0L", 
            "funcEndAddr": "0x407ac2L", 
            "funcName": "sub_4079D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407AD0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_407AD0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_407AD0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_407AD0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_407AD0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40ADE0((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_407AD0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_407AD0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4079D0(\"`\", v11);\n        v47 = sub_4079D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_407AD0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_407AD0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_407AD0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_407AD0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_407AD0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40ADE0((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_407AD0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_407AD0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4079D0(\"`\", v11);\n        v47 = sub_4079D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401920L", 
            "funcEndAddr": "0x401925L", 
            "funcName": "sub_407AD0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407AD0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_407AD0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_407AD0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_407AD0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_407AD0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40ADE0((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_407AD0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_407AD0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4079D0(\"`\", v11);\n        v47 = sub_4079D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_407AD0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_407AD0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_407AD0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_407AD0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_407AD0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_407AD0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_407AD0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40ADE0((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_407AD0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_407AD0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4079D0(\"`\", v11);\n        v47 = sub_4079D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401920L", 
            "funcEndAddr": "0x401925L", 
            "funcName": "sub_407AD0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408D00(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60F278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_409D70();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60F278 == &xmmword_60F280 )\n    {\n      v7 = (__int128 *)sub_409B80(0LL, v9);\n      off_60F278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F280);\n    }\n    else\n    {\n      off_60F278 = (__int128 *)sub_409B80(off_60F278, v9);\n      v7 = off_60F278;\n    }\n    memset(&v7[dword_60F290], 0, 16LL * (a1 + 1 - dword_60F290));\n    dword_60F290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407AD0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409B20(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407AD0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_408D00(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60F278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_409D70();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60F278 == &xmmword_60F280 )\n    {\n      v7 = (__int128 *)sub_409B80(0LL, v9);\n      off_60F278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F280);\n    }\n    else\n    {\n      off_60F278 = (__int128 *)sub_409B80(off_60F278, v9);\n      v7 = off_60F278;\n    }\n    memset(&v7[dword_60F290], 0, 16LL * (a1 + 1 - dword_60F290));\n    dword_60F290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407AD0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409B20(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407AD0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x401925L", 
            "funcEndAddr": "0x40192aL", 
            "funcName": "sub_408D00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408D00(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60F278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_409D70();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60F278 == &xmmword_60F280 )\n    {\n      v7 = (__int128 *)sub_409B80(0LL, v9);\n      off_60F278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F280);\n    }\n    else\n    {\n      off_60F278 = (__int128 *)sub_409B80(off_60F278, v9);\n      v7 = off_60F278;\n    }\n    memset(&v7[dword_60F290], 0, 16LL * (a1 + 1 - dword_60F290));\n    dword_60F290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407AD0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409B20(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407AD0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_408D00(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60F278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_409D70();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60F278 == &xmmword_60F280 )\n    {\n      v7 = (__int128 *)sub_409B80(0LL, v9);\n      off_60F278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60F280);\n    }\n    else\n    {\n      off_60F278 = (__int128 *)sub_409B80(off_60F278, v9);\n      v7 = off_60F278;\n    }\n    memset(&v7[dword_60F290], 0, 16LL * (a1 + 1 - dword_60F290));\n    dword_60F290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_407AD0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60F320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_409B20(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_407AD0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x401925L", 
            "funcEndAddr": "0x40192aL", 
            "funcName": "sub_408D00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409220(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_409220(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40192aL", 
            "funcEndAddr": "0x40192fL", 
            "funcName": "sub_409220"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409220(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_409220(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40192aL", 
            "funcEndAddr": "0x40192fL", 
            "funcName": "sub_409220"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409290(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_408D00(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_409290(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_408D00(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40192fL", 
            "funcEndAddr": "0x401934L", 
            "funcName": "sub_409290"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409290(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_408D00(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_409290(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_408D00(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40192fL", 
            "funcEndAddr": "0x401934L", 
            "funcName": "sub_409290"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409320(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_60F450;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60F420);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60F430);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_60F440);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_408D00(0, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x409320L", 
            "funcEndAddr": "0x409390L", 
            "funcName": "sub_409320"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4093A0(char *a1)\n{\n  return sub_409320(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x4093a0L", 
            "funcEndAddr": "0x4093b1L", 
            "funcName": "sub_4093A0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4093D0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4093D0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401934L", 
            "funcEndAddr": "0x401939L", 
            "funcName": "sub_4093D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4093D0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4093D0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_408D00(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401934L", 
            "funcEndAddr": "0x401939L", 
            "funcName": "sub_4093D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409440(int a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_60F420);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60F430);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60F440);\n  v9 = qword_60F450;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_408D00(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x409440L", 
            "funcEndAddr": "0x4094acL", 
            "funcName": "sub_409440"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409570(char a1)\n{\n  return sub_409E30(a1);\n}\n", 
            "funcStartAddr": "0x409570L", 
            "funcEndAddr": "0x40957eL", 
            "funcName": "sub_409570"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409580(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_409580(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401939L", 
            "funcEndAddr": "0x40193eL", 
            "funcName": "sub_409580"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409580(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_409580(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401939L", 
            "funcEndAddr": "0x40193eL", 
            "funcName": "sub_409580"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409980(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_409580(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_409580(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x409980L", 
            "funcEndAddr": "0x4099e0L", 
            "funcName": "sub_409980"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4099E0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_409580(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_409580(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x4099e0L", 
            "funcEndAddr": "0x409a9cL", 
            "funcName": "sub_4099E0"
        }, 
        {
            "decompiledFuncCode": "int sub_409AA0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, aReportBugsTo, 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_40B5F2);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n", 
            "funcStartAddr": "0x409aa0L", 
            "funcEndAddr": "0x409b14L", 
            "funcName": "sub_409AA0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409B20(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_409D70();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409b20L", 
            "funcEndAddr": "0x409b3aL", 
            "funcName": "sub_409B20"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409B80(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_409D70();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409b80L", 
            "funcEndAddr": "0x409bb6L", 
            "funcName": "sub_409B80"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409D20(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_409B20(n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x409d20L", 
            "funcEndAddr": "0x409d48L", 
            "funcName": "sub_409D20"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_409D70()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x409d70L", 
            "funcEndAddr": "0x409da1L", 
            "funcName": "sub_409D70"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409DB0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_409F70(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409db0L", 
            "funcEndAddr": "0x409e2bL", 
            "funcName": "sub_409DB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409E30(char a1, int a2, __int64 a3)\n{\n  int v3; // ebx\n  int v5; // eax\n  int *v6; // rax\n  int v7; // edi\n  int v8; // er12\n  int *v9; // rbp\n\n  if ( a2 == 1030 )\n  {\n    if ( dword_60F458 < 0 )\n    {\n      v3 = sub_409E30(a1);\n      if ( v3 >= 0 && dword_60F458 == -1 )\n      {\nLABEL_8:\n        v5 = fcntl((unsigned __int8)v3, 1);\n        if ( v5 < 0 || fcntl((unsigned __int8)v3, 2, v5 | 1u) == -1 )\n        {\n          v6 = __errno_location();\n          v7 = v3;\n          v3 = -1;\n          v8 = *v6;\n          v9 = v6;\n          close(v7);\n          *v9 = v8;\n        }\n        return (unsigned int)v3;\n      }\n    }\n    else\n    {\n      v3 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v3 >= 0 || *__errno_location() != 22 )\n      {\n        dword_60F458 = 1;\n      }\n      else\n      {\n        v3 = sub_409E30(a1);\n        if ( v3 >= 0 )\n        {\n          dword_60F458 = -1;\n          goto LABEL_8;\n        }\n      }\n    }\n    return (unsigned int)v3;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n", 
            "funcStartAddr": "0x409e30L", 
            "funcEndAddr": "0x409f65L", 
            "funcName": "sub_409E30"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409F70(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_409FB0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x409f70L", 
            "funcEndAddr": "0x409fb0L", 
            "funcName": "sub_409F70"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409FB0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x409fb0L", 
            "funcEndAddr": "0x40a007L", 
            "funcName": "sub_409FB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A010(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x40a010L", 
            "funcEndAddr": "0x40a0efL", 
            "funcName": "sub_40A010"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A0F0(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a0f0L", 
            "funcEndAddr": "0x40a70cL", 
            "funcName": "sub_40A0F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A710(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_40A010(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_40A010((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_40A0F0(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_40A0F0(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_40A0F0(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x40a710L", 
            "funcEndAddr": "0x40acd6L", 
            "funcName": "sub_40A710"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40ACE0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_60F460 = dword_60F29C;\n  dword_60F464 = dword_60F298;\n  result = sub_40A710(a1, a2, a3, a4, a5, a6, &dword_60F460, a7);\n  dword_60F29C = dword_60F460;\n  qword_60F4A0 = qword_60F470;\n  dword_60F294 = dword_60F468;\n  return result;\n}\n", 
            "funcStartAddr": "0x40ace0L", 
            "funcEndAddr": "0x40ad36L", 
            "funcName": "sub_40ACE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AD40(int a1, __int64 a2, char *a3)\n{\n  return sub_40ACE0(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x40ad40L", 
            "funcEndAddr": "0x40ad58L", 
            "funcName": "sub_40AD40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AD60(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40ACE0(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x40ad60L", 
            "funcEndAddr": "0x40ad73L", 
            "funcName": "sub_40AD60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AD80(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40A710(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x40ad80L", 
            "funcEndAddr": "0x40ad95L", 
            "funcName": "sub_40AD80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40ADA0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40ACE0(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x40ada0L", 
            "funcEndAddr": "0x40adb6L", 
            "funcName": "sub_40ADA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40ADC0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40A710(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x40adc0L", 
            "funcEndAddr": "0x40add8L", 
            "funcName": "sub_40ADC0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_40ADE0(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_40AEC0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40ade0L", 
            "funcEndAddr": "0x40ae5aL", 
            "funcName": "sub_40ADE0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40AE60(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_409DB0(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n  }\n  else\n  {\n    if ( !result )\n      return result;\n    if ( !v1 )\n      return -(*__errno_location() != 9);\n  }\n  return -1;\n}\n", 
            "funcStartAddr": "0x40ae60L", 
            "funcEndAddr": "0x40aebdL", 
            "funcName": "sub_40AE60"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40AEC0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40aec0L", 
            "funcEndAddr": "0x40af1eL", 
            "funcName": "sub_40AEC0"
        }, 
        {
            "decompiledFuncCode": "const char *sub_40AF20()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_409DB0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_409DB0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x40af20L", 
            "funcEndAddr": "0x40b482L", 
            "funcName": "sub_40AF20"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x40b490L", 
            "funcEndAddr": "0x40b4edL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x40b4f0L", 
            "funcEndAddr": "0x40b4f1L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40B500(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_60F208 )\n    v1 = (void *)unk_60F208;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x40b500L", 
            "funcEndAddr": "0x40b518L", 
            "funcName": "sub_40B500"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B518(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_60EE30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x40b518L", 
            "funcEndAddr": "0x40b538L", 
            "funcName": "sub_40B518"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_sha384sum.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 68, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}